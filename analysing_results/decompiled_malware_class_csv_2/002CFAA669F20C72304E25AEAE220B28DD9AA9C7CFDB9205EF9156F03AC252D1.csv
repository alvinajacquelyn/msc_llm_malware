"filepath","code"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.android.accessibilityservice\AccessibilityServiceInfoCompat.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2ef14fe"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.android.accessibilityservice\AccessibilityServiceInfoCompatIcs.code","class AccessibilityServiceInfoCompatIcs {   AccessibilityServiceInfoCompatIcs(){   }   public static boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return info.getCanRetrieveWindowContent();   }   public static String getDescription(  AccessibilityServiceInfo info){     return info.getDescription();   }   public static String getId(  AccessibilityServiceInfo info){     return info.getId();   }   public static ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return info.getResolveInfo();   }   public static String getSettingsActivityName(  AccessibilityServiceInfo info){     return info.getSettingsActivityName();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.android.accessibilityservice\AccessibilityServiceInfoIcsImpl.code","static class AccessibilityServiceInfoIcsImpl extends AccessibilityServiceInfoStubImpl {   AccessibilityServiceInfoIcsImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getCanRetrieveWindowContent(info);   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getDescription(info);   }   @Override public String getId(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getId(info);   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getResolveInfo(info);   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return AccessibilityServiceInfoCompatIcs.getSettingsActivityName(info);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.android.accessibilityservice\AccessibilityServiceInfoStubImpl.code","static class AccessibilityServiceInfoStubImpl implements AccessibilityServiceInfoVersionImpl {   AccessibilityServiceInfoStubImpl(){   }   @Override public boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo info){     return false;   }   @Override public String getDescription(  AccessibilityServiceInfo info){     return null;   }   @Override public String getId(  AccessibilityServiceInfo info){     return null;   }   @Override public ResolveInfo getResolveInfo(  AccessibilityServiceInfo info){     return null;   }   @Override public String getSettingsActivityName(  AccessibilityServiceInfo info){     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.android.accessibilityservice\AccessibilityServiceInfoVersionImpl.code","interface AccessibilityServiceInfoVersionImpl {   boolean getCanRetrieveWindowContent(  AccessibilityServiceInfo accessibilityServiceInfo);   String getDescription(  AccessibilityServiceInfo accessibilityServiceInfo);   String getId(  AccessibilityServiceInfo accessibilityServiceInfo);   ResolveInfo getResolveInfo(  AccessibilityServiceInfo accessibilityServiceInfo);   String getSettingsActivityName(  AccessibilityServiceInfo accessibilityServiceInfo); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\ActivityCompatHoneycomb.code","class ActivityCompatHoneycomb {   ActivityCompatHoneycomb(){   }   public static void invalidateOptionsMenu(  Activity activity){     activity.invalidateOptionsMenu();   }   static void dump(  Activity activity,  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     activity.dump(prefix,fd,writer,args);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\BackStackEntry.code","public interface BackStackEntry {   CharSequence getBreadCrumbShortTitle();   int getBreadCrumbShortTitleRes();   CharSequence getBreadCrumbTitle();   int getBreadCrumbTitleRes();   int getId();   String getName(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\BackStackRecord.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1f38957"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\BackStackState.code","public final class BackStackState implements Parcelable {   public static final Parcelable.Creator<BackStackState> CREATOR=new Parcelable.Creator<BackStackState>(){     @Override public BackStackState createFromParcel(    Parcel in){       return new BackStackState(in);     }     @Override public BackStackState[] newArray(    int size){       return new BackStackState[size];     }   } ;   final int mBreadCrumbShortTitleRes;   final CharSequence mBreadCrumbShortTitleText;   final int mBreadCrumbTitleRes;   final CharSequence mBreadCrumbTitleText;   final int mIndex;   final String mName;   final int[] mOps;   final int mTransition;   final int mTransitionStyle;   public BackStackState(  FragmentManagerImpl fm,  BackStackRecord bse){     int pos;     int numRemoved=0;     for (BackStackRecord.Op op=bse.mHead; op != null; op=op.next) {       if (op.removed != null) {         numRemoved+=op.removed.size();       }     }     this.mOps=new int[(bse.mNumOp * 7) + numRemoved];     if (!bse.mAddToBackStack) {       throw new IllegalStateException(""Not on back stack"");     }     BackStackRecord.Op op2=bse.mHead;     int pos2=0;     while (op2 != null) {       int pos3=pos2 + 1;       this.mOps[pos2]=op2.cmd;       int pos4=pos3 + 1;       this.mOps[pos3]=op2.fragment.mIndex;       int pos5=pos4 + 1;       this.mOps[pos4]=op2.enterAnim;       int pos6=pos5 + 1;       this.mOps[pos5]=op2.exitAnim;       int pos7=pos6 + 1;       this.mOps[pos6]=op2.popEnterAnim;       int pos8=pos7 + 1;       this.mOps[pos7]=op2.popExitAnim;       if (op2.removed != null) {         int N=op2.removed.size();         this.mOps[pos8]=N;         int i=0;         int pos9=pos8 + 1;         while (i < N) {           this.mOps[pos9]=op2.removed.get(i).mIndex;           i++;           pos9++;         }         pos=pos9;       }  else {         pos=pos8 + 1;         this.mOps[pos8]=0;       }       op2=op2.next;       pos2=pos;     }     this.mTransition=bse.mTransition;     this.mTransitionStyle=bse.mTransitionStyle;     this.mName=bse.mName;     this.mIndex=bse.mIndex;     this.mBreadCrumbTitleRes=bse.mBreadCrumbTitleRes;     this.mBreadCrumbTitleText=bse.mBreadCrumbTitleText;     this.mBreadCrumbShortTitleRes=bse.mBreadCrumbShortTitleRes;     this.mBreadCrumbShortTitleText=bse.mBreadCrumbShortTitleText;   }   public BackStackState(  Parcel in){     this.mOps=in.createIntArray();     this.mTransition=in.readInt();     this.mTransitionStyle=in.readInt();     this.mName=in.readString();     this.mIndex=in.readInt();     this.mBreadCrumbTitleRes=in.readInt();     this.mBreadCrumbTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);     this.mBreadCrumbShortTitleRes=in.readInt();     this.mBreadCrumbShortTitleText=(CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);   }   public BackStackRecord instantiate(  FragmentManagerImpl fm){     BackStackRecord bse=new BackStackRecord(fm);     int pos=0;     while (pos < this.mOps.length) {       BackStackRecord.Op op=new BackStackRecord.Op();       int pos2=pos + 1;       op.cmd=this.mOps[pos];       if (FragmentManagerImpl.DEBUG) {         Log.v(""FragmentManager"",""BSE "" + bse + "" set base fragment #""+ this.mOps[pos2]);       }       int pos3=pos2 + 1;       Fragment f=fm.mActive.get(this.mOps[pos2]);       op.fragment=f;       int pos4=pos3 + 1;       op.enterAnim=this.mOps[pos3];       int pos5=pos4 + 1;       op.exitAnim=this.mOps[pos4];       int pos6=pos5 + 1;       op.popEnterAnim=this.mOps[pos5];       int pos7=pos6 + 1;       op.popExitAnim=this.mOps[pos6];       int pos8=pos7 + 1;       int N=this.mOps[pos7];       if (N > 0) {         op.removed=new ArrayList<>(N);         int i=0;         while (i < N) {           if (FragmentManagerImpl.DEBUG) {             Log.v(""FragmentManager"",""BSE "" + bse + "" set remove fragment #""+ this.mOps[pos8]);           }           Fragment r=fm.mActive.get(this.mOps[pos8]);           op.removed.add(r);           i++;           pos8++;         }       }       pos=pos8;       bse.addOp(op);     }     bse.mTransition=this.mTransition;     bse.mTransitionStyle=this.mTransitionStyle;     bse.mName=this.mName;     bse.mIndex=this.mIndex;     bse.mAddToBackStack=true;     bse.mBreadCrumbTitleRes=this.mBreadCrumbTitleRes;     bse.mBreadCrumbTitleText=this.mBreadCrumbTitleText;     bse.mBreadCrumbShortTitleRes=this.mBreadCrumbShortTitleRes;     bse.mBreadCrumbShortTitleText=this.mBreadCrumbShortTitleText;     bse.bumpBackStackNesting(1);     return bse;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeIntArray(this.mOps);     dest.writeInt(this.mTransition);     dest.writeInt(this.mTransitionStyle);     dest.writeString(this.mName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mBreadCrumbTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbTitleText,dest,0);     dest.writeInt(this.mBreadCrumbShortTitleRes);     TextUtils.writeToParcel(this.mBreadCrumbShortTitleText,dest,0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\DialogFragment.code","public class DialogFragment extends Fragment implements DialogInterface.OnCancelListener, DialogInterface.OnDismissListener {   private static final String SAVED_BACK_STACK_ID=""android:backStackId"";   private static final String SAVED_CANCELABLE=""android:cancelable"";   private static final String SAVED_DIALOG_STATE_TAG=""android:savedDialogState"";   private static final String SAVED_SHOWS_DIALOG=""android:showsDialog"";   private static final String SAVED_STYLE=""android:style"";   private static final String SAVED_THEME=""android:theme"";   public static final int STYLE_NORMAL=0;   public static final int STYLE_NO_FRAME=2;   public static final int STYLE_NO_INPUT=3;   public static final int STYLE_NO_TITLE=1;   boolean mDestroyed;   Dialog mDialog;   boolean mRemoved;   int mStyle=0;   int mTheme=0;   boolean mCancelable=true;   boolean mShowsDialog=true;   int mBackStackId=-1;   public void setStyle(  int style,  int theme){     this.mStyle=style;     if (this.mStyle == 2 || this.mStyle == 3) {       this.mTheme=R.style.Theme.Panel;     }     if (theme != 0) {       this.mTheme=theme;     }   }   public void show(  FragmentManager manager,  String tag){     FragmentTransaction ft=manager.beginTransaction();     ft.add(this,tag);     ft.commit();   }   public int show(  FragmentTransaction transaction,  String tag){     transaction.add(this,tag);     this.mRemoved=false;     this.mBackStackId=transaction.commit();     return this.mBackStackId;   }   public void dismiss(){     dismissInternal(false);   }   void dismissInternal(  boolean allowStateLoss){     if (this.mDialog != null) {       this.mDialog.dismiss();       this.mDialog=null;     }     this.mRemoved=true;     if (this.mBackStackId >= 0) {       getFragmentManager().popBackStack(this.mBackStackId,1);       this.mBackStackId=-1;       return;     }     FragmentTransaction ft=getFragmentManager().beginTransaction();     ft.remove(this);     if (allowStateLoss) {       ft.commitAllowingStateLoss();     }  else {       ft.commit();     }   }   public Dialog getDialog(){     return this.mDialog;   }   public int getTheme(){     return this.mTheme;   }   public void setCancelable(  boolean cancelable){     this.mCancelable=cancelable;     if (this.mDialog != null) {       this.mDialog.setCancelable(cancelable);     }   }   public boolean isCancelable(){     return this.mCancelable;   }   public void setShowsDialog(  boolean showsDialog){     this.mShowsDialog=showsDialog;   }   public boolean getShowsDialog(){     return this.mShowsDialog;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     this.mShowsDialog=this.mContainerId == 0;     if (savedInstanceState != null) {       this.mStyle=savedInstanceState.getInt(SAVED_STYLE,0);       this.mTheme=savedInstanceState.getInt(SAVED_THEME,0);       this.mCancelable=savedInstanceState.getBoolean(SAVED_CANCELABLE,true);       this.mShowsDialog=savedInstanceState.getBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog);       this.mBackStackId=savedInstanceState.getInt(SAVED_BACK_STACK_ID,-1);     }   }   @Override public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     if (!this.mShowsDialog) {       return super.getLayoutInflater(savedInstanceState);     }     this.mDialog=onCreateDialog(savedInstanceState);     this.mDestroyed=false; switch (this.mStyle) { case 3:       this.mDialog.getWindow().addFlags(24); case 1: case 2:     this.mDialog.requestWindowFeature(1);   break; } return (LayoutInflater)this.mDialog.getContext().getSystemService(""layout_inflater""); } public Dialog onCreateDialog(Bundle savedInstanceState){ return new Dialog(getActivity(),getTheme()); } @Override public void onCancel(DialogInterface dialog){ } @Override public void onDismiss(DialogInterface dialog){ if (!this.mRemoved) { dismissInternal(true); } } @Override public void onActivityCreated(Bundle savedInstanceState){ Bundle dialogState; super.onActivityCreated(savedInstanceState); if (this.mShowsDialog) { View view=getView(); if (view != null) {   if (view.getParent() != null) {     throw new IllegalStateException(""DialogFragment can not be attached to a container view"");   }   this.mDialog.setContentView(view); } this.mDialog.setOwnerActivity(getActivity()); this.mDialog.setCancelable(this.mCancelable); this.mDialog.setOnCancelListener(this); this.mDialog.setOnDismissListener(this); if (savedInstanceState != null && (dialogState=savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG)) != null) {   this.mDialog.onRestoreInstanceState(dialogState); } } } @Override public void onStart(){ super.onStart(); if (this.mDialog != null) { this.mRemoved=false; this.mDialog.show(); } } @Override public void onSaveInstanceState(Bundle outState){ Bundle dialogState; super.onSaveInstanceState(outState); if (this.mDialog != null && (dialogState=this.mDialog.onSaveInstanceState()) != null) { outState.putBundle(SAVED_DIALOG_STATE_TAG,dialogState); } if (this.mStyle != 0) { outState.putInt(SAVED_STYLE,this.mStyle); } if (this.mTheme != 0) { outState.putInt(SAVED_THEME,this.mTheme); } if (!this.mCancelable) { outState.putBoolean(SAVED_CANCELABLE,this.mCancelable); } if (!this.mShowsDialog) { outState.putBoolean(SAVED_SHOWS_DIALOG,this.mShowsDialog); } if (this.mBackStackId != -1) { outState.putInt(SAVED_BACK_STACK_ID,this.mBackStackId); } } @Override public void onStop(){ super.onStop(); if (this.mDialog != null) { this.mDialog.hide(); } } @Override public void onDestroyView(){ super.onDestroyView(); this.mDestroyed=true; if (this.mDialog != null) { this.mRemoved=true; this.mDialog.dismiss(); this.mDialog=null; } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\Fragment.code","public class Fragment implements ComponentCallbacks, View.OnCreateContextMenuListener {   static final int ACTIVITY_CREATED=2;   static final int CREATED=1;   static final int INITIALIZING=0;   static final int RESUMED=5;   static final int STARTED=4;   static final int STOPPED=3;   private static final HashMap<String,Class<?>> sClassMap=new HashMap<>();   FragmentActivity mActivity;   boolean mAdded;   View mAnimatingAway;   Bundle mArguments;   int mBackStackNesting;   boolean mCalled;   boolean mCheckedForLoaderManager;   ViewGroup mContainer;   int mContainerId;   boolean mDetached;   int mFragmentId;   FragmentManager mFragmentManager;   boolean mFromLayout;   boolean mHasMenu;   boolean mHidden;   boolean mInLayout;   View mInnerView;   LoaderManagerImpl mLoaderManager;   boolean mLoadersStarted;   int mNextAnim;   boolean mRemoving;   boolean mRestored;   boolean mResumed;   boolean mRetainInstance;   boolean mRetaining;   Bundle mSavedFragmentState;   SparseArray<Parcelable> mSavedViewState;   int mStateAfterAnimating;   String mTag;   Fragment mTarget;   int mTargetRequestCode;   View mView;   String mWho;   int mState=0;   int mIndex=-1;   int mTargetIndex=-1;   boolean mMenuVisible=true; public static class SavedState implements Parcelable {     public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){       @Override public SavedState createFromParcel(      Parcel in){         return new SavedState(in,null);       }       @Override public SavedState[] newArray(      int size){         return new SavedState[size];       }     } ;     final Bundle mState;     public SavedState(    Bundle state){       this.mState=state;     }     SavedState(    Parcel in,    ClassLoader loader){       this.mState=in.readBundle();       if (loader != null && this.mState != null) {         this.mState.setClassLoader(loader);       }     }     @Override public int describeContents(){       return 0;     }     @Override public void writeToParcel(    Parcel dest,    int flags){       dest.writeBundle(this.mState);     }   } public static class InstantiationException extends RuntimeException {     public InstantiationException(    String msg,    Exception cause){       super(msg,cause);     }   }   public static Fragment instantiate(  Context context,  String fname){     return instantiate(context,fname,null);   }   public static Fragment instantiate(  Context context,  String fname,  Bundle args){     try {       Class<?> clazz=sClassMap.get(fname);       if (clazz == null) {         clazz=context.getClassLoader().loadClass(fname);         sClassMap.put(fname,clazz);       }       Fragment f=(Fragment)clazz.newInstance();       if (args != null) {         args.setClassLoader(f.getClass().getClassLoader());         f.mArguments=args;       }       return f;     }  catch (    ClassNotFoundException e) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e);     } catch (    IllegalAccessException e2) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e2);     } catch (    java.lang.InstantiationException e3) {       throw new InstantiationException(""Unable to instantiate fragment "" + fname + "": make sure class name exists, is public, and has an empty constructor that is public"",e3);     }   }   public final void restoreViewState(){     if (this.mSavedViewState != null) {       this.mInnerView.restoreHierarchyState(this.mSavedViewState);       this.mSavedViewState=null;     }   }   public final void setIndex(  int index){     this.mIndex=index;     this.mWho=""android:fragment:"" + this.mIndex;   }   public final boolean isInBackStack(){     return this.mBackStackNesting > 0;   }   public final boolean equals(  Object o){     return super.equals(o);   }   public final int hashCode(){     return super.hashCode();   }   public String toString(){     StringBuilder sb=new StringBuilder(AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER);     DebugUtils.buildShortClassTag(this,sb);     if (this.mIndex >= 0) {       sb.append("" #"");       sb.append(this.mIndex);     }     if (this.mFragmentId != 0) {       sb.append("" id=0x"");       sb.append(Integer.toHexString(this.mFragmentId));     }     if (this.mTag != null) {       sb.append("" "");       sb.append(this.mTag);     }     sb.append('}');     return sb.toString();   }   public final int getId(){     return this.mFragmentId;   }   public final String getTag(){     return this.mTag;   }   public void setArguments(  Bundle args){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mArguments=args;   }   public final Bundle getArguments(){     return this.mArguments;   }   public void setInitialSavedState(  SavedState state){     if (this.mIndex >= 0) {       throw new IllegalStateException(""Fragment already active"");     }     this.mSavedFragmentState=(state == null || state.mState == null) ? null : state.mState;   }   public void setTargetFragment(  Fragment fragment,  int requestCode){     this.mTarget=fragment;     this.mTargetRequestCode=requestCode;   }   public final Fragment getTargetFragment(){     return this.mTarget;   }   public final int getTargetRequestCode(){     return this.mTargetRequestCode;   }   public final FragmentActivity getActivity(){     return this.mActivity;   }   public final Resources getResources(){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     return this.mActivity.getResources();   }   public final CharSequence getText(  int resId){     return getResources().getText(resId);   }   public final String getString(  int resId){     return getResources().getString(resId);   }   public final String getString(  int resId,  Object... formatArgs){     return getResources().getString(resId,formatArgs);   }   public final FragmentManager getFragmentManager(){     return this.mFragmentManager;   }   public final boolean isAdded(){     return this.mActivity != null && this.mAdded;   }   public final boolean isDetached(){     return this.mDetached;   }   public final boolean isRemoving(){     return this.mRemoving;   }   public final boolean isInLayout(){     return this.mInLayout;   }   public final boolean isResumed(){     return this.mResumed;   }   public final boolean isVisible(){     return (!isAdded() || isHidden() || this.mView == null || this.mView.getWindowToken() == null || this.mView.getVisibility() != 0) ? false : true;   }   public final boolean isHidden(){     return this.mHidden;   }   public void onHiddenChanged(  boolean hidden){   }   public void setRetainInstance(  boolean retain){     this.mRetainInstance=retain;   }   public final boolean getRetainInstance(){     return this.mRetainInstance;   }   public void setHasOptionsMenu(  boolean hasMenu){     if (this.mHasMenu != hasMenu) {       this.mHasMenu=hasMenu;       if (isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public void setMenuVisibility(  boolean menuVisible){     if (this.mMenuVisible != menuVisible) {       this.mMenuVisible=menuVisible;       if (this.mHasMenu && isAdded() && !isHidden()) {         this.mActivity.supportInvalidateOptionsMenu();       }     }   }   public LoaderManager getLoaderManager(){     if (this.mLoaderManager != null) {       return this.mLoaderManager;     }     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mCheckedForLoaderManager=true;     this.mLoaderManager=this.mActivity.getLoaderManager(this.mIndex,this.mLoadersStarted,true);     return this.mLoaderManager;   }   public void startActivity(  Intent intent){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,-1);   }   public void startActivityForResult(  Intent intent,  int requestCode){     if (this.mActivity == null) {       throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");     }     this.mActivity.startActivityFromFragment(this,intent,requestCode);   }   public void onActivityResult(  int requestCode,  int resultCode,  Intent data){   }   public LayoutInflater getLayoutInflater(  Bundle savedInstanceState){     return this.mActivity.getLayoutInflater();   }   public void onInflate(  Activity activity,  AttributeSet attrs,  Bundle savedInstanceState){     this.mCalled=true;   }   public void onAttach(  Activity activity){     this.mCalled=true;   }   public Animation onCreateAnimation(  int transit,  boolean enter,  int nextAnim){     return null;   }   public void onCreate(  Bundle savedInstanceState){     this.mCalled=true;   }   public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     return null;   }   public void onViewCreated(  View view,  Bundle savedInstanceState){   }   public View getView(){     return this.mView;   }   public void onActivityCreated(  Bundle savedInstanceState){     this.mCalled=true;   }   public void onStart(){     this.mCalled=true;     if (!this.mLoadersStarted) {       this.mLoadersStarted=true;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mIndex,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         this.mLoaderManager.doStart();       }     }   }   public void onResume(){     this.mCalled=true;   }   public void onSaveInstanceState(  Bundle outState){   }   @Override public void onConfigurationChanged(  Configuration newConfig){     this.mCalled=true;   }   public void onPause(){     this.mCalled=true;   }   public void onStop(){     this.mCalled=true;   }   @Override public void onLowMemory(){     this.mCalled=true;   }   public void onDestroyView(){     this.mCalled=true;   }   public void onDestroy(){     this.mCalled=true;     if (!this.mCheckedForLoaderManager) {       this.mCheckedForLoaderManager=true;       this.mLoaderManager=this.mActivity.getLoaderManager(this.mIndex,this.mLoadersStarted,false);     }     if (this.mLoaderManager != null) {       this.mLoaderManager.doDestroy();     }   }   public void initState(){     this.mIndex=-1;     this.mWho=null;     this.mAdded=false;     this.mRemoving=false;     this.mResumed=false;     this.mFromLayout=false;     this.mInLayout=false;     this.mRestored=false;     this.mBackStackNesting=0;     this.mFragmentManager=null;     this.mActivity=null;     this.mFragmentId=0;     this.mContainerId=0;     this.mTag=null;     this.mHidden=false;     this.mDetached=false;     this.mRetaining=false;     this.mLoaderManager=null;     this.mLoadersStarted=false;     this.mCheckedForLoaderManager=false;   }   public void onDetach(){     this.mCalled=true;   }   public void onCreateOptionsMenu(  Menu menu,  MenuInflater inflater){   }   public void onPrepareOptionsMenu(  Menu menu){   }   public void onDestroyOptionsMenu(){   }   public boolean onOptionsItemSelected(  MenuItem item){     return false;   }   public void onOptionsMenuClosed(  Menu menu){   }   @Override public void onCreateContextMenu(  ContextMenu menu,  View v,  ContextMenu.ContextMenuInfo menuInfo){     getActivity().onCreateContextMenu(menu,v,menuInfo);   }   public void registerForContextMenu(  View view){     view.setOnCreateContextMenuListener(this);   }   public void unregisterForContextMenu(  View view){     view.setOnCreateContextMenuListener(null);   }   public boolean onContextItemSelected(  MenuItem item){     return false;   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mFragmentId=#"");     writer.print(Integer.toHexString(this.mFragmentId));     writer.print("" mContainerId#="");     writer.print(Integer.toHexString(this.mContainerId));     writer.print("" mTag="");     writer.println(this.mTag);     writer.print(prefix);     writer.print(""mState="");     writer.print(this.mState);     writer.print("" mIndex="");     writer.print(this.mIndex);     writer.print("" mWho="");     writer.print(this.mWho);     writer.print("" mBackStackNesting="");     writer.println(this.mBackStackNesting);     writer.print(prefix);     writer.print(""mAdded="");     writer.print(this.mAdded);     writer.print("" mRemoving="");     writer.print(this.mRemoving);     writer.print("" mResumed="");     writer.print(this.mResumed);     writer.print("" mFromLayout="");     writer.print(this.mFromLayout);     writer.print("" mInLayout="");     writer.println(this.mInLayout);     writer.print(prefix);     writer.print(""mHidden="");     writer.print(this.mHidden);     writer.print("" mDetached="");     writer.print(this.mDetached);     writer.print("" mMenuVisible="");     writer.print(this.mMenuVisible);     writer.print("" mHasMenu="");     writer.println(this.mHasMenu);     writer.print(prefix);     writer.print(""mRetainInstance="");     writer.print(this.mRetainInstance);     writer.print("" mRetaining="");     writer.println(this.mRetaining);     if (this.mFragmentManager != null) {       writer.print(prefix);       writer.print(""mFragmentManager="");       writer.println(this.mFragmentManager);     }     if (this.mActivity != null) {       writer.print(prefix);       writer.print(""mActivity="");       writer.println(this.mActivity);     }     if (this.mArguments != null) {       writer.print(prefix);       writer.print(""mArguments="");       writer.println(this.mArguments);     }     if (this.mSavedFragmentState != null) {       writer.print(prefix);       writer.print(""mSavedFragmentState="");       writer.println(this.mSavedFragmentState);     }     if (this.mSavedViewState != null) {       writer.print(prefix);       writer.print(""mSavedViewState="");       writer.println(this.mSavedViewState);     }     if (this.mTarget != null) {       writer.print(prefix);       writer.print(""mTarget="");       writer.print(this.mTarget);       writer.print("" mTargetRequestCode="");       writer.println(this.mTargetRequestCode);     }     if (this.mNextAnim != 0) {       writer.print(prefix);       writer.print(""mNextAnim="");       writer.println(this.mNextAnim);     }     if (this.mContainer != null) {       writer.print(prefix);       writer.print(""mContainer="");       writer.println(this.mContainer);     }     if (this.mView != null) {       writer.print(prefix);       writer.print(""mView="");       writer.println(this.mView);     }     if (this.mInnerView != null) {       writer.print(prefix);       writer.print(""mInnerView="");       writer.println(this.mView);     }     if (this.mAnimatingAway != null) {       writer.print(prefix);       writer.print(""mAnimatingAway="");       writer.println(this.mAnimatingAway);       writer.print(prefix);       writer.print(""mStateAfterAnimating="");       writer.println(this.mStateAfterAnimating);     }     if (this.mLoaderManager != null) {       writer.print(prefix);       writer.println(""Loader Manager:"");       this.mLoaderManager.dump(prefix + ""  "",fd,writer,args);     }   }   public void performStart(){     onStart();     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportStart();     }   }   public void performStop(){     onStop();   }   public void performReallyStop(){     if (this.mLoadersStarted) {       this.mLoadersStarted=false;       if (!this.mCheckedForLoaderManager) {         this.mCheckedForLoaderManager=true;         this.mLoaderManager=this.mActivity.getLoaderManager(this.mIndex,this.mLoadersStarted,false);       }       if (this.mLoaderManager != null) {         if (!this.mActivity.mRetaining) {           this.mLoaderManager.doStop();         }  else {           this.mLoaderManager.doRetain();         }       }     }   }   public void performDestroyView(){     onDestroyView();     if (this.mLoaderManager != null) {       this.mLoaderManager.doReportNextStart();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentActivity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3321291a"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentManager.code","public abstract class FragmentManager {   public static final int POP_BACK_STACK_INCLUSIVE=1; public interface BackStackEntry {     CharSequence getBreadCrumbShortTitle();     int getBreadCrumbShortTitleRes();     CharSequence getBreadCrumbTitle();     int getBreadCrumbTitleRes();     int getId();     String getName();   } public interface OnBackStackChangedListener {     void onBackStackChanged();   }   public abstract void addOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract FragmentTransaction beginTransaction();   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract boolean executePendingTransactions();   public abstract Fragment findFragmentById(  int i);   public abstract Fragment findFragmentByTag(  String str);   public abstract BackStackEntry getBackStackEntryAt(  int i);   public abstract int getBackStackEntryCount();   public abstract Fragment getFragment(  Bundle bundle,  String str);   public abstract void popBackStack();   public abstract void popBackStack(  int i,  int i2);   public abstract void popBackStack(  String str,  int i);   public abstract boolean popBackStackImmediate();   public abstract boolean popBackStackImmediate(  int i,  int i2);   public abstract boolean popBackStackImmediate(  String str,  int i);   public abstract void putFragment(  Bundle bundle,  String str,  Fragment fragment);   public abstract void removeOnBackStackChangedListener(  OnBackStackChangedListener onBackStackChangedListener);   public abstract Fragment.SavedState saveFragmentInstanceState(  Fragment fragment);   @Deprecated public FragmentTransaction openTransaction(){     return beginTransaction();   }   public static void enableDebugLogging(  boolean enabled){     FragmentManagerImpl.DEBUG=enabled;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentManagerImpl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@bd09a26"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentManagerState.code","public final class FragmentManagerState implements Parcelable {   public static final Parcelable.Creator<FragmentManagerState> CREATOR=new Parcelable.Creator<FragmentManagerState>(){     @Override public FragmentManagerState createFromParcel(    Parcel in){       return new FragmentManagerState(in);     }     @Override public FragmentManagerState[] newArray(    int size){       return new FragmentManagerState[size];     }   } ;   FragmentState[] mActive;   int[] mAdded;   BackStackState[] mBackStack;   public FragmentManagerState(){   }   public FragmentManagerState(  Parcel in){     this.mActive=(FragmentState[])in.createTypedArray(FragmentState.CREATOR);     this.mAdded=in.createIntArray();     this.mBackStack=(BackStackState[])in.createTypedArray(BackStackState.CREATOR);   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeTypedArray(this.mActive,flags);     dest.writeIntArray(this.mAdded);     dest.writeTypedArray(this.mBackStack,flags);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentPagerAdapter.code","public abstract class FragmentPagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentPagerAdapter"";   private FragmentTransaction mCurTransaction=null;   private Fragment mCurrentPrimaryItem=null;   private final FragmentManager mFragmentManager;   public abstract Fragment getItem(  int i);   public FragmentPagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  View container){   }   @Override public Object instantiateItem(  View container,  int position){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     String name=makeFragmentName(container.getId(),position);     Fragment fragment=this.mFragmentManager.findFragmentByTag(name);     if (fragment != null) {       this.mCurTransaction.attach(fragment);     }  else {       fragment=getItem(position);       this.mCurTransaction.add(container.getId(),fragment,makeFragmentName(container.getId(),position));     }     if (fragment != this.mCurrentPrimaryItem) {       fragment.setMenuVisibility(DEBUG);     }     return fragment;   }   @Override public void destroyItem(  View container,  int position,  Object object){     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     this.mCurTransaction.detach((Fragment)object);   }   @Override public void setPrimaryItem(  View container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  View container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     return null;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){   }   private static String makeFragmentName(  int viewId,  int index){     return ""android:switcher:"" + viewId + "":""+ index;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentState.code","public final class FragmentState implements Parcelable {   public static final Parcelable.Creator<FragmentState> CREATOR=new Parcelable.Creator<FragmentState>(){     @Override public FragmentState createFromParcel(    Parcel in){       return new FragmentState(in);     }     @Override public FragmentState[] newArray(    int size){       return new FragmentState[size];     }   } ;   final Bundle mArguments;   final String mClassName;   final int mContainerId;   final boolean mDetached;   final int mFragmentId;   final boolean mFromLayout;   final int mIndex;   Fragment mInstance;   final boolean mRetainInstance;   Bundle mSavedFragmentState;   final String mTag;   public FragmentState(  Fragment frag){     this.mClassName=frag.getClass().getName();     this.mIndex=frag.mIndex;     this.mFromLayout=frag.mFromLayout;     this.mFragmentId=frag.mFragmentId;     this.mContainerId=frag.mContainerId;     this.mTag=frag.mTag;     this.mRetainInstance=frag.mRetainInstance;     this.mDetached=frag.mDetached;     this.mArguments=frag.mArguments;   }   public FragmentState(  Parcel in){     this.mClassName=in.readString();     this.mIndex=in.readInt();     this.mFromLayout=in.readInt() != 0;     this.mFragmentId=in.readInt();     this.mContainerId=in.readInt();     this.mTag=in.readString();     this.mRetainInstance=in.readInt() != 0;     this.mDetached=in.readInt() != 0;     this.mArguments=in.readBundle();     this.mSavedFragmentState=in.readBundle();   }   public Fragment instantiate(  FragmentActivity activity){     if (this.mInstance != null) {       return this.mInstance;     }     if (this.mArguments != null) {       this.mArguments.setClassLoader(activity.getClassLoader());     }     this.mInstance=Fragment.instantiate(activity,this.mClassName,this.mArguments);     if (this.mSavedFragmentState != null) {       this.mSavedFragmentState.setClassLoader(activity.getClassLoader());       this.mInstance.mSavedFragmentState=this.mSavedFragmentState;     }     this.mInstance.setIndex(this.mIndex);     this.mInstance.mFromLayout=this.mFromLayout;     this.mInstance.mRestored=true;     this.mInstance.mFragmentId=this.mFragmentId;     this.mInstance.mContainerId=this.mContainerId;     this.mInstance.mTag=this.mTag;     this.mInstance.mRetainInstance=this.mRetainInstance;     this.mInstance.mDetached=this.mDetached;     this.mInstance.mFragmentManager=activity.mFragments;     return this.mInstance;   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeString(this.mClassName);     dest.writeInt(this.mIndex);     dest.writeInt(this.mFromLayout ? 1 : 0);     dest.writeInt(this.mFragmentId);     dest.writeInt(this.mContainerId);     dest.writeString(this.mTag);     dest.writeInt(this.mRetainInstance ? 1 : 0);     dest.writeInt(this.mDetached ? 1 : 0);     dest.writeBundle(this.mArguments);     dest.writeBundle(this.mSavedFragmentState);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentStatePagerAdapter.code","public abstract class FragmentStatePagerAdapter extends PagerAdapter {   private static final boolean DEBUG=false;   private static final String TAG=""FragmentStatePagerAdapter"";   private final FragmentManager mFragmentManager;   private FragmentTransaction mCurTransaction=null;   private ArrayList<Fragment.SavedState> mSavedState=new ArrayList<>();   private ArrayList<Fragment> mFragments=new ArrayList<>();   private Fragment mCurrentPrimaryItem=null;   public abstract Fragment getItem(  int i);   public FragmentStatePagerAdapter(  FragmentManager fm){     this.mFragmentManager=fm;   }   @Override public void startUpdate(  View container){   }   @Override public Object instantiateItem(  View container,  int position){     Fragment.SavedState fss;     Fragment f;     if (this.mFragments.size() <= position || (f=this.mFragments.get(position)) == null) {       if (this.mCurTransaction == null) {         this.mCurTransaction=this.mFragmentManager.beginTransaction();       }       Fragment fragment=getItem(position);       if (this.mSavedState.size() > position && (fss=this.mSavedState.get(position)) != null) {         fragment.setInitialSavedState(fss);       }       while (this.mFragments.size() <= position) {         this.mFragments.add(null);       }       fragment.setMenuVisibility(DEBUG);       this.mFragments.set(position,fragment);       this.mCurTransaction.add(container.getId(),fragment);       return fragment;     }     return f;   }   @Override public void destroyItem(  View container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (this.mCurTransaction == null) {       this.mCurTransaction=this.mFragmentManager.beginTransaction();     }     while (this.mSavedState.size() <= position) {       this.mSavedState.add(null);     }     this.mSavedState.set(position,this.mFragmentManager.saveFragmentInstanceState(fragment));     this.mFragments.set(position,null);     this.mCurTransaction.remove(fragment);   }   @Override public void setPrimaryItem(  View container,  int position,  Object object){     Fragment fragment=(Fragment)object;     if (fragment != this.mCurrentPrimaryItem) {       if (this.mCurrentPrimaryItem != null) {         this.mCurrentPrimaryItem.setMenuVisibility(DEBUG);       }       if (fragment != null) {         fragment.setMenuVisibility(true);       }       this.mCurrentPrimaryItem=fragment;     }   }   @Override public void finishUpdate(  View container){     if (this.mCurTransaction != null) {       this.mCurTransaction.commitAllowingStateLoss();       this.mCurTransaction=null;       this.mFragmentManager.executePendingTransactions();     }   }   @Override public boolean isViewFromObject(  View view,  Object object){     if (((Fragment)object).getView() == view) {       return true;     }     return DEBUG;   }   @Override public Parcelable saveState(){     Bundle state=null;     if (this.mSavedState.size() > 0) {       state=new Bundle();       Fragment.SavedState[] fss=new Fragment.SavedState[this.mSavedState.size()];       this.mSavedState.toArray(fss);       state.putParcelableArray(""states"",fss);     }     for (int i=0; i < this.mFragments.size(); i++) {       Fragment f=this.mFragments.get(i);       if (f != null) {         if (state == null) {           state=new Bundle();         }         String key=""f"" + i;         this.mFragmentManager.putFragment(state,key,f);       }     }     return state;   }   @Override public void restoreState(  Parcelable state,  ClassLoader loader){     if (state != null) {       Bundle bundle=(Bundle)state;       bundle.setClassLoader(loader);       Parcelable[] fss=bundle.getParcelableArray(""states"");       this.mSavedState.clear();       this.mFragments.clear();       if (fss != null) {         for (        Parcelable parcelable : fss) {           this.mSavedState.add((Fragment.SavedState)parcelable);         }       }       Iterable<String> keys=bundle.keySet();       for (      String key : keys) {         if (key.startsWith(""f"")) {           int index=Integer.parseInt(key.substring(1));           Fragment f=this.mFragmentManager.getFragment(bundle,key);           if (f != null) {             while (this.mFragments.size() <= index) {               this.mFragments.add(null);             }             f.setMenuVisibility(DEBUG);             this.mFragments.set(index,f);           }  else {             Log.w(TAG,""Bad fragment at key "" + key);           }         }       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentTag.code","static class FragmentTag {   public static final int[] Fragment={R.attr.name,R.attr.id,R.attr.tag};   public static final int Fragment_id=1;   public static final int Fragment_name=0;   public static final int Fragment_tag=2;   FragmentTag(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\FragmentTransaction.code","public abstract class FragmentTransaction {   public static final int TRANSIT_ENTER_MASK=4096;   public static final int TRANSIT_EXIT_MASK=8192;   public static final int TRANSIT_FRAGMENT_CLOSE=8194;   public static final int TRANSIT_FRAGMENT_FADE=4099;   public static final int TRANSIT_FRAGMENT_OPEN=4097;   public static final int TRANSIT_NONE=0;   public static final int TRANSIT_UNSET=-1;   public abstract FragmentTransaction add(  int i,  Fragment fragment);   public abstract FragmentTransaction add(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction add(  Fragment fragment,  String str);   public abstract FragmentTransaction addToBackStack(  String str);   public abstract FragmentTransaction attach(  Fragment fragment);   public abstract int commit();   public abstract int commitAllowingStateLoss();   public abstract FragmentTransaction detach(  Fragment fragment);   public abstract FragmentTransaction disallowAddToBackStack();   public abstract FragmentTransaction hide(  Fragment fragment);   public abstract boolean isAddToBackStackAllowed();   public abstract boolean isEmpty();   public abstract FragmentTransaction remove(  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment);   public abstract FragmentTransaction replace(  int i,  Fragment fragment,  String str);   public abstract FragmentTransaction setBreadCrumbShortTitle(  int i);   public abstract FragmentTransaction setBreadCrumbShortTitle(  CharSequence charSequence);   public abstract FragmentTransaction setBreadCrumbTitle(  int i);   public abstract FragmentTransaction setBreadCrumbTitle(  CharSequence charSequence);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2);   public abstract FragmentTransaction setCustomAnimations(  int i,  int i2,  int i3,  int i4);   public abstract FragmentTransaction setTransition(  int i);   public abstract FragmentTransaction setTransitionStyle(  int i);   public abstract FragmentTransaction show(  Fragment fragment); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\HCSparseArray.code","public class HCSparseArray<E> {   private static final Object DELETED=new Object();   private boolean mGarbage;   private int[] mKeys;   private int mSize;   private Object[] mValues;   public HCSparseArray(){     this(10);   }   public HCSparseArray(  int initialCapacity){     this.mGarbage=false;     int initialCapacity2=idealIntArraySize(initialCapacity);     this.mKeys=new int[initialCapacity2];     this.mValues=new Object[initialCapacity2];     this.mSize=0;   }   public E get(  int key){     return get(key,null);   }   public E get(  int i,  E e){     int binarySearch=binarySearch(this.mKeys,0,this.mSize,i);     return (binarySearch < 0 || this.mValues[binarySearch] == DELETED) ? e : (E)this.mValues[binarySearch];   }   public void delete(  int key){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0 && this.mValues[i] != DELETED) {       this.mValues[i]=DELETED;       this.mGarbage=true;     }   }   public void remove(  int key){     delete(key);   }   public void removeAt(  int index){     if (this.mValues[index] != DELETED) {       this.mValues[index]=DELETED;       this.mGarbage=true;     }   }   private void gc(){     int n=this.mSize;     int o=0;     int[] keys=this.mKeys;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       Object val=values[i];       if (val != DELETED) {         if (i != o) {           keys[o]=keys[i];           values[o]=val;         }         o++;       }     }     this.mGarbage=false;     this.mSize=o;   }   public void put(  int key,  E value){     int i=binarySearch(this.mKeys,0,this.mSize,key);     if (i >= 0) {       this.mValues[i]=value;       return;     }     int i2=i ^ (-1);     if (i2 < this.mSize && this.mValues[i2] == DELETED) {       this.mKeys[i2]=key;       this.mValues[i2]=value;       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();       i2=binarySearch(this.mKeys,0,this.mSize,key) ^ (-1);     }     if (this.mSize >= this.mKeys.length) {       int n=idealIntArraySize(this.mSize + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     if (this.mSize - i2 != 0) {       System.arraycopy(this.mKeys,i2,this.mKeys,i2 + 1,this.mSize - i2);       System.arraycopy(this.mValues,i2,this.mValues,i2 + 1,this.mSize - i2);     }     this.mKeys[i2]=key;     this.mValues[i2]=value;     this.mSize++;   }   public int size(){     if (this.mGarbage) {       gc();     }     return this.mSize;   }   public int keyAt(  int index){     if (this.mGarbage) {       gc();     }     return this.mKeys[index];   }   public E valueAt(  int i){     if (this.mGarbage) {       gc();     }     return (E)this.mValues[i];   }   public void setValueAt(  int index,  E value){     if (this.mGarbage) {       gc();     }     this.mValues[index]=value;   }   public int indexOfKey(  int key){     if (this.mGarbage) {       gc();     }     return binarySearch(this.mKeys,0,this.mSize,key);   }   public int indexOfValue(  E value){     if (this.mGarbage) {       gc();     }     for (int i=0; i < this.mSize; i++) {       if (this.mValues[i] == value) {         return i;       }     }     return -1;   }   public void clear(){     int n=this.mSize;     Object[] values=this.mValues;     for (int i=0; i < n; i++) {       values[i]=null;     }     this.mSize=0;     this.mGarbage=false;   }   public void append(  int key,  E value){     if (this.mSize != 0 && key <= this.mKeys[this.mSize - 1]) {       put(key,value);       return;     }     if (this.mGarbage && this.mSize >= this.mKeys.length) {       gc();     }     int pos=this.mSize;     if (pos >= this.mKeys.length) {       int n=idealIntArraySize(pos + 1);       int[] nkeys=new int[n];       Object[] nvalues=new Object[n];       System.arraycopy(this.mKeys,0,nkeys,0,this.mKeys.length);       System.arraycopy(this.mValues,0,nvalues,0,this.mValues.length);       this.mKeys=nkeys;       this.mValues=nvalues;     }     this.mKeys[pos]=key;     this.mValues[pos]=value;     this.mSize=pos + 1;   }   private static int binarySearch(  int[] a,  int start,  int len,  int key){     int high=start + len;     int low=start - 1;     while (high - low > 1) {       int guess=(high + low) / 2;       if (a[guess] < key) {         low=guess;       }  else {         high=guess;       }     }     if (high != start + len) {       return a[high] != key ? high ^ (-1) : high;     }     int high2=(start + len) ^ (-1);     return high2;   }   private void checkIntegrity(){     for (int i=1; i < this.mSize; i++) {       if (this.mKeys[i] <= this.mKeys[i - 1]) {         for (int j=0; j < this.mSize; j++) {           Log.e(""FAIL"",j + "": "" + this.mKeys[j]+ "" -> ""+ this.mValues[j]);         }         throw new RuntimeException();       }     }   }   static int idealByteArraySize(  int need){     for (int i=4; i < 32; i++) {       if (need <= (1 << i) - 12) {         return (1 << i) - 12;       }     }     return need;   }   static int idealIntArraySize(  int need){     return idealByteArraySize(need * 4) / 4;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\InstantiationException.code","public static class InstantiationException extends RuntimeException {   public InstantiationException(  String msg,  Exception cause){     super(msg,cause);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\ListFragment.code","public class ListFragment extends Fragment {   static final int INTERNAL_EMPTY_ID=16711681;   static final int INTERNAL_LIST_CONTAINER_ID=16711683;   static final int INTERNAL_PROGRESS_CONTAINER_ID=16711682;   ListAdapter mAdapter;   CharSequence mEmptyText;   View mEmptyView;   ListView mList;   View mListContainer;   boolean mListShown;   View mProgressContainer;   TextView mStandardEmptyView;   private final Handler mHandler=new Handler();   private final Runnable mRequestFocus=new Runnable(){     @Override public void run(){       ListFragment.this.mList.focusableViewAvailable(ListFragment.this.mList);     }   } ;   private final AdapterView.OnItemClickListener mOnClickListener=new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){       ListFragment.this.onListItemClick((ListView)parent,v,position,id);     }   } ;   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     Context context=getActivity();     FrameLayout frameLayout=new FrameLayout(context);     LinearLayout pframe=new LinearLayout(context);     pframe.setId(INTERNAL_PROGRESS_CONTAINER_ID);     pframe.setOrientation(1);     pframe.setVisibility(8);     pframe.setGravity(17);     ProgressBar progress=new ProgressBar(context,null,R.attr.progressBarStyleLarge);     pframe.addView(progress,new FrameLayout.LayoutParams(-2,-2));     frameLayout.addView(pframe,new FrameLayout.LayoutParams(-1,-1));     FrameLayout lframe=new FrameLayout(context);     lframe.setId(INTERNAL_LIST_CONTAINER_ID);     TextView tv=new TextView(getActivity());     tv.setId(INTERNAL_EMPTY_ID);     tv.setGravity(17);     lframe.addView(tv,new FrameLayout.LayoutParams(-1,-1));     ListView lv=new ListView(getActivity());     lv.setId(R.id.list);     lv.setDrawSelectorOnTop(false);     lframe.addView(lv,new FrameLayout.LayoutParams(-1,-1));     frameLayout.addView(lframe,new FrameLayout.LayoutParams(-1,-1));     frameLayout.setLayoutParams(new FrameLayout.LayoutParams(-1,-1));     return frameLayout;   }   @Override public void onViewCreated(  View view,  Bundle savedInstanceState){     super.onViewCreated(view,savedInstanceState);     ensureList();   }   @Override public void onDestroyView(){     this.mHandler.removeCallbacks(this.mRequestFocus);     this.mList=null;     this.mListShown=false;     this.mListContainer=null;     this.mProgressContainer=null;     this.mEmptyView=null;     this.mStandardEmptyView=null;     super.onDestroyView();   }   public void onListItemClick(  ListView l,  View v,  int position,  long id){   }   public void setListAdapter(  ListAdapter adapter){     boolean hadAdapter=this.mAdapter != null;     this.mAdapter=adapter;     if (this.mList != null) {       this.mList.setAdapter(adapter);       if (!this.mListShown && !hadAdapter) {         setListShown(true,getView().getWindowToken() != null);       }     }   }   public void setSelection(  int position){     ensureList();     this.mList.setSelection(position);   }   public int getSelectedItemPosition(){     ensureList();     return this.mList.getSelectedItemPosition();   }   public long getSelectedItemId(){     ensureList();     return this.mList.getSelectedItemId();   }   public ListView getListView(){     ensureList();     return this.mList;   }   public void setEmptyText(  CharSequence text){     ensureList();     if (this.mStandardEmptyView == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     this.mStandardEmptyView.setText(text);     if (this.mEmptyText == null) {       this.mList.setEmptyView(this.mStandardEmptyView);     }     this.mEmptyText=text;   }   public void setListShown(  boolean shown){     setListShown(shown,true);   }   public void setListShownNoAnimation(  boolean shown){     setListShown(shown,false);   }   private void setListShown(  boolean shown,  boolean animate){     ensureList();     if (this.mProgressContainer == null) {       throw new IllegalStateException(""Can't be used with a custom content view"");     }     if (this.mListShown != shown) {       this.mListShown=shown;       if (shown) {         if (animate) {           this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));           this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         }  else {           this.mProgressContainer.clearAnimation();           this.mListContainer.clearAnimation();         }         this.mProgressContainer.setVisibility(8);         this.mListContainer.setVisibility(0);         return;       }       if (animate) {         this.mProgressContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));         this.mListContainer.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));       }  else {         this.mProgressContainer.clearAnimation();         this.mListContainer.clearAnimation();       }       this.mProgressContainer.setVisibility(0);       this.mListContainer.setVisibility(8);     }   }   public ListAdapter getListAdapter(){     return this.mAdapter;   }   private void ensureList(){     if (this.mList == null) {       View root=getView();       if (root == null) {         throw new IllegalStateException(""Content view not yet created"");       }       if (root instanceof ListView) {         this.mList=(ListView)root;       }  else {         this.mStandardEmptyView=(TextView)root.findViewById(INTERNAL_EMPTY_ID);         if (this.mStandardEmptyView == null) {           this.mEmptyView=root.findViewById(R.id.empty);         }  else {           this.mStandardEmptyView.setVisibility(8);         }         this.mProgressContainer=root.findViewById(INTERNAL_PROGRESS_CONTAINER_ID);         this.mListContainer=root.findViewById(INTERNAL_LIST_CONTAINER_ID);         View rawListView=root.findViewById(R.id.list);         if (!(rawListView instanceof ListView)) {           if (rawListView == null) {             throw new RuntimeException(""Your content must have a ListView whose id attribute is 'android.R.id.list'"");           }           throw new RuntimeException(""Content has view with id attribute 'android.R.id.list' that is not a ListView class"");         }         this.mList=(ListView)rawListView;         if (this.mEmptyView != null) {           this.mList.setEmptyView(this.mEmptyView);         }  else         if (this.mEmptyText != null) {           this.mStandardEmptyView.setText(this.mEmptyText);           this.mList.setEmptyView(this.mStandardEmptyView);         }       }       this.mListShown=true;       this.mList.setOnItemClickListener(this.mOnClickListener);       if (this.mAdapter != null) {         ListAdapter adapter=this.mAdapter;         this.mAdapter=null;         setListAdapter(adapter);       }  else       if (this.mProgressContainer != null) {         setListShown(false,false);       }       this.mHandler.post(this.mRequestFocus);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\LoaderCallbacks.code","public interface LoaderCallbacks<D> {   Loader<D> onCreateLoader(  int i,  Bundle bundle);   void onLoadFinished(  Loader<D> loader,  D d);   void onLoaderReset(  Loader<D> loader); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\LoaderInfo.code","public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {   final Bundle mArgs;   LoaderManager.LoaderCallbacks<Object> mCallbacks;   Object mData;   boolean mDeliveredData;   boolean mDestroyed;   boolean mHaveData;   final int mId;   boolean mListenerRegistered;   Loader<Object> mLoader;   LoaderInfo mPendingLoader;   boolean mReportNextStart;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   public LoaderInfo(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callbacks){     this.mId=id;     this.mArgs=args;     this.mCallbacks=callbacks;   }   void start(){     if (this.mRetaining && this.mRetainingStarted) {       this.mStarted=true;       return;     }     if (!this.mStarted) {       this.mStarted=true;       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);       }       if (this.mLoader == null && this.mCallbacks != null) {         this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);       }       if (this.mLoader != null) {         if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {           throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);         }         if (!this.mListenerRegistered) {           this.mLoader.registerListener(this.mId,this);           this.mListenerRegistered=true;         }         this.mLoader.startLoading();       }     }   }   void retain(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);     }     this.mRetaining=true;     this.mRetainingStarted=this.mStarted;     this.mStarted=false;     this.mCallbacks=null;   }   void finishRetain(){     if (this.mRetaining) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);       }       this.mRetaining=false;       if (this.mStarted != this.mRetainingStarted && !this.mStarted) {         stop();       }     }     if (this.mStarted && this.mHaveData && !this.mReportNextStart) {       callOnLoadFinished(this.mLoader,this.mData);     }   }   void reportStart(){     if (this.mStarted && this.mReportNextStart) {       this.mReportNextStart=false;       if (this.mHaveData) {         callOnLoadFinished(this.mLoader,this.mData);       }     }   }   void stop(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);     }     this.mStarted=false;     if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {       this.mListenerRegistered=false;       this.mLoader.unregisterListener(this);       this.mLoader.stopLoading();     }   }   void destroy(){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);     }     this.mDestroyed=true;     boolean needReset=this.mDeliveredData;     this.mDeliveredData=false;     if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);       }       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";       }       try {         this.mCallbacks.onLoaderReset(this.mLoader);       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }     this.mCallbacks=null;     this.mData=null;     this.mHaveData=false;     if (this.mLoader != null) {       if (this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);       }       this.mLoader.reset();     }     if (this.mPendingLoader != null) {       this.mPendingLoader.destroy();     }   }   @Override public void onLoadComplete(  Loader<Object> loader,  Object data){     if (LoaderManagerImpl.DEBUG) {       Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);     }     if (this.mDestroyed) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");         return;       }       return;     }     if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");         return;       }       return;     }     LoaderInfo pending=this.mPendingLoader;     if (pending != null) {       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);       }       this.mPendingLoader=null;       LoaderManagerImpl.this.mLoaders.put(this.mId,null);       destroy();       LoaderManagerImpl.this.installLoader(pending);       return;     }     if (this.mData != data || !this.mHaveData) {       this.mData=data;       this.mHaveData=true;       if (this.mStarted) {         callOnLoadFinished(loader,data);       }     }     LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);     if (info != null && info != this) {       info.mDeliveredData=false;       info.destroy();       LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);     }   }   void callOnLoadFinished(  Loader<Object> loader,  Object data){     if (this.mCallbacks != null) {       String lastBecause=null;       if (LoaderManagerImpl.this.mActivity != null) {         lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;         LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";       }       try {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));         }         this.mCallbacks.onLoadFinished(loader,data);         this.mDeliveredData=true;       }   finally {         if (LoaderManagerImpl.this.mActivity != null) {           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;         }       }     }   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     sb.append(""LoaderInfo{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" #"");     sb.append(this.mId);     sb.append("" : "");     DebugUtils.buildShortClassTag(this.mLoader,sb);     sb.append(""}}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mArgs="");     writer.println(this.mArgs);     writer.print(prefix);     writer.print(""mCallbacks="");     writer.println(this.mCallbacks);     writer.print(prefix);     writer.print(""mLoader="");     writer.println(this.mLoader);     if (this.mLoader != null) {       this.mLoader.dump(prefix + ""  "",fd,writer,args);     }     if (this.mHaveData || this.mDeliveredData) {       writer.print(prefix);       writer.print(""mHaveData="");       writer.print(this.mHaveData);       writer.print(""  mDeliveredData="");       writer.println(this.mDeliveredData);       writer.print(prefix);       writer.print(""mData="");       writer.println(this.mData);     }     writer.print(prefix);     writer.print(""mStarted="");     writer.print(this.mStarted);     writer.print("" mReportNextStart="");     writer.print(this.mReportNextStart);     writer.print("" mDestroyed="");     writer.println(this.mDestroyed);     writer.print(prefix);     writer.print(""mRetaining="");     writer.print(this.mRetaining);     writer.print("" mRetainingStarted="");     writer.print(this.mRetainingStarted);     writer.print("" mListenerRegistered="");     writer.println(this.mListenerRegistered);     if (this.mPendingLoader != null) {       writer.print(prefix);       writer.println(""Pending Loader "");       writer.print(this.mPendingLoader);       writer.println("":"");       this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\LoaderManager.code","public abstract class LoaderManager { public interface LoaderCallbacks<D> {     Loader<D> onCreateLoader(    int i,    Bundle bundle);     void onLoadFinished(    Loader<D> loader,    D d);     void onLoaderReset(    Loader<D> loader);   }   public abstract void destroyLoader(  int i);   public abstract void dump(  String str,  FileDescriptor fileDescriptor,  PrintWriter printWriter,  String[] strArr);   public abstract <D>Loader<D> getLoader(  int i);   public abstract <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public abstract <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderCallbacks<D> loaderCallbacks);   public static void enableDebugLogging(  boolean enabled){     LoaderManagerImpl.DEBUG=enabled;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\LoaderManagerImpl.code","public class LoaderManagerImpl extends LoaderManager {   static boolean DEBUG=false;   static final String TAG=""LoaderManager"";   FragmentActivity mActivity;   boolean mCreatingLoader;   boolean mRetaining;   boolean mRetainingStarted;   boolean mStarted;   final HCSparseArray<LoaderInfo> mLoaders=new HCSparseArray<>();   final HCSparseArray<LoaderInfo> mInactiveLoaders=new HCSparseArray<>(); public final class LoaderInfo implements Loader.OnLoadCompleteListener<Object> {     final Bundle mArgs;     LoaderManager.LoaderCallbacks<Object> mCallbacks;     Object mData;     boolean mDeliveredData;     boolean mDestroyed;     boolean mHaveData;     final int mId;     boolean mListenerRegistered;     Loader<Object> mLoader;     LoaderInfo mPendingLoader;     boolean mReportNextStart;     boolean mRetaining;     boolean mRetainingStarted;     boolean mStarted;     public LoaderInfo(    int id,    Bundle args,    LoaderManager.LoaderCallbacks<Object> callbacks){       this.mId=id;       this.mArgs=args;       this.mCallbacks=callbacks;     }     void start(){       if (this.mRetaining && this.mRetainingStarted) {         this.mStarted=true;         return;       }       if (!this.mStarted) {         this.mStarted=true;         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Starting: "" + this);         }         if (this.mLoader == null && this.mCallbacks != null) {           this.mLoader=this.mCallbacks.onCreateLoader(this.mId,this.mArgs);         }         if (this.mLoader != null) {           if (this.mLoader.getClass().isMemberClass() && !Modifier.isStatic(this.mLoader.getClass().getModifiers())) {             throw new IllegalArgumentException(""Object returned from onCreateLoader must not be a non-static inner member class: "" + this.mLoader);           }           if (!this.mListenerRegistered) {             this.mLoader.registerListener(this.mId,this);             this.mListenerRegistered=true;           }           this.mLoader.startLoading();         }       }     }     void retain(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Retaining: "" + this);       }       this.mRetaining=true;       this.mRetainingStarted=this.mStarted;       this.mStarted=false;       this.mCallbacks=null;     }     void finishRetain(){       if (this.mRetaining) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Finished Retaining: "" + this);         }         this.mRetaining=false;         if (this.mStarted != this.mRetainingStarted && !this.mStarted) {           stop();         }       }       if (this.mStarted && this.mHaveData && !this.mReportNextStart) {         callOnLoadFinished(this.mLoader,this.mData);       }     }     void reportStart(){       if (this.mStarted && this.mReportNextStart) {         this.mReportNextStart=false;         if (this.mHaveData) {           callOnLoadFinished(this.mLoader,this.mData);         }       }     }     void stop(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Stopping: "" + this);       }       this.mStarted=false;       if (!this.mRetaining && this.mLoader != null && this.mListenerRegistered) {         this.mListenerRegistered=false;         this.mLoader.unregisterListener(this);         this.mLoader.stopLoading();       }     }     void destroy(){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""  Destroying: "" + this);       }       this.mDestroyed=true;       boolean needReset=this.mDeliveredData;       this.mDeliveredData=false;       if (this.mCallbacks != null && this.mLoader != null && this.mHaveData && needReset) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Reseting: "" + this);         }         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoaderReset"";         }         try {           this.mCallbacks.onLoaderReset(this.mLoader);         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }       this.mCallbacks=null;       this.mData=null;       this.mHaveData=false;       if (this.mLoader != null) {         if (this.mListenerRegistered) {           this.mListenerRegistered=false;           this.mLoader.unregisterListener(this);         }         this.mLoader.reset();       }       if (this.mPendingLoader != null) {         this.mPendingLoader.destroy();       }     }     @Override public void onLoadComplete(    Loader<Object> loader,    Object data){       if (LoaderManagerImpl.DEBUG) {         Log.v(LoaderManagerImpl.TAG,""onLoadComplete: "" + this);       }       if (this.mDestroyed) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- destroyed"");           return;         }         return;       }       if (LoaderManagerImpl.this.mLoaders.get(this.mId) != this) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Ignoring load complete -- not active"");           return;         }         return;       }       LoaderInfo pending=this.mPendingLoader;       if (pending != null) {         if (LoaderManagerImpl.DEBUG) {           Log.v(LoaderManagerImpl.TAG,""  Switching to pending loader: "" + pending);         }         this.mPendingLoader=null;         LoaderManagerImpl.this.mLoaders.put(this.mId,null);         destroy();         LoaderManagerImpl.this.installLoader(pending);         return;       }       if (this.mData != data || !this.mHaveData) {         this.mData=data;         this.mHaveData=true;         if (this.mStarted) {           callOnLoadFinished(loader,data);         }       }       LoaderInfo info=LoaderManagerImpl.this.mInactiveLoaders.get(this.mId);       if (info != null && info != this) {         info.mDeliveredData=false;         info.destroy();         LoaderManagerImpl.this.mInactiveLoaders.remove(this.mId);       }     }     void callOnLoadFinished(    Loader<Object> loader,    Object data){       if (this.mCallbacks != null) {         String lastBecause=null;         if (LoaderManagerImpl.this.mActivity != null) {           lastBecause=LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause;           LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=""onLoadFinished"";         }         try {           if (LoaderManagerImpl.DEBUG) {             Log.v(LoaderManagerImpl.TAG,""  onLoadFinished in "" + loader + "": ""+ loader.dataToString(data));           }           this.mCallbacks.onLoadFinished(loader,data);           this.mDeliveredData=true;         }   finally {           if (LoaderManagerImpl.this.mActivity != null) {             LoaderManagerImpl.this.mActivity.mFragments.mNoTransactionsBecause=lastBecause;           }         }       }     }     public String toString(){       StringBuilder sb=new StringBuilder(64);       sb.append(""LoaderInfo{"");       sb.append(Integer.toHexString(System.identityHashCode(this)));       sb.append("" #"");       sb.append(this.mId);       sb.append("" : "");       DebugUtils.buildShortClassTag(this.mLoader,sb);       sb.append(""}}"");       return sb.toString();     }     public void dump(    String prefix,    FileDescriptor fd,    PrintWriter writer,    String[] args){       writer.print(prefix);       writer.print(""mId="");       writer.print(this.mId);       writer.print("" mArgs="");       writer.println(this.mArgs);       writer.print(prefix);       writer.print(""mCallbacks="");       writer.println(this.mCallbacks);       writer.print(prefix);       writer.print(""mLoader="");       writer.println(this.mLoader);       if (this.mLoader != null) {         this.mLoader.dump(prefix + ""  "",fd,writer,args);       }       if (this.mHaveData || this.mDeliveredData) {         writer.print(prefix);         writer.print(""mHaveData="");         writer.print(this.mHaveData);         writer.print(""  mDeliveredData="");         writer.println(this.mDeliveredData);         writer.print(prefix);         writer.print(""mData="");         writer.println(this.mData);       }       writer.print(prefix);       writer.print(""mStarted="");       writer.print(this.mStarted);       writer.print("" mReportNextStart="");       writer.print(this.mReportNextStart);       writer.print("" mDestroyed="");       writer.println(this.mDestroyed);       writer.print(prefix);       writer.print(""mRetaining="");       writer.print(this.mRetaining);       writer.print("" mRetainingStarted="");       writer.print(this.mRetainingStarted);       writer.print("" mListenerRegistered="");       writer.println(this.mListenerRegistered);       if (this.mPendingLoader != null) {         writer.print(prefix);         writer.println(""Pending Loader "");         writer.print(this.mPendingLoader);         writer.println("":"");         this.mPendingLoader.dump(prefix + ""  "",fd,writer,args);       }     }   }   public LoaderManagerImpl(  FragmentActivity activity,  boolean started){     this.mActivity=activity;     this.mStarted=started;   }   public void updateActivity(  FragmentActivity activity){     this.mActivity=activity;   }   private LoaderInfo createLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     LoaderInfo info=new LoaderInfo(id,args,callback);     Loader<Object> loader=callback.onCreateLoader(id,args);     info.mLoader=loader;     return info;   }   private LoaderInfo createAndInstallLoader(  int id,  Bundle args,  LoaderManager.LoaderCallbacks<Object> callback){     try {       this.mCreatingLoader=true;       LoaderInfo info=createLoader(id,args,callback);       installLoader(info);       return info;     }   finally {       this.mCreatingLoader=false;     }   }   void installLoader(  LoaderInfo info){     this.mLoaders.put(info.mId,info);     if (this.mStarted) {       info.start();     }   }   @Override public <D>Loader<D> initLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""initLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo == null) {       loaderInfo=createAndInstallLoader(i,bundle,loaderCallbacks);       if (DEBUG) {         Log.v(TAG,""  Created new loader "" + loaderInfo);       }     }  else {       if (DEBUG) {         Log.v(TAG,""  Re-using existing loader "" + loaderInfo);       }       loaderInfo.mCallbacks=loaderCallbacks;     }     if (loaderInfo.mHaveData && this.mStarted) {       loaderInfo.callOnLoadFinished(loaderInfo.mLoader,loaderInfo.mData);     }     return (Loader<D>)loaderInfo.mLoader;   }   @Override public <D>Loader<D> restartLoader(  int i,  Bundle bundle,  LoaderManager.LoaderCallbacks<D> loaderCallbacks){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (DEBUG) {       Log.v(TAG,""restartLoader in "" + this + "": args=""+ bundle);     }     if (loaderInfo != null) {       LoaderInfo loaderInfo2=this.mInactiveLoaders.get(i);       if (loaderInfo2 != null) {         if (loaderInfo.mHaveData) {           if (DEBUG) {             Log.v(TAG,""  Removing last inactive loader: "" + loaderInfo);           }           loaderInfo2.mDeliveredData=false;           loaderInfo2.destroy();           loaderInfo.mLoader.abandon();           this.mInactiveLoaders.put(i,loaderInfo);         }  else         if (!loaderInfo.mStarted) {           if (DEBUG) {             Log.v(TAG,""  Current loader is stopped; replacing"");           }           this.mLoaders.put(i,null);           loaderInfo.destroy();         }  else {           if (loaderInfo.mPendingLoader != null) {             if (DEBUG) {               Log.v(TAG,""  Removing pending loader: "" + loaderInfo.mPendingLoader);             }             loaderInfo.mPendingLoader.destroy();             loaderInfo.mPendingLoader=null;           }           if (DEBUG) {             Log.v(TAG,""  Enqueuing as new pending loader"");           }           loaderInfo.mPendingLoader=createLoader(i,bundle,loaderCallbacks);           return (Loader<D>)loaderInfo.mPendingLoader.mLoader;         }       }  else {         if (DEBUG) {           Log.v(TAG,""  Making last loader inactive: "" + loaderInfo);         }         loaderInfo.mLoader.abandon();         this.mInactiveLoaders.put(i,loaderInfo);       }     }     return (Loader<D>)createAndInstallLoader(i,bundle,loaderCallbacks).mLoader;   }   @Override public void destroyLoader(  int id){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     if (DEBUG) {       Log.v(TAG,""destroyLoader in "" + this + "" of ""+ id);     }     int idx=this.mLoaders.indexOfKey(id);     if (idx >= 0) {       LoaderInfo info=this.mLoaders.valueAt(idx);       this.mLoaders.removeAt(idx);       info.destroy();     }     int idx2=this.mInactiveLoaders.indexOfKey(id);     if (idx2 >= 0) {       LoaderInfo info2=this.mInactiveLoaders.valueAt(idx2);       this.mInactiveLoaders.removeAt(idx2);       info2.destroy();     }   }   @Override public <D>Loader<D> getLoader(  int i){     if (this.mCreatingLoader) {       throw new IllegalStateException(""Called while creating a loader"");     }     LoaderInfo loaderInfo=this.mLoaders.get(i);     if (loaderInfo != null) {       if (loaderInfo.mPendingLoader != null) {         return (Loader<D>)loaderInfo.mPendingLoader.mLoader;       }       return (Loader<D>)loaderInfo.mLoader;     }     return null;   }   public void doStart(){     if (DEBUG) {       Log.v(TAG,""Starting in "" + this);     }     if (this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStart when already started: "" + this,e);     }  else {       this.mStarted=true;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).start();       }     }   }   public void doStop(){     if (DEBUG) {       Log.v(TAG,""Stopping in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doStop when not started: "" + this,e);     }  else {       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).stop();       }       this.mStarted=false;     }   }   public void doRetain(){     if (DEBUG) {       Log.v(TAG,""Retaining in "" + this);     }     if (!this.mStarted) {       RuntimeException e=new RuntimeException(""here"");       e.fillInStackTrace();       Log.w(TAG,""Called doRetain when not started: "" + this,e);     }  else {       this.mRetaining=true;       this.mStarted=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).retain();       }     }   }   public void finishRetain(){     if (this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Finished Retaining in "" + this);       }       this.mRetaining=false;       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).finishRetain();       }     }   }   public void doReportNextStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).mReportNextStart=true;     }   }   public void doReportStart(){     for (int i=this.mLoaders.size() - 1; i >= 0; i--) {       this.mLoaders.valueAt(i).reportStart();     }   }   public void doDestroy(){     if (!this.mRetaining) {       if (DEBUG) {         Log.v(TAG,""Destroying Active in "" + this);       }       for (int i=this.mLoaders.size() - 1; i >= 0; i--) {         this.mLoaders.valueAt(i).destroy();       }     }     if (DEBUG) {       Log.v(TAG,""Destroying Inactive in "" + this);     }     for (int i2=this.mInactiveLoaders.size() - 1; i2 >= 0; i2--) {       this.mInactiveLoaders.valueAt(i2).destroy();     }     this.mInactiveLoaders.clear();   }   public String toString(){     StringBuilder sb=new StringBuilder(AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER);     sb.append(""LoaderManager{"");     sb.append(Integer.toHexString(System.identityHashCode(this)));     sb.append("" in "");     DebugUtils.buildShortClassTag(this.mActivity,sb);     sb.append(""}}"");     return sb.toString();   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     if (this.mLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Active Loaders:"");       String innerPrefix=prefix + ""    "";       for (int i=0; i < this.mLoaders.size(); i++) {         LoaderInfo li=this.mLoaders.valueAt(i);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mLoaders.keyAt(i));         writer.print("": "");         writer.println(li.toString());         li.dump(innerPrefix,fd,writer,args);       }     }     if (this.mInactiveLoaders.size() > 0) {       writer.print(prefix);       writer.println(""Inactive Loaders:"");       String innerPrefix2=prefix + ""    "";       for (int i2=0; i2 < this.mInactiveLoaders.size(); i2++) {         LoaderInfo li2=this.mInactiveLoaders.valueAt(i2);         writer.print(prefix);         writer.print(""  #"");         writer.print(this.mInactiveLoaders.keyAt(i2));         writer.print("": "");         writer.println(li2.toString());         li2.dump(innerPrefix2,fd,writer,args);       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\NonConfigurationInstances.code","static final class NonConfigurationInstances {   Object activity;   HashMap<String,Object> children;   Object custom;   ArrayList<Fragment> fragments;   HCSparseArray<LoaderManagerImpl> loaders;   NonConfigurationInstances(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\NoSaveStateFrameLayout.code","public class NoSaveStateFrameLayout extends FrameLayout {   public static ViewGroup wrap(  View child){     NoSaveStateFrameLayout wrapper=new NoSaveStateFrameLayout(child.getContext());     ViewGroup.LayoutParams childParams=child.getLayoutParams();     if (childParams != null) {       wrapper.setLayoutParams(childParams);     }     FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(-1,-1);     child.setLayoutParams(lp);     wrapper.addView(child);     return wrapper;   }   public NoSaveStateFrameLayout(  Context context){     super(context);   }   @Override protected void dispatchSaveInstanceState(  SparseArray<Parcelable> container){     dispatchFreezeSelfOnly(container);   }   @Override protected void dispatchRestoreInstanceState(  SparseArray<Parcelable> container){     dispatchThawSelfOnly(container);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\OnBackStackChangedListener.code","public interface OnBackStackChangedListener {   void onBackStackChanged(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\Op.code","public static final class Op {   int cmd;   int enterAnim;   int exitAnim;   Fragment fragment;   Op next;   int popEnterAnim;   int popExitAnim;   Op prev;   ArrayList<Fragment> removed; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\SavedState.code","public static class SavedState implements Parcelable {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in,null);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   final Bundle mState;   public SavedState(  Bundle state){     this.mState=state;   }   SavedState(  Parcel in,  ClassLoader loader){     this.mState=in.readBundle();     if (loader != null && this.mState != null) {       this.mState.setClassLoader(loader);     }   }   @Override public int describeContents(){     return 0;   }   @Override public void writeToParcel(  Parcel dest,  int flags){     dest.writeBundle(this.mState);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.app\SuperNotCalledException.code","final class SuperNotCalledException extends AndroidRuntimeException {   public SuperNotCalledException(  String msg){     super(msg);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\AsyncTaskLoader.code","public abstract class AsyncTaskLoader<D> extends Loader<D> {   static final boolean DEBUG=false;   static final String TAG=""AsyncTaskLoader"";   volatile AsyncTaskLoader<D>.LoadTask mCancellingTask;   Handler mHandler;   long mLastLoadCompleteTime;   volatile AsyncTaskLoader<D>.LoadTask mTask;   long mUpdateThrottle;   public abstract D loadInBackground(); public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {     private CountDownLatch done=new CountDownLatch(1);     D result;     boolean waiting;     LoadTask(){     }     @Override public D doInBackground(    Void... voidArr){       this.result=(D)AsyncTaskLoader.this.onLoadInBackground();       return this.result;     }     @Override protected void onPostExecute(    D data){       try {         AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);       }   finally {         this.done.countDown();       }     }     @Override protected void onCancelled(){       try {         AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);       }   finally {         this.done.countDown();       }     }     @Override public void run(){       this.waiting=AsyncTaskLoader.DEBUG;       AsyncTaskLoader.this.executePendingTask();     }   }   public AsyncTaskLoader(  Context context){     super(context);     this.mLastLoadCompleteTime=-10000L;   }   public void setUpdateThrottle(  long delayMS){     this.mUpdateThrottle=delayMS;     if (delayMS != 0) {       this.mHandler=new Handler();     }   }   @Override public void onForceLoad(){     super.onForceLoad();     cancelLoad();     this.mTask=new LoadTask();     executePendingTask();   }   public boolean cancelLoad(){     boolean cancelled=DEBUG;     if (this.mTask != null) {       if (this.mCancellingTask != null) {         if (this.mTask.waiting) {           this.mTask.waiting=DEBUG;           this.mHandler.removeCallbacks(this.mTask);         }         this.mTask=null;       }  else       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);         this.mTask=null;       }  else {         cancelled=this.mTask.cancel(DEBUG);         if (cancelled) {           this.mCancellingTask=this.mTask;         }         this.mTask=null;       }     }     return cancelled;   }   public void onCanceled(  D data){   }   void executePendingTask(){     if (this.mCancellingTask == null && this.mTask != null) {       if (this.mTask.waiting) {         this.mTask.waiting=DEBUG;         this.mHandler.removeCallbacks(this.mTask);       }       if (this.mUpdateThrottle > 0) {         long now=SystemClock.uptimeMillis();         if (now < this.mLastLoadCompleteTime + this.mUpdateThrottle) {           this.mTask.waiting=true;           this.mHandler.postAtTime(this.mTask,this.mLastLoadCompleteTime + this.mUpdateThrottle);           return;         }       }       this.mTask.executeOnExecutor(ModernAsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);     }   }   void dispatchOnCancelled(  AsyncTaskLoader<D>.LoadTask task,  D data){     onCanceled(data);     if (this.mCancellingTask == task) {       this.mLastLoadCompleteTime=SystemClock.uptimeMillis();       this.mCancellingTask=null;       executePendingTask();     }   }   void dispatchOnLoadComplete(  AsyncTaskLoader<D>.LoadTask task,  D data){     if (this.mTask != task) {       dispatchOnCancelled(task,data);     }  else {       if (isAbandoned()) {         onCanceled(data);         return;       }       this.mLastLoadCompleteTime=SystemClock.uptimeMillis();       this.mTask=null;       deliverResult(data);     }   }   protected D onLoadInBackground(){     return loadInBackground();   }   public void waitForLoader(){     AsyncTaskLoader<D>.LoadTask task=this.mTask;     if (task != null) {       try {         ((LoadTask)task).done.await();       }  catch (      InterruptedException e) {       }     }   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     if (this.mTask != null) {       writer.print(prefix);       writer.print(""mTask="");       writer.print(this.mTask);       writer.print("" waiting="");       writer.println(this.mTask.waiting);     }     if (this.mCancellingTask != null) {       writer.print(prefix);       writer.print(""mCancellingTask="");       writer.print(this.mCancellingTask);       writer.print("" waiting="");       writer.println(this.mCancellingTask.waiting);     }     if (this.mUpdateThrottle != 0) {       writer.print(prefix);       writer.print(""mUpdateThrottle="");       TimeUtils.formatDuration(this.mUpdateThrottle,writer);       writer.print("" mLastLoadCompleteTime="");       TimeUtils.formatDuration(this.mLastLoadCompleteTime,SystemClock.uptimeMillis(),writer);       writer.println();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\AsyncTaskResult.code","public static class AsyncTaskResult<Data> {   final Data[] mData;   final ModernAsyncTask mTask;   AsyncTaskResult(  ModernAsyncTask task,  Data... data){     this.mTask=task;     this.mData=data;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\BroadcastRecord.code","public static class BroadcastRecord {   final Intent intent;   final ArrayList<ReceiverRecord> receivers;   BroadcastRecord(  Intent _intent,  ArrayList<ReceiverRecord> _receivers){     this.intent=_intent;     this.receivers=_receivers;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\CursorLoader.code","public class CursorLoader extends AsyncTaskLoader<Cursor> {   Cursor mCursor;   final Loader<Cursor>.ForceLoadContentObserver mObserver;   String[] mProjection;   String mSelection;   String[] mSelectionArgs;   String mSortOrder;   Uri mUri;   @Override public Cursor loadInBackground(){     Cursor cursor=getContext().getContentResolver().query(this.mUri,this.mProjection,this.mSelection,this.mSelectionArgs,this.mSortOrder);     if (cursor != null) {       cursor.getCount();       registerContentObserver(cursor,this.mObserver);     }     return cursor;   }   void registerContentObserver(  Cursor cursor,  ContentObserver observer){     cursor.registerContentObserver(this.mObserver);   }   @Override public void deliverResult(  Cursor cursor){     if (isReset()) {       if (cursor != null) {         cursor.close();         return;       }       return;     }     Cursor oldCursor=this.mCursor;     this.mCursor=cursor;     if (isStarted()) {       super.deliverResult((CursorLoader)cursor);     }     if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {       oldCursor.close();     }   }   public CursorLoader(  Context context){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();   }   public CursorLoader(  Context context,  Uri uri,  String[] projection,  String selection,  String[] selectionArgs,  String sortOrder){     super(context);     this.mObserver=new Loader.ForceLoadContentObserver();     this.mUri=uri;     this.mProjection=projection;     this.mSelection=selection;     this.mSelectionArgs=selectionArgs;     this.mSortOrder=sortOrder;   }   @Override protected void onStartLoading(){     if (this.mCursor != null) {       deliverResult(this.mCursor);     }     if (takeContentChanged() || this.mCursor == null) {       forceLoad();     }   }   @Override protected void onStopLoading(){     cancelLoad();   }   @Override public void onCanceled(  Cursor cursor){     if (cursor != null && !cursor.isClosed()) {       cursor.close();     }   }   @Override public void onReset(){     super.onReset();     onStopLoading();     if (this.mCursor != null && !this.mCursor.isClosed()) {       this.mCursor.close();     }     this.mCursor=null;   }   public Uri getUri(){     return this.mUri;   }   public void setUri(  Uri uri){     this.mUri=uri;   }   public String[] getProjection(){     return this.mProjection;   }   public void setProjection(  String[] projection){     this.mProjection=projection;   }   public String getSelection(){     return this.mSelection;   }   public void setSelection(  String selection){     this.mSelection=selection;   }   public String[] getSelectionArgs(){     return this.mSelectionArgs;   }   public void setSelectionArgs(  String[] selectionArgs){     this.mSelectionArgs=selectionArgs;   }   public String getSortOrder(){     return this.mSortOrder;   }   public void setSortOrder(  String sortOrder){     this.mSortOrder=sortOrder;   }   @Override public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     super.dump(prefix,fd,writer,args);     writer.print(prefix);     writer.print(""mUri="");     writer.println(this.mUri);     writer.print(prefix);     writer.print(""mProjection="");     writer.println(Arrays.toString(this.mProjection));     writer.print(prefix);     writer.print(""mSelection="");     writer.println(this.mSelection);     writer.print(prefix);     writer.print(""mSelectionArgs="");     writer.println(Arrays.toString(this.mSelectionArgs));     writer.print(prefix);     writer.print(""mSortOrder="");     writer.println(this.mSortOrder);     writer.print(prefix);     writer.print(""mCursor="");     writer.println(this.mCursor);     writer.print(prefix);     writer.print(""mContentChanged="");     writer.println(this.mContentChanged);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\ForceLoadContentObserver.code","public final class ForceLoadContentObserver extends ContentObserver {   public ForceLoadContentObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     Loader.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\InternalHandler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@dd3586e"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\Loader.code","public class Loader<D> {   Context mContext;   int mId;   OnLoadCompleteListener<D> mListener;   boolean mStarted=false;   boolean mAbandoned=false;   boolean mReset=true;   boolean mContentChanged=false; public interface OnLoadCompleteListener<D> {     void onLoadComplete(    Loader<D> loader,    D d);   } public final class ForceLoadContentObserver extends ContentObserver {     public ForceLoadContentObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       Loader.this.onContentChanged();     }   }   public Loader(  Context context){     this.mContext=context.getApplicationContext();   }   public void deliverResult(  D data){     if (this.mListener != null) {       this.mListener.onLoadComplete(this,data);     }   }   public Context getContext(){     return this.mContext;   }   public int getId(){     return this.mId;   }   public void registerListener(  int id,  OnLoadCompleteListener<D> listener){     if (this.mListener != null) {       throw new IllegalStateException(""There is already a listener registered"");     }     this.mListener=listener;     this.mId=id;   }   public void unregisterListener(  OnLoadCompleteListener<D> listener){     if (this.mListener == null) {       throw new IllegalStateException(""No listener register"");     }     if (this.mListener != listener) {       throw new IllegalArgumentException(""Attempting to unregister the wrong listener"");     }     this.mListener=null;   }   public boolean isStarted(){     return this.mStarted;   }   public boolean isAbandoned(){     return this.mAbandoned;   }   public boolean isReset(){     return this.mReset;   }   public final void startLoading(){     this.mStarted=true;     this.mReset=false;     this.mAbandoned=false;     onStartLoading();   }   protected void onStartLoading(){   }   public void forceLoad(){     onForceLoad();   }   public void onForceLoad(){   }   public void stopLoading(){     this.mStarted=false;     onStopLoading();   }   protected void onStopLoading(){   }   public void abandon(){     this.mAbandoned=true;     onAbandon();   }   protected void onAbandon(){   }   public void reset(){     onReset();     this.mReset=true;     this.mStarted=false;     this.mAbandoned=false;     this.mContentChanged=false;   }   public void onReset(){   }   public boolean takeContentChanged(){     boolean res=this.mContentChanged;     this.mContentChanged=false;     return res;   }   public void onContentChanged(){     if (this.mStarted) {       forceLoad();     }  else {       this.mContentChanged=true;     }   }   public String dataToString(  D data){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(data,sb);     sb.append(""}"");     return sb.toString();   }   public String toString(){     StringBuilder sb=new StringBuilder(64);     DebugUtils.buildShortClassTag(this,sb);     sb.append("" id="");     sb.append(this.mId);     sb.append(""}"");     return sb.toString();   }   public void dump(  String prefix,  FileDescriptor fd,  PrintWriter writer,  String[] args){     writer.print(prefix);     writer.print(""mId="");     writer.print(this.mId);     writer.print("" mListener="");     writer.println(this.mListener);     writer.print(prefix);     writer.print(""mStarted="");     writer.print(this.mStarted);     writer.print("" mContentChanged="");     writer.print(this.mContentChanged);     writer.print("" mAbandoned="");     writer.print(this.mAbandoned);     writer.print("" mReset="");     writer.println(this.mReset);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\LoadTask.code","public final class LoadTask extends ModernAsyncTask<Void,Void,D> implements Runnable {   private CountDownLatch done=new CountDownLatch(1);   D result;   boolean waiting;   LoadTask(){   }   @Override public D doInBackground(  Void... voidArr){     this.result=(D)AsyncTaskLoader.this.onLoadInBackground();     return this.result;   }   @Override protected void onPostExecute(  D data){     try {       AsyncTaskLoader.this.dispatchOnLoadComplete(this,data);     }   finally {       this.done.countDown();     }   }   @Override protected void onCancelled(){     try {       AsyncTaskLoader.this.dispatchOnCancelled(this,this.result);     }   finally {       this.done.countDown();     }   }   @Override public void run(){     this.waiting=AsyncTaskLoader.DEBUG;     AsyncTaskLoader.this.executePendingTask();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\LocalBroadcastManager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4f36fc2d"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\ModernAsyncTask.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2929ef51"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\OnLoadCompleteListener.code","public interface OnLoadCompleteListener<D> {   void onLoadComplete(  Loader<D> loader,  D d); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\ReceiverRecord.code","public static class ReceiverRecord {   boolean broadcasting;   final IntentFilter filter;   final BroadcastReceiver receiver;   ReceiverRecord(  IntentFilter _filter,  BroadcastReceiver _receiver){     this.filter=_filter;     this.receiver=_receiver;   }   public String toString(){     StringBuilder builder=new StringBuilder(AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER);     builder.append(""Receiver{"");     builder.append(this.receiver);     builder.append("" filter="");     builder.append(this.filter);     builder.append(""}"");     return builder.toString();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.content\WorkerRunnable.code","public static abstract class WorkerRunnable<Params,Result> implements Callable<Result> {   Params[] mParams;   private WorkerRunnable(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.os\CompatCreator.code","static class CompatCreator<T> implements Parcelable.Creator<T> {   final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public CompatCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel source){     return this.mCallbacks.createFromParcel(source,null);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.os\ParcelableCompat.code","public class ParcelableCompat {   public static <T>Parcelable.Creator<T> newCreator(  ParcelableCompatCreatorCallbacks<T> callbacks){     if (Build.VERSION.SDK_INT >= 13) {       ParcelableCompatCreatorHoneycombMR2Stub.instantiate(callbacks);     }     return new CompatCreator(callbacks);   } static class CompatCreator<T> implements Parcelable.Creator<T> {     final ParcelableCompatCreatorCallbacks<T> mCallbacks;     public CompatCreator(    ParcelableCompatCreatorCallbacks<T> callbacks){       this.mCallbacks=callbacks;     }     @Override public T createFromParcel(    Parcel source){       return this.mCallbacks.createFromParcel(source,null);     }     @Override public T[] newArray(    int size){       return this.mCallbacks.newArray(size);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.os\ParcelableCompatCreatorCallbacks.code","public interface ParcelableCompatCreatorCallbacks<T> {   T createFromParcel(  Parcel parcel,  ClassLoader classLoader);   T[] newArray(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2.code","class ParcelableCompatCreatorHoneycombMR2<T> implements Parcelable.ClassLoaderCreator<T> {   private final ParcelableCompatCreatorCallbacks<T> mCallbacks;   public ParcelableCompatCreatorHoneycombMR2(  ParcelableCompatCreatorCallbacks<T> callbacks){     this.mCallbacks=callbacks;   }   @Override public T createFromParcel(  Parcel in){     return this.mCallbacks.createFromParcel(in,null);   }   @Override public T createFromParcel(  Parcel in,  ClassLoader loader){     return this.mCallbacks.createFromParcel(in,loader);   }   @Override public T[] newArray(  int size){     return this.mCallbacks.newArray(size);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.os\ParcelableCompatCreatorHoneycombMR2Stub.code","class ParcelableCompatCreatorHoneycombMR2Stub {   ParcelableCompatCreatorHoneycombMR2Stub(){   }   public static <T>Parcelable.Creator<T> instantiate(  ParcelableCompatCreatorCallbacks<T> callbacks){     return new ParcelableCompatCreatorHoneycombMR2(callbacks);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.util\DebugUtils.code","public class DebugUtils {   public static void buildShortClassTag(  Object cls,  StringBuilder out){     int end;     if (cls == null) {       out.append(""null"");       return;     }     String simpleName=cls.getClass().getSimpleName();     if ((simpleName == null || simpleName.length() <= 0) && (end=(simpleName=cls.getClass().getName()).lastIndexOf(46)) > 0) {       simpleName=simpleName.substring(end + 1);     }     out.append(simpleName);     out.append('{');     out.append(Integer.toHexString(System.identityHashCode(cls)));   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.util\LogWriter.code","public class LogWriter extends Writer {   private StringBuilder mBuilder=new StringBuilder(AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER);   private final String mTag;   public LogWriter(  String tag){     this.mTag=tag;   }   @Override public void close(){     flushBuilder();   }   @Override public void flush(){     flushBuilder();   }   @Override public void write(  char[] buf,  int offset,  int count){     for (int i=0; i < count; i++) {       char c=buf[offset + i];       if (c == '\n') {         flushBuilder();       }  else {         this.mBuilder.append(c);       }     }   }   private void flushBuilder(){     if (this.mBuilder.length() > 0) {       Log.d(this.mTag,this.mBuilder.toString());       this.mBuilder.delete(0,this.mBuilder.length());     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.util\LruCache.code","public class LruCache<K,V> {   private int createCount;   private int evictionCount;   private int hitCount;   private final LinkedHashMap<K,V> map;   private int maxSize;   private int missCount;   private int putCount;   private int size;   public LruCache(  int maxSize){     if (maxSize <= 0) {       throw new IllegalArgumentException(""maxSize <= 0"");     }     this.maxSize=maxSize;     this.map=new LinkedHashMap<>(0,0.75f,true);   }   public final V get(  K k){     V v;     if (k == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       V v2=this.map.get(k);       if (v2 != null) {         this.hitCount++;         return v2;       }       this.missCount++;       V create=create(k);       if (create == null) {         return null;       } synchronized (this) {         this.createCount++;         v=(V)this.map.put(k,create);         if (v != null) {           this.map.put(k,v);         }  else {           this.size+=safeSizeOf(k,create);         }       }       if (v != null) {         entryRemoved(false,k,create,v);         return v;       }       trimToSize(this.maxSize);       return create;     }   }   public final V put(  K key,  V value){     V previous;     if (key == null || value == null) {       throw new NullPointerException(""key == null || value == null"");     } synchronized (this) {       this.putCount++;       this.size+=safeSizeOf(key,value);       previous=this.map.put(key,value);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,value);     }     trimToSize(this.maxSize);     return previous;   }   private void trimToSize(  int r7){     throw new UnsupportedOperationException(""Method not decompiled: android.support.v4.util.LruCache.trimToSize(int):void"");   }   public final V remove(  K key){     V previous;     if (key == null) {       throw new NullPointerException(""key == null"");     } synchronized (this) {       previous=this.map.remove(key);       if (previous != null) {         this.size-=safeSizeOf(key,previous);       }     }     if (previous != null) {       entryRemoved(false,key,previous,null);     }     return previous;   }   protected void entryRemoved(  boolean evicted,  K key,  V oldValue,  V newValue){   }   protected V create(  K key){     return null;   }   private int safeSizeOf(  K key,  V value){     int result=sizeOf(key,value);     if (result < 0) {       throw new IllegalStateException(""Negative size: "" + key + ""=""+ value);     }     return result;   }   protected int sizeOf(  K key,  V value){     return 1;   }   public final void evictAll(){     trimToSize(-1);   }   public final synchronized int size(){     return this.size;   }   public final synchronized int maxSize(){     return this.maxSize;   }   public final synchronized int hitCount(){     return this.hitCount;   }   public final synchronized int missCount(){     return this.missCount;   }   public final synchronized int createCount(){     return this.createCount;   }   public final synchronized int putCount(){     return this.putCount;   }   public final synchronized int evictionCount(){     return this.evictionCount;   }   public final synchronized Map<K,V> snapshot(){     return new LinkedHashMap(this.map);   }   public final synchronized String toString(){     String format; synchronized (this) {       int accesses=this.hitCount + this.missCount;       int hitPercent=accesses != 0 ? (this.hitCount * 100) / accesses : 0;       format=String.format(""LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"",Integer.valueOf(this.maxSize),Integer.valueOf(this.hitCount),Integer.valueOf(this.missCount),Integer.valueOf(hitPercent));     }     return format;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.util\TimeUtils.code","public class TimeUtils {   public static final int HUNDRED_DAY_FIELD_LEN=19;   private static final int SECONDS_PER_DAY=86400;   private static final int SECONDS_PER_HOUR=3600;   private static final int SECONDS_PER_MINUTE=60;   private static final Object sFormatSync=new Object();   private static char[] sFormatStr=new char[24];   private static int accumField(  int amt,  int suffix,  boolean always,  int zeropad){     if (amt > 99 || (always && zeropad >= 3)) {       return suffix + 3;     }     if (amt > 9 || (always && zeropad >= 2)) {       return suffix + 2;     }     if (always || amt > 0) {       return suffix + 1;     }     return 0;   }   private static int printField(  char[] formatStr,  int amt,  char suffix,  int pos,  boolean always,  int zeropad){     if (always || amt > 0) {       if ((always && zeropad >= 3) || amt > 99) {         int dig=amt / 100;         formatStr[pos]=(char)(dig + 48);         pos++;         amt-=dig * 100;       }       if ((always && zeropad >= 2) || amt > 9 || pos != pos) {         int dig2=amt / 10;         formatStr[pos]=(char)(dig2 + 48);         pos++;         amt-=dig2 * 10;       }       formatStr[pos]=(char)(amt + 48);       int pos2=pos + 1;       formatStr[pos2]=suffix;       return pos2 + 1;     }     return pos;   }   private static int formatDurationLocked(  long duration,  int fieldLen){     char prefix;     if (sFormatStr.length < fieldLen) {       sFormatStr=new char[fieldLen];     }     char[] formatStr=sFormatStr;     if (duration == 0) {       int fieldLen2=fieldLen - 1;       while (0 < fieldLen2) {         formatStr[0]=' ';       }       formatStr[0]='0';       return 1;     }     if (duration > 0) {       prefix='+';     }  else {       prefix='-';       duration=-duration;     }     int millis=(int)(duration % 1000);     int seconds=(int)Math.floor(duration / 1000);     int days=0;     int hours=0;     int minutes=0;     if (seconds > SECONDS_PER_DAY) {       days=seconds / SECONDS_PER_DAY;       seconds-=SECONDS_PER_DAY * days;     }     if (seconds > SECONDS_PER_HOUR) {       hours=seconds / SECONDS_PER_HOUR;       seconds-=hours * SECONDS_PER_HOUR;     }     if (seconds > SECONDS_PER_MINUTE) {       minutes=seconds / SECONDS_PER_MINUTE;       seconds-=minutes * SECONDS_PER_MINUTE;     }     int pos=0;     if (fieldLen != 0) {       int myLen=accumField(days,1,false,0);       int myLen2=myLen + accumField(hours,1,myLen > 0,2);       int myLen3=myLen2 + accumField(minutes,1,myLen2 > 0,2);       int myLen4=myLen3 + accumField(seconds,1,myLen3 > 0,2);       for (int myLen5=myLen4 + accumField(millis,2,true,myLen4 > 0 ? 3 : 0) + 1; myLen5 < fieldLen; myLen5++) {         formatStr[pos]=' ';         pos++;       }     }     formatStr[pos]=prefix;     int pos2=pos + 1;     boolean zeropad=fieldLen != 0;     int pos3=printField(formatStr,days,'d',pos2,false,0);     int pos4=printField(formatStr,hours,'h',pos3,pos3 != pos2,zeropad ? 2 : 0);     int pos5=printField(formatStr,minutes,'m',pos4,pos4 != pos2,zeropad ? 2 : 0);     int pos6=printField(formatStr,seconds,'s',pos5,pos5 != pos2,zeropad ? 2 : 0);     int pos7=printField(formatStr,millis,'m',pos6,true,(!zeropad || pos6 == pos2) ? 0 : 3);     formatStr[pos7]='s';     return pos7 + 1;   }   public static void formatDuration(  long duration,  StringBuilder builder){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,0);       builder.append(sFormatStr,0,len);     }   }   public static void formatDuration(  long duration,  PrintWriter pw,  int fieldLen){ synchronized (sFormatSync) {       int len=formatDurationLocked(duration,fieldLen);       pw.print(new String(sFormatStr,0,len));     }   }   public static void formatDuration(  long duration,  PrintWriter pw){     formatDuration(duration,pw,0);   }   public static void formatDuration(  long time,  long now,  PrintWriter pw){     if (time == 0) {       pw.print(""--"");     }  else {       formatDuration(time - now,pw,0);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateBridge.code","public interface AccessibilityDelegateBridge {   boolean dispatchPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  Object obj);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void sendAccessibilityEvent(  View view,  int i);   void sendAccessibilityEventUnchecked(  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateCompat.code","public class AccessibilityDelegateCompat {   private static final Object DEFAULT_DELEGATE;   private static final AccessibilityDelegateImpl IMPL;   final Object mBridge=IMPL.newAccessiblityDelegateBridge(this); public interface AccessibilityDelegateImpl {     boolean dispatchPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat accessibilityDelegateCompat);     Object newAccessiblityDelegateDefaultImpl();     void onInitializeAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    Object obj,    View view,    Object obj2);     void onPopulateAccessibilityEvent(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    Object obj,    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void sendAccessibilityEvent(    Object obj,    View view,    int i);     void sendAccessibilityEventUnchecked(    Object obj,    View view,    AccessibilityEvent accessibilityEvent);   } static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {     AccessibilityDelegateStubImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return null;     }     @Override public Object newAccessiblityDelegateBridge(    AccessibilityDelegateCompat listener){       return null;     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return false;     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    Object info){     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return true;     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){     }   } static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {     AccessibilityDelegateIcsImpl(){     }     @Override public Object newAccessiblityDelegateDefaultImpl(){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();     }     @Override public Object newAccessiblityDelegateBridge(    final AccessibilityDelegateCompat compat){       return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){         @Override public boolean dispatchPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           return compat.dispatchPopulateAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onInitializeAccessibilityEvent(host,event);         }         @Override public void onInitializeAccessibilityNodeInfo(        View host,        Object info){           compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));         }         @Override public void onPopulateAccessibilityEvent(        View host,        AccessibilityEvent event){           compat.onPopulateAccessibilityEvent(host,event);         }         @Override public boolean onRequestSendAccessibilityEvent(        ViewGroup host,        View child,        AccessibilityEvent event){           return compat.onRequestSendAccessibilityEvent(host,child,event);         }         @Override public void sendAccessibilityEvent(        View host,        int eventType){           compat.sendAccessibilityEvent(host,eventType);         }         @Override public void sendAccessibilityEventUnchecked(        View host,        AccessibilityEvent event){           compat.sendAccessibilityEventUnchecked(host,event);         }       } );     }     @Override public boolean dispatchPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    Object delegate,    View host,    Object info){       AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info);     }     @Override public void onPopulateAccessibilityEvent(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);     }     @Override public boolean onRequestSendAccessibilityEvent(    Object delegate,    ViewGroup host,    View child,    AccessibilityEvent event){       return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);     }     @Override public void sendAccessibilityEvent(    Object delegate,    View host,    int eventType){       AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);     }     @Override public void sendAccessibilityEventUnchecked(    Object delegate,    View host,    AccessibilityEvent event){       AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityDelegateIcsImpl();     }  else {       IMPL=new AccessibilityDelegateStubImpl();     }     DEFAULT_DELEGATE=IMPL.newAccessiblityDelegateDefaultImpl();   }   public Object getBridge(){     return this.mBridge;   }   public void sendAccessibilityEvent(  View host,  int eventType){     IMPL.sendAccessibilityEvent(DEFAULT_DELEGATE,host,eventType);   }   public void sendAccessibilityEventUnchecked(  View host,  AccessibilityEvent event){     IMPL.sendAccessibilityEventUnchecked(DEFAULT_DELEGATE,host,event);   }   public boolean dispatchPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     return IMPL.dispatchPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onPopulateAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityEvent(  View host,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(DEFAULT_DELEGATE,host,event);   }   public void onInitializeAccessibilityNodeInfo(  View host,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(DEFAULT_DELEGATE,host,info);   }   public boolean onRequestSendAccessibilityEvent(  ViewGroup host,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(DEFAULT_DELEGATE,host,child,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateCompatIcs.code","class AccessibilityDelegateCompatIcs { public interface AccessibilityDelegateBridge {     boolean dispatchPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    Object obj);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);     void sendAccessibilityEvent(    View view,    int i);     void sendAccessibilityEventUnchecked(    View view,    AccessibilityEvent accessibilityEvent);   }   AccessibilityDelegateCompatIcs(){   }   public static Object newAccessibilityDelegateDefaultImpl(){     return new View.AccessibilityDelegate();   }   public static Object newAccessibilityDelegateBridge(  final AccessibilityDelegateBridge bridge){     return new View.AccessibilityDelegate(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      AccessibilityNodeInfo info){         AccessibilityDelegateBridge.this.onInitializeAccessibilityNodeInfo(host,info);       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return AccessibilityDelegateBridge.this.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         AccessibilityDelegateBridge.this.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         AccessibilityDelegateBridge.this.sendAccessibilityEventUnchecked(host,event);       }     } ;   }   public static boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).dispatchPopulateAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityEvent(host,event);   }   public static void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  Object info){     ((View.AccessibilityDelegate)delegate).onInitializeAccessibilityNodeInfo(host,(AccessibilityNodeInfo)info);   }   public static void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).onPopulateAccessibilityEvent(host,event);   }   public static boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return ((View.AccessibilityDelegate)delegate).onRequestSendAccessibilityEvent(host,child,event);   }   public static void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEvent(host,eventType);   }   public static void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     ((View.AccessibilityDelegate)delegate).sendAccessibilityEventUnchecked(host,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateIcsImpl.code","static class AccessibilityDelegateIcsImpl extends AccessibilityDelegateStubImpl {   AccessibilityDelegateIcsImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();   }   @Override public Object newAccessiblityDelegateBridge(  final AccessibilityDelegateCompat compat){     return AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new AccessibilityDelegateCompatIcs.AccessibilityDelegateBridge(){       @Override public boolean dispatchPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         return compat.dispatchPopulateAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onInitializeAccessibilityEvent(host,event);       }       @Override public void onInitializeAccessibilityNodeInfo(      View host,      Object info){         compat.onInitializeAccessibilityNodeInfo(host,new AccessibilityNodeInfoCompat(info));       }       @Override public void onPopulateAccessibilityEvent(      View host,      AccessibilityEvent event){         compat.onPopulateAccessibilityEvent(host,event);       }       @Override public boolean onRequestSendAccessibilityEvent(      ViewGroup host,      View child,      AccessibilityEvent event){         return compat.onRequestSendAccessibilityEvent(host,child,event);       }       @Override public void sendAccessibilityEvent(      View host,      int eventType){         compat.sendAccessibilityEvent(host,eventType);       }       @Override public void sendAccessibilityEventUnchecked(      View host,      AccessibilityEvent event){         compat.sendAccessibilityEventUnchecked(host,event);       }     } );   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(delegate,host,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  Object info){     AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(delegate,host,info);   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(delegate,host,event);   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(delegate,host,child,event);   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){     AccessibilityDelegateCompatIcs.sendAccessibilityEvent(delegate,host,eventType);   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){     AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(delegate,host,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateImpl.code","public interface AccessibilityDelegateImpl {   boolean dispatchPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat accessibilityDelegateCompat);   Object newAccessiblityDelegateDefaultImpl();   void onInitializeAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  Object obj,  View view,  Object obj2);   void onPopulateAccessibilityEvent(  Object obj,  View view,  AccessibilityEvent accessibilityEvent);   boolean onRequestSendAccessibilityEvent(  Object obj,  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent);   void sendAccessibilityEvent(  Object obj,  View view,  int i);   void sendAccessibilityEventUnchecked(  Object obj,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\AccessibilityDelegateStubImpl.code","static class AccessibilityDelegateStubImpl implements AccessibilityDelegateImpl {   AccessibilityDelegateStubImpl(){   }   @Override public Object newAccessiblityDelegateDefaultImpl(){     return null;   }   @Override public Object newAccessiblityDelegateBridge(  AccessibilityDelegateCompat listener){     return null;   }   @Override public boolean dispatchPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){     return false;   }   @Override public void onInitializeAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  Object delegate,  View host,  Object info){   }   @Override public void onPopulateAccessibilityEvent(  Object delegate,  View host,  AccessibilityEvent event){   }   @Override public boolean onRequestSendAccessibilityEvent(  Object delegate,  ViewGroup host,  View child,  AccessibilityEvent event){     return true;   }   @Override public void sendAccessibilityEvent(  Object delegate,  View host,  int eventType){   }   @Override public void sendAccessibilityEventUnchecked(  Object delegate,  View host,  AccessibilityEvent event){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseKeyEventVersionImpl.code","static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {   private static final int META_ALL_MASK=247;   private static final int META_MODIFIER_MASK=247;   BaseKeyEventVersionImpl(){   }   private static int metaStateFilterDirectionalModifiers(  int metaState,  int modifiers,  int basic,  int left,  int right){     boolean wantBasic=(modifiers & basic) != 0;     int directional=left | right;     boolean wantLeftOrRight=(modifiers & directional) != 0;     if (wantBasic) {       if (wantLeftOrRight) {         throw new IllegalArgumentException(""bad arguments"");       }       return metaState & (directional ^ (-1));     }     if (wantLeftOrRight) {       return metaState & (basic ^ (-1));     }     return metaState;   }   @Override public int normalizeMetaState(  int metaState){     if ((metaState & 192) != 0) {       metaState|=1;     }     if ((metaState & 48) != 0) {       metaState|=2;     }     return metaState & 247;   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER),modifiers,2,16,32) == modifiers;   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return (normalizeMetaState(metaState) & 247) == 0;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseMenuVersionImpl.code","static class BaseMenuVersionImpl implements MenuVersionImpl {   BaseMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseMotionEventVersionImpl.code","static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {   BaseMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return pointerId == 0 ? 0 : -1;   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return 0;     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getX();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     if (pointerIndex == 0) {       return event.getY();     }     throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseVelocityTrackerVersionImpl.code","static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   BaseVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity();   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseViewCompatImpl.code","static class BaseViewCompatImpl implements ViewCompatImpl {   BaseViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return false;   }   @Override public boolean canScrollVertically(  View v,  int direction){     return false;   }   @Override public int getOverScrollMode(  View v){     return 2;   }   @Override public void setOverScrollMode(  View v,  int mode){   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\BaseViewConfigurationVersionImpl.code","static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   BaseViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledTouchSlop();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\DataSetObserver.code","interface DataSetObserver {   void onDataSetChanged(); } private class DataSetObserver implements PagerAdapter.DataSetObserver {   private DataSetObserver(){   }   @Override public void onDataSetChanged(){     ViewPager.this.dataSetChanged();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\EclairMotionEventVersionImpl.code","static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {   EclairMotionEventVersionImpl(){   }   @Override public int findPointerIndex(  MotionEvent event,  int pointerId){     return MotionEventCompatEclair.findPointerIndex(event,pointerId);   }   @Override public int getPointerId(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getPointerId(event,pointerIndex);   }   @Override public float getX(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getX(event,pointerIndex);   }   @Override public float getY(  MotionEvent event,  int pointerIndex){     return MotionEventCompatEclair.getY(event,pointerIndex);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\FroyoViewConfigurationVersionImpl.code","static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {   FroyoViewConfigurationVersionImpl(){   }   @Override public int getScaledPagingTouchSlop(  ViewConfiguration config){     return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\GBViewCompatImpl.code","static class GBViewCompatImpl extends BaseViewCompatImpl {   GBViewCompatImpl(){   }   @Override public int getOverScrollMode(  View v){     return ViewCompatGingerbread.getOverScrollMode(v);   }   @Override public void setOverScrollMode(  View v,  int mode){     ViewCompatGingerbread.setOverScrollMode(v,mode);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\HoneycombKeyEventVersionImpl.code","static class HoneycombKeyEventVersionImpl implements KeyEventVersionImpl {   HoneycombKeyEventVersionImpl(){   }   @Override public int normalizeMetaState(  int metaState){     return KeyEventCompatHoneycomb.normalizeMetaState(metaState);   }   @Override public boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);   }   @Override public boolean metaStateHasNoModifiers(  int metaState){     return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\HoneycombMenuVersionImpl.code","static class HoneycombMenuVersionImpl implements MenuVersionImpl {   HoneycombMenuVersionImpl(){   }   @Override public boolean setShowAsAction(  MenuItem item,  int actionEnum){     MenuCompatHoneycomb.setShowAsAction(item,actionEnum);     return true;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\HoneycombVelocityTrackerVersionImpl.code","static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {   HoneycombVelocityTrackerVersionImpl(){   }   @Override public float getXVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);   }   @Override public float getYVelocity(  VelocityTracker tracker,  int pointerId){     return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ICSViewCompatImpl.code","static class ICSViewCompatImpl extends GBViewCompatImpl {   ICSViewCompatImpl(){   }   @Override public boolean canScrollHorizontally(  View v,  int direction){     return ViewCompatICS.canScrollHorizontally(v,direction);   }   @Override public boolean canScrollVertically(  View v,  int direction){     return ViewCompatICS.canScrollVertically(v,direction);   }   @Override public void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onPopulateAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     ViewCompatICS.onInitializeAccessibilityEvent(v,event);   }   @Override public void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getImpl());   }   @Override public void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ItemInfo.code","public static class ItemInfo {   Object object;   int position;   boolean scrolling;   ItemInfo(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\KeyEventCompat.code","public class KeyEventCompat {   static final KeyEventVersionImpl IMPL; interface KeyEventVersionImpl {     boolean metaStateHasModifiers(    int i,    int i2);     boolean metaStateHasNoModifiers(    int i);     int normalizeMetaState(    int i);   } static class BaseKeyEventVersionImpl implements KeyEventVersionImpl {     private static final int META_ALL_MASK=247;     private static final int META_MODIFIER_MASK=247;     BaseKeyEventVersionImpl(){     }     private static int metaStateFilterDirectionalModifiers(    int metaState,    int modifiers,    int basic,    int left,    int right){       boolean wantBasic=(modifiers & basic) != 0;       int directional=left | right;       boolean wantLeftOrRight=(modifiers & directional) != 0;       if (wantBasic) {         if (wantLeftOrRight) {           throw new IllegalArgumentException(""bad arguments"");         }         return metaState & (directional ^ (-1));       }       if (wantLeftOrRight) {         return metaState & (basic ^ (-1));       }       return metaState;     }     @Override public int normalizeMetaState(    int metaState){       if ((metaState & 192) != 0) {         metaState|=1;       }       if ((metaState & 48) != 0) {         metaState|=2;       }       return metaState & 247;     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return metaStateFilterDirectionalModifiers(metaStateFilterDirectionalModifiers(normalizeMetaState(metaState) & 247,modifiers,1,64,AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER),modifiers,2,16,32) == modifiers;     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return (normalizeMetaState(metaState) & 247) == 0;     }   } static class HoneycombKeyEventVersionImpl implements KeyEventVersionImpl {     HoneycombKeyEventVersionImpl(){     }     @Override public int normalizeMetaState(    int metaState){       return KeyEventCompatHoneycomb.normalizeMetaState(metaState);     }     @Override public boolean metaStateHasModifiers(    int metaState,    int modifiers){       return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState,modifiers);     }     @Override public boolean metaStateHasNoModifiers(    int metaState){       return KeyEventCompatHoneycomb.metaStateHasNoModifiers(metaState);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombKeyEventVersionImpl();     }  else {       IMPL=new BaseKeyEventVersionImpl();     }   }   public static int normalizeMetaState(  int metaState){     return IMPL.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return IMPL.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return IMPL.metaStateHasNoModifiers(metaState);   }   public static boolean hasModifiers(  KeyEvent event,  int modifiers){     return IMPL.metaStateHasModifiers(event.getMetaState(),modifiers);   }   public static boolean hasNoModifiers(  KeyEvent event){     return IMPL.metaStateHasNoModifiers(event.getMetaState());   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\KeyEventCompatHoneycomb.code","class KeyEventCompatHoneycomb {   KeyEventCompatHoneycomb(){   }   public static int normalizeMetaState(  int metaState){     return KeyEvent.normalizeMetaState(metaState);   }   public static boolean metaStateHasModifiers(  int metaState,  int modifiers){     return KeyEvent.metaStateHasModifiers(metaState,modifiers);   }   public static boolean metaStateHasNoModifiers(  int metaState){     return KeyEvent.metaStateHasNoModifiers(metaState);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\KeyEventVersionImpl.code","interface KeyEventVersionImpl {   boolean metaStateHasModifiers(  int i,  int i2);   boolean metaStateHasNoModifiers(  int i);   int normalizeMetaState(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MenuCompat.code","public class MenuCompat {   static final MenuVersionImpl IMPL; interface MenuVersionImpl {     boolean setShowAsAction(    MenuItem menuItem,    int i);   } static class BaseMenuVersionImpl implements MenuVersionImpl {     BaseMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       return false;     }   } static class HoneycombMenuVersionImpl implements MenuVersionImpl {     HoneycombMenuVersionImpl(){     }     @Override public boolean setShowAsAction(    MenuItem item,    int actionEnum){       MenuCompatHoneycomb.setShowAsAction(item,actionEnum);       return true;     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombMenuVersionImpl();     }  else {       IMPL=new BaseMenuVersionImpl();     }   }   public static boolean setShowAsAction(  MenuItem item,  int actionEnum){     return IMPL.setShowAsAction(item,actionEnum);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MenuCompatHoneycomb.code","class MenuCompatHoneycomb {   MenuCompatHoneycomb(){   }   public static void setShowAsAction(  MenuItem item,  int actionEnum){     item.setShowAsAction(actionEnum);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MenuVersionImpl.code","interface MenuVersionImpl {   boolean setShowAsAction(  MenuItem menuItem,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MotionEventCompat.code","public class MotionEventCompat {   public static final int ACTION_HOVER_MOVE=7;   public static final int ACTION_MASK=255;   public static final int ACTION_POINTER_DOWN=5;   public static final int ACTION_POINTER_INDEX_MASK=65280;   public static final int ACTION_POINTER_INDEX_SHIFT=8;   public static final int ACTION_POINTER_UP=6;   public static final int ACTION_SCROLL=8;   static final MotionEventVersionImpl IMPL; interface MotionEventVersionImpl {     int findPointerIndex(    MotionEvent motionEvent,    int i);     int getPointerId(    MotionEvent motionEvent,    int i);     float getX(    MotionEvent motionEvent,    int i);     float getY(    MotionEvent motionEvent,    int i);   } static class BaseMotionEventVersionImpl implements MotionEventVersionImpl {     BaseMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return pointerId == 0 ? 0 : -1;     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return 0;       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getX();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       if (pointerIndex == 0) {         return event.getY();       }       throw new IndexOutOfBoundsException(""Pre-Eclair does not support multiple pointers"");     }   } static class EclairMotionEventVersionImpl implements MotionEventVersionImpl {     EclairMotionEventVersionImpl(){     }     @Override public int findPointerIndex(    MotionEvent event,    int pointerId){       return MotionEventCompatEclair.findPointerIndex(event,pointerId);     }     @Override public int getPointerId(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getPointerId(event,pointerIndex);     }     @Override public float getX(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getX(event,pointerIndex);     }     @Override public float getY(    MotionEvent event,    int pointerIndex){       return MotionEventCompatEclair.getY(event,pointerIndex);     }   } static {     if (Build.VERSION.SDK_INT >= 5) {       IMPL=new EclairMotionEventVersionImpl();     }  else {       IMPL=new BaseMotionEventVersionImpl();     }   }   public static int getActionMasked(  MotionEvent event){     return event.getAction() & ACTION_MASK;   }   public static int getActionIndex(  MotionEvent event){     return (event.getAction() & ACTION_POINTER_INDEX_MASK) >> 8;   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return IMPL.findPointerIndex(event,pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return IMPL.getPointerId(event,pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return IMPL.getX(event,pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return IMPL.getY(event,pointerIndex);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MotionEventCompatEclair.code","class MotionEventCompatEclair {   MotionEventCompatEclair(){   }   public static int findPointerIndex(  MotionEvent event,  int pointerId){     return event.findPointerIndex(pointerId);   }   public static int getPointerId(  MotionEvent event,  int pointerIndex){     return event.getPointerId(pointerIndex);   }   public static float getX(  MotionEvent event,  int pointerIndex){     return event.getX(pointerIndex);   }   public static float getY(  MotionEvent event,  int pointerIndex){     return event.getY(pointerIndex);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\MotionEventVersionImpl.code","interface MotionEventVersionImpl {   int findPointerIndex(  MotionEvent motionEvent,  int i);   int getPointerId(  MotionEvent motionEvent,  int i);   float getX(  MotionEvent motionEvent,  int i);   float getY(  MotionEvent motionEvent,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\OnPageChangeListener.code","public interface OnPageChangeListener {   void onPageScrollStateChanged(  int i);   void onPageScrolled(  int i,  float f,  int i2);   void onPageSelected(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\PagerAdapter.code","public abstract class PagerAdapter {   public static final int POSITION_NONE=-2;   public static final int POSITION_UNCHANGED=-1;   private DataSetObserver mObserver; interface DataSetObserver {     void onDataSetChanged();   }   public abstract void destroyItem(  View view,  int i,  Object obj);   public abstract void finishUpdate(  View view);   public abstract int getCount();   public abstract Object instantiateItem(  View view,  int i);   public abstract boolean isViewFromObject(  View view,  Object obj);   public abstract void restoreState(  Parcelable parcelable,  ClassLoader classLoader);   public abstract Parcelable saveState();   public abstract void startUpdate(  View view);   public void setPrimaryItem(  View container,  int position,  Object object){   }   public int getItemPosition(  Object object){     return -1;   }   public void notifyDataSetChanged(){     if (this.mObserver != null) {       this.mObserver.onDataSetChanged();     }   }   public void setDataSetObserver(  DataSetObserver observer){     this.mObserver=observer;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\SavedState.code","public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in,    ClassLoader loader){       return new SavedState(in,loader);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } );   Parcelable adapterState;   ClassLoader loader;   int position;   public SavedState(  Parcelable superState){     super(superState);   }   @Override public void writeToParcel(  Parcel out,  int flags){     super.writeToParcel(out,flags);     out.writeInt(this.position);     out.writeParcelable(this.adapterState,flags);   }   public String toString(){     return ""FragmentPager.SavedState{"" + Integer.toHexString(System.identityHashCode(this)) + "" position=""+ this.position+ ""}"";   }   SavedState(  Parcel in,  ClassLoader loader){     super(in);     loader=loader == null ? getClass().getClassLoader() : loader;     this.position=in.readInt();     this.adapterState=in.readParcelable(loader);     this.loader=loader;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\SimpleOnPageChangeListener.code","public static class SimpleOnPageChangeListener implements OnPageChangeListener {   @Override public void onPageScrolled(  int position,  float positionOffset,  int positionOffsetPixels){   }   @Override public void onPageSelected(  int position){   }   @Override public void onPageScrollStateChanged(  int state){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\VelocityTrackerCompat.code","public class VelocityTrackerCompat {   static final VelocityTrackerVersionImpl IMPL; interface VelocityTrackerVersionImpl {     float getXVelocity(    VelocityTracker velocityTracker,    int i);     float getYVelocity(    VelocityTracker velocityTracker,    int i);   } static class BaseVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     BaseVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getXVelocity();     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return tracker.getYVelocity();     }   } static class HoneycombVelocityTrackerVersionImpl implements VelocityTrackerVersionImpl {     HoneycombVelocityTrackerVersionImpl(){     }     @Override public float getXVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getXVelocity(tracker,pointerId);     }     @Override public float getYVelocity(    VelocityTracker tracker,    int pointerId){       return VelocityTrackerCompatHoneycomb.getYVelocity(tracker,pointerId);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new HoneycombVelocityTrackerVersionImpl();     }  else {       IMPL=new BaseVelocityTrackerVersionImpl();     }   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getXVelocity(tracker,pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return IMPL.getYVelocity(tracker,pointerId);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\VelocityTrackerCompatHoneycomb.code","class VelocityTrackerCompatHoneycomb {   VelocityTrackerCompatHoneycomb(){   }   public static float getXVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getXVelocity(pointerId);   }   public static float getYVelocity(  VelocityTracker tracker,  int pointerId){     return tracker.getYVelocity(pointerId);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\VelocityTrackerVersionImpl.code","interface VelocityTrackerVersionImpl {   float getXVelocity(  VelocityTracker velocityTracker,  int i);   float getYVelocity(  VelocityTracker velocityTracker,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewCompat.code","public class ViewCompat {   static final ViewCompatImpl IMPL;   public static final int OVER_SCROLL_ALWAYS=0;   public static final int OVER_SCROLL_IF_CONTENT_SCROLLS=1;   public static final int OVER_SCROLL_NEVER=2; interface ViewCompatImpl {     boolean canScrollHorizontally(    View view,    int i);     boolean canScrollVertically(    View view,    int i);     int getOverScrollMode(    View view);     void onInitializeAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void onInitializeAccessibilityNodeInfo(    View view,    AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);     void onPopulateAccessibilityEvent(    View view,    AccessibilityEvent accessibilityEvent);     void setAccessibilityDelegate(    View view,    AccessibilityDelegateCompat accessibilityDelegateCompat);     void setOverScrollMode(    View view,    int i);   } static class BaseViewCompatImpl implements ViewCompatImpl {     BaseViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return false;     }     @Override public boolean canScrollVertically(    View v,    int direction){       return false;     }     @Override public int getOverScrollMode(    View v){       return 2;     }     @Override public void setOverScrollMode(    View v,    int mode){     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){     }   } static class GBViewCompatImpl extends BaseViewCompatImpl {     GBViewCompatImpl(){     }     @Override public int getOverScrollMode(    View v){       return ViewCompatGingerbread.getOverScrollMode(v);     }     @Override public void setOverScrollMode(    View v,    int mode){       ViewCompatGingerbread.setOverScrollMode(v,mode);     }   } static class ICSViewCompatImpl extends GBViewCompatImpl {     ICSViewCompatImpl(){     }     @Override public boolean canScrollHorizontally(    View v,    int direction){       return ViewCompatICS.canScrollHorizontally(v,direction);     }     @Override public boolean canScrollVertically(    View v,    int direction){       return ViewCompatICS.canScrollVertically(v,direction);     }     @Override public void onPopulateAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onPopulateAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityEvent(    View v,    AccessibilityEvent event){       ViewCompatICS.onInitializeAccessibilityEvent(v,event);     }     @Override public void onInitializeAccessibilityNodeInfo(    View v,    AccessibilityNodeInfoCompat info){       ViewCompatICS.onInitializeAccessibilityNodeInfo(v,info.getImpl());     }     @Override public void setAccessibilityDelegate(    View v,    AccessibilityDelegateCompat delegate){       ViewCompatICS.setAccessibilityDelegate(v,delegate.getBridge());     }   } static {     int version=Build.VERSION.SDK_INT;     if (version >= 14) {       IMPL=new ICSViewCompatImpl();     }  else     if (version >= 9) {       IMPL=new GBViewCompatImpl();     }  else {       IMPL=new BaseViewCompatImpl();     }   }   public static boolean canScrollHorizontally(  View v,  int direction){     return IMPL.canScrollHorizontally(v,direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return IMPL.canScrollVertically(v,direction);   }   public static int getOverScrollMode(  View v){     return IMPL.getOverScrollMode(v);   }   public static void setOverScrollMode(  View v,  int mode){     IMPL.setOverScrollMode(v,mode);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onPopulateAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     IMPL.onInitializeAccessibilityEvent(v,event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  AccessibilityNodeInfoCompat info){     IMPL.onInitializeAccessibilityNodeInfo(v,info);   }   public static void setAccessibilityDelegate(  View v,  AccessibilityDelegateCompat delegate){     IMPL.setAccessibilityDelegate(v,delegate);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewCompatGingerbread.code","public class ViewCompatGingerbread {   public static int getOverScrollMode(  View v){     return v.getOverScrollMode();   }   public static void setOverScrollMode(  View v,  int mode){     v.setOverScrollMode(mode);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewCompatICS.code","class ViewCompatICS {   ViewCompatICS(){   }   public static boolean canScrollHorizontally(  View v,  int direction){     return v.canScrollHorizontally(direction);   }   public static boolean canScrollVertically(  View v,  int direction){     return v.canScrollVertically(direction);   }   public static void setAccessibilityDelegate(  View v,  Object delegate){     v.setAccessibilityDelegate((View.AccessibilityDelegate)delegate);   }   public static void onPopulateAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onPopulateAccessibilityEvent(event);   }   public static void onInitializeAccessibilityEvent(  View v,  AccessibilityEvent event){     v.onInitializeAccessibilityEvent(event);   }   public static void onInitializeAccessibilityNodeInfo(  View v,  Object info){     v.onInitializeAccessibilityNodeInfo((AccessibilityNodeInfo)info);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewCompatImpl.code","interface ViewCompatImpl {   boolean canScrollHorizontally(  View view,  int i);   boolean canScrollVertically(  View view,  int i);   int getOverScrollMode(  View view);   void onInitializeAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void onInitializeAccessibilityNodeInfo(  View view,  AccessibilityNodeInfoCompat accessibilityNodeInfoCompat);   void onPopulateAccessibilityEvent(  View view,  AccessibilityEvent accessibilityEvent);   void setAccessibilityDelegate(  View view,  AccessibilityDelegateCompat accessibilityDelegateCompat);   void setOverScrollMode(  View view,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewConfigurationCompat.code","public class ViewConfigurationCompat {   static final ViewConfigurationVersionImpl IMPL; interface ViewConfigurationVersionImpl {     int getScaledPagingTouchSlop(    ViewConfiguration viewConfiguration);   } static class BaseViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     BaseViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return config.getScaledTouchSlop();     }   } static class FroyoViewConfigurationVersionImpl implements ViewConfigurationVersionImpl {     FroyoViewConfigurationVersionImpl(){     }     @Override public int getScaledPagingTouchSlop(    ViewConfiguration config){       return ViewConfigurationCompatFroyo.getScaledPagingTouchSlop(config);     }   } static {     if (Build.VERSION.SDK_INT >= 11) {       IMPL=new FroyoViewConfigurationVersionImpl();     }  else {       IMPL=new BaseViewConfigurationVersionImpl();     }   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return IMPL.getScaledPagingTouchSlop(config);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewConfigurationCompatFroyo.code","class ViewConfigurationCompatFroyo {   ViewConfigurationCompatFroyo(){   }   public static int getScaledPagingTouchSlop(  ViewConfiguration config){     return config.getScaledPagingTouchSlop();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewConfigurationVersionImpl.code","interface ViewConfigurationVersionImpl {   int getScaledPagingTouchSlop(  ViewConfiguration viewConfiguration); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewGroupCompat.code","public class ViewGroupCompat {   static final ViewGroupCompatImpl IMPL; interface ViewGroupCompatImpl {     boolean onRequestSendAccessibilityEvent(    ViewGroup viewGroup,    View view,    AccessibilityEvent accessibilityEvent);   } static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {     ViewGroupCompatStubImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return true;     }   } static class ViewGroupCompatIcsImpl extends ViewGroupCompatStubImpl {     ViewGroupCompatIcsImpl(){     }     @Override public boolean onRequestSendAccessibilityEvent(    ViewGroup group,    View child,    AccessibilityEvent event){       return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new ViewGroupCompatIcsImpl();     }  else {       IMPL=new ViewGroupCompatStubImpl();     }   }   private ViewGroupCompat(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return IMPL.onRequestSendAccessibilityEvent(group,child,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewGroupCompatIcs.code","class ViewGroupCompatIcs {   ViewGroupCompatIcs(){   }   public static boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return group.onRequestSendAccessibilityEvent(child,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewGroupCompatIcsImpl.code","static class ViewGroupCompatIcsImpl extends ViewGroupCompatStubImpl {   ViewGroupCompatIcsImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return ViewGroupCompatIcs.onRequestSendAccessibilityEvent(group,child,event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewGroupCompatImpl.code","interface ViewGroupCompatImpl {   boolean onRequestSendAccessibilityEvent(  ViewGroup viewGroup,  View view,  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewGroupCompatStubImpl.code","static class ViewGroupCompatStubImpl implements ViewGroupCompatImpl {   ViewGroupCompatStubImpl(){   }   @Override public boolean onRequestSendAccessibilityEvent(  ViewGroup group,  View child,  AccessibilityEvent event){     return true;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view\ViewPager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2c7221d1"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityEventCompat.code","public class AccessibilityEventCompat {   private static final AccessibilityEventVersionImpl IMPL;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END=1024;   public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START=512;   public static final int TYPE_VIEW_HOVER_ENTER=128;   public static final int TYPE_VIEW_HOVER_EXIT=256;   public static final int TYPE_VIEW_SCROLLED=4096;   public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED=8192;   public static final int TYPE_WINDOW_CONTENT_CHANGED=2048; interface AccessibilityEventVersionImpl {     void appendRecord(    AccessibilityEvent accessibilityEvent,    Object obj);     Object getRecord(    AccessibilityEvent accessibilityEvent,    int i);     int getRecordCount(    AccessibilityEvent accessibilityEvent);   } static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {     AccessibilityEventStubImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return null;     }     @Override public int getRecordCount(    AccessibilityEvent event){       return 0;     }   } static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {     AccessibilityEventIcsImpl(){     }     @Override public void appendRecord(    AccessibilityEvent event,    Object record){       AccessibilityEventCompatIcs.appendRecord(event,record);     }     @Override public Object getRecord(    AccessibilityEvent event,    int index){       return AccessibilityEventCompatIcs.getRecord(event,index);     }     @Override public int getRecordCount(    AccessibilityEvent event){       return AccessibilityEventCompatIcs.getRecordCount(event);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityEventIcsImpl();     }  else {       IMPL=new AccessibilityEventStubImpl();     }   }   private AccessibilityEventCompat(){   }   public static int getRecordCount(  AccessibilityEvent event){     return IMPL.getRecordCount(event);   }   public static void appendRecord(  AccessibilityEvent event,  AccessibilityRecordCompat record){     IMPL.appendRecord(event,record.getImpl());   }   public static AccessibilityRecordCompat getRecord(  AccessibilityEvent event,  int index){     return new AccessibilityRecordCompat(IMPL.getRecord(event,index));   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityEventCompatIcs.code","class AccessibilityEventCompatIcs {   AccessibilityEventCompatIcs(){   }   public static int getRecordCount(  AccessibilityEvent event){     return event.getRecordCount();   }   public static void appendRecord(  AccessibilityEvent event,  Object record){     event.appendRecord((AccessibilityRecord)record);   }   public static Object getRecord(  AccessibilityEvent event,  int index){     return event.getRecord(index);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityEventIcsImpl.code","static class AccessibilityEventIcsImpl extends AccessibilityEventStubImpl {   AccessibilityEventIcsImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){     AccessibilityEventCompatIcs.appendRecord(event,record);   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return AccessibilityEventCompatIcs.getRecord(event,index);   }   @Override public int getRecordCount(  AccessibilityEvent event){     return AccessibilityEventCompatIcs.getRecordCount(event);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityEventStubImpl.code","static class AccessibilityEventStubImpl implements AccessibilityEventVersionImpl {   AccessibilityEventStubImpl(){   }   @Override public void appendRecord(  AccessibilityEvent event,  Object record){   }   @Override public Object getRecord(  AccessibilityEvent event,  int index){     return null;   }   @Override public int getRecordCount(  AccessibilityEvent event){     return 0;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityEventVersionImpl.code","interface AccessibilityEventVersionImpl {   void appendRecord(  AccessibilityEvent accessibilityEvent,  Object obj);   Object getRecord(  AccessibilityEvent accessibilityEvent,  int i);   int getRecordCount(  AccessibilityEvent accessibilityEvent); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityManagerCompat.code","public class AccessibilityManagerCompat {   private static final AccessibilityManagerVersionImpl IMPL; interface AccessibilityManagerVersionImpl {     boolean addAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager accessibilityManager,    int i);     List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager accessibilityManager);     boolean isTouchExplorationEnabled(    AccessibilityManager accessibilityManager);     Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);     boolean removeAccessibilityStateChangeListener(    AccessibilityManager accessibilityManager,    AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   } public static abstract class AccessibilityStateChangeListenerCompat {     final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);     public abstract void onAccessibilityStateChanged(    boolean z);   } static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {     AccessibilityManagerStubImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    AccessibilityStateChangeListenerCompat listener){       return null;     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return false;     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return null;     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return null;     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return false;     }   } static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {     AccessibilityManagerIcsImpl(){     }     @Override public Object newAccessiblityStateChangeListener(    final AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){         @Override public void onAccessibilityStateChanged(        boolean enabled){           listener.onAccessibilityStateChanged(enabled);         }       } );     }     @Override public boolean addAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public boolean removeAccessibilityStateChangeListener(    AccessibilityManager manager,    AccessibilityStateChangeListenerCompat listener){       return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);     }     @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(    AccessibilityManager manager,    int feedbackTypeFlags){       return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);     }     @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);     }     @Override public boolean isTouchExplorationEnabled(    AccessibilityManager manager){       return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityManagerIcsImpl();     }  else {       IMPL=new AccessibilityManagerStubImpl();     }   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.addAccessibilityStateChangeListener(manager,listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return IMPL.removeAccessibilityStateChangeListener(manager,listener);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return IMPL.getInstalledAccessibilityServiceList(manager);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return IMPL.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityManagerCompatIcs.code","class AccessibilityManagerCompatIcs { interface AccessibilityStateChangeListenerBridge {     void onAccessibilityStateChanged(    boolean z);   }   AccessibilityManagerCompatIcs(){   }   public static Object newAccessibilityStateChangeListener(  final AccessibilityStateChangeListenerBridge bridge){     return new AccessibilityManager.AccessibilityStateChangeListener(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         AccessibilityStateChangeListenerBridge.this.onAccessibilityStateChanged(enabled);       }     } ;   }   public static boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.addAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  Object listener){     return manager.removeAccessibilityStateChangeListener((AccessibilityManager.AccessibilityStateChangeListener)listener);   }   public static List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return manager.getEnabledAccessibilityServiceList(feedbackTypeFlags);   }   public static List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return manager.getInstalledAccessibilityServiceList();   }   public static boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return manager.isTouchExplorationEnabled();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityManagerIcsImpl.code","static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {   AccessibilityManagerIcsImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  final AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.newAccessibilityStateChangeListener(new AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge(){       @Override public void onAccessibilityStateChanged(      boolean enabled){         listener.onAccessibilityStateChanged(enabled);       }     } );   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(manager,listener.mListener);   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(manager,feedbackTypeFlags);   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(manager);   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return AccessibilityManagerCompatIcs.isTouchExplorationEnabled(manager);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityManagerStubImpl.code","static class AccessibilityManagerStubImpl implements AccessibilityManagerVersionImpl {   AccessibilityManagerStubImpl(){   }   @Override public Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat listener){     return null;   }   @Override public boolean addAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public boolean removeAccessibilityStateChangeListener(  AccessibilityManager manager,  AccessibilityStateChangeListenerCompat listener){     return false;   }   @Override public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager manager,  int feedbackTypeFlags){     return null;   }   @Override public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager manager){     return null;   }   @Override public boolean isTouchExplorationEnabled(  AccessibilityManager manager){     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityManagerVersionImpl.code","interface AccessibilityManagerVersionImpl {   boolean addAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(  AccessibilityManager accessibilityManager,  int i);   List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(  AccessibilityManager accessibilityManager);   boolean isTouchExplorationEnabled(  AccessibilityManager accessibilityManager);   Object newAccessiblityStateChangeListener(  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat);   boolean removeAccessibilityStateChangeListener(  AccessibilityManager accessibilityManager,  AccessibilityStateChangeListenerCompat accessibilityStateChangeListenerCompat); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityNodeInfoCompat.code","public class AccessibilityNodeInfoCompat {   public static final int ACTION_CLEAR_FOCUS=2;   public static final int ACTION_CLEAR_SELECTION=8;   public static final int ACTION_FOCUS=1;   public static final int ACTION_SELECT=4;   private static final AccessibilityNodeInfoImpl IMPL;   private final Object mInfo; public interface AccessibilityNodeInfoImpl {     void addAction(    Object obj,    int i);     void addChild(    Object obj,    View view);     List<Object> findAccessibilityNodeInfosByText(    Object obj,    String str);     int getActions(    Object obj);     void getBoundsInParent(    Object obj,    Rect rect);     void getBoundsInScreen(    Object obj,    Rect rect);     Object getChild(    Object obj,    int i);     int getChildCount(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     CharSequence getPackageName(    Object obj);     Object getParent(    Object obj);     CharSequence getText(    Object obj);     int getWindowId(    Object obj);     boolean isCheckable(    Object obj);     boolean isChecked(    Object obj);     boolean isClickable(    Object obj);     boolean isEnabled(    Object obj);     boolean isFocusable(    Object obj);     boolean isFocused(    Object obj);     boolean isLongClickable(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     boolean isSelected(    Object obj);     Object obtain();     Object obtain(    View view);     Object obtain(    Object obj);     boolean performAction(    Object obj,    int i);     void recycle(    Object obj);     void setBoundsInParent(    Object obj,    Rect rect);     void setBoundsInScreen(    Object obj,    Rect rect);     void setCheckable(    Object obj,    boolean z);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setClickable(    Object obj,    boolean z);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setEnabled(    Object obj,    boolean z);     void setFocusable(    Object obj,    boolean z);     void setFocused(    Object obj,    boolean z);     void setLongClickable(    Object obj,    boolean z);     void setPackageName(    Object obj,    CharSequence charSequence);     void setParent(    Object obj,    View view);     void setPassword(    Object obj,    boolean z);     void setScrollable(    Object obj,    boolean z);     void setSelected(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setText(    Object obj,    CharSequence charSequence);   } static class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {     AccessibilityNodeInfoStubImpl(){     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    View source){       return null;     }     @Override public Object obtain(    Object info){       return null;     }     @Override public void addAction(    Object info,    int action){     }     @Override public void addChild(    Object info,    View child){     }     @Override public List<Object> findAccessibilityNodeInfosByText(    Object info,    String text){       return null;     }     @Override public int getActions(    Object info){       return 0;     }     @Override public void getBoundsInParent(    Object info,    Rect outBounds){     }     @Override public void getBoundsInScreen(    Object info,    Rect outBounds){     }     @Override public Object getChild(    Object info,    int index){       return null;     }     @Override public int getChildCount(    Object info){       return 0;     }     @Override public CharSequence getClassName(    Object info){       return null;     }     @Override public CharSequence getContentDescription(    Object info){       return null;     }     @Override public CharSequence getPackageName(    Object info){       return null;     }     @Override public AccessibilityNodeInfoCompat getParent(    Object info){       return null;     }     @Override public CharSequence getText(    Object info){       return null;     }     @Override public int getWindowId(    Object info){       return 0;     }     @Override public boolean isCheckable(    Object info){       return false;     }     @Override public boolean isChecked(    Object info){       return false;     }     @Override public boolean isClickable(    Object info){       return false;     }     @Override public boolean isEnabled(    Object info){       return false;     }     @Override public boolean isFocusable(    Object info){       return false;     }     @Override public boolean isFocused(    Object info){       return false;     }     @Override public boolean isLongClickable(    Object info){       return false;     }     @Override public boolean isPassword(    Object info){       return false;     }     @Override public boolean isScrollable(    Object info){       return false;     }     @Override public boolean isSelected(    Object info){       return false;     }     @Override public boolean performAction(    Object info,    int action){       return false;     }     @Override public void setBoundsInParent(    Object info,    Rect bounds){     }     @Override public void setBoundsInScreen(    Object info,    Rect bounds){     }     @Override public void setCheckable(    Object info,    boolean checkable){     }     @Override public void setChecked(    Object info,    boolean checked){     }     @Override public void setClassName(    Object info,    CharSequence className){     }     @Override public void setClickable(    Object info,    boolean clickable){     }     @Override public void setContentDescription(    Object info,    CharSequence contentDescription){     }     @Override public void setEnabled(    Object info,    boolean enabled){     }     @Override public void setFocusable(    Object info,    boolean focusable){     }     @Override public void setFocused(    Object info,    boolean focused){     }     @Override public void setLongClickable(    Object info,    boolean longClickable){     }     @Override public void setPackageName(    Object info,    CharSequence packageName){     }     @Override public void setParent(    Object info,    View parent){     }     @Override public void setPassword(    Object info,    boolean password){     }     @Override public void setScrollable(    Object info,    boolean scrollable){     }     @Override public void setSelected(    Object info,    boolean selected){     }     @Override public void setSource(    Object info,    View source){     }     @Override public void setText(    Object info,    CharSequence text){     }     @Override public void recycle(    Object info){     }   } static class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {     AccessibilityNodeInfoIcsImpl(){     }     @Override public Object obtain(){       return AccessibilityNodeInfoCompatIcs.obtain();     }     @Override public Object obtain(    View source){       return AccessibilityNodeInfoCompatIcs.obtain(source);     }     @Override public Object obtain(    Object info){       return AccessibilityNodeInfoCompatIcs.obtain(info);     }     @Override public void addAction(    Object info,    int action){       AccessibilityNodeInfoCompatIcs.addAction(info,action);     }     @Override public void addChild(    Object info,    View child){       AccessibilityNodeInfoCompatIcs.addChild(info,child);     }     @Override public List<Object> findAccessibilityNodeInfosByText(    Object info,    String text){       return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(info,text);     }     @Override public int getActions(    Object info){       return AccessibilityNodeInfoCompatIcs.getActions(info);     }     @Override public void getBoundsInParent(    Object info,    Rect outBounds){       AccessibilityNodeInfoCompatIcs.getBoundsInParent(info,outBounds);     }     @Override public void getBoundsInScreen(    Object info,    Rect outBounds){       AccessibilityNodeInfoCompatIcs.getBoundsInScreen(info,outBounds);     }     @Override public AccessibilityNodeInfoCompat getChild(    Object info,    int index){       return new AccessibilityNodeInfoCompat(AccessibilityNodeInfoCompat.IMPL.getChild(info,index));     }     @Override public int getChildCount(    Object info){       return AccessibilityNodeInfoCompatIcs.getChildCount(info);     }     @Override public CharSequence getClassName(    Object info){       return AccessibilityNodeInfoCompatIcs.getClassName(info);     }     @Override public CharSequence getContentDescription(    Object info){       return AccessibilityNodeInfoCompatIcs.getContentDescription(info);     }     @Override public CharSequence getPackageName(    Object info){       return AccessibilityNodeInfoCompatIcs.getPackageName(info);     }     @Override public AccessibilityNodeInfoCompat getParent(    Object info){       return new AccessibilityNodeInfoCompat(AccessibilityNodeInfoCompat.IMPL.getParent(info));     }     @Override public CharSequence getText(    Object info){       return AccessibilityNodeInfoCompatIcs.getText(info);     }     @Override public int getWindowId(    Object info){       return AccessibilityNodeInfoCompatIcs.getWindowId(info);     }     @Override public boolean isCheckable(    Object info){       return AccessibilityNodeInfoCompatIcs.isCheckable(info);     }     @Override public boolean isChecked(    Object info){       return AccessibilityNodeInfoCompatIcs.isChecked(info);     }     @Override public boolean isClickable(    Object info){       return AccessibilityNodeInfoCompatIcs.isClickable(info);     }     @Override public boolean isEnabled(    Object info){       return AccessibilityNodeInfoCompatIcs.isEnabled(info);     }     @Override public boolean isFocusable(    Object info){       return AccessibilityNodeInfoCompatIcs.isFocusable(info);     }     @Override public boolean isFocused(    Object info){       return AccessibilityNodeInfoCompatIcs.isFocused(info);     }     @Override public boolean isLongClickable(    Object info){       return AccessibilityNodeInfoCompatIcs.isLongClickable(info);     }     @Override public boolean isPassword(    Object info){       return AccessibilityNodeInfoCompatIcs.isPassword(info);     }     @Override public boolean isScrollable(    Object info){       return AccessibilityNodeInfoCompatIcs.isScrollable(info);     }     @Override public boolean isSelected(    Object info){       return AccessibilityNodeInfoCompatIcs.isSelected(info);     }     @Override public boolean performAction(    Object info,    int action){       return AccessibilityNodeInfoCompatIcs.performAction(info,action);     }     @Override public void setBoundsInParent(    Object info,    Rect bounds){       AccessibilityNodeInfoCompatIcs.setBoundsInParent(info,bounds);     }     @Override public void setBoundsInScreen(    Object info,    Rect bounds){       AccessibilityNodeInfoCompatIcs.setBoundsInScreen(info,bounds);     }     @Override public void setCheckable(    Object info,    boolean checkable){       AccessibilityNodeInfoCompatIcs.setCheckable(info,checkable);     }     @Override public void setChecked(    Object info,    boolean checked){       AccessibilityNodeInfoCompatIcs.setChecked(info,checked);     }     @Override public void setClassName(    Object info,    CharSequence className){       AccessibilityNodeInfoCompatIcs.setClassName(info,className);     }     @Override public void setClickable(    Object info,    boolean clickable){       AccessibilityNodeInfoCompatIcs.setClickable(info,clickable);     }     @Override public void setContentDescription(    Object info,    CharSequence contentDescription){       AccessibilityNodeInfoCompatIcs.setContentDescription(info,contentDescription);     }     @Override public void setEnabled(    Object info,    boolean enabled){       AccessibilityNodeInfoCompatIcs.setEnabled(info,enabled);     }     @Override public void setFocusable(    Object info,    boolean focusable){       AccessibilityNodeInfoCompatIcs.setFocusable(info,focusable);     }     @Override public void setFocused(    Object info,    boolean focused){       AccessibilityNodeInfoCompatIcs.setFocused(info,focused);     }     @Override public void setLongClickable(    Object info,    boolean longClickable){       AccessibilityNodeInfoCompatIcs.setLongClickable(info,longClickable);     }     @Override public void setPackageName(    Object info,    CharSequence packageName){       AccessibilityNodeInfoCompatIcs.setPackageName(info,packageName);     }     @Override public void setParent(    Object info,    View parent){       AccessibilityNodeInfoCompatIcs.setParent(info,parent);     }     @Override public void setPassword(    Object info,    boolean password){       AccessibilityNodeInfoCompatIcs.setPassword(info,password);     }     @Override public void setScrollable(    Object info,    boolean scrollable){       AccessibilityNodeInfoCompatIcs.setScrollable(info,scrollable);     }     @Override public void setSelected(    Object info,    boolean selected){       AccessibilityNodeInfoCompatIcs.setSelected(info,selected);     }     @Override public void setSource(    Object info,    View source){       AccessibilityNodeInfoCompatIcs.setSource(info,source);     }     @Override public void setText(    Object info,    CharSequence text){       AccessibilityNodeInfoCompatIcs.setText(info,text);     }     @Override public void recycle(    Object info){       AccessibilityNodeInfoCompatIcs.recycle(info);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityNodeInfoIcsImpl();     }  else {       IMPL=new AccessibilityNodeInfoStubImpl();     }   }   public AccessibilityNodeInfoCompat(  Object info){     this.mInfo=info;   }   public Object getImpl(){     return this.mInfo;   }   public static AccessibilityNodeInfoCompat obtain(  View source){     return new AccessibilityNodeInfoCompat(IMPL.obtain(source));   }   public static AccessibilityNodeInfoCompat obtain(){     return new AccessibilityNodeInfoCompat(IMPL.obtain());   }   public static AccessibilityNodeInfoCompat obtain(  AccessibilityNodeInfoCompat info){     return new AccessibilityNodeInfoCompat(IMPL.obtain(info.mInfo));   }   public void setSource(  View source){     IMPL.setSource(this.mInfo,source);   }   public int getWindowId(){     return IMPL.getWindowId(this.mInfo);   }   public int getChildCount(){     return IMPL.getChildCount(this.mInfo);   }   public AccessibilityNodeInfoCompat getChild(  int index){     return new AccessibilityNodeInfoCompat(IMPL.getChild(this.mInfo,index));   }   public void addChild(  View child){     IMPL.addChild(this.mInfo,child);   }   public int getActions(){     return IMPL.getActions(this.mInfo);   }   public void addAction(  int action){     IMPL.addAction(this.mInfo,action);   }   public boolean performAction(  int action){     return IMPL.performAction(this.mInfo,action);   }   public List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(  String text){     List<AccessibilityNodeInfoCompat> result=new ArrayList<>();     List<Object> infos=IMPL.findAccessibilityNodeInfosByText(this.mInfo,text);     int infoCount=infos.size();     for (int i=0; i < infoCount; i++) {       Object info=infos.get(i);       result.add(new AccessibilityNodeInfoCompat(info));     }     return result;   }   public AccessibilityNodeInfoCompat getParent(){     return new AccessibilityNodeInfoCompat(IMPL.getParent(this.mInfo));   }   public void setParent(  View parent){     IMPL.setParent(this.mInfo,parent);   }   public void getBoundsInParent(  Rect outBounds){     IMPL.getBoundsInParent(this.mInfo,outBounds);   }   public void setBoundsInParent(  Rect bounds){     IMPL.setBoundsInParent(this.mInfo,bounds);   }   public void getBoundsInScreen(  Rect outBounds){     IMPL.getBoundsInScreen(this.mInfo,outBounds);   }   public void setBoundsInScreen(  Rect bounds){     IMPL.setBoundsInParent(this.mInfo,bounds);   }   public boolean isCheckable(){     return IMPL.isCheckable(this.mInfo);   }   public void setCheckable(  boolean checkable){     IMPL.setCheckable(this.mInfo,checkable);   }   public boolean isChecked(){     return IMPL.isChecked(this.mInfo);   }   public void setChecked(  boolean checked){     IMPL.setChecked(this.mInfo,checked);   }   public boolean isFocusable(){     return IMPL.isFocusable(this.mInfo);   }   public void setFocusable(  boolean focusable){     IMPL.setFocusable(this.mInfo,focusable);   }   public boolean isFocused(){     return IMPL.isFocused(this.mInfo);   }   public void setFocused(  boolean focused){     IMPL.setFocused(this.mInfo,focused);   }   public boolean isSelected(){     return IMPL.isSelected(this.mInfo);   }   public void setSelected(  boolean selected){     IMPL.setSelected(this.mInfo,selected);   }   public boolean isClickable(){     return IMPL.isClickable(this.mInfo);   }   public void setClickable(  boolean clickable){     IMPL.setClickable(this.mInfo,clickable);   }   public boolean isLongClickable(){     return IMPL.isLongClickable(this.mInfo);   }   public void setLongClickable(  boolean longClickable){     IMPL.setLongClickable(this.mInfo,longClickable);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mInfo);   }   public void setEnabled(  boolean enabled){     IMPL.setEnabled(this.mInfo,enabled);   }   public boolean isPassword(){     return IMPL.isPassword(this.mInfo);   }   public void setPassword(  boolean password){     IMPL.setPassword(this.mInfo,password);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mInfo);   }   public void setScrollable(  boolean scrollable){     IMPL.setScrollable(this.mInfo,scrollable);   }   public CharSequence getPackageName(){     return IMPL.getPackageName(this.mInfo);   }   public void setPackageName(  CharSequence packageName){     IMPL.setPackageName(this.mInfo,packageName);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mInfo);   }   public void setClassName(  CharSequence className){     IMPL.setClassName(this.mInfo,className);   }   public CharSequence getText(){     return IMPL.getText(this.mInfo);   }   public void setText(  CharSequence text){     IMPL.setText(this.mInfo,text);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mInfo);   }   public void setContentDescription(  CharSequence contentDescription){     IMPL.setContentDescription(this.mInfo,contentDescription);   }   public void recycle(){     IMPL.recycle(this.mInfo);   }   public int hashCode(){     if (this.mInfo == null) {       return 0;     }     return this.mInfo.hashCode();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityNodeInfoCompat other=(AccessibilityNodeInfoCompat)obj;       return this.mInfo == null ? other.mInfo == null : this.mInfo.equals(other.mInfo);     }     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityNodeInfoCompatIcs.code","class AccessibilityNodeInfoCompatIcs {   AccessibilityNodeInfoCompatIcs(){   }   public static Object obtain(){     return AccessibilityNodeInfo.obtain();   }   public static Object obtain(  View source){     return AccessibilityNodeInfo.obtain(source);   }   public static Object obtain(  Object info){     return AccessibilityNodeInfo.obtain((AccessibilityNodeInfo)info);   }   public static void addAction(  Object info,  int action){     ((AccessibilityNodeInfo)info).addAction(action);   }   public static void addChild(  Object info,  View child){     ((AccessibilityNodeInfo)info).addChild(child);   }   public static List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     List result=((AccessibilityNodeInfo)info).findAccessibilityNodeInfosByText(text);     return result;   }   public static int getActions(  Object info){     return ((AccessibilityNodeInfo)info).getActions();   }   public static void getBoundsInParent(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInParent(outBounds);   }   public static void getBoundsInScreen(  Object info,  Rect outBounds){     ((AccessibilityNodeInfo)info).getBoundsInScreen(outBounds);   }   public static Object getChild(  Object info,  int index){     return ((AccessibilityNodeInfo)info).getChild(index);   }   public static int getChildCount(  Object info){     return ((AccessibilityNodeInfo)info).getChildCount();   }   public static CharSequence getClassName(  Object info){     return ((AccessibilityNodeInfo)info).getClassName();   }   public static CharSequence getContentDescription(  Object info){     return ((AccessibilityNodeInfo)info).getContentDescription();   }   public static CharSequence getPackageName(  Object info){     return ((AccessibilityNodeInfo)info).getPackageName();   }   public static Object getParent(  Object info){     return ((AccessibilityNodeInfo)info).getParent();   }   public static CharSequence getText(  Object info){     return ((AccessibilityNodeInfo)info).getText();   }   public static int getWindowId(  Object info){     return ((AccessibilityNodeInfo)info).getWindowId();   }   public static boolean isCheckable(  Object info){     return ((AccessibilityNodeInfo)info).isCheckable();   }   public static boolean isChecked(  Object info){     return ((AccessibilityNodeInfo)info).isChecked();   }   public static boolean isClickable(  Object info){     return ((AccessibilityNodeInfo)info).isClickable();   }   public static boolean isEnabled(  Object info){     return ((AccessibilityNodeInfo)info).isEnabled();   }   public static boolean isFocusable(  Object info){     return ((AccessibilityNodeInfo)info).isFocusable();   }   public static boolean isFocused(  Object info){     return ((AccessibilityNodeInfo)info).isFocused();   }   public static boolean isLongClickable(  Object info){     return ((AccessibilityNodeInfo)info).isLongClickable();   }   public static boolean isPassword(  Object info){     return ((AccessibilityNodeInfo)info).isPassword();   }   public static boolean isScrollable(  Object info){     return ((AccessibilityNodeInfo)info).isScrollable();   }   public static boolean isSelected(  Object info){     return ((AccessibilityNodeInfo)info).isSelected();   }   public static boolean performAction(  Object info,  int action){     return ((AccessibilityNodeInfo)info).performAction(action);   }   public static void setBoundsInParent(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInParent(bounds);   }   public static void setBoundsInScreen(  Object info,  Rect bounds){     ((AccessibilityNodeInfo)info).setBoundsInScreen(bounds);   }   public static void setCheckable(  Object info,  boolean checkable){     ((AccessibilityNodeInfo)info).setCheckable(checkable);   }   public static void setChecked(  Object info,  boolean checked){     ((AccessibilityNodeInfo)info).setChecked(checked);   }   public static void setClassName(  Object info,  CharSequence className){     ((AccessibilityNodeInfo)info).setClassName(className);   }   public static void setClickable(  Object info,  boolean clickable){     ((AccessibilityNodeInfo)info).setClickable(clickable);   }   public static void setContentDescription(  Object info,  CharSequence contentDescription){     ((AccessibilityNodeInfo)info).setContentDescription(contentDescription);   }   public static void setEnabled(  Object info,  boolean enabled){     ((AccessibilityNodeInfo)info).setEnabled(enabled);   }   public static void setFocusable(  Object info,  boolean focusable){     ((AccessibilityNodeInfo)info).setFocusable(focusable);   }   public static void setFocused(  Object info,  boolean focused){     ((AccessibilityNodeInfo)info).setFocused(focused);   }   public static void setLongClickable(  Object info,  boolean longClickable){     ((AccessibilityNodeInfo)info).setLongClickable(longClickable);   }   public static void setPackageName(  Object info,  CharSequence packageName){     ((AccessibilityNodeInfo)info).setPackageName(packageName);   }   public static void setParent(  Object info,  View parent){     ((AccessibilityNodeInfo)info).setParent(parent);   }   public static void setPassword(  Object info,  boolean password){     ((AccessibilityNodeInfo)info).setPassword(password);   }   public static void setScrollable(  Object info,  boolean scrollable){     ((AccessibilityNodeInfo)info).setScrollable(scrollable);   }   public static void setSelected(  Object info,  boolean selected){     ((AccessibilityNodeInfo)info).setSelected(selected);   }   public static void setSource(  Object info,  View source){     ((AccessibilityNodeInfo)info).setSource(source);   }   public static void setText(  Object info,  CharSequence text){     ((AccessibilityNodeInfo)info).setText(text);   }   public static void recycle(  Object info){     ((AccessibilityNodeInfo)info).recycle();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityNodeInfoIcsImpl.code","static class AccessibilityNodeInfoIcsImpl extends AccessibilityNodeInfoStubImpl {   AccessibilityNodeInfoIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityNodeInfoCompatIcs.obtain();   }   @Override public Object obtain(  View source){     return AccessibilityNodeInfoCompatIcs.obtain(source);   }   @Override public Object obtain(  Object info){     return AccessibilityNodeInfoCompatIcs.obtain(info);   }   @Override public void addAction(  Object info,  int action){     AccessibilityNodeInfoCompatIcs.addAction(info,action);   }   @Override public void addChild(  Object info,  View child){     AccessibilityNodeInfoCompatIcs.addChild(info,child);   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(info,text);   }   @Override public int getActions(  Object info){     return AccessibilityNodeInfoCompatIcs.getActions(info);   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInParent(info,outBounds);   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){     AccessibilityNodeInfoCompatIcs.getBoundsInScreen(info,outBounds);   }   @Override public AccessibilityNodeInfoCompat getChild(  Object info,  int index){     return new AccessibilityNodeInfoCompat(AccessibilityNodeInfoCompat.IMPL.getChild(info,index));   }   @Override public int getChildCount(  Object info){     return AccessibilityNodeInfoCompatIcs.getChildCount(info);   }   @Override public CharSequence getClassName(  Object info){     return AccessibilityNodeInfoCompatIcs.getClassName(info);   }   @Override public CharSequence getContentDescription(  Object info){     return AccessibilityNodeInfoCompatIcs.getContentDescription(info);   }   @Override public CharSequence getPackageName(  Object info){     return AccessibilityNodeInfoCompatIcs.getPackageName(info);   }   @Override public AccessibilityNodeInfoCompat getParent(  Object info){     return new AccessibilityNodeInfoCompat(AccessibilityNodeInfoCompat.IMPL.getParent(info));   }   @Override public CharSequence getText(  Object info){     return AccessibilityNodeInfoCompatIcs.getText(info);   }   @Override public int getWindowId(  Object info){     return AccessibilityNodeInfoCompatIcs.getWindowId(info);   }   @Override public boolean isCheckable(  Object info){     return AccessibilityNodeInfoCompatIcs.isCheckable(info);   }   @Override public boolean isChecked(  Object info){     return AccessibilityNodeInfoCompatIcs.isChecked(info);   }   @Override public boolean isClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isClickable(info);   }   @Override public boolean isEnabled(  Object info){     return AccessibilityNodeInfoCompatIcs.isEnabled(info);   }   @Override public boolean isFocusable(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocusable(info);   }   @Override public boolean isFocused(  Object info){     return AccessibilityNodeInfoCompatIcs.isFocused(info);   }   @Override public boolean isLongClickable(  Object info){     return AccessibilityNodeInfoCompatIcs.isLongClickable(info);   }   @Override public boolean isPassword(  Object info){     return AccessibilityNodeInfoCompatIcs.isPassword(info);   }   @Override public boolean isScrollable(  Object info){     return AccessibilityNodeInfoCompatIcs.isScrollable(info);   }   @Override public boolean isSelected(  Object info){     return AccessibilityNodeInfoCompatIcs.isSelected(info);   }   @Override public boolean performAction(  Object info,  int action){     return AccessibilityNodeInfoCompatIcs.performAction(info,action);   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInParent(info,bounds);   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){     AccessibilityNodeInfoCompatIcs.setBoundsInScreen(info,bounds);   }   @Override public void setCheckable(  Object info,  boolean checkable){     AccessibilityNodeInfoCompatIcs.setCheckable(info,checkable);   }   @Override public void setChecked(  Object info,  boolean checked){     AccessibilityNodeInfoCompatIcs.setChecked(info,checked);   }   @Override public void setClassName(  Object info,  CharSequence className){     AccessibilityNodeInfoCompatIcs.setClassName(info,className);   }   @Override public void setClickable(  Object info,  boolean clickable){     AccessibilityNodeInfoCompatIcs.setClickable(info,clickable);   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){     AccessibilityNodeInfoCompatIcs.setContentDescription(info,contentDescription);   }   @Override public void setEnabled(  Object info,  boolean enabled){     AccessibilityNodeInfoCompatIcs.setEnabled(info,enabled);   }   @Override public void setFocusable(  Object info,  boolean focusable){     AccessibilityNodeInfoCompatIcs.setFocusable(info,focusable);   }   @Override public void setFocused(  Object info,  boolean focused){     AccessibilityNodeInfoCompatIcs.setFocused(info,focused);   }   @Override public void setLongClickable(  Object info,  boolean longClickable){     AccessibilityNodeInfoCompatIcs.setLongClickable(info,longClickable);   }   @Override public void setPackageName(  Object info,  CharSequence packageName){     AccessibilityNodeInfoCompatIcs.setPackageName(info,packageName);   }   @Override public void setParent(  Object info,  View parent){     AccessibilityNodeInfoCompatIcs.setParent(info,parent);   }   @Override public void setPassword(  Object info,  boolean password){     AccessibilityNodeInfoCompatIcs.setPassword(info,password);   }   @Override public void setScrollable(  Object info,  boolean scrollable){     AccessibilityNodeInfoCompatIcs.setScrollable(info,scrollable);   }   @Override public void setSelected(  Object info,  boolean selected){     AccessibilityNodeInfoCompatIcs.setSelected(info,selected);   }   @Override public void setSource(  Object info,  View source){     AccessibilityNodeInfoCompatIcs.setSource(info,source);   }   @Override public void setText(  Object info,  CharSequence text){     AccessibilityNodeInfoCompatIcs.setText(info,text);   }   @Override public void recycle(  Object info){     AccessibilityNodeInfoCompatIcs.recycle(info);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityNodeInfoImpl.code","public interface AccessibilityNodeInfoImpl {   void addAction(  Object obj,  int i);   void addChild(  Object obj,  View view);   List<Object> findAccessibilityNodeInfosByText(  Object obj,  String str);   int getActions(  Object obj);   void getBoundsInParent(  Object obj,  Rect rect);   void getBoundsInScreen(  Object obj,  Rect rect);   Object getChild(  Object obj,  int i);   int getChildCount(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   CharSequence getPackageName(  Object obj);   Object getParent(  Object obj);   CharSequence getText(  Object obj);   int getWindowId(  Object obj);   boolean isCheckable(  Object obj);   boolean isChecked(  Object obj);   boolean isClickable(  Object obj);   boolean isEnabled(  Object obj);   boolean isFocusable(  Object obj);   boolean isFocused(  Object obj);   boolean isLongClickable(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   boolean isSelected(  Object obj);   Object obtain();   Object obtain(  View view);   Object obtain(  Object obj);   boolean performAction(  Object obj,  int i);   void recycle(  Object obj);   void setBoundsInParent(  Object obj,  Rect rect);   void setBoundsInScreen(  Object obj,  Rect rect);   void setCheckable(  Object obj,  boolean z);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setClickable(  Object obj,  boolean z);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setEnabled(  Object obj,  boolean z);   void setFocusable(  Object obj,  boolean z);   void setFocused(  Object obj,  boolean z);   void setLongClickable(  Object obj,  boolean z);   void setPackageName(  Object obj,  CharSequence charSequence);   void setParent(  Object obj,  View view);   void setPassword(  Object obj,  boolean z);   void setScrollable(  Object obj,  boolean z);   void setSelected(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setText(  Object obj,  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityNodeInfoStubImpl.code","static class AccessibilityNodeInfoStubImpl implements AccessibilityNodeInfoImpl {   AccessibilityNodeInfoStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  View source){     return null;   }   @Override public Object obtain(  Object info){     return null;   }   @Override public void addAction(  Object info,  int action){   }   @Override public void addChild(  Object info,  View child){   }   @Override public List<Object> findAccessibilityNodeInfosByText(  Object info,  String text){     return null;   }   @Override public int getActions(  Object info){     return 0;   }   @Override public void getBoundsInParent(  Object info,  Rect outBounds){   }   @Override public void getBoundsInScreen(  Object info,  Rect outBounds){   }   @Override public Object getChild(  Object info,  int index){     return null;   }   @Override public int getChildCount(  Object info){     return 0;   }   @Override public CharSequence getClassName(  Object info){     return null;   }   @Override public CharSequence getContentDescription(  Object info){     return null;   }   @Override public CharSequence getPackageName(  Object info){     return null;   }   @Override public AccessibilityNodeInfoCompat getParent(  Object info){     return null;   }   @Override public CharSequence getText(  Object info){     return null;   }   @Override public int getWindowId(  Object info){     return 0;   }   @Override public boolean isCheckable(  Object info){     return false;   }   @Override public boolean isChecked(  Object info){     return false;   }   @Override public boolean isClickable(  Object info){     return false;   }   @Override public boolean isEnabled(  Object info){     return false;   }   @Override public boolean isFocusable(  Object info){     return false;   }   @Override public boolean isFocused(  Object info){     return false;   }   @Override public boolean isLongClickable(  Object info){     return false;   }   @Override public boolean isPassword(  Object info){     return false;   }   @Override public boolean isScrollable(  Object info){     return false;   }   @Override public boolean isSelected(  Object info){     return false;   }   @Override public boolean performAction(  Object info,  int action){     return false;   }   @Override public void setBoundsInParent(  Object info,  Rect bounds){   }   @Override public void setBoundsInScreen(  Object info,  Rect bounds){   }   @Override public void setCheckable(  Object info,  boolean checkable){   }   @Override public void setChecked(  Object info,  boolean checked){   }   @Override public void setClassName(  Object info,  CharSequence className){   }   @Override public void setClickable(  Object info,  boolean clickable){   }   @Override public void setContentDescription(  Object info,  CharSequence contentDescription){   }   @Override public void setEnabled(  Object info,  boolean enabled){   }   @Override public void setFocusable(  Object info,  boolean focusable){   }   @Override public void setFocused(  Object info,  boolean focused){   }   @Override public void setLongClickable(  Object info,  boolean longClickable){   }   @Override public void setPackageName(  Object info,  CharSequence packageName){   }   @Override public void setParent(  Object info,  View parent){   }   @Override public void setPassword(  Object info,  boolean password){   }   @Override public void setScrollable(  Object info,  boolean scrollable){   }   @Override public void setSelected(  Object info,  boolean selected){   }   @Override public void setSource(  Object info,  View source){   }   @Override public void setText(  Object info,  CharSequence text){   }   @Override public void recycle(  Object info){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityRecordCompat.code","public class AccessibilityRecordCompat {   private static final AccessibilityRecordImpl IMPL;   private final Object mRecord; interface AccessibilityRecordImpl {     int getAddedCount(    Object obj);     CharSequence getBeforeText(    Object obj);     CharSequence getClassName(    Object obj);     CharSequence getContentDescription(    Object obj);     int getCurrentItemIndex(    Object obj);     int getFromIndex(    Object obj);     int getItemCount(    Object obj);     int getMaxScrollX(    Object obj);     int getMaxScrollY(    Object obj);     Parcelable getParcelableData(    Object obj);     int getRemovedCount(    Object obj);     int getScrollX(    Object obj);     int getScrollY(    Object obj);     Object getSource(    Object obj);     List<CharSequence> getText(    Object obj);     int getToIndex(    Object obj);     int getWindowId(    Object obj);     boolean isChecked(    Object obj);     boolean isEnabled(    Object obj);     boolean isFullScreen(    Object obj);     boolean isPassword(    Object obj);     boolean isScrollable(    Object obj);     Object obtain();     Object obtain(    Object obj);     void recycle(    Object obj);     void setAddedCount(    Object obj,    int i);     void setBeforeText(    Object obj,    CharSequence charSequence);     void setChecked(    Object obj,    boolean z);     void setClassName(    Object obj,    CharSequence charSequence);     void setContentDescription(    Object obj,    CharSequence charSequence);     void setCurrentItemIndex(    Object obj,    int i);     void setEnabled(    Object obj,    boolean z);     void setFromIndex(    Object obj,    int i);     void setFullScreen(    Object obj,    boolean z);     void setItemCount(    Object obj,    int i);     void setMaxScrollX(    Object obj,    int i);     void setMaxScrollY(    Object obj,    int i);     void setParcelableData(    Object obj,    Parcelable parcelable);     void setPassword(    Object obj,    boolean z);     void setRemovedCount(    Object obj,    int i);     void setScrollX(    Object obj,    int i);     void setScrollY(    Object obj,    int i);     void setScrollable(    Object obj,    boolean z);     void setSource(    Object obj,    View view);     void setToIndex(    Object obj,    int i);   } static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {     AccessibilityRecordStubImpl(){     }     @Override public Object obtain(){       return null;     }     @Override public Object obtain(    Object record){       return null;     }     @Override public int getAddedCount(    Object record){       return 0;     }     @Override public CharSequence getBeforeText(    Object record){       return null;     }     @Override public CharSequence getClassName(    Object record){       return null;     }     @Override public CharSequence getContentDescription(    Object record){       return null;     }     @Override public int getCurrentItemIndex(    Object record){       return 0;     }     @Override public int getFromIndex(    Object record){       return 0;     }     @Override public int getItemCount(    Object record){       return 0;     }     @Override public int getMaxScrollX(    Object record){       return 0;     }     @Override public int getMaxScrollY(    Object record){       return 0;     }     @Override public Parcelable getParcelableData(    Object record){       return null;     }     @Override public int getRemovedCount(    Object record){       return 0;     }     @Override public int getScrollX(    Object record){       return 0;     }     @Override public int getScrollY(    Object record){       return 0;     }     @Override public Object getSource(    Object record){       return null;     }     @Override public List<CharSequence> getText(    Object record){       return null;     }     @Override public int getToIndex(    Object record){       return 0;     }     @Override public int getWindowId(    Object record){       return 0;     }     @Override public boolean isChecked(    Object record){       return false;     }     @Override public boolean isEnabled(    Object record){       return false;     }     @Override public boolean isFullScreen(    Object record){       return false;     }     @Override public boolean isPassword(    Object record){       return false;     }     @Override public boolean isScrollable(    Object record){       return false;     }     @Override public void recycle(    Object record){     }     @Override public void setAddedCount(    Object record,    int addedCount){     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){     }     @Override public void setChecked(    Object record,    boolean isChecked){     }     @Override public void setClassName(    Object record,    CharSequence className){     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){     }     @Override public void setEnabled(    Object record,    boolean isEnabled){     }     @Override public void setFromIndex(    Object record,    int fromIndex){     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){     }     @Override public void setItemCount(    Object record,    int itemCount){     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){     }     @Override public void setPassword(    Object record,    boolean isPassword){     }     @Override public void setRemovedCount(    Object record,    int removedCount){     }     @Override public void setScrollX(    Object record,    int scrollX){     }     @Override public void setScrollY(    Object record,    int scrollY){     }     @Override public void setScrollable(    Object record,    boolean scrollable){     }     @Override public void setSource(    Object record,    View source){     }     @Override public void setToIndex(    Object record,    int toIndex){     }   } static class AccessibilityRecordIcsImpl implements AccessibilityRecordImpl {     AccessibilityRecordIcsImpl(){     }     @Override public Object obtain(){       return AccessibilityRecordCompatIcs.obtain();     }     @Override public Object obtain(    Object record){       return AccessibilityRecordCompatIcs.obtain(record);     }     @Override public int getAddedCount(    Object record){       return AccessibilityRecordCompatIcs.getAddedCount(record);     }     @Override public CharSequence getBeforeText(    Object record){       return AccessibilityRecordCompatIcs.getBeforeText(record);     }     @Override public CharSequence getClassName(    Object record){       return AccessibilityRecordCompatIcs.getClassName(record);     }     @Override public CharSequence getContentDescription(    Object record){       return AccessibilityRecordCompatIcs.getContentDescription(record);     }     @Override public int getCurrentItemIndex(    Object record){       return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);     }     @Override public int getFromIndex(    Object record){       return AccessibilityRecordCompatIcs.getFromIndex(record);     }     @Override public int getItemCount(    Object record){       return AccessibilityRecordCompatIcs.getItemCount(record);     }     @Override public int getMaxScrollX(    Object record){       return 0;     }     @Override public int getMaxScrollY(    Object record){       return 0;     }     @Override public Parcelable getParcelableData(    Object record){       return AccessibilityRecordCompatIcs.getParcelableData(record);     }     @Override public int getRemovedCount(    Object record){       return AccessibilityRecordCompatIcs.getRemovedCount(record);     }     @Override public int getScrollX(    Object record){       return AccessibilityRecordCompatIcs.getScrollX(record);     }     @Override public int getScrollY(    Object record){       return AccessibilityRecordCompatIcs.getScrollY(record);     }     @Override public Object getSource(    Object record){       return AccessibilityRecordCompatIcs.getSource(record);     }     @Override public List<CharSequence> getText(    Object record){       return AccessibilityRecordCompatIcs.getText(record);     }     @Override public int getToIndex(    Object record){       return AccessibilityRecordCompatIcs.getToIndex(record);     }     @Override public int getWindowId(    Object record){       return AccessibilityRecordCompatIcs.getWindowId(record);     }     @Override public boolean isChecked(    Object record){       return AccessibilityRecordCompatIcs.isChecked(record);     }     @Override public boolean isEnabled(    Object record){       return AccessibilityRecordCompatIcs.isEnabled(record);     }     @Override public boolean isFullScreen(    Object record){       return AccessibilityRecordCompatIcs.isFullScreen(record);     }     @Override public boolean isPassword(    Object record){       return AccessibilityRecordCompatIcs.isPassword(record);     }     @Override public boolean isScrollable(    Object record){       return AccessibilityRecordCompatIcs.isScrollable(record);     }     @Override public void recycle(    Object record){       AccessibilityRecordCompatIcs.recycle(record);     }     @Override public void setAddedCount(    Object record,    int addedCount){       AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);     }     @Override public void setBeforeText(    Object record,    CharSequence beforeText){       AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);     }     @Override public void setChecked(    Object record,    boolean isChecked){       AccessibilityRecordCompatIcs.setChecked(record,isChecked);     }     @Override public void setClassName(    Object record,    CharSequence className){       AccessibilityRecordCompatIcs.setClassName(record,className);     }     @Override public void setContentDescription(    Object record,    CharSequence contentDescription){       AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);     }     @Override public void setCurrentItemIndex(    Object record,    int currentItemIndex){       AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);     }     @Override public void setEnabled(    Object record,    boolean isEnabled){       AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);     }     @Override public void setFromIndex(    Object record,    int fromIndex){       AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);     }     @Override public void setFullScreen(    Object record,    boolean isFullScreen){       AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);     }     @Override public void setItemCount(    Object record,    int itemCount){       AccessibilityRecordCompatIcs.setItemCount(record,itemCount);     }     @Override public void setMaxScrollX(    Object record,    int maxScrollX){     }     @Override public void setMaxScrollY(    Object record,    int maxScrollY){     }     @Override public void setParcelableData(    Object record,    Parcelable parcelableData){       AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);     }     @Override public void setPassword(    Object record,    boolean isPassword){       AccessibilityRecordCompatIcs.setPassword(record,isPassword);     }     @Override public void setRemovedCount(    Object record,    int removedCount){       AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);     }     @Override public void setScrollX(    Object record,    int scrollX){       AccessibilityRecordCompatIcs.setScrollX(record,scrollX);     }     @Override public void setScrollY(    Object record,    int scrollY){       AccessibilityRecordCompatIcs.setScrollY(record,scrollY);     }     @Override public void setScrollable(    Object record,    boolean scrollable){       AccessibilityRecordCompatIcs.setScrollable(record,scrollable);     }     @Override public void setSource(    Object record,    View source){       AccessibilityRecordCompatIcs.setSource(record,source);     }     @Override public void setToIndex(    Object record,    int toIndex){       AccessibilityRecordCompatIcs.setToIndex(record,toIndex);     }   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new AccessibilityRecordIcsImpl();     }  else {       IMPL=new AccessibilityRecordStubImpl();     }   }   public AccessibilityRecordCompat(  Object record){     this.mRecord=record;   }   public Object getImpl(){     return this.mRecord;   }   public static AccessibilityRecordCompat obtain(  AccessibilityRecordCompat record){     return new AccessibilityRecordCompat(IMPL.obtain(record.mRecord));   }   public static AccessibilityRecordCompat obtain(){     return new AccessibilityRecordCompat(IMPL.obtain());   }   public void setSource(  View source){     IMPL.setSource(this.mRecord,source);   }   public AccessibilityNodeInfoCompat getSource(){     return new AccessibilityNodeInfoCompat(IMPL.getSource(this.mRecord));   }   public int getWindowId(){     return IMPL.getWindowId(this.mRecord);   }   public boolean isChecked(){     return IMPL.isChecked(this.mRecord);   }   public void setChecked(  boolean isChecked){     IMPL.setChecked(this.mRecord,isChecked);   }   public boolean isEnabled(){     return IMPL.isEnabled(this.mRecord);   }   public void setEnabled(  boolean isEnabled){     IMPL.setEnabled(this.mRecord,isEnabled);   }   public boolean isPassword(){     return IMPL.isPassword(this.mRecord);   }   public void setPassword(  boolean isPassword){     IMPL.setPassword(this.mRecord,isPassword);   }   public boolean isFullScreen(){     return IMPL.isFullScreen(this.mRecord);   }   public void setFullScreen(  boolean isFullScreen){     IMPL.setFullScreen(this.mRecord,isFullScreen);   }   public boolean isScrollable(){     return IMPL.isScrollable(this.mRecord);   }   public void setScrollable(  boolean scrollable){     IMPL.setScrollable(this.mRecord,scrollable);   }   public int getItemCount(){     return IMPL.getItemCount(this.mRecord);   }   public void setItemCount(  int itemCount){     IMPL.setItemCount(this.mRecord,itemCount);   }   public int getCurrentItemIndex(){     return IMPL.getCurrentItemIndex(this.mRecord);   }   public void setCurrentItemIndex(  int currentItemIndex){     IMPL.setCurrentItemIndex(this.mRecord,currentItemIndex);   }   public int getFromIndex(){     return IMPL.getFromIndex(this.mRecord);   }   public void setFromIndex(  int fromIndex){     IMPL.setFromIndex(this.mRecord,fromIndex);   }   public int getToIndex(){     return IMPL.getToIndex(this.mRecord);   }   public void setToIndex(  int toIndex){     IMPL.setToIndex(this.mRecord,toIndex);   }   public int getScrollX(){     return IMPL.getScrollX(this.mRecord);   }   public void setScrollX(  int scrollX){     IMPL.setScrollX(this.mRecord,scrollX);   }   public int getScrollY(){     return IMPL.getScrollY(this.mRecord);   }   public void setScrollY(  int scrollY){     IMPL.setScrollY(this.mRecord,scrollY);   }   public int getAddedCount(){     return IMPL.getAddedCount(this.mRecord);   }   public void setAddedCount(  int addedCount){     IMPL.setAddedCount(this.mRecord,addedCount);   }   public int getRemovedCount(){     return IMPL.getRemovedCount(this.mRecord);   }   public void setRemovedCount(  int removedCount){     IMPL.setRemovedCount(this.mRecord,removedCount);   }   public CharSequence getClassName(){     return IMPL.getClassName(this.mRecord);   }   public void setClassName(  CharSequence className){     IMPL.setClassName(this.mRecord,className);   }   public List<CharSequence> getText(){     return IMPL.getText(this.mRecord);   }   public CharSequence getBeforeText(){     return IMPL.getBeforeText(this.mRecord);   }   public void setBeforeText(  CharSequence beforeText){     IMPL.setBeforeText(this.mRecord,beforeText);   }   public CharSequence getContentDescription(){     return IMPL.getContentDescription(this.mRecord);   }   public void setContentDescription(  CharSequence contentDescription){     IMPL.setContentDescription(this.mRecord,contentDescription);   }   public Parcelable getParcelableData(){     return IMPL.getParcelableData(this.mRecord);   }   public void setParcelableData(  Parcelable parcelableData){     IMPL.setParcelableData(this.mRecord,parcelableData);   }   public void recycle(){     IMPL.recycle(this.mRecord);   }   public int hashCode(){     if (this.mRecord == null) {       return 0;     }     return this.mRecord.hashCode();   }   public boolean equals(  Object obj){     if (this == obj) {       return true;     }     if (obj != null && getClass() == obj.getClass()) {       AccessibilityRecordCompat other=(AccessibilityRecordCompat)obj;       return this.mRecord == null ? other.mRecord == null : this.mRecord.equals(other.mRecord);     }     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityRecordCompatIcs.code","class AccessibilityRecordCompatIcs {   AccessibilityRecordCompatIcs(){   }   public static Object obtain(){     return AccessibilityRecord.obtain();   }   public static Object obtain(  Object record){     return AccessibilityRecord.obtain((AccessibilityRecord)record);   }   public static int getAddedCount(  Object record){     return ((AccessibilityRecord)record).getAddedCount();   }   public static CharSequence getBeforeText(  Object record){     return ((AccessibilityRecord)record).getBeforeText();   }   public static CharSequence getClassName(  Object record){     return ((AccessibilityRecord)record).getClassName();   }   public static CharSequence getContentDescription(  Object record){     return ((AccessibilityRecord)record).getContentDescription();   }   public static int getCurrentItemIndex(  Object record){     return ((AccessibilityRecord)record).getCurrentItemIndex();   }   public static int getFromIndex(  Object record){     return ((AccessibilityRecord)record).getFromIndex();   }   public static int getItemCount(  Object record){     return ((AccessibilityRecord)record).getItemCount();   }   public static Parcelable getParcelableData(  Object record){     return ((AccessibilityRecord)record).getParcelableData();   }   public static int getRemovedCount(  Object record){     return ((AccessibilityRecord)record).getRemovedCount();   }   public static int getScrollX(  Object record){     return ((AccessibilityRecord)record).getScrollX();   }   public static int getScrollY(  Object record){     return ((AccessibilityRecord)record).getScrollY();   }   public static Object getSource(  Object record){     return ((AccessibilityRecord)record).getSource();   }   public static List<CharSequence> getText(  Object record){     return ((AccessibilityRecord)record).getText();   }   public static int getToIndex(  Object record){     return ((AccessibilityRecord)record).getToIndex();   }   public static int getWindowId(  Object record){     return ((AccessibilityRecord)record).getWindowId();   }   public static boolean isChecked(  Object record){     return ((AccessibilityRecord)record).isChecked();   }   public static boolean isEnabled(  Object record){     return ((AccessibilityRecord)record).isEnabled();   }   public static boolean isFullScreen(  Object record){     return ((AccessibilityRecord)record).isFullScreen();   }   public static boolean isPassword(  Object record){     return ((AccessibilityRecord)record).isPassword();   }   public static boolean isScrollable(  Object record){     return ((AccessibilityRecord)record).isScrollable();   }   public static void recycle(  Object record){     ((AccessibilityRecord)record).recycle();   }   public static void setAddedCount(  Object record,  int addedCount){     ((AccessibilityRecord)record).setAddedCount(addedCount);   }   public static void setBeforeText(  Object record,  CharSequence beforeText){     ((AccessibilityRecord)record).setBeforeText(beforeText);   }   public static void setChecked(  Object record,  boolean isChecked){     ((AccessibilityRecord)record).setChecked(isChecked);   }   public static void setClassName(  Object record,  CharSequence className){     ((AccessibilityRecord)record).setClassName(className);   }   public static void setContentDescription(  Object record,  CharSequence contentDescription){     ((AccessibilityRecord)record).setContentDescription(contentDescription);   }   public static void setCurrentItemIndex(  Object record,  int currentItemIndex){     ((AccessibilityRecord)record).setCurrentItemIndex(currentItemIndex);   }   public static void setEnabled(  Object record,  boolean isEnabled){     ((AccessibilityRecord)record).setEnabled(isEnabled);   }   public static void setFromIndex(  Object record,  int fromIndex){     ((AccessibilityRecord)record).setFromIndex(fromIndex);   }   public static void setFullScreen(  Object record,  boolean isFullScreen){     ((AccessibilityRecord)record).setFullScreen(isFullScreen);   }   public static void setItemCount(  Object record,  int itemCount){     ((AccessibilityRecord)record).setItemCount(itemCount);   }   public static void setParcelableData(  Object record,  Parcelable parcelableData){     ((AccessibilityRecord)record).setParcelableData(parcelableData);   }   public static void setPassword(  Object record,  boolean isPassword){     ((AccessibilityRecord)record).setPassword(isPassword);   }   public static void setRemovedCount(  Object record,  int removedCount){     ((AccessibilityRecord)record).setRemovedCount(removedCount);   }   public static void setScrollX(  Object record,  int scrollX){     ((AccessibilityRecord)record).setScrollX(scrollX);   }   public static void setScrollY(  Object record,  int scrollY){     ((AccessibilityRecord)record).setScrollY(scrollY);   }   public static void setScrollable(  Object record,  boolean scrollable){     ((AccessibilityRecord)record).setScrollable(scrollable);   }   public static void setSource(  Object record,  View source){     ((AccessibilityRecord)record).setSource(source);   }   public static void setToIndex(  Object record,  int toIndex){     ((AccessibilityRecord)record).setToIndex(toIndex);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityRecordIcsImpl.code","static class AccessibilityRecordIcsImpl implements AccessibilityRecordImpl {   AccessibilityRecordIcsImpl(){   }   @Override public Object obtain(){     return AccessibilityRecordCompatIcs.obtain();   }   @Override public Object obtain(  Object record){     return AccessibilityRecordCompatIcs.obtain(record);   }   @Override public int getAddedCount(  Object record){     return AccessibilityRecordCompatIcs.getAddedCount(record);   }   @Override public CharSequence getBeforeText(  Object record){     return AccessibilityRecordCompatIcs.getBeforeText(record);   }   @Override public CharSequence getClassName(  Object record){     return AccessibilityRecordCompatIcs.getClassName(record);   }   @Override public CharSequence getContentDescription(  Object record){     return AccessibilityRecordCompatIcs.getContentDescription(record);   }   @Override public int getCurrentItemIndex(  Object record){     return AccessibilityRecordCompatIcs.getCurrentItemIndex(record);   }   @Override public int getFromIndex(  Object record){     return AccessibilityRecordCompatIcs.getFromIndex(record);   }   @Override public int getItemCount(  Object record){     return AccessibilityRecordCompatIcs.getItemCount(record);   }   @Override public int getMaxScrollX(  Object record){     return 0;   }   @Override public int getMaxScrollY(  Object record){     return 0;   }   @Override public Parcelable getParcelableData(  Object record){     return AccessibilityRecordCompatIcs.getParcelableData(record);   }   @Override public int getRemovedCount(  Object record){     return AccessibilityRecordCompatIcs.getRemovedCount(record);   }   @Override public int getScrollX(  Object record){     return AccessibilityRecordCompatIcs.getScrollX(record);   }   @Override public int getScrollY(  Object record){     return AccessibilityRecordCompatIcs.getScrollY(record);   }   @Override public Object getSource(  Object record){     return AccessibilityRecordCompatIcs.getSource(record);   }   @Override public List<CharSequence> getText(  Object record){     return AccessibilityRecordCompatIcs.getText(record);   }   @Override public int getToIndex(  Object record){     return AccessibilityRecordCompatIcs.getToIndex(record);   }   @Override public int getWindowId(  Object record){     return AccessibilityRecordCompatIcs.getWindowId(record);   }   @Override public boolean isChecked(  Object record){     return AccessibilityRecordCompatIcs.isChecked(record);   }   @Override public boolean isEnabled(  Object record){     return AccessibilityRecordCompatIcs.isEnabled(record);   }   @Override public boolean isFullScreen(  Object record){     return AccessibilityRecordCompatIcs.isFullScreen(record);   }   @Override public boolean isPassword(  Object record){     return AccessibilityRecordCompatIcs.isPassword(record);   }   @Override public boolean isScrollable(  Object record){     return AccessibilityRecordCompatIcs.isScrollable(record);   }   @Override public void recycle(  Object record){     AccessibilityRecordCompatIcs.recycle(record);   }   @Override public void setAddedCount(  Object record,  int addedCount){     AccessibilityRecordCompatIcs.setAddedCount(record,addedCount);   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){     AccessibilityRecordCompatIcs.setBeforeText(record,beforeText);   }   @Override public void setChecked(  Object record,  boolean isChecked){     AccessibilityRecordCompatIcs.setChecked(record,isChecked);   }   @Override public void setClassName(  Object record,  CharSequence className){     AccessibilityRecordCompatIcs.setClassName(record,className);   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){     AccessibilityRecordCompatIcs.setContentDescription(record,contentDescription);   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){     AccessibilityRecordCompatIcs.setCurrentItemIndex(record,currentItemIndex);   }   @Override public void setEnabled(  Object record,  boolean isEnabled){     AccessibilityRecordCompatIcs.setEnabled(record,isEnabled);   }   @Override public void setFromIndex(  Object record,  int fromIndex){     AccessibilityRecordCompatIcs.setFromIndex(record,fromIndex);   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){     AccessibilityRecordCompatIcs.setFullScreen(record,isFullScreen);   }   @Override public void setItemCount(  Object record,  int itemCount){     AccessibilityRecordCompatIcs.setItemCount(record,itemCount);   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){     AccessibilityRecordCompatIcs.setParcelableData(record,parcelableData);   }   @Override public void setPassword(  Object record,  boolean isPassword){     AccessibilityRecordCompatIcs.setPassword(record,isPassword);   }   @Override public void setRemovedCount(  Object record,  int removedCount){     AccessibilityRecordCompatIcs.setRemovedCount(record,removedCount);   }   @Override public void setScrollX(  Object record,  int scrollX){     AccessibilityRecordCompatIcs.setScrollX(record,scrollX);   }   @Override public void setScrollY(  Object record,  int scrollY){     AccessibilityRecordCompatIcs.setScrollY(record,scrollY);   }   @Override public void setScrollable(  Object record,  boolean scrollable){     AccessibilityRecordCompatIcs.setScrollable(record,scrollable);   }   @Override public void setSource(  Object record,  View source){     AccessibilityRecordCompatIcs.setSource(record,source);   }   @Override public void setToIndex(  Object record,  int toIndex){     AccessibilityRecordCompatIcs.setToIndex(record,toIndex);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityRecordImpl.code","interface AccessibilityRecordImpl {   int getAddedCount(  Object obj);   CharSequence getBeforeText(  Object obj);   CharSequence getClassName(  Object obj);   CharSequence getContentDescription(  Object obj);   int getCurrentItemIndex(  Object obj);   int getFromIndex(  Object obj);   int getItemCount(  Object obj);   int getMaxScrollX(  Object obj);   int getMaxScrollY(  Object obj);   Parcelable getParcelableData(  Object obj);   int getRemovedCount(  Object obj);   int getScrollX(  Object obj);   int getScrollY(  Object obj);   Object getSource(  Object obj);   List<CharSequence> getText(  Object obj);   int getToIndex(  Object obj);   int getWindowId(  Object obj);   boolean isChecked(  Object obj);   boolean isEnabled(  Object obj);   boolean isFullScreen(  Object obj);   boolean isPassword(  Object obj);   boolean isScrollable(  Object obj);   Object obtain();   Object obtain(  Object obj);   void recycle(  Object obj);   void setAddedCount(  Object obj,  int i);   void setBeforeText(  Object obj,  CharSequence charSequence);   void setChecked(  Object obj,  boolean z);   void setClassName(  Object obj,  CharSequence charSequence);   void setContentDescription(  Object obj,  CharSequence charSequence);   void setCurrentItemIndex(  Object obj,  int i);   void setEnabled(  Object obj,  boolean z);   void setFromIndex(  Object obj,  int i);   void setFullScreen(  Object obj,  boolean z);   void setItemCount(  Object obj,  int i);   void setMaxScrollX(  Object obj,  int i);   void setMaxScrollY(  Object obj,  int i);   void setParcelableData(  Object obj,  Parcelable parcelable);   void setPassword(  Object obj,  boolean z);   void setRemovedCount(  Object obj,  int i);   void setScrollX(  Object obj,  int i);   void setScrollY(  Object obj,  int i);   void setScrollable(  Object obj,  boolean z);   void setSource(  Object obj,  View view);   void setToIndex(  Object obj,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityRecordStubImpl.code","static class AccessibilityRecordStubImpl implements AccessibilityRecordImpl {   AccessibilityRecordStubImpl(){   }   @Override public Object obtain(){     return null;   }   @Override public Object obtain(  Object record){     return null;   }   @Override public int getAddedCount(  Object record){     return 0;   }   @Override public CharSequence getBeforeText(  Object record){     return null;   }   @Override public CharSequence getClassName(  Object record){     return null;   }   @Override public CharSequence getContentDescription(  Object record){     return null;   }   @Override public int getCurrentItemIndex(  Object record){     return 0;   }   @Override public int getFromIndex(  Object record){     return 0;   }   @Override public int getItemCount(  Object record){     return 0;   }   @Override public int getMaxScrollX(  Object record){     return 0;   }   @Override public int getMaxScrollY(  Object record){     return 0;   }   @Override public Parcelable getParcelableData(  Object record){     return null;   }   @Override public int getRemovedCount(  Object record){     return 0;   }   @Override public int getScrollX(  Object record){     return 0;   }   @Override public int getScrollY(  Object record){     return 0;   }   @Override public Object getSource(  Object record){     return null;   }   @Override public List<CharSequence> getText(  Object record){     return null;   }   @Override public int getToIndex(  Object record){     return 0;   }   @Override public int getWindowId(  Object record){     return 0;   }   @Override public boolean isChecked(  Object record){     return false;   }   @Override public boolean isEnabled(  Object record){     return false;   }   @Override public boolean isFullScreen(  Object record){     return false;   }   @Override public boolean isPassword(  Object record){     return false;   }   @Override public boolean isScrollable(  Object record){     return false;   }   @Override public void recycle(  Object record){   }   @Override public void setAddedCount(  Object record,  int addedCount){   }   @Override public void setBeforeText(  Object record,  CharSequence beforeText){   }   @Override public void setChecked(  Object record,  boolean isChecked){   }   @Override public void setClassName(  Object record,  CharSequence className){   }   @Override public void setContentDescription(  Object record,  CharSequence contentDescription){   }   @Override public void setCurrentItemIndex(  Object record,  int currentItemIndex){   }   @Override public void setEnabled(  Object record,  boolean isEnabled){   }   @Override public void setFromIndex(  Object record,  int fromIndex){   }   @Override public void setFullScreen(  Object record,  boolean isFullScreen){   }   @Override public void setItemCount(  Object record,  int itemCount){   }   @Override public void setMaxScrollX(  Object record,  int maxScrollX){   }   @Override public void setMaxScrollY(  Object record,  int maxScrollY){   }   @Override public void setParcelableData(  Object record,  Parcelable parcelableData){   }   @Override public void setPassword(  Object record,  boolean isPassword){   }   @Override public void setRemovedCount(  Object record,  int removedCount){   }   @Override public void setScrollX(  Object record,  int scrollX){   }   @Override public void setScrollY(  Object record,  int scrollY){   }   @Override public void setScrollable(  Object record,  boolean scrollable){   }   @Override public void setSource(  Object record,  View source){   }   @Override public void setToIndex(  Object record,  int toIndex){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityStateChangeListenerBridge.code","interface AccessibilityStateChangeListenerBridge {   void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.view.accessibility\AccessibilityStateChangeListenerCompat.code","public static abstract class AccessibilityStateChangeListenerCompat {   final Object mListener=AccessibilityManagerCompat.IMPL.newAccessiblityStateChangeListener(this);   public abstract void onAccessibilityStateChanged(  boolean z); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\BaseEdgeEffectImpl.code","static class BaseEdgeEffectImpl implements EdgeEffectImpl {   BaseEdgeEffectImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return null;   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){   }   @Override public boolean isFinished(  Object edgeEffect){     return true;   }   @Override public void finish(  Object edgeEffect){   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return false;   }   @Override public boolean onRelease(  Object edgeEffect){     return false;   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return false;   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\ChangeObserver.code","public class ChangeObserver extends ContentObserver {   public ChangeObserver(){     super(new Handler());   }   @Override public boolean deliverSelfNotifications(){     return true;   }   @Override public void onChange(  boolean selfChange){     CursorAdapter.this.onContentChanged();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\CursorAdapter.code","public abstract class CursorAdapter extends BaseAdapter implements Filterable, CursorFilter.CursorFilterClient {   @Deprecated public static final int FLAG_AUTO_REQUERY=1;   public static final int FLAG_REGISTER_CONTENT_OBSERVER=2;   protected boolean mAutoRequery;   protected ChangeObserver mChangeObserver;   protected Context mContext;   protected Cursor mCursor;   protected CursorFilter mCursorFilter;   protected DataSetObserver mDataSetObserver;   protected boolean mDataValid;   protected FilterQueryProvider mFilterQueryProvider;   protected int mRowIDColumn;   public abstract void bindView(  View view,  Context context,  Cursor cursor);   public abstract View newView(  Context context,  Cursor cursor,  ViewGroup viewGroup);   @Deprecated public CursorAdapter(  Context context,  Cursor c){     init(context,c,1);   }   public CursorAdapter(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   public CursorAdapter(  Context context,  Cursor c,  int flags){     init(context,c,flags);   }   @Deprecated protected void init(  Context context,  Cursor c,  boolean autoRequery){     init(context,c,autoRequery ? 1 : 2);   }   void init(  Context context,  Cursor c,  int flags){     if ((flags & 1) == 1) {       flags|=2;       this.mAutoRequery=true;     }  else {       this.mAutoRequery=false;     }     boolean cursorPresent=c != null;     this.mCursor=c;     this.mDataValid=cursorPresent;     this.mContext=context;     this.mRowIDColumn=cursorPresent ? c.getColumnIndexOrThrow(""_id"") : -1;     if ((flags & 2) == 2) {       this.mChangeObserver=new ChangeObserver();       this.mDataSetObserver=new MyDataSetObserver();     }  else {       this.mChangeObserver=null;       this.mDataSetObserver=null;     }     if (cursorPresent) {       if (this.mChangeObserver != null) {         c.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         c.registerDataSetObserver(this.mDataSetObserver);       }     }   }   @Override public Cursor getCursor(){     return this.mCursor;   }   @Override public int getCount(){     if (!this.mDataValid || this.mCursor == null) {       return 0;     }     return this.mCursor.getCount();   }   @Override public Object getItem(  int position){     if (!this.mDataValid || this.mCursor == null) {       return null;     }     this.mCursor.moveToPosition(position);     return this.mCursor;   }   @Override public long getItemId(  int position){     if (this.mDataValid && this.mCursor != null && this.mCursor.moveToPosition(position)) {       return this.mCursor.getLong(this.mRowIDColumn);     }     return 0L;   }   @Override public boolean hasStableIds(){     return true;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     View v;     if (!this.mDataValid) {       throw new IllegalStateException(""this should only be called when the cursor is valid"");     }     if (!this.mCursor.moveToPosition(position)) {       throw new IllegalStateException(""couldn't move cursor to position "" + position);     }     if (convertView == null) {       v=newView(this.mContext,this.mCursor,parent);     }  else {       v=convertView;     }     bindView(v,this.mContext,this.mCursor);     return v;   }   @Override public View getDropDownView(  int position,  View convertView,  ViewGroup parent){     View v;     if (this.mDataValid) {       this.mCursor.moveToPosition(position);       if (convertView == null) {         v=newDropDownView(this.mContext,this.mCursor,parent);       }  else {         v=convertView;       }       bindView(v,this.mContext,this.mCursor);       return v;     }     return null;   }   public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return newView(context,cursor,parent);   }   @Override public void changeCursor(  Cursor cursor){     Cursor old=swapCursor(cursor);     if (old != null) {       old.close();     }   }   public Cursor swapCursor(  Cursor newCursor){     if (newCursor == this.mCursor) {       return null;     }     Cursor oldCursor=this.mCursor;     if (oldCursor != null) {       if (this.mChangeObserver != null) {         oldCursor.unregisterContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         oldCursor.unregisterDataSetObserver(this.mDataSetObserver);       }     }     this.mCursor=newCursor;     if (newCursor != null) {       if (this.mChangeObserver != null) {         newCursor.registerContentObserver(this.mChangeObserver);       }       if (this.mDataSetObserver != null) {         newCursor.registerDataSetObserver(this.mDataSetObserver);       }       this.mRowIDColumn=newCursor.getColumnIndexOrThrow(""_id"");       this.mDataValid=true;       notifyDataSetChanged();       return oldCursor;     }     this.mRowIDColumn=-1;     this.mDataValid=false;     notifyDataSetInvalidated();     return oldCursor;   }   @Override public CharSequence convertToString(  Cursor cursor){     return cursor == null ? """" : cursor.toString();   }   @Override public Cursor runQueryOnBackgroundThread(  CharSequence constraint){     return this.mFilterQueryProvider != null ? this.mFilterQueryProvider.runQuery(constraint) : this.mCursor;   }   @Override public Filter getFilter(){     if (this.mCursorFilter == null) {       this.mCursorFilter=new CursorFilter(this);     }     return this.mCursorFilter;   }   public FilterQueryProvider getFilterQueryProvider(){     return this.mFilterQueryProvider;   }   public void setFilterQueryProvider(  FilterQueryProvider filterQueryProvider){     this.mFilterQueryProvider=filterQueryProvider;   }   protected void onContentChanged(){     if (this.mAutoRequery && this.mCursor != null && !this.mCursor.isClosed()) {       this.mDataValid=this.mCursor.requery();     }   } public class ChangeObserver extends ContentObserver {     public ChangeObserver(){       super(new Handler());     }     @Override public boolean deliverSelfNotifications(){       return true;     }     @Override public void onChange(    boolean selfChange){       CursorAdapter.this.onContentChanged();     }   } public class MyDataSetObserver extends DataSetObserver {     private MyDataSetObserver(){     }     @Override public void onChanged(){       CursorAdapter.this.mDataValid=true;       CursorAdapter.this.notifyDataSetChanged();     }     @Override public void onInvalidated(){       CursorAdapter.this.mDataValid=false;       CursorAdapter.this.notifyDataSetInvalidated();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\CursorFilter.code","class CursorFilter extends Filter {   CursorFilterClient mClient; interface CursorFilterClient {     void changeCursor(    Cursor cursor);     CharSequence convertToString(    Cursor cursor);     Cursor getCursor();     Cursor runQueryOnBackgroundThread(    CharSequence charSequence);   }   public CursorFilter(  CursorFilterClient client){     this.mClient=client;   }   @Override public CharSequence convertResultToString(  Object resultValue){     return this.mClient.convertToString((Cursor)resultValue);   }   @Override protected Filter.FilterResults performFiltering(  CharSequence constraint){     Cursor cursor=this.mClient.runQueryOnBackgroundThread(constraint);     Filter.FilterResults results=new Filter.FilterResults();     if (cursor != null) {       results.count=cursor.getCount();       results.values=cursor;     }  else {       results.count=0;       results.values=null;     }     return results;   }   @Override protected void publishResults(  CharSequence constraint,  Filter.FilterResults results){     Cursor oldCursor=this.mClient.getCursor();     if (results.values != null && results.values != oldCursor) {       this.mClient.changeCursor((Cursor)results.values);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\CursorFilterClient.code","interface CursorFilterClient {   void changeCursor(  Cursor cursor);   CharSequence convertToString(  Cursor cursor);   Cursor getCursor();   Cursor runQueryOnBackgroundThread(  CharSequence charSequence); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\CursorToStringConverter.code","public interface CursorToStringConverter {   CharSequence convertToString(  Cursor cursor); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\EdgeEffectCompat.code","public class EdgeEffectCompat {   private static final EdgeEffectImpl IMPL;   private Object mEdgeEffect; interface EdgeEffectImpl {     boolean draw(    Object obj,    Canvas canvas);     void finish(    Object obj);     boolean isFinished(    Object obj);     Object newEdgeEffect(    Context context);     boolean onAbsorb(    Object obj,    int i);     boolean onPull(    Object obj,    float f);     boolean onRelease(    Object obj);     void setSize(    Object obj,    int i,    int i2);   } static {     if (Build.VERSION.SDK_INT >= 14) {       IMPL=new EdgeEffectIcsImpl();     }  else {       IMPL=new BaseEdgeEffectImpl();     }   } static class BaseEdgeEffectImpl implements EdgeEffectImpl {     BaseEdgeEffectImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return null;     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){     }     @Override public boolean isFinished(    Object edgeEffect){       return true;     }     @Override public void finish(    Object edgeEffect){     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return false;     }     @Override public boolean onRelease(    Object edgeEffect){       return false;     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return false;     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return false;     }   } static class EdgeEffectIcsImpl implements EdgeEffectImpl {     EdgeEffectIcsImpl(){     }     @Override public Object newEdgeEffect(    Context context){       return EdgeEffectCompatIcs.newEdgeEffect(context);     }     @Override public void setSize(    Object edgeEffect,    int width,    int height){       EdgeEffectCompatIcs.setSize(edgeEffect,width,height);     }     @Override public boolean isFinished(    Object edgeEffect){       return EdgeEffectCompatIcs.isFinished(edgeEffect);     }     @Override public void finish(    Object edgeEffect){       EdgeEffectCompatIcs.finish(edgeEffect);     }     @Override public boolean onPull(    Object edgeEffect,    float deltaDistance){       return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);     }     @Override public boolean onRelease(    Object edgeEffect){       return EdgeEffectCompatIcs.onRelease(edgeEffect);     }     @Override public boolean onAbsorb(    Object edgeEffect,    int velocity){       return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);     }     @Override public boolean draw(    Object edgeEffect,    Canvas canvas){       return EdgeEffectCompatIcs.draw(edgeEffect,canvas);     }   }   public EdgeEffectCompat(  Context context){     this.mEdgeEffect=IMPL.newEdgeEffect(context);   }   public void setSize(  int width,  int height){     IMPL.setSize(this.mEdgeEffect,width,height);   }   public boolean isFinished(){     return IMPL.isFinished(this.mEdgeEffect);   }   public void finish(){     IMPL.finish(this.mEdgeEffect);   }   public boolean onPull(  float deltaDistance){     return IMPL.onPull(this.mEdgeEffect,deltaDistance);   }   public boolean onRelease(){     return IMPL.onRelease(this.mEdgeEffect);   }   public boolean onAbsorb(  int velocity){     return IMPL.onAbsorb(this.mEdgeEffect,velocity);   }   public boolean draw(  Canvas canvas){     return IMPL.draw(this.mEdgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\EdgeEffectCompatIcs.code","class EdgeEffectCompatIcs {   EdgeEffectCompatIcs(){   }   public static Object newEdgeEffect(  Context context){     return new EdgeEffect(context);   }   public static void setSize(  Object edgeEffect,  int width,  int height){     ((EdgeEffect)edgeEffect).setSize(width,height);   }   public static boolean isFinished(  Object edgeEffect){     return ((EdgeEffect)edgeEffect).isFinished();   }   public static void finish(  Object edgeEffect){     ((EdgeEffect)edgeEffect).finish();   }   public static boolean onPull(  Object edgeEffect,  float deltaDistance){     ((EdgeEffect)edgeEffect).onPull(deltaDistance);     return true;   }   public static boolean onRelease(  Object edgeEffect){     EdgeEffect eff=(EdgeEffect)edgeEffect;     eff.onRelease();     return eff.isFinished();   }   public static boolean onAbsorb(  Object edgeEffect,  int velocity){     ((EdgeEffect)edgeEffect).onAbsorb(velocity);     return true;   }   public static boolean draw(  Object edgeEffect,  Canvas canvas){     return ((EdgeEffect)edgeEffect).draw(canvas);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\EdgeEffectIcsImpl.code","static class EdgeEffectIcsImpl implements EdgeEffectImpl {   EdgeEffectIcsImpl(){   }   @Override public Object newEdgeEffect(  Context context){     return EdgeEffectCompatIcs.newEdgeEffect(context);   }   @Override public void setSize(  Object edgeEffect,  int width,  int height){     EdgeEffectCompatIcs.setSize(edgeEffect,width,height);   }   @Override public boolean isFinished(  Object edgeEffect){     return EdgeEffectCompatIcs.isFinished(edgeEffect);   }   @Override public void finish(  Object edgeEffect){     EdgeEffectCompatIcs.finish(edgeEffect);   }   @Override public boolean onPull(  Object edgeEffect,  float deltaDistance){     return EdgeEffectCompatIcs.onPull(edgeEffect,deltaDistance);   }   @Override public boolean onRelease(  Object edgeEffect){     return EdgeEffectCompatIcs.onRelease(edgeEffect);   }   @Override public boolean onAbsorb(  Object edgeEffect,  int velocity){     return EdgeEffectCompatIcs.onAbsorb(edgeEffect,velocity);   }   @Override public boolean draw(  Object edgeEffect,  Canvas canvas){     return EdgeEffectCompatIcs.draw(edgeEffect,canvas);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\EdgeEffectImpl.code","interface EdgeEffectImpl {   boolean draw(  Object obj,  Canvas canvas);   void finish(  Object obj);   boolean isFinished(  Object obj);   Object newEdgeEffect(  Context context);   boolean onAbsorb(  Object obj,  int i);   boolean onPull(  Object obj,  float f);   boolean onRelease(  Object obj);   void setSize(  Object obj,  int i,  int i2); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\MyDataSetObserver.code","public class MyDataSetObserver extends DataSetObserver {   private MyDataSetObserver(){   }   @Override public void onChanged(){     CursorAdapter.this.mDataValid=true;     CursorAdapter.this.notifyDataSetChanged();   }   @Override public void onInvalidated(){     CursorAdapter.this.mDataValid=false;     CursorAdapter.this.notifyDataSetInvalidated();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\ResourceCursorAdapter.code","public abstract class ResourceCursorAdapter extends CursorAdapter {   private int mDropDownLayout;   private LayoutInflater mInflater;   private int mLayout;   @Deprecated public ResourceCursorAdapter(  Context context,  int layout,  Cursor c){     super(context,c);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  boolean autoRequery){     super(context,c,autoRequery);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   public ResourceCursorAdapter(  Context context,  int layout,  Cursor c,  int flags){     super(context,c,flags);     this.mDropDownLayout=layout;     this.mLayout=layout;     this.mInflater=(LayoutInflater)context.getSystemService(""layout_inflater"");   }   @Override public View newView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mLayout,parent,false);   }   @Override public View newDropDownView(  Context context,  Cursor cursor,  ViewGroup parent){     return this.mInflater.inflate(this.mDropDownLayout,parent,false);   }   public void setViewResource(  int layout){     this.mLayout=layout;   }   public void setDropDownViewResource(  int dropDownLayout){     this.mDropDownLayout=dropDownLayout;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\SimpleCursorAdapter.code","public class SimpleCursorAdapter extends ResourceCursorAdapter {   private CursorToStringConverter mCursorToStringConverter;   protected int[] mFrom;   String[] mOriginalFrom;   private int mStringConversionColumn;   protected int[] mTo;   private ViewBinder mViewBinder; public interface CursorToStringConverter {     CharSequence convertToString(    Cursor cursor);   } public interface ViewBinder {     boolean setViewValue(    View view,    Cursor cursor,    int i);   }   @Deprecated public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to){     super(context,layout,c);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   public SimpleCursorAdapter(  Context context,  int layout,  Cursor c,  String[] from,  int[] to,  int flags){     super(context,layout,c,flags);     this.mStringConversionColumn=-1;     this.mTo=to;     this.mOriginalFrom=from;     findColumns(from);   }   @Override public void bindView(  View view,  Context context,  Cursor cursor){     ViewBinder binder=this.mViewBinder;     int count=this.mTo.length;     int[] from=this.mFrom;     int[] to=this.mTo;     for (int i=0; i < count; i++) {       View v=view.findViewById(to[i]);       if (v != null) {         boolean bound=false;         if (binder != null) {           bound=binder.setViewValue(v,cursor,from[i]);         }         if (bound) {           continue;         }  else {           String text=cursor.getString(from[i]);           if (text == null) {             text="""";           }           if (v instanceof TextView) {             setViewText((TextView)v,text);           }  else           if (v instanceof ImageView) {             setViewImage((ImageView)v,text);           }  else {             throw new IllegalStateException(v.getClass().getName() + "" is not a  view that can be bounds by this SimpleCursorAdapter"");           }         }       }     }   }   public ViewBinder getViewBinder(){     return this.mViewBinder;   }   public void setViewBinder(  ViewBinder viewBinder){     this.mViewBinder=viewBinder;   }   public void setViewImage(  ImageView v,  String value){     try {       v.setImageResource(Integer.parseInt(value));     }  catch (    NumberFormatException e) {       v.setImageURI(Uri.parse(value));     }   }   public void setViewText(  TextView v,  String text){     v.setText(text);   }   public int getStringConversionColumn(){     return this.mStringConversionColumn;   }   public void setStringConversionColumn(  int stringConversionColumn){     this.mStringConversionColumn=stringConversionColumn;   }   public CursorToStringConverter getCursorToStringConverter(){     return this.mCursorToStringConverter;   }   public void setCursorToStringConverter(  CursorToStringConverter cursorToStringConverter){     this.mCursorToStringConverter=cursorToStringConverter;   }   @Override public CharSequence convertToString(  Cursor cursor){     if (this.mCursorToStringConverter != null) {       return this.mCursorToStringConverter.convertToString(cursor);     }     if (this.mStringConversionColumn > -1) {       return cursor.getString(this.mStringConversionColumn);     }     return super.convertToString(cursor);   }   private void findColumns(  String[] from){     if (this.mCursor != null) {       int count=from.length;       if (this.mFrom == null || this.mFrom.length != count) {         this.mFrom=new int[count];       }       for (int i=0; i < count; i++) {         this.mFrom[i]=this.mCursor.getColumnIndexOrThrow(from[i]);       }       return;     }     this.mFrom=null;   }   @Override public Cursor swapCursor(  Cursor c){     Cursor res=super.swapCursor(c);     findColumns(this.mOriginalFrom);     return res;   }   public void changeCursorAndColumns(  Cursor c,  String[] from,  int[] to){     this.mOriginalFrom=from;     this.mTo=to;     super.changeCursor(c);     findColumns(this.mOriginalFrom);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\android.support.v4.widget\ViewBinder.code","public interface ViewBinder {   boolean setViewValue(  View view,  Cursor cursor,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery\AbstractAQuery.code","public abstract class AbstractAQuery<T extends AbstractAQuery<T>> implements Constants {   private Activity act;   protected AccountHandle ah;   private Constructor<T> constructor;   private Context context;   private int policy=0;   protected Object progress;   private HttpHost proxy;   private View root;   private Transformer trans;   protected View view;   private static final Class<?>[] ON_CLICK_SIG={View.class};   private static Class<?>[] ON_ITEM_SIG={AdapterView.class,View.class,Integer.TYPE,Long.TYPE};   private static Class<?>[] ON_SCROLLED_STATE_SIG={AbsListView.class,Integer.TYPE};   private static final Class<?>[] TEXT_CHANGE_SIG={CharSequence.class,Integer.TYPE,Integer.TYPE,Integer.TYPE};   private static Class<?>[] PENDING_TRANSITION_SIG={Integer.TYPE,Integer.TYPE};   private static final Class<?>[] OVER_SCROLL_SIG={Integer.TYPE};   private static Class<?>[] LAYER_TYPE_SIG={Integer.TYPE,Paint.class};   private static WeakHashMap<Dialog,Void> dialogs=new WeakHashMap<>();   protected T create(  View view){     T result=null;     try {       Constructor<T> c=getConstructor();       result=c.newInstance(view);       result.act=this.act;       return result;     }  catch (    Exception e) {       e.printStackTrace();       return result;     }   }   private Constructor<T> getConstructor(){     if (this.constructor == null) {       try {         this.constructor=(Constructor<T>)getClass().getConstructor(View.class);       }  catch (      Exception e) {         e.printStackTrace();       }     }     return this.constructor;   }   public AbstractAQuery(  Activity act){     this.act=act;   }   public AbstractAQuery(  View root){     this.root=root;     this.view=root;   }   public AbstractAQuery(  Activity act,  View root){     this.root=root;     this.view=root;     this.act=act;   }   public AbstractAQuery(  Context context){     this.context=context;   }   private View findView(  int id){     if (this.root != null) {       View result=this.root.findViewById(id);       return result;     }     if (this.act == null) {       return null;     }     View result2=this.act.findViewById(id);     return result2;   }   private View findView(  String tag){     View top;     if (this.root != null) {       View result=this.root.findViewWithTag(tag);       return result;     }     if (this.act == null || (top=((ViewGroup)this.act.findViewById(R.id.content)).getChildAt(0)) == null) {       return null;     }     View result2=top.findViewWithTag(tag);     return result2;   }   private View findView(  int... path){     View result=findView(path[0]);     for (int i=1; i < path.length && result != null; i++) {       result=result.findViewById(path[i]);     }     return result;   }   public T find(  int id){     View view=findView(id);     return create(view);   }   public T parent(  int id){     View node=this.view;     View result=null;     while (true) {       if (node == null) {         break;       }       if (node.getId() == id) {         result=node;         break;       }       Object parent=node.getParent();       if (!(parent instanceof View)) {         break;       }       node=(View)parent;     }     return create(result);   }   public T recycle(  View root){     this.root=root;     this.view=root;     reset();     this.context=null;     return self();   }   private T self(){     return this;   }   public View getView(){     return this.view;   }   public T id(  int id){     return id(findView(id));   }   public T id(  View view){     this.view=view;     reset();     return self();   }   public T id(  String tag){     return id(findView(tag));   }   public T id(  int... path){     return id(findView(path));   }   public T progress(  int id){     this.progress=findView(id);     return self();   }   public T progress(  Object view){     this.progress=view;     return self();   }   public T progress(  Dialog dialog){     this.progress=dialog;     return self();   }   public T auth(  AccountHandle handle){     this.ah=handle;     return self();   }   public T transformer(  Transformer transformer){     this.trans=transformer;     return self();   }   public T policy(  int cachePolicy){     this.policy=cachePolicy;     return self();   }   public T proxy(  String host,  int port){     this.proxy=new HttpHost(host,port);     return self();   }   public T rating(  float rating){     if (this.view instanceof RatingBar) {       RatingBar rb=(RatingBar)this.view;       rb.setRating(rating);     }     return self();   }   public T text(  int resid){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setText(resid);     }     return self();   }   public T text(  int resid,  Object... formatArgs){     Context context=getContext();     if (context != null) {       CharSequence text=context.getString(resid,formatArgs);       text(text);     }     return self();   }   public T text(  CharSequence text){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setText(text);     }     return self();   }   public T text(  CharSequence text,  boolean goneIfEmpty){     return (goneIfEmpty && (text == null || text.length() == 0)) ? gone() : text(text);   }   public T text(  Spanned text){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setText(text);     }     return self();   }   public T textColor(  int color){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setTextColor(color);     }     return self();   }   public T typeface(  Typeface tf){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setTypeface(tf);     }     return self();   }   public T textSize(  float size){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       tv.setTextSize(size);     }     return self();   }   public T adapter(  Adapter adapter){     if (this.view instanceof AdapterView) {       AdapterView av=(AdapterView)this.view;       av.setAdapter(adapter);     }     return self();   }   public T adapter(  ExpandableListAdapter adapter){     if (this.view instanceof ExpandableListView) {       ExpandableListView av=(ExpandableListView)this.view;       av.setAdapter(adapter);     }     return self();   }   public T image(  int resid){     if (this.view instanceof ImageView) {       ImageView iv=(ImageView)this.view;       iv.setTag(Constants.TAG_URL,null);       if (resid == 0) {         iv.setImageBitmap(null);       }  else {         iv.setImageResource(resid);       }     }     return self();   }   public T image(  Drawable drawable){     if (this.view instanceof ImageView) {       ImageView iv=(ImageView)this.view;       iv.setTag(Constants.TAG_URL,null);       iv.setImageDrawable(drawable);     }     return self();   }   public T image(  Bitmap bm){     if (this.view instanceof ImageView) {       ImageView iv=(ImageView)this.view;       iv.setTag(Constants.TAG_URL,null);       iv.setImageBitmap(bm);     }     return self();   }   public T image(  String url){     return image(url,true,true,0,0);   }   public T image(  String url,  boolean memCache,  boolean fileCache){     return image(url,memCache,fileCache,0,0);   }   public T image(  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int fallbackId){     return image(url,memCache,fileCache,targetWidth,fallbackId,null,0);   }   public T image(  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int fallbackId,  Bitmap preset,  int animId){     return image(url,memCache,fileCache,targetWidth,fallbackId,preset,animId,0.0f);   }   public T image(  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int fallbackId,  Bitmap preset,  int animId,  float ratio){     return image(url,memCache,fileCache,targetWidth,fallbackId,preset,animId,ratio,0,null);   }   protected T image(  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int fallbackId,  Bitmap preset,  int animId,  float ratio,  int round,  String networkUrl){     if (this.view instanceof ImageView) {       BitmapAjaxCallback.async(this.act,getContext(),(ImageView)this.view,url,memCache,fileCache,targetWidth,fallbackId,preset,animId,ratio,Float.MAX_VALUE,this.progress,this.ah,this.policy,round,this.proxy,networkUrl);       reset();     }     return self();   }   public T image(  String url,  ImageOptions options){     return image(url,options,(String)null);   }   protected T image(  String url,  ImageOptions options,  String networkUrl){     if (this.view instanceof ImageView) {       BitmapAjaxCallback.async(this.act,getContext(),(ImageView)this.view,url,this.progress,this.ah,options,this.proxy,networkUrl);       reset();     }     return self();   }   public T image(  BitmapAjaxCallback callback){     if (this.view instanceof ImageView) {       callback.imageView((ImageView)this.view);       invoke(callback);     }     return self();   }   public T image(  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int resId,  BitmapAjaxCallback callback){     callback.targetWidth(targetWidth).fallback(resId).url(url).memCache(memCache).fileCache(fileCache);     return image(callback);   }   public T image(  File file,  int targetWidth){     return image(file,true,targetWidth,null);   }   public T image(  File file,  boolean memCache,  int targetWidth,  BitmapAjaxCallback callback){     if (callback == null) {       callback=new BitmapAjaxCallback();     }     callback.file(file);     String url=file != null ? file.getAbsolutePath() : null;     return image(url,memCache,true,targetWidth,0,callback);   }   public T image(  Bitmap bm,  float ratio){     BitmapAjaxCallback cb=new BitmapAjaxCallback();     cb.ratio(ratio).bitmap(bm);     return image(cb);   }   public T tag(  Object tag){     if (this.view != null) {       this.view.setTag(tag);     }     return self();   }   public T tag(  int key,  Object tag){     if (this.view != null) {       this.view.setTag(key,tag);     }     return self();   }   public T transparent(  boolean transparent){     if (this.view != null) {       AQUtility.transparent(this.view,transparent);     }     return self();   }   public T enabled(  boolean enabled){     if (this.view != null) {       this.view.setEnabled(enabled);     }     return self();   }   public T checked(  boolean checked){     if (this.view instanceof CompoundButton) {       CompoundButton cb=(CompoundButton)this.view;       cb.setChecked(checked);     }     return self();   }   public boolean isChecked(){     if (!(this.view instanceof CompoundButton)) {       return false;     }     CompoundButton cb=(CompoundButton)this.view;     boolean checked=cb.isChecked();     return checked;   }   public T clickable(  boolean clickable){     if (this.view != null) {       this.view.setClickable(clickable);     }     return self();   }   public T gone(){     return visibility(8);   }   public T invisible(){     return visibility(4);   }   public T visible(){     return visibility(0);   }   public T visibility(  int visibility){     if (this.view != null && this.view.getVisibility() != visibility) {       this.view.setVisibility(visibility);     }     return self();   }   public T background(  int id){     if (this.view != null) {       if (id != 0) {         this.view.setBackgroundResource(id);       }  else {         this.view.setBackgroundDrawable(null);       }     }     return self();   }   public T backgroundColor(  int color){     if (this.view != null) {       this.view.setBackgroundColor(color);     }     return self();   }   public T dataChanged(){     if (this.view instanceof AdapterView) {       AdapterView<?> av=(AdapterView)this.view;       Adapter a=av.getAdapter();       if (a instanceof BaseAdapter) {         BaseAdapter ba=(BaseAdapter)a;         ba.notifyDataSetChanged();       }     }     return self();   }   public boolean isExist(){     return this.view != null;   }   public Object getTag(){     if (this.view == null) {       return null;     }     Object result=this.view.getTag();     return result;   }   public Object getTag(  int id){     if (this.view == null) {       return null;     }     Object result=this.view.getTag(id);     return result;   }   public ImageView getImageView(){     return (ImageView)this.view;   }   public Gallery getGallery(){     return (Gallery)this.view;   }   public TextView getTextView(){     return (TextView)this.view;   }   public EditText getEditText(){     return (EditText)this.view;   }   public ProgressBar getProgressBar(){     return (ProgressBar)this.view;   }   public SeekBar getSeekBar(){     return (SeekBar)this.view;   }   public Button getButton(){     return (Button)this.view;   }   public CheckBox getCheckBox(){     return (CheckBox)this.view;   }   public ListView getListView(){     return (ListView)this.view;   }   public ExpandableListView getExpandableListView(){     return (ExpandableListView)this.view;   }   public GridView getGridView(){     return (GridView)this.view;   }   public RatingBar getRatingBar(){     return (RatingBar)this.view;   }   public WebView getWebView(){     return (WebView)this.view;   }   public Spinner getSpinner(){     return (Spinner)this.view;   }   public Editable getEditable(){     if (!(this.view instanceof EditText)) {       return null;     }     Editable result=((EditText)this.view).getEditableText();     return result;   }   public CharSequence getText(){     if (!(this.view instanceof TextView)) {       return null;     }     CharSequence result=((TextView)this.view).getText();     return result;   }   public Object getSelectedItem(){     if (!(this.view instanceof AdapterView)) {       return null;     }     Object result=((AdapterView)this.view).getSelectedItem();     return result;   }   public int getSelectedItemPosition(){     if (!(this.view instanceof AdapterView)) {       return -1;     }     int result=((AdapterView)this.view).getSelectedItemPosition();     return result;   }   public T clicked(  Object handler,  String method){     Common common=new Common().forward(handler,method,true,ON_CLICK_SIG);     return clicked(common);   }   public T clicked(  View.OnClickListener listener){     if (this.view != null) {       this.view.setOnClickListener(listener);     }     return self();   }   public T longClicked(  Object handler,  String method){     Common common=new Common().forward(handler,method,true,ON_CLICK_SIG);     return longClicked(common);   }   public T longClicked(  View.OnLongClickListener listener){     if (this.view != null) {       this.view.setOnLongClickListener(listener);     }     return self();   }   public T itemClicked(  Object handler,  String method){     Common common=new Common().forward(handler,method,true,ON_ITEM_SIG);     return itemClicked(common);   }   public T itemClicked(  AdapterView.OnItemClickListener listener){     if (this.view instanceof AdapterView) {       AdapterView<?> alv=(AdapterView)this.view;       alv.setOnItemClickListener(listener);     }     return self();   }   public T itemSelected(  Object handler,  String method){     Common common=new Common().forward(handler,method,true,ON_ITEM_SIG);     return itemSelected(common);   }   public T itemSelected(  AdapterView.OnItemSelectedListener listener){     if (this.view instanceof AdapterView) {       AdapterView<?> alv=(AdapterView)this.view;       alv.setOnItemSelectedListener(listener);     }     return self();   }   public T setSelection(  int position){     if (this.view instanceof AdapterView) {       AdapterView<?> alv=(AdapterView)this.view;       alv.setSelection(position);     }     return self();   }   public T scrolledBottom(  Object handler,  String method){     if (this.view instanceof AbsListView) {       setScrollListener().forward(handler,method,true,ON_SCROLLED_STATE_SIG);     }     return self();   }   private Common setScrollListener(){     AbsListView lv=(AbsListView)this.view;     Common common=(Common)lv.getTag(Constants.TAG_SCROLL_LISTENER);     if (common == null) {       Common common2=new Common();       lv.setOnScrollListener(common2);       lv.setTag(Constants.TAG_SCROLL_LISTENER,common2);       AQUtility.debug(""set scroll listenr"");       return common2;     }     return common;   }   public T scrolled(  AbsListView.OnScrollListener listener){     if (this.view instanceof AbsListView) {       setScrollListener().forward(listener);     }     return self();   }   public T textChanged(  Object handler,  String method){     if (this.view instanceof TextView) {       TextView tv=(TextView)this.view;       Common common=new Common().forward(handler,method,true,TEXT_CHANGE_SIG);       tv.addTextChangedListener(common);     }     return self();   }   public T overridePendingTransition5(  int enterAnim,  int exitAnim){     if (this.act != null) {       AQUtility.invokeHandler(this.act,""overridePendingTransition"",false,false,PENDING_TRANSITION_SIG,Integer.valueOf(enterAnim),Integer.valueOf(exitAnim));     }     return self();   }   public T setOverScrollMode9(  int mode){     if (this.view instanceof AbsListView) {       AQUtility.invokeHandler(this.view,""setOverScrollMode"",false,false,OVER_SCROLL_SIG,Integer.valueOf(mode));     }     return self();   }   public T setLayerType11(  int type,  Paint paint){     if (this.view != null) {       AQUtility.invokeHandler(this.view,""setLayerType"",false,false,LAYER_TYPE_SIG,Integer.valueOf(type),paint);     }     return self();   }   public Object invoke(  String method,  Class<?>[] clsArr,  Object... params){     Object obj=this.view;     if (obj == null) {       obj=this.act;     }     return AQUtility.invokeHandler(obj,method,false,false,clsArr,params);   }   public T hardwareAccelerated11(){     if (this.act != null) {       this.act.getWindow().setFlags(Constants.FLAG_HARDWARE_ACCELERATED,Constants.FLAG_HARDWARE_ACCELERATED);     }     return self();   }   public T clear(){     if (this.view != null) {       if (this.view instanceof ImageView) {         ImageView iv=(ImageView)this.view;         iv.setImageBitmap(null);         iv.setTag(Constants.TAG_URL,null);       }  else       if (this.view instanceof WebView) {         WebView wv=(WebView)this.view;         wv.stopLoading();         wv.clearView();         wv.setTag(Constants.TAG_URL,null);       }  else       if (this.view instanceof TextView) {         TextView tv=(TextView)this.view;         tv.setText("""");       }     }     return self();   }   public T margin(  float leftDip,  float topDip,  float rightDip,  float bottomDip){     if (this.view != null) {       ViewGroup.LayoutParams lp=this.view.getLayoutParams();       if (lp instanceof ViewGroup.MarginLayoutParams) {         Context context=getContext();         int left=AQUtility.dip2pixel(context,leftDip);         int top=AQUtility.dip2pixel(context,topDip);         int right=AQUtility.dip2pixel(context,rightDip);         int bottom=AQUtility.dip2pixel(context,bottomDip);         ((ViewGroup.MarginLayoutParams)lp).setMargins(left,top,right,bottom);         this.view.setLayoutParams(lp);       }     }     return self();   }   public T width(  int dip){     size(true,dip,true);     return self();   }   public T height(  int dip){     size(false,dip,true);     return self();   }   public T width(  int width,  boolean dip){     size(true,width,dip);     return self();   }   public T height(  int height,  boolean dip){     size(false,height,dip);     return self();   }   private void size(  boolean width,  int n,  boolean dip){     if (this.view != null) {       ViewGroup.LayoutParams lp=this.view.getLayoutParams();       Context context=getContext();       if (n > 0 && dip) {         n=AQUtility.dip2pixel(context,n);       }       if (width) {         lp.width=n;       }  else {         lp.height=n;       }       this.view.setLayoutParams(lp);     }   }   public Context getContext(){     if (this.act != null) {       return this.act;     }     if (this.root != null) {       return this.root.getContext();     }     return this.context;   }   public <K>T ajax(  AjaxCallback<K> callback){     return invoke(callback);   }   protected <K>T invoke(  AbstractAjaxCallback<?,K> cb){     if (this.ah != null) {       cb.auth(this.ah);     }     if (this.progress != null) {       cb.progress(this.progress);     }     if (this.trans != null) {       cb.transformer(this.trans);     }     cb.policy(this.policy);     if (this.proxy != null) {       cb.proxy(this.proxy.getHostName(),this.proxy.getPort());     }     if (this.act != null) {       cb.async(this.act);     }  else {       cb.async(getContext());     }     reset();     return self();   }   protected void reset(){     this.ah=null;     this.progress=null;     this.trans=null;     this.policy=0;     this.proxy=null;   }   public <K>T ajax(  String url,  Class<K> type,  AjaxCallback<K> callback){     callback.type(type).url(url);     return ajax(callback);   }   public <K>T ajax(  String url,  Class<K> type,  long expire,  AjaxCallback<K> callback){     callback.type(type).url(url).fileCache(true).expire(expire);     return ajax(callback);   }   public <K>T ajax(  String url,  Class<K> type,  Object handler,  String callback){     AjaxCallback<K> cb=new AjaxCallback<>();     cb.type(type).weakHandler(handler,callback);     return ajax(url,type,cb);   }   public <K>T ajax(  String url,  Class<K> type,  long expire,  Object handler,  String callback){     AjaxCallback<K> cb=new AjaxCallback<>();     cb.type(type).weakHandler(handler,callback).fileCache(true).expire(expire);     return ajax(url,type,cb);   }   public <K>T ajax(  String url,  Map<String,?> params,  Class<K> type,  AjaxCallback<K> callback){     callback.type(type).url(url).params(params);     return ajax(callback);   }   public <K>T ajax(  String url,  Map<String,?> params,  Class<K> type,  Object handler,  String callback){     AjaxCallback<K> cb=new AjaxCallback<>();     cb.type(type).weakHandler(handler,callback);     return ajax(url,params,type,cb);   }   public <K>T delete(  String url,  Class<K> type,  AjaxCallback<K> callback){     callback.url(url).type(type).method(2);     return ajax(callback);   }   public <K>T put(  String url,  String contentHeader,  HttpEntity entity,  Class<K> type,  AjaxCallback<K> callback){     callback.url(url).type(type).method(3).header(""Content-Type"",contentHeader).param(Constants.POST_ENTITY,entity);     return ajax(callback);   }   public <K>T delete(  String url,  Class<K> type,  Object handler,  String callback){     AjaxCallback<K> cb=new AjaxCallback<>();     cb.weakHandler(handler,callback);     return delete(url,type,cb);   }   public <K>T sync(  AjaxCallback<K> callback){     ajax(callback);     callback.block();     return self();   }   public T cache(  String url,  long expire){     return ajax(url,byte[].class,expire,(Object)null,(String)null);   }   public T ajaxCancel(){     AjaxCallback.cancel();     return self();   }   public File getCachedFile(  String url){     File result=AQUtility.getExistedCacheByUrl(AQUtility.getCacheDir(getContext(),1),url);     return result == null ? AQUtility.getExistedCacheByUrl(AQUtility.getCacheDir(getContext(),0),url) : result;   }   public T invalidate(  String url){     File file=getCachedFile(url);     if (file != null) {       file.delete();     }     return self();   }   public Bitmap getCachedImage(  String url){     return getCachedImage(url,0);   }   public Bitmap getCachedImage(  String url,  int targetWidth){     File file;     Bitmap result=BitmapAjaxCallback.getMemoryCached(url,targetWidth);     if (result == null && (file=getCachedFile(url)) != null) {       return BitmapAjaxCallback.getResizedImage(file.getAbsolutePath(),null,targetWidth,true,0);     }     return result;   }   public Bitmap getCachedImage(  int resId){     return BitmapAjaxCallback.getMemoryCached(getContext(),resId);   }   @Deprecated public boolean shouldDelay(  View convertView,  ViewGroup parent,  String url,  float velocity){     return Common.shouldDelay(convertView,parent,url,velocity,true);   }   @Deprecated public boolean shouldDelay(  View convertView,  ViewGroup parent,  String url,  float velocity,  boolean fileCheck){     return Common.shouldDelay(convertView,parent,url,velocity,fileCheck);   }   public boolean shouldDelay(  int groupPosition,  boolean isExpanded,  View convertView,  ViewGroup parent,  String url){     return Common.shouldDelay(groupPosition,-1,convertView,parent,url);   }   public boolean shouldDelay(  int groupPosition,  int childPosition,  boolean isLastChild,  View convertView,  ViewGroup parent,  String url){     return Common.shouldDelay(groupPosition,childPosition,convertView,parent,url);   }   public boolean shouldDelay(  int position,  View convertView,  ViewGroup parent,  String url){     if (parent instanceof ExpandableListView) {       throw new IllegalArgumentException(""Please use the other shouldDelay methods for expandable list."");     }     return Common.shouldDelay(position,convertView,parent,url);   }   public File makeSharedFile(  String url,  String filename){     File temp;     File file=null;     try {       File cached=getCachedFile(url);       if (cached == null || (temp=AQUtility.getTempDir()) == null) {         return null;       }       File file2=new File(temp,filename);       try {         file2.createNewFile();         FileInputStream fis=new FileInputStream(cached);         FileOutputStream fos=new FileOutputStream(file2);         FileChannel ic=fis.getChannel();         FileChannel oc=fos.getChannel();         try {           ic.transferTo(0L,ic.size(),oc);           return file2;         }   finally {           AQUtility.close(fis);           AQUtility.close(fos);           AQUtility.close(ic);           AQUtility.close(oc);         }       }  catch (      Exception e) {         e=e;         file=file2;         AQUtility.debug((Throwable)e);         return file;       }     }  catch (    Exception e2) {       e=e2;     }   }   public T animate(  int animId){     return animate(animId,null);   }   public T animate(  int animId,  Animation.AnimationListener listener){     Animation anim=AnimationUtils.loadAnimation(getContext(),animId);     anim.setAnimationListener(listener);     return animate(anim);   }   public T animate(  Animation anim){     if (this.view != null && anim != null) {       this.view.startAnimation(anim);     }     return self();   }   public T click(){     if (this.view != null) {       this.view.performClick();     }     return self();   }   public T longClick(){     if (this.view != null) {       this.view.performLongClick();     }     return self();   }   public T show(  Dialog dialog){     if (dialog != null) {       try {         dialog.show();         dialogs.put(dialog,null);       }  catch (      Exception e) {       }     }     return self();   }   public T dismiss(  Dialog dialog){     if (dialog != null) {       try {         dialogs.remove(dialog);         dialog.dismiss();       }  catch (      Exception e) {       }     }     return self();   }   public T dismiss(){     Iterator<Dialog> keys=dialogs.keySet().iterator();     while (keys.hasNext()) {       Dialog d=keys.next();       try {         d.dismiss();       }  catch (      Exception e) {       }       keys.remove();     }     return self();   }   public T webImage(  String url){     return webImage(url,true,false,-16777216);   }   public T webImage(  String url,  boolean zoom,  boolean control,  int color){     if (this.view instanceof WebView) {       setLayerType11(1,null);       WebImage wi=new WebImage((WebView)this.view,url,this.progress,zoom,control,color);       wi.load();       this.progress=null;     }     return self();   }   public View inflate(  View convertView,  int layoutId,  ViewGroup root){     LayoutInflater inflater;     Integer layout;     if (convertView == null || (layout=(Integer)convertView.getTag(Constants.TAG_LAYOUT)) == null || layout.intValue() != layoutId) {       if (this.act != null) {         inflater=this.act.getLayoutInflater();       }  else {         inflater=(LayoutInflater)getContext().getSystemService(""layout_inflater"");       }       View view=inflater.inflate(layoutId,root,false);       view.setTag(Constants.TAG_LAYOUT,Integer.valueOf(layoutId));       return view;     }     return convertView;   }   public T expand(  int position,  boolean expand){     if (this.view instanceof ExpandableListView) {       ExpandableListView elv=(ExpandableListView)this.view;       if (expand) {         elv.expandGroup(position);       }  else {         elv.collapseGroup(position);       }     }     return self();   }   public T expand(  boolean expand){     ExpandableListView elv;     ExpandableListAdapter ela;     if ((this.view instanceof ExpandableListView) && (ela=(elv=(ExpandableListView)this.view).getExpandableListAdapter()) != null) {       int count=ela.getGroupCount();       for (int i=0; i < count; i++) {         if (expand) {           elv.expandGroup(i);         }  else {           elv.collapseGroup(i);         }       }     }     return self();   }   public T download(  String url,  File target,  AjaxCallback<File> ajaxCallback){     ((AjaxCallback)ajaxCallback.url(url)).type(File.class).targetFile(target);     return ajax(ajaxCallback);   }   public T download(  String url,  File target,  Object handler,  String callback){     AjaxCallback<File> cb=new AjaxCallback<>();     cb.weakHandler(handler,callback);     return download(url,target,cb);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery\AQuery.code","public class AQuery extends AbstractAQuery<AQuery> {   public AQuery(  Activity act){     super(act);   }   public AQuery(  View view){     super(view);   }   public AQuery(  Context context){     super(context);   }   public AQuery(  Activity act,  View root){     super(act,root);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.auth\AccountHandle.code","public abstract class AccountHandle {   private LinkedHashSet<AbstractAjaxCallback<?,?>> callbacks;   protected abstract void auth();   public abstract boolean authenticated();   public abstract boolean expired(  AbstractAjaxCallback<?,?> abstractAjaxCallback,  AjaxStatus ajaxStatus);   public abstract boolean reauth(  AbstractAjaxCallback<?,?> abstractAjaxCallback);   public synchronized void auth(  AbstractAjaxCallback<?,?> cb){     if (this.callbacks == null) {       this.callbacks=new LinkedHashSet<>();       this.callbacks.add(cb);       auth();     }  else {       this.callbacks.add(cb);     }   }   public synchronized void success(  Context context){     if (this.callbacks != null) {       Iterator<AbstractAjaxCallback<?,?>> it=this.callbacks.iterator();       while (it.hasNext()) {         AbstractAjaxCallback<?,?> cb=it.next();         cb.async(context);       }       this.callbacks=null;     }   }   public synchronized void failure(  Context context,  int code,  String message){     if (this.callbacks != null) {       Iterator<AbstractAjaxCallback<?,?>> it=this.callbacks.iterator();       while (it.hasNext()) {         AbstractAjaxCallback<?,?> cb=it.next();         cb.failure(code,message);       }       this.callbacks=null;     }   }   public void applyToken(  AbstractAjaxCallback<?,?> cb,  HttpRequest request){   }   public void applyToken(  AbstractAjaxCallback<?,?> cb,  HttpURLConnection conn){   }   public String getNetworkUrl(  String url){     return url;   }   public String getCacheUrl(  String url){     return url;   }   public void unauth(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.auth\GoogleHandle.code","public class GoogleHandle extends AccountHandle implements DialogInterface.OnClickListener, DialogInterface.OnCancelListener {   private Account acc;   private Account[] accs;   private Activity act;   private AccountManager am;   private String email;   private String token;   private String type;   public GoogleHandle(  Activity act,  String type,  String email){     email=Constants.ACTIVE_ACCOUNT.equals(email) ? getActiveAccount(act) : email;     this.act=act;     this.type=type.substring(2);     this.email=email;     this.am=AccountManager.get(act);   }   @Override protected void auth(){     if (this.email == null) {       accountDialog();       return;     }     Account[] accounts=this.am.getAccountsByType(""com.google"");     for (    Account account : accounts) {       if (this.email.equals(account.name)) {         auth(account);         return;       }     }   }   @Override public boolean reauth(  AbstractAjaxCallback<?,?> cb){     this.am.invalidateAuthToken(this.acc.type,this.token);     try {       this.token=this.am.blockingGetAuthToken(this.acc,this.type,true);       AQUtility.debug(""re token"",this.token);     }  catch (    Exception e) {       AQUtility.debug((Throwable)e);       this.token=null;     }     return this.token != null;   }   public String getType(){     return this.type;   }   private void accountDialog(){     AlertDialog.Builder builder=new AlertDialog.Builder(this.act);     this.accs=this.am.getAccountsByType(""com.google"");     int size=this.accs.length;     if (size == 1) {       auth(this.accs[0]);       return;     }     String[] names=new String[size];     for (int i=0; i < size; i++) {       names[i]=this.accs[i].name;     }     builder.setItems(names,this);     builder.setOnCancelListener(this);     AlertDialog dialog=builder.create();     new AQuery(this.act).show(dialog);   }   @Override public void onClick(  DialogInterface dialog,  int which){     Account acc=this.accs[which];     AQUtility.debug(""acc"",acc.name);     setActiveAccount(this.act,acc.name);     auth(acc);   }   public static void setActiveAccount(  Context context,  String account){     PreferenceManager.getDefaultSharedPreferences(context).edit().putString(Constants.ACTIVE_ACCOUNT,account).commit();   }   public static String getActiveAccount(  Context context){     return PreferenceManager.getDefaultSharedPreferences(context).getString(Constants.ACTIVE_ACCOUNT,null);   }   private void auth(  Account account){     this.acc=account;     Task task=new Task(this,null);     task.execute(new String[0]);   } public class Task extends AsyncTask<String,String,Bundle> {     private Task(){     }     Task(    GoogleHandle googleHandle,    Task task){       this();     }     @Override public Bundle doInBackground(    String... params){       AccountManagerFuture<Bundle> future=GoogleHandle.this.am.getAuthToken(GoogleHandle.this.acc,GoogleHandle.this.type,(Bundle)null,GoogleHandle.this.act,(AccountManagerCallback<Bundle>)null,(Handler)null);       try {         Bundle bundle=future.getResult();         return bundle;       }  catch (      AuthenticatorException e) {         AQUtility.debug((Throwable)e);         return null;       } catch (      OperationCanceledException e2) {         return null;       } catch (      IOException e3) {         AQUtility.debug((Throwable)e3);         return null;       }     }     @Override public void onPostExecute(    Bundle bundle){       if (bundle == null || !bundle.containsKey(""authtoken"")) {         GoogleHandle.this.failure(GoogleHandle.this.act,AjaxStatus.AUTH_ERROR,""rejected"");         return;       }       GoogleHandle.this.token=bundle.getString(""authtoken"");       GoogleHandle.this.success(GoogleHandle.this.act);     }   }   @Override public void onCancel(  DialogInterface dialog){     failure(this.act,AjaxStatus.AUTH_ERROR,""cancel"");   }   @Override public boolean expired(  AbstractAjaxCallback<?,?> cb,  AjaxStatus status){     int code=status.getCode();     return code == 401 || code == 403;   }   @Override public void applyToken(  AbstractAjaxCallback<?,?> cb,  HttpRequest request){     request.addHeader(""Authorization"",""GoogleLogin auth="" + this.token);   }   @Override public String getCacheUrl(  String url){     return String.valueOf(url) + ""#"" + this.token;   }   @Override public boolean authenticated(){     return this.token != null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.auth\Task.code","public class Task extends AsyncTask<String,String,Bundle> {   private Task(){   }   Task(  GoogleHandle googleHandle,  Task task){     this();   }   @Override public Bundle doInBackground(  String... params){     AccountManagerFuture<Bundle> future=GoogleHandle.this.am.getAuthToken(GoogleHandle.this.acc,GoogleHandle.this.type,(Bundle)null,GoogleHandle.this.act,(AccountManagerCallback<Bundle>)null,(Handler)null);     try {       Bundle bundle=future.getResult();       return bundle;     }  catch (    AuthenticatorException e) {       AQUtility.debug((Throwable)e);       return null;     } catch (    OperationCanceledException e2) {       return null;     } catch (    IOException e3) {       AQUtility.debug((Throwable)e3);       return null;     }   }   @Override public void onPostExecute(  Bundle bundle){     if (bundle == null || !bundle.containsKey(""authtoken"")) {       GoogleHandle.this.failure(GoogleHandle.this.act,AjaxStatus.AUTH_ERROR,""rejected"");       return;     }     GoogleHandle.this.token=bundle.getString(""authtoken"");     GoogleHandle.this.success(GoogleHandle.this.act);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\AbstractAjaxCallback.code","public abstract class AbstractAjaxCallback<T,K> implements Runnable {   private static final String boundary=""*****"";   private static DefaultHttpClient client=null;   private static ExecutorService fetchExe=null;   private static final String lineEnd=""\r\n"";   private static SocketFactory ssf=null;   private static Transformer st=null;   private static final String twoHyphens=""--"";   private boolean abort;   private WeakReference<Activity> act;   private AccountHandle ah;   private boolean blocked;   private File cacheDir;   private String callback;   private boolean completed;   private Map<String,String> cookies;   private long expire;   protected boolean fileCache;   private Object handler;   private Map<String,String> headers;   protected boolean memCache;   private String networkUrl;   private Map<String,Object> params;   private WeakReference<Object> progress;   private HttpHost proxy;   private boolean reauth;   private boolean refresh;   private HttpUriRequest request;   protected T result;   protected AjaxStatus status;   private File targetFile;   private Transformer transformer;   private Class<T> type;   private String url;   private Reference<Object> whandler;   private static int NET_TIMEOUT=30000;   private static String AGENT=null;   private static int NETWORK_POOL=4;   private static boolean GZIP=true;   private static boolean REUSE_CLIENT=true;   private static final Class<?>[] DEFAULT_SIG={String.class,Object.class,AjaxStatus.class};   private static int lastStatus=200;   private int policy=0;   private int timeout=0;   private String encoding=""UTF-8"";   private int method=4;   private boolean uiCallback=true;   private int retry=0;   private K self(){     return this;   }   private void clear(){     this.whandler=null;     this.handler=null;     this.progress=null;     this.request=null;     this.transformer=null;     this.ah=null;     this.act=null;   }   public static void setTimeout(  int timeout){     NET_TIMEOUT=timeout;   }   public static void setAgent(  String agent){     AGENT=agent;   }   public static void setGZip(  boolean gzip){     GZIP=gzip;   }   public static void setTransformer(  Transformer transformer){     st=transformer;   }   public Class<T> getType(){     return this.type;   }   public K weakHandler(  Object handler,  String callback){     this.whandler=new WeakReference(handler);     this.callback=callback;     this.handler=null;     return self();   }   public K handler(  Object handler,  String callback){     this.handler=handler;     this.callback=callback;     this.whandler=null;     return self();   }   public K url(  String url){     this.url=url;     return self();   }   public K networkUrl(  String url){     this.networkUrl=url;     return self();   }   public K type(  Class<T> type){     this.type=type;     return self();   }   public K method(  int method){     this.method=method;     return self();   }   public K timeout(  int timeout){     this.timeout=timeout;     return self();   }   public K retry(  int retry){     this.retry=retry;     return self();   }   public K transformer(  Transformer transformer){     this.transformer=transformer;     return self();   }   public K fileCache(  boolean cache){     this.fileCache=cache;     return self();   }   public K memCache(  boolean cache){     this.memCache=cache;     return self();   }   public K policy(  int policy){     this.policy=policy;     return self();   }   public K refresh(  boolean refresh){     this.refresh=refresh;     return self();   }   public K uiCallback(  boolean uiCallback){     this.uiCallback=uiCallback;     return self();   }   public K expire(  long expire){     this.expire=expire;     return self();   }   public K header(  String name,  String value){     if (this.headers == null) {       this.headers=new HashMap();     }     this.headers.put(name,value);     return self();   }   public K cookie(  String name,  String value){     if (this.cookies == null) {       this.cookies=new HashMap();     }     this.cookies.put(name,value);     return self();   }   public K encoding(  String encoding){     this.encoding=encoding;     return self();   }   public K proxy(  String host,  int port){     this.proxy=new HttpHost(host,port);     return self();   }   public K targetFile(  File file){     this.targetFile=file;     return self();   }   public K param(  String name,  Object value){     if (this.params == null) {       this.params=new HashMap();     }     this.params.put(name,value);     return self();   }   public K params(  Map<String,?> params){     this.params=params;     return self();   }   public K progress(  View view){     return progress((Object)view);   }   public K progress(  Dialog dialog){     return progress((Object)dialog);   }   public K progress(  Object progress){     if (progress != null) {       this.progress=new WeakReference<>(progress);     }     return self();   }   void callback(){     showProgress(false);     this.completed=true;     if (isActive()) {       if (this.callback != null) {         Object handler=getHandler();         Class[] AJAX_SIG={String.class,this.type,AjaxStatus.class};         AQUtility.invokeHandler(handler,this.callback,true,true,AJAX_SIG,DEFAULT_SIG,this.url,this.result,this.status);       }  else {         try {           callback(this.url,this.result,this.status);         }  catch (        Exception e) {           AQUtility.report(e);         }       }     }  else {       skip(this.url,this.result,this.status);     }     filePut();     if (!this.blocked) {       this.status.close();     }     wake();     AQUtility.debugNotify();   }   private void wake(){     if (this.blocked) { synchronized (this) {         try {           notifyAll();         }  catch (        Exception e) {         }       }     }   }   public void block(){     if (AQUtility.isUIThread()) {       throw new IllegalStateException(""Cannot block UI thread."");     }     if (!this.completed) {       try { synchronized (this) {           this.blocked=true;           wait(NET_TIMEOUT + 5000);         }       }  catch (      Exception e) {       }     }   }   public void callback(  String url,  T object,  AjaxStatus status){   }   protected void skip(  String url,  T object,  AjaxStatus status){   }   protected T fileGet(  String url,  File file,  AjaxStatus status){     byte[] data=null;     try {       if (isStreamingContent()) {         status.file(file);       }  else {         data=AQUtility.toBytes(new FileInputStream(file));       }       return transform(url,data,status);     }  catch (    Exception e) {       AQUtility.debug((Throwable)e);       return null;     }   }   protected T datastoreGet(  String url){     return null;   }   public void showProgress(  final boolean show){     final Object p=this.progress == null ? null : this.progress.get();     if (p != null) {       if (AQUtility.isUIThread()) {         Common.showProgress(p,this.url,show);       }  else {         AQUtility.post(new Runnable(){           @Override public void run(){             Common.showProgress(p,AbstractAjaxCallback.this.url,show);           }         } );       }     }   }   protected T transform(  String str,  byte[] bArr,  AjaxStatus ajaxStatus){     FileInputStream fileInputStream;     T t;     if (this.type == null) {       return null;     }     r10=(T)ajaxStatus.getFile();     if (bArr != 0) {       if (this.type.equals(Bitmap.class)) {         return (T)BitmapFactory.decodeByteArray(bArr,0,bArr.length);       }       if (this.type.equals(JSONObject.class)) {         String str2=null;         try {           String str3=new String(bArr,this.encoding);           try {             return (T)((JSONObject)new JSONTokener(str3).nextValue());           }  catch (          Exception e) {             e=e;             str2=str3;             AQUtility.debug((Throwable)e);             AQUtility.debug(str2);             return null;           }         }  catch (        Exception e2) {           e=e2;         }       }  else {         if (this.type.equals(JSONArray.class)) {           try {             return (T)((JSONArray)new JSONTokener(new String(bArr,this.encoding)).nextValue());           }  catch (          Exception e3) {             AQUtility.debug((Throwable)e3);             return null;           }         }         if (this.type.equals(String.class)) {           if (ajaxStatus.getSource() == 1) {             AQUtility.debug(p.b);             return (T)correctEncoding(bArr,this.encoding,ajaxStatus);           }           AQUtility.debug(""file"");           try {             return (T)new String(bArr,this.encoding);           }  catch (          Exception e4) {             AQUtility.debug((Throwable)e4);             return null;           }         }         if (this.type.equals(byte[].class)) {           return bArr;         }         if (this.transformer != null) {           return (T)this.transformer.transform(str,this.type,this.encoding,bArr,ajaxStatus);         }         if (st != null) {           return (T)st.transform(str,this.type,this.encoding,bArr,ajaxStatus);         }       }     }  else     if (r10 != 0) {       if (this.type.equals(File.class)) {         return r10;       }       if (this.type.equals(XmlDom.class)) {         try {           fileInputStream=new FileInputStream((File)r10);           t=(T)new XmlDom(fileInputStream);         }  catch (        Exception e5) {           e=e5;         }         try {           ajaxStatus.closeLater(fileInputStream);           return t;         }  catch (        Exception e6) {           e=e6;           AQUtility.report(e);           return null;         }       }       if (this.type.equals(XmlPullParser.class)) {         r12=(T)Xml.newPullParser();         try {           FileInputStream fileInputStream2=new FileInputStream((File)r10);           r12.setInput(fileInputStream2,this.encoding);           ajaxStatus.closeLater(fileInputStream2);           return r12;         }  catch (        Exception e7) {           AQUtility.report(e7);           return null;         }       }       if (this.type.equals(InputStream.class)) {         try {           r11=(T)new FileInputStream((File)r10);           ajaxStatus.closeLater(r11);           return r11;         }  catch (        Exception e8) {           AQUtility.report(e8);           return null;         }       }     }     return null;   }   private String getCharset(  String html){     Pattern p=Pattern.compile(""<meta [^>]*http-equiv[^>]*\""Content-Type\""[^>]*>"",2);     Matcher m=p.matcher(html);     if (!m.find()) {       return null;     }     String tag=m.group();     return parseCharset(tag);   }   private String parseCharset(  String tag){     int i;     if (tag == null || (i=tag.indexOf(""charset"")) == -1) {       return null;     }     int e=tag.indexOf("";"",i);     if (e == -1) {       e=tag.length();     }     return tag.substring(i + 7,e).replaceAll(""[^\\w-]"","""");   }   private String correctEncoding(  byte[] data,  String target,  AjaxStatus status){     String result=null;     try {     }  catch (    Exception e) {       e=e;     }     if (!""utf-8"".equalsIgnoreCase(target)) {       return new String(data,target);     }     String header=parseCharset(status.getHeader(""Content-Type""));     AQUtility.debug(""parsing header"",header);     if (header != null) {       return new String(data,header);     }     String result2=new String(data,""utf-8"");     try {       String charset=getCharset(result2);       AQUtility.debug(""parsing needed"",charset);       if (charset == null || ""utf-8"".equalsIgnoreCase(charset)) {         result=result2;       }  else {         AQUtility.debug(""correction needed"",charset);         result=new String(data,charset);         status.data(result.getBytes(""utf-8""));       }     }  catch (    Exception e2) {       e=e2;       result=result2;       AQUtility.report(e);       return result;     }     return result;   }   protected T memGet(  String url){     return null;   }   protected void memPut(  String url,  T object){   }   protected void filePut(  String url,  T object,  File file,  byte[] data){     if (file != null && data != null) {       AQUtility.storeAsync(file,data,0L);     }   }   public File accessFile(  File cacheDir,  String url){     if (this.expire < 0) {       return null;     }     File file=AQUtility.getExistedCacheByUrl(cacheDir,url);     if (file != null && this.expire != 0) {       long diff=System.currentTimeMillis() - file.lastModified();       if (diff > this.expire) {         return null;       }       return file;     }     return file;   }   public void async(  Activity act){     if (act.isFinishing()) {       AQUtility.warn(""Warning"",""Possible memory leak. Calling ajax with a terminated activity."");     }     if (this.type == null) {       AQUtility.warn(""Warning"",""type() is not called with response type."");     }  else {       this.act=new WeakReference<>(act);       async((Context)act);     }   }   public void async(  Context context){     if (this.status == null) {       this.status=new AjaxStatus();       this.status.redirect(this.url).refresh(this.refresh);     }  else     if (this.status.getDone()) {       this.status.reset();       this.result=null;     }     showProgress(true);     if (this.ah != null && !this.ah.authenticated()) {       AQUtility.debug(""auth needed"",this.url);       this.ah.auth(this);     }  else {       work(context);     }   }   private boolean isActive(){     if (this.act == null) {       return true;     }     Activity a=this.act.get();     return (a == null || a.isFinishing()) ? false : true;   }   public void failure(  int code,  String message){     if (this.status != null) {       this.status.code(code).message(message);       callback();     }   }   private void work(  Context context){     T object=memGet(this.url);     if (object != null) {       this.result=object;       this.status.source(4).done();       callback();     }  else {       this.cacheDir=AQUtility.getCacheDir(context,this.policy);       execute(this);     }   }   public boolean cacheAvailable(  Context context){     return this.fileCache && AQUtility.getExistedCacheByUrl(AQUtility.getCacheDir(context,this.policy),this.url) != null;   }   @Override public void run(){     if (!this.status.getDone()) {       try {         backgroundWork();       }  catch (      Throwable e) {         AQUtility.debug(e);         this.status.code(AjaxStatus.NETWORK_ERROR).done();       }       if (!this.status.getReauth()) {         if (this.uiCallback) {           AQUtility.post(this);           return;         }  else {           afterWork();           return;         }       }       return;     }     afterWork();   }   private void backgroundWork(){     if (!this.refresh && this.fileCache) {       fileWork();     }     if (this.result == null) {       datastoreWork();     }     if (this.result == null) {       networkWork();     }   }   private String getCacheUrl(){     return this.ah != null ? this.ah.getCacheUrl(this.url) : this.url;   }   private String getNetworkUrl(  String url){     String result=url;     if (this.networkUrl != null) {       result=this.networkUrl;     }     if (this.ah != null) {       return this.ah.getNetworkUrl(result);     }     return result;   }   private void fileWork(){     File file=accessFile(this.cacheDir,getCacheUrl());     if (file != null) {       this.status.source(3);       this.result=fileGet(this.url,file,this.status);       if (this.result != null) {         this.status.time(new Date(file.lastModified())).done();       }     }   }   private void datastoreWork(){     this.result=datastoreGet(this.url);     if (this.result != null) {       this.status.source(2).done();     }   }   private void networkWork(){     if (this.url == null) {       this.status.code(AjaxStatus.NETWORK_ERROR).done();       return;     }     byte[] data=null;     try {       network(this.retry + 1);       if (this.ah != null && this.ah.expired(this,this.status) && !this.reauth) {         AQUtility.debug(""reauth needed"",this.status.getMessage());         this.reauth=true;         if (this.ah.reauth(this)) {           network();         }  else {           this.status.reauth(true);           return;         }       }       data=this.status.getData();     }  catch (    Exception e) {       AQUtility.debug((Throwable)e);       this.status.code(AjaxStatus.NETWORK_ERROR).message(""network error"");     }     try {       this.result=transform(this.url,data,this.status);     }  catch (    Exception e2) {       AQUtility.debug((Throwable)e2);     }     if (this.result == null && data != null) {       this.status.code(AjaxStatus.TRANSFORM_ERROR).message(""transform error"");     }     lastStatus=this.status.getCode();     this.status.done();   }   protected File getCacheFile(){     return AQUtility.getCacheFile(this.cacheDir,getCacheUrl());   }   protected boolean isStreamingContent(){     return File.class.equals(this.type) || XmlPullParser.class.equals(this.type) || InputStream.class.equals(this.type)|| XmlDom.class.equals(this.type);   }   private File getPreFile(){     boolean pre=isStreamingContent();     File result=null;     if (pre) {       if (this.targetFile != null) {         result=this.targetFile;       }  else       if (this.fileCache) {         result=getCacheFile();       }  else {         File dir=AQUtility.getTempDir();         if (dir == null) {           dir=this.cacheDir;         }         result=AQUtility.getCacheFile(dir,this.url);       }     }     if (result != null && !result.exists()) {       try {         result.getParentFile().mkdirs();         result.createNewFile();         return result;       }  catch (      Exception e) {         AQUtility.report(e);         return null;       }     }     return result;   }   private void filePut(){     if (this.result != null && this.fileCache) {       byte[] data=this.status.getData();       if (data != null) {         try {           if (this.status.getSource() == 1) {             File file=getCacheFile();             if (!this.status.getInvalid()) {               filePut(this.url,this.result,file,data);             }  else             if (file.exists()) {               file.delete();             }           }         }  catch (        Exception e) {           AQUtility.debug((Throwable)e);         }       }       this.status.data(null);     }   }   private static String extractUrl(  Uri uri){     String result=String.valueOf(uri.getScheme()) + ""://"" + uri.getAuthority()+ uri.getPath();     String fragment=uri.getFragment();     return fragment != null ? String.valueOf(result) + ""#"" + fragment : result;   }   private static Map<String,Object> extractParams(  Uri uri){     Map<String,Object> params=new HashMap<>();     String[] pairs=uri.getQuery().split(""&"");     for (    String pair : pairs) {       String[] split=pair.split(""="");       if (split.length >= 2) {         params.put(split[0],split[1]);       }  else       if (split.length == 1) {         params.put(split[0],"""");       }     }     return params;   }   private void network(  int attempts) throws IOException {     if (attempts <= 1) {       network();       return;     }     for (int i=0; i < attempts; i++) {       try {         network();         return;       }  catch (      IOException e) {         if (i == attempts - 1) {           throw e;         }       }     }   }   private void network() throws IOException {     String url=this.url;     Map<String,Object> params=this.params;     if (params == null && url.length() > 2000) {       Uri uri=Uri.parse(url);       url=extractUrl(uri);       params=extractParams(uri);     }     String url2=getNetworkUrl(url);     if (2 == this.method) {       httpDelete(url2,this.headers,this.status);       return;     }     if (3 == this.method) {       httpPut(url2,this.headers,params,this.status);       return;     }     if (1 == this.method && params == null) {       params=new HashMap<>();     }     if (params == null) {       httpGet(url2,this.headers,this.status);     }  else     if (isMultiPart(params)) {       httpMulti(url2,this.headers,params,this.status);     }  else {       httpPost(url2,this.headers,params,this.status);     }   }   private void afterWork(){     if (this.url != null && this.memCache) {       memPut(this.url,this.result);     }     callback();     clear();   }   public static void execute(  Runnable job){     if (fetchExe == null) {       fetchExe=Executors.newFixedThreadPool(NETWORK_POOL);     }     fetchExe.execute(job);   }   public static int getActiveCount(){     if (!(fetchExe instanceof ThreadPoolExecutor)) {       return 0;     }     int result=((ThreadPoolExecutor)fetchExe).getActiveCount();     return result;   }   public static void setNetworkLimit(  int limit){     NETWORK_POOL=Math.max(1,Math.min(25,limit));     fetchExe=null;     AQUtility.debug(""setting network limit"",Integer.valueOf(NETWORK_POOL));   }   public static void cancel(){     if (fetchExe != null) {       fetchExe.shutdownNow();       fetchExe=null;     }     BitmapAjaxCallback.clearTasks();   }   private static String patchUrl(  String url){     return url.replaceAll("" "",""%20"").replaceAll(""\\|"",""%7C"");   }   private void httpGet(  String url,  Map<String,String> headers,  AjaxStatus status) throws IOException {     AQUtility.debug(""get"",url);     String url2=patchUrl(url);     HttpGet get=new HttpGet(url2);     httpDo(get,url2,headers,status);   }   private void httpDelete(  String url,  Map<String,String> headers,  AjaxStatus status) throws IOException {     AQUtility.debug(""get"",url);     String url2=patchUrl(url);     HttpDelete del=new HttpDelete(url2);     httpDo(del,url2,headers,status);   }   private void httpPost(  String url,  Map<String,String> headers,  Map<String,Object> params,  AjaxStatus status) throws ClientProtocolException, IOException {     AQUtility.debug(""post"",url);     HttpEntityEnclosingRequestBase req=new HttpPost(url);     httpEntity(url,req,headers,params,status);   }   private void httpPut(  String url,  Map<String,String> headers,  Map<String,Object> params,  AjaxStatus status) throws ClientProtocolException, IOException {     AQUtility.debug(""put"",url);     HttpEntityEnclosingRequestBase req=new HttpPut(url);     httpEntity(url,req,headers,params,status);   }   private void httpEntity(  String url,  HttpEntityEnclosingRequestBase req,  Map<String,String> headers,  Map<String,Object> params,  AjaxStatus status) throws ClientProtocolException, IOException {     HttpEntity entity;     req.getParams().setBooleanParameter(""http.protocol.expect-continue"",false);     Object value=params.get(Constants.POST_ENTITY);     if (value instanceof HttpEntity) {       entity=(HttpEntity)value;     }  else {       List<NameValuePair> pairs=new ArrayList<>();       for (      Map.Entry<String,Object> e : params.entrySet()) {         Object value2=e.getValue();         if (value2 != null) {           pairs.add(new BasicNameValuePair(e.getKey(),value2.toString()));         }       }       entity=new UrlEncodedFormEntity(pairs,""UTF-8"");     }     if (headers != null && !headers.containsKey(""Content-Type"")) {       headers.put(""Content-Type"",""application/x-www-form-urlencoded;charset=UTF-8"");     }     req.setEntity(entity);     httpDo(req,url,headers,status);   }   public static void setSSF(  SocketFactory sf){     ssf=sf;     client=null;   }   public static void setReuseHttpClient(  boolean reuse){     REUSE_CLIENT=reuse;     client=null;   }   private static DefaultHttpClient getClient(){     if (client == null || !REUSE_CLIENT) {       AQUtility.debug(""creating http client"");       HttpParams httpParams=new BasicHttpParams();       HttpConnectionParams.setConnectionTimeout(httpParams,NET_TIMEOUT);       HttpConnectionParams.setSoTimeout(httpParams,NET_TIMEOUT);       ConnManagerParams.setMaxConnectionsPerRoute(httpParams,new ConnPerRouteBean(25));       HttpConnectionParams.setSocketBufferSize(httpParams,8192);       SchemeRegistry registry=new SchemeRegistry();       registry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80));       registry.register(new Scheme(""https"",ssf == null ? SSLSocketFactory.getSocketFactory() : ssf,443));       ThreadSafeClientConnManager cm=new ThreadSafeClientConnManager(httpParams,registry);       client=new DefaultHttpClient(cm,httpParams);     }     return client;   }   private HttpResponse execute(  HttpUriRequest hr,  DefaultHttpClient client2,  HttpContext context) throws ClientProtocolException, IOException {     HttpHost host;     if (hr.getURI().getAuthority().contains(""_"")) {       URL urlObj=hr.getURI().toURL();       if (urlObj.getPort() == -1) {         host=new HttpHost(urlObj.getHost(),80,urlObj.getProtocol());       }  else {         host=new HttpHost(urlObj.getHost(),urlObj.getPort(),urlObj.getProtocol());       }       HttpResponse response=client2.execute(host,hr,context);       return response;     }     HttpResponse response2=client2.execute(hr,context);     return response2;   }   private void httpDo(  org.apache.http.client.methods.HttpUriRequest r33,  java.lang.String r34,  java.util.Map<java.lang.String,java.lang.String> r35,  com.androidquery.callback.AjaxStatus r36) throws org.apache.http.client.ClientProtocolException, java.io.IOException {     throw new UnsupportedOperationException(""Method not decompiled: com.androidquery.callback.AbstractAjaxCallback.httpDo(org.apache.http.client.methods.HttpUriRequest, java.lang.String, java.util.Map, com.androidquery.callback.AjaxStatus):void"");   }   private String getEncoding(  HttpEntity entity){     Header eheader;     if (entity == null || (eheader=entity.getContentEncoding()) == null) {       return null;     }     return eheader.getValue();   }   private void copy(  InputStream is,  OutputStream os,  int max) throws IOException {     Object o=null;     if (this.progress != null) {       o=this.progress.get();     }     Progress p=null;     if (o != null) {       p=new Progress(o);     }     AQUtility.copy(is,os,max,p);   }   public K auth(  Activity act,  String type,  String account){     if (Build.VERSION.SDK_INT >= 5 && type.startsWith(""g."")) {       this.ah=new GoogleHandle(act,type,account);     }     return self();   }   public K auth(  AccountHandle handle){     this.ah=handle;     return self();   }   public String getUrl(){     return this.url;   }   public Object getHandler(){     if (this.handler != null) {       return this.handler;     }     if (this.whandler == null) {       return null;     }     return this.whandler.get();   }   public String getCallback(){     return this.callback;   }   public static int getLastStatus(){     return lastStatus;   }   public T getResult(){     return this.result;   }   public AjaxStatus getStatus(){     return this.status;   }   public String getEncoding(){     return this.encoding;   }   public void abort(){     this.abort=true;     if (this.request != null && !this.request.isAborted()) {       this.request.abort();     }   }   private static boolean isMultiPart(  Map<String,Object> params){     for (    Map.Entry<String,Object> entry : params.entrySet()) {       Object value=entry.getValue();       AQUtility.debug(entry.getKey(),value);       if ((value instanceof File) || (value instanceof byte[]) || (value instanceof InputStream)) {         return true;       }     }     return false;   }   private void httpMulti(  String url,  Map<String,String> headers,  Map<String,Object> params,  AjaxStatus status) throws IOException {     AQUtility.debug(""multipart"",url);     URL u=new URL(url);     HttpURLConnection conn=(HttpURLConnection)u.openConnection();     conn.setInstanceFollowRedirects(false);     conn.setConnectTimeout(NET_TIMEOUT * 4);     conn.setDoInput(true);     conn.setDoOutput(true);     conn.setUseCaches(false);     conn.setRequestMethod(""POST"");     conn.setRequestProperty(""Connection"",""Keep-Alive"");     conn.setRequestProperty(""Content-Type"",""multipart/form-data;charset=utf-8;boundary=*****"");     if (headers != null) {       for (      String name : headers.keySet()) {         conn.setRequestProperty(name,headers.get(name));       }     }     String cookie=makeCookie();     if (cookie != null) {       conn.setRequestProperty(""Cookie"",cookie);     }     if (this.ah != null) {       this.ah.applyToken((AbstractAjaxCallback<?,?>)this,conn);     }     DataOutputStream dos=new DataOutputStream(conn.getOutputStream());     for (    Map.Entry<String,Object> entry : params.entrySet()) {       writeObject(dos,entry.getKey(),entry.getValue());     }     dos.writeBytes(""--*****--\r\n"");     dos.flush();     dos.close();     conn.connect();     int code=conn.getResponseCode();     String message=conn.getResponseMessage();     byte[] data=null;     String encoding=conn.getContentEncoding();     String error=null;     if (code < 200 || code >= 300) {       error=new String(toData(encoding,conn.getErrorStream()),""UTF-8"");       AQUtility.debug(""error"",error);     }  else {       data=toData(encoding,conn.getInputStream());     }     AQUtility.debug(""response"",Integer.valueOf(code));     if (data != null) {       AQUtility.debug(Integer.valueOf(data.length),url);     }     status.code(code).message(message).redirect(url).time(new Date()).data(data).error(error).client(null);   }   private byte[] toData(  String encoding,  InputStream is) throws IOException {     boolean gzip=""gzip"".equalsIgnoreCase(encoding);     if (gzip) {       is=new GZIPInputStream(is);     }     return AQUtility.toBytes(is);   }   private static void writeObject(  DataOutputStream dos,  String name,  Object obj) throws IOException {     if (obj != null) {       if (obj instanceof File) {         File file=(File)obj;         writeData(dos,name,file.getName(),new FileInputStream(file));       }  else       if (obj instanceof byte[]) {         writeData(dos,name,name,new ByteArrayInputStream((byte[])obj));       }  else       if (obj instanceof InputStream) {         writeData(dos,name,name,(InputStream)obj);       }  else {         writeField(dos,name,obj.toString());       }     }   }   private static void writeData(  DataOutputStream dos,  String name,  String filename,  InputStream is) throws IOException {     dos.writeBytes(""--*****\r\n"");     dos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\""""+ filename+ ""\""""+ lineEnd);     dos.writeBytes(""Content-Type: application/octet-stream"");     dos.writeBytes(lineEnd);     dos.writeBytes(""Content-Transfer-Encoding: binary"");     dos.writeBytes(lineEnd);     dos.writeBytes(lineEnd);     AQUtility.copy(is,dos);     dos.writeBytes(lineEnd);   }   private static void writeField(  DataOutputStream dos,  String name,  String value) throws IOException {     dos.writeBytes(""--*****\r\n"");     dos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\"""");     dos.writeBytes(lineEnd);     dos.writeBytes(lineEnd);     byte[] data=value.getBytes(""UTF-8"");     dos.write(data);     dos.writeBytes(lineEnd);   }   private String makeCookie(){     if (this.cookies == null || this.cookies.size() == 0) {       return null;     }     Iterator<String> iter=this.cookies.keySet().iterator();     StringBuilder sb=new StringBuilder();     while (iter.hasNext()) {       String key=iter.next();       String value=this.cookies.get(key);       sb.append(key);       sb.append(""="");       sb.append(value);       if (iter.hasNext()) {         sb.append(""; "");       }     }     return sb.toString();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\AjaxCallback.code","public class AjaxCallback<T> extends AbstractAjaxCallback<T,AjaxCallback<T>> { } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\AjaxStatus.code","public class AjaxStatus {   public static final int AUTH_ERROR=-102;   public static final int DATASTORE=2;   public static final int DEVICE=5;   public static final int FILE=3;   public static final int MEMORY=4;   public static final int NETWORK=1;   public static final int NETWORK_ERROR=-101;   public static final int TRANSFORM_ERROR=-103;   private DefaultHttpClient client;   private Closeable close;   private int code;   private HttpContext context;   private byte[] data;   private boolean done;   private long duration;   private String error;   private File file;   private Header[] headers;   private boolean invalid;   private String message;   private boolean reauth;   private String redirect;   private boolean refresh;   private int source;   private long start;   private Date time;   public AjaxStatus(){     this.code=200;     this.message=""OK"";     this.time=new Date();     this.source=1;     this.start=System.currentTimeMillis();   }   public AjaxStatus(  int code,  String message){     this.code=200;     this.message=""OK"";     this.time=new Date();     this.source=1;     this.start=System.currentTimeMillis();     this.code=code;     this.message=message;   }   public AjaxStatus source(  int source){     this.source=source;     return this;   }   public AjaxStatus code(  int code){     this.code=code;     return this;   }   public AjaxStatus error(  String error){     this.error=error;     return this;   }   public AjaxStatus message(  String message){     this.message=message;     return this;   }   public AjaxStatus redirect(  String redirect){     this.redirect=redirect;     return this;   }   public AjaxStatus context(  HttpContext context){     this.context=context;     return this;   }   public AjaxStatus time(  Date time){     this.time=time;     return this;   }   public AjaxStatus refresh(  boolean refresh){     this.refresh=refresh;     return this;   }   public AjaxStatus reauth(  boolean reauth){     this.reauth=reauth;     return this;   }   public AjaxStatus client(  DefaultHttpClient client){     this.client=client;     return this;   }   public AjaxStatus headers(  Header[] headers){     this.headers=headers;     return this;   }   public AjaxStatus done(){     this.duration=System.currentTimeMillis() - this.start;     this.done=true;     this.reauth=false;     return this;   }   public AjaxStatus reset(){     this.duration=System.currentTimeMillis() - this.start;     this.done=false;     close();     return this;   }   public void closeLater(  Closeable c){     this.close=c;   }   public void close(){     AQUtility.close(this.close);     this.close=null;   }   public AjaxStatus data(  byte[] data){     this.data=data;     return this;   }   public AjaxStatus file(  File file){     this.file=file;     return this;   }   public AjaxStatus invalidate(){     this.invalid=true;     return this;   }   public boolean getDone(){     return this.done;   }   public boolean getReauth(){     return this.reauth;   }   public boolean getInvalid(){     return this.invalid;   }   public int getCode(){     return this.code;   }   public String getMessage(){     return this.message;   }   public String getRedirect(){     return this.redirect;   }   public byte[] getData(){     return this.data;   }   public File getFile(){     return this.file;   }   public Date getTime(){     return this.time;   }   public boolean getRefresh(){     return this.refresh;   }   public DefaultHttpClient getClient(){     return this.client;   }   public long getDuration(){     return this.duration;   }   public int getSource(){     return this.source;   }   public String getError(){     return this.error;   }   public boolean expired(  long expire){     long mod=this.time.getTime();     long now=System.currentTimeMillis();     long diff=now - mod;     return diff > expire && getSource() != 1;   }   public List<Cookie> getCookies(){     CookieStore store;     if (this.context != null && (store=(CookieStore)this.context.getAttribute(""http.cookie-store"")) != null) {       return store.getCookies();     }     return Collections.emptyList();   }   public List<Header> getHeaders(){     return this.headers == null ? Collections.emptyList() : Arrays.asList(this.headers);   }   public String getHeader(  String name){     if (this.headers == null) {       return null;     }     for (int i=0; i < this.headers.length; i++) {       if (name.equalsIgnoreCase(this.headers[i].getName())) {         return this.headers[i].getValue();       }     }     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\BitmapAjaxCallback.code","public class BitmapAjaxCallback extends AbstractAjaxCallback<Bitmap,BitmapAjaxCallback> {   private static final int FADE_DUR=300;   private static Map<String,Bitmap> bigCache;   private static Map<String,Bitmap> invalidCache;   private static Map<String,Bitmap> smallCache;   private int animation;   private Bitmap bm;   private int fallback;   private File imageFile;   private boolean invalid;   private Bitmap preset;   private float ratio;   private boolean rotate;   private int round;   private int targetWidth;   private WeakReference<ImageView> v;   private static int SMALL_MAX=20;   private static int BIG_MAX=20;   private static int SMALL_PIXELS=2500;   private static int BIG_PIXELS=160000;   private static int BIG_TPIXELS=1000000;   private static boolean DELAY_WRITE=false;   private static HashMap<String,WeakHashMap<ImageView,BitmapAjaxCallback>> queueMap=new HashMap<>();   private static Bitmap empty=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);   private static Bitmap dummy=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);   private boolean targetDim=true;   private float anchor=Float.MAX_VALUE;   public BitmapAjaxCallback(){     type(Bitmap.class).memCache(true).fileCache(true).url("""");   }   public BitmapAjaxCallback imageView(  ImageView view){     this.v=new WeakReference<>(view);     return this;   }   public BitmapAjaxCallback targetWidth(  int targetWidth){     this.targetWidth=targetWidth;     return this;   }   public BitmapAjaxCallback file(  File imageFile){     this.imageFile=imageFile;     return this;   }   public BitmapAjaxCallback preset(  Bitmap preset){     this.preset=preset;     return this;   }   public BitmapAjaxCallback bitmap(  Bitmap bm){     this.bm=bm;     return this;   }   public BitmapAjaxCallback fallback(  int resId){     this.fallback=resId;     return this;   }   public BitmapAjaxCallback animation(  int animation){     this.animation=animation;     return this;   }   public BitmapAjaxCallback ratio(  float ratio){     this.ratio=ratio;     return this;   }   public BitmapAjaxCallback rotate(  boolean rotate){     this.rotate=rotate;     return this;   }   public BitmapAjaxCallback anchor(  float anchor){     this.anchor=anchor;     return this;   }   public BitmapAjaxCallback round(  int radius){     this.round=radius;     return this;   }   private static Bitmap decode(  String path,  byte[] data,  BitmapFactory.Options options,  boolean rotate){     Bitmap result=null;     if (path != null) {       result=decodeFile(path,options,rotate);     }  else     if (data != null) {       result=BitmapFactory.decodeByteArray(data,0,data.length,options);     }     if (result == null && options != null && !options.inJustDecodeBounds) {       AQUtility.debug(""decode image failed"",path);     }     return result;   }   private static Bitmap decodeFile(  String path,  BitmapFactory.Options options,  boolean rotate){     FileInputStream fis;     Bitmap result=null;     if (options == null) {       options=new BitmapFactory.Options();     }     options.inInputShareable=true;     options.inPurgeable=true;     FileInputStream fis2=null;     try {       try {         fis=new FileInputStream(path);       }  catch (      IOException e) {         e=e;       }     }  catch (    Throwable th) {       th=th;     }     try {       FileDescriptor fd=fis.getFD();       result=BitmapFactory.decodeFileDescriptor(fd,null,options);       if (result != null && rotate) {         result=rotate(path,result);       }       AQUtility.close(fis);     }  catch (    IOException e2) {       e=e2;       fis2=fis;       AQUtility.report(e);       AQUtility.close(fis2);       return result;     } catch (    Throwable th2) {       th=th2;       fis2=fis;       AQUtility.close(fis2);       throw th;     }     return result;   }   private static Bitmap rotate(  String path,  Bitmap bm){     if (bm == null) {       return null;     }     int ori=1;     try {       ExifInterface ei=new ExifInterface(path);       ori=ei.getAttributeInt(""Orientation"",1);     }  catch (    Exception e) {       AQUtility.debug((Throwable)e);     }     if (ori <= 0) {       return bm;     }     Matrix matrix=getRotateMatrix(ori);     Bitmap result=Bitmap.createBitmap(bm,0,0,bm.getWidth(),bm.getHeight(),matrix,true);     AQUtility.debug(""before"",String.valueOf(bm.getWidth()) + "":"" + bm.getHeight());     AQUtility.debug(""after"",String.valueOf(result.getWidth()) + "":"" + result.getHeight());     if (bm != result) {       bm.recycle();       return result;     }     return result;   }   private static android.graphics.Matrix getRotateMatrix(  int r6){     throw new UnsupportedOperationException(""Method not decompiled: com.androidquery.callback.BitmapAjaxCallback.getRotateMatrix(int):android.graphics.Matrix"");   }   public static Bitmap getResizedImage(  String path,  byte[] data,  int target,  boolean width,  int round){     return getResizedImage(path,data,target,width,round,false);   }   public static Bitmap getResizedImage(  String path,  byte[] data,  int target,  boolean width,  int round,  boolean rotate){     if (path == null && data == null) {       return null;     }     BitmapFactory.Options options=null;     if (target > 0) {       BitmapFactory.Options info=new BitmapFactory.Options();       info.inJustDecodeBounds=true;       decode(path,data,info,rotate);       int dim=info.outWidth;       if (!width) {         dim=Math.max(dim,info.outHeight);       }       int ssize=sampleSize(dim,target);       options=new BitmapFactory.Options();       options.inSampleSize=ssize;     }     Bitmap bm=null;     try {       bm=decode(path,data,options,rotate);     }  catch (    OutOfMemoryError e) {       clearCache();       AQUtility.report(e);     }     if (round > 0) {       return getRoundedCornerBitmap(bm,round);     }     return bm;   }   private static int sampleSize(  int width,  int target){     int result=1;     for (int i=0; i < 10 && width >= target * 2; i++) {       width/=2;       result*=2;     }     return result;   }   private Bitmap bmGet(  String path,  byte[] data){     return getResizedImage(path,data,this.targetWidth,this.targetDim,this.round,this.rotate);   }   @Override protected File accessFile(  File cacheDir,  String url){     return (this.imageFile == null || !this.imageFile.exists()) ? super.accessFile(cacheDir,url) : this.imageFile;   }   @Override public Bitmap fileGet(  String url,  File file,  AjaxStatus status){     return bmGet(file.getAbsolutePath(),null);   }   @Override public Bitmap transform(  String url,  byte[] data,  AjaxStatus status){     String path=null;     File file=status.getFile();     if (file != null) {       path=file.getAbsolutePath();     }     Bitmap bm=bmGet(path,data);     if (bm == null) {       if (this.fallback > 0) {         bm=getFallback();       }  else       if (this.fallback == -2 || this.fallback == -1) {         bm=dummy;       }  else       if (this.fallback == -3) {         bm=this.preset;       }       if (status.getCode() != 200) {         this.invalid=true;       }     }     return bm;   }   private Bitmap getFallback(){     String key;     Bitmap bm=null;     View view=this.v.get();     if (view != null && (bm=memGet((key=Integer.toString(this.fallback)))) == null && (bm=BitmapFactory.decodeResource(view.getResources(),this.fallback)) != null) {       memPut(key,bm);     }     return bm;   }   public static Bitmap getMemoryCached(  Context context,  int resId){     String key=Integer.toString(resId);     Bitmap bm=memGet(key,0,0);     if (bm == null && (bm=BitmapFactory.decodeResource(context.getResources(),resId)) != null) {       memPut(key,0,0,bm,false);     }     return bm;   }   public static Bitmap getEmptyBitmap(){     return empty;   }   @Override public final void callback(  String url,  Bitmap bm,  AjaxStatus status){     ImageView firstView=this.v.get();     WeakHashMap<ImageView,BitmapAjaxCallback> ivs=queueMap.remove(url);     if (ivs == null || !ivs.containsKey(firstView)) {       checkCb(this,url,firstView,bm,status);     }     if (ivs != null) {       Set<ImageView> set=ivs.keySet();       for (      ImageView view : set) {         BitmapAjaxCallback cb=ivs.get(view);         cb.status=status;         checkCb(cb,url,view,bm,status);       }     }   }   @Override public void skip(  String url,  Bitmap bm,  AjaxStatus status){     queueMap.remove(url);   }   private void checkCb(  BitmapAjaxCallback cb,  String url,  ImageView v,  Bitmap bm,  AjaxStatus status){     if (v != null && cb != null) {       if (url.equals(v.getTag(Constants.TAG_URL))) {         if (v instanceof ImageView) {           cb.callback(url,v,bm,status);         }  else {           cb.setBitmap(url,v,bm,false);         }       }       cb.showProgress(false);     }   }   protected void callback(  String url,  ImageView iv,  Bitmap bm,  AjaxStatus status){     setBitmap(url,iv,bm,false);   }   public static void setIconCacheLimit(  int limit){     SMALL_MAX=limit;     clearCache();   }   public static void setCacheLimit(  int limit){     BIG_MAX=limit;     clearCache();   }   public static void setDelayWrite(  boolean delay){     DELAY_WRITE=delay;   }   public static void setPixelLimit(  int pixels){     BIG_PIXELS=pixels;     clearCache();   }   public static void setSmallPixel(  int pixels){     SMALL_PIXELS=pixels;     clearCache();   }   public static void setMaxPixelLimit(  int pixels){     BIG_TPIXELS=pixels;     clearCache();   }   public static void clearCache(){     bigCache=null;     smallCache=null;     invalidCache=null;   }   public static void clearTasks(){     queueMap.clear();   }   private static Map<String,Bitmap> getBCache(){     if (bigCache == null) {       bigCache=Collections.synchronizedMap(new BitmapCache(BIG_MAX,BIG_PIXELS,BIG_TPIXELS));     }     return bigCache;   }   private static Map<String,Bitmap> getSCache(){     if (smallCache == null) {       smallCache=Collections.synchronizedMap(new BitmapCache(SMALL_MAX,SMALL_PIXELS,250000));     }     return smallCache;   }   private static Map<String,Bitmap> getICache(){     if (invalidCache == null) {       invalidCache=Collections.synchronizedMap(new BitmapCache(100,BIG_PIXELS,250000));     }     return invalidCache;   }   @Override public Bitmap memGet(  String url){     if (this.bm != null) {       return this.bm;     }     if (this.memCache) {       return memGet(url,this.targetWidth,this.round);     }     return null;   }   public static boolean isMemoryCached(  String url){     return getBCache().containsKey(url) || getSCache().containsKey(url) || getICache().containsKey(url);   }   public static Bitmap getMemoryCached(  String url,  int targetWidth){     return memGet(url,targetWidth,0);   }   private static Bitmap memGet(  String url,  int targetWidth,  int round){     String url2=getKey(url,targetWidth,round);     Map<String,Bitmap> cache=getBCache();     Bitmap result=cache.get(url2);     if (result == null) {       Map<String,Bitmap> cache2=getSCache();       result=cache2.get(url2);     }     if (result == null) {       Map<String,Bitmap> cache3=getICache();       Bitmap result2=cache3.get(url2);       if (result2 != null && getLastStatus() == 200) {         invalidCache=null;         return null;       }       return result2;     }     return result;   }   private static String getKey(  String url,  int targetWidth,  int round){     if (targetWidth > 0) {       url=String.valueOf(url) + ""#"" + targetWidth;     }     if (round > 0) {       return String.valueOf(url) + ""#"" + round;     }     return url;   }   private static void memPut(  String url,  int targetWidth,  int round,  Bitmap bm,  boolean invalid){     Map<String,Bitmap> cache;     if (bm != null) {       int pixels=bm.getWidth() * bm.getHeight();       if (invalid) {         cache=getICache();       }  else       if (pixels <= SMALL_PIXELS) {         cache=getSCache();       }  else {         cache=getBCache();       }       if (targetWidth > 0 || round > 0) {         String key=getKey(url,targetWidth,round);         cache.put(key,bm);         if (!cache.containsKey(url)) {           cache.put(url,null);           return;         }         return;       }       cache.put(url,bm);     }   }   @Override public void memPut(  String url,  Bitmap bm){     memPut(url,this.targetWidth,this.round,bm,this.invalid);   }   private static Bitmap filter(  View iv,  Bitmap bm,  int fallback){     if (bm != null && bm.getWidth() == 1 && bm.getHeight() == 1 && bm != empty) {       bm=null;     }     if (bm != null) {       iv.setVisibility(0);     }  else     if (fallback == -2) {       iv.setVisibility(8);     }  else     if (fallback == -1) {       iv.setVisibility(4);     }     return bm;   }   private void presetBitmap(  String url,  ImageView v){     if (!url.equals(v.getTag(Constants.TAG_URL)) || this.preset != null) {       v.setTag(Constants.TAG_URL,url);       if (this.preset != null && !cacheAvailable(v.getContext())) {         setBitmap(url,v,this.preset,true);       }  else {         setBitmap(url,v,null,true);       }     }   }   private void setBitmap(  String url,  ImageView iv,  Bitmap bm,  boolean isPreset){     if (bm == null) {       iv.setImageDrawable(null);     }  else     if (isPreset) {       iv.setImageDrawable(makeDrawable(iv,bm,this.ratio,this.anchor));     }  else     if (this.status != null) {       setBmAnimate(iv,bm,this.preset,this.fallback,this.animation,this.ratio,this.anchor,this.status.getSource());     }   }   private static Drawable makeDrawable(  ImageView iv,  Bitmap bm,  float ratio,  float anchor){     if (ratio > 0.0f) {       BitmapDrawable bd=new RatioDrawable(iv.getResources(),bm,iv,ratio,anchor);       return bd;     }     BitmapDrawable bd2=new BitmapDrawable(iv.getResources(),bm);     return bd2;   }   private static void setBmAnimate(  ImageView iv,  Bitmap bm,  Bitmap preset,  int fallback,  int animation,  float ratio,  float anchor,  int source){     Bitmap bm2=filter(iv,bm,fallback);     if (bm2 == null) {       iv.setImageBitmap(null);       return;     }     Drawable d=makeDrawable(iv,bm2,ratio,anchor);     Animation anim=null;     if (fadeIn(animation,source)) {       if (preset == null) {         anim=new AlphaAnimation(0.0f,1.0f);         anim.setInterpolator(new DecelerateInterpolator());         anim.setDuration(300L);       }  else {         Drawable pd=makeDrawable(iv,preset,ratio,anchor);         Drawable[] ds={pd,d};         TransitionDrawable td=new TransitionDrawable(ds);         td.setCrossFadeEnabled(true);         td.startTransition(FADE_DUR);         d=td;       }     }  else     if (animation > 0) {       anim=AnimationUtils.loadAnimation(iv.getContext(),animation);     }     iv.setImageDrawable(d);     if (anim != null) {       anim.setStartTime(AnimationUtils.currentAnimationTimeMillis());       iv.startAnimation(anim);     }  else {       iv.setAnimation(null);     }   }   private static boolean fadeIn(  int r2,  int r3){     throw new UnsupportedOperationException(""Method not decompiled: com.androidquery.callback.BitmapAjaxCallback.fadeIn(int, int):boolean"");   }   public static void async(  Activity act,  Context context,  ImageView iv,  String url,  Object progress,  AccountHandle ah,  ImageOptions options,  HttpHost proxy,  String networkUrl){     async(act,context,iv,url,options.memCache,options.fileCache,options.targetWidth,options.fallback,options.preset,options.animation,options.ratio,options.anchor,progress,ah,options.policy,options.round,proxy,networkUrl);   }   public static void async(  Activity act,  Context context,  ImageView iv,  String url,  boolean memCache,  boolean fileCache,  int targetWidth,  int fallbackId,  Bitmap preset,  int animation,  float ratio,  float anchor,  Object progress,  AccountHandle ah,  int policy,  int round,  HttpHost proxy,  String networkUrl){     Bitmap bm=null;     if (memCache) {       bm=memGet(url,targetWidth,round);     }     if (bm != null) {       iv.setTag(Constants.TAG_URL,url);       Common.showProgress(progress,url,false);       setBmAnimate(iv,bm,preset,fallbackId,animation,ratio,anchor,4);       return;     }     BitmapAjaxCallback cb=new BitmapAjaxCallback();     cb.url(url).imageView(iv).memCache(memCache).fileCache(fileCache).targetWidth(targetWidth).fallback(fallbackId).preset(preset).animation(animation).ratio(ratio).anchor(anchor).progress(progress).auth(ah).policy(policy).round(round).networkUrl(networkUrl);     if (proxy != null) {       cb.proxy(proxy.getHostName(),proxy.getPort());     }     if (act != null) {       cb.async(act);     }  else {       cb.async(context);     }   }   @Override public void async(  Context context){     String url=getUrl();     ImageView v=this.v.get();     if (url == null) {       showProgress(false);       setBitmap(url,v,null,false);       return;     }     Bitmap bm=memGet(url);     if (bm != null) {       v.setTag(Constants.TAG_URL,url);       this.status=new AjaxStatus().source(4).done();       callback(url,bm,this.status);       return;     }     presetBitmap(url,v);     if (!queueMap.containsKey(url)) {       addQueue(url,v);       super.async(v.getContext());     }  else {       showProgress(true);       addQueue(url,v);     }   }   @Override protected boolean isStreamingContent(){     return !DELAY_WRITE;   }   private void addQueue(  String url,  ImageView iv){     WeakHashMap<ImageView,BitmapAjaxCallback> ivs=queueMap.get(url);     if (ivs == null) {       if (queueMap.containsKey(url)) {         WeakHashMap<ImageView,BitmapAjaxCallback> ivs2=new WeakHashMap<>();         ivs2.put(iv,this);         queueMap.put(url,ivs2);         return;       }       queueMap.put(url,null);       return;     }     ivs.put(iv,this);   }   private static Bitmap getRoundedCornerBitmap(  Bitmap bitmap,  int pixels){     Bitmap output=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Bitmap.Config.ARGB_8888);     Canvas canvas=new Canvas(output);     Paint paint=new Paint();     Rect rect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());     RectF rectF=new RectF(rect);     float roundPx=pixels;     paint.setAntiAlias(true);     canvas.drawARGB(0,0,0,0);     paint.setColor(-12434878);     canvas.drawRoundRect(rectF,roundPx,roundPx,paint);     paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));     canvas.drawBitmap(bitmap,rect,rect,paint);     return output;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\ImageOptions.code","public class ImageOptions {   public int animation;   public int fallback;   public int policy;   public Bitmap preset;   public float ratio;   public int round;   public int targetWidth;   public boolean memCache=true;   public boolean fileCache=true;   public float anchor=Float.MAX_VALUE; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.callback\Transformer.code","public interface Transformer {   <T>T transform(  String str,  Class<T> cls,  String str2,  byte[] bArr,  AjaxStatus ajaxStatus); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.service\Handler.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2d34cfd4"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.service\MarketService.code","!org.eclipse.jdt.core.dom.TypeDeclaration@713d4517"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\AQUtility.code","public class AQUtility {   private static final int IO_BUFFER_SIZE=4096;   private static File cacheDir;   private static Context context;   private static Thread.UncaughtExceptionHandler eh;   private static Handler handler;   private static File pcacheDir;   private static ScheduledExecutorService storeExe;   private static Object wait;   private static boolean debug=false;   private static Map<String,Long> times=new HashMap();   public static void setDebug(  boolean debug2){     debug=debug2;   }   public static boolean isDebug(){     return debug;   }   public static void debugWait(  long time){     if (debug) {       if (wait == null) {         wait=new Object();       } synchronized (wait) {         try {           wait.wait(time);         }  catch (        InterruptedException e) {           e.printStackTrace();         }       }     }   }   public static void debugNotify(){     if (debug && wait != null) { synchronized (wait) {         wait.notifyAll();       }     }   }   public static void debug(  Object msg){     if (debug) {       Log.w(""AQuery"",new StringBuilder().append(msg).toString());     }   }   public static void warn(  Object msg,  Object msg2){     Log.w(""AQuery"",msg + "":"" + msg2);   }   public static void debug(  Object msg,  Object msg2){     if (debug) {       Log.w(""AQuery"",msg + "":"" + msg2);     }   }   public static void debug(  Throwable e){     if (debug) {       String trace=Log.getStackTraceString(e);       Log.w(""AQuery"",trace);     }   }   public static void report(  Throwable e){     if (e != null) {       try {         warn(""reporting"",Log.getStackTraceString(e));         if (eh != null) {           eh.uncaughtException(Thread.currentThread(),e);         }       }  catch (      Exception ex) {         ex.printStackTrace();       }     }   }   public static void setExceptionHandler(  Thread.UncaughtExceptionHandler handler2){     eh=handler2;   }   public static void time(  String tag){     times.put(tag,Long.valueOf(System.currentTimeMillis()));   }   public static long timeEnd(  String tag,  long threshold){     Long old=times.get(tag);     if (old == null) {       return 0L;     }     long now=System.currentTimeMillis();     long diff=now - old.longValue();     if (threshold == 0 || diff > threshold) {       debug(tag,Long.valueOf(diff));       return diff;     }     return diff;   }   public static Object invokeHandler(  Object handler2,  String callback,  boolean fallback,  boolean report,  Class<?>[] clsArr,  Object... params){     return invokeHandler(handler2,callback,fallback,report,clsArr,null,params);   }   public static Object invokeHandler(  Object handler2,  String callback,  boolean fallback,  boolean report,  Class<?>[] clsArr,  Class<?>[] clsArr2,  Object... params){     try {       return invokeMethod(handler2,callback,fallback,clsArr,clsArr2,params);     }  catch (    Exception e) {       if (report) {         report(e);       }  else {         debug((Throwable)e);       }       return null;     }   }   private static Object invokeMethod(  Object handler2,  String callback,  boolean fallback,  Class<?>[] clsArr,  Class<?>[] clsArr2,  Object... params) throws Exception {     Object obj=null;     if (handler2 == null || callback == null) {       return null;     }     if (clsArr == null) {       try {         clsArr=new Class[0];       }  catch (      NoSuchMethodException e) {         if (!fallback) {           return null;         }         try {           if (clsArr2 == null) {             Method method=handler2.getClass().getMethod(callback,new Class[0]);             obj=method.invoke(handler2,new Object[0]);           }  else {             Method method2=handler2.getClass().getMethod(callback,clsArr2);             obj=method2.invoke(handler2,params);           }           return obj;         }  catch (        NoSuchMethodException e2) {           return obj;         }       }     }     Method method3=handler2.getClass().getMethod(callback,clsArr);     return method3.invoke(handler2,params);   }   public static void transparent(  View view,  boolean transparent){     float alpha=transparent ? 0.5f : 1.0f;     setAlpha(view,alpha);   }   private static void setAlpha(  View view,  float alphaValue){     if (alphaValue == 1.0f) {       view.clearAnimation();       return;     }     AlphaAnimation alpha=new AlphaAnimation(alphaValue,alphaValue);     alpha.setDuration(0L);     alpha.setFillAfter(true);     view.startAnimation(alpha);   }   public static void ensureUIThread(){     if (!isUIThread()) {       report(new IllegalStateException(""Not UI Thread""));     }   }   public static boolean isUIThread(){     long uiId=Looper.getMainLooper().getThread().getId();     long cId=Thread.currentThread().getId();     return uiId == cId;   }   public static Handler getHandler(){     if (handler == null) {       handler=new Handler(Looper.getMainLooper());     }     return handler;   }   public static void post(  Runnable run){     getHandler().post(run);   }   public static void post(  Object handler2,  String method){     post(handler2,method,new Class[0],new Object[0]);   }   public static void post(  final Object handler2,  final String method,  final Class<?>[] clsArr,  final Object... params){     post(new Runnable(){       @Override public void run(){         AQUtility.invokeHandler(handler2,method,false,true,clsArr,params);       }     } );   }   public static void postAsync(  final Runnable run){     AsyncTask<Void,Void,String> task=new AsyncTask<Void,Void,String>(){       @Override public String doInBackground(      Void... params){         try {           run.run();           return null;         }  catch (        Exception e) {           AQUtility.report(e);           return null;         }       }     } ;     task.execute(new Void[0]);   }   public static void postAsync(  Object handler2,  String method){     postAsync(handler2,method,new Class[0],new Object[0]);   }   public static void postAsync(  final Object handler2,  final String method,  final Class<?>[] clsArr,  final Object... params){     postAsync(new Runnable(){       @Override public void run(){         AQUtility.invokeHandler(handler2,method,false,true,clsArr,params);       }     } );   }   public static void removePost(  Runnable run){     getHandler().removeCallbacks(run);   }   public static void postDelayed(  Runnable run,  long delay){     getHandler().postDelayed(run,delay);   }   public static void apply(  SharedPreferences.Editor editor){     if (AQuery.SDK_INT >= 9) {       invokeHandler(editor,""apply"",false,true,null,null);     }  else {       editor.commit();     }   }   private static String getMD5Hex(  String str){     byte[] data=getMD5(str.getBytes());     BigInteger bi=new BigInteger(data).abs();     String result=bi.toString(36);     return result;   }   private static byte[] getMD5(  byte[] data){     try {       MessageDigest digest=MessageDigest.getInstance(""MD5"");       digest.update(data);       return digest.digest();     }  catch (    NoSuchAlgorithmException e) {       report(e);       return null;     }   }   public static void copy(  InputStream in,  OutputStream out) throws IOException {     copy(in,out,0,null);   }   public static void copy(  InputStream in,  OutputStream out,  int max,  Progress progress) throws IOException {     if (progress != null) {       progress.reset();       progress.setBytes(max);     }     byte[] b=new byte[4096];     while (true) {       int read=in.read(b);       if (read == -1) {         break;       }       out.write(b,0,read);       if (progress != null) {         progress.increment(read);       }     }     if (progress != null) {       progress.done();     }   }   public static byte[] toBytes(  InputStream is){     byte[] result=null;     ByteArrayOutputStream baos=new ByteArrayOutputStream();     try {       copy(is,baos);       result=baos.toByteArray();     }  catch (    IOException e) {       report(e);     }     close(is);     return result;   }   public static void write(  File file,  byte[] data){     try {       if (!file.exists()) {         try {           file.createNewFile();         }  catch (        Exception e) {           debug(""file create fail"",file);           report(e);         }       }       FileOutputStream fos=new FileOutputStream(file);       fos.write(data);       fos.close();     }  catch (    Exception e2) {       report(e2);     }   }   public static void close(  Closeable c){     if (c != null) {       try {         c.close();       }  catch (      Exception e) {       }     }   }   private static ScheduledExecutorService getFileStoreExecutor(){     if (storeExe == null) {       storeExe=Executors.newSingleThreadScheduledExecutor();     }     return storeExe;   }   public static void storeAsync(  File file,  byte[] data,  long delay){     ScheduledExecutorService exe=getFileStoreExecutor();     Common task=new Common().method(1,file,data);     exe.schedule(task,delay,TimeUnit.MILLISECONDS);   }   public static File getCacheDir(  Context context2,  int policy){     if (policy == 1) {       if (pcacheDir != null) {         return pcacheDir;       }       File cd=getCacheDir(context2);       pcacheDir=new File(cd,""persistent"");       pcacheDir.mkdirs();       return pcacheDir;     }     return getCacheDir(context2);   }   public static File getCacheDir(  Context context2){     if (cacheDir == null) {       cacheDir=new File(context2.getCacheDir(),""aquery"");       cacheDir.mkdirs();     }     return cacheDir;   }   public static void setCacheDir(  File dir){     cacheDir=dir;     if (cacheDir != null) {       cacheDir.mkdirs();     }   }   private static File makeCacheFile(  File dir,  String name){     File result=new File(dir,name);     return result;   }   private static String getCacheFileName(  String url){     String hash=getMD5Hex(url);     return hash;   }   public static File getCacheFile(  File dir,  String url){     if (url == null) {       return null;     }     if (url.startsWith(File.separator)) {       return new File(url);     }     String name=getCacheFileName(url);     return makeCacheFile(dir,name);   }   public static File getExistedCacheByUrl(  File dir,  String url){     File file=getCacheFile(dir,url);     if (file == null || !file.exists()) {       return null;     }     return file;   }   public static File getExistedCacheByUrlSetAccess(  File dir,  String url){     File file=getExistedCacheByUrl(dir,url);     if (file != null) {       lastAccess(file);     }     return file;   }   private static void lastAccess(  File file){     long now=System.currentTimeMillis();     file.setLastModified(now);   }   public static void store(  File file,  byte[] data){     if (file != null) {       try {         write(file,data);       }  catch (      Exception e) {         report(e);       }     }   }   public static void cleanCacheAsync(  Context context2){     cleanCacheAsync(context2,3000000L,2000000L);   }   public static void cleanCacheAsync(  Context context2,  long triggerSize,  long targetSize){     try {       File cacheDir2=getCacheDir(context2);       Common task=new Common().method(2,cacheDir2,Long.valueOf(triggerSize),Long.valueOf(targetSize));       ScheduledExecutorService exe=getFileStoreExecutor();       exe.schedule(task,0L,TimeUnit.MILLISECONDS);     }  catch (    Exception e) {       report(e);     }   }   public static void cleanCache(  File cacheDir2,  long triggerSize,  long targetSize){     try {       File[] files=cacheDir2.listFiles();       if (files != null) {         Arrays.sort(files,new Common());         if (testCleanNeeded(files,triggerSize)) {           cleanCache(files,targetSize);         }         File temp=getTempDir();         if (temp != null && temp.exists()) {           cleanCache(temp.listFiles(),0L);         }       }     }  catch (    Exception e) {       report(e);     }   }   public static File getTempDir(){     File ext=Environment.getExternalStorageDirectory();     File tempDir=new File(ext,""aquery/temp"");     tempDir.mkdirs();     if (!tempDir.exists() || !tempDir.canWrite()) {       return null;     }     return tempDir;   }   private static boolean testCleanNeeded(  File[] files,  long triggerSize){     long total=0;     for (    File f : files) {       total+=f.length();       if (total > triggerSize) {         return true;       }     }     return false;   }   private static void cleanCache(  File[] files,  long maxSize){     long total=0;     int deletes=0;     for (    File f : files) {       if (f.isFile()) {         total+=f.length();         if (total >= maxSize) {           f.delete();           deletes++;         }       }     }     debug(""deleted"",Integer.valueOf(deletes));   }   public static int dip2pixel(  Context context2,  float n){     int value=(int)TypedValue.applyDimension(1,n,context2.getResources().getDisplayMetrics());     return value;   }   public static float pixel2dip(  Context context2,  float n){     Resources resources=context2.getResources();     DisplayMetrics metrics=resources.getDisplayMetrics();     float dp=n / (metrics.densityDpi / 160.0f);     return dp;   }   public static void setContext(  Application app){     context=app.getApplicationContext();   }   public static Context getContext(){     if (context == null) {       warn(""warn"",""getContext with null"");       debug((Throwable)new IllegalStateException());     }     return context;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\BitmapCache.code","public class BitmapCache extends LinkedHashMap<String,Bitmap> {   private static final long serialVersionUID=1;   private int maxCount;   private int maxPixels;   private int maxTotalPixels;   private int pixels;   public BitmapCache(  int mc,  int mp,  int mtp){     super(8,0.75f,true);     this.maxCount=mc;     this.maxPixels=mp;     this.maxTotalPixels=mtp;   }   @Override public Bitmap put(  String key,  Bitmap bm){     Bitmap old=null;     int px=pixels(bm);     if (px <= this.maxPixels) {       this.pixels+=px;       old=(Bitmap)super.put((BitmapCache)key,(String)bm);       if (old != null) {         this.pixels-=pixels(old);       }     }     return old;   }   @Override public Bitmap remove(  Object key){     Bitmap old=(Bitmap)super.remove(key);     if (old != null) {       this.pixels-=pixels(old);     }     return old;   }   @Override public void clear(){     super.clear();     this.pixels=0;   }   private int pixels(  Bitmap bm){     if (bm == null) {       return 0;     }     return bm.getWidth() * bm.getHeight();   }   private void shrink(){     if (this.pixels > this.maxTotalPixels) {       Iterator<String> keys=keySet().iterator();       while (keys.hasNext()) {         keys.next();         keys.remove();         if (this.pixels <= this.maxTotalPixels) {           return;         }       }     }   }   @Override public boolean removeEldestEntry(  Map.Entry<String,Bitmap> eldest){     if (this.pixels > this.maxTotalPixels || size() > this.maxCount) {       remove((Object)eldest.getKey());     }     shrink();     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\Common.code","public class Common implements Comparator<File>, Runnable, View.OnClickListener, View.OnLongClickListener, AdapterView.OnItemClickListener, AbsListView.OnScrollListener, AdapterView.OnItemSelectedListener, TextWatcher {   protected static final int CLEAN_CACHE=2;   protected static final int STORE_FILE=1;   private boolean fallback;   private AdapterView.OnItemSelectedListener galleryListener;   private Object handler;   private int lastBottom;   private String method;   private int methodId;   private AbsListView.OnScrollListener osl;   private Object[] params;   private Class<?>[] sig;   private int scrollState=0;   private boolean galleryListen=false;   public Common forward(  Object handler,  String callback,  boolean fallback,  Class<?>[] clsArr){     this.handler=handler;     this.method=callback;     this.fallback=fallback;     this.sig=clsArr;     return this;   }   public Common method(  int methodId,  Object... params){     this.methodId=methodId;     this.params=params;     return this;   }   private Object invoke(  Object... args){     if (this.method != null) {       Object[] input=args;       if (this.params != null) {         input=this.params;       }       Object cbo=this.handler;       if (cbo == null) {         cbo=this;       }       return AQUtility.invokeHandler(cbo,this.method,this.fallback,true,this.sig,input);     }     if (this.methodId != 0) { switch (this.methodId) { case 1:         AQUtility.store((File)this.params[0],(byte[])this.params[1]);       break; case 2:     AQUtility.cleanCache((File)this.params[0],((Long)this.params[1]).longValue(),((Long)this.params[2]).longValue());   break; } } return null; } @Override public int compare(File f1,File f2){ long m1=f1.lastModified(); long m2=f2.lastModified(); if (m2 > m1) { return 1; } if (m2 == m1) { return 0; } return -1; } @Override public void run(){ invoke(new Object[0]); } @Override public void onClick(View v){ invoke(v); } @Override public boolean onLongClick(View v){ Object result=invoke(v); if (result instanceof Boolean) { return ((Boolean)result).booleanValue(); } return false; } @Override public void onItemClick(AdapterView<?> parent,View v,int pos,long id){ invoke(parent,v,Integer.valueOf(pos),Long.valueOf(id)); } @Override public void onScroll(AbsListView view,int first,int visibleItemCount,int totalItemCount){ checkScrolledBottom(view,this.scrollState); if (this.osl != null) { this.osl.onScroll(view,first,visibleItemCount,totalItemCount); } } public int getScrollState(){ return this.scrollState; } public void forward(AbsListView.OnScrollListener listener){ this.osl=listener; } private void checkScrolledBottom(AbsListView view,int scrollState){ int cc=view.getCount(); int last=view.getLastVisiblePosition(); if (scrollState == 0 && cc == last + 1) { if (last != this.lastBottom) { this.lastBottom=last; invoke(view,Integer.valueOf(scrollState)); return; } return; } this.lastBottom=-1; } @Override public void onScrollStateChanged(AbsListView view,int scrollState){ this.scrollState=scrollState; checkScrolledBottom(view,scrollState); if (view instanceof ExpandableListView) { onScrollStateChanged((ExpandableListView)view,scrollState); }  else { onScrollStateChanged2(view,scrollState); } if (this.osl != null) { this.osl.onScrollStateChanged(view,scrollState); } } private void onScrollStateChanged(ExpandableListView elv,int scrollState){ elv.setTag(Constants.TAG_NUM,Integer.valueOf(scrollState)); if (scrollState == 0) { int first=elv.getFirstVisiblePosition(); int last=elv.getLastVisiblePosition(); int count=last - first; ExpandableListAdapter ela=elv.getExpandableListAdapter(); for (int i=0; i <= count; i++) { long packed=elv.getExpandableListPosition(i + first); int group=ExpandableListView.getPackedPositionGroup(packed); int child=ExpandableListView.getPackedPositionChild(packed); if (group >= 0) {   View convertView=elv.getChildAt(i);   Long targetPacked=(Long)convertView.getTag(Constants.TAG_NUM);   if (targetPacked != null && targetPacked.longValue() == packed) {     if (child == -1) {       ela.getGroupView(group,elv.isGroupExpanded(group),convertView,elv);     }  else {       ela.getChildView(group,child,child == ela.getChildrenCount(group) + (-1),convertView,elv);     }     convertView.setTag(Constants.TAG_NUM,null);   } } } } } private void onScrollStateChanged2(AbsListView lv,int scrollState){ lv.setTag(Constants.TAG_NUM,Integer.valueOf(scrollState)); if (scrollState == 0) { int first=lv.getFirstVisiblePosition(); int last=lv.getLastVisiblePosition(); int count=last - first; ListAdapter la=(ListAdapter)lv.getAdapter(); for (int i=0; i <= count; i++) { long packed=i + first; View convertView=lv.getChildAt(i); Number targetPacked=(Number)convertView.getTag(Constants.TAG_NUM); if (targetPacked != null) {   la.getView((int)packed,convertView,lv);   convertView.setTag(Constants.TAG_NUM,null); } } } } public static boolean shouldDelay(int groupPosition,int childPosition,View convertView,ViewGroup parent,String url){ if (url == null || BitmapAjaxCallback.isMemoryCached(url)) { return false; } AbsListView lv=(AbsListView)parent; if (((AbsListView.OnScrollListener)parent.getTag(Constants.TAG_SCROLL_LISTENER)) == null) { AbsListView.OnScrollListener sl=new Common(); lv.setOnScrollListener(sl); parent.setTag(Constants.TAG_SCROLL_LISTENER,sl); } Integer scrollState=(Integer)lv.getTag(Constants.TAG_NUM); if (scrollState == null || scrollState.intValue() == 0 || scrollState.intValue() == 1) { return false; } long packed=childPosition; if (parent instanceof ExpandableListView) { packed=ExpandableListView.getPackedPositionForChild(groupPosition,childPosition); } convertView.setTag(Constants.TAG_NUM,Long.valueOf(packed)); return true; } public static boolean shouldDelay(int position,View convertView,ViewGroup parent,String url){ return parent instanceof Gallery ? shouldDelayGallery(position,convertView,parent,url) : shouldDelay(-2,position,convertView,parent,url); } public static boolean shouldDelay(View convertView,ViewGroup parent,String url,float velocity,boolean fileCheck){ return shouldDelay(-1,convertView,parent,url); } private static boolean shouldDelayGallery(int position,View convertView,ViewGroup parent,String url){ if (url == null || BitmapAjaxCallback.isMemoryCached(url)) { return false; } Gallery gallery=(Gallery)parent; Integer selected=(Integer)gallery.getTag(Constants.TAG_NUM); if (selected == null) { selected=0; gallery.setTag(Constants.TAG_NUM,0); gallery.setCallbackDuringFling(false); Common common=new Common(); common.listen(gallery); } int first=gallery.getFirstVisiblePosition(); int last=gallery.getLastVisiblePosition(); int diff=last - first; int delta=(diff / 2) + 1; int from=selected.intValue() - delta; int to=selected.intValue() + delta; if (from < 0) { to-=from; from=0; } if (position >= from && position <= to) { convertView.setTag(Constants.TAG_NUM,Integer.valueOf(position)); return false; } convertView.setTag(Constants.TAG_NUM,null); return true; } @Override public void afterTextChanged(Editable s){ } @Override public void beforeTextChanged(CharSequence s,int start,int count,int after){ } @Override public void onTextChanged(CharSequence s,int start,int before,int count){ invoke(s,Integer.valueOf(start),Integer.valueOf(before),Integer.valueOf(count)); } public void listen(Gallery gallery){ this.galleryListener=gallery.getOnItemSelectedListener(); this.galleryListen=true; gallery.setOnItemSelectedListener(this); } @Override public void onItemSelected(AdapterView<?> parent,View v,int pos,long id){ invoke(parent,v,Integer.valueOf(pos),Long.valueOf(id)); if (this.galleryListener != null) { this.galleryListener.onItemSelected(parent,v,pos,id); } if (this.galleryListen) { Integer selected=(Integer)parent.getTag(Constants.TAG_NUM); if (selected.intValue() != pos) { adapter=parent.getAdapter(); parent.setTag(Constants.TAG_NUM,Integer.valueOf(pos)); int count=parent.getChildCount(); int first=parent.getFirstVisiblePosition(); for (int i=0; i < count; i++) {   View convertView=parent.getChildAt(i);   int drawPos=first + i;   Integer lastDrawn=(Integer)convertView.getTag(Constants.TAG_NUM);   if (lastDrawn == null || lastDrawn.intValue() != drawPos) {     adapter.getView(drawPos,convertView,parent);   } } } } } @Override public void onNothingSelected(AdapterView<?> arg0){ if (this.galleryListener != null) { this.galleryListener.onNothingSelected(arg0); } } public static void showProgress(Object p,String url,boolean show){ if (p != null) { if (p instanceof View) { View pv=(View)p; ProgressBar pbar=null; if (p instanceof ProgressBar) {   pbar=(ProgressBar)p; } if (show) {   pv.setTag(Constants.TAG_URL,url);   pv.setVisibility(0);   if (pbar != null) {     pbar.setProgress(0);     pbar.setMax(100);     return;   }   return; } Object tag=pv.getTag(Constants.TAG_URL); if (tag == null || tag.equals(url)) {   pv.setTag(Constants.TAG_URL,null);   if (pbar == null || pbar.isIndeterminate()) {     pv.setVisibility(8);     return;   }   return; } return; } if (p instanceof Dialog) { Dialog pd=(Dialog)p; AQuery aq=new AQuery(pd.getContext()); if (show) {   aq.show(pd);   return; }  else {   aq.dismiss(pd);   return; } } if (p instanceof Activity) { Activity act=(Activity)p; act.setProgressBarIndeterminateVisibility(show); act.setProgressBarVisibility(show); if (show) {   act.setProgress(0); } } } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\Constants.code","public interface Constants {   public static final String ACTIVE_ACCOUNT=""aq.account"";   public static final float ANCHOR_DYNAMIC=Float.MAX_VALUE;   public static final String AUTH_ANALYTICS=""g.analytics"";   public static final String AUTH_BLOGGER=""g.blogger"";   public static final String AUTH_CALENDAR=""g.cl"";   public static final String AUTH_CONTACTS=""g.cp"";   public static final String AUTH_DOC_LIST=""g.writely"";   public static final String AUTH_MAPS=""g.local"";   public static final String AUTH_PICASA=""g.lh2"";   public static final String AUTH_READER=""g.reader"";   public static final String AUTH_SPREADSHEETS=""g.wise"";   public static final String AUTH_YOUTUBE=""g.youtube"";   public static final int CACHE_DEFAULT=0;   public static final int CACHE_PERSISTENT=1;   public static final int FADE_IN=-1;   public static final int FADE_IN_FILE=-3;   public static final int FADE_IN_NETWORK=-2;   public static final int FLAG_ACTIVITY_NO_ANIMATION=65536;   public static final int FLAG_HARDWARE_ACCELERATED=16777216;   public static final int GONE=-2;   public static final int INVISIBLE=-1;   public static final int LAYER_TYPE_HARDWARE=2;   public static final int LAYER_TYPE_SOFTWARE=1;   public static final int METHOD_DELETE=2;   public static final int METHOD_DETECT=4;   public static final int METHOD_GET=0;   public static final int METHOD_POST=1;   public static final int METHOD_PUT=3;   public static final int OVER_SCROLL_ALWAYS=0;   public static final int OVER_SCROLL_IF_CONTENT_SCROLLS=1;   public static final int OVER_SCROLL_NEVER=2;   public static final String POST_ENTITY=""%entity"";   public static final int PRESET=-3;   public static final float RATIO_PRESERVE=Float.MAX_VALUE;   public static final int SDK_INT=Build.VERSION.SDK_INT;   public static final int TAG_LAYOUT=1090453507;   public static final int TAG_NUM=1090453508;   public static final int TAG_SCROLL_LISTENER=1090453506;   public static final int TAG_URL=1090453505;   public static final String VERSION=""0.25.10""; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\PredefinedBAOS.code","public class PredefinedBAOS extends ByteArrayOutputStream {   public PredefinedBAOS(  int size){     super(size);   }   @Override public byte[] toByteArray(){     return this.count == this.buf.length ? this.buf : super.toByteArray();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\Progress.code","public class Progress implements Runnable {   private Activity act;   private int bytes;   private int current;   private ProgressBar pb;   private ProgressDialog pd;   private boolean unknown;   private String url;   private View view;   public Progress(  Object p){     if (p instanceof ProgressBar) {       this.pb=(ProgressBar)p;       return;     }     if (p instanceof ProgressDialog) {       this.pd=(ProgressDialog)p;     }  else     if (p instanceof Activity) {       this.act=(Activity)p;     }  else     if (p instanceof View) {       this.view=(View)p;     }   }   public void reset(){     if (this.pb != null) {       this.pb.setProgress(0);       this.pb.setMax(10000);     }     if (this.pd != null) {       this.pd.setProgress(0);       this.pd.setMax(10000);     }     if (this.act != null) {       this.act.setProgress(0);     }     this.unknown=false;     this.current=0;     this.bytes=10000;   }   public void setBytes(  int bytes){     if (bytes <= 0) {       this.unknown=true;       bytes=10000;     }     this.bytes=bytes;     if (this.pb != null) {       this.pb.setProgress(0);       this.pb.setMax(bytes);     }     if (this.pd != null) {       this.pd.setProgress(0);       this.pd.setMax(bytes);     }   }   public void increment(  int delta){     int p;     if (this.pb != null) {       this.pb.incrementProgressBy(this.unknown ? 1 : delta);     }     if (this.pd != null) {       this.pd.incrementProgressBy(this.unknown ? 1 : delta);     }     if (this.act != null) {       if (this.unknown) {         p=this.current;         this.current=p + 1;       }  else {         this.current+=delta;         p=(this.current * 10000) / this.bytes;       }       if (p > 9999) {         p=9999;       }       this.act.setProgress(p);     }   }   public void done(){     if (this.pb != null) {       this.pb.setProgress(this.pb.getMax());     }     if (this.pd != null) {       this.pd.setProgress(this.pd.getMax());     }     if (this.act != null) {       this.act.setProgress(9999);     }   }   @Override public void run(){     dismiss(this.url);   }   public void show(  String url){     reset();     if (this.pd != null) {       AQuery aq=new AQuery(this.pd.getContext());       aq.show(this.pd);     }     if (this.act != null) {       this.act.setProgressBarIndeterminateVisibility(true);       this.act.setProgressBarVisibility(true);     }     if (this.pb != null) {       this.pb.setTag(Constants.TAG_URL,url);       this.pb.setVisibility(0);     }     if (this.view != null) {       this.view.setTag(Constants.TAG_URL,url);       this.view.setVisibility(0);     }   }   public void hide(  String url){     if (AQUtility.isUIThread()) {       dismiss(url);     }  else {       this.url=url;       AQUtility.post(this);     }   }   private void dismiss(  String url){     if (this.pd != null) {       AQuery aq=new AQuery(this.pd.getContext());       aq.dismiss(this.pd);     }     if (this.act != null) {       this.act.setProgressBarIndeterminateVisibility(false);       this.act.setProgressBarVisibility(false);     }     if (this.pb != null) {       this.pb.setTag(Constants.TAG_URL,url);       this.pb.setVisibility(0);     }     View pv=this.pb;     if (pv == null) {       pv=this.view;     }     if (pv != null) {       Object tag=pv.getTag(Constants.TAG_URL);       if (tag == null || tag.equals(url)) {         pv.setTag(Constants.TAG_URL,null);         if (this.pb != null && this.pb.isIndeterminate()) {           pv.setVisibility(8);         }       }     }   }   private void showProgress(  Object p,  String url,  boolean show){     if (p != null) {       if (p instanceof View) {         View pv=(View)p;         ProgressBar pbar=null;         if (p instanceof ProgressBar) {           pbar=(ProgressBar)p;         }         if (show) {           pv.setTag(Constants.TAG_URL,url);           pv.setVisibility(0);           if (pbar != null) {             pbar.setProgress(0);             pbar.setMax(100);             return;           }           return;         }         Object tag=pv.getTag(Constants.TAG_URL);         if (tag == null || tag.equals(url)) {           pv.setTag(Constants.TAG_URL,null);           if (pbar != null && pbar.isIndeterminate()) {             pv.setVisibility(8);             return;           }           return;         }         return;       }       if (p instanceof Dialog) {         Dialog pd=(Dialog)p;         AQuery aq=new AQuery(pd.getContext());         if (show) {           aq.show(pd);           return;         }  else {           aq.dismiss(pd);           return;         }       }       if (p instanceof Activity) {         Activity act=(Activity)p;         act.setProgressBarIndeterminateVisibility(show);         act.setProgressBarVisibility(show);         if (show) {           act.setProgress(0);         }       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\RatioDrawable.code","public class RatioDrawable extends BitmapDrawable {   private boolean adjusted;   private float anchor;   private Matrix m;   private float ratio;   private WeakReference<ImageView> ref;   private int w;   public RatioDrawable(  Resources res,  Bitmap bm,  ImageView iv,  float ratio,  float anchor){     super(res,bm);     this.ref=new WeakReference<>(iv);     this.ratio=ratio;     this.anchor=anchor;     iv.setScaleType(ImageView.ScaleType.MATRIX);     Matrix m=new Matrix();     iv.setImageMatrix(m);     adjust(iv,bm,false);   }   private int getWidth(  ImageView iv){     ViewGroup.LayoutParams lp=iv.getLayoutParams();     int width=lp != null ? lp.width : 0;     if (width <= 0) {       width=iv.getWidth();     }     if (width > 0) {       return (width - iv.getPaddingLeft()) - iv.getPaddingRight();     }     return width;   }   @Override public void draw(  Canvas canvas){     ImageView iv=null;     if (this.ref != null) {       ImageView iv2=this.ref.get();       iv=iv2;     }     if (this.ratio == 0.0f || iv == null) {       super.draw(canvas);     }  else {       Bitmap bm=getBitmap();       draw(canvas,iv,bm);     }   }   private void draw(  Canvas canvas,  ImageView iv,  Bitmap bm){     Matrix m=getMatrix(iv,bm);     if (m != null) {       int vpad=iv.getPaddingTop() + iv.getPaddingBottom();       int hpad=iv.getPaddingLeft() + iv.getPaddingRight();       if (vpad > 0 || hpad > 0) {         canvas.clipRect(0,0,iv.getWidth() - hpad,iv.getHeight() - vpad);       }       canvas.drawBitmap(bm,m,getPaint());     }     if (!this.adjusted) {       adjust(iv,bm,true);     }   }   private void adjust(  ImageView iv,  Bitmap bm,  boolean done){     int vw=getWidth(iv);     if (vw > 0) {       int dw=bm.getWidth();       int dh=bm.getHeight();       int th=targetHeight(dw,dh,vw) + iv.getPaddingTop() + iv.getPaddingBottom();       ViewGroup.LayoutParams lp=iv.getLayoutParams();       if (lp != null) {         int vh=lp.height;         if (th != vh) {           lp.height=th;           iv.setLayoutParams(lp);         }         if (done) {           this.adjusted=true;         }       }     }   }   private int targetHeight(  int dw,  int dh,  int vw){     float r=this.ratio;     if (this.ratio == Float.MAX_VALUE) {       r=dh / dw;     }     return (int)(vw * r);   }   private Matrix getMatrix(  ImageView iv,  Bitmap bm){     float scale;     int dw=bm.getWidth();     if (this.m != null && dw == this.w) {       return this.m;     }     int dh=bm.getHeight();     int vw=getWidth(iv);     int vh=targetHeight(dw,dh,vw);     if (dw <= 0 || dh <= 0 || vw <= 0 || vh <= 0) {       return null;     }     if (this.m == null || dw != this.w) {       float dx=0.0f;       float dy=0.0f;       this.m=new Matrix();       if (dw * vh >= vw * dh) {         scale=vh / dh;         dx=(vw - (dw * scale)) * 0.5f;       }  else {         scale=vw / dw;         float sy=getYOffset(dw,dh);         dy=(vh - (dh * scale)) * sy;       }       this.m.setScale(scale,scale);       this.m.postTranslate(dx,dy);       this.w=dw;     }     return this.m;   }   private float getYOffset(  int vwidth,  int vheight){     if (this.anchor != Float.MAX_VALUE) {       return (1.0f - this.anchor) / 2.0f;     }     float ratio=vheight / vwidth;     return 0.25f + ((1.5f - Math.max(1.0f,Math.min(1.5f,ratio))) / 2.0f);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\WebImage.code","public class WebImage extends WebViewClient {   private static final String DOUBLE_TAP_TOAST_COUNT=""double_tap_toast_count"";   private static final String PREF_FILE=""WebViewSettings"";   private static String template;   private int color;   private boolean control;   private Object progress;   private String url;   private WebView wv;   private boolean zoom;   private static String getSource(  Context context){     if (template == null) {       try {         InputStream is=context.getClassLoader().getResourceAsStream(""com/androidquery/util/web_image.html"");         template=new String(AQUtility.toBytes(is));       }  catch (      Exception e) {         AQUtility.debug((Throwable)e);       }     }     return template;   }   private static void fixWebviewTip(  Context context){     SharedPreferences prefs=context.getSharedPreferences(PREF_FILE,0);     if (prefs.getInt(DOUBLE_TAP_TOAST_COUNT,1) > 0) {       prefs.edit().putInt(DOUBLE_TAP_TOAST_COUNT,0).commit();     }   }   public WebImage(  WebView wv,  String url,  Object progress,  boolean zoom,  boolean control,  int color){     this.wv=wv;     this.url=url;     this.progress=progress;     this.zoom=zoom;     this.control=control;     this.color=color;   }   public void load(){     if (!this.url.equals(this.wv.getTag(Constants.TAG_URL))) {       this.wv.setTag(Constants.TAG_URL,this.url);       if (Build.VERSION.SDK_INT <= 10) {         this.wv.setDrawingCacheEnabled(true);       }       fixWebviewTip(this.wv.getContext());       WebSettings ws=this.wv.getSettings();       ws.setSupportZoom(this.zoom);       ws.setBuiltInZoomControls(this.zoom);       if (!this.control) {         disableZoomControl(this.wv);       }       ws.setJavaScriptEnabled(true);       this.wv.setBackgroundColor(this.color);       if (this.progress != null) {         Common.showProgress(this.progress,this.url,true);       }       if (this.wv.getWidth() > 0) {         setup();       }  else {         delaySetup();       }     }   }   private void delaySetup(){     this.wv.setPictureListener(new WebView.PictureListener(){       @Override public void onNewPicture(      WebView view,      Picture picture){         WebImage.this.wv.setPictureListener(null);         WebImage.this.setup();       }     } );     this.wv.loadData(""<html></html>"",""text/html"",""utf-8"");     this.wv.setBackgroundColor(this.color);   }   public void setup(){     String source=getSource(this.wv.getContext());     String html=source.replace(""@src"",this.url).replace(""@color"",Integer.toHexString(this.color));     this.wv.setWebViewClient(this);     this.wv.loadDataWithBaseURL(null,html,""text/html"",""utf-8"",null);     this.wv.setBackgroundColor(this.color);   }   private void done(  WebView view){     if (this.progress != null) {       view.setVisibility(0);       Common.showProgress(this.progress,this.url,false);     }     view.setWebViewClient(null);   }   @Override public void onPageFinished(  WebView view,  String url){     done(view);   }   @Override public void onReceivedError(  WebView view,  int errorCode,  String description,  String failingUrl){     done(view);   }   @Override public void onScaleChanged(  WebView view,  float oldScale,  float newScale){   }   private static void disableZoomControl(  WebView wv){     if (Build.VERSION.SDK_INT >= 11) {       WebSettings ws=wv.getSettings();       AQUtility.invokeHandler(ws,""setDisplayZoomControls"",false,false,new Class[]{Boolean.TYPE},false);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.androidquery.util\XmlDom.code","public class XmlDom {   private Element root;   public Element getElement(){     return this.root;   }   public XmlDom(  Element element){     this.root=element;   }   public XmlDom(  String str) throws SAXException {     this(str.getBytes());   }   public XmlDom(  byte[] data) throws SAXException {     this(new ByteArrayInputStream(data));   }   public XmlDom(  InputStream is) throws SAXException {     DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();     try {       DocumentBuilder builder=factory.newDocumentBuilder();       Document doc=builder.parse(is);       this.root=doc.getDocumentElement();     }  catch (    IOException e) {       throw new SAXException(e);     } catch (    ParserConfigurationException e2) {     }   }   public XmlDom tag(  String tag){     NodeList nl=this.root.getElementsByTagName(tag);     if (nl == null || nl.getLength() <= 0) {       return null;     }     XmlDom result=new XmlDom((Element)nl.item(0));     return result;   }   public XmlDom tag(  String tag,  String attr,  String value){     List<XmlDom> tags=tags(tag,attr,value);     if (tags.size() == 0) {       return null;     }     return tags.get(0);   }   public List<XmlDom> tags(  String tag){     return tags(tag,null,null);   }   public XmlDom child(  String tag){     return child(tag,null,null);   }   public XmlDom child(  String tag,  String attr,  String value){     List<XmlDom> c=children(tag,attr,value);     if (c.size() == 0) {       return null;     }     return c.get(0);   }   public List<XmlDom> children(  String tag){     return children(tag,null,null);   }   public List<XmlDom> children(  String tag,  String attr,  String value){     return convert(this.root.getChildNodes(),tag,attr,value);   }   public List<XmlDom> tags(  String tag,  String attr,  String value){     NodeList nl=this.root.getElementsByTagName(tag);     return convert(nl,(String)null,attr,value);   }   private static List<XmlDom> convert(  NodeList nl,  String tag,  String attr,  String value){     List<XmlDom> result=new ArrayList<>();     for (int i=0; i < nl.getLength(); i++) {       XmlDom xml=convert(nl.item(i),tag,attr,value);       if (xml != null) {         result.add(xml);       }     }     return result;   }   private static XmlDom convert(  Node node,  String tag,  String attr,  String value){     if (node.getNodeType() != 1) {       return null;     }     Element e=(Element)node;     if (tag != null && !tag.equals(e.getTagName())) {       return null;     }     if (attr != null && !e.hasAttribute(attr)) {       return null;     }     if (value != null && !value.equals(e.getAttribute(attr))) {       return null;     }     XmlDom result=new XmlDom(e);     return result;   }   public String text(  String tag){     XmlDom dom=child(tag);     if (dom == null) {       return null;     }     return dom.text();   }   public String attr(  String name){     String result=this.root.getAttribute(name);     return result;   }   public String toString(){     return toString(0);   }   public String toString(  int intentSpaces){     return serialize(this.root,intentSpaces);   }   private String serialize(  Element e,  int intent){     try {       XmlSerializer s=Xml.newSerializer();       StringWriter sw=new StringWriter();       s.setOutput(sw);       s.startDocument(""utf-8"",null);       String spaces=null;       if (intent > 0) {         char[] chars=new char[intent];         Arrays.fill(chars,' ');         spaces=new String(chars);       }       serialize(this.root,s,0,spaces);       s.endDocument();       return sw.toString();     }  catch (    Exception ex) {       ex.printStackTrace();       return null;     }   }   private void writeSpace(  XmlSerializer s,  int depth,  String spaces) throws Exception {     if (spaces != null) {       s.text(""\n"");       for (int i=0; i < depth; i++) {         s.text(spaces);       }     }   }   public String text(){     NodeList list=this.root.getChildNodes();     if (list.getLength() == 1) {       return list.item(0).getNodeValue();     }     StringBuilder sb=new StringBuilder();     for (int i=0; i < list.getLength(); i++) {       sb.append(text(list.item(i)));     }     return sb.toString();   }   private String text(  Node n){     String text=null; switch (n.getNodeType()) { case 3:       text=n.getNodeValue();     if (text != null) {       text=text.trim();       break;     }   break; case 4: text=n.getNodeValue(); break; } return text == null ? """" : text; } private void serialize(Element e,XmlSerializer s,int depth,String spaces) throws Exception { String name=e.getTagName(); writeSpace(s,depth,spaces); s.startTag("""",name); if (e.hasAttributes()) { NamedNodeMap nm=e.getAttributes(); for (int i=0; i < nm.getLength(); i++) { Attr attr=(Attr)nm.item(i); s.attribute("""",attr.getName(),attr.getValue()); } } if (e.hasChildNodes()) { NodeList nl=e.getChildNodes(); int elements=0; for (int i2=0; i2 < nl.getLength(); i2++) { Node n=nl.item(i2); short type=n.getNodeType(); switch (type) { case 1: serialize((Element)n,s,depth + 1,spaces); elements++; break; case 3: s.text(text(n)); break; case 4: s.cdsect(text(n)); break; } } if (elements > 0) { writeSpace(s,depth,spaces); } } s.endTag("""",name); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\AlbumList.code","public class AlbumList extends Activity {   String ArtId;   private ProgressBar bottom_prog;   int cpage;   private ListView li;   EfficientAdapter mAdapter;   private boolean mLockListView;   String testStr;   ArrayList<AlbumInfo> songLi=new ArrayList<>();   ArrayList<AlbumInfo> mRowList=new ArrayList<>();   int pagesize=25;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.albumlist);     this.li=(ListView)findViewById(R.id.listsong);     this.li.setFadingEdgeLength(0);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     Intent i=getIntent();     this.ArtId=i.getStringExtra(""artid"");     if (""248444"".equals(this.ArtId)) {       this.ArtId=""253404"";     }     this.mLockListView=true;     this.cpage=1;     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(AlbumList.this,(Class<?>)SongList.class);         myintent.putExtra(""name"",AlbumList.this.mRowList.get(position).name);         myintent.putExtra(""albumid"",AlbumList.this.mRowList.get(position).albumid);         myintent.putExtra(""artid"",AlbumList.this.ArtId);         AlbumList.this.startActivity(myintent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !AlbumList.this.mLockListView) {           AlbumList.this.bottom_prog.setVisibility(0);           AlbumList.this.mLockListView=true;           AlbumList.this.makeAdd();           AlbumList.this.cpage++;         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );   }   private void makea(){     AQuery aq=new AQuery((Activity)this);     this.bottom_prog.setVisibility(0);     String url=""http://music.daum.net/artist/album/list?artist_id="" + this.ArtId + ""&page_no=""+ this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         AlbumList.this.cpage=2;         new ArrayList();         ArrayList<AlbumInfo> paramArrayList=AlbumList.this.mdaumAlbum(html);         AlbumList.this.mRowList.addAll(paramArrayList);         AlbumList.this.mAdapter=new EfficientAdapter(AlbumList.this,AlbumList.this.mRowList);         AlbumList.this.li.setAdapter((ListAdapter)AlbumList.this.mAdapter);         if (paramArrayList.size() < AlbumList.this.pagesize) {           AlbumList.this.bottom_prog.setVisibility(8);         }  else {           AlbumList.this.bottom_prog.setVisibility(8);           AlbumList.this.mLockListView=false;         }       }     } );   }   public void makeAdd(){     AQuery aq=new AQuery((Activity)this);     String url=""http://music.daum.net/artist/album/list?artist_id="" + this.ArtId + ""&page_no=""+ this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         new ArrayList();         ArrayList<AlbumInfo> paramArrayList=AlbumList.this.mdaumAlbum(html);         AlbumList.this.mRowList.addAll(paramArrayList);         if (paramArrayList.size() < AlbumList.this.pagesize) {           AlbumList.this.bottom_prog.setVisibility(8);         }  else {           AlbumList.this.bottom_prog.setVisibility(8);           AlbumList.this.mLockListView=false;         }         AlbumList.this.mAdapter.notifyDataSetChanged();       }     } );   }   public ArrayList<AlbumInfo> mdaumAlbum(  String src){     ArrayList<AlbumInfo> albumlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.UL);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""list_album"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.LI);         for (        Element album1 : elementList1) {           AlbumInfo item=new AlbumInfo();           try {             item.thum=album1.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");             String linkTemp=album1.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");             item.link=linkTemp;             item.albumid=linkTemp.split(""="")[1];             item.name=album1.getAllElements(HTMLElementName.A).get(2).getAttributeValue(HTMLElementName.TITLE);             item.singer=album1.getAllElements(HTMLElementName.P).get(0).getTextExtractor().toString().replace(""ë‹¤ë¥¸ ê°€ìˆ˜ ë³´ê¸°"","""");             item.date=album1.getAllElements(HTMLElementName.EM).get(0).getTextExtractor().toString();             albumlist.add(item);           }  catch (          Exception e) {           }         }       }     }     return albumlist;   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<AlbumInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<AlbumInfo> member){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=member;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_album,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.text3=(TextView)convertView.findViewById(R.id.text3);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).name);       holder.text2.setText(this.data.get(position).singer);       holder.text3.setText(this.data.get(position).date);       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       return convertView;     } static class ViewHolder {       ImageView icon;       TextView text;       TextView text2;       TextView text3;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\anim.code","public static final class anim {   public static final int fade=0x7f040000;   public static final int grow_from_bottom=0x7f040001;   public static final int grow_from_bottomleft_to_topright=0x7f040002;   public static final int grow_from_bottomright_to_topleft=0x7f040003;   public static final int grow_from_top=0x7f040004;   public static final int grow_from_topleft_to_bottomright=0x7f040005;   public static final int grow_from_topright_to_bottomleft=0x7f040006;   public static final int hold=0x7f040007;   public static final int rotate_loading=0x7f040008;   public static final int shrink_from_bottom=0x7f040009;   public static final int shrink_from_bottomleft_to_topright=0x7f04000a;   public static final int shrink_from_bottomright_to_topleft=0x7f04000b;   public static final int shrink_from_top=0x7f04000c;   public static final int shrink_from_topleft_to_bottomright=0x7f04000d;   public static final int shrink_from_topright_to_bottomleft=0x7f04000e;   public static final int slide_left_in=0x7f04000f;   public static final int slide_left_out=0x7f040010;   public static final int slide_right_in=0x7f040011;   public static final int slide_right_out=0x7f040012;   public static final int slide_top_in=0x7f040013;   public static final int slide_top_out=0x7f040014; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\array.code","public static final class array {   public static final int gamepan_array=0x7f0b0000;   public static final int image_size=0x7f0b0001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\artimgList.code","public class artimgList extends starBase {   public static int sHeight;   public static int sWidth;   naverSearch GParser;   ProgressBar bottomProgress;   private ImageButton btnHome;   private ImageButton btnNext1;   private ImageButton btnPre1;   Button btnnext;   Button btnprev;   Button btnre;   private ProgressDialog dialog;   FrameLayout frmall;   private GridView gw;   String keyword;   private Context mContext;   private boolean mLockListView;   private SharedPreferences mPrefs;   ProgressHUD mProgressHUD;   private TextView mtitle;   Intent myintent;   LinearLayout.LayoutParams paramsFillFill;   LinearLayout.LayoutParams paramsFillWrap;   LinearLayout.LayoutParams paramsWrapWrap;   LinearLayout rowWrapper;   CustomScrollView scroll;   naverSearch.OnSearchResult searchResult;   ProgressBar topProgress;   TextView txtpage;   LinearLayout wrapper;   LinearLayout wrapper2;   LinearLayout wrapper3;   final ArrayList<String> sdata1=new ArrayList<>();   final ArrayList<String> sdata2=new ArrayList<>();   private int cpage=0;   private int spage=12;   private int search_opt=0;   final ArrayList<GoogleImage> data=new ArrayList<>();   int c_pos=1;   int i_total_left_height=0;   int i_total_right_height=0;   int i_image_height=0;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     View convertView=LayoutInflater.from(getApplicationContext()).inflate(R.layout.artimglist,(ViewGroup)null);     this.basefrm.addView(convertView);     if (pCheck()) {       this.keyword=this.artsname;     }  else {       this.keyword=String.valueOf(this.parentsname) + "" "" + this.artsname;     }     this.cpage=0;     this.search_opt=0;     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     this.scroll=(CustomScrollView)findViewById(R.id.scroll_container);     this.wrapper=(LinearLayout)findViewById(R.id.container);     this.wrapper2=(LinearLayout)findViewById(R.id.container2);     this.wrapper3=(LinearLayout)findViewById(R.id.container3);     this.frmall=(FrameLayout)findViewById(R.id.frmall);     makeImageList();   }   private void makeImageList(){     AQuery aq=new AQuery((Activity)this);     this.GParser=new naverSearch(aq);     this.searchResult=new naverSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<GoogleImage> paramArrayList){         artimgList.this.mProgressHUD.dismiss();         artimgList.this.mLockListView=true;         int j=(artimgList.sWidth / 2) - 4;         int i=artimgList.sHeight / 5;         Iterator localIterator=paramArrayList.iterator();         artimgList.this.scroll.setStatus(true);         AjaxCallback.cancel();         while (true) {           final int locali=artimgList.this.c_pos - 1;           if (!localIterator.hasNext()) {             return;           }           GoogleImage localImageData=localIterator.next();           artimgList.this.sdata1.add(localImageData.link);           artimgList.this.sdata2.add(localImageData.thumnail);           final BorderImageView localBorderImageView=new BorderImageView(artimgList.this.getApplicationContext());           LinearLayout.LayoutParams localLayoutParams2=new LinearLayout.LayoutParams(j,-1);           localLayoutParams2.setMargins(2,2,1,1);           localBorderImageView.setLayoutParams(localLayoutParams2);           localBorderImageView.setScaleType(ImageView.ScaleType.FIT_XY);           AQuery aq1=new AQuery(artimgList.this.getApplicationContext());           ((AQuery)aq1.id(localBorderImageView)).image(localImageData.thumnail.replace(""r180"",""252x448""),true,true,0,0,new BitmapAjaxCallback(){             @Override public void callback(            String url,            ImageView iv,            Bitmap bm,            AjaxStatus status){               artimgList.this.i_image_height=(bm.getHeight() * ((artimgList.sWidth / 2) - 8)) / bm.getWidth();               LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams((artimgList.sWidth / 2) - 8,artimgList.this.i_image_height);               lp.setMargins(4,4,8,4);               iv.setLayoutParams(lp);               iv.setImageBitmap(bm);               if (artimgList.this.i_total_left_height <= artimgList.this.i_total_right_height) {                 artimgList.this.i_total_left_height+=artimgList.this.i_image_height;                 artimgList.this.wrapper.addView(localBorderImageView);               }  else {                 artimgList.this.i_total_right_height+=artimgList.this.i_image_height;                 artimgList.this.wrapper2.addView(localBorderImageView);               }             }           } );           localBorderImageView.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View v){               Animation anim=new ScaleAnimation(1.0f,1.5f,1.0f,1.5f,1,0.5f,1,0.5f);               anim.setDuration(100L);               v.setAnimation(anim);               v.startAnimation(anim);               artimgList.this.myintent=new Intent(artimgList.this.getApplicationContext(),(Class<?>)maguimageView.class);               artimgList.this.myintent.putStringArrayListExtra(""datalist"",artimgList.this.sdata1);               artimgList.this.myintent.putStringArrayListExtra(""datalist2"",artimgList.this.sdata2);               artimgList.this.myintent.putExtra(""cpos"",locali);               artimgList.this.myintent.putExtra(""name"",artimgList.this.artname);               artimgList.this.myintent.putExtra(""artid"",artimgList.this.artid);               artimgList.this.myintent.putExtra(""parentname"",artimgList.this.parentname);               artimgList.this.myintent.putExtra(""parentid"",artimgList.this.parentid);               artimgList.this.startActivity(artimgList.this.myintent);             }           } );           artimgList.this.c_pos++;         }       }     } ;     this.mProgressHUD=ProgressHUD.show(this,""ë¡œë”©ì¤‘"",17,true,true,null);     this.mLockListView=false;     this.GParser.search(this.keyword,this.cpage,this.search_opt,this.searchResult);     this.cpage++;     this.scroll.setOnScrollListener(new CustomScrollView.OnScrollListener(){       @Override public void onScrollBottom(){         if (artimgList.this.cpage > 0 && artimgList.this.mLockListView) {           artimgList.this.mProgressHUD=ProgressHUD.show(artimgList.this,""ë¡œë”©ì¤‘"",17,true,true,null);           artimgList.this.mLockListView=false;           artimgList.this.GParser.search(artimgList.this.keyword,artimgList.this.cpage,artimgList.this.search_opt,artimgList.this.searchResult);           artimgList.this.cpage++;         }       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\artListSearch.code","!org.eclipse.jdt.core.dom.TypeDeclaration@26f0ffab"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\attr.code","public static final class attr {   public static final int allowcall=0x7f01001b;   public static final int appcode=0x7f010018;   public static final int bannerHeight=0x7f01001f;   public static final int centered=0x7f010004;   public static final int clipPadding=0x7f01000b;   public static final int dynamicReloadInterval=0x7f01001c;   public static final int effect=0x7f010019;   public static final int fillColor=0x7f010005;   public static final int footerColor=0x7f01000c;   public static final int footerIndicatorHeight=0x7f01000f;   public static final int footerIndicatorStyle=0x7f01000e;   public static final int footerIndicatorUnderlinePadding=0x7f010010;   public static final int footerLineHeight=0x7f01000d;   public static final int footerPadding=0x7f010011;   public static final int gps=0x7f01001a;   public static final int orientation=0x7f010006;   public static final int radius=0x7f010007;   public static final int reloadInterval=0x7f01001d;   public static final int selectedBold=0x7f010013;   public static final int selectedColor=0x7f010012;   public static final int snap=0x7f010008;   public static final int strokeColor=0x7f010009;   public static final int strokeWidth=0x7f01000a;   public static final int textColor=0x7f010014;   public static final int textSize=0x7f010015;   public static final int threadPriority=0x7f01001e;   public static final int titlePadding=0x7f010016;   public static final int topPadding=0x7f010017;   public static final int vpiCirclePageIndicatorStyle=0x7f010000;   public static final int vpiTabPageIndicatorStyle=0x7f010002;   public static final int vpiTabTextStyle=0x7f010003;   public static final int vpiTitlePageIndicatorStyle=0x7f010001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\baseFrag.code","public class baseFrag extends FragmentActivity {   static ViewPager mPager;   private AdlibManager _amanager;   idolListAdpter mAdapter;   PageIndicator mIndicator;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.basefrag);     this._amanager=new AdlibManager();     this._amanager.onCreate(this);     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         baseFrag.this.finish();       }     } );     String[] CONTENT={""ì†”ë¡œ"",""ë‚¨ì„±ê·¸ë£¹"",""ì—¬ì„±ê·¸ë£¹"",""ì†Œì†�ì‚¬ë³„"",""ë ˆì „ë“œ"",""ì¦�ê²¨ì°¾ê¸°""};     String[] VALUE={""3"",""1"",""2"",""4"",""5"",""6""};     mPager=(ViewPager)findViewById(R.id.viewpager);     this.mAdapter=new idolListAdpter(getSupportFragmentManager(),CONTENT,VALUE,getApplicationContext());     mPager.setAdapter(this.mAdapter);     this.mIndicator=(TitlePageIndicator)findViewById(R.id.indicator);     this.mIndicator.setViewPager(mPager);     Intent i=getIntent();     mPager.setCurrentItem(i.getIntExtra(HTMLElementName.MENU,0));   }   @Override public void onResume(){     this._amanager.onResume(this);     super.onResume();   }   @Override public void onPause(){     this._amanager.onPause();     super.onPause();   }   @Override public void onDestroy(){     this._amanager.onDestroy(this);     super.onDestroy();   }   public void setAdsContainer(  int rid){     this._amanager.setAdsContainer(rid);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\BoardList.code","public class BoardList {   String content;   String date;   String ip;   String nickname;   BoardList(){   } } public class BoardList {   String attatch;   String cm_cnt;   String content;   String date;   String hit;   String idx;   String ip;   String nickname;   BoardList(){   } } public class BoardList {   String cm_cnt;   String content;   String date;   String hit;   String idx;   String ip;   String nick;   BoardList(){   } } public class BoardList {   String cm_cnt;   String content;   String date;   String hit;   String idx;   String ip;   String nickname;   BoardList(){   } } public class BoardList {   String cm_cnt;   String content;   String date;   String hit;   String idx;   String ip;   String nick;   BoardList(){   } } public class BoardList {   String content;   String date;   String groupid;   String hit;   String idx;   String ip;   String nickname;   BoardList(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\bool.code","public static final class bool {   public static final int default_circle_indicator_centered=0x7f070000;   public static final int default_circle_indicator_snap=0x7f070001;   public static final int default_title_indicator_selected_bold=0x7f070002; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\BuildConfig.code","public final class BuildConfig {   public static final boolean DEBUG=true; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\ChartGroup.code","public class ChartGroup extends AdlibActivity {   public static String ROOT_DIR=""/data/data/com.bluerabbit.kpopldols/databases/"";   ProgressBar bottom_prog;   public Cursor cursor;   public SQLiteDatabase db;   ListView li;   AQuery mAQuery;   EfficientAdapter2 mAdapter;   idolDBhelper mHelper;   private boolean mLockListView;   Intent myintent;   String name;   Date toDay;   public SimpleCursorAdapter Adapter=null;   public SimpleCursorAdapter AdapterStomach=null;   public SimpleCursorAdapter AdapterColon=null;   public SimpleCursorAdapter AdapterLiver=null;   public SimpleCursorAdapter AdapterBreast=null;   public SimpleCursorAdapter AdapterCervix=null;   ArrayList<GroupChart> mRowList=new ArrayList<>();   int page=1;   SimpleDateFormat date1form=new SimpleDateFormat(""yyyyMMdd"");   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.chart);     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         ChartGroup.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.li=(ListView)findViewById(R.id.listchart);     this.li.setFadingEdgeLength(0);     this.mLockListView=true;     this.mHelper=new idolDBhelper(this);     this.db=this.mHelper.getWritableDatabase();     this.toDay=new Date();     this.date1form.format(this.toDay);     Calendar calendar1=new GregorianCalendar();     calendar1.setTime(this.toDay);     calendar1.add(5,1);     this.date1form.format(calendar1.getTime());     int iYear=Calendar.getInstance().get(1);     int iMonth=Calendar.getInstance().get(2) + 1;     int iWeek=Calendar.getInstance().get(4);     TextView txtTitle=(TextView)findViewById(R.id.txtChartTitle);     txtTitle.setText(String.valueOf(Integer.toString(iYear)) + ""ë…„ "" + Integer.toString(iMonth)+ ""ì›” ""+ Integer.toString(iWeek)+ ""ì§¸ì£¼ KPOPì•„ì�´ë�Œ ì�¸ê¸°ìˆœìœ„TOP20"");     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         ChartGroup.this.myintent=new Intent(ChartGroup.this,(Class<?>)memberTab.class);         ChartGroup.this.myintent.putExtra(""sex"",""girl"");         ChartGroup.this.myintent.putExtra(""name"",ChartGroup.this.mRowList.get(position).name);         ChartGroup.this.myintent.putExtra(""search"",ChartGroup.this.mRowList.get(position).gname);         ChartGroup.this.myintent.putExtra(""index"",Integer.toString(position));         ChartGroup.this.myintent.putExtra(""artid"",ChartGroup.this.mRowList.get(position).artid);         ChartGroup.this.startActivity(ChartGroup.this.myintent);       }     } );   }   private void makea(){     Map<String,Object> params=new HashMap<>();     params.put(""type"",""gril"");     params.put(""page"",1);     params.put(""pagesize"",10);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/chartlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         Log.d(""test"",json.toString());         ChartGroup.this.mRowList=ChartGroup.this.setData2(json);         new ArrayList();         ArrayList<GroupChart> mTemp=ChartGroup.this.setData2(json);         ChartGroup.this.mRowList=mTemp;         ChartGroup.this.bottom_prog.setVisibility(8);         ChartGroup.this.mLockListView=false;         ChartGroup.this.mAdapter=new EfficientAdapter2(ChartGroup.this,ChartGroup.this.mRowList);         ChartGroup.this.li.setAdapter((ListAdapter)ChartGroup.this.mAdapter);       }     } );   }   public ArrayList<GroupChart> setData2(  JSONObject json){     ArrayList<GroupChart> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     Log.d(""test"",""test"");     for (int n=0; n < cnt; n++) {       GroupChart item=new GroupChart();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.name=localJSONObject2.optString(""name"");         item.rank=localJSONObject2.optString(""ROWNUM"");         item.updown=""0"";         item.updownrank=""0"";         item.thum=localJSONObject2.optString(""thum"");         item.content=localJSONObject2.optString(""content"");         item.artid=localJSONObject2.optString(""artid"");         item.gname=localJSONObject2.optString(""gname"");         item.name=localJSONObject2.optString(""name"");         item.rank=localJSONObject2.optString(""ROWNUM"");         item.updown=""0"";         item.updownrank=""0"";         String query=""select thum,name_kor,content_kor,groupid,name_eng from idolgroup where name_kor like '%"" + item.name.trim() + ""%' or name_eng like '%""+ item.name.trim()+ ""%'"";         this.cursor=this.db.rawQuery(query,null);         if (this.cursor != null) {           this.cursor.moveToFirst();           item.thum=this.cursor.getString(0);           item.name=this.cursor.getString(1);           item.content=this.cursor.getString(2);           item.artid=this.cursor.getString(3);           item.gname=this.cursor.getString(4);           String[] Tmpstr=item.content.split(""\n"");           item.content=Tmpstr[Tmpstr.length - 1];         }       }  catch (      Exception e) {         Toast.makeText(getApplicationContext(),e.toString(),1000).show();       }       this.cursor.close();       data1.add(item);     }     return data1;   } public static class EfficientAdapter2 extends BaseAdapter {     AQuery aq;     private ArrayList<GroupChart> data;     private Context mContext;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter2(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;       this.mIcon1=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_up);       this.mIcon2=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_down);     }     public EfficientAdapter2(    Context context,    ArrayList<GroupChart> data1){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=data1;       this.aq=new AQuery(context);       this.mContext=context;       this.mIcon1=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_up);       this.mIcon2=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_down);     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_chart,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.textM=(TextView)convertView.findViewById(R.id.text2);         holder.rank=(TextView)convertView.findViewById(R.id.rank);         holder.graph=(ImageView)convertView.findViewById(R.id.graph);         holder.updown=(TextView)convertView.findViewById(R.id.updown);         holder.imgChartTop=(ImageView)convertView.findViewById(R.id.imgChartTop);         holder.imgChartMedal=(ImageView)convertView.findViewById(R.id.imgChartMedal);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       if (Integer.parseInt(this.data.get(position).rank) % 2 == 1) {         convertView.setBackgroundColor(-13948117);       }  else {         convertView.setBackgroundColor(-13158599);       }       holder.rank.setText(this.data.get(position).rank);       holder.text.setText(this.data.get(position).name);       holder.textM.setText(this.data.get(position).content);       if (position < 3) {         holder.imgChartTop.setVisibility(0);         holder.imgChartMedal.setVisibility(0);         holder.text.setTextColor(Color.parseColor(""#FF88dc16""));         if (position == 0) {           holder.imgChartMedal.setImageResource(R.drawable.gold_1);         }         if (position == 1) {           holder.imgChartMedal.setImageResource(R.drawable.silver_1);         }         if (position == 2) {           holder.imgChartMedal.setImageResource(R.drawable.bronze_1);         }       }  else {         holder.imgChartTop.setVisibility(8);         holder.imgChartMedal.setVisibility(8);         holder.text.setTextColor(Color.parseColor(""#FFFFFF""));       }       if (this.data.get(position).updownrank.indexOf(""up"") != -1) {         holder.graph.setImageBitmap(this.mIcon1);         holder.updown.setText(this.data.get(position).updown);       }       if (this.data.get(position).updownrank.indexOf(""down"") != -1) {         holder.graph.setImageBitmap(this.mIcon2);         holder.updown.setText(this.data.get(position).updown);       }       if (this.data.get(position).updownrank.indexOf(""same"") != -1) {         holder.graph.setImageBitmap(null);         holder.updown.setText(""-"");       }       if (this.data.get(position).updownrank.indexOf(""new"") != -1) {         holder.graph.setImageBitmap(null);         holder.updown.setText(""new"");       }       return convertView;     } static class ViewHolder {       ImageView graph;       ImageView iconLeft;       ImageView imgChartMedal;       ImageView imgChartTop;       TextView rank;       TextView text;       TextView textM;       TextView updown;       ViewHolder(){       }     }   }   @Override public void onPause(){     super.onPause();   }   @Override public void onResume(){     super.onResume();   }   @Override protected void onStart(){     super.onStart();   }   @Override protected void onStop(){     super.onStop();   }   @Override public void onDestroy(){     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\color.code","public static final class color {   public static final int default_circle_indicator_fill_color=0x7f060008;   public static final int default_circle_indicator_stroke_color=0x7f060009;   public static final int default_title_indicator_footer_color=0x7f06000a;   public static final int default_title_indicator_selected_color=0x7f06000b;   public static final int default_title_indicator_text_color=0x7f06000c;   public static final int vpi__background_holo_dark=0x7f060000;   public static final int vpi__background_holo_light=0x7f060001;   public static final int vpi__bright_foreground_disabled_holo_dark=0x7f060004;   public static final int vpi__bright_foreground_disabled_holo_light=0x7f060005;   public static final int vpi__bright_foreground_holo_dark=0x7f060002;   public static final int vpi__bright_foreground_holo_light=0x7f060003;   public static final int vpi__bright_foreground_inverse_holo_dark=0x7f060006;   public static final int vpi__bright_foreground_inverse_holo_light=0x7f060007;   public static final int vpi__dark_theme=0x7f06000d;   public static final int vpi__light_theme=0x7f06000e; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\Comment.code","public class Comment extends Activity implements AbsListView.OnScrollListener {   private static ProgressDialog dialog;   private ProgressBar bottom_prog;   Button btnend;   Button btnmsg;   Button btnnotify;   Button btnsave;   private String btype;   EditText comment;   String idx;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   private String myNick;   String role;   String todevice;   String tonick;   private int c_page=1;   private int pagesize=10;   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.comment);     TextView content=(TextView)findViewById(R.id.txtContent);     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     content.setText(i.getStringExtra(""content""));     this.idx=i.getStringExtra(""idx"");     this.role=i.getStringExtra(""role"");     this.btype=i.getStringExtra(""type"");     this.tonick=i.getStringExtra(""nick"");     this.todevice=i.getStringExtra(""device"");     this.btnnotify=(Button)findViewById(R.id.btnnotify);     if (""1"".equals(this.role)) {       this.btnnotify.setVisibility(0);     }     this.btnnotify.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         new AlertDialog.Builder(Comment.this).setTitle("""").setMessage(""ì‹ ê³ ëŠ” í•˜ë£¨ 5íšŒë¡œ ì œí•œë�˜ì–´ ìžˆìŠµë‹ˆë‹¤.\ní—ˆìœ„ ì‹ ê³ ì‹œ ë¶ˆì�´ì�µì�„ ë°›ìœ¼ì‹¤ìˆ˜ë�„ ìžˆìŠµë‹ˆë‹¤.\nì •ë§�ë¡œ ì‹ ê³  í•˜ì‹œê² ìŠµë‹ˆê¹Œ?"").setPositiveButton(""ì˜ˆ"",new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog2,          int whichButton){             Comment.this.setNotify();           }         } ).setNegativeButton(""ì•„ë‹ˆì˜¤"",(DialogInterface.OnClickListener)null).show();       }     } );     this.btnmsg=(Button)findViewById(R.id.btnmsg);     if (""1"".equals(this.btype) || ""6"".equals(this.btype) || ""8"".equals(this.btype)|| HTMLElementName.I.equals(this.btype)|| HTMLElementName.Q.equals(this.btype)) {       this.btnmsg.setVisibility(0);     }  else {       this.btnmsg.setVisibility(8);     }     this.btnmsg.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Comment.this,(Class<?>)msgWrite.class);         intent.putExtra(""tonick"",Comment.this.tonick);         intent.putExtra(""todevice"",Comment.this.todevice);         Comment.this.startActivity(intent);       }     } );     this.btnsave=(Button)findViewById(R.id.btnsave);     this.btnend=(Button)findViewById(R.id.btnend);     this.comment=(EditText)findViewById(R.id.comment);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.li=(ListView)findViewById(R.id.listcomment);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Comment.this.finish();       }     } );     this.btnsave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!Comment.this.comment.getText().toString().trim().equals("""")) {           if (!Comment.this.myNickSet()) {             Intent i2=new Intent(Comment.this.getApplicationContext(),(Class<?>)nickset.class);             Comment.this.startActivity(i2);             return;           }  else {             Comment.this.setSave();             return;           }         }         Toast.makeText(Comment.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );     this.mLockListView=true;     makea();   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.bottom_prog.setVisibility(0);       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   public void setNotify(){     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     dialog=new ProgressDialog(this);     dialog.setProgressStyle(0);     dialog.setMessage(""ì €ìž¥ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     dialog.setCancelable(true);     dialog.show();     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""nick"",this.myNick);     params.put(""device"",deviceId);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/savenotify.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         Comment.dialog.dismiss();         if (""no"".equals(json.trim())) {           Toast.makeText(Comment.this.getApplicationContext(),""ì‹ ê³ ëŠ” í•˜ë£¨ 5íšŒë¡œ ì œí•œë�˜ì–´ ìžˆìŠµë‹ˆë‹¤.."",1000).show();         }  else         if (""no1"".equals(json.trim())) {           Toast.makeText(Comment.this.getApplicationContext(),""ì�´ë¯¸ ì‹ ê³ í•˜ì‹  ê²Œì‹œë¬¼ìž…ë‹ˆë‹¤.."",1000).show();         }  else {           Toast.makeText(Comment.this.getApplicationContext(),""ì‹ ê³ í•˜ì˜€ìŠµë‹ˆë‹¤."",1000).show();         }       }     } );   }   public void setSave(){     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     dialog=new ProgressDialog(this);     dialog.setProgressStyle(0);     dialog.setMessage(""ì €ìž¥ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     dialog.setCancelable(true);     dialog.show();     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""comment"",this.comment.getText());     params.put(""nick"",this.myNick);     params.put(""device"",deviceId);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardwrite_comment.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         Comment.dialog.dismiss();         Comment.this.comment.setText((CharSequence)null);         Comment.this.c_page=1;         Comment.this.mRowList.clear();         Comment.this.makea();       }     } );   }   private void makeaAdd(  int page){     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",""10"");     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist_comment.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         ArrayList<BoardList> mTemp=Comment.this.setData2(json);         Comment.this.mRowList.addAll(mTemp);         if (mTemp.size() < Comment.this.pagesize) {           Comment.this.bottom_prog.setVisibility(8);           Comment.this.mLockListView=true;         }  else {           Comment.this.bottom_prog.setVisibility(8);           Comment.this.mLockListView=false;         }         Comment.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""pagesize"",""10"");     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist_comment.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         ArrayList<BoardList> mTemp=Comment.this.setData2(json);         Comment.this.mRowList=mTemp;         if (mTemp.size() < Comment.this.pagesize) {           Comment.this.bottom_prog.setVisibility(8);           Comment.this.mLockListView=true;         }  else {           Comment.this.bottom_prog.setVisibility(8);           Comment.this.mLockListView=false;         }         Comment.this.c_page=2;         Comment.this.mAdapter=new EfficientAdapter(Comment.this,Comment.this.mRowList);         Comment.this.li.setAdapter((ListAdapter)Comment.this.mAdapter);       }     } );   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.ip=localJSONObject2.optString(""device"");         item.nickname=localJSONObject2.optString(""nickname"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class BoardList {     String content;     String date;     String ip;     String nickname;     BoardList(){     }   } public static class EfficientAdapter extends BaseAdapter {     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_comment,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.textC=(TextView)convertView.findViewById(R.id.textC);         holder.textNick=(TextView)convertView.findViewById(R.id.textNic);         holder.textC.setVisibility(8);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text1.setText(this.dataS.get(position).content);       holder.text2.setText(""["" + this.dataS.get(position).date.trim() + ""]"");       holder.textNick.setText(this.dataS.get(position).nickname);       return convertView;     } static class ViewHolder {       TextView text1;       TextView text2;       TextView textC;       TextView textNick;       LinearLayout textline;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\dimen.code","public static final class dimen {   public static final int default_circle_indicator_radius=0x7f090000;   public static final int default_circle_indicator_stroke_width=0x7f090001;   public static final int default_title_indicator_clip_padding=0x7f090002;   public static final int default_title_indicator_footer_indicator_height=0x7f090004;   public static final int default_title_indicator_footer_indicator_underline_padding=0x7f090005;   public static final int default_title_indicator_footer_line_height=0x7f090003;   public static final int default_title_indicator_footer_padding=0x7f090006;   public static final int default_title_indicator_text_size=0x7f090007;   public static final int default_title_indicator_title_padding=0x7f090008;   public static final int default_title_indicator_top_padding=0x7f090009; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\drawable.code","public static final class drawable {   public static final int arrow_down=0x7f020000;   public static final int arrow_up=0x7f020001;   public static final int bg_16vs=0x7f020002;   public static final int bg_32vs=0x7f020003;   public static final int bg_4vs=0x7f020004;   public static final int bg_8vs=0x7f020005;   public static final int bg_final_ranking_girl_list=0x7f020006;   public static final int bg_final_ranking_list=0x7f020007;   public static final int bg_finalvs=0x7f020008;   public static final int bg_idol_name=0x7f020009;   public static final int bg_idol_nor=0x7f02000a;   public static final int bg_idol_sel=0x7f02000b;   public static final int bg_no=0x7f02000c;   public static final int bg_rankingview=0x7f02000d;   public static final int bg_rankingview_girl=0x7f02000e;   public static final int bronze_1=0x7f02000f;   public static final int btn_00=0x7f020010;   public static final int btn_01=0x7f020011;   public static final int btn_01_press=0x7f020012;   public static final int btn_02=0x7f020013;   public static final int btn_02_press=0x7f020014;   public static final int btn_03=0x7f020015;   public static final int btn_03_press=0x7f020016;   public static final int btn_04=0x7f020017;   public static final int btn_04_press=0x7f020018;   public static final int btn_back=0x7f020019;   public static final int btn_bg_01=0x7f02001a;   public static final int btn_bg_01_press=0x7f02001b;   public static final int btn_bg_02=0x7f02001c;   public static final int btn_bg_02_press=0x7f02001d;   public static final int btn_bg_03=0x7f02001e;   public static final int btn_bg_03_press=0x7f02001f;   public static final int btn_bg_04=0x7f020020;   public static final int btn_bg_04_press=0x7f020021;   public static final int btn_bg_press=0x7f020022;   public static final int btn_close=0x7f020023;   public static final int btn_closed=0x7f020024;   public static final int btn_closed_ov=0x7f020025;   public static final int btn_com01=0x7f020026;   public static final int btn_com02=0x7f020027;   public static final int btn_com03=0x7f020028;   public static final int btn_com04=0x7f020029;   public static final int btn_com05=0x7f02002a;   public static final int btn_com06=0x7f02002b;   public static final int btn_com07=0x7f02002c;   public static final int btn_com08=0x7f02002d;   public static final int btn_cyworld=0x7f02002e;   public static final int btn_cyworld_ov=0x7f02002f;   public static final int btn_daum=0x7f020030;   public static final int btn_delete=0x7f020031;   public static final int btn_delete_ov=0x7f020032;   public static final int btn_end=0x7f020033;   public static final int btn_facebook=0x7f020034;   public static final int btn_facebook_ov=0x7f020035;   public static final int btn_fanadd=0x7f020036;   public static final int btn_fancafe=0x7f020037;   public static final int btn_fancafe_ov=0x7f020038;   public static final int btn_fandel=0x7f020039;   public static final int btn_fandom=0x7f02003a;   public static final int btn_fandom_del=0x7f02003b;   public static final int btn_fandom_del_ov=0x7f02003c;   public static final int btn_fandom_ov=0x7f02003d;   public static final int btn_fav=0x7f02003e;   public static final int btn_favor=0x7f02003f;   public static final int btn_favor_ov=0x7f020040;   public static final int btn_favorite=0x7f020041;   public static final int btn_game01=0x7f020042;   public static final int btn_game02=0x7f020043;   public static final int btn_game03=0x7f020044;   public static final int btn_green=0x7f020045;   public static final int btn_idol01=0x7f020046;   public static final int btn_idol02=0x7f020047;   public static final int btn_idol03=0x7f020048;   public static final int btn_idol04=0x7f020049;   public static final int btn_idol05=0x7f02004a;   public static final int btn_idol06=0x7f02004b;   public static final int btn_idol07=0x7f02004c;   public static final int btn_idream_closed=0x7f02004d;   public static final int btn_idream_mainrank=0x7f02004e;   public static final int btn_idream_mainstart=0x7f02004f;   public static final int btn_idream_replay=0x7f020050;   public static final int btn_idream_start=0x7f020051;   public static final int btn_imgview=0x7f020052;   public static final int btn_imgview01=0x7f020053;   public static final int btn_imgview01_ov=0x7f020054;   public static final int btn_imgview_ov=0x7f020055;   public static final int btn_isearch=0x7f020056;   public static final int btn_list=0x7f020057;   public static final int btn_list1=0x7f020058;   public static final int btn_list_ov=0x7f020059;   public static final int btn_m00=0x7f02005a;   public static final int btn_m01=0x7f02005b;   public static final int btn_m02=0x7f02005c;   public static final int btn_m03=0x7f02005d;   public static final int btn_m04=0x7f02005e;   public static final int btn_mask=0x7f02005f;   public static final int btn_menu_view=0x7f020060;   public static final int btn_menu_view_ov=0x7f020061;   public static final int btn_metoday=0x7f020062;   public static final int btn_metoday_ov=0x7f020063;   public static final int btn_movie=0x7f020064;   public static final int btn_movie_ov=0x7f020065;   public static final int btn_mypage01=0x7f020066;   public static final int btn_mypage02=0x7f020067;   public static final int btn_mypage03=0x7f020068;   public static final int btn_mypage04=0x7f020069;   public static final int btn_news01=0x7f02006a;   public static final int btn_news02=0x7f02006b;   public static final int btn_news03=0x7f02006c;   public static final int btn_pause=0x7f02006d;   public static final int btn_pause_ov=0x7f02006e;   public static final int btn_play=0x7f02006f;   public static final int btn_play_ov=0x7f020070;   public static final int btn_pop_back=0x7f020071;   public static final int btn_prev=0x7f020072;   public static final int btn_prev_ov=0x7f020073;   public static final int btn_rank01=0x7f020074;   public static final int btn_rank02=0x7f020075;   public static final int btn_rank03=0x7f020076;   public static final int btn_rival=0x7f020077;   public static final int btn_rival1=0x7f020078;   public static final int btn_rival2=0x7f020079;   public static final int btn_rival_write=0x7f02007a;   public static final int btn_set=0x7f02007b;   public static final int btn_setting=0x7f02007c;   public static final int btn_setting_ov=0x7f02007d;   public static final int btn_stop=0x7f02007e;   public static final int btn_stop_ov=0x7f02007f;   public static final int btn_subtab_left=0x7f020080;   public static final int btn_subtab_right=0x7f020081;   public static final int btn_sug=0x7f020082;   public static final int btn_suggest=0x7f020083;   public static final int btn_suggest_ov=0x7f020084;   public static final int btn_twitter=0x7f020085;   public static final int btn_twitter_ov=0x7f020086;   public static final int btn_write=0x7f020087;   public static final int btn_write_ov=0x7f020088;   public static final int btn_writerival=0x7f020089;   public static final int btn_writex=0x7f02008a;   public static final int btn_yozm=0x7f02008b;   public static final int btn_yozm_ov=0x7f02008c;   public static final int btn_zoom=0x7f02008d;   public static final int btn_zoom_ov=0x7f02008e;   public static final int cbox=0x7f02008f;   public static final int ccbox=0x7f020090;   public static final int ccboxr=0x7f020091;   public static final int chat_back=0x7f020092;   public static final int chat_back1=0x7f020093;   public static final int chat_back2=0x7f020094;   public static final int chat_box=0x7f020095;   public static final int chat_box11=0x7f020096;   public static final int chat_box_left=0x7f020097;   public static final int chat_box_right=0x7f020098;   public static final int chat_ico01=0x7f020099;   public static final int chat_ico02=0x7f02009a;   public static final int chat_line=0x7f02009b;   public static final int chat_top_back1=0x7f02009c;   public static final int chatting_back2=0x7f02009d;   public static final int circle_thumb=0x7f02009e;   public static final int comm_chatbox=0x7f02009f;   public static final int comm_chatboxr=0x7f0200a0;   public static final int commnet_bax=0x7f0200a1;   public static final int commu_banner=0x7f0200a2;   public static final int community_btn_write=0x7f0200a3;   public static final int community_btn_write_ov=0x7f0200a4;   public static final int community_chat_bottombg=0x7f0200a5;   public static final int community_chat_topbg=0x7f0200a6;   public static final int community_ico=0x7f0200a7;   public static final int community_ico2=0x7f0200a8;   public static final int community_ico3=0x7f0200a9;   public static final int community_ico3_ov=0x7f0200aa;   public static final int community_list_back=0x7f0200ab;   public static final int community_list_line=0x7f0200ac;   public static final int community_refresh=0x7f0200ad;   public static final int community_tab_left=0x7f0200ae;   public static final int community_tab_left_ov=0x7f0200af;   public static final int community_tab_right=0x7f0200b0;   public static final int community_tab_right_ov=0x7f0200b1;   public static final int community_vs=0x7f0200b2;   public static final int community_vs_01=0x7f0200b3;   public static final int comsub_01=0x7f0200b4;   public static final int comsub_01_ov=0x7f0200b5;   public static final int comsub_02=0x7f0200b6;   public static final int comsub_02_ov=0x7f0200b7;   public static final int comsub_03=0x7f0200b8;   public static final int comsub_03_ov=0x7f0200b9;   public static final int comsub_04=0x7f0200ba;   public static final int comsub_04_ov=0x7f0200bb;   public static final int comsub_05=0x7f0200bc;   public static final int comsub_05_ov=0x7f0200bd;   public static final int comsub_06=0x7f0200be;   public static final int comsub_06_ov=0x7f0200bf;   public static final int comsub_07=0x7f0200c0;   public static final int comsub_07_ov=0x7f0200c1;   public static final int comsub_08=0x7f0200c2;   public static final int comsub_08_ov=0x7f0200c3;   public static final int date_back=0x7f0200c4;   public static final int date_back11=0x7f0200c5;   public static final int datebox=0x7f0200c6;   public static final int full_bg_16kang=0x7f0200c7;   public static final int full_bg_32kang=0x7f0200c8;   public static final int full_bg_final=0x7f0200c9;   public static final int full_bg_quarterfinal=0x7f0200ca;   public static final int full_bg_semifinal=0x7f0200cb;   public static final int game_girl=0x7f0200cc;   public static final int game_girl_ov=0x7f0200cd;   public static final int game_man=0x7f0200ce;   public static final int game_man_ov=0x7f0200cf;   public static final int gamesub_01=0x7f0200d0;   public static final int gamesub_01_ov=0x7f0200d1;   public static final int gamesub_02=0x7f0200d2;   public static final int gamesub_02_ov=0x7f0200d3;   public static final int gamesub_03=0x7f0200d4;   public static final int gamesub_03_ov=0x7f0200d5;   public static final int girlselect_bg=0x7f0201ae;   public static final int girlselect_bg_ov=0x7f0201af;   public static final int girlselect_bg_ov_skin=0x7f0201b1;   public static final int girlselect_bg_ov_tran=0x7f0201b3;   public static final int girlselect_bg_skin=0x7f0201b0;   public static final int girlselect_bg_tran=0x7f0201b2;   public static final int gold_1=0x7f0200d6;   public static final int greentab=0x7f0200d7;   public static final int greentab_ov=0x7f0200d8;   public static final int ic_action_search=0x7f0200d9;   public static final int ic_launcher=0x7f0200da;   public static final int ico=0x7f0200db;   public static final int ico_end=0x7f0200dc;   public static final int ico_ing=0x7f0200dd;   public static final int ico_man=0x7f0200de;   public static final int ico_new=0x7f0200df;   public static final int ico_talk=0x7f0200e0;   public static final int ico_woman=0x7f0200e1;   public static final int icon48x48_1=0x7f0200e2;   public static final int idolsub_01=0x7f0200e3;   public static final int idolsub_01_ov=0x7f0200e4;   public static final int idolsub_02=0x7f0200e5;   public static final int idolsub_02_ov=0x7f0200e6;   public static final int idolsub_03=0x7f0200e7;   public static final int idolsub_03_ov=0x7f0200e8;   public static final int idolsub_04=0x7f0200e9;   public static final int idolsub_04_ov=0x7f0200ea;   public static final int idolsub_05=0x7f0200eb;   public static final int idolsub_05_ov=0x7f0200ec;   public static final int idolsub_06=0x7f0200ed;   public static final int idolsub_06_ov=0x7f0200ee;   public static final int idolsub_07=0x7f0200ef;   public static final int idolsub_07_ov=0x7f0200f0;   public static final int idolsub_08=0x7f0200f1;   public static final int idream_closed=0x7f0200f2;   public static final int idream_closed_ov=0x7f0200f3;   public static final int idream_final_bg=0x7f0200f4;   public static final int idream_mainrank=0x7f0200f5;   public static final int idream_mainrank_ov=0x7f0200f6;   public static final int idream_mainstart=0x7f0200f7;   public static final int idream_mainstart_ov=0x7f0200f8;   public static final int idream_rank_bg=0x7f0200f9;   public static final int idream_replay=0x7f0200fa;   public static final int idream_replay_ov=0x7f0200fb;   public static final int idream_start=0x7f0200fc;   public static final int idream_start_ov=0x7f0200fd;   public static final int idreammain_bg=0x7f0200fe;   public static final int img_16vs=0x7f0200ff;   public static final int img_32vs=0x7f020100;   public static final int img_8vs=0x7f020101;   public static final int img_final=0x7f020102;   public static final int img_semifinal=0x7f020103;   public static final int img_win=0x7f020104;   public static final int imgbtn_cyworld=0x7f020105;   public static final int imgbtn_facebook=0x7f020106;   public static final int imgbtn_fan=0x7f020107;   public static final int imgbtn_gview=0x7f020108;   public static final int imgbtn_metoday=0x7f020109;   public static final int imgbtn_mview=0x7f02010a;   public static final int imgbtn_pause=0x7f02010b;   public static final int imgbtn_play=0x7f02010c;   public static final int imgbtn_save=0x7f02010d;   public static final int imgbtn_stop=0x7f02010e;   public static final int imgbtn_sview=0x7f02010f;   public static final int imgbtn_twitter=0x7f020110;   public static final int imgbtn_yozm=0x7f020111;   public static final int info_back=0x7f020112;   public static final int inputbox2=0x7f020113;   public static final int intro=0x7f020114;   public static final int legends_backimg=0x7f020115;   public static final int legends_backimg2=0x7f020116;   public static final int legends_btn_guide=0x7f020117;   public static final int legends_ico=0x7f020118;   public static final int legends_ico2=0x7f020119;   public static final int line03=0x7f02011a;   public static final int list_girl_selected=0x7f02011b;   public static final int list_girl_selected_tran=0x7f02011c;   public static final int main01=0x7f02011d;   public static final int main_banner=0x7f02011e;   public static final int main_banner_01=0x7f02011f;   public static final int main_banner_02=0x7f020120;   public static final int main_banner_03=0x7f020121;   public static final int main_banner_04=0x7f020122;   public static final int main_banner_05=0x7f020123;   public static final int main_banner_06=0x7f020124;   public static final int main_banner_07=0x7f020125;   public static final int main_banner_08=0x7f020126;   public static final int main_banner_09=0x7f020127;   public static final int main_girl=0x7f020128;   public static final int mask=0x7f020129;   public static final int mask1=0x7f02012a;   public static final int medal01=0x7f02012b;   public static final int medal02=0x7f02012c;   public static final int medal03=0x7f02012d;   public static final int menu_back=0x7f02012e;   public static final int menu_verline=0x7f02012f;   public static final int mypagesub_01=0x7f020130;   public static final int mypagesub_01_ov=0x7f020131;   public static final int mypagesub_02=0x7f020132;   public static final int mypagesub_02_ov=0x7f020133;   public static final int mypagesub_03=0x7f020134;   public static final int mypagesub_03_ov=0x7f020135;   public static final int mypagesub_04=0x7f020136;   public static final int mypagesub_04_ov=0x7f020137;   public static final int new_top=0x7f020138;   public static final int newchatbox=0x7f020139;   public static final int newsub_01=0x7f02013a;   public static final int newsub_01_ov=0x7f02013b;   public static final int newsub_02=0x7f02013c;   public static final int newsub_02_ov=0x7f02013d;   public static final int newsub_03=0x7f02013e;   public static final int newsub_03_ov=0x7f02013f;   public static final int photo_page_next_bt_nor=0x7f020140;   public static final int photo_page_next_bt_press=0x7f020141;   public static final int photo_page_prev_bt_nor=0x7f020142;   public static final int photo_page_prev_bt_press=0x7f020143;   public static final int plyer_01=0x7f020144;   public static final int pop_closed=0x7f020145;   public static final int pop_closed_ov=0x7f020146;   public static final int pop_finish=0x7f020147;   public static final int pop_finish_ov=0x7f020148;   public static final int popup_topback=0x7f020149;   public static final int press_text=0x7f02014a;   public static final int profile_back=0x7f02014b;   public static final int profile_back_01=0x7f02014c;   public static final int profile_bg=0x7f02014d;   public static final int profile_no_bg=0x7f02014e;   public static final int progress_black_large=0x7f02014f;   public static final int progress_horizontal_custom=0x7f020150;   public static final int randking_back=0x7f020151;   public static final int ranking_01=0x7f020152;   public static final int ranking_02=0x7f020153;   public static final int ranking_ico01=0x7f020154;   public static final int ranking_list_line_height=0x7f020155;   public static final int ranking_top=0x7f020156;   public static final int rankingsub_01=0x7f020157;   public static final int rankingsub_01_ov=0x7f020158;   public static final int rankingsub_02=0x7f020159;   public static final int rankingsub_02_ov=0x7f02015a;   public static final int rankingsub_03=0x7f02015b;   public static final int rankingsub_03_ov=0x7f02015c;   public static final int rbox=0x7f02015d;   public static final int reply=0x7f02015e;   public static final int round_black_back=0x7f02015f;   public static final int seek1=0x7f020160;   public static final int seek2=0x7f020161;   public static final int seek_thumb_custom=0x7f020162;   public static final int selector_photo_page_next_bt=0x7f020163;   public static final int selector_photo_page_prev_bt=0x7f020164;   public static final int selector_web_refresh_bt=0x7f020165;   public static final int silver_1=0x7f020166;   public static final int spinner_black_76=0x7f020167;   public static final int sub_top_back=0x7f020168;   public static final int tab_bg_1=0x7f020169;   public static final int tab_bg_2=0x7f02016a;   public static final int tab_bg_3=0x7f02016b;   public static final int tab_bg_4=0x7f02016c;   public static final int tab_bg_5=0x7f02016d;   public static final int tab_monthly_ranking=0x7f02016e;   public static final int tab_monthly_ranking_hide=0x7f02016f;   public static final int tab_todayranking=0x7f020170;   public static final int tab_todayranking_hide=0x7f020171;   public static final int tab_weekranking=0x7f020172;   public static final int tab_weekranking_hide=0x7f020173;   public static final int textbox=0x7f020174;   public static final int thumb_mask=0x7f020175;   public static final int tit_1st=0x7f020176;   public static final int tit_2st=0x7f020177;   public static final int tit_3st=0x7f020178;   public static final int tit_4st=0x7f020179;   public static final int top_01=0x7f02017a;   public static final int top_back=0x7f02017b;   public static final int top_back2=0x7f02017c;   public static final int top_menu01=0x7f02017d;   public static final int top_menu01_ov=0x7f02017e;   public static final int top_menu02=0x7f02017f;   public static final int top_menu02_ov=0x7f020180;   public static final int top_menu03=0x7f020181;   public static final int top_menu03_ov=0x7f020182;   public static final int top_menu04=0x7f020183;   public static final int top_menu04_ov=0x7f020184;   public static final int top_menu05=0x7f020185;   public static final int top_menu05_ov=0x7f020186;   public static final int top_menu_commu=0x7f020187;   public static final int top_menu_commu_ov=0x7f020188;   public static final int top_menu_game=0x7f020189;   public static final int top_menu_game_ov=0x7f02018a;   public static final int top_menu_idol=0x7f02018b;   public static final int top_menu_idol_ov=0x7f02018c;   public static final int top_menu_main=0x7f02018d;   public static final int top_menu_main_ov=0x7f02018e;   public static final int top_menu_mypage=0x7f02018f;   public static final int top_menu_mypage_ov=0x7f020190;   public static final int top_menu_news=0x7f020191;   public static final int top_menu_news_ov=0x7f020192;   public static final int top_menu_ranking=0x7f020193;   public static final int top_menu_ranking_ov=0x7f020194;   public static final int top_next=0x7f020195;   public static final int top_perv=0x7f020196;   public static final int top_subtabmenu_left=0x7f020197;   public static final int top_subtabmenu_left_ov=0x7f020198;   public static final int top_subtabmenu_right=0x7f020199;   public static final int top_subtabmenu_right_ov=0x7f02019a;   public static final int topmenu1=0x7f02019b;   public static final int topmenu2=0x7f02019c;   public static final int topmenu3=0x7f02019d;   public static final int topmenu4=0x7f02019e;   public static final int topmenu5=0x7f02019f;   public static final int topmenu6=0x7f0201a0;   public static final int topmenu7=0x7f0201a1;   public static final int vpi__tab_indicator=0x7f0201a2;   public static final int vpi__tab_selected_focused_holo=0x7f0201a3;   public static final int vpi__tab_selected_holo=0x7f0201a4;   public static final int vpi__tab_selected_pressed_holo=0x7f0201a5;   public static final int vpi__tab_unselected_focused_holo=0x7f0201a6;   public static final int vpi__tab_unselected_holo=0x7f0201a7;   public static final int vpi__tab_unselected_pressed_holo=0x7f0201a8;   public static final int vs=0x7f0201a9;   public static final int web_refresh_bt_dimed=0x7f0201aa;   public static final int web_refresh_bt_nor=0x7f0201ab;   public static final int web_refresh_bt_press=0x7f0201ac;   public static final int winner=0x7f0201ad; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\EfficientAdapter.code","public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<AlbumInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<AlbumInfo> member){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=member;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_album,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.text3=(TextView)convertView.findViewById(R.id.text3);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).name);     holder.text2.setText(this.data.get(position).singer);     holder.text3.setText(this.data.get(position).date);     this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);     return convertView;   } static class ViewHolder {     ImageView icon;     TextView text;     TextView text2;     TextView text3;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_comment,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.textC=(TextView)convertView.findViewById(R.id.textC);       holder.textNick=(TextView)convertView.findViewById(R.id.textNic);       holder.textC.setVisibility(8);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text1.setText(this.dataS.get(position).content);     holder.text2.setText(""["" + this.dataS.get(position).date.trim() + ""]"");     holder.textNick.setText(this.dataS.get(position).nickname);     return convertView;   } static class ViewHolder {     TextView text1;     TextView text2;     TextView textC;     TextView textNick;     LinearLayout textline;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;     this.aq=new AQuery(context);   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_freeboard,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.textc=(TextView)convertView.findViewById(R.id.textC);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.txtNick=(TextView)convertView.findViewById(R.id.textNic);       holder.progress=(ProgressBar)convertView.findViewById(R.id.progress);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text1.setText(this.dataS.get(position).content);     holder.textc.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");     holder.text2.setText(this.dataS.get(position).date.trim());     holder.txtNick.setText(this.dataS.get(position).nickname);     return convertView;   } static class ViewHolder {     ProgressBar progress;     TextView text1;     TextView text2;     TextView textc;     TextView txtNick;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   ArrayList<rankInfo> dataS;   Context mContext;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   String type;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.mContext=context;     this.aq=new AQuery(context);   }   public EfficientAdapter(  Context context,  ArrayList<rankInfo> data,  String type1){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;     this.mContext=context;     this.type=type1;     this.aq=new AQuery(context);   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_rank2,(ViewGroup)null);       holder=new ViewHolder();       holder.rank=(TextView)convertView.findViewById(R.id.rank);       holder.nick=(TextView)convertView.findViewById(R.id.nick);       holder.gname=(TextView)convertView.findViewById(R.id.gname);       holder.name=(TextView)convertView.findViewById(R.id.name);       holder.btnstart=(Button)convertView.findViewById(R.id.btnstart);       holder.point=(TextView)convertView.findViewById(R.id.point);       holder.wdate=(TextView)convertView.findViewById(R.id.wdate);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.gback=(LinearLayout)convertView.findViewById(R.id.gback);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     String nick1="" ("" + this.dataS.get(position).nick + "")"";     String point=""ì�´ë�™ : "" + this.dataS.get(position).gmove + ""íšŒ   ì‹œê°„ : ""+ gameRank.getTimefor(this.dataS.get(position).gtime);     holder.rank.setText(this.dataS.get(position).rank);     if ("""".equals(this.dataS.get(position).parentname)) {       holder.gname.setText(this.dataS.get(position).gname);       holder.name.setVisibility(8);     }  else {       holder.name.setVisibility(8);       holder.gname.setText(this.dataS.get(position).parentname);     }     holder.nick.setText(nick1);     holder.point.setText(point);     holder.wdate.setText(this.dataS.get(position).wdate);     holder.icon.setScaleType(ImageView.ScaleType.FIT_XY);     this.aq.id(holder.icon).image(this.dataS.get(position).gthum,true,true,0,0);     if (this.dataS.get(position).device.equals(gameRank.android_id)) {       holder.rank.setTextColor(-16722402);       holder.gback.setBackgroundColor(855692830);     }  else {       holder.rank.setTextColor(-2236963);       holder.gback.setBackgroundColor(4473924);     }     holder.btnstart.setFocusable(false);     holder.btnstart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)mygrimTest.class);         myintent.putExtra(""type"",EfficientAdapter.this.type);         myintent.putExtra(""gurl"",EfficientAdapter.this.dataS.get(position).gurl);         myintent.putExtra(""gthum"",EfficientAdapter.this.dataS.get(position).gthum);         myintent.putExtra(""artname"",EfficientAdapter.this.dataS.get(position).gname);         myintent.putExtra(""artid"",EfficientAdapter.this.dataS.get(position).artid);         myintent.putExtra(""parentname"",EfficientAdapter.this.dataS.get(position).parentname);         myintent.putExtra(""parentid"",EfficientAdapter.this.dataS.get(position).parentid);         EfficientAdapter.this.mContext.startActivity(myintent);       }     } );     return convertView;   } static class ViewHolder {     Button btnstart;     LinearLayout gback;     TextView gname;     ImageView icon;     TextView name;     TextView nick;     TextView point;     TextView rank;     TextView wdate;     ViewHolder(){     }   } } private static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<LocalMemberInfo> data;   private Context mContext;   private LayoutInflater mInflater;   String[] member;   String[] members;   String type;   public EfficientAdapter(  Context context){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<LocalMemberInfo> gmember,  String sex){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;     this.data=gmember;     this.type=sex;     this.member=new String[gmember.size() - 1];     this.members=new String[gmember.size() - 1];     for (int i1=0; i1 < gmember.size() - 1; i1++) {       this.member[i1]=gmember.get(i1 + 1).name;       this.members[i1]=gmember.get(i1 + 1).search;     }   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return this.data.get(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_member_new,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.pname);       holder.textM=(TextView)convertView.findViewById(R.id.content);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);       holder.legendicon=(ImageView)convertView.findViewById(R.id.legendicon);       holder.icon_glay=(LinearLayout)convertView.findViewById(R.id.icon_glay);       holder.icon_mlay=(LinearLayout)convertView.findViewById(R.id.icon_mlay);       holder.btn_mlay=(LinearLayout)convertView.findViewById(R.id.btn_mlay);       holder.btn_glay=(LinearLayout)convertView.findViewById(R.id.btn_glay);       holder.main_lay=(LinearLayout)convertView.findViewById(R.id.main_lay);       holder.topgubun=(LinearLayout)convertView.findViewById(R.id.topgubun);       holder.site_lay=(LinearLayout)convertView.findViewById(R.id.site);       holder.btnsView=(ImageButton)convertView.findViewById(R.id.btnsView);       holder.btnmView=(ImageButton)convertView.findViewById(R.id.btnmView);       holder.btngView=(ImageButton)convertView.findViewById(R.id.btngView);       holder.fan=(ImageButton)convertView.findViewById(R.id.fancafe);       holder.face=(ImageButton)convertView.findViewById(R.id.facebook);       holder.twitter=(ImageButton)convertView.findViewById(R.id.twitter);       holder.meto=(ImageButton)convertView.findViewById(R.id.metoday);       holder.cyworld=(ImageButton)convertView.findViewById(R.id.cyworld);       holder.yozm=(ImageButton)convertView.findViewById(R.id.yozm);       holder.fan_txt=(TextView)convertView.findViewById(R.id.fancafe_txt);       holder.face_txt=(TextView)convertView.findViewById(R.id.facebook_txt);       holder.twitter_txt=(TextView)convertView.findViewById(R.id.twitter_txt);       holder.meto_txt=(TextView)convertView.findViewById(R.id.metoday_txt);       holder.cyworld_txt=(TextView)convertView.findViewById(R.id.cyworld_txt);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     if (""1"".equals(this.data.get(position).type)) {       holder.icon_mlay.setVisibility(8);       holder.btn_mlay.setVisibility(8);       holder.icon_glay.setVisibility(0);       holder.btn_glay.setVisibility(0);       holder.topgubun.setVisibility(0);       holder.main_lay.setBackgroundResource(R.drawable.profile_back_01);       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       if (""5"".equals(this.type)) {         holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));         holder.legendicon.setVisibility(0);       }  else {         holder.legendicon.setVisibility(8);       }       holder.btngView.setFocusable(false);       holder.btngView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)artimgList.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);           myintent.putExtra(""sname"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).search);           myintent.putExtra(""artid"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).memberid);           myintent.putExtra(""parentid"",GmList.gArtid);           myintent.putExtra(""parentname"",GmList.gName);           myintent.putExtra(""parentsname"",GmList.gSearch);           myintent.putExtra(""musicid"",GmList.gArtid);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       holder.btnmView.setFocusable(false);       holder.btnmView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)YouTubeAct.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       if (""5"".equals(this.type)) {         holder.text.setTextColor(-131587);         holder.textM.setTextColor(-2236963);       }  else {         holder.text.setTextColor(-137979);         holder.textM.setTextColor(-2236963);       }     }  else {       holder.topgubun.setVisibility(8);       if (position % 2 == 1) {         holder.main_lay.setBackgroundColor(-855310);       }  else       if (""5"".equals(this.type)) {         holder.main_lay.setBackgroundColor(-1776412);       }  else {         holder.main_lay.setBackgroundColor(-1250068);       }       holder.icon_glay.setVisibility(8);       holder.btn_glay.setVisibility(8);       holder.icon_mlay.setVisibility(0);       holder.btn_mlay.setVisibility(0);       holder.legendicon.setVisibility(8);       this.aq.id(holder.icon1).image(this.data.get(position).thum,true,true,200,0);       ColorMatrix cm2=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       if (""5"".equals(this.type)) {         holder.icon1.setColorFilter(new ColorMatrixColorFilter(cm2));         holder.legendicon.setVisibility(8);       }  else {         holder.legendicon.setVisibility(8);       }       holder.btnsView.setFocusable(false);       holder.btnsView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)artimgList.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);           myintent.putExtra(""sname"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).search);           myintent.putExtra(""artid"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).memberid);           myintent.putExtra(""parentid"",GmList.gArtid);           myintent.putExtra(""parentname"",GmList.gName);           myintent.putExtra(""parentsname"",GmList.gSearch);           myintent.putExtra(""musicid"",GmList.gArtid);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       holder.text.setTextColor(-12303292);       holder.textM.setTextColor(-10066330);     }     holder.text.setText(this.data.get(position).name);     holder.textM.setText(this.data.get(position).content);     if (this.data.get(position).site != null) {       holder.site_lay.setVisibility(0);       holder.fan.setVisibility(8);       holder.fan_txt.setVisibility(8);       holder.face.setVisibility(8);       holder.face_txt.setVisibility(8);       holder.twitter.setVisibility(8);       holder.twitter_txt.setVisibility(8);       holder.meto.setVisibility(8);       holder.meto_txt.setVisibility(8);       holder.cyworld.setVisibility(8);       holder.cyworld_txt.setVisibility(8);       holder.yozm.setVisibility(8);       Iterator<GroupSite> it=this.data.get(position).site.iterator();       while (it.hasNext()) {         final GroupSite gsi=it.next();         if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {           holder.fan.setVisibility(0);           holder.fan_txt.setVisibility(0);           holder.fan.setFocusable(false);           holder.fan.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {           holder.face.setVisibility(0);           holder.face_txt.setVisibility(0);           holder.face.setFocusable(false);           holder.face.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {           holder.meto.setVisibility(0);           holder.meto_txt.setVisibility(0);           holder.meto.setFocusable(false);           holder.meto.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {           holder.twitter.setVisibility(0);           holder.twitter_txt.setVisibility(0);           holder.twitter.setFocusable(false);           holder.twitter.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {           holder.cyworld.setVisibility(0);           holder.cyworld_txt.setVisibility(0);           holder.cyworld.setFocusable(false);           holder.cyworld.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ìš”ì¦˜"")) {           holder.yozm.setVisibility(0);           holder.yozm.setFocusable(false);           holder.yozm.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }       }     }  else {       holder.site_lay.setVisibility(8);       holder.fan.setVisibility(8);       holder.fan_txt.setVisibility(8);       holder.face.setVisibility(8);       holder.face_txt.setVisibility(8);       holder.twitter.setVisibility(8);       holder.twitter_txt.setVisibility(8);       holder.meto.setVisibility(8);       holder.meto_txt.setVisibility(8);       holder.cyworld.setVisibility(8);       holder.cyworld_txt.setVisibility(8);       holder.yozm.setVisibility(8);     }     return convertView;   } static class ViewHolder {     LinearLayout btn_glay;     LinearLayout btn_mlay;     ImageButton btngView;     ImageButton btnmView;     ImageButton btnsView;     ImageButton cyworld;     TextView cyworld_txt;     ImageButton face;     TextView face_txt;     ImageButton fan;     TextView fan_txt;     ImageView icon;     ImageView icon1;     LinearLayout icon_glay;     LinearLayout icon_mlay;     ImageView legendicon;     LinearLayout main_lay;     ImageButton meto;     TextView meto_txt;     LinearLayout site_lay;     TextView text;     TextView textM;     LinearLayout topgubun;     ImageButton twitter;     TextView twitter_txt;     ImageButton yozm;     ViewHolder(){     }   } } private static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<LocalMemberInfo> data;   private Context mContext;   private LayoutInflater mInflater;   String[] member;   String[] members;   String type;   public EfficientAdapter(  Context context){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<LocalMemberInfo> gmember,  String sex){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;     this.data=gmember;     this.type=sex;     this.member=new String[gmember.size() - 1];     this.members=new String[gmember.size() - 1];     for (int i1=0; i1 < gmember.size() - 1; i1++) {       this.member[i1]=gmember.get(i1 + 1).name;       this.members[i1]=gmember.get(i1 + 1).search;     }   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return this.data.get(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_member,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.pname);       holder.textM=(TextView)convertView.findViewById(R.id.content);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);       holder.legendicon=(ImageView)convertView.findViewById(R.id.legendicon);       holder.icon_glay=(LinearLayout)convertView.findViewById(R.id.icon_glay);       holder.icon_mlay=(LinearLayout)convertView.findViewById(R.id.icon_mlay);       holder.btn_mlay=(LinearLayout)convertView.findViewById(R.id.btn_mlay);       holder.btn_glay=(LinearLayout)convertView.findViewById(R.id.btn_glay);       holder.main_lay=(LinearLayout)convertView.findViewById(R.id.main_lay);       holder.site_lay=(LinearLayout)convertView.findViewById(R.id.site);       holder.btnsView=(ImageButton)convertView.findViewById(R.id.btnsView);       holder.btnmView=(ImageButton)convertView.findViewById(R.id.btnmView);       holder.btngView=(ImageButton)convertView.findViewById(R.id.btngView);       holder.fan=(ImageButton)convertView.findViewById(R.id.fancafe);       holder.face=(ImageButton)convertView.findViewById(R.id.facebook);       holder.twitter=(ImageButton)convertView.findViewById(R.id.twitter);       holder.meto=(ImageButton)convertView.findViewById(R.id.metoday);       holder.cyworld=(ImageButton)convertView.findViewById(R.id.cyworld);       holder.yozm=(ImageButton)convertView.findViewById(R.id.yozm);       holder.fan_txt=(TextView)convertView.findViewById(R.id.fancafe_txt);       holder.face_txt=(TextView)convertView.findViewById(R.id.facebook_txt);       holder.twitter_txt=(TextView)convertView.findViewById(R.id.twitter_txt);       holder.meto_txt=(TextView)convertView.findViewById(R.id.metoday_txt);       holder.cyworld_txt=(TextView)convertView.findViewById(R.id.cyworld_txt);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     if (""1"".equals(this.data.get(position).type)) {       holder.icon_mlay.setVisibility(8);       holder.btn_mlay.setVisibility(8);       holder.icon_glay.setVisibility(0);       holder.btn_glay.setVisibility(0);       holder.main_lay.setBackgroundResource(R.drawable.profile_back_01);       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       if (""5"".equals(this.type)) {         holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));         holder.legendicon.setVisibility(0);       }  else {         holder.legendicon.setVisibility(8);       }       holder.btngView.setFocusable(false);       holder.btngView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",GmListNew.gName);           myintent.putExtra(""search"",GmListNew.gSearch);           if (position != 0) {             myintent.putExtra(""posi"",position);           }  else {             myintent.putExtra(""posi"",position);           }           myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);           myintent.putExtra(""memberarry3"",GmListNew.membersid);           myintent.putExtra(""groupid"",GmListNew.gArtid);           myintent.putExtra(""total"",EfficientAdapter.this.member.length);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       holder.btnmView.setFocusable(false);       holder.btnmView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",GmListNew.gName);           myintent.putExtra(""search"",GmListNew.gSearch);           myintent.putExtra(""posi"",EfficientAdapter.this.data.size() + 1);           myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);           myintent.putExtra(""memberarry3"",GmListNew.membersid);           myintent.putExtra(""groupid"",GmListNew.gArtid);           myintent.putExtra(""total"",EfficientAdapter.this.member.length);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       if (""5"".equals(this.type)) {         holder.text.setTextColor(-131587);         holder.textM.setTextColor(-2236963);       }  else {         holder.text.setTextColor(-137979);         holder.textM.setTextColor(-2236963);       }     }  else {       if (position % 2 == 1) {         holder.main_lay.setBackgroundColor(-855310);       }  else       if (""5"".equals(this.type)) {         holder.main_lay.setBackgroundColor(-1776412);       }  else {         holder.main_lay.setBackgroundColor(-659245);       }       holder.icon_glay.setVisibility(8);       holder.btn_glay.setVisibility(8);       holder.icon_mlay.setVisibility(0);       holder.btn_mlay.setVisibility(0);       holder.legendicon.setVisibility(8);       this.aq.id(holder.icon1).image(this.data.get(position).thum,true,true,200,0);       ColorMatrix cm2=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       if (""5"".equals(this.type)) {         holder.icon1.setColorFilter(new ColorMatrixColorFilter(cm2));         holder.legendicon.setVisibility(8);       }  else {         holder.legendicon.setVisibility(8);       }       holder.btnsView.setFocusable(false);       holder.btnsView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);           myintent.addFlags(268435456);           myintent.putExtra(""name"",GmListNew.gName);           myintent.putExtra(""search"",GmListNew.gSearch);           if (position != 0) {             myintent.putExtra(""posi"",position);           }  else {             myintent.putExtra(""posi"",position);           }           myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);           myintent.putExtra(""memberarry3"",GmListNew.membersid);           myintent.putExtra(""groupid"",GmListNew.gArtid);           myintent.putExtra(""total"",EfficientAdapter.this.member.length);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       holder.text.setTextColor(-12303292);       holder.textM.setTextColor(-10066330);     }     holder.text.setText(this.data.get(position).name);     holder.textM.setText(this.data.get(position).content);     if (this.data.get(position).site != null) {       holder.site_lay.setVisibility(0);       holder.fan.setVisibility(8);       holder.fan_txt.setVisibility(8);       holder.face.setVisibility(8);       holder.face_txt.setVisibility(8);       holder.twitter.setVisibility(8);       holder.twitter_txt.setVisibility(8);       holder.meto.setVisibility(8);       holder.meto_txt.setVisibility(8);       holder.cyworld.setVisibility(8);       holder.cyworld_txt.setVisibility(8);       holder.yozm.setVisibility(8);       Iterator<GroupSite> it=this.data.get(position).site.iterator();       while (it.hasNext()) {         final GroupSite gsi=it.next();         if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {           holder.fan.setVisibility(0);           holder.fan_txt.setVisibility(0);           holder.fan.setFocusable(false);           holder.fan.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {           holder.face.setVisibility(0);           holder.face_txt.setVisibility(0);           holder.face.setFocusable(false);           holder.face.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {           holder.meto.setVisibility(0);           holder.meto_txt.setVisibility(0);           holder.meto.setFocusable(false);           holder.meto.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {           holder.twitter.setVisibility(0);           holder.twitter_txt.setVisibility(0);           holder.twitter.setFocusable(false);           holder.twitter.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {           holder.cyworld.setVisibility(0);           holder.cyworld_txt.setVisibility(0);           holder.cyworld.setFocusable(false);           holder.cyworld.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }  else         if (gsi.name.equals(""ìš”ì¦˜"")) {           holder.yozm.setVisibility(0);           holder.yozm.setFocusable(false);           holder.yozm.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View arg0){               Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));               intent.addFlags(268435456);               EfficientAdapter.this.mContext.startActivity(intent);             }           } );         }       }     }  else {       holder.site_lay.setVisibility(8);       holder.fan.setVisibility(8);       holder.fan_txt.setVisibility(8);       holder.face.setVisibility(8);       holder.face_txt.setVisibility(8);       holder.twitter.setVisibility(8);       holder.twitter_txt.setVisibility(8);       holder.meto.setVisibility(8);       holder.meto_txt.setVisibility(8);       holder.cyworld.setVisibility(8);       holder.cyworld_txt.setVisibility(8);       holder.yozm.setVisibility(8);     }     return convertView;   } static class ViewHolder {     LinearLayout btn_glay;     LinearLayout btn_mlay;     ImageButton btngView;     ImageButton btnmView;     ImageButton btnsView;     ImageButton cyworld;     TextView cyworld_txt;     ImageButton face;     TextView face_txt;     ImageButton fan;     TextView fan_txt;     ImageView icon;     ImageView icon1;     LinearLayout icon_glay;     LinearLayout icon_mlay;     ImageView legendicon;     LinearLayout main_lay;     ImageButton meto;     TextView meto_txt;     LinearLayout site_lay;     TextView text;     TextView textM;     ImageButton twitter;     TextView twitter_txt;     ImageButton yozm;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_boardnew,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.textC=(TextView)convertView.findViewById(R.id.textC);       holder.textNic=(TextView)convertView.findViewById(R.id.textNic);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text1.setText(this.dataS.get(position).content);     holder.text2.setText(this.dataS.get(position).date.trim());     holder.textC.setVisibility(0);     holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");     holder.textNic.setText(this.dataS.get(position).nick);     return convertView;   } static class ViewHolder {     TextView text1;     TextView text2;     TextView textC;     TextView textNic;     LinearLayout textline;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<AlbumInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<AlbumInfo> member){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=member;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_album,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.text3=(TextView)convertView.findViewById(R.id.text3);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).name);     holder.text2.setText(this.data.get(position).singer);     holder.text3.setText(this.data.get(position).date);     this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);     return convertView;   } static class ViewHolder {     ImageView icon;     TextView text;     TextView text2;     TextView text3;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<IdolInfo> datalist=new ArrayList<>();   private Context mContext;   private LayoutInflater mInflater;   String sex;   public EfficientAdapter(  Context context,  ArrayList<IdolInfo> data){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;     this.datalist.addAll(data);   }   @Override public int getCount(){     return this.datalist.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_idol,(ViewGroup)null);       holder=new ViewHolder();       holder.txtname=(TextView)convertView.findViewById(R.id.txtname);       holder.txtcontent=(TextView)convertView.findViewById(R.id.txtcontent);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.newt=(ImageView)convertView.findViewById(R.id.hot);       holder.btnfav=(Button)convertView.findViewById(R.id.btnfav);       holder.btnfan=(Button)convertView.findViewById(R.id.btnfan);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.btnfan.setFocusable(false);     holder.btnfan.setVisibility(8);     holder.btnfav.setFocusable(false);     holder.btnfav.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         EfficientAdapter.this.setFav(position);       }     } );     holder.txtname.setText(this.datalist.get(position).name);     holder.txtcontent.setText(this.datalist.get(position).member);     this.aq.id(holder.icon).image(this.datalist.get(position).thum,true,true,0,0);     new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});     return convertView;   }   public void setFav(  int idx){     idolDBhelper mHelper=new idolDBhelper(this.mContext);     SQLiteDatabase db1=mHelper.getWritableDatabase();     String query=""select * from idolgroup where groupid='"" + this.datalist.get(idx).groupid + ""' and fav='y' "";     Cursor cursor1=db1.rawQuery(query,null);     if (cursor1.getCount() > 0) {       String query2=""update idolgroup set fav='' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";       db1.execSQL(query2);       Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();     }  else {       String query3=""update idolgroup set fav='y' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";       db1.execSQL(query3);       Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();     }   } static class ViewHolder {     Button btnfan;     Button btnfav;     ImageView icon;     ImageView newt;     TextView txtcontent;     TextView txtname;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_notice,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.textC=(TextView)convertView.findViewById(R.id.textC);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text1.setText(this.dataS.get(position).content);     holder.text2.setText(this.dataS.get(position).date.trim());     holder.textC.setVisibility(0);     holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");     if (position % 2 == 0) {       holder.icon.setBackgroundResource(R.drawable.community_ico2);     }  else {       holder.icon.setBackgroundResource(R.drawable.community_ico2);     }     return convertView;   } static class ViewHolder {     ImageView icon;     TextView text1;     TextView text2;     TextView textC;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   String btype;   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data,  String ttype){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;     this.btype=ttype;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_qboard,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.textC=(TextView)convertView.findViewById(R.id.textC);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.textNic=(TextView)convertView.findViewById(R.id.textNic);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text1.setText(this.dataS.get(position).content);     holder.text2.setText(this.dataS.get(position).date.trim());     holder.textC.setVisibility(0);     holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");     if (position % 2 == 0) {       holder.icon.setBackgroundResource(R.drawable.community_ico3);     }  else {       holder.icon.setBackgroundResource(R.drawable.community_ico3_ov);     }     if (""7"".equals(this.btype)) {       holder.textNic.setText(""ë¹„ê³µê°œ"");     }  else {       holder.textNic.setText(this.dataS.get(position).nick);     }     return convertView;   } static class ViewHolder {     ImageView icon;     TextView text1;     TextView text2;     TextView textC;     TextView textNic;     LinearLayout textline;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   ArrayList<BoardList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<BoardList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_rivalboard,(ViewGroup)null);       holder=new ViewHolder();       holder.text1=(TextView)convertView.findViewById(R.id.text1);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.rnick=(TextView)convertView.findViewById(R.id.textNic);       holder.lnick=(TextView)convertView.findViewById(R.id.ltextNic);       holder.ltext1=(TextView)convertView.findViewById(R.id.ltext1);       holder.ltext2=(TextView)convertView.findViewById(R.id.ltext2);       holder.lline1=(LinearLayout)convertView.findViewById(R.id.lline1);       holder.lline2=(LinearLayout)convertView.findViewById(R.id.lline2);       holder.rline1=(LinearLayout)convertView.findViewById(R.id.rline1);       holder.rline2=(LinearLayout)convertView.findViewById(R.id.rline2);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     if (rivalBoard.id2.equals(this.dataS.get(position).groupid)) {       holder.lline1.setVisibility(8);       holder.lline2.setVisibility(8);       holder.rline1.setVisibility(0);       holder.rline2.setVisibility(0);       holder.text1.setText(this.dataS.get(position).content);       holder.text2.setText(this.dataS.get(position).date.trim());       holder.rnick.setText(this.dataS.get(position).nickname);     }  else {       holder.rline1.setVisibility(8);       holder.rline2.setVisibility(8);       holder.lline1.setVisibility(0);       holder.lline2.setVisibility(0);       holder.ltext1.setText(this.dataS.get(position).content);       holder.ltext2.setText(this.dataS.get(position).date.trim());       holder.lnick.setText(this.dataS.get(position).nickname);     }     return convertView;   } static class ViewHolder {     LinearLayout lline1;     LinearLayout lline2;     TextView lnick;     TextView ltext1;     TextView ltext2;     LinearLayout rline1;     LinearLayout rline2;     TextView rnick;     TextView text1;     TextView text2;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   ArrayList<rivalInfo> dataS;   Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<rivalInfo> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_rival,(ViewGroup)null);       holder=new ViewHolder();       holder.rank=(TextView)convertView.findViewById(R.id.rank);       holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);       holder.name1=(TextView)convertView.findViewById(R.id.text1);       holder.icon2=(ImageView)convertView.findViewById(R.id.icon2);       holder.name2=(TextView)convertView.findViewById(R.id.text2);       holder.title=(TextView)convertView.findViewById(R.id.rivaltitle);       holder.btngogo=(Button)convertView.findViewById(R.id.btn_gogo);       holder.ivRivalProcess=(ImageView)convertView.findViewById(R.id.ivRivalProcess);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.btngogo.setFocusable(false);     holder.title.setText(this.dataS.get(position).title);     holder.rank.setText(this.dataS.get(position).rank);     holder.name1.setText(this.dataS.get(position).groupname1);     holder.name2.setText(this.dataS.get(position).groupname2);     this.aq.id(holder.icon1).image(this.dataS.get(position).thum1,true,true,0,0);     this.aq.id(holder.icon2).image(this.dataS.get(position).thum2,true,true,0,0);     Calendar cal=Calendar.getInstance();     Date ToDay=cal.getTime();     String enddate=this.dataS.get(position).endDate;     Calendar cal2=Calendar.getInstance();     String yy=enddate.substring(0,4);     String mm=enddate.substring(5,7);     String dd=enddate.substring(8,10);     cal2.set(Integer.parseInt(yy),Integer.parseInt(mm) - 1,Integer.parseInt(dd));     Date EndDate=cal2.getTime();     if (ToDay.compareTo(EndDate) > 0) {       holder.ivRivalProcess.setBackgroundDrawable(this.mContext.getResources().getDrawable(R.drawable.ico_end));     }  else {       holder.ivRivalProcess.setBackgroundDrawable(this.mContext.getResources().getDrawable(R.drawable.ico_ing));     }     holder.btngogo.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent3=new Intent(EfficientAdapter.this.mContext,(Class<?>)rivalBoard.class);         myintent3.putExtra(""thum1"",EfficientAdapter.this.dataS.get(position).thum1);         myintent3.putExtra(""thum2"",EfficientAdapter.this.dataS.get(position).thum2);         myintent3.putExtra(""name1"",EfficientAdapter.this.dataS.get(position).groupname1);         myintent3.putExtra(""name2"",EfficientAdapter.this.dataS.get(position).groupname2);         myintent3.putExtra(""groupid1"",EfficientAdapter.this.dataS.get(position).groupid1);         myintent3.putExtra(""groupid2"",EfficientAdapter.this.dataS.get(position).groupid2);         myintent3.putExtra(""idx"",EfficientAdapter.this.dataS.get(position).idx);         myintent3.putExtra(""enddate"",EfficientAdapter.this.dataS.get(position).endDate);         EfficientAdapter.this.mContext.startActivity(myintent3);       }     } );     return convertView;   } static class ViewHolder {     Button btngogo;     ImageView icon1;     ImageView icon2;     ImageView ivRivalProcess;     TextView name1;     TextView name2;     TextView rank;     TextView title;     ViewHolder(){     }   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<SongInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<SongInfo> member){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=member;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_song,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.textM=(TextView)convertView.findViewById(R.id.text2);       holder.btnView=(Button)convertView.findViewById(R.id.btnView);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.btnView.setFocusable(false);     holder.btnView.setVisibility(8);     holder.btnView.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)wordsinfo.class);         myintent.addFlags(268435456);         myintent.putExtra(""albumid"",SongList.albumid);         myintent.putExtra(""songid"",((SongInfo)EfficientAdapter.this.data.get(position)).songid);         EfficientAdapter.this.mContext.startActivity(myintent);       }     } );     holder.text.setText(this.data.get(position).name);     holder.textM.setText(this.data.get(position).singer);     return convertView;   } static class ViewHolder {     Button btnView;     TextView text;     TextView textM;     ViewHolder(){     }   } } private static class EfficientAdapter extends BaseAdapter {   private static final int GROUP_CONTENT=1;   private static final int GROUP_START=0;   AQuery aq;   private ArrayList<GroupInfo> data=new ArrayList<>();   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<GroupInfo> data1){     this.mInflater=LayoutInflater.from(context);     this.data.addAll(data1);     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_rank,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).name);     this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,0,0);     return convertView;   } static class ViewHolder {     ImageView icon;     TextView text;     ViewHolder(){     }   } } private static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<YouTubeInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<YouTubeInfo> member){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=member;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_video,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.textM=(TextView)convertView.findViewById(R.id.text2);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.time=(TextView)convertView.findViewById(R.id.time);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).name);     holder.textM.setText(""ê²Œì‹œìž� :"" + this.data.get(position).writer + "" \nê²Œì‹œì�¼: ""+ this.data.get(position).date+ "" \n"");     this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);     holder.time.setText(getTimefor(this.data.get(position).time));     return convertView;   } static class ViewHolder {     ImageView icon;     ImageView iconLeft;     TextView text;     TextView textM;     TextView time;     ViewHolder(){     }   }   public String getTimefor(  String du){     int i=Integer.parseInt(du);     int tmp1=i / 60;     int tmp1n=i % 60;     int tmp2=tmp1 / 60;     int tmp2n=tmp1 % 60;     int i2=tmp2 / 60;     int tmp3n=tmp2 % 60;     if (tmp3n == 0) {       String retVal=String.valueOf(Integer.toString(tmp2n)) + "":"" + Integer.toString(tmp1n);       return retVal;     }     String retVal2=String.valueOf(Integer.toString(tmp3n)) + "":"" + Integer.toString(tmp2n)+ "":""+ Integer.toString(tmp1n);     return retVal2;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\EfficientAdapter2.code","public static class EfficientAdapter2 extends BaseAdapter {   AQuery aq;   private ArrayList<GroupChart> data;   private Context mContext;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter2(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;     this.mIcon1=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_up);     this.mIcon2=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_down);   }   public EfficientAdapter2(  Context context,  ArrayList<GroupChart> data1){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=data1;     this.aq=new AQuery(context);     this.mContext=context;     this.mIcon1=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_up);     this.mIcon2=BitmapFactory.decodeResource(this.mContext.getResources(),R.drawable.arrow_down);   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_chart,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.textM=(TextView)convertView.findViewById(R.id.text2);       holder.rank=(TextView)convertView.findViewById(R.id.rank);       holder.graph=(ImageView)convertView.findViewById(R.id.graph);       holder.updown=(TextView)convertView.findViewById(R.id.updown);       holder.imgChartTop=(ImageView)convertView.findViewById(R.id.imgChartTop);       holder.imgChartMedal=(ImageView)convertView.findViewById(R.id.imgChartMedal);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     if (Integer.parseInt(this.data.get(position).rank) % 2 == 1) {       convertView.setBackgroundColor(-13948117);     }  else {       convertView.setBackgroundColor(-13158599);     }     holder.rank.setText(this.data.get(position).rank);     holder.text.setText(this.data.get(position).name);     holder.textM.setText(this.data.get(position).content);     if (position < 3) {       holder.imgChartTop.setVisibility(0);       holder.imgChartMedal.setVisibility(0);       holder.text.setTextColor(Color.parseColor(""#FF88dc16""));       if (position == 0) {         holder.imgChartMedal.setImageResource(R.drawable.gold_1);       }       if (position == 1) {         holder.imgChartMedal.setImageResource(R.drawable.silver_1);       }       if (position == 2) {         holder.imgChartMedal.setImageResource(R.drawable.bronze_1);       }     }  else {       holder.imgChartTop.setVisibility(8);       holder.imgChartMedal.setVisibility(8);       holder.text.setTextColor(Color.parseColor(""#FFFFFF""));     }     if (this.data.get(position).updownrank.indexOf(""up"") != -1) {       holder.graph.setImageBitmap(this.mIcon1);       holder.updown.setText(this.data.get(position).updown);     }     if (this.data.get(position).updownrank.indexOf(""down"") != -1) {       holder.graph.setImageBitmap(this.mIcon2);       holder.updown.setText(this.data.get(position).updown);     }     if (this.data.get(position).updownrank.indexOf(""same"") != -1) {       holder.graph.setImageBitmap(null);       holder.updown.setText(""-"");     }     if (this.data.get(position).updownrank.indexOf(""new"") != -1) {       holder.graph.setImageBitmap(null);       holder.updown.setText(""new"");     }     return convertView;   } static class ViewHolder {     ImageView graph;     ImageView iconLeft;     ImageView imgChartMedal;     ImageView imgChartTop;     TextView rank;     TextView text;     TextView textM;     TextView updown;     ViewHolder(){     }   } } private static class EfficientAdapter2 extends BaseAdapter {   AQuery aq;   private ArrayList<NewsInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter2(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter2(  Context context,  ArrayList<NewsInfo> data1){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=data1;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_news,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.text2=(TextView)convertView.findViewById(R.id.text2);       holder.text3=(TextView)convertView.findViewById(R.id.text3);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.icon_line=(LinearLayout)convertView.findViewById(R.id.icon_line);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).title);     holder.text2.setText(this.data.get(position).content);     holder.text3.setText(this.data.get(position).bottom);     if (this.data.get(position).thum == null) {       holder.icon_line.setVisibility(8);     }  else {       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);     }     return convertView;   } static class ViewHolder {     ImageView icon;     LinearLayout icon_line;     TextView text;     TextView text2;     TextView text3;     ViewHolder(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\eventWindow.code","public class eventWindow extends Activity {   FrameLayout fl_title;   WebView wview;   @Override @SuppressLint({""SetJavaScriptEnabled"",""JavascriptInterface""}) public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.webevent);     Intent i=getIntent();     String url=i.getStringExtra(""url"");     JavaScriptInterface myJavaScriptInterface=new JavaScriptInterface(this);     this.wview=(WebView)findViewById(R.id.eventview);     this.wview.getSettings().setJavaScriptEnabled(true);     this.wview.getSettings().setLoadWithOverviewMode(false);     this.wview.getSettings().setLightTouchEnabled(true);     this.wview.addJavascriptInterface(myJavaScriptInterface,""AndroidFunction"");     this.wview.loadUrl(url);     this.wview.setWebViewClient(new MyWebViewClient());     Button btnend=(Button)findViewById(R.id.btncancel);     btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         eventWindow.this.finish();       }     } );   } public class JavaScriptInterface {     Context mContext;     JavaScriptInterface(    Context c){       this.mContext=c;     }     public void launchMarket(    String appId){       boolean Check=false;       PackageManager mPm=this.mContext.getPackageManager();       List<ApplicationInfo> mInstalledPkgList=mPm.getInstalledApplications(8192);       for (      ApplicationInfo appFmc : mInstalledPkgList) {         if (appFmc.packageName.equals(appId)) {           Check=true;           Intent intent=this.mContext.getPackageManager().getLaunchIntentForPackage(appId);           this.mContext.startActivity(intent);         }       }       if (!Check) {         Intent marketLaunch=new Intent(""android.intent.action.VIEW"");         marketLaunch.setData(Uri.parse(""market://details?id="" + appId));         this.mContext.startActivity(marketLaunch);       }     }   } public class MyWebViewClient extends WebViewClient {     public MyWebViewClient(){     }     @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){       if (url.contains(""kpop-play.com/pop/"")) {         view.loadUrl(url);       }  else {         Intent i=new Intent(""android.intent.action.VIEW"",Uri.parse(url));         eventWindow.this.startActivity(i);         eventWindow.this.finish();       }       return true;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\freeBoard.code","public class freeBoard extends AdlibActivity implements AbsListView.OnScrollListener {   private ImageButton btSave;   String btitle;   EditText comment;   private ImageButton imgBtnChooseFile;   private String index;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   TextView mtitle;   private String myNick;   Intent myintent;   private String name;   private String sex;   TextView subtitle;   private TextView txtChooseFile;   private int c_page=2;   private int pagesize=10;   String btype="""";   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.freeboard);     initAds();     setAdsContainer(R.id.ads);     this.mtitle=(TextView)findViewById(R.id.title);     this.subtitle=(TextView)findViewById(R.id.subtitle);     Intent i=getIntent();     this.btype=i.getStringExtra(""type"");     if (""1"".equals(this.btype)) {       this.btitle=""ìž�ìœ ë°œì–¸ëŒ€"";     }  else     if (""6"".equals(this.btype)) {       this.btitle=""ë°©ì†¡/ê³µì—°í›„ê¸°"";       this.subtitle.setText(""ìž¬ë¯¸ìžˆëŠ” ë°©ì†¡/ê³µì—°ì�„ ì˜¬ë ¤ ì£¼ì„¸ìš”"");     }  else     if (""8"".equals(this.btype)) {       this.btitle=""ìŠ¤íƒ€ëª©ê²©ë‹´"";       this.subtitle.setText(""ìŠ¤íƒ€ì�˜ ëª©ê²©ë‹´ì�„ ì˜¬ë ¤ ì£¼ì„¸ìš”"");     }     this.mtitle.setText(this.btitle);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         freeBoard.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent3=new Intent(freeBoard.this.getApplication(),(Class<?>)Comment.class);         myintent3.putExtra(""content"",((BoardList)freeBoard.this.mRowList.get(position)).content);         myintent3.putExtra(""idx"",((BoardList)freeBoard.this.mRowList.get(position)).idx);         myintent3.putExtra(""nick"",((BoardList)freeBoard.this.mRowList.get(position)).nickname);         myintent3.putExtra(""device"",((BoardList)freeBoard.this.mRowList.get(position)).ip);         myintent3.putExtra(""type"",freeBoard.this.btype);         freeBoard.this.startActivity(myintent3);       }     } );     this.btSave=(ImageButton)findViewById(R.id.btnsave);     this.comment=(EditText)findViewById(R.id.comment);     this.btSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!freeBoard.this.comment.getText().toString().trim().equals("""")) {           if (!freeBoard.this.myNickSet()) {             Intent i2=new Intent(freeBoard.this.getApplicationContext(),(Class<?>)nickset.class);             freeBoard.this.startActivity(i2);             return;           }  else {             freeBoard.this.setSave();             return;           }         }         Toast.makeText(freeBoard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );     this.mLockListView=true;     makea();   }   public String getRealPathFromURI(  Uri contentUri){     String[] proj={""_data""};     Cursor cursor=managedQuery(contentUri,proj,null,null,null);     int column_index=cursor.getColumnIndexOrThrow(""_data"");     cursor.moveToFirst();     return cursor.getString(column_index);   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   @SuppressLint({""SimpleDateFormat""}) public void setSave(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""content"",this.comment.getText());     params.put(""nick"",this.myNick);     params.put(""device"",deviceId);     params.put(""attatch"","""");     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         mProgressHUD.dismiss();         if (json.equals(""0"")) {           freeBoard.this.comment.setText((CharSequence)null);           freeBoard.this.txtChooseFile.setText((CharSequence)null);           Toast.makeText(freeBoard.this.getApplicationContext(),""í•˜ë£¨ 10íšŒê¹Œì§€ ì�‘ì›�ê°€ëŠ¥í•©ë‹ˆë‹¤."",1).show();         }  else {           freeBoard.this.comment.setText((CharSequence)null);           freeBoard.this.mRowList.clear();           freeBoard.this.makea();         }       }     } );   }   private void makeaAdd(  int page){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<BoardList> mTemp=freeBoard.this.setData2(json);         freeBoard.this.mRowList.addAll(mTemp);         if (mTemp.size() < freeBoard.this.pagesize) {           freeBoard.this.mLockListView=true;         }  else {           freeBoard.this.mLockListView=false;         }         freeBoard.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         freeBoard.this.mRowList=freeBoard.this.setData2(json);         if (freeBoard.this.mRowList.size() < freeBoard.this.pagesize) {           freeBoard.this.mLockListView=true;         }  else {           freeBoard.this.mLockListView=false;         }         freeBoard.this.c_page=2;         freeBoard.this.mAdapter=new EfficientAdapter(freeBoard.this,freeBoard.this.mRowList);         freeBoard.this.li.setAdapter((ListAdapter)freeBoard.this.mAdapter);       }     } );   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;       this.aq=new AQuery(context);     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_freeboard,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.textc=(TextView)convertView.findViewById(R.id.textC);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.txtNick=(TextView)convertView.findViewById(R.id.textNic);         holder.progress=(ProgressBar)convertView.findViewById(R.id.progress);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text1.setText(this.dataS.get(position).content);       holder.textc.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");       holder.text2.setText(this.dataS.get(position).date.trim());       holder.txtNick.setText(this.dataS.get(position).nickname);       return convertView;     } static class ViewHolder {       ProgressBar progress;       TextView text1;       TextView text2;       TextView textc;       TextView txtNick;       ViewHolder(){       }     }   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.ip=localJSONObject2.optString(""device"");         item.idx=localJSONObject2.optString(""idx"");         item.nickname=localJSONObject2.optString(""nickname"");         item.cm_cnt=localJSONObject2.optString(""cnt"");         item.attatch=localJSONObject2.optString(""attatch"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class BoardList {     String attatch;     String cm_cnt;     String content;     String date;     String hit;     String idx;     String ip;     String nickname;     BoardList(){     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\GalleryList.code","public class GalleryList extends AdlibActivity {   public static int sHeight;   public static int sWidth;   private ImageAdapter adapter;   private Button btnNext1;   private Button btnPre1;   private ProgressDialog dialog;   private GridView gw;   private String keyword;   private Context mContext;   private TextView mtitle;   Intent myintent;   private int cpage=0;   private int spage=12;   private List<String> list=new ArrayList();   private List<Bitmap> blist=new ArrayList();   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       if (GalleryList.this.dialog != null) {         GalleryList.this.dialog.dismiss();       }       GalleryList.this.adapter=new ImageAdapter(GalleryList.this);       GalleryList.this.gw.setAdapter((ListAdapter)GalleryList.this.adapter);     }   } ;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.gallery);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         GalleryList.this.finish();       }     } );     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     this.gw=(GridView)findViewById(R.id.myGrid);     getImgList();     this.gw.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView parent,      View v,      int position,      long id){         GalleryList.this.myintent=new Intent(GalleryList.this.getApplicationContext(),(Class<?>)StorageViewNew.class);         GalleryList.this.myintent.putExtra(""position"",Integer.toString(position));         GalleryList.this.startActivity(GalleryList.this.myintent);       }     } );   }   public void getImgList(){     this.dialog=new ProgressDialog(this);     this.dialog.setProgressStyle(0);     this.dialog.setMessage(""ë¡œë”©ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     this.dialog.setCancelable(true);     this.dialog.show();     new Thread(){       @Override public void run(){         String root=Environment.getExternalStorageDirectory().getAbsolutePath();         File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);         if (sdImageMainDirectory.exists()) {           File[] listFiles=new File(String.valueOf(root) + ""/"" + Main.dirpath).listFiles();           for (          File file : listFiles) {             GalleryList.this.blist.add(GalleryList.this.getThum(file.getName()));           }         }         GalleryList.this.handler.sendEmptyMessage(0);       }     } .start();   }   public Bitmap getThum(  String fileName){     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     BitmapFactory.Options op=new BitmapFactory.Options();     op.inSampleSize=5;     Bitmap backBm=BitmapFactory.decodeFile(String.valueOf(root) + ""/"" + Main.dirpath+ ""/""+ fileName,op);     return backBm;   } public class ImageAdapter extends BaseAdapter {     public ImageAdapter(    Context c){       GalleryList.this.mContext=c;     }     @Override public int getCount(){       return GalleryList.this.blist.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ImageView imageView;       if (convertView == null) {         imageView=new ImageView(GalleryList.this.mContext);         imageView.setBackgroundColor(-1);         imageView.setLayoutParams(new AbsListView.LayoutParams((GalleryList.sWidth / 3) - 2,GalleryList.sHeight / 4));         imageView.setAdjustViewBounds(false);       }  else {         imageView=(ImageView)convertView;       }       imageView.setImageBitmap((Bitmap)GalleryList.this.blist.get(position));       imageView.setScaleType(ImageView.ScaleType.FIT_XY);       return imageView;     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\GalleryViewItem.code","public class GalleryViewItem extends FrameLayout {   String cp;   private LinearLayout lmenu;   AQuery mAQuery;   private Button mButton1;   private Button mButton2;   private EditText mEdit1;   private GestureDetector mGestureDetector;   private ImageView mImageView;   private TextView mText1;   private TextView mText2;   private boolean motioncheck;   private int pos;   public GalleryViewItem(  Context context,  int position){     super(context);     this.motioncheck=true;     this.mAQuery=new AQuery(this);     this.mGestureDetector=new GestureDetector(new thisGestureDetector(this,null));     this.mImageView=new ImageView(context);     this.mImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);     LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(-1,-1);     params.weight=1.0f;     this.mImageView.setLayoutParams(params);     addView(this.mImageView);     this.cp=""["" + photobook.this.photoList.get(position).cpname + ""] ""+ photobook.this.photoList.get(position).id.substring(0,4)+ ""-""+ photobook.this.photoList.get(position).id.substring(4,6)+ ""-""+ photobook.this.photoList.get(position).id.substring(6,8);     this.lmenu=new LinearLayout(context);     this.lmenu.setOrientation(1);     float pixels=TypedValue.applyDimension(1,80.0f,context.getResources().getDisplayMetrics());     FrameLayout.LayoutParams params1=new FrameLayout.LayoutParams(-1,(int)pixels);     params1.gravity=80;     this.lmenu.setPadding(10,10,10,10);     this.lmenu.setBackgroundResource(R.drawable.mask1);     this.mText1=new TextView(context);     this.mText1.setTextColor(-1);     this.mText1.setTextSize(20.0f);     this.mText1.setGravity(3);     this.mText1.setText(photobook.this.photoList.get(position).title);     this.mText1.setTypeface(photobook.this.face);     this.lmenu.addView(this.mText1);     this.mText2=new TextView(context);     this.mText2.setTextColor(-1);     this.mText2.setTextSize(15.0f);     this.mText2.setGravity(80);     this.mText2.setText(this.cp);     this.mText2.setTypeface(photobook.this.face);     this.lmenu.addView(this.mText2);     addView(this.lmenu,params1);     this.mAQuery.id(this.mImageView).progress(R.id.progress).image(photobook.this.photoList.get(position).image,true,true,0,0,new BitmapAjaxCallback(){       @Override public void callback(      String url,      ImageView iv,      Bitmap bm,      AjaxStatus status){         iv.setImageBitmap(bm);       }     } );     this.mImageView.setOnTouchListener(new View.OnTouchListener(){       @Override public boolean onTouch(      View v,      MotionEvent event){         if (!GalleryViewItem.this.mGestureDetector.onTouchEvent(event)) {           return photobook.this.mGallery.onGalleryTouchEvent(event);         }         return GalleryViewItem.this.mGestureDetector.onTouchEvent(event);       }     } );   } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {     private thisGestureDetector(){     }     thisGestureDetector(    GalleryViewItem galleryViewItem,    thisGestureDetector thisgesturedetector){       this();     }     @Override public boolean onSingleTapUp(    MotionEvent e){       String url=""http://m.media.daum.net/entertain/enews/view?newsid="" + photobook.this.photoList.get(photobook.this.mGallery.getPosition()).id;       Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(url));       intent.addFlags(268435456);       photobook.this.startActivity(intent);       return false;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\gameRank.code","public class gameRank extends AdlibActivity {   static String android_id;   Button btns1;   Button btns2;   Button btns3;   Button btns4;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   ProgressBar top_progress;   String type="""";   ArrayList<rankInfo> mRowList=new ArrayList<>();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.ranklist);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         gameRank.this.finish();       }     } );     this.top_progress=(ProgressBar)findViewById(R.id.top_progress);     this.btns1=(Button)findViewById(R.id.btnsort1);     this.btns2=(Button)findViewById(R.id.btnsort2);     this.btns3=(Button)findViewById(R.id.btnsort3);     this.btns4=(Button)findViewById(R.id.btnsort4);     android_id=Settings.Secure.getString(getContentResolver(),""android_id"");     this.type=""0"";     this.mAQuery=new AQuery((Activity)this);     this.li=(ListView)findViewById(R.id.listrank);     this.li.setFadingEdgeLength(0);     makea();     this.btns1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         gameRank.this.mRowList.clear();         gameRank.this.type=""0"";         gameRank.this.setmenu();         gameRank.this.makea();       }     } );     this.btns2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         gameRank.this.mRowList.clear();         gameRank.this.type=""1"";         gameRank.this.setmenu();         gameRank.this.makea();       }     } );     this.btns3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         gameRank.this.mRowList.clear();         gameRank.this.type=""2"";         gameRank.this.setmenu();         gameRank.this.makea();       }     } );     this.btns4.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         gameRank.this.mRowList.clear();         gameRank.this.type=""3"";         gameRank.this.setmenu();         gameRank.this.makea();       }     } );     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(gameRank.this,(Class<?>)memberTab.class);         myintent.putExtra(""sex"",""8"");         myintent.putExtra(""name"",gameRank.this.mRowList.get(position).parentname);         myintent.putExtra(""search"",gameRank.this.mRowList.get(position).parentname);         myintent.putExtra(""index"",Integer.toString(position));         myintent.putExtra(""artid"",gameRank.this.mRowList.get(position).parentid);         gameRank.this.startActivity(myintent);       }     } );   }   public void setmenu(){     if (""0"".equals(this.type)) {       this.btns1.setBackgroundResource(R.drawable.greentab_ov);       this.btns2.setBackgroundResource(R.drawable.greentab);       this.btns3.setBackgroundResource(R.drawable.greentab);       this.btns4.setBackgroundResource(R.drawable.greentab);       this.btns1.setTextColor(-268019);       this.btns2.setTextColor(-16777216);       this.btns3.setTextColor(-16777216);       this.btns4.setTextColor(-16777216);       return;     }     if (""1"".equals(this.type)) {       this.btns1.setBackgroundResource(R.drawable.greentab);       this.btns2.setBackgroundResource(R.drawable.greentab_ov);       this.btns3.setBackgroundResource(R.drawable.greentab);       this.btns4.setBackgroundResource(R.drawable.greentab);       this.btns1.setTextColor(-16777216);       this.btns2.setTextColor(-268019);       this.btns3.setTextColor(-16777216);       this.btns4.setTextColor(-16777216);       return;     }     if (""2"".equals(this.type)) {       this.btns1.setBackgroundResource(R.drawable.greentab);       this.btns2.setBackgroundResource(R.drawable.greentab);       this.btns3.setBackgroundResource(R.drawable.greentab_ov);       this.btns4.setBackgroundResource(R.drawable.greentab);       this.btns1.setTextColor(-16777216);       this.btns2.setTextColor(-16777216);       this.btns3.setTextColor(-268019);       this.btns4.setTextColor(-16777216);       return;     }     if (""3"".equals(this.type)) {       this.btns1.setBackgroundResource(R.drawable.greentab);       this.btns2.setBackgroundResource(R.drawable.greentab);       this.btns3.setBackgroundResource(R.drawable.greentab);       this.btns4.setBackgroundResource(R.drawable.greentab_ov);       this.btns1.setTextColor(-16777216);       this.btns2.setTextColor(-16777216);       this.btns3.setTextColor(-16777216);       this.btns4.setTextColor(-268019);     }   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.type);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/ranklist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<rankInfo> dataTemp=gameRank.this.setData2(json);         gameRank.this.mRowList=dataTemp;         gameRank.this.mAdapter=new EfficientAdapter(gameRank.this,gameRank.this.mRowList,gameRank.this.type);         gameRank.this.li.setAdapter((ListAdapter)gameRank.this.mAdapter);       }     } );   }   public ArrayList<rankInfo> setData2(  JSONObject json){     ArrayList<rankInfo> data1=new ArrayList<>();     try {       JSONArray localJSONArray=json.optJSONArray(""datalist"");       int cnt=localJSONArray.length();       int n=0;       rankInfo item=null;       while (n < cnt) {         try {           rankInfo item2=new rankInfo();           try {             JSONObject localJSONObject2=localJSONArray.optJSONObject(n);             item2.rank=localJSONObject2.optString(""ROWNUM"");             item2.gname=localJSONObject2.optString(""gname"");             item2.gthum=localJSONObject2.optString(""gthum"");             item2.gurl=localJSONObject2.optString(""gurl"");             item2.nick=localJSONObject2.optString(""nick"");             item2.gmove=localJSONObject2.optString(""gmove"");             item2.gtime=localJSONObject2.optString(""gtime"");             item2.wdate=localJSONObject2.optString(""wdate"");             item2.device=localJSONObject2.optString(""device"");             item2.artid=localJSONObject2.optString(""artid"");             item2.parentid=localJSONObject2.optString(""parentid"");             item2.parentname=localJSONObject2.optString(""parentname"");             item2.musicid=localJSONObject2.optString(""musicid"");           }  catch (          Exception e) {             Log.d(""rank"",e.toString());             Toast.makeText(getApplicationContext(),e.toString(),1000).show();           }           data1.add(item2);           n++;           item=item2;         }  catch (        Exception e2) {         }       }     }  catch (    Exception e3) {     }     return data1;   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     ArrayList<rankInfo> dataS;     Context mContext;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     String type;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.mContext=context;       this.aq=new AQuery(context);     }     public EfficientAdapter(    Context context,    ArrayList<rankInfo> data,    String type1){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;       this.mContext=context;       this.type=type1;       this.aq=new AQuery(context);     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_rank2,(ViewGroup)null);         holder=new ViewHolder();         holder.rank=(TextView)convertView.findViewById(R.id.rank);         holder.nick=(TextView)convertView.findViewById(R.id.nick);         holder.gname=(TextView)convertView.findViewById(R.id.gname);         holder.name=(TextView)convertView.findViewById(R.id.name);         holder.btnstart=(Button)convertView.findViewById(R.id.btnstart);         holder.point=(TextView)convertView.findViewById(R.id.point);         holder.wdate=(TextView)convertView.findViewById(R.id.wdate);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.gback=(LinearLayout)convertView.findViewById(R.id.gback);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       String nick1="" ("" + this.dataS.get(position).nick + "")"";       String point=""ì�´ë�™ : "" + this.dataS.get(position).gmove + ""íšŒ   ì‹œê°„ : ""+ gameRank.getTimefor(this.dataS.get(position).gtime);       holder.rank.setText(this.dataS.get(position).rank);       if ("""".equals(this.dataS.get(position).parentname)) {         holder.gname.setText(this.dataS.get(position).gname);         holder.name.setVisibility(8);       }  else {         holder.name.setVisibility(8);         holder.gname.setText(this.dataS.get(position).parentname);       }       holder.nick.setText(nick1);       holder.point.setText(point);       holder.wdate.setText(this.dataS.get(position).wdate);       holder.icon.setScaleType(ImageView.ScaleType.FIT_XY);       this.aq.id(holder.icon).image(this.dataS.get(position).gthum,true,true,0,0);       if (this.dataS.get(position).device.equals(gameRank.android_id)) {         holder.rank.setTextColor(-16722402);         holder.gback.setBackgroundColor(855692830);       }  else {         holder.rank.setTextColor(-2236963);         holder.gback.setBackgroundColor(4473924);       }       holder.btnstart.setFocusable(false);       holder.btnstart.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View arg0){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)mygrimTest.class);           myintent.putExtra(""type"",EfficientAdapter.this.type);           myintent.putExtra(""gurl"",EfficientAdapter.this.dataS.get(position).gurl);           myintent.putExtra(""gthum"",EfficientAdapter.this.dataS.get(position).gthum);           myintent.putExtra(""artname"",EfficientAdapter.this.dataS.get(position).gname);           myintent.putExtra(""artid"",EfficientAdapter.this.dataS.get(position).artid);           myintent.putExtra(""parentname"",EfficientAdapter.this.dataS.get(position).parentname);           myintent.putExtra(""parentid"",EfficientAdapter.this.dataS.get(position).parentid);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       return convertView;     } static class ViewHolder {       Button btnstart;       LinearLayout gback;       TextView gname;       ImageView icon;       TextView name;       TextView nick;       TextView point;       TextView rank;       TextView wdate;       ViewHolder(){       }     }   }   public static String getTimefor(  String du){     int i=Integer.parseInt(du);     int tmp=i % 100;     int tmpn=i / 100;     int tmp1=tmpn / 60;     int tmp1n=tmpn % 60;     int tmp2=tmp1 / 60;     int tmp2n=tmp1 % 60;     int i2=tmp2 / 60;     int i3=tmp2 % 60;     String timerBuffer=String.format(""%02d:%02d.%02d"",Integer.valueOf(tmp2n),Integer.valueOf(tmp1n),Integer.valueOf(tmp));     return timerBuffer;   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\GmList.code","public class GmList extends Activity {   private static String[] arMenu1;   private static String[] arMenu2;   private static String[] arMenu3;   private static String[] arMenu4;   private static String[] arMenu5;   private static String[] arMenu6;   public static SQLiteDatabase db;   private static String gArtid;   private static String gName;   private static String gSearch;   static String[] membersid;   AQuery aq;   ImageButton btnView;   ImageButton btncyworld;   TextView btncyworld_txt;   ImageButton btnfacebook;   TextView btnfacebook_txt;   ImageButton btnfancaf;   TextView btnfancaf_txt;   ImageButton btnmView;   ImageButton btnmetoday;   TextView btnmetoday_txt;   ImageButton btntwitter;   TextView btntwitter_txt;   ImageButton btnyozm;   public Cursor cursor;   ListView li;   idolDBhelper mHelper;   String[] member;   String[] members;   String sex;   int count=0;   ArrayList<GroupSite> gs=new ArrayList<>();   ArrayList<LocalMemberInfo> memlist=new ArrayList<>();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.plist);     Intent i=getIntent();     gArtid=i.getStringExtra(""artid"");     this.mHelper=new idolDBhelper(this);     db=this.mHelper.getWritableDatabase();     String query=""select groupid,name_kor,name_eng,thum,content_kor,type from idolgroup where groupid ='"" + gArtid + ""' "";     this.cursor=db.rawQuery(query,null);     this.cursor.getCount();     this.cursor.moveToFirst();     Log.d(""test"",query);     gSearch=this.cursor.getString(2);     gName=this.cursor.getString(1);     this.sex=this.cursor.getString(5);     this.cursor=db.rawQuery(String.valueOf(""select groupid as memberid ,name_kor,name_eng, thum,content_kor,'1' as type from idolgroup where groupid='"" + gArtid + ""' "") + "" union all select memberid,name_kor,name_eng, thum,content_kor, '2' as type from idolmember where groupid='"" + gArtid+ ""' "",null);     this.cursor.getCount();     this.cursor.moveToFirst();     while (!this.cursor.isAfterLast()) {       LocalMemberInfo item=new LocalMemberInfo();       item.memberid=this.cursor.getString(0);       item.name=this.cursor.getString(1);       item.search=this.cursor.getString(2);       item.thum=this.cursor.getString(3);       item.content=this.cursor.getString(4);       item.type=this.cursor.getString(5);       this.memlist.add(item);       this.cursor.moveToNext();     }     for (int mcnt=0; mcnt < this.memlist.size(); mcnt++) {       ArrayList<GroupSite> grsite=new ArrayList<>();       this.cursor=db.rawQuery(""select name,link from idolsite where artid ='"" + this.memlist.get(mcnt).memberid + ""' "",null);       this.cursor.getCount();       this.cursor.moveToFirst();       while (!this.cursor.isAfterLast()) {         GroupSite item2=new GroupSite();         item2.name=this.cursor.getString(0);         item2.link=this.cursor.getString(1);         grsite.add(item2);         this.cursor.moveToNext();       }       this.memlist.get(mcnt).site=grsite;     }     this.cursor.close();     db.close();     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setDrawSelectorOnTop(false);     this.li.setAdapter((ListAdapter)new EfficientAdapter(getApplicationContext(),this.memlist,this.sex));     this.member=new String[this.memlist.size() - 1];     this.members=new String[this.memlist.size() - 1];     membersid=new String[this.memlist.size() - 1];     for (int i1=0; i1 < this.memlist.size() - 1; i1++) {       this.member[i1]=this.memlist.get(i1 + 1).name;       this.members[i1]=this.memlist.get(i1 + 1).search;       membersid[i1]=this.memlist.get(i1 + 1).memberid;     }     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(GmList.this,(Class<?>)artimgList.class);         myintent.putExtra(""name"",GmList.this.memlist.get(position).name);         myintent.putExtra(""sname"",GmList.this.memlist.get(position).search);         myintent.putExtra(""artid"",GmList.this.memlist.get(position).memberid);         myintent.putExtra(""parentid"",GmList.gArtid);         myintent.putExtra(""parentname"",GmList.gName);         myintent.putExtra(""parentsname"",GmList.gSearch);         myintent.putExtra(""musicid"",GmList.gArtid);         GmList.this.startActivity(myintent);       }     } );   } private static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<LocalMemberInfo> data;     private Context mContext;     private LayoutInflater mInflater;     String[] member;     String[] members;     String type;     public EfficientAdapter(    Context context){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<LocalMemberInfo> gmember,    String sex){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;       this.data=gmember;       this.type=sex;       this.member=new String[gmember.size() - 1];       this.members=new String[gmember.size() - 1];       for (int i1=0; i1 < gmember.size() - 1; i1++) {         this.member[i1]=gmember.get(i1 + 1).name;         this.members[i1]=gmember.get(i1 + 1).search;       }     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return this.data.get(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_member_new,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.pname);         holder.textM=(TextView)convertView.findViewById(R.id.content);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);         holder.legendicon=(ImageView)convertView.findViewById(R.id.legendicon);         holder.icon_glay=(LinearLayout)convertView.findViewById(R.id.icon_glay);         holder.icon_mlay=(LinearLayout)convertView.findViewById(R.id.icon_mlay);         holder.btn_mlay=(LinearLayout)convertView.findViewById(R.id.btn_mlay);         holder.btn_glay=(LinearLayout)convertView.findViewById(R.id.btn_glay);         holder.main_lay=(LinearLayout)convertView.findViewById(R.id.main_lay);         holder.topgubun=(LinearLayout)convertView.findViewById(R.id.topgubun);         holder.site_lay=(LinearLayout)convertView.findViewById(R.id.site);         holder.btnsView=(ImageButton)convertView.findViewById(R.id.btnsView);         holder.btnmView=(ImageButton)convertView.findViewById(R.id.btnmView);         holder.btngView=(ImageButton)convertView.findViewById(R.id.btngView);         holder.fan=(ImageButton)convertView.findViewById(R.id.fancafe);         holder.face=(ImageButton)convertView.findViewById(R.id.facebook);         holder.twitter=(ImageButton)convertView.findViewById(R.id.twitter);         holder.meto=(ImageButton)convertView.findViewById(R.id.metoday);         holder.cyworld=(ImageButton)convertView.findViewById(R.id.cyworld);         holder.yozm=(ImageButton)convertView.findViewById(R.id.yozm);         holder.fan_txt=(TextView)convertView.findViewById(R.id.fancafe_txt);         holder.face_txt=(TextView)convertView.findViewById(R.id.facebook_txt);         holder.twitter_txt=(TextView)convertView.findViewById(R.id.twitter_txt);         holder.meto_txt=(TextView)convertView.findViewById(R.id.metoday_txt);         holder.cyworld_txt=(TextView)convertView.findViewById(R.id.cyworld_txt);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       if (""1"".equals(this.data.get(position).type)) {         holder.icon_mlay.setVisibility(8);         holder.btn_mlay.setVisibility(8);         holder.icon_glay.setVisibility(0);         holder.btn_glay.setVisibility(0);         holder.topgubun.setVisibility(0);         holder.main_lay.setBackgroundResource(R.drawable.profile_back_01);         this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);         ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});         if (""5"".equals(this.type)) {           holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));           holder.legendicon.setVisibility(0);         }  else {           holder.legendicon.setVisibility(8);         }         holder.btngView.setFocusable(false);         holder.btngView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)artimgList.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);             myintent.putExtra(""sname"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).search);             myintent.putExtra(""artid"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).memberid);             myintent.putExtra(""parentid"",GmList.gArtid);             myintent.putExtra(""parentname"",GmList.gName);             myintent.putExtra(""parentsname"",GmList.gSearch);             myintent.putExtra(""musicid"",GmList.gArtid);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         holder.btnmView.setFocusable(false);         holder.btnmView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)YouTubeAct.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         if (""5"".equals(this.type)) {           holder.text.setTextColor(-131587);           holder.textM.setTextColor(-2236963);         }  else {           holder.text.setTextColor(-137979);           holder.textM.setTextColor(-2236963);         }       }  else {         holder.topgubun.setVisibility(8);         if (position % 2 == 1) {           holder.main_lay.setBackgroundColor(-855310);         }  else         if (""5"".equals(this.type)) {           holder.main_lay.setBackgroundColor(-1776412);         }  else {           holder.main_lay.setBackgroundColor(-1250068);         }         holder.icon_glay.setVisibility(8);         holder.btn_glay.setVisibility(8);         holder.icon_mlay.setVisibility(0);         holder.btn_mlay.setVisibility(0);         holder.legendicon.setVisibility(8);         this.aq.id(holder.icon1).image(this.data.get(position).thum,true,true,200,0);         ColorMatrix cm2=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});         if (""5"".equals(this.type)) {           holder.icon1.setColorFilter(new ColorMatrixColorFilter(cm2));           holder.legendicon.setVisibility(8);         }  else {           holder.legendicon.setVisibility(8);         }         holder.btnsView.setFocusable(false);         holder.btnsView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)artimgList.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).name);             myintent.putExtra(""sname"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).search);             myintent.putExtra(""artid"",((LocalMemberInfo)EfficientAdapter.this.data.get(position)).memberid);             myintent.putExtra(""parentid"",GmList.gArtid);             myintent.putExtra(""parentname"",GmList.gName);             myintent.putExtra(""parentsname"",GmList.gSearch);             myintent.putExtra(""musicid"",GmList.gArtid);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         holder.text.setTextColor(-12303292);         holder.textM.setTextColor(-10066330);       }       holder.text.setText(this.data.get(position).name);       holder.textM.setText(this.data.get(position).content);       if (this.data.get(position).site != null) {         holder.site_lay.setVisibility(0);         holder.fan.setVisibility(8);         holder.fan_txt.setVisibility(8);         holder.face.setVisibility(8);         holder.face_txt.setVisibility(8);         holder.twitter.setVisibility(8);         holder.twitter_txt.setVisibility(8);         holder.meto.setVisibility(8);         holder.meto_txt.setVisibility(8);         holder.cyworld.setVisibility(8);         holder.cyworld_txt.setVisibility(8);         holder.yozm.setVisibility(8);         Iterator<GroupSite> it=this.data.get(position).site.iterator();         while (it.hasNext()) {           final GroupSite gsi=it.next();           if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {             holder.fan.setVisibility(0);             holder.fan_txt.setVisibility(0);             holder.fan.setFocusable(false);             holder.fan.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {             holder.face.setVisibility(0);             holder.face_txt.setVisibility(0);             holder.face.setFocusable(false);             holder.face.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {             holder.meto.setVisibility(0);             holder.meto_txt.setVisibility(0);             holder.meto.setFocusable(false);             holder.meto.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {             holder.twitter.setVisibility(0);             holder.twitter_txt.setVisibility(0);             holder.twitter.setFocusable(false);             holder.twitter.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {             holder.cyworld.setVisibility(0);             holder.cyworld_txt.setVisibility(0);             holder.cyworld.setFocusable(false);             holder.cyworld.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ìš”ì¦˜"")) {             holder.yozm.setVisibility(0);             holder.yozm.setFocusable(false);             holder.yozm.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }         }       }  else {         holder.site_lay.setVisibility(8);         holder.fan.setVisibility(8);         holder.fan_txt.setVisibility(8);         holder.face.setVisibility(8);         holder.face_txt.setVisibility(8);         holder.twitter.setVisibility(8);         holder.twitter_txt.setVisibility(8);         holder.meto.setVisibility(8);         holder.meto_txt.setVisibility(8);         holder.cyworld.setVisibility(8);         holder.cyworld_txt.setVisibility(8);         holder.yozm.setVisibility(8);       }       return convertView;     } static class ViewHolder {       LinearLayout btn_glay;       LinearLayout btn_mlay;       ImageButton btngView;       ImageButton btnmView;       ImageButton btnsView;       ImageButton cyworld;       TextView cyworld_txt;       ImageButton face;       TextView face_txt;       ImageButton fan;       TextView fan_txt;       ImageView icon;       ImageView icon1;       LinearLayout icon_glay;       LinearLayout icon_mlay;       ImageView legendicon;       LinearLayout main_lay;       ImageButton meto;       TextView meto_txt;       LinearLayout site_lay;       TextView text;       TextView textM;       LinearLayout topgubun;       ImageButton twitter;       TextView twitter_txt;       ImageButton yozm;       ViewHolder(){       }     }   } public class LocalMemberInfo {     String content;     String memberid;     String name;     String search;     ArrayList<GroupSite> site;     String thum;     String type;     public LocalMemberInfo(){     }   }   public void setSite(  ArrayList<GroupSite> gs){     Iterator<GroupSite> it=gs.iterator();     while (it.hasNext()) {       final GroupSite gsi=it.next();       if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {         this.btnfancaf.setVisibility(0);         this.btnfancaf_txt.setVisibility(0);         this.btnfancaf.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {         this.btnfacebook.setVisibility(0);         this.btnfacebook_txt.setVisibility(0);         this.btnfacebook.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {         this.btnmetoday.setVisibility(0);         this.btnmetoday_txt.setVisibility(0);         this.btnmetoday.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {         this.btntwitter.setVisibility(0);         this.btntwitter_txt.setVisibility(0);         this.btntwitter.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {         this.btncyworld.setVisibility(0);         this.btncyworld_txt.setVisibility(0);         this.btncyworld.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ìš”ì¦˜"")) {         this.btnyozm.setVisibility(0);         this.btnyozm.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmList.this.startActivity(intent);           }         } );       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\GmListNew.code","public class GmListNew extends Activity {   private static String[] arMenu1;   private static String[] arMenu2;   private static String[] arMenu3;   private static String[] arMenu4;   private static String[] arMenu5;   private static String[] arMenu6;   public static SQLiteDatabase db;   private static String gArtid;   private static String gName;   private static String gSearch;   static String[] membersid;   AQuery aq;   ImageButton btnView;   ImageButton btncyworld;   TextView btncyworld_txt;   ImageButton btnfacebook;   TextView btnfacebook_txt;   ImageButton btnfancaf;   TextView btnfancaf_txt;   ImageButton btnmView;   ImageButton btnmetoday;   TextView btnmetoday_txt;   ImageButton btntwitter;   TextView btntwitter_txt;   ImageButton btnyozm;   public Cursor cursor;   ListView li;   idolDBhelper mHelper;   String[] member;   String[] members;   String sex;   int count=0;   ArrayList<GroupSite> gs=new ArrayList<>();   ArrayList<LocalMemberInfo> memlist=new ArrayList<>();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.plist);     Intent i=getIntent();     gArtid=i.getStringExtra(""artid"");     this.mHelper=new idolDBhelper(this);     db=this.mHelper.getWritableDatabase();     String query=""select groupid,name_kor,name_eng,thum,content_kor,type from idolgroup where groupid ='"" + gArtid + ""' "";     this.cursor=db.rawQuery(query,null);     this.cursor.getCount();     this.cursor.moveToFirst();     gSearch=this.cursor.getString(2);     gName=this.cursor.getString(1);     this.sex=this.cursor.getString(5);     String query2=""select groupid as memberid ,name_kor,name_eng, thum,content_kor,'1' as type from idolgroup where groupid='"" + gArtid + ""' "";     this.cursor=db.rawQuery(String.valueOf(query2) + "" union all select memberid,name_kor,name_eng, thum,content_kor, '2' as type from idolmember where groupid='"" + gArtid+ ""' "",null);     this.cursor.getCount();     this.cursor.moveToFirst();     while (!this.cursor.isAfterLast()) {       LocalMemberInfo item=new LocalMemberInfo();       item.memberid=this.cursor.getString(0);       item.name=this.cursor.getString(1);       item.search=this.cursor.getString(2);       item.thum=this.cursor.getString(3);       item.content=this.cursor.getString(4);       item.type=this.cursor.getString(5);       this.memlist.add(item);       this.cursor.moveToNext();     }     for (int mcnt=0; mcnt < this.memlist.size(); mcnt++) {       ArrayList<GroupSite> grsite=new ArrayList<>();       String query3=""select name,link from idolsite where artid ='"" + this.memlist.get(mcnt).memberid + ""' "";       this.cursor=db.rawQuery(query3,null);       this.cursor.getCount();       this.cursor.moveToFirst();       while (!this.cursor.isAfterLast()) {         GroupSite item2=new GroupSite();         item2.name=this.cursor.getString(0);         item2.link=this.cursor.getString(1);         grsite.add(item2);         this.cursor.moveToNext();       }       this.memlist.get(mcnt).site=grsite;     }     this.cursor.close();     db.close();     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setDrawSelectorOnTop(false);     this.li.setAdapter((ListAdapter)new EfficientAdapter(getApplicationContext(),this.memlist,this.sex));     this.member=new String[this.memlist.size() - 1];     this.members=new String[this.memlist.size() - 1];     membersid=new String[this.memlist.size() - 1];     for (int i1=0; i1 < this.memlist.size() - 1; i1++) {       this.member[i1]=this.memlist.get(i1 + 1).name;       this.members[i1]=this.memlist.get(i1 + 1).search;       membersid[i1]=this.memlist.get(i1 + 1).memberid;     }     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(GmListNew.this,(Class<?>)GroupListmember.class);         myintent.putExtra(""name"",GmListNew.gName);         myintent.putExtra(""search"",GmListNew.gSearch);         if (position != 0) {           myintent.putExtra(""posi"",position);         }  else {           myintent.putExtra(""posi"",position);         }         myintent.putExtra(""memberarry2"",GmListNew.this.members);         myintent.putExtra(""memberarry3"",GmListNew.membersid);         myintent.putExtra(""groupid"",GmListNew.gArtid);         myintent.putExtra(""total"",GmListNew.this.member.length);         GmListNew.this.startActivity(myintent);       }     } );   } private static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<LocalMemberInfo> data;     private Context mContext;     private LayoutInflater mInflater;     String[] member;     String[] members;     String type;     public EfficientAdapter(    Context context){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<LocalMemberInfo> gmember,    String sex){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;       this.data=gmember;       this.type=sex;       this.member=new String[gmember.size() - 1];       this.members=new String[gmember.size() - 1];       for (int i1=0; i1 < gmember.size() - 1; i1++) {         this.member[i1]=gmember.get(i1 + 1).name;         this.members[i1]=gmember.get(i1 + 1).search;       }     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return this.data.get(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_member,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.pname);         holder.textM=(TextView)convertView.findViewById(R.id.content);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);         holder.legendicon=(ImageView)convertView.findViewById(R.id.legendicon);         holder.icon_glay=(LinearLayout)convertView.findViewById(R.id.icon_glay);         holder.icon_mlay=(LinearLayout)convertView.findViewById(R.id.icon_mlay);         holder.btn_mlay=(LinearLayout)convertView.findViewById(R.id.btn_mlay);         holder.btn_glay=(LinearLayout)convertView.findViewById(R.id.btn_glay);         holder.main_lay=(LinearLayout)convertView.findViewById(R.id.main_lay);         holder.site_lay=(LinearLayout)convertView.findViewById(R.id.site);         holder.btnsView=(ImageButton)convertView.findViewById(R.id.btnsView);         holder.btnmView=(ImageButton)convertView.findViewById(R.id.btnmView);         holder.btngView=(ImageButton)convertView.findViewById(R.id.btngView);         holder.fan=(ImageButton)convertView.findViewById(R.id.fancafe);         holder.face=(ImageButton)convertView.findViewById(R.id.facebook);         holder.twitter=(ImageButton)convertView.findViewById(R.id.twitter);         holder.meto=(ImageButton)convertView.findViewById(R.id.metoday);         holder.cyworld=(ImageButton)convertView.findViewById(R.id.cyworld);         holder.yozm=(ImageButton)convertView.findViewById(R.id.yozm);         holder.fan_txt=(TextView)convertView.findViewById(R.id.fancafe_txt);         holder.face_txt=(TextView)convertView.findViewById(R.id.facebook_txt);         holder.twitter_txt=(TextView)convertView.findViewById(R.id.twitter_txt);         holder.meto_txt=(TextView)convertView.findViewById(R.id.metoday_txt);         holder.cyworld_txt=(TextView)convertView.findViewById(R.id.cyworld_txt);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       if (""1"".equals(this.data.get(position).type)) {         holder.icon_mlay.setVisibility(8);         holder.btn_mlay.setVisibility(8);         holder.icon_glay.setVisibility(0);         holder.btn_glay.setVisibility(0);         holder.main_lay.setBackgroundResource(R.drawable.profile_back_01);         this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);         ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});         if (""5"".equals(this.type)) {           holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));           holder.legendicon.setVisibility(0);         }  else {           holder.legendicon.setVisibility(8);         }         holder.btngView.setFocusable(false);         holder.btngView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",GmListNew.gName);             myintent.putExtra(""search"",GmListNew.gSearch);             if (position != 0) {               myintent.putExtra(""posi"",position);             }  else {               myintent.putExtra(""posi"",position);             }             myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);             myintent.putExtra(""memberarry3"",GmListNew.membersid);             myintent.putExtra(""groupid"",GmListNew.gArtid);             myintent.putExtra(""total"",EfficientAdapter.this.member.length);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         holder.btnmView.setFocusable(false);         holder.btnmView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",GmListNew.gName);             myintent.putExtra(""search"",GmListNew.gSearch);             myintent.putExtra(""posi"",EfficientAdapter.this.data.size() + 1);             myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);             myintent.putExtra(""memberarry3"",GmListNew.membersid);             myintent.putExtra(""groupid"",GmListNew.gArtid);             myintent.putExtra(""total"",EfficientAdapter.this.member.length);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         if (""5"".equals(this.type)) {           holder.text.setTextColor(-131587);           holder.textM.setTextColor(-2236963);         }  else {           holder.text.setTextColor(-137979);           holder.textM.setTextColor(-2236963);         }       }  else {         if (position % 2 == 1) {           holder.main_lay.setBackgroundColor(-855310);         }  else         if (""5"".equals(this.type)) {           holder.main_lay.setBackgroundColor(-1776412);         }  else {           holder.main_lay.setBackgroundColor(-659245);         }         holder.icon_glay.setVisibility(8);         holder.btn_glay.setVisibility(8);         holder.icon_mlay.setVisibility(0);         holder.btn_mlay.setVisibility(0);         holder.legendicon.setVisibility(8);         this.aq.id(holder.icon1).image(this.data.get(position).thum,true,true,200,0);         ColorMatrix cm2=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});         if (""5"".equals(this.type)) {           holder.icon1.setColorFilter(new ColorMatrixColorFilter(cm2));           holder.legendicon.setVisibility(8);         }  else {           holder.legendicon.setVisibility(8);         }         holder.btnsView.setFocusable(false);         holder.btnsView.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)GroupListmember.class);             myintent.addFlags(268435456);             myintent.putExtra(""name"",GmListNew.gName);             myintent.putExtra(""search"",GmListNew.gSearch);             if (position != 0) {               myintent.putExtra(""posi"",position);             }  else {               myintent.putExtra(""posi"",position);             }             myintent.putExtra(""memberarry2"",EfficientAdapter.this.members);             myintent.putExtra(""memberarry3"",GmListNew.membersid);             myintent.putExtra(""groupid"",GmListNew.gArtid);             myintent.putExtra(""total"",EfficientAdapter.this.member.length);             EfficientAdapter.this.mContext.startActivity(myintent);           }         } );         holder.text.setTextColor(-12303292);         holder.textM.setTextColor(-10066330);       }       holder.text.setText(this.data.get(position).name);       holder.textM.setText(this.data.get(position).content);       if (this.data.get(position).site != null) {         holder.site_lay.setVisibility(0);         holder.fan.setVisibility(8);         holder.fan_txt.setVisibility(8);         holder.face.setVisibility(8);         holder.face_txt.setVisibility(8);         holder.twitter.setVisibility(8);         holder.twitter_txt.setVisibility(8);         holder.meto.setVisibility(8);         holder.meto_txt.setVisibility(8);         holder.cyworld.setVisibility(8);         holder.cyworld_txt.setVisibility(8);         holder.yozm.setVisibility(8);         Iterator<GroupSite> it=this.data.get(position).site.iterator();         while (it.hasNext()) {           final GroupSite gsi=it.next();           if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {             holder.fan.setVisibility(0);             holder.fan_txt.setVisibility(0);             holder.fan.setFocusable(false);             holder.fan.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {             holder.face.setVisibility(0);             holder.face_txt.setVisibility(0);             holder.face.setFocusable(false);             holder.face.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {             holder.meto.setVisibility(0);             holder.meto_txt.setVisibility(0);             holder.meto.setFocusable(false);             holder.meto.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {             holder.twitter.setVisibility(0);             holder.twitter_txt.setVisibility(0);             holder.twitter.setFocusable(false);             holder.twitter.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {             holder.cyworld.setVisibility(0);             holder.cyworld_txt.setVisibility(0);             holder.cyworld.setFocusable(false);             holder.cyworld.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }  else           if (gsi.name.equals(""ìš”ì¦˜"")) {             holder.yozm.setVisibility(0);             holder.yozm.setFocusable(false);             holder.yozm.setOnClickListener(new View.OnClickListener(){               @Override public void onClick(              View arg0){                 Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));                 intent.addFlags(268435456);                 EfficientAdapter.this.mContext.startActivity(intent);               }             } );           }         }       }  else {         holder.site_lay.setVisibility(8);         holder.fan.setVisibility(8);         holder.fan_txt.setVisibility(8);         holder.face.setVisibility(8);         holder.face_txt.setVisibility(8);         holder.twitter.setVisibility(8);         holder.twitter_txt.setVisibility(8);         holder.meto.setVisibility(8);         holder.meto_txt.setVisibility(8);         holder.cyworld.setVisibility(8);         holder.cyworld_txt.setVisibility(8);         holder.yozm.setVisibility(8);       }       return convertView;     } static class ViewHolder {       LinearLayout btn_glay;       LinearLayout btn_mlay;       ImageButton btngView;       ImageButton btnmView;       ImageButton btnsView;       ImageButton cyworld;       TextView cyworld_txt;       ImageButton face;       TextView face_txt;       ImageButton fan;       TextView fan_txt;       ImageView icon;       ImageView icon1;       LinearLayout icon_glay;       LinearLayout icon_mlay;       ImageView legendicon;       LinearLayout main_lay;       ImageButton meto;       TextView meto_txt;       LinearLayout site_lay;       TextView text;       TextView textM;       ImageButton twitter;       TextView twitter_txt;       ImageButton yozm;       ViewHolder(){       }     }   } public class LocalMemberInfo {     String content;     String memberid;     String name;     String search;     ArrayList<GroupSite> site;     String thum;     String type;     public LocalMemberInfo(){     }   }   public void setSite(  ArrayList<GroupSite> gs){     Iterator<GroupSite> it=gs.iterator();     while (it.hasNext()) {       final GroupSite gsi=it.next();       if (gsi.name.equals(""íŒ¬ì¹´íŽ˜"")) {         this.btnfancaf.setVisibility(0);         this.btnfancaf_txt.setVisibility(0);         this.btnfancaf.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""íŽ˜ì�´ìŠ¤ë¶�"")) {         this.btnfacebook.setVisibility(0);         this.btnfacebook_txt.setVisibility(0);         this.btnfacebook.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ë¯¸íˆ¬ë�°ì�´"")) {         this.btnmetoday.setVisibility(0);         this.btnmetoday_txt.setVisibility(0);         this.btnmetoday.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""íŠ¸ìœ„í„°"")) {         this.btntwitter.setVisibility(0);         this.btntwitter_txt.setVisibility(0);         this.btntwitter.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ë¯¸ë‹ˆí™ˆí”¼"")) {         this.btncyworld.setVisibility(0);         this.btncyworld_txt.setVisibility(0);         this.btncyworld.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }       if (gsi.name.equals(""ìš”ì¦˜"")) {         this.btnyozm.setVisibility(0);         this.btnyozm.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View arg0){             Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(gsi.link));             GmListNew.this.startActivity(intent);           }         } );       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\GroupListmember.code","public class GroupListmember extends FragmentActivity implements CaulyAdViewListener {   private static String[] arMenu1;   private static String[] arMenu2;   private static String[] arMenu3;   private static String[] arMenu4;   private static int cnt;   private static String gName;   private static String gSearch;   private static String gSex;   private static int gindex;   private static String groupId;   private static String[] keyword2;   static ViewPager mPager;   private static String[] memberid11;   private static String[] membername;   private static String[] membername2;   private static String[] membernames;   private static String[] membersid;   static TextView title;   CaulyAdView CaulyadView;   LinearLayout adLayout;   AdView adView;   CaulyAdInfo adinfo;   private AQuery aq;   String keyword;   starImageFragmentAdapter mAdapter;   PageIndicator mIndicator;   Intent myintent;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.grouplist);     ImageButton btnHome=(ImageButton)findViewById(R.id.btnhome);     title=(TextView)findViewById(R.id.title);     Intent i=getIntent();     gSex=i.getStringExtra(""sex"");     gName=i.getStringExtra(""name"");     gSearch=i.getStringExtra(""search"");     groupId=i.getStringExtra(""groupid"");     memberid11=i.getStringArrayExtra(""memberarry3"");     membernames=i.getStringArrayExtra(""memberarry2"");     cnt=i.getIntExtra(""total"",0) + 2;     membername=new String[cnt];     keyword2=new String[cnt];     membersid=new String[cnt];     membername[0]=gName;     keyword2[0]=gSearch;     membersid[0]=groupId;     for (int j=0; j < cnt - 2; j++) {       membername[j + 1]=membernames[j];       keyword2[j + 1]=String.valueOf(gSearch) + "" "" + membernames[j];       membersid[j + 1]=memberid11[j];     }     membername[cnt - 1]=""ë�™ì˜�ìƒ�"";     keyword2[cnt - 1]=gSearch;     membersid[cnt - 1]=groupId;     this.mAdapter=new starImageFragmentAdapter(getSupportFragmentManager(),membername,keyword2,membersid,membername);     mPager=(ViewPager)findViewById(R.id.viewpager);     mPager.setAdapter(this.mAdapter);     this.mIndicator=(TitlePageIndicator)findViewById(R.id.indicator);     this.mIndicator.setViewPager(mPager);     mPager.setCurrentItem(i.getIntExtra(""posi"",0));     btnHome.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         GroupListmember.this.finish();       }     } );   }   public void AdamInit(){     this.adLayout=(LinearLayout)findViewById(R.id.adLayout);     DestoryAd();     this.adView=new AdView(this);     this.adView.setOnAdFailedListener(new AdView.OnAdFailedListener(){       @Override public void OnAdFailed(      AdError arg0,      String arg1){         GroupListmember.this.CaulyInit();       }     } );     this.adView.setClientId(getApplicationContext().getString(R.string.daumid));     this.adView.setRequestInterval(12);     this.adView.setAnimationType(AdView.AnimationType.FLIP_HORIZONTAL);     this.adView.setVisibility(0);     this.adLayout.addView(this.adView);   }   public void CaulyInit(){     this.adLayout=(LinearLayout)findViewById(R.id.adLayout);     DestoryAd();     this.adinfo=new CaulyAdInfoBuilder(getApplicationContext().getString(R.string.caulyid)).effect(""RightSlide"").bannerHeight(""Proportional"").build();     this.CaulyadView=new CaulyAdView(this);     this.CaulyadView.setAdInfo(this.adinfo);     this.CaulyadView.setVisibility(0);     this.CaulyadView.setAdViewListener(this);     this.adLayout.addView(this.CaulyadView);   }   private void DestoryAd(){     this.adLayout.removeAllViews();   }   @Override public void onCloseLandingScreen(  CaulyAdView arg0){   }   @Override public void onFailedToReceiveAd(  CaulyAdView arg0,  int arg1,  String arg2){     AdamInit();   }   @Override public void onReceiveAd(  CaulyAdView v,  boolean status){     if (!status) {       AdamInit();     }   }   @Override public void onShowLandingScreen(  CaulyAdView arg0){   }   @Override public void onPause(){     DestoryAd();     super.onPause();   }   @Override public void onResume(){     super.onResume();     CaulyInit();   }   @Override public void onStart(){     super.onStart();   }   @Override public void onStop(){     super.onStop();     DestoryAd();   }   @Override public void onDestroy(){     DestoryAd();     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\iBoard.code","public class iBoard extends Activity implements AbsListView.OnScrollListener {   private ImageButton btSave;   EditText comment;   private String index;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   TextView mtitle;   private String myNick;   Intent myintent;   private String name;   private String sex;   private int c_page=2;   private int pagesize=10;   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.groupboard);     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     this.sex=i.getStringExtra(""sex"");     this.index=i.getStringExtra(""artid"");     this.name=i.getStringExtra(""name"");     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent3=new Intent(iBoard.this.getApplication(),(Class<?>)Comment.class);         myintent3.putExtra(""content"",((BoardList)iBoard.this.mRowList.get(position)).content);         myintent3.putExtra(""idx"",((BoardList)iBoard.this.mRowList.get(position)).idx);         myintent3.putExtra(""role"",""1"");         myintent3.putExtra(""nick"",((BoardList)iBoard.this.mRowList.get(position)).nick);         myintent3.putExtra(""device"",((BoardList)iBoard.this.mRowList.get(position)).ip);         myintent3.putExtra(""type"",HTMLElementName.I);         iBoard.this.startActivity(myintent3);       }     } );     this.btSave=(ImageButton)findViewById(R.id.btnSave);     this.comment=(EditText)findViewById(R.id.comment);     this.btSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!iBoard.this.comment.getText().toString().trim().equals("""")) {           if (!iBoard.this.myNickSet()) {             Intent i2=new Intent(iBoard.this.getApplicationContext(),(Class<?>)nickset.class);             iBoard.this.startActivity(i2);             return;           }  else {             iBoard.this.setSave();             return;           }         }         Toast.makeText(iBoard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );     this.mLockListView=true;     makea();   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   public void setSave(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""ì €ìž¥ì¤‘ìž…ë‹ˆë‹¤..."",80,true,true,null);     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""sex"",this.sex);     params.put(""type"",HTMLElementName.I);     params.put(""groupid"",this.index);     params.put(""content"",this.comment.getText());     params.put(""device"",deviceId);     params.put(""nick"",this.myNick);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         mProgressHUD.dismiss();         if (json.equals(""0"")) {           iBoard.this.comment.setText((CharSequence)null);           Toast.makeText(iBoard.this.getApplicationContext(),""í•˜ë£¨ 10íšŒê¹Œì§€ ì�‘ì›�ê°€ëŠ¥í•©ë‹ˆë‹¤."",1000).show();         }  else {           iBoard.this.comment.setText((CharSequence)null);           iBoard.this.mRowList.clear();           iBoard.this.makea();         }       }     } );   }   private void makeaAdd(  int page){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""sex"",this.sex);     params.put(""groupid"",this.index);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/iboardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<BoardList> mTemp=iBoard.this.setData2(json);         iBoard.this.mRowList.addAll(mTemp);         if (mTemp.size() < iBoard.this.pagesize) {           iBoard.this.mLockListView=true;         }  else {           iBoard.this.mLockListView=false;         }         iBoard.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""groupid"",this.index);     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/iboardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<BoardList> mTemp=iBoard.this.setData2(json);         iBoard.this.mRowList=mTemp;         if (mTemp.size() < iBoard.this.pagesize) {           iBoard.this.mLockListView=true;         }  else {           iBoard.this.mLockListView=false;         }         iBoard.this.c_page=2;         iBoard.this.mAdapter=new EfficientAdapter(iBoard.this,iBoard.this.mRowList);         iBoard.this.li.setAdapter((ListAdapter)iBoard.this.mAdapter);       }     } );   } public static class EfficientAdapter extends BaseAdapter {     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_boardnew,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.textC=(TextView)convertView.findViewById(R.id.textC);         holder.textNic=(TextView)convertView.findViewById(R.id.textNic);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text1.setText(this.dataS.get(position).content);       holder.text2.setText(this.dataS.get(position).date.trim());       holder.textC.setVisibility(0);       holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");       holder.textNic.setText(this.dataS.get(position).nick);       return convertView;     } static class ViewHolder {       TextView text1;       TextView text2;       TextView textC;       TextView textNic;       LinearLayout textline;       ViewHolder(){       }     }   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.ip=localJSONObject2.optString(""device"");         item.idx=localJSONObject2.optString(""idx"");         item.cm_cnt=localJSONObject2.optString(""cnt"");         item.nick=localJSONObject2.optString(""nickname"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class BoardList {     String cm_cnt;     String content;     String date;     String hit;     String idx;     String ip;     String nick;     BoardList(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\id.code","public static final class id {   public static final int Lay_Content=0x7f050094;   public static final int LinearLayout01=0x7f0500d3;   public static final int LinearLayout1=0x7f050062;   public static final int adLayout=0x7f05001c;   public static final int ads=0x7f05001f;   public static final int agencyname=0x7f050084;   public static final int albumskin=0x7f05000a;   public static final int basefrm=0x7f050119;   public static final int bgfrm=0x7f05007b;   public static final int bottom_progress=0x7f05000c;   public static final int btnClose=0x7f050102;   public static final int btnNext=0x7f050121;   public static final int btnPre=0x7f050120;   public static final int btnSave=0x7f050064;   public static final int btnShare=0x7f0500ce;   public static final int btnView=0x7f0500c9;   public static final int btnWall=0x7f0500cd;   public static final int btnWallpaper=0x7f05011f;   public static final int btn_com1=0x7f050041;   public static final int btn_com2=0x7f050042;   public static final int btn_com3=0x7f050043;   public static final int btn_com4=0x7f050047;   public static final int btn_com5=0x7f050048;   public static final int btn_com6=0x7f050044;   public static final int btn_com7=0x7f050046;   public static final int btn_com8=0x7f050045;   public static final int btn_game1=0x7f05004a;   public static final int btn_game2=0x7f05004b;   public static final int btn_game3=0x7f05004c;   public static final int btn_glay=0x7f05009c;   public static final int btn_gogo=0x7f0500c2;   public static final int btn_idol1=0x7f050039;   public static final int btn_idol2=0x7f050037;   public static final int btn_idol3=0x7f050038;   public static final int btn_idol4=0x7f050056;   public static final int btn_idol5=0x7f05003a;   public static final int btn_idol6=0x7f05003b;   public static final int btn_idol7=0x7f050036;   public static final int btn_mlay=0x7f0500a1;   public static final int btn_mypage1=0x7f050052;   public static final int btn_mypage2=0x7f050053;   public static final int btn_mypage3=0x7f050054;   public static final int btn_mypage4=0x7f050055;   public static final int btn_news1=0x7f050050;   public static final int btn_news2=0x7f05004e;   public static final int btn_news3=0x7f05004f;   public static final int btn_rank1=0x7f05003d;   public static final int btn_rank2=0x7f05003e;   public static final int btn_rank3=0x7f05003f;   public static final int btnapp=0x7f0500e5;   public static final int btnban1=0x7f05002c;   public static final int btnban2=0x7f05002d;   public static final int btnban3=0x7f05002e;   public static final int btnban4=0x7f05002f;   public static final int btnban5=0x7f050030;   public static final int btnban6=0x7f050031;   public static final int btnban7=0x7f050032;   public static final int btnban8=0x7f050033;   public static final int btnban9=0x7f050034;   public static final int btncancel=0x7f0500ea;   public static final int btnclose=0x7f05011e;   public static final int btnday=0x7f05007f;   public static final int btndel=0x7f0500dd;   public static final int btndelete=0x7f0500ee;   public static final int btnend=0x7f05005e;   public static final int btnfan=0x7f050098;   public static final int btnfav=0x7f050099;   public static final int btngView=0x7f05009d;   public static final int btnget=0x7f0500d9;   public static final int btnhome=0x7f050015;   public static final int btnisearch=0x7f050020;   public static final int btniset=0x7f050022;   public static final int btnmView=0x7f05009e;   public static final int btnmem=0x7f050117;   public static final int btnmonth=0x7f050081;   public static final int btnmrank=0x7f05007d;   public static final int btnmsg=0x7f05005b;   public static final int btnmstart=0x7f05007c;   public static final int btnnext=0x7f05001b;   public static final int btnnotify=0x7f05005a;   public static final int btnprev=0x7f05001a;   public static final int btnre=0x7f050019;   public static final int btnsView=0x7f0500a2;   public static final int btnsave=0x7f05005d;   public static final int btnsearch=0x7f050017;   public static final int btnsel1=0x7f050113;   public static final int btnsel2=0x7f050114;   public static final int btnsend=0x7f0500da;   public static final int btnshare=0x7f0500e7;   public static final int btnsort1=0x7f050104;   public static final int btnsort2=0x7f050105;   public static final int btnsort3=0x7f050106;   public static final int btnsort4=0x7f050107;   public static final int btnsp=0x7f0500d1;   public static final int btnstart=0x7f05007e;   public static final int btnsug=0x7f050109;   public static final int btntop1=0x7f050024;   public static final int btntop2=0x7f050025;   public static final int btntop3=0x7f050026;   public static final int btntop4=0x7f050027;   public static final int btntop5=0x7f050028;   public static final int btntop6=0x7f050029;   public static final int btntop7=0x7f05002a;   public static final int btnwallpaper=0x7f0500e6;   public static final int btnweek=0x7f050080;   public static final int changecnt=0x7f0500f6;   public static final int chat_top=0x7f050013;   public static final int comment=0x7f05005c;   public static final int container=0x7f050010;   public static final int container2=0x7f050011;   public static final int container3=0x7f050012;   public static final int content=0x7f0500a5;   public static final int cpage=0x7f0500cf;   public static final int cyworld=0x7f0500af;   public static final int cyworld_txt=0x7f0500b0;   public static final int daum=0x7f0500d7;   public static final int dowprogress=0x7f0500cc;   public static final int email=0x7f050103;   public static final int end=0x7f050111;   public static final int endmenu=0x7f0500ff;   public static final int eventview=0x7f050123;   public static final int facebook=0x7f0500a9;   public static final int facebook_txt=0x7f0500aa;   public static final int fancafe=0x7f0500a7;   public static final int fancafe_txt=0x7f0500a8;   public static final int female=0x7f0500ed;   public static final int fnick=0x7f0500dc;   public static final int frm1=0x7f05002b;   public static final int frm2=0x7f050035;   public static final int frm3=0x7f05003c;   public static final int frm4=0x7f050040;   public static final int frm5=0x7f050049;   public static final int frm6=0x7f05004d;   public static final int frm7=0x7f050051;   public static final int frmall=0x7f05000e;   public static final int galleryf=0x7f0500cb;   public static final int gamebg=0x7f050079;   public static final int gamecancel=0x7f0500fe;   public static final int gameend=0x7f050100;   public static final int gamemenu=0x7f0500d0;   public static final int gamename1=0x7f05006a;   public static final int gamename2=0x7f05006b;   public static final int gameopt=0x7f0500f9;   public static final int gamepan=0x7f0500e0;   public static final int gamerestart=0x7f050101;   public static final int gamestart=0x7f0500fd;   public static final int gamestatus=0x7f0500f5;   public static final int gback=0x7f0500bb;   public static final int gname=0x7f0500bd;   public static final int graph=0x7f050091;   public static final int handle=0x7f0500e3;   public static final int horizontal=0x7f050000;   public static final int hot=0x7f050095;   public static final int icon=0x7f050085;   public static final int icon1=0x7f0500a0;   public static final int icon2=0x7f0500bf;   public static final int icon_glay=0x7f05009b;   public static final int icon_line=0x7f0500b9;   public static final int icon_mlay=0x7f05009f;   public static final int image_back=0x7f0500ba;   public static final int img1st=0x7f050071;   public static final int img2st=0x7f050073;   public static final int img3st=0x7f050075;   public static final int img4st=0x7f050077;   public static final int imgChartMedal=0x7f050090;   public static final int imgChartTop=0x7f05008e;   public static final int imgsex=0x7f0500b6;   public static final int indicator=0x7f05001d;   public static final int inew=0x7f0500b5;   public static final int interval_bg=0x7f05007a;   public static final int isize=0x7f050115;   public static final int ivRivalProcess=0x7f0500c0;   public static final int keyword=0x7f050016;   public static final int leftfrm=0x7f050066;   public static final int leftimage=0x7f050067;   public static final int leftname=0x7f050068;   public static final int leftwin=0x7f050069;   public static final int legendicon=0x7f0500a3;   public static final int list=0x7f050061;   public static final int listchart=0x7f050058;   public static final int listcomment=0x7f05005f;   public static final int listgirl=0x7f050065;   public static final int listgirle=0x7f050009;   public static final int listgirlhot=0x7f050008;   public static final int listmy=0x7f05000d;   public static final int listnews=0x7f0500e8;   public static final int listrank=0x7f050108;   public static final int listsong=0x7f05000b;   public static final int listvideo=0x7f050122;   public static final int lline1=0x7f0500c3;   public static final int lline2=0x7f050093;   public static final int ltext1=0x7f0500c4;   public static final int ltext2=0x7f0500c6;   public static final int ltextNic=0x7f0500c5;   public static final int main_lay=0x7f05009a;   public static final int mainprogress=0x7f0500f0;   public static final int male=0x7f0500ec;   public static final int match=0x7f0500f7;   public static final int mcontainer=0x7f05011d;   public static final int memberlist=0x7f05011b;   public static final int memberlistani=0x7f05011a;   public static final int membertanskin=0x7f0500ef;   public static final int menu_image=0x7f0500e4;   public static final int message=0x7f0500f1;   public static final int metoday=0x7f0500ad;   public static final int metoday_txt=0x7f0500ae;   public static final int mscroll=0x7f05011c;   public static final int myGrid=0x7f050063;   public static final int myView1=0x7f0500e1;   public static final int mynick=0x7f0500df;   public static final int myweb=0x7f0500e9;   public static final int name=0x7f0500b4;   public static final int name1=0x7f05010b;   public static final int name1st=0x7f050072;   public static final int name2=0x7f05010d;   public static final int name2st=0x7f050074;   public static final int name3st=0x7f050076;   public static final int name4st=0x7f050078;   public static final int nick=0x7f0500b7;   public static final int nicktitle=0x7f0500db;   public static final int none=0x7f050002;   public static final int opt34=0x7f0500fb;   public static final int opt46=0x7f0500fa;   public static final int opt57=0x7f0500fc;   public static final int pan11=0x7f0500f3;   public static final int panfrm=0x7f0500f2;   public static final int per1=0x7f05010c;   public static final int per2=0x7f05010e;   public static final int play=0x7f0500d5;   public static final int pname=0x7f0500a4;   public static final int point=0x7f0500be;   public static final int progress=0x7f050018;   public static final int rank=0x7f05008f;   public static final int rank_top=0x7f0500bc;   public static final int ranklist=0x7f050083;   public static final int result=0x7f0500d8;   public static final int rightfrm=0x7f05006c;   public static final int rightimage=0x7f05006d;   public static final int rightname=0x7f05006e;   public static final int rightwin=0x7f05006f;   public static final int rivaltitle=0x7f0500c1;   public static final int rline1=0x7f0500c7;   public static final int rline2=0x7f0500c8;   public static final int scroll_container=0x7f05000f;   public static final int seekbar=0x7f0500d4;   public static final int seekbar1=0x7f05010f;   public static final int seekbar2=0x7f050110;   public static final int sex=0x7f0500eb;   public static final int site=0x7f0500a6;   public static final int skinmember11=0x7f0500d2;   public static final int sleft=0x7f050006;   public static final int slide=0x7f0500e2;   public static final int sright=0x7f050007;   public static final int starbtn_left=0x7f050116;   public static final int starbtn_right=0x7f050118;   public static final int startmenu=0x7f0500f8;   public static final int stop=0x7f0500d6;   public static final int subtitle=0x7f050060;   public static final int text=0x7f050086;   public static final int text1=0x7f05008b;   public static final int text2=0x7f050087;   public static final int text3=0x7f050088;   public static final int textC=0x7f05008c;   public static final int textNic=0x7f05008d;   public static final int textline=0x7f05008a;   public static final int thum1=0x7f05010a;   public static final int thum2=0x7f050112;   public static final int thumprog=0x7f0500b3;   public static final int time=0x7f0500ca;   public static final int timg=0x7f0500f4;   public static final int title=0x7f050014;   public static final int title1=0x7f050021;   public static final int top_progress=0x7f050082;   public static final int topgubun=0x7f0500b2;   public static final int topmenu=0x7f050023;   public static final int totalcnt=0x7f050005;   public static final int triangle=0x7f050003;   public static final int twitter=0x7f0500ab;   public static final int twitter_txt=0x7f0500ac;   public static final int txtChartTitle=0x7f050057;   public static final int txtContent=0x7f050059;   public static final int txtcontent=0x7f050097;   public static final int txtname=0x7f050096;   public static final int txtnick=0x7f0500de;   public static final int underline=0x7f050004;   public static final int updown=0x7f050092;   public static final int vertical=0x7f050001;   public static final int viewpager=0x7f05001e;   public static final int viewwinner=0x7f050070;   public static final int wdate=0x7f0500b8;   public static final int widget46=0x7f050089;   public static final int yozm=0x7f0500b1; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\ImageAdapter.code","public class ImageAdapter extends BaseAdapter {   public ImageAdapter(  Context c){     GalleryList.this.mContext=c;   }   @Override public int getCount(){     return GalleryList.this.blist.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ImageView imageView;     if (convertView == null) {       imageView=new ImageView(GalleryList.this.mContext);       imageView.setBackgroundColor(-1);       imageView.setLayoutParams(new AbsListView.LayoutParams((GalleryList.sWidth / 3) - 2,GalleryList.sHeight / 4));       imageView.setAdjustViewBounds(false);     }  else {       imageView=(ImageView)convertView;     }     imageView.setImageBitmap((Bitmap)GalleryList.this.blist.get(position));     imageView.setScaleType(ImageView.ScaleType.FIT_XY);     return imageView;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\integer.code","public static final class integer {   public static final int default_circle_indicator_orientation=0x7f080000;   public static final int default_title_indicator_footer_indicator_style=0x7f080001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\intro.code","public class intro extends Activity {   public static int sHeight;   public static int sWidth;   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     getWindow().requestFeature(1);     WindowManager wm=(WindowManager)getSystemService(""window"");     Display dsp=wm.getDefaultDisplay();     sWidth=dsp.getWidth();     sHeight=dsp.getHeight();     setContentView(new SampleView(this));     getEvent();     initialize();   }   public void getEvent(){     AQuery mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     mAQuery.ajax(""http://180.71.58.225/app/idol/eventcheck.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         String eventUrl=json.trim();         if (!""N"".equals(eventUrl)) {           Intent intent=new Intent(intro.this,(Class<?>)eventWindow.class);           intent.putExtra(""url"",eventUrl);           intro.this.startActivity(intent);         }       }     } );   }   @Override public void onDestroy(){     super.onDestroy();   }   @Override public boolean onTouchEvent(  MotionEvent event){     if (event.getAction() == 0) {       finish();       return true;     }     return true;   }   private void initialize(){     Handler handler=new Handler(){       @Override public void handleMessage(      Message msg){         intro.this.finish();       }     } ;     handler.sendEmptyMessageDelayed(0,3000L);   } private static class SampleView extends View {     Rect dst;     private Bitmap mBitmap;     public SampleView(    Context context){       super(context);       this.dst=new Rect();       InputStream is=context.getResources().openRawResource(R.drawable.intro);       this.mBitmap=BitmapFactory.decodeStream(is);       this.dst.set(0,0,intro.sWidth,intro.sHeight - 36);     }     @Override protected void onDraw(    Canvas canvas){       canvas.drawColor(-1);       Paint p=new Paint();       canvas.drawBitmap(this.mBitmap,(Rect)null,this.dst,p);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\JavaScriptInterface.code","public class JavaScriptInterface {   Context mContext;   JavaScriptInterface(  Context c){     this.mContext=c;   }   public void launchMarket(  String appId){     boolean Check=false;     PackageManager mPm=this.mContext.getPackageManager();     List<ApplicationInfo> mInstalledPkgList=mPm.getInstalledApplications(8192);     for (    ApplicationInfo appFmc : mInstalledPkgList) {       if (appFmc.packageName.equals(appId)) {         Check=true;         Intent intent=this.mContext.getPackageManager().getLaunchIntentForPackage(appId);         this.mContext.startActivity(intent);       }     }     if (!Check) {       Intent marketLaunch=new Intent(""android.intent.action.VIEW"");       marketLaunch.setData(Uri.parse(""market://details?id="" + appId));       this.mContext.startActivity(marketLaunch);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\layout.code","public static final class layout {   public static final int agencylist=0x7f030000;   public static final int albumlist=0x7f030001;   public static final int artimglist=0x7f030002;   public static final int artlist=0x7f030003;   public static final int bar_spinner=0x7f030004;   public static final int basefrag=0x7f030005;   public static final int basemain=0x7f030006;   public static final int basemainback=0x7f030007;   public static final int chart=0x7f030008;   public static final int comment=0x7f030009;   public static final int freeboard=0x7f03000a;   public static final int gallery=0x7f03000b;   public static final int groupboard=0x7f03000c;   public static final int grouplist=0x7f03000d;   public static final int idollist=0x7f03000e;   public static final int idream=0x7f03000f;   public static final int idreamidol=0x7f030010;   public static final int idreammain=0x7f030011;   public static final int idreamrank=0x7f030012;   public static final int image_bestfragment=0x7f030013;   public static final int image_fragment=0x7f030014;   public static final int legendlist=0x7f030015;   public static final int list_item_agency=0x7f030016;   public static final int list_item_album=0x7f030017;   public static final int list_item_board=0x7f030018;   public static final int list_item_boardnew=0x7f030019;   public static final int list_item_chart=0x7f03001a;   public static final int list_item_comment=0x7f03001b;   public static final int list_item_freeboard=0x7f03001c;   public static final int list_item_idol=0x7f03001d;   public static final int list_item_legend=0x7f03001e;   public static final int list_item_member=0x7f03001f;   public static final int list_item_member_new=0x7f030020;   public static final int list_item_memlist=0x7f030021;   public static final int list_item_msg=0x7f030022;   public static final int list_item_news=0x7f030023;   public static final int list_item_notice=0x7f030024;   public static final int list_item_qboard=0x7f030025;   public static final int list_item_rank=0x7f030026;   public static final int list_item_rank2=0x7f030027;   public static final int list_item_rankdream=0x7f030028;   public static final int list_item_rival=0x7f030029;   public static final int list_item_rivalboard=0x7f03002a;   public static final int list_item_song=0x7f03002b;   public static final int list_item_video=0x7f03002c;   public static final int maguimageview=0x7f03002d;   public static final int membertab=0x7f03002e;   public static final int mp3play=0x7f03002f;   public static final int msglist=0x7f030030;   public static final int msgview=0x7f030031;   public static final int msgwrite=0x7f030032;   public static final int mygrimtest=0x7f030033;   public static final int mylist=0x7f030034;   public static final int myview2=0x7f030035;   public static final int newalbumlist=0x7f030036;   public static final int newidol=0x7f030037;   public static final int news=0x7f030038;   public static final int news_view=0x7f030039;   public static final int nickset=0x7f03003a;   public static final int noticeboard=0x7f03003b;   public static final int photobook=0x7f03003c;   public static final int plist=0x7f03003d;   public static final int progress_hud=0x7f03003e;   public static final int puzzleviewfull=0x7f03003f;   public static final int qaboard=0x7f030040;   public static final int qboard=0x7f030041;   public static final int ranklist=0x7f030042;   public static final int rival=0x7f030043;   public static final int rivalboard=0x7f030044;   public static final int setting=0x7f030045;   public static final int songlist=0x7f030046;   public static final int starbase=0x7f030047;   public static final int storage=0x7f030048;   public static final int tab_row_item=0x7f030049;   public static final int tab_row_item2=0x7f03004a;   public static final int videolist=0x7f03004b;   public static final int vpi__tab=0x7f03004c;   public static final int webevent=0x7f03004d;   public static final int words=0x7f03004e;   public static final int youtube=0x7f03004f; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\LocalMemberInfo.code","public class LocalMemberInfo {   String content;   String memberid;   String name;   String search;   ArrayList<GroupSite> site;   String thum;   String type;   public LocalMemberInfo(){   } } public class LocalMemberInfo {   String content;   String memberid;   String name;   String search;   ArrayList<GroupSite> site;   String thum;   String type;   public LocalMemberInfo(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\maguimageView.code","public class maguimageView extends AdlibActivity {   private static ProgressDialog dialog;   static int sHeight;   static int sWidth;   String artid;   LinearLayout botm;   Button btnNext;   Button btnPrev;   Button btnRe;   Button btnSave;   Button btnShare;   Button btnStart;   Button btnWall;   int c_pos;   TextView cpage;   ProgressBar downprogress;   ImageViewTouch gallery;   LinearLayout gamemenu;   String itemlink;   String itemname;   String itemno;   private GestureDetector mGestureDetector;   String musicid;   String parentid;   String parentname;   Spinner sp1;   TextView title;   FrameLayout topm;   private final int swipe_min_distance=120;   private final int swipe_max_off_path=250;   private final int swipe_threshold_veloicty=600;   ArrayList<String> urldata=new ArrayList<>();   ArrayList<String> thumdata=new ArrayList<>();   String artname="""";   private String dirpath=""neonIdol"";   private Bitmap backBm=null;   String imageName="""";   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       if (maguimageView.this.backBm != null) {         maguimageView.this.gallery.setImageBitmap(maguimageView.this.backBm);         maguimageView.this.downprogress.setVisibility(8);       }  else {         maguimageView.this.downprogress.setVisibility(8);       }     }   } ;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     setContentView(R.layout.maguimageview);     initAds();     setAdsContainer(R.id.ads);     this.cpage=(TextView)findViewById(R.id.cpage);     this.btnPrev=(Button)findViewById(R.id.btnprev);     this.btnNext=(Button)findViewById(R.id.btnnext);     this.btnRe=(Button)findViewById(R.id.btnre);     this.btnSave=(Button)findViewById(R.id.btnSave);     this.btnWall=(Button)findViewById(R.id.btnWall);     this.btnShare=(Button)findViewById(R.id.btnShare);     this.btnStart=(Button)findViewById(R.id.btnstart);     this.topm=(FrameLayout)findViewById(R.id.topmenu);     this.gamemenu=(LinearLayout)findViewById(R.id.gamemenu);     Drawable m1=this.topm.getBackground();     m1.setAlpha(200);     this.title=(TextView)findViewById(R.id.title);     this.gallery=(ImageViewTouch)findViewById(R.id.galleryf);     this.downprogress=(ProgressBar)findViewById(R.id.dowprogress);     Intent i=getIntent();     this.c_pos=i.getIntExtra(""cpos"",0);     this.urldata=i.getStringArrayListExtra(""datalist"");     this.thumdata=i.getStringArrayListExtra(""datalist2"");     this.artname=i.getStringExtra(""name"");     this.artid=i.getStringExtra(""artid"");     this.parentname=i.getStringExtra(""parentname"");     this.parentid=i.getStringExtra(""parentid"");     this.musicid=i.getStringExtra(""musicid"");     this.imageName=String.valueOf(this.artname) + Long.toString(System.currentTimeMillis());     this.mGestureDetector=new GestureDetector(new thisGestureDetector(this,null));     getImage();     this.sp1=(Spinner)findViewById(R.id.btnsp);     ArrayAdapter apt1=ArrayAdapter.createFromResource(this,R.array.gamepan_array,R.layout.bar_spinner);     apt1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);     this.sp1.setAdapter((SpinnerAdapter)apt1);     this.btnStart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         int gamex=3;         int gamey=5;         String type=null;         maguimageView.this.gallery.setDrawingCacheEnabled(true);         if (maguimageView.this.sp1.getSelectedItemPosition() == 0) {           gamex=3;           gamey=5;           type=""0"";         }  else         if (maguimageView.this.sp1.getSelectedItemPosition() == 1) {           gamex=4;           gamey=6;           type=""1"";         }  else         if (maguimageView.this.sp1.getSelectedItemPosition() == 2) {           gamex=5;           gamey=7;           type=""2"";         }  else         if (maguimageView.this.sp1.getSelectedItemPosition() == 3) {           gamex=6;           gamey=8;           type=""3"";         }         Bitmap bmp=maguimageView.this.gallery.getDrawingCache();         ByteArrayOutputStream byteArray=new ByteArrayOutputStream();         bmp.compress(Bitmap.CompressFormat.JPEG,80,byteArray);         Intent pintent=new Intent(maguimageView.this.getApplicationContext(),(Class<?>)pviewfull.class);         pintent.putExtra(""jpgimg"",byteArray.toByteArray());         pintent.putExtra(""gamex"",gamex);         pintent.putExtra(""gamey"",gamey);         pintent.putExtra(""sx"",maguimageView.sWidth);         pintent.putExtra(""sy"",maguimageView.sHeight);         pintent.putExtra(""artid"",maguimageView.this.artid);         pintent.putExtra(""type"",type);         pintent.putExtra(""gurl"",maguimageView.this.urldata.get(maguimageView.this.c_pos).toString());         pintent.putExtra(""gthum"",maguimageView.this.thumdata.get(maguimageView.this.c_pos).toString());         pintent.putExtra(""gname"",maguimageView.this.artname);         pintent.putExtra(""parentname"",maguimageView.this.parentname);         pintent.putExtra(""parentid"",maguimageView.this.parentid);         pintent.putExtra(""musicid"",maguimageView.this.musicid);         maguimageView.this.startActivity(pintent);         maguimageView.this.gallery.setDrawingCacheEnabled(false);       }     } );     this.btnNext.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         maguimageView.this.moveNext();       }     } );     this.btnPrev.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         maguimageView.this.movePrev();       }     } );     this.btnRe.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         maguimageView.this.getImage();       }     } );     this.btnSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         maguimageView.this.imageName=String.valueOf(maguimageView.this.artname) + Long.toString(System.currentTimeMillis());         maguimageView.this.SaveBitmapToFileCache(maguimageView.this.backBm,maguimageView.this.imageName);         Toast.makeText(maguimageView.this.getApplicationContext(),""SDCARD "" + Main.dirpath + "" ë””ë ‰í† ë¦¬ì—� ì €ìž¥ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     this.btnWall.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         maguimageView.this.wallpaerSet();         Toast.makeText(maguimageView.this.getApplicationContext(),""ë°°ê²½í™”ë©´ìœ¼ë¡œ ì§€ì •ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     this.gallery.setOnTouchListener(new View.OnTouchListener(){       @Override public boolean onTouch(      View v,      MotionEvent event){         boolean consumed=maguimageView.this.mGestureDetector.onTouchEvent(event);         return consumed;       }     } );     this.btnShare.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (maguimageView.this.gamemenu.getVisibility() == 0) {           maguimageView.this.gamemenu.setVisibility(8);         }  else {           maguimageView.this.gamemenu.setVisibility(0);         }       }     } );   }   void getImage(){     ViewUnbindHelper.unbindReferences(this.gallery);     AQuery mAQuery=new AQuery((Activity)this);     AjaxCallback.setTimeout(120000);     mAQuery.id(R.id.galleryf).progress(R.id.progress).image(this.urldata.get(this.c_pos),true,true,0,0,new BitmapAjaxCallback(){       @Override public void callback(      String url,      ImageView iv,      Bitmap bm,      AjaxStatus status){         iv.setImageBitmap(bm);         maguimageView.this.backBm=bm;       }     } );   }   void getImage1(){     ViewUnbindHelper.unbindReferences(this.gallery);     this.downprogress.setVisibility(8);     new Thread(){       @Override public void run(){         maguimageView.this.backBm=null;         maguimageView.this.backBm=maguimageView.urlTobitmap(maguimageView.this.urldata.get(maguimageView.this.c_pos));         maguimageView.this.handler.sendEmptyMessage(0);       }     } .start();   }   public static Bitmap urlTobitmap(  String _photoURL){     URL url;     HttpGet httpRequest;     Bitmap bitmap=null;     try {       url=new URL(_photoURL);       httpRequest=null;     }  catch (    MalformedURLException e) {       e=e;     } catch (    IOException e2) {       e=e2;     }     try {       try {         HttpGet httpRequest2=new HttpGet(url.toURI());         httpRequest=httpRequest2;       }  catch (      Exception e3) {         e3.printStackTrace();       }       HttpClient httpclient=new DefaultHttpClient();       HttpResponse response=httpclient.execute(httpRequest);       HttpEntity entity=response.getEntity();       BufferedHttpEntity bufHttpEntity=new BufferedHttpEntity(entity);       InputStream instream=bufHttpEntity.getContent();       bitmap=BitmapFactory.decodeStream(instream);       return bitmap;     }  catch (    MalformedURLException e4) {       e=e4;       e.printStackTrace();       return bitmap;     } catch (    IOException e5) {       e=e5;       e.printStackTrace();       return bitmap;     }   }   @SuppressLint({""ServiceCast""}) public void wallpaerSet(){     this.gallery.setDrawingCacheEnabled(true);     try {       WallpaperManager wallpaperManager=(WallpaperManager)getSystemService(""wallpaper"");       Bitmap bmp=this.gallery.getDrawingCache();       wallpaperManager.setBitmap(bmp);       wallpaperManager.suggestDesiredDimensions((int)(sWidth * 1.2d),sHeight);     }  catch (    IOException e) {       e.printStackTrace();     }     this.gallery.setDrawingCacheEnabled(false);   } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {     private thisGestureDetector(){     }     thisGestureDetector(    maguimageView maguimageview,    thisGestureDetector thisgesturedetector){       this();     }     @Override public boolean onDoubleTap(    MotionEvent e){       maguimageView.this.gallery.initImgPos();       return false;     }     @Override public boolean onSingleTapUp(    MotionEvent e){       maguimageView.this.setMenu();       return false;     }     @Override public boolean onFling(    MotionEvent e1,    MotionEvent e2,    float velocityX,    float velocityY){       if (Math.abs(e1.getY() - e2.getY()) > 250.0f) {         return false;       }       if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 600.0f) {         maguimageView.this.movePrev();       }       if (e1.getX() - e2.getX() <= 120.0f || Math.abs(velocityX) <= 600.0f) {         return false;       }       maguimageView.this.moveNext();       return false;     }   }   public void movePrev(){     if (this.c_pos == 0) {       this.c_pos=this.urldata.size() - 1;     }  else {       this.c_pos--;     }     getImage();   }   public void moveNext(){     if (this.c_pos == this.urldata.size() - 1) {       this.c_pos=0;     }  else {       this.c_pos++;     }     getImage();   }   public void setMenu(){     if (this.topm.getVisibility() == 8) {       this.topm.setVisibility(0);     }  else {       this.topm.setVisibility(8);     }   }   public void SaveBitmapToFileCache(  Bitmap bitmap,  String fileName){     FileOutputStream fileOutputStream;     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);     FileOutputStream fileOutputStream2=null;     if (!sdImageMainDirectory.exists()) {       sdImageMainDirectory.mkdirs();     }     try {       try {         fileOutputStream=new FileOutputStream(String.valueOf(sdImageMainDirectory.toString()) + ""/"" + fileName+ "".jpg"");       }  catch (      Exception e) {         e=e;       }     }  catch (    Throwable th) {       th=th;     }     try {       bitmap.compress(Bitmap.CompressFormat.JPEG,100,fileOutputStream);       try {         fileOutputStream.close();       }  catch (      IOException e2) {         e2.printStackTrace();       }     }  catch (    Exception e3) {       e=e3;       fileOutputStream2=fileOutputStream;       e.printStackTrace();       try {         fileOutputStream2.close();       }  catch (      IOException e4) {         e4.printStackTrace();       }     } catch (    Throwable th2) {       th=th2;       fileOutputStream2=fileOutputStream;       try {         fileOutputStream2.close();       }  catch (      IOException e5) {         e5.printStackTrace();       }       throw th;     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\Main.code","public class Main extends AdlibActivity {   public static final String SHARED_PREFS_NAME=""myname_option"";   Button btnisearch;   Button btntop1;   Button btntop2;   Button btntop3;   Button btntop4;   Button btntop5;   Button btntop6;   Button btntop7;   FrameLayout cfrm;   public SQLiteDatabase db;   FrameLayout frm1;   FrameLayout frm2;   FrameLayout frm3;   FrameLayout frm4;   FrameLayout frm5;   FrameLayout frm6;   FrameLayout frm7;   AQuery mAQuery;   private GestureDetector mGestureDetector;   idolDBhelper mHelper;   private SharedPreferences mPrefs;   FrameLayout pfrm;   public int sHeight;   public int sWidth;   private Timer timer;   HorizontalScrollView topmenu;   TextView txtTitle;   public static String ROOT_DIR=""/data/data/com.bluerabbit.kpopldols/databases/"";   public static String dirpath=""neonBlueIdol"";   Hashtable frm=new Hashtable();   private final int swipe_min_distance=120;   private final int swipe_max_off_path=250;   private final int swipe_threshold_veloicty=600;   int cmenu=1;   int pmenu=0;   private boolean mPressFirstBackKey=false;   public void setDB(){     File folder=new File(ROOT_DIR);     if (!folder.exists()) {       folder.mkdirs();     }     AssetManager assetManager=getResources().getAssets();     File outfile=new File(String.valueOf(ROOT_DIR) + ""idol_db"");     try {       InputStream is=assetManager.open(""idol_db"",3);       long filesize=is.available();       if (outfile.length() < filesize) {         byte[] tempdata=new byte[(int)filesize];         is.read(tempdata);         is.close();         outfile.createNewFile();         FileOutputStream fo=new FileOutputStream(outfile);         try {           fo.write(tempdata);           fo.close();         }  catch (        IOException e) {           Toast.makeText(this,""dbì�´ë�™ì‹¤íŒ¨"",1).show();         }       }     }  catch (    IOException e2) {     }   }   private void setSortIdol(){     String sortDBDate="""";     Cursor cursor=this.db.rawQuery(""select code_name from tb_code where code='sortdate' "",null);     if (cursor != null) {       cursor.moveToFirst();       sortDBDate=cursor.getString(0);     }     Calendar startDate=Calendar.getInstance();     Calendar.getInstance();     startDate.set(Integer.parseInt(sortDBDate.substring(0,4)),Integer.parseInt(sortDBDate.substring(4,6)) - 1,Integer.parseInt(sortDBDate.substring(6,8)));     long b=(Calendar.getInstance().getTimeInMillis() - startDate.getTimeInMillis()) / 1000;     long a=b / 86400;     if (a >= 8) {       this.mAQuery=new AQuery((Activity)this);       Map<String,Object> params=new HashMap<>();       this.mAQuery.ajax(""http://180.71.58.225/app/idol/idolranksortlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){         @Override public void callback(        String url,        JSONObject json,        AjaxStatus status){           JSONArray localJSONArray=json.optJSONArray(""datalist"");           int cnt=localJSONArray.length();           for (int n=0; n < cnt; n++) {             try {               JSONObject localJSONObject2=localJSONArray.optJSONObject(n);               if (localJSONObject2.optString(""groupid"") != """") {                 String query=""update idolgroup set sort="" + Integer.parseInt(localJSONObject2.optString(""ROWNUM"")) + "" where  groupid='""+ localJSONObject2.optString(""groupid"")+ ""'  and type = '""+ localJSONObject2.optString(""type"")+ ""' "";                 Main.this.db.execSQL(query);               }             }  catch (            Exception e) {               Toast.makeText(Main.this.getApplicationContext(),e.toString(),1000).show();             }           }           String time=DateFormat.format(""yyyyMMdd"",System.currentTimeMillis()).toString();           String query2=""update tb_code set code_name='"" + time + ""' where  code='sortdate' "";           Main.this.db.execSQL(query2);         }       } );     }   }   private void setIdolGroup(){     String idolDBDate="""";     Cursor cursor=this.db.rawQuery(""select code_name from tb_code where code='idoldate' "",null);     if (cursor != null) {       cursor.moveToFirst();       idolDBDate=cursor.getString(0);     }     Calendar startDate=Calendar.getInstance();     Calendar.getInstance();     startDate.set(Integer.parseInt(idolDBDate.substring(0,4)),Integer.parseInt(idolDBDate.substring(4,6)) - 1,Integer.parseInt(idolDBDate.substring(6,8)));     long b=(Calendar.getInstance().getTimeInMillis() - startDate.getTimeInMillis()) / 1000;     long a=b / 86400;     if (a >= 6) {       String ingroupid="""";       Cursor cursor2=this.db.rawQuery(""select distinct groupid from idolgroup  order by groupid "",null);       int incnt=cursor2.getCount();       int forcnt=1;       cursor2.moveToFirst();       while (!cursor2.isAfterLast()) {         if (incnt == forcnt) {           ingroupid=String.valueOf(ingroupid) + cursor2.getString(0);         }  else {           ingroupid=String.valueOf(ingroupid) + cursor2.getString(0) + "","";         }         cursor2.moveToNext();         forcnt++;       }       cursor2.close();       this.mAQuery=new AQuery((Activity)this);       Map<String,Object> params=new HashMap<>();       params.put(""ingroupid"",ingroupid);       this.mAQuery.ajax(""http://180.71.58.225/app/idol/idolgrouplist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){         @Override public void callback(        String url,        JSONObject json,        AjaxStatus status){           JSONArray localJSONArray=json.optJSONArray(""datalist"");           int cnt=localJSONArray.length();           for (int n=0; n < cnt; n++) {             try {               JSONObject localJSONObject2=localJSONArray.optJSONObject(n);               if (localJSONObject2.optString(""groupid"") != """") {                 String query=""select groupid from idolgroup where  groupid='"" + localJSONObject2.optString(""groupid"") + ""' "";                 Cursor cursor3=Main.this.db.rawQuery(query,null);                 int curcnt=cursor3.getCount();                 cursor3.close();                 if (curcnt == 0) {                   String insquery=String.valueOf(""insert into idolgroup (groupid,type,name_kor,name_eng,thum,content_kor,content_eng, new_yn) VALUES ("") + "" '"" + localJSONObject2.optString(""groupid"")+ ""' , "";                   Main.this.db.execSQL(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf(insquery) + "" '"" + localJSONObject2.optString(""type"")+ ""' , "") + "" '"" + localJSONObject2.optString(""name_kor"")+ ""' , "") + "" '"" + localJSONObject2.optString(""name_eng"")+ ""' , "") + "" '"" + localJSONObject2.optString(""thum"")+ ""' , "") + "" '"" + localJSONObject2.optString(""content_kor"")+ ""' , "") + "" '"" + localJSONObject2.optString(""content_eng"")+ ""' , "") + "" '"" + localJSONObject2.optString(""new_yn"")+ ""' ) "");                 }               }             }  catch (            Exception e) {               Toast.makeText(Main.this.getApplicationContext(),e.toString(),1).show();             }           }           Main.this.setIdolMember();         }       } );     }   }   public void setIdolMember(){     String ingroupid="""";     Cursor cursor=this.db.rawQuery(""select distinct groupid from idolmember  order by groupid "",null);     int incnt=cursor.getCount();     int forcnt=1;     cursor.moveToFirst();     while (!cursor.isAfterLast()) {       if (incnt == forcnt) {         ingroupid=String.valueOf(ingroupid) + cursor.getString(0);       }  else {         ingroupid=String.valueOf(ingroupid) + cursor.getString(0) + "","";       }       cursor.moveToNext();       forcnt++;     }     cursor.close();     this.mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     params.put(""ingroupid"",ingroupid);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/idolmemberlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         JSONArray localJSONArray=json.optJSONArray(""datalist"");         int cnt=localJSONArray.length();         for (int n=0; n < cnt; n++) {           try {             JSONObject localJSONObject2=localJSONArray.optJSONObject(n);             if (localJSONObject2.optString(""groupid"") != """") {               String query=""select groupid from idolmember where  groupid='"" + localJSONObject2.optString(""groupid"") + ""' and  memberid='""+ localJSONObject2.optString(""memberid"")+ ""' "";               Cursor cursor2=Main.this.db.rawQuery(query,null);               int curcnt=cursor2.getCount();               cursor2.close();               if (curcnt == 0) {                 String insquery=String.valueOf(""insert into idolmember (groupid,memberid,name_kor,name_eng,thum,content_kor,content_eng) VALUES ("") + "" '"" + localJSONObject2.optString(""groupid"")+ ""' , "";                 Main.this.db.execSQL(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf(insquery) + "" '"" + localJSONObject2.optString(""memberid"")+ ""' , "") + "" '"" + localJSONObject2.optString(""name_kor"")+ ""' , "") + "" '"" + localJSONObject2.optString(""name_eng"")+ ""' , "") + "" '"" + localJSONObject2.optString(""thum"")+ ""' , "") + "" '"" + localJSONObject2.optString(""content_kor"")+ ""' , "") + "" '"" + localJSONObject2.optString(""content_eng"")+ ""' ) "");               }             }           }  catch (          Exception e) {             Toast.makeText(Main.this.getApplicationContext(),e.toString(),1).show();           }         }         String time=DateFormat.format(""yyyyMMdd"",System.currentTimeMillis()).toString();         String query2=""update tb_code set code_name='"" + time + ""' where  code='idoldate' "";         Main.this.db.execSQL(query2);         Main.this.setNewYN();       }     } );   }   public void setNewYN(){     this.mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     this.mAQuery.ajax(""http://180.71.58.225/app/idol/idolgroupnewynlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         JSONArray localJSONArray=json.optJSONArray(""datalist"");         int cnt=localJSONArray.length();         for (int n=0; n < cnt; n++) {           if (n == 0) {             try {               Main.this.db.execSQL(""update idolgroup set new_yn= '' where new_yn = 'Y'  "");             }  catch (            Exception e) {               Toast.makeText(Main.this.getApplicationContext(),e.toString(),1).show();             }           }           JSONObject localJSONObject2=localJSONArray.optJSONObject(n);           if (localJSONObject2.optString(""groupid"") != """") {             String query2=""update idolgroup set new_yn= 'Y' where  groupid='"" + localJSONObject2.optString(""groupid"") + ""' "";             Main.this.db.execSQL(query2);           }         }         Main.this.setAgency();       }     } );   }   public void setAgency(){     this.mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     this.mAQuery.ajax(""http://180.71.58.225/app/idol/idolagencylist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         JSONArray localJSONArray=json.optJSONArray(""datalist"");         int cnt=localJSONArray.length();         for (int n=0; n < cnt; n++) {           try {             JSONObject localJSONObject2=localJSONArray.optJSONObject(n);             if (localJSONObject2.optString(""artid"") != """") {               String query=""update idolgroup set agency= '"" + localJSONObject2.optString(""agency"").replace(""'"","""") + ""' where  groupid='""+ localJSONObject2.optString(""artid"")+ ""' "";               Main.this.db.execSQL(query);             }           }  catch (          Exception e) {             Toast.makeText(Main.this.getApplicationContext(),e.toString(),1).show();           }         }       }     } );   }   private void getNick(){     this.mAQuery=new AQuery((Activity)this);     Object myDeviceid=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""device"",myDeviceid);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/getnick.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         String myNick=json.trim();         Main.this.mPrefs=Main.this.getApplicationContext().getSharedPreferences(Main.SHARED_PREFS_NAME,0);         SharedPreferences.Editor editor=Main.this.mPrefs.edit();         editor.putString(Main.SHARED_PREFS_NAME,myNick);         editor.commit();       }     } );   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.basemain);     initAds();     setAdsContainer(R.id.ads);     startActivity(new Intent(this,(Class<?>)intro.class));     setDB();     this.mHelper=new idolDBhelper(this);     this.db=this.mHelper.getWritableDatabase();     setIdolGroup();     setSortIdol();     Button btnset=(Button)findViewById(R.id.btniset);     btnset.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent myintent=new Intent(Main.this.getApplicationContext(),(Class<?>)setting.class);         Main.this.startActivity(myintent);       }     } );     this.txtTitle=(TextView)findViewById(R.id.title);     this.topmenu=(HorizontalScrollView)findViewById(R.id.topmenu);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     this.sWidth=display.getWidth();     this.sHeight=display.getHeight();     this.btntop1=(Button)findViewById(R.id.btntop1);     this.btntop2=(Button)findViewById(R.id.btntop2);     this.btntop3=(Button)findViewById(R.id.btntop3);     this.btntop4=(Button)findViewById(R.id.btntop4);     this.btntop5=(Button)findViewById(R.id.btntop5);     this.btntop6=(Button)findViewById(R.id.btntop6);     this.btntop7=(Button)findViewById(R.id.btntop7);     this.btnisearch=(Button)findViewById(R.id.btnisearch);     this.btnisearch.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent myintent=new Intent(Main.this.getApplicationContext(),(Class<?>)artListSearch.class);         Main.this.startActivity(myintent);       }     } );     this.frm1=(FrameLayout)findViewById(R.id.frm1);     this.frm2=(FrameLayout)findViewById(R.id.frm2);     this.frm3=(FrameLayout)findViewById(R.id.frm3);     this.frm4=(FrameLayout)findViewById(R.id.frm4);     this.frm5=(FrameLayout)findViewById(R.id.frm5);     this.frm6=(FrameLayout)findViewById(R.id.frm6);     this.frm7=(FrameLayout)findViewById(R.id.frm7);     this.frm.put(""menu1"",this.frm1);     this.frm.put(""menu2"",this.frm2);     this.frm.put(""menu3"",this.frm3);     this.frm.put(""menu4"",this.frm4);     this.frm.put(""menu5"",this.frm5);     this.frm.put(""menu6"",this.frm6);     this.frm.put(""menu7"",this.frm7);     setmenu();     this.btntop1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=1;         Main.this.setmenu();       }     } );     this.btntop2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=2;         Main.this.setmenu();       }     } );     this.btntop3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=3;         Main.this.setmenu();       }     } );     this.btntop4.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=4;         Main.this.setmenu();       }     } );     this.btntop5.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=5;         Main.this.setmenu();       }     } );     this.btntop6.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=6;         Main.this.setmenu();       }     } );     this.btntop7.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Main.this.pmenu=Main.this.cmenu;         Main.this.cmenu=7;         Main.this.setmenu();       }     } );     this.mGestureDetector=new GestureDetector(new thisGestureDetector(this,null));     ImageView btnban1=(ImageView)findViewById(R.id.btnban1);     ImageView btnban2=(ImageView)findViewById(R.id.btnban2);     ImageView btnban3=(ImageView)findViewById(R.id.btnban3);     ImageView btnban5=(ImageView)findViewById(R.id.btnban5);     ImageView btnban7=(ImageView)findViewById(R.id.btnban7);     ImageView btnban8=(ImageView)findViewById(R.id.btnban8);     ImageView btnban9=(ImageView)findViewById(R.id.btnban9);     btnban1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)newIdol.class);         Main.this.startActivity(intent);       }     } );     btnban2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)rivalList.class);         Main.this.startActivity(intent);       }     } );     btnban3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,4);         Main.this.startActivity(intent);       }     } );     btnban5.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)freeBoard.class);         intent.putExtra(""type"",""1"");         Main.this.startActivity(intent);       }     } );     btnban7.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)ChartGroup.class);         Main.this.startActivity(intent);       }     } );     btnban8.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)newAlbumList.class);         Main.this.startActivity(intent);       }     } );     btnban9.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent i=new Intent(""android.intent.action.VIEW"",Uri.parse(""http://www.kpop-play.com/""));         Main.this.startActivity(i);       }     } );     Button btn_idol01=(Button)findViewById(R.id.btn_idol1);     Button btn_idol02=(Button)findViewById(R.id.btn_idol2);     Button btn_idol03=(Button)findViewById(R.id.btn_idol3);     Button btn_idol05=(Button)findViewById(R.id.btn_idol5);     Button btn_idol06=(Button)findViewById(R.id.btn_idol6);     Button btn_idol07=(Button)findViewById(R.id.btn_idol7);     btn_idol01.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,0);         Main.this.startActivity(intent);       }     } );     btn_idol02.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,1);         Main.this.startActivity(intent);       }     } );     btn_idol03.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,2);         Main.this.startActivity(intent);       }     } );     btn_idol05.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,3);         Main.this.startActivity(intent);       }     } );     btn_idol06.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,4);         Main.this.startActivity(intent);       }     } );     btn_idol07.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)ChartGroup.class);         Main.this.startActivity(intent);       }     } );     Button btn_comm01=(Button)findViewById(R.id.btn_com1);     Button btn_comm02=(Button)findViewById(R.id.btn_com2);     Button btn_comm03=(Button)findViewById(R.id.btn_com3);     Button btn_comm04=(Button)findViewById(R.id.btn_com4);     Button btn_comm05=(Button)findViewById(R.id.btn_com5);     Button btn_comm06=(Button)findViewById(R.id.btn_com6);     Button btn_comm07=(Button)findViewById(R.id.btn_com7);     Button btn_comm08=(Button)findViewById(R.id.btn_com8);     btn_comm01.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)rivalList.class);         Main.this.startActivity(intent);       }     } );     btn_comm02.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)freeBoard.class);         intent.putExtra(""type"",""1"");         Main.this.startActivity(intent);       }     } );     btn_comm03.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)qBoard.class);         intent.putExtra(""type"",HTMLElementName.Q);         Main.this.startActivity(intent);       }     } );     btn_comm04.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)noticeBoard.class);         Main.this.startActivity(intent);       }     } );     btn_comm05.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)qaboard.class);         Main.this.startActivity(intent);       }     } );     btn_comm06.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)freeBoard.class);         intent.putExtra(""type"",""6"");         Main.this.startActivity(intent);       }     } );     btn_comm07.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)freeBoard.class);         intent.putExtra(""type"",""8"");         Main.this.startActivity(intent);       }     } );     btn_comm08.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)qBoard.class);         intent.putExtra(""type"",""7"");         Main.this.startActivity(intent);       }     } );     Button btngame1=(Button)findViewById(R.id.btn_game1);     Button btngame2=(Button)findViewById(R.id.btn_game2);     Button btngame3=(Button)findViewById(R.id.btn_game3);     btngame1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)gameRank.class);         intent.putExtra(HTMLElementName.MENU,0);         Main.this.startActivity(intent);       }     } );     btngame2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)iDreamMain.class);         intent.putExtra(""type"",""2"");         Main.this.startActivity(intent);       }     } );     btngame3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)iDreamMain.class);         intent.putExtra(""type"",""1"");         Main.this.startActivity(intent);       }     } );     Button btnnews1=(Button)findViewById(R.id.btn_news1);     Button btnnews2=(Button)findViewById(R.id.btn_news2);     Button btnnews3=(Button)findViewById(R.id.btn_news3);     btnnews1.setVisibility(8);     btnnews1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)photobook.class);         Main.this.startActivity(intent);       }     } );     btnnews2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)newIdol.class);         Main.this.startActivity(intent);       }     } );     btnnews3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)newAlbumList.class);         Main.this.startActivity(intent);       }     } );     Button btnmy1=(Button)findViewById(R.id.btn_mypage1);     Button btnmy2=(Button)findViewById(R.id.btn_mypage2);     Button btnmy3=(Button)findViewById(R.id.btn_mypage3);     Button btnmy4=(Button)findViewById(R.id.btn_mypage4);     btnmy1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)nickset.class);         Main.this.startActivity(intent);       }     } );     btnmy2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)baseFrag.class);         intent.putExtra(HTMLElementName.MENU,5);         Main.this.startActivity(intent);       }     } );     btnmy3.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)GalleryList.class);         Main.this.startActivity(intent);       }     } );     getNick();     btnmy4.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(Main.this,(Class<?>)msgList.class);         Main.this.startActivity(intent);       }     } );   }   public void getEvent(){     this.mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     this.mAQuery.ajax(""http://180.71.58.225/app/idol/eventcheck.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         String eventUrl=json.trim();         if (!""N"".equals(eventUrl)) {           Intent intent=new Intent(Main.this,(Class<?>)eventWindow.class);           intent.putExtra(""url"",eventUrl);           Main.this.startActivity(intent);         }       }     } );   }   public void setmenu(){     Animation leftin=AnimationUtils.loadAnimation(getBaseContext(),R.anim.slide_left_in);     Animation leftout=AnimationUtils.loadAnimation(getBaseContext(),R.anim.slide_left_out);     Animation rightin=AnimationUtils.loadAnimation(getBaseContext(),R.anim.slide_right_in);     Animation rightout=AnimationUtils.loadAnimation(getBaseContext(),R.anim.slide_right_out);     this.pfrm=(FrameLayout)this.frm.get(HTMLElementName.MENU + this.pmenu);     this.cfrm=(FrameLayout)this.frm.get(HTMLElementName.MENU + this.cmenu);     if (this.pmenu != 0) {       if (this.pmenu > this.cmenu) {         this.pfrm.setAnimation(rightout);         this.pfrm.startAnimation(rightout);       }  else {         this.pfrm.setAnimation(leftout);         this.pfrm.startAnimation(leftout);       }       this.pfrm.setVisibility(8);     }     this.cfrm.setVisibility(0);     if (this.pmenu > this.cmenu) {       this.cfrm.setAnimation(leftin);       this.cfrm.startAnimation(leftin);     }  else {       this.cfrm.setAnimation(rightin);       this.cfrm.startAnimation(rightin);     }     this.btntop1.setBackgroundResource(R.drawable.topmenu1);     this.btntop2.setBackgroundResource(R.drawable.topmenu2);     this.btntop3.setBackgroundResource(R.drawable.topmenu3);     this.btntop4.setBackgroundResource(R.drawable.topmenu4);     this.btntop5.setBackgroundResource(R.drawable.topmenu5);     this.btntop6.setBackgroundResource(R.drawable.topmenu6);     this.btntop7.setBackgroundResource(R.drawable.topmenu7);     int[] lo=new int[2]; switch (this.cmenu) { case 1:       this.btntop1.setBackgroundResource(R.drawable.top_menu_main_ov);     this.btntop1.getLocationOnScreen(lo);   break; case 2: this.btntop2.setBackgroundResource(R.drawable.top_menu_idol_ov); this.btntop2.getLocationOnScreen(lo); break; case 3: this.btntop3.setBackgroundResource(R.drawable.top_menu_ranking_ov); this.btntop3.getLocationOnScreen(lo); break; case 4: this.btntop4.setBackgroundResource(R.drawable.top_menu_commu_ov); this.btntop4.getLocationOnScreen(lo); break; case 5: this.btntop5.setBackgroundResource(R.drawable.top_menu_game_ov); this.btntop5.getLocationOnScreen(lo); break; case 6: this.btntop6.setBackgroundResource(R.drawable.top_menu_news_ov); this.btntop6.getLocationOnScreen(lo); break; case 7: this.btntop7.setBackgroundResource(R.drawable.top_menu_mypage_ov); this.btntop7.getLocationOnScreen(lo); break; } int posX=lo[0]; int halfWidth=(int)(this.sWidth * 0.5f); int screenWith=((WindowManager)getSystemService(""window"")).getDefaultDisplay().getWidth(); int halfScreenWidth=(int)(screenWith * 0.5f); final int scroll=(posX + halfWidth) - halfScreenWidth; this.topmenu.post(new Runnable(){ @Override public void run(){ Main.this.topmenu.smoothScrollBy(scroll,0); } } ); } @Override public boolean dispatchTouchEvent(MotionEvent ev){ if (this.mGestureDetector.onTouchEvent(ev)) { return true; } return super.dispatchTouchEvent(ev); } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener { private thisGestureDetector(){ } thisGestureDetector(Main main,thisGestureDetector thisgesturedetector){ this(); } @Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){ if (Math.abs(e1.getY() - e2.getY()) > 250.0f) { return false; } if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 600.0f) { Main.this.movePrev(); } if (e1.getX() - e2.getX() <= 120.0f || Math.abs(velocityX) <= 600.0f) { return false; } Main.this.moveNext(); return false; } } public void movePrev(){ if (this.cmenu > 1) { this.pmenu=this.cmenu; this.cmenu--; if (this.cmenu == 3) { this.cmenu=2; } setmenu(); } } public void moveNext(){ if (this.cmenu < 7) { this.pmenu=this.cmenu; this.cmenu++; if (this.cmenu == 3) { this.cmenu=4; } setmenu(); } } @Override public void onPause(){ super.onPause(); } @Override public void onResume(){ super.onResume(); } @Override protected void onStart(){ super.onStart(); } @Override protected void onStop(){ super.onStop(); } @Override public void onDestroy(){ super.onDestroy(); System.exit(0); } @Override public void onBackPressed(){ if (!this.mPressFirstBackKey) { Toast.makeText(this,""ë’¤ë¡œ ë²„íŠ¼ì�„ í•œë²ˆ ë�” ëˆ„ë¥´ë©´ ì¢…ë£Œí•©ë‹ˆë‹¤."",1).show(); this.mPressFirstBackKey=true; TimerTask second=new TimerTask(){ @Override public void run(){ Main.this.timer.cancel(); Main.this.timer=null; Main.this.mPressFirstBackKey=false; } } ; if (this.timer != null) { this.timer.cancel(); this.timer=null; } this.timer=new Timer(); this.timer.schedule(second,2000L); return; } super.onBackPressed(); } protected void initAds(){ AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam""); AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly""); AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67""); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\memberTab.code","public class memberTab extends TabActivity {   private static int cnt;   private static String gArtid;   private static String gName;   private static String gSearch;   private static String gSex;   private static int gindex;   private AdlibManager _amanager;   TabHost.TabSpec eee_TabSpec;   AQuery mAQuery;   TabHost m_tabHost;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     this._amanager=new AdlibManager();     this._amanager.onCreate(this);     setContentView(R.layout.membertab);     setAdsContainer(R.id.ads);     TextView mtitle=(TextView)findViewById(R.id.title);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         memberTab.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     gSex=i.getStringExtra(""sex"");     gName=i.getStringExtra(""name"");     gSearch=i.getStringExtra(""search"");     gindex=Integer.parseInt(i.getStringExtra(""index""));     gArtid=i.getStringExtra(""artid"");     mtitle.setText(gName);     getNick(gArtid);     this.m_tabHost=(TabHost)findViewById(android.R.id.tabhost);     TabHost.TabSpec aaa_TabSpec=this.m_tabHost.newTabSpec("""");     TabHost.TabSpec bbb_TabSpec=this.m_tabHost.newTabSpec("""");     TabHost.TabSpec ccc_TabSpec=this.m_tabHost.newTabSpec("""");     TabHost.TabSpec ddd_TabSpec=this.m_tabHost.newTabSpec("""");     this.eee_TabSpec=this.m_tabHost.newTabSpec("""");     LayoutInflater vi1=(LayoutInflater)getSystemService(""layout_inflater"");     LayoutInflater vi2=(LayoutInflater)getSystemService(""layout_inflater"");     LayoutInflater vi3=(LayoutInflater)getSystemService(""layout_inflater"");     LayoutInflater vi4=(LayoutInflater)getSystemService(""layout_inflater"");     LayoutInflater vi5=(LayoutInflater)getSystemService(""layout_inflater"");     View View_1=vi1.inflate(R.layout.tab_row_item2,(ViewGroup)null);     View View_2=vi2.inflate(R.layout.tab_row_item2,(ViewGroup)null);     View View_3=vi3.inflate(R.layout.tab_row_item2,(ViewGroup)null);     View View_4=vi4.inflate(R.layout.tab_row_item2,(ViewGroup)null);     View View_5=vi5.inflate(R.layout.tab_row_item2,(ViewGroup)null);     LinearLayout Layout_1=(LinearLayout)View_1.findViewById(R.id.LinearLayout01);     LinearLayout Layout_2=(LinearLayout)View_2.findViewById(R.id.LinearLayout01);     LinearLayout Layout_3=(LinearLayout)View_3.findViewById(R.id.LinearLayout01);     LinearLayout Layout_4=(LinearLayout)View_4.findViewById(R.id.LinearLayout01);     LinearLayout Layout_5=(LinearLayout)View_5.findViewById(R.id.LinearLayout01);     Layout_1.setBackgroundResource(R.drawable.tab_bg_1);     Layout_2.setBackgroundResource(R.drawable.tab_bg_2);     Layout_3.setBackgroundResource(R.drawable.tab_bg_3);     Layout_4.setBackgroundResource(R.drawable.tab_bg_4);     Layout_5.setBackgroundResource(R.drawable.tab_bg_5);     Intent myintent=new Intent(this,(Class<?>)GmList.class);     myintent.putExtra(""sex"",gSex);     myintent.putExtra(""name"",gName);     myintent.putExtra(""search"",gSearch);     myintent.putExtra(""index"",Integer.toString(gindex));     myintent.putExtra(""artid"",gArtid);     Intent myintent2=new Intent(this,(Class<?>)AlbumList.class);     myintent2.putExtra(""artid"",gArtid);     Intent myintent3=new Intent(this,(Class<?>)iBoard.class);     myintent3.putExtra(""sex"",gSex);     myintent3.putExtra(""name"",gName);     myintent3.putExtra(""search"",gSearch);     myintent3.putExtra(""index"",Integer.toString(gindex));     myintent3.putExtra(""artid"",gArtid);     Intent myintent4=new Intent(this,(Class<?>)News.class);     myintent4.putExtra(""name"",gSearch);     aaa_TabSpec.setIndicator(View_1);     aaa_TabSpec.setContent(myintent);     bbb_TabSpec.setIndicator(View_2);     bbb_TabSpec.setContent(myintent2);     ccc_TabSpec.setIndicator(View_3);     ccc_TabSpec.setContent(myintent3);     ddd_TabSpec.setIndicator(View_4);     ddd_TabSpec.setContent(myintent4);     this.eee_TabSpec.setIndicator(View_5);     this.eee_TabSpec.setContent(myintent4);     this.m_tabHost.addTab(aaa_TabSpec);     this.m_tabHost.addTab(bbb_TabSpec);     this.m_tabHost.addTab(ccc_TabSpec);     this.m_tabHost.addTab(ddd_TabSpec);     this.m_tabHost.addTab(this.eee_TabSpec);     this.m_tabHost.getTabWidget().getChildAt(4).setVisibility(8);     this.m_tabHost.setCurrentTab(0);     this.m_tabHost.getTabWidget().setCurrentTab(0);   }   private void getNick(  String groupid){     Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""groupid"",groupid);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/fanget.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         if (""false"".equals(json.trim())) {           memberTab.this.m_tabHost.getTabWidget().getChildAt(4).setVisibility(8);         }  else {           memberTab.this.m_tabHost.getTabWidget().getChildAt(4).setVisibility(0);         }         Log.d(""nick"",json);       }     } );   }   @Override protected void onResume(){     this._amanager.onResume(this);     super.onResume();   }   @Override protected void onPause(){     this._amanager.onPause();     super.onPause();   }   @Override protected void onDestroy(){     this._amanager.onDestroy(this);     super.onDestroy();   }   public void setAdsContainer(  int rid){     this._amanager.setAdsContainer(rid);   }   public void bindAdsContainer(  AdlibAdViewContainer a){     this._amanager.bindAdsContainer(a);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\mp3play.code","public class mp3play extends Activity implements View.OnClickListener, Runnable, SeekBar.OnSeekBarChangeListener {   TextView TxtName;   String albumid;   AQuery aq;   String artid;   private ProgressBar bottom_prog;   ImageButton btnDaum;   ImageButton btnPlay;   ImageButton btnStop;   MediaPlayer mp;   String mp3file;   TextView resultly;   SeekBar seekbar;   String songid;   String songname;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.mp3play);     Intent i=getIntent();     this.songname=i.getStringExtra(""songname"");     this.artid=i.getStringExtra(""artid"");     this.songid=i.getStringExtra(""songid"");     this.albumid=i.getStringExtra(""albumid"");     this.TxtName=(TextView)findViewById(R.id.title);     this.TxtName.setText(this.songname);     setSave();     this.btnPlay=(ImageButton)findViewById(R.id.play);     this.btnStop=(ImageButton)findViewById(R.id.stop);     this.btnDaum=(ImageButton)findViewById(R.id.daum);     this.seekbar=(SeekBar)findViewById(R.id.seekbar);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.btnDaum.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""http://music.daum.net/album/main?album_id="" + mp3play.this.albumid));         mp3play.this.startActivity(intent);       }     } );     this.btnStop.setOnClickListener(this);     this.btnPlay.setOnClickListener(this);     this.seekbar.setVisibility(8);     this.resultly=(TextView)findViewById(R.id.result);     mp3file();   }   private void mp3file(){     this.bottom_prog.setVisibility(0);     AQuery aq=new AQuery((Activity)this);     String url=""http://player.music.daum.net/mobileweb/song.do?songId="" + this.songid;     aq.ajax(url,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url2,      JSONObject json,      AjaxStatus paramAjaxStatus){         try {           mp3play.this.mp3file=json.getString(""streamurl"");         }  catch (        JSONException e) {           e.printStackTrace();         }         mp3play.this.searchClip();       }     } );   }   public void searchClip(){     this.aq=new AQuery((Activity)this);     String url=""http://music.daum.net/vclip/vcliplyrics.json?song_id="" + this.songid;     this.aq.ajax(url,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url2,      JSONObject json,      AjaxStatus paramAjaxStatus){         try {           String son=json.getJSONObject(""lyrics"").getString(""lyrics"").replace(""<br />"",""\n"");           mp3play.this.resultly.setText(son);           mp3play.this.mp=new MediaPlayer();           try {             mp3play.this.mp.setDataSource(mp3play.this.mp3file);             mp3play.this.mp.prepare();             new Thread(mp3play.this).start();             mp3play.this.seekbar.setVisibility(0);             mp3play.this.seekbar.setProgress(0);             mp3play.this.seekbar.setMax(mp3play.this.mp.getDuration());             mp3play.this.btnPlay.setBackgroundResource(R.drawable.imgbtn_pause);             mp3play.this.mp.start();             mp3play.this.bottom_prog.setVisibility(8);             mp3play.this.resultly.setVisibility(0);           }  catch (          Exception e) {             e.printStackTrace();           }         }  catch (        JSONException e2) {           e2.printStackTrace();         }       }     } );   }   private void search(){     this.aq=new AQuery((Activity)this);     this.bottom_prog.setVisibility(0);     String url=""http://m.music.daum.net/song/vcliplyrics?song_id="" + this.songid + ""&album_id=""+ this.albumid;     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""cb112"");     this.aq.ajax(cb);     this.seekbar.setOnSeekBarChangeListener(this);   }   private void setSave(){     AQuery mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     params.put(""artid"",this.artid);     params.put(""albumid"",this.albumid);     params.put(""songid"",this.songid);     params.put(""songname"",this.songname);     mAQuery.ajax(""http://neopark777.cafe24.com/idol/songwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){       }     } );   }   public static String ltrim(  String s){     int i=0;     while (i < s.length() && Character.isWhitespace(s.charAt(i))) {       i++;     }     return s.substring(i);   }   public static String rtrim(  String s){     int i=s.length() - 1;     while (i > 0 && Character.isWhitespace(s.charAt(i))) {       i--;     }     return s.substring(0,i + 1);   }   public String wordsparse(  String src){     String retVal="""";     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.DIV);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""wrap_songcont"")) {         retVal=element.getAllElements(HTMLElementName.P).get(0).getContent().toString().replace(""<br />"",""\n"");       }     }     return retVal;   }   @Override public void onClick(  View v){     if (v.getId() == R.id.play) {       if (this.mp.isPlaying()) {         this.btnPlay.setBackgroundResource(R.drawable.imgbtn_play);         this.mp.pause();         return;       }  else {         this.btnPlay.setBackgroundResource(R.drawable.imgbtn_pause);         this.mp.start();         return;       }     }     if (v.getId() == R.id.stop) {       try {         this.btnPlay.setBackgroundResource(R.drawable.imgbtn_play);         this.mp.seekTo(0);         this.seekbar.setProgress(0);         this.mp.pause();       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public void onProgressChanged(  SeekBar seekBar,  int progress,  boolean fromUser){   }   @Override public void run(){     int current=0;     while (this.mp != null) {       try {         Thread.sleep(1000L);         current=this.mp.getCurrentPosition();       }  catch (      Exception e) {         e.printStackTrace();       }       if (this.mp.isPlaying()) {         this.seekbar.setProgress(current);       }     }   }   @Override public void onStartTrackingTouch(  SeekBar seekBar){   }   @Override public void onStopTrackingTouch(  SeekBar seekBar){     this.mp.seekTo(this.seekbar.getProgress());   }   @Override public void onDestroy(){     super.onDestroy();     this.mp.pause();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\mygrimTest.code","public class mygrimTest extends AdlibActivity {   private static ProgressDialog dialog;   String artid;   Button btnload;   Button btnstart;   Bitmap gamebc;   ImageViewTouch gamepan;   int gamex;   int gamey;   String gname;   String groupid;   String gthum;   String gtype;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       if (mygrimTest.this.gamebc == null) {         Toast.makeText(mygrimTest.this.getApplicationContext(),""Image Access Error"",SpeechRecognizer.ERROR_INVALID_STATUS).show();         mygrimTest.this.finish();       }  else {         mygrimTest.this.gamepan.setImageBitmap(mygrimTest.this.gamebc);         mygrimTest.this.sp1.setVisibility(0);         mygrimTest.this.btnstart.setVisibility(0);       }       mygrimTest.dialog.dismiss();     }   } ;   String imageUrl;   String parentid;   String parentname;   int sHeight;   int sWidth;   Spinner sp1;   String type;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.mygrimtest);     initAds();     setAdsContainer(R.id.ads);     Intent i=getIntent();     this.imageUrl=i.getStringExtra(""gurl"");     this.artid=i.getStringExtra(""groupid"");     this.gname=i.getStringExtra(""artname"");     this.gthum=i.getStringExtra(""gthum"");     this.parentname=i.getStringExtra(""parentname"");     this.parentid=i.getStringExtra(""parentid"");     this.gtype=i.getStringExtra(""type"");     this.sp1=(Spinner)findViewById(R.id.btnsp);     ArrayAdapter apt1=ArrayAdapter.createFromResource(this,R.array.gamepan_array,android.R.layout.simple_spinner_item);     apt1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);     this.sp1.setAdapter((SpinnerAdapter)apt1);     this.sp1.setSelection(Integer.parseInt(this.gtype));     this.sp1.setEnabled(false);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     this.sWidth=display.getWidth();     this.sHeight=display.getHeight() - (display.getHeight() / 10);     LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(this.sWidth,this.sHeight);     this.gamepan=(ImageViewTouch)findViewById(R.id.gamepan);     this.gamepan.setLayoutParams(params);     this.btnstart=(Button)findViewById(R.id.btnstart);     this.btnstart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         mygrimTest.this.puzzleSet();       }     } );     setView();   }   public void setView(){     dialog=ProgressDialog.show(this,""Loading.."",""Please Wait Image Loading..."",true,true);     new Thread(){       @Override public void run(){         mygrimTest.this.gamebc=null;         mygrimTest.this.gamebc=mygrimTest.this.getConnImg(mygrimTest.this.imageUrl);         mygrimTest.this.handler.sendEmptyMessage(0);       }     } .start();   }   public Bitmap getConnImg(  String url){     Bitmap bm=null;     try {       URL imgUrl=new URL(url);       URLConnection conn=imgUrl.openConnection();       HttpURLConnection httpConn=(HttpURLConnection)conn;       InputStream in=httpConn.getInputStream();       bm=BitmapFactory.decodeStream(in);       in.close();       return bm;     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return bm;     } catch (    MalformedURLException e2) {       e2.printStackTrace();       return bm;     } catch (    IOException e3) {       return bm;     }   }   @Override protected void onActivityResult(  int requestCode,  int resultCode,  Intent intent){     super.onActivityResult(requestCode,resultCode,intent);     if (resultCode == -1) {       Uri selPhotoUri=intent.getData();       Toast.makeText(getApplicationContext(),selPhotoUri.toString(),1000).show();       try {         this.gamebc=MediaStore.Images.Media.getBitmap(getContentResolver(),selPhotoUri);       }  catch (      FileNotFoundException e) {         e.printStackTrace();       } catch (      IOException e2) {         e2.printStackTrace();       }       this.gamepan.setImageBitmap(this.gamebc);     }   }   public void puzzleSet(){     this.gamepan.setDrawingCacheEnabled(true);     if (this.sp1.getSelectedItemPosition() == 0) {       this.gamex=3;       this.gamey=5;       this.type=""0"";     }  else     if (this.sp1.getSelectedItemPosition() == 1) {       this.gamex=4;       this.gamey=6;       this.type=""1"";     }  else     if (this.sp1.getSelectedItemPosition() == 2) {       this.gamex=5;       this.gamey=7;       this.type=""2"";     }  else     if (this.sp1.getSelectedItemPosition() == 3) {       this.gamex=6;       this.gamey=8;       this.type=""3"";     }     Bitmap bmp=this.gamepan.getDrawingCache();     ByteArrayOutputStream byteArray=new ByteArrayOutputStream();     bmp.compress(Bitmap.CompressFormat.JPEG,80,byteArray);     Intent pintent=new Intent(getApplicationContext(),(Class<?>)pviewfull.class);     pintent.putExtra(""jpgimg"",byteArray.toByteArray());     pintent.putExtra(""gamex"",this.gamex);     pintent.putExtra(""gamey"",this.gamey);     pintent.putExtra(""sx"",this.sWidth);     pintent.putExtra(""sy"",this.sHeight);     pintent.putExtra(""artid"",this.artid);     pintent.putExtra(""type"",this.type);     pintent.putExtra(""gurl"",this.imageUrl);     pintent.putExtra(""gthum"",this.gthum);     pintent.putExtra(""gname"",this.gname);     pintent.putExtra(""parentname"",this.parentname);     pintent.putExtra(""parentid"",this.parentid);     startActivity(pintent);     this.gamepan.setDrawingCacheEnabled(false);   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\MyWebViewClient.code","public class MyWebViewClient extends WebViewClient {   public MyWebViewClient(){   }   @Override public boolean shouldOverrideUrlLoading(  WebView view,  String url){     if (url.contains(""kpop-play.com/pop/"")) {       view.loadUrl(url);     }  else {       Intent i=new Intent(""android.intent.action.VIEW"",Uri.parse(url));       eventWindow.this.startActivity(i);       eventWindow.this.finish();     }     return true;   } } public class MyWebViewClient extends WebViewClient {   ProgressDialog dialog;   public MyWebViewClient(){     this.dialog=new ProgressDialog(newsView.this);   }   @Override public boolean shouldOverrideUrlLoading(  WebView view,  String url){     view.loadUrl(url);     return true;   }   @Override public void onPageStarted(  WebView view,  String url,  Bitmap favicon){     super.onPageStarted(view,url,favicon);     newsView.this.setProgressBarVisibility(true);   }   @Override public void onPageFinished(  WebView view,  String url){     super.onPageFinished(view,url);     newsView.this.setProgressBarVisibility(false);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\newAlbumList.code","public class newAlbumList extends AdlibActivity {   String ArtId;   int cpage;   private ListView li;   EfficientAdapter mAdapter;   private boolean mLockListView;   String testStr;   ArrayList<AlbumInfo> songLi=new ArrayList<>();   ArrayList<AlbumInfo> mRowList=new ArrayList<>();   int pagesize=25;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.newalbumlist);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         newAlbumList.this.finish();       }     } );     this.li=(ListView)findViewById(R.id.listsong);     this.li.setFadingEdgeLength(0);     Intent i=getIntent();     this.ArtId=i.getStringExtra(""artid"");     if (""248444"".equals(this.ArtId)) {       this.ArtId=""253404"";     }     this.mLockListView=true;     this.cpage=1;     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(newAlbumList.this,(Class<?>)SongList.class);         myintent.putExtra(""name"",newAlbumList.this.mRowList.get(position).name);         myintent.putExtra(""albumid"",newAlbumList.this.mRowList.get(position).albumid);         myintent.putExtra(""artid"",newAlbumList.this.ArtId);         newAlbumList.this.startActivity(myintent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !newAlbumList.this.mLockListView) {           newAlbumList.this.mLockListView=true;           newAlbumList.this.makeAdd();           newAlbumList.this.cpage++;         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );   }   private void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     AQuery aq=new AQuery((Activity)this);     String url=""http://music.daum.net/genre/genrealbum/list?genre_group_cd=KO&genre_cd=KO10&page_no="" + this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         mProgressHUD.dismiss();         newAlbumList.this.cpage=2;         new ArrayList();         ArrayList<AlbumInfo> paramArrayList=newAlbumList.this.mdaumAlbum(html);         newAlbumList.this.mRowList.addAll(paramArrayList);         newAlbumList.this.mAdapter=new EfficientAdapter(newAlbumList.this,newAlbumList.this.mRowList);         newAlbumList.this.li.setAdapter((ListAdapter)newAlbumList.this.mAdapter);         if (paramArrayList.size() >= newAlbumList.this.pagesize) {           newAlbumList.this.mLockListView=false;         }       }     } );   }   public void makeAdd(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     AQuery aq=new AQuery((Activity)this);     String url=""http://music.daum.net/genre/genrealbum/list?genre_group_cd=KO&genre_cd=KO10&page_no="" + this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<AlbumInfo> paramArrayList=newAlbumList.this.mdaumAlbum(html);         newAlbumList.this.mRowList.addAll(paramArrayList);         if (paramArrayList.size() >= newAlbumList.this.pagesize) {           newAlbumList.this.mLockListView=false;         }         newAlbumList.this.mAdapter.notifyDataSetChanged();       }     } );   }   public ArrayList<AlbumInfo> mdaumAlbum(  String src){     ArrayList<AlbumInfo> albumlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.UL);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""list_album"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.LI);         for (        Element album1 : elementList1) {           AlbumInfo item=new AlbumInfo();           try {             item.thum=album1.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");             String linkTemp=album1.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");             item.link=linkTemp;             item.albumid=linkTemp.split(""="")[1];             item.name=album1.getAllElements(HTMLElementName.A).get(2).getAttributeValue(HTMLElementName.TITLE);             item.singer=album1.getAllElements(HTMLElementName.P).get(0).getTextExtractor().toString().replace(""ë‹¤ë¥¸ ê°€ìˆ˜ ë³´ê¸°"","""");             item.date=album1.getAllElements(HTMLElementName.EM).get(0).getTextExtractor().toString();             albumlist.add(item);           }  catch (          Exception e) {           }         }       }     }     return albumlist;   }   public ArrayList<AlbumInfo> mdaumAlbumBack(  String src){     ArrayList<AlbumInfo> albumlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.UL);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""list_album"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.LI);         for (        Element album1 : elementList1) {           AlbumInfo item=new AlbumInfo();           try {             item.thum=album1.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");             String linkTemp=album1.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");             item.link=linkTemp;             item.albumid=linkTemp.split(""="")[1];             item.name=album1.getAllElements(HTMLElementName.A).get(2).getAttributeValue(HTMLElementName.TITLE);             item.singer=album1.getAllElements(HTMLElementName.P).get(0).getTextExtractor().toString().replace(""ë‹¤ë¥¸ ê°€ìˆ˜ ë³´ê¸°"","""");             item.date=album1.getAllElements(HTMLElementName.EM).get(0).getTextExtractor().toString();             albumlist.add(item);           }  catch (          Exception e) {           }         }       }     }     return albumlist;   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<AlbumInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<AlbumInfo> member){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=member;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_album,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.text3=(TextView)convertView.findViewById(R.id.text3);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).name);       holder.text2.setText(this.data.get(position).singer);       holder.text3.setText(this.data.get(position).date);       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       return convertView;     } static class ViewHolder {       ImageView icon;       TextView text;       TextView text2;       TextView text3;       ViewHolder(){       }     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\newIdol.code","public class newIdol extends AdlibActivity {   private ArrayList<IdolInfo> idollist=new ArrayList<>();   ListView li;   EfficientAdapter mAdapter;   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.newidol);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         newIdol.this.finish();       }     } );     this.li=(ListView)findViewById(R.id.list);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         newIdol.this.setHit(((IdolInfo)newIdol.this.idollist.get(position)).sex,((IdolInfo)newIdol.this.idollist.get(position)).groupid,((IdolInfo)newIdol.this.idollist.get(position)).thum,((IdolInfo)newIdol.this.idollist.get(position)).name);         Intent myintent=new Intent(newIdol.this,(Class<?>)memberTab.class);         myintent.putExtra(""sex"",((IdolInfo)newIdol.this.idollist.get(position)).sex);         myintent.putExtra(""name"",((IdolInfo)newIdol.this.idollist.get(position)).name);         myintent.putExtra(""search"",((IdolInfo)newIdol.this.idollist.get(position)).name);         myintent.putExtra(""index"",Integer.toString(position));         myintent.putExtra(""artid"",((IdolInfo)newIdol.this.idollist.get(position)).groupid);         newIdol.this.startActivity(myintent);       }     } );     getList();   }   public void setHit(  String sex,  String artid,  String thum,  String name){     AQuery mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     params.put(""type"",sex);     params.put(""groupid"",artid);     params.put(""thum"",thum);     params.put(""name"",name);     mAQuery.ajax(""http://180.71.58.225/app/idol/savehit.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){       }     } );   }   private void getList(){     this.idollist.clear();     idolDBhelper mHelper=new idolDBhelper(this);     SQLiteDatabase db=mHelper.getWritableDatabase();     int cnt=0;     Cursor cursor=db.rawQuery(""select groupid,name_kor,name_eng,thum,content_kor,new_yn,fav,type from idolgroup where new_yn='Y' order by  sort asc"",null);     cursor.getCount();     cursor.moveToFirst();     while (!cursor.isAfterLast()) {       IdolInfo item=new IdolInfo();       item.groupid=cursor.getString(0);       item.name=cursor.getString(1);       item.thum=cursor.getString(3);       String[] Tmpstr=cursor.getString(4).split(""\n"");       item.member=Tmpstr[Tmpstr.length - 1];       item.fav=cursor.getString(6);       item.sex=cursor.getString(7);       item.newyn=cursor.getString(5);       this.idollist.add(item);       cursor.moveToNext();       cnt++;     }     cursor.close();     this.li.setAdapter((ListAdapter)new EfficientAdapter(this,this.idollist));     db.close();   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<IdolInfo> datalist=new ArrayList<>();     private Context mContext;     private LayoutInflater mInflater;     String sex;     public EfficientAdapter(    Context context,    ArrayList<IdolInfo> data){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;       this.datalist.addAll(data);     }     @Override public int getCount(){       return this.datalist.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_idol,(ViewGroup)null);         holder=new ViewHolder();         holder.txtname=(TextView)convertView.findViewById(R.id.txtname);         holder.txtcontent=(TextView)convertView.findViewById(R.id.txtcontent);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.newt=(ImageView)convertView.findViewById(R.id.hot);         holder.btnfav=(Button)convertView.findViewById(R.id.btnfav);         holder.btnfan=(Button)convertView.findViewById(R.id.btnfan);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.btnfan.setFocusable(false);       holder.btnfan.setVisibility(8);       holder.btnfav.setFocusable(false);       holder.btnfav.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           EfficientAdapter.this.setFav(position);         }       } );       holder.txtname.setText(this.datalist.get(position).name);       holder.txtcontent.setText(this.datalist.get(position).member);       this.aq.id(holder.icon).image(this.datalist.get(position).thum,true,true,0,0);       new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       return convertView;     }     public void setFav(    int idx){       idolDBhelper mHelper=new idolDBhelper(this.mContext);       SQLiteDatabase db1=mHelper.getWritableDatabase();       String query=""select * from idolgroup where groupid='"" + this.datalist.get(idx).groupid + ""' and fav='y' "";       Cursor cursor1=db1.rawQuery(query,null);       if (cursor1.getCount() > 0) {         String query2=""update idolgroup set fav='' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";         db1.execSQL(query2);         Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }  else {         String query3=""update idolgroup set fav='y' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";         db1.execSQL(query3);         Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();       }     } static class ViewHolder {       Button btnfan;       Button btnfav;       ImageView icon;       ImageView newt;       TextView txtcontent;       TextView txtname;       ViewHolder(){       }     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\News.code","public class News extends Activity {   ProgressBar bottom_prog;   ListView li;   EfficientAdapter2 mAdapter;   private boolean mLockListView;   String name;   ArrayList<NewsInfo> mRowList=new ArrayList<>();   int page=0;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     Intent i=getIntent();     this.name=i.getStringExtra(""name"");     setContentView(R.layout.news);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.li=(ListView)findViewById(R.id.listnews);     this.li.setFadingEdgeLength(0);     this.mLockListView=true;     searchNews();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(News.this.mRowList.get(position).link));         News.this.startActivity(intent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !News.this.mLockListView) {           News.this.bottom_prog.setVisibility(0);           News.this.mLockListView=true;           News.this.searchNews2();         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );   }   public void searchNews(){     String uname="""";     try {       uname=URLEncoder.encode(this.name,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     String url=""http://news.search.naver.com/search.naver?where=news&sm=tab_jum&ie=utf8&query="" + uname + ""&start=""+ Integer.toString((this.page * 10) + 1);     AQuery aq=new AQuery((Activity)this);     this.bottom_prog.setVisibility(0);     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""newsresult"");     aq.ajax(cb);   }   public void newsresult(  String url,  String html,  AjaxStatus paramAjaxStatus){     ArrayList<NewsInfo> paramArrayList=new ArrayList<>();     try {       paramArrayList=parserMNews(html);     }  catch (    Exception e) {     }     if (this.page == 0) {       this.mRowList.clear();       this.mRowList.addAll(paramArrayList);       this.mAdapter=new EfficientAdapter2(this,this.mRowList);       this.li.setAdapter((ListAdapter)this.mAdapter);     }  else {       this.mRowList.addAll(paramArrayList);       this.mAdapter.notifyDataSetChanged();     }     this.bottom_prog.setVisibility(8);     this.mLockListView=false;     this.page++;   }   public void searchNews2(){     String uname="""";     try {       uname=URLEncoder.encode(this.name,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     String url=""http://news.search.naver.com/search.naver?where=news&sm=tab_jum&ie=utf8&query="" + uname + ""&start=""+ Integer.toString((this.page * 10) + 1);     AQuery aq=new AQuery((Activity)this);     this.bottom_prog.setVisibility(0);     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""newsresult"");     aq.ajax(cb);   }   public ArrayList<NewsInfo> parserMNews(  String src){     ArrayList<NewsInfo> tmpInfo=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.UL);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""type01"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.LI);         for (        Element element2 : elementList1) {           try {             NewsInfo item=new NewsInfo();             item.thum="""";             List<Element> elementList2=element2.getAllElements(HTMLElementName.DIV);             for (            Element element3 : elementList2) {               String divClasss2=element3.getAttributeValue(""class"");               if (divClasss2 != null && divClasss2.equals(""thumb"")) {                 item.thum=element3.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");               }             }             item.link=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");             item.title=element2.getAllElements(HTMLElementName.A).get(1).getTextExtractor().toString();             item.content=element2.getAllElements(HTMLElementName.DD).get(1).getTextExtractor().toString();             item.bottom=element2.getAllElements(HTMLElementName.DD).get(0).getTextExtractor().toString().replace(""ë³´ë‚´ê¸°"","""");             tmpInfo.add(item);           }  catch (          Exception e) {           }         }       }     }     return tmpInfo;   } private static class EfficientAdapter2 extends BaseAdapter {     AQuery aq;     private ArrayList<NewsInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter2(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter2(    Context context,    ArrayList<NewsInfo> data1){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=data1;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_news,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.text3=(TextView)convertView.findViewById(R.id.text3);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.icon_line=(LinearLayout)convertView.findViewById(R.id.icon_line);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).title);       holder.text2.setText(this.data.get(position).content);       holder.text3.setText(this.data.get(position).bottom);       if (this.data.get(position).thum == null) {         holder.icon_line.setVisibility(8);       }  else {         this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       }       return convertView;     } static class ViewHolder {       ImageView icon;       LinearLayout icon_line;       TextView text;       TextView text2;       TextView text3;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\newsView.code","public class newsView extends Activity {   Button btnphoto;   WebView mywebview;   String newsid;   ArrayList<String> photolist=new ArrayList<>();   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.news_view);     Intent i=getIntent();     this.newsid=i.getStringExtra(""id"");     getNewsInfo(this.newsid);     CookieManager cookieManager=CookieManager.getInstance();     cookieManager.removeSessionCookie();     this.mywebview=(WebView)findViewById(R.id.myweb);     this.mywebview.setWebViewClient(new MyWebViewClient());     this.mywebview.getSettings().setJavaScriptEnabled(true);     this.mywebview.loadUrl(""http://m.media.daum.net/entertain/enews/view?newsid="" + this.newsid);   }   public void getNewsInfo(  String id){     AQuery mAQuery=new AQuery((Activity)this);     String url=""http://media.daum.net/entertain/proxy/id?portlet_id=news_view_js&&imageListYn=Y&textContentYn=Y&removeTagYn=N&nitfYn=N&summaryYn=Y&summaryLength=300&newsId="" + id;     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""photoresult"");     mAQuery.ajax(cb);   }   public void photoresult(  String url,  String html,  AjaxStatus paramAjaxStatus){     this.photolist=setData(html);     this.btnphoto.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){       }     } );   }   public ArrayList<String> setData(  String src){     ArrayList<String> tmpInfo=new ArrayList<>();     String item=null;     JSONObject json=null;     try {       JSONObject json2=new JSONObject(src);       json=json2;     }  catch (    JSONException e1) {       e1.printStackTrace();     }     JSONArray localJSONArray=json.optJSONArray(""image_list"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item=localJSONObject2.optString(""source"");       }  catch (      Exception e) {       }       tmpInfo.add(item);     }     return tmpInfo;   } public class MyWebViewClient extends WebViewClient {     ProgressDialog dialog;     public MyWebViewClient(){       this.dialog=new ProgressDialog(newsView.this);     }     @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){       view.loadUrl(url);       return true;     }     @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){       super.onPageStarted(view,url,favicon);       newsView.this.setProgressBarVisibility(true);     }     @Override public void onPageFinished(    WebView view,    String url){       super.onPageFinished(view,url);       newsView.this.setProgressBarVisibility(false);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\newView.code","public class newView extends Activity {   private static ProgressDialog dialog;   public static int sHeight;   public static int sWidth;   Button btnApp;   Button btnSave1;   Button btnSet;   Button btnShare;   long downtime;   ImageView imView;   ImageView menu_image;   Intent myintent;   SlidingDrawer sd;   private LinearLayout sublayout;   long uptime;   String imageUrl="""";   String groupid="""";   String artid="""";   String thum="""";   String bestcheck=""N"";   String imageName="""";   String strMessage="""";   private long dlastTime=0;   private Bitmap backBm=null;   boolean visibility=true;   boolean mdown=false;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       if (newView.this.backBm == null) {         Log.d(""image"",newView.this.imageUrl);         Toast.makeText(newView.this.getApplicationContext(),""Image Access Error"",SpeechRecognizer.ERROR_INVALID_STATUS).show();         newView.this.finish();       }  else {         ""Y"".equals(newView.this.bestcheck);       }       newView.dialog.dismiss();     }   } ;   @Override protected void onDestroy(){     super.onDestroy();     ViewUnbindHelper.unbindReferences(this.imView);     if (this.backBm != null) {       this.backBm.recycle();       this.backBm=null;     }   }   private void setSave(){     AQuery mAQuery=new AQuery((Activity)this);     Map<String,Object> params=new HashMap<>();     params.put(""groupid"",this.groupid);     params.put(""artid"",this.artid);     params.put(""thum"",this.thum);     params.put(""url"",this.imageUrl);     mAQuery.ajax(""http://180.71.58.225/app/idol/idolimagewrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){       }     } );   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     setContentView(R.layout.myview2);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     this.sd=(SlidingDrawer)findViewById(R.id.slide);     this.menu_image=(ImageView)findViewById(R.id.menu_image);     this.sd.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){       @Override public void onDrawerOpened(){         newView.this.menu_image.setBackgroundResource(R.drawable.btn_menu_view_ov);       }     } );     this.sd.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){       @Override public void onDrawerClosed(){         newView.this.menu_image.setBackgroundResource(R.drawable.btn_menu_view);       }     } );     this.btnSet=(Button)findViewById(R.id.btnwallpaper);     this.btnSave1=(Button)findViewById(R.id.btnsave);     this.btnShare=(Button)findViewById(R.id.btnshare);     this.btnApp=(Button)findViewById(R.id.btnapp);     this.imView=(ImageView)findViewById(R.id.myView1);     Intent i=getIntent();     this.imageUrl=i.getStringExtra(""message"");     this.groupid=i.getStringExtra(""groupid"");     this.artid=i.getStringExtra(""artid"");     this.thum=i.getStringExtra(""thum"");     this.bestcheck=i.getStringExtra(""bestcheck"");     this.imageName=String.valueOf(i.getStringExtra(""fname"")) + Long.toString(System.currentTimeMillis());     getImage();     this.btnSet.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         newView.this.wallpaerSet();         Toast.makeText(newView.this.getApplicationContext(),""ë°°ê²½í™”ë©´ìœ¼ë¡œ ì§€ì •ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     this.btnSave1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         newView.this.SaveBitmapToFileCache(newView.this.backBm,newView.this.imageName);         Toast.makeText(newView.this.getApplicationContext(),""SDCARD "" + Main.dirpath + "" ë””ë ‰í† ë¦¬ì—� ì €ìž¥ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     this.strMessage=""KPOP IDOL GUIDE"";     this.btnShare.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent it=new Intent(""android.intent.action.SEND"");         it.setType(""text/plain"");         it.putExtra(""android.intent.extra.SUBJECT"",newView.this.strMessage);         it.putExtra(""android.intent.extra.TEXT"",newView.this.imageUrl);         newView.this.startActivity(Intent.createChooser(it,""ê³µìœ í•˜ê¸°""));       }     } );     this.btnApp.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         newView.this.appwall();         Toast.makeText(newView.this.getApplicationContext(),""ì–´í”ŒìŠ¤í‚¨ì�´ ì§€ì •ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );   }   void getImage(){     AQuery mAQuery=new AQuery((Activity)this);     ViewUnbindHelper.unbindReferences(this.imView);     this.backBm=null;     dialog=ProgressDialog.show(this,""Loading.."",""Please Wait Image Loading..."",true,true);     mAQuery.id(R.id.myView1).image(this.imageUrl,false,false,0,0,new BitmapAjaxCallback(){       @Override public void callback(      String url,      ImageView iv,      Bitmap bm,      AjaxStatus status){         iv.setImageBitmap(bm);         newView.this.backBm=bm;         newView.this.handler.sendEmptyMessage(0);       }     } );   }   public void setView(){     dialog=ProgressDialog.show(this,""Loading.."",""Please Wait Image Loading..."",true,true);     new Thread(){       @Override public void run(){         newView.this.backBm=null;         newView.this.backBm=newView.this.getConnImg(newView.this.imageUrl);         newView.this.handler.sendEmptyMessage(0);       }     } .start();   }   public Bitmap getConnImg(  String url){     Bitmap bm=null;     try {       URL imgUrl=new URL(url);       URLConnection conn=imgUrl.openConnection();       HttpURLConnection httpConn=(HttpURLConnection)conn;       InputStream in=httpConn.getInputStream();       bm=BitmapFactory.decodeStream(in);       in.close();       return bm;     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return bm;     } catch (    MalformedURLException e2) {       e2.printStackTrace();       return bm;     } catch (    IOException e3) {       return bm;     }   }   public void wallpaerSet(){     this.imView.setDrawingCacheEnabled(true);     try {       WallpaperManager wallpaperManager=(WallpaperManager)getSystemService(""wallpaper"");       Bitmap bmp=this.imView.getDrawingCache();       wallpaperManager.setBitmap(bmp);       wallpaperManager.suggestDesiredDimensions((int)(sWidth * 1.2d),sHeight);     }  catch (    IOException e) {       e.printStackTrace();     }     this.imView.setDrawingCacheEnabled(false);   }   public void appwall(){     FileOutputStream fileOutputStream;     this.imView.setDrawingCacheEnabled(true);     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);     FileOutputStream fileOutputStream2=null;     if (!sdImageMainDirectory.exists()) {       sdImageMainDirectory.mkdir();     }     Bitmap bitmap=this.imView.getDrawingCache();     try {       try {         fileOutputStream=new FileOutputStream(String.valueOf(sdImageMainDirectory.toString()) + ""/kpopwall"");       }  catch (      Exception e) {         e=e;       }     }  catch (    Throwable th) {       th=th;     }     try {       bitmap.compress(Bitmap.CompressFormat.JPEG,100,fileOutputStream);       try {         fileOutputStream.close();       }  catch (      IOException e2) {         e2.printStackTrace();       }     }  catch (    Exception e3) {       e=e3;       fileOutputStream2=fileOutputStream;       e.printStackTrace();       try {         fileOutputStream2.close();       }  catch (      IOException e4) {         e4.printStackTrace();       }       this.imView.setDrawingCacheEnabled(false);     } catch (    Throwable th2) {       th=th2;       fileOutputStream2=fileOutputStream;       try {         fileOutputStream2.close();       }  catch (      IOException e5) {         e5.printStackTrace();       }       throw th;     }     this.imView.setDrawingCacheEnabled(false);   }   public void SaveBitmapToFileCache(  Bitmap bitmap,  String fileName){     FileOutputStream fileOutputStream;     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);     FileOutputStream fileOutputStream2=null;     if (!sdImageMainDirectory.exists()) {       sdImageMainDirectory.mkdir();     }     try {       try {         fileOutputStream=new FileOutputStream(String.valueOf(sdImageMainDirectory.toString()) + ""/"" + fileName+ "".jpg"");       }  catch (      Throwable th) {         th=th;       }     }  catch (    Exception e) {       e=e;     }     try {       bitmap.compress(Bitmap.CompressFormat.JPEG,100,fileOutputStream);       try {         fileOutputStream.close();       }  catch (      IOException e2) {         e2.printStackTrace();       }     }  catch (    Exception e3) {       e=e3;       fileOutputStream2=fileOutputStream;       e.printStackTrace();       try {         fileOutputStream2.close();       }  catch (      IOException e4) {         e4.printStackTrace();       }       sendBroadcast(new Intent(""android.intent.action.MEDIA_MOUNTED"",Uri.parse(""file://"" + Environment.getExternalStorageDirectory())));     } catch (    Throwable th2) {       th=th2;       fileOutputStream2=fileOutputStream;       try {         fileOutputStream2.close();       }  catch (      IOException e5) {         e5.printStackTrace();       }       throw th;     }     sendBroadcast(new Intent(""android.intent.action.MEDIA_MOUNTED"",Uri.parse(""file://"" + Environment.getExternalStorageDirectory())));   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\nickset.code","public class nickset extends Activity {   private static ProgressDialog dialog;   Button btndelete;   Button btnend;   Button btnsave;   EditText content;   EditText email;   String in_sex="""";   AQuery mAQuery;   private SharedPreferences mPrefs;   String myNick;   String mySex;   EditText name;   RadioButton rfmale;   RadioButton rmale;   EditText vnick;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.nickset);     this.mAQuery=new AQuery((Activity)this);     this.btnsave=(Button)findViewById(R.id.btnsave);     this.btnend=(Button)findViewById(R.id.btncancel);     this.vnick=(EditText)findViewById(R.id.nick);     this.btndelete=(Button)findViewById(R.id.btndelete);     this.btndelete.setVisibility(8);     this.rmale=(RadioButton)findViewById(R.id.male);     this.rfmale=(RadioButton)findViewById(R.id.female);     this.mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=this.mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     this.btnsave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         RadioGroup rg=(RadioGroup)nickset.this.findViewById(R.id.sex);         if (rg.getCheckedRadioButtonId() < 0) {           Toast.makeText(nickset.this.getApplicationContext(),""ì„±ë³„ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì‹­ì‹œìš”"",1000).show();           return;         }         RadioButton rd=(RadioButton)nickset.this.findViewById(rg.getCheckedRadioButtonId());         String str_Qtype=rd.getText().toString();         if (""ë‚¨"".equals(str_Qtype)) {           nickset.this.in_sex=""1"";         }         if (""ì—¬"".equals(str_Qtype)) {           nickset.this.in_sex=""2"";         }         if ("""".equals(nickset.this.vnick.getText().toString().trim())) {           Toast.makeText(nickset.this.getApplicationContext(),""ë‹‰ë„¤ìž„ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì‹­ì‹œìš”"",1000).show();         }  else {           nickset.this.saveNick();         }       }     } );     this.btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         nickset.this.finish();       }     } );     this.btndelete.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         new AlertDialog.Builder(nickset.this).setTitle("""").setMessage(""ì •ë§�ë¡œ ì‚­ì œ í•˜ì‹œê² ìŠµë‹ˆê¹Œ?"").setPositiveButton(""ì˜ˆ"",new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog2,          int whichButton){             nickset.this.delNick();           }         } ).setNegativeButton(""ì•„ë‹ˆì˜¤"",(DialogInterface.OnClickListener)null).show();       }     } );     getNick();   }   public void getNick(){     this.btnsave.setEnabled(false);     Object myDeviceid=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""device"",myDeviceid);     params.put(""ver"",""nick"");     this.mAQuery.ajax(""http://180.71.58.225/app/idol/getnick.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         if (json.trim().split("":"").length > 1) {           nickset.this.myNick=json.trim().split("":"")[0];           nickset.this.mySex=json.split("":"")[1];           if (""1"".equals(nickset.this.mySex.trim())) {             nickset.this.rmale.setChecked(true);           }           if (""2"".equals(nickset.this.mySex.trim())) {             nickset.this.rfmale.setChecked(true);           }           nickset.this.vnick.setText(nickset.this.myNick);         }         nickset.this.btnsave.setEnabled(true);         if (!"""".equals(nickset.this.myNick)) {           nickset.this.btndelete.setVisibility(0);         }       }     } );   }   public void saveNick(){     Object myDeviceid=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""device"",myDeviceid);     params.put(""nick"",this.vnick.getText().toString().trim());     params.put(""sex"",this.in_sex);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/savenick.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         if (""0"".equals(json.trim())) {           Toast.makeText(nickset.this.getApplicationContext(),""ì�´ë¯¸ì¡´ìž¬í•˜ëŠ” ë‹‰ë„¤ìž„ìž…ë‹ˆë‹¤.ë‹¤ë¥¸ë‹‰ì�„ ì�´ìš©í•´ì£¼ì‹­ì‹œìš”"",1000).show();           return;         }         nickset.this.myNick=nickset.this.vnick.getText().toString().trim();         SharedPreferences.Editor editor=nickset.this.mPrefs.edit();         editor.putString(Main.SHARED_PREFS_NAME,nickset.this.myNick);         editor.commit();         Toast.makeText(nickset.this.getApplicationContext(),""ë‹‰ë„¤ìž„ì�´ ë“±ë¡�ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();         nickset.this.finish();       }     } );   }   public void delNick(){     Object myDeviceid=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""device"",myDeviceid);     params.put(""nick"",this.vnick.getText().toString().trim());     this.mAQuery.ajax(""http://180.71.58.225/app/idol/delnick.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         if (""0"".equals(json.trim())) {           Toast.makeText(nickset.this.getApplicationContext(),""ì�´ë¯¸ì¡´ìž¬í•˜ëŠ” ë‹‰ë„¤ìž„ìž…ë‹ˆë‹¤.ë‹¤ë¥¸ë‹‰ì�„ ì�´ìš©í•´ì£¼ì‹­ì‹œìš”"",1000).show();           return;         }         nickset.this.myNick=nickset.this.vnick.getText().toString().trim();         SharedPreferences.Editor editor=nickset.this.mPrefs.edit();         editor.putString(Main.SHARED_PREFS_NAME,"""");         editor.commit();         Toast.makeText(nickset.this.getApplicationContext(),""ë‹‰ë„¤ìž„ì�´ ì„œë²„ì—�ì„œ ì‚­ì œ ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();         nickset.this.getNick();       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\noticeBoard.code","public class noticeBoard extends AdlibActivity implements AbsListView.OnScrollListener {   private ImageButton btSave;   EditText comment;   private String index;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   TextView mtitle;   Intent myintent;   private String name;   private String sex;   private int c_page=2;   private int pagesize=10;   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.noticeboard);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         noticeBoard.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent3=new Intent(noticeBoard.this.getApplication(),(Class<?>)Comment.class);         myintent3.putExtra(""content"",((BoardList)noticeBoard.this.mRowList.get(position)).content);         myintent3.putExtra(""idx"",((BoardList)noticeBoard.this.mRowList.get(position)).idx);         noticeBoard.this.startActivity(myintent3);       }     } );     this.btSave=(ImageButton)findViewById(R.id.btnSave);     this.comment=(EditText)findViewById(R.id.comment);     this.btSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (noticeBoard.this.comment.getText().toString().trim().equals("""")) {           Toast.makeText(noticeBoard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();         }  else {           noticeBoard.this.setSave();         }       }     } );     this.mLockListView=true;     makea();   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   public void setSave(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""ì €ìž¥ì¤‘ìž…ë‹ˆë‹¤..."",80,true,true,null);     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""type"",""n"");     params.put(""content"",this.comment.getText());     params.put(""device"",deviceId);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         mProgressHUD.dismiss();         if (json.equals(""0"")) {           noticeBoard.this.comment.setText((CharSequence)null);           Toast.makeText(noticeBoard.this.getApplicationContext(),""í•˜ë£¨ 10íšŒê¹Œì§€ ì�‘ì›�ê°€ëŠ¥í•©ë‹ˆë‹¤."",1000).show();         }  else {           noticeBoard.this.comment.setText((CharSequence)null);           noticeBoard.this.c_page=2;           noticeBoard.this.mRowList.clear();           noticeBoard.this.makea();         }       }     } );   }   private void makeaAdd(  int page){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",""n"");     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         noticeBoard.this.mRowList.addAll(noticeBoard.this.setData2(json));         if (noticeBoard.this.setData2(json).size() >= noticeBoard.this.pagesize) {           noticeBoard.this.mLockListView=false;         }         noticeBoard.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",""n"");     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         noticeBoard.this.mRowList=noticeBoard.this.setData2(json);         if (noticeBoard.this.mRowList.size() >= noticeBoard.this.pagesize) {           noticeBoard.this.mLockListView=false;         }         noticeBoard.this.c_page=2;         noticeBoard.this.mAdapter=new EfficientAdapter(noticeBoard.this,noticeBoard.this.mRowList);         noticeBoard.this.li.setAdapter((ListAdapter)noticeBoard.this.mAdapter);       }     } );   } public static class EfficientAdapter extends BaseAdapter {     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_notice,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.textC=(TextView)convertView.findViewById(R.id.textC);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text1.setText(this.dataS.get(position).content);       holder.text2.setText(this.dataS.get(position).date.trim());       holder.textC.setVisibility(0);       holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");       if (position % 2 == 0) {         holder.icon.setBackgroundResource(R.drawable.community_ico2);       }  else {         holder.icon.setBackgroundResource(R.drawable.community_ico2);       }       return convertView;     } static class ViewHolder {       ImageView icon;       TextView text1;       TextView text2;       TextView textC;       ViewHolder(){       }     }   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.ip=localJSONObject2.optString(""device"");         item.idx=localJSONObject2.optString(""idx"");         item.nickname=localJSONObject2.optString(""nickname"");         item.cm_cnt=localJSONObject2.optString(""cnt"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class BoardList {     String cm_cnt;     String content;     String date;     String hit;     String idx;     String ip;     String nickname;     BoardList(){     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\photobook.code","public class photobook extends Activity {   Typeface face;   private int gpos;   public ListView li;   AQuery mAQuery;   FlingGallery mGallery;   ArrayList<photoInfo> photoList=new ArrayList<>();   String pid;   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.photobook);     this.mGallery=(FlingGallery)findViewById(R.id.galleryf);     this.face=Typeface.createFromAsset(getAssets(),""CHONBUKL.TTF"");     Intent i=getIntent();     this.pid=i.getStringExtra(""keyword"");     this.pid=""110019"";     makeStart(this.pid);   }   @Override public boolean onTouchEvent(  MotionEvent event){     return this.mGallery.onGalleryTouchEvent(event);   }   public void makeStart_Slide(  String id){     this.mAQuery=new AQuery((Activity)this);     String url=""http://sports.media.daum.net/nms/service/news/json/view_slide_list?gid="" + id + ""&count=200&page=1"";     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""slideresult"");     this.mAQuery.ajax(cb);   }   public void slideresult(  String url,  String html,  AjaxStatus paramAjaxStatus){     this.photoList=setSlideData(html);     this.mGallery.setAdapter(new ArrayAdapter<photoInfo>(getApplicationContext(),android.R.layout.simple_list_item_1,this.photoList){       @Override public View getView(      int position,      View convertView,      ViewGroup parent){         if (convertView == null || !(convertView instanceof GalleryViewItem)) {           return new GalleryViewItem(photobook.this.getApplicationContext(),position);         }         GalleryViewItem galleryView=(GalleryViewItem)convertView;         galleryView.mText1.setText(photobook.this.photoList.get(position).title);         galleryView.mText2.setText(""["" + photobook.this.photoList.get(position).cpname + ""] ""+ photobook.this.photoList.get(position).id.substring(0,4)+ ""-""+ photobook.this.photoList.get(position).id.substring(4,6)+ ""-""+ photobook.this.photoList.get(position).id.substring(6,8));         photobook.this.mAQuery.id(galleryView.mImageView).progress(R.id.progress).image(photobook.this.photoList.get(position).image,true,true,0,0,new BitmapAjaxCallback(){           @Override public void callback(          String url2,          ImageView iv,          Bitmap bm,          AjaxStatus status){             iv.setImageBitmap(bm);           }         } );         return galleryView;       }     } );   }   public void makeStart(  String id){     this.mAQuery=new AQuery((Activity)this);     String url=""http://media.daum.net/entertain/proxy/id?portlet_id=gallery_news_list_js&&type=photo&page_size=200&gallery_id="" + id + ""&sort=desc&category_id=1005"";     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""startresult"");     this.mAQuery.ajax(cb);   }   public void startresult(  String url,  String html,  AjaxStatus paramAjaxStatus){     this.photoList=setData(html);     this.mGallery.setAdapter(new ArrayAdapter<photoInfo>(getApplicationContext(),android.R.layout.simple_list_item_1,this.photoList){       @Override public View getView(      int position,      View convertView,      ViewGroup parent){         if (convertView == null || !(convertView instanceof GalleryViewItem)) {           return new GalleryViewItem(photobook.this.getApplicationContext(),position);         }         GalleryViewItem galleryView=(GalleryViewItem)convertView;         galleryView.mText1.setText(photobook.this.photoList.get(position).title);         galleryView.mText2.setText(""["" + photobook.this.photoList.get(position).cpname + ""] ""+ photobook.this.photoList.get(position).id.substring(0,4)+ ""-""+ photobook.this.photoList.get(position).id.substring(4,6)+ ""-""+ photobook.this.photoList.get(position).id.substring(6,8));         photobook.this.mAQuery.id(galleryView.mImageView).progress(R.id.progress).image(photobook.this.photoList.get(position).image,true,true,0,0,new BitmapAjaxCallback(){           @Override public void callback(          String url2,          ImageView iv,          Bitmap bm,          AjaxStatus status){             iv.setImageBitmap(bm);           }         } );         return galleryView;       }     } );   }   public ArrayList<photoInfo> setSlideData(  String src){     ArrayList<photoInfo> tmpInfo=new ArrayList<>();     JSONObject json=null;     try {       JSONObject json2=new JSONObject(src);       json=json2;     }  catch (    JSONException e1) {       e1.printStackTrace();     }     JSONArray localJSONArray=json.optJSONArray(""newslist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       photoInfo item=new photoInfo();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.id=localJSONObject2.optString(""newsId"");         item.image=localJSONObject2.optString(""imageUrl"");         item.keywords=localJSONObject2.optString(""keywords"");         item.title=localJSONObject2.optString(HTMLElementName.TITLE);         item.cpid=localJSONObject2.optString(""cpId"");         item.cpname=localJSONObject2.optString(""cpKorName"");         item.summary=localJSONObject2.optString(""summary"");       }  catch (      Exception e) {       }       tmpInfo.add(item);     }     return tmpInfo;   }   public ArrayList<photoInfo> setData(  String src){     ArrayList<photoInfo> tmpInfo=new ArrayList<>();     JSONObject json=null;     try {       JSONObject json2=new JSONObject(src);       json=json2;     }  catch (    JSONException e1) {       e1.printStackTrace();     }     JSONArray localJSONArray=null;     try {       localJSONArray=json.getJSONObject(""newsList"").optJSONArray(""data"");     }  catch (    JSONException e12) {       e12.printStackTrace();     }     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       photoInfo item=new photoInfo();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.id=localJSONObject2.optString(""id"");         item.image=localJSONObject2.getJSONObject(""newsImage"").optString(""url"");         item.keywords=localJSONObject2.optString(""keywords"");         item.title=localJSONObject2.optString(HTMLElementName.TITLE);         item.cpid=localJSONObject2.getJSONObject(""cp"").optString(""id"");         item.cpname=localJSONObject2.getJSONObject(""cp"").optString(""korName"");         item.summary=localJSONObject2.optString(""summary"");       }  catch (      Exception e) {       }       tmpInfo.add(item);     }     return tmpInfo;   } public class GalleryViewItem extends FrameLayout {     String cp;     private LinearLayout lmenu;     AQuery mAQuery;     private Button mButton1;     private Button mButton2;     private EditText mEdit1;     private GestureDetector mGestureDetector;     private ImageView mImageView;     private TextView mText1;     private TextView mText2;     private boolean motioncheck;     private int pos;     public GalleryViewItem(    Context context,    int position){       super(context);       this.motioncheck=true;       this.mAQuery=new AQuery(this);       this.mGestureDetector=new GestureDetector(new thisGestureDetector(this,null));       this.mImageView=new ImageView(context);       this.mImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);       LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(-1,-1);       params.weight=1.0f;       this.mImageView.setLayoutParams(params);       addView(this.mImageView);       this.cp=""["" + photobook.this.photoList.get(position).cpname + ""] ""+ photobook.this.photoList.get(position).id.substring(0,4)+ ""-""+ photobook.this.photoList.get(position).id.substring(4,6)+ ""-""+ photobook.this.photoList.get(position).id.substring(6,8);       this.lmenu=new LinearLayout(context);       this.lmenu.setOrientation(1);       float pixels=TypedValue.applyDimension(1,80.0f,context.getResources().getDisplayMetrics());       FrameLayout.LayoutParams params1=new FrameLayout.LayoutParams(-1,(int)pixels);       params1.gravity=80;       this.lmenu.setPadding(10,10,10,10);       this.lmenu.setBackgroundResource(R.drawable.mask1);       this.mText1=new TextView(context);       this.mText1.setTextColor(-1);       this.mText1.setTextSize(20.0f);       this.mText1.setGravity(3);       this.mText1.setText(photobook.this.photoList.get(position).title);       this.mText1.setTypeface(photobook.this.face);       this.lmenu.addView(this.mText1);       this.mText2=new TextView(context);       this.mText2.setTextColor(-1);       this.mText2.setTextSize(15.0f);       this.mText2.setGravity(80);       this.mText2.setText(this.cp);       this.mText2.setTypeface(photobook.this.face);       this.lmenu.addView(this.mText2);       addView(this.lmenu,params1);       this.mAQuery.id(this.mImageView).progress(R.id.progress).image(photobook.this.photoList.get(position).image,true,true,0,0,new BitmapAjaxCallback(){         @Override public void callback(        String url,        ImageView iv,        Bitmap bm,        AjaxStatus status){           iv.setImageBitmap(bm);         }       } );       this.mImageView.setOnTouchListener(new View.OnTouchListener(){         @Override public boolean onTouch(        View v,        MotionEvent event){           if (!GalleryViewItem.this.mGestureDetector.onTouchEvent(event)) {             return photobook.this.mGallery.onGalleryTouchEvent(event);           }           return GalleryViewItem.this.mGestureDetector.onTouchEvent(event);         }       } );     } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {       private thisGestureDetector(){       }       thisGestureDetector(      GalleryViewItem galleryViewItem,      thisGestureDetector thisgesturedetector){         this();       }       @Override public boolean onSingleTapUp(      MotionEvent e){         String url=""http://m.media.daum.net/entertain/enews/view?newsid="" + photobook.this.photoList.get(photobook.this.mGallery.getPosition()).id;         Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(url));         intent.addFlags(268435456);         photobook.this.startActivity(intent);         return false;       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\pviewfull.code","public class pviewfull extends AdlibActivity {   private static final int SWIPE_MAX_OFF_PATH=400;   private static final int SWIPE_MIN_DISTANCE=100;   private static final int SWIPE_THRESHOLD_VELOCITY=10;   private static ProgressDialog dialog;   int adHeight;   String artid;   Bitmap backBm;   Button btnCancel;   Button btnEnd;   Button btnRe;   Button btnStart;   int c_cnt;   TextView changecnt;   int curidx;   LinearLayout endmenu;   long g_time;   int game_sec;   RadioGroup gameopt;   LinearLayout gamestatus;   private GestureDetector gestureScanner;   private String gname;   ArrayList<gamepan> gp;   FrameLayout gpan;   private String gthum;   private String gurl;   AQuery mAQuery;   private SharedPreferences mPrefs;   TextView match;   long mstart_time;   private String musicid;   private String myNick;   EditText name;   int pHCnt;   int pHeight;   int pWCnt;   int pWidth;   LinearLayout pan;   LinearLayout pan12;   LinearLayout panfrm;   private String parentid;   private String parentname;   int sHeight;   int sWidth;   ArrayList<splite> sp;   LinearLayout startmenu;   TextView time1;   ImageView timg;   String type;   String myname="""";   private int MIN_DIST=0;   int status=0;   private String dirpath=""neoArt"";   boolean oneclick=false;   boolean changeflag=false;   int preidx=-1;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       pviewfull.this.g_time=System.currentTimeMillis() - pviewfull.this.mstart_time;       pviewfull.this.time1.setText(pviewfull.this.getTimefor(Long.toString(pviewfull.this.game_sec)));     }   } ;   public String getTimefor(  String du){     int i=Integer.parseInt(du);     int tmp=i % SWIPE_MIN_DISTANCE;     int tmpn=i / SWIPE_MIN_DISTANCE;     int tmp1=tmpn / 60;     int tmp1n=tmpn % 60;     int tmp2=tmp1 / 60;     int tmp2n=tmp1 % 60;     int i2=tmp2 / 60;     int tmp3n=tmp2 % 60;     String timerBuffer=String.format(""%02d:%02d:%02d.%02d"",Integer.valueOf(tmp3n),Integer.valueOf(tmp2n),Integer.valueOf(tmp1n),Integer.valueOf(tmp));     return timerBuffer;   }   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.puzzleviewfull);     initAds();     setAdsContainer(R.id.ads);     this.mAQuery=new AQuery((Activity)this);     this.mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myname=this.mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     this.gestureScanner=new GestureDetector(new thisGestureDetector(this,null));     this.pan=(LinearLayout)findViewById(R.id.pan11);     this.gamestatus=(LinearLayout)findViewById(R.id.gamestatus);     this.startmenu=(LinearLayout)findViewById(R.id.startmenu);     this.endmenu=(LinearLayout)findViewById(R.id.endmenu);     this.gameopt=(RadioGroup)findViewById(R.id.gameopt);     this.timg=(ImageView)findViewById(R.id.timg);     this.gpan=(FrameLayout)findViewById(R.id.panfrm);     this.name=(EditText)findViewById(R.id.name);     this.name.setText(this.myname);     this.time1=(TextView)findViewById(R.id.time);     this.match=(TextView)findViewById(R.id.match);     this.changecnt=(TextView)findViewById(R.id.changecnt);     this.btnStart=(Button)findViewById(R.id.gamestart);     this.btnCancel=(Button)findViewById(R.id.gamecancel);     this.btnEnd=(Button)findViewById(R.id.gameend);     this.btnRe=(Button)findViewById(R.id.gamerestart);     this.btnRe.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (pviewfull.this.myNickSet()) {           pviewfull.this.rankRegister();         }  else {           Intent i=new Intent(pviewfull.this.getApplicationContext(),(Class<?>)nickset.class);           pviewfull.this.startActivity(i);         }       }     } );     this.btnEnd.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         pviewfull.this.finish();       }     } );     this.btnStart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         pviewfull.this.gameStart();       }     } );     this.btnCancel.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         pviewfull.this.finish();       }     } );     Intent i=getIntent();     this.sWidth=i.getIntExtra(""sx"",0);     this.sHeight=i.getIntExtra(""sy"",0);     this.pWCnt=i.getIntExtra(""gamex"",3);     this.pHCnt=i.getIntExtra(""gamey"",5);     this.gname=i.getStringExtra(""gname"");     this.gthum=i.getStringExtra(""gthum"");     this.gurl=i.getStringExtra(""gurl"");     this.type=i.getStringExtra(""type"");     this.artid=i.getStringExtra(""artid"");     this.parentid=i.getStringExtra(""parentid"");     this.parentname=i.getStringExtra(""parentname"");     this.musicid=i.getStringExtra(""musicid"");     this.backBm=BitmapFactory.decodeByteArray(i.getByteArrayExtra(""jpgimg""),0,i.getByteArrayExtra(""jpgimg"").length);     if (""0"".equals(this.type)) {       this.MIN_DIST=0;     }  else     if (""1"".equals(this.type)) {       this.MIN_DIST=10;     }  else     if (""2"".equals(this.type)) {       this.MIN_DIST=20;     }  else     if (""3"".equals(this.type)) {       this.MIN_DIST=50;     }     Environment.getExternalStorageDirectory().getAbsolutePath();     Drawable drawable=new BitmapDrawable(this.backBm);     this.timg.setBackgroundDrawable(drawable);     this.timg.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (pviewfull.this.status == 1) {           pviewfull.this.timg.setVisibility(8);         }       }     } );     gameStart();   }   public void gameSet(  Bitmap bm){     this.pWidth=bm.getWidth() / this.pWCnt;     this.pHeight=bm.getHeight() / this.pHCnt;     int cnt=0;     for (int j=0; j < this.pHCnt; j++) {       for (int i=0; i < this.pWCnt; i++) {         splite item=new splite();         item.idx=(this.pWCnt * j) + i;         item.img=Bitmap.createBitmap(bm,this.pWidth * i,this.pHeight * j,this.pWidth,this.pHeight);         this.sp.add(cnt,item);         cnt++;       }     }     for (int c=0; c < this.pWCnt * this.pHCnt; c++) {       gamepan item2=new gamepan();       item2.idx=c;       item2.split=c;       this.gp.add(c,item2);     }     this.gp=ArrayZig(this.gp);     gameDisplay();   }   public void gameDisplay(){     for (int j=0; j < this.pHCnt; j++) {       LinearLayout linearLayout=new LinearLayout(getApplicationContext());       LinearLayout.LayoutParams Params1=new LinearLayout.LayoutParams(-2,-2);       linearLayout.setLayoutParams(Params1);       linearLayout.setOrientation(0);       linearLayout.setFocusable(false);       for (int i=0; i < this.pWCnt; i++) {         final int idx=i + (this.pWCnt * j);         BorderImageViewGame panImage=new BorderImageViewGame(getApplicationContext());         LinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(this.pWidth - 1,this.pHeight - 1);         params2.setMargins(0,0,0,0);         panImage.setLayoutParams(params2);         panImage.setAlpha(180);         panImage.setImageBitmap(this.sp.get(this.gp.get(idx).split).img);         linearLayout.addView(panImage);         panImage.setFocusable(true);         panImage.setOnClickListener(new View.OnClickListener(){           @Override public void onClick(          View v){             if (pviewfull.this.status == 1) {               pviewfull.this.changePan(idx);             }           }         } );         panImage.setOnTouchListener(new View.OnTouchListener(){           @Override public boolean onTouch(          View v,          MotionEvent event){             if (event.getAction() == 0) {               pviewfull.this.changePan(idx);             }             return pviewfull.this.onTouchEvent(event);           }         } );       }       int m=this.pan.getChildCount();       this.pan.addView(linearLayout,m);     }   }   public void gameStart(){     this.gp=new ArrayList<>(this.pWCnt * this.pHCnt);     this.sp=new ArrayList<>(this.pWCnt * this.pHCnt);     this.adHeight=0;     this.startmenu.setVisibility(8);     this.gamestatus.setVisibility(0);     gameSet(this.backBm);     gameCheck();     this.mstart_time=System.currentTimeMillis();     new Thread(new Runnable(){       @Override public void run(){         while (pviewfull.this.status == 1) {           pviewfull.this.handler.sendEmptyMessage(0);           pviewfull.this.game_sec++;           try {             Thread.sleep(10L);           }  catch (          InterruptedException e) {             e.printStackTrace();           }         }       }     } ).start();     this.status=1;     this.game_sec=0;     this.c_cnt=0;     this.timg.setVisibility(8);   }   public void changePanSwipe(  int st){     ScaleAnimation anim=null;     int newidx=0; switch (st) { case 1:       if (this.curidx % this.pWCnt != 0) {         newidx=this.curidx - 1;       }  else {         newidx=this.curidx;       }     anim=new ScaleAnimation(1.0f,0.3f,1.0f,1.0f,1,0.5f,1,1.0f);   anim.setDuration(100L); break; case 2: if (this.curidx % this.pWCnt != this.pWCnt - 1) { newidx=this.curidx + 1; }  else { newidx=this.curidx; } anim=new ScaleAnimation(1.0f,0.3f,1.0f,1.0f,1,0.5f,1,1.0f); anim.setDuration(100L); break; case 3: if (this.curidx >= this.pWCnt) { newidx=this.curidx - this.pWCnt; }  else { newidx=this.curidx; } anim=new ScaleAnimation(1.0f,1.0f,1.0f,0.3f,1,0.1f,1,0.5f); anim.setDuration(100L); break; case 4: if (this.curidx < (this.pWCnt * this.pHCnt) - this.pWCnt) { newidx=this.curidx + this.pWCnt; }  else { newidx=this.curidx; } anim=new ScaleAnimation(1.0f,1.0f,1.0f,0.3f,1,0.1f,1,0.5f); anim.setDuration(100L); break; } int wrapidx=this.curidx / this.pWCnt; int imgidx=this.curidx % this.pWCnt; int csplite=this.gp.get(this.curidx).split; LinearLayout sLine=(LinearLayout)this.pan.getChildAt(wrapidx); ImageView sView=(ImageView)sLine.getChildAt(imgidx); int pwrapidx=newidx / this.pWCnt; int pimgidx=newidx % this.pWCnt; int psplite=this.gp.get(newidx).split; LinearLayout psLine=(LinearLayout)this.pan.getChildAt(pwrapidx); ImageView psView=(ImageView)psLine.getChildAt(pimgidx); sView.setAlpha(MotionEventCompat.ACTION_MASK); psView.setAlpha(MotionEventCompat.ACTION_MASK); sView.setAnimation(anim); psView.setAnimation(anim); sView.startAnimation(anim); psView.startAnimation(anim); sView.setImageBitmap(this.sp.get(psplite).img); psView.setImageBitmap(this.sp.get(csplite).img); this.gp.get(newidx).split=csplite; this.gp.get(this.curidx).split=psplite; this.changeflag=false; this.c_cnt++; gameCheck(); } public void changePan(int idx){ this.curidx=idx; } public void gameCheck(){ int match_cnt=0; for (int c=0; c < this.pWCnt * this.pHCnt; c++) { int wrapidx=c / this.pWCnt; int imgidx=c % this.pWCnt; LinearLayout sLine=(LinearLayout)this.pan.getChildAt(wrapidx); ImageView sView=(ImageView)sLine.getChildAt(imgidx); sView.setColorFilter((ColorFilter)null); if (this.gp.get(c).idx == this.gp.get(c).split) { sView.setAlpha(MotionEventCompat.ACTION_MASK); match_cnt++; }  else { sView.setAlpha(180); } } this.match.setText(""ì •ë‹µ:"" + Integer.toString(match_cnt) + ""/""+ Integer.toString(this.pWCnt * this.pHCnt)); this.changecnt.setText(""ì�´ë�™:"" + Integer.toString(this.c_cnt)); if (match_cnt == this.pWCnt * this.pHCnt) { this.handler.sendEmptyMessage(0); this.endmenu.setVisibility(0); this.pan.removeAllViews(); this.timg.setVisibility(0); this.status=2; } } public ArrayList<gamepan> ArrayZig(ArrayList<gamepan> ingp){ ArrayList<gamepan> tmpgp=new ArrayList<>(); int orisize=ingp.size(); Random rand=new Random(); for (int cc=0; cc < orisize; cc++) { int ran=rand.nextInt(ingp.size()); gamepan item=new gamepan(); item.split=ingp.get(ran).idx; item.idx=cc; tmpgp.add(item); ingp.remove(ran); } return tmpgp; } public void rankRegister(){ Object android_id=Settings.Secure.getString(getContentResolver(),""android_id""); dialog=new ProgressDialog(this); dialog.setProgressStyle(0); dialog.setMessage(""ì €ìž¥ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”.""); dialog.setCancelable(true); dialog.show(); Map<String,Object> params=new HashMap<>(); params.put(""sex"",""3""); params.put(""type"",this.type); params.put(""gname"",this.gname); params.put(""gthum"",this.gthum); params.put(""gurl"",this.gurl); params.put(""gmove"",Integer.valueOf(this.c_cnt)); params.put(""gtime"",Integer.valueOf(this.game_sec)); params.put(""device"",android_id); params.put(""nick"",this.myNick); params.put(""artid"",this.artid); params.put(""parentid"",this.parentid); params.put(""parentname"",this.parentname); params.put(""musicid"",this.musicid); this.mAQuery.ajax(""http://180.71.58.225/app/idol/prankwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){ @Override public void callback(String url,String json,AjaxStatus status){ pviewfull.dialog.dismiss(); Toast.makeText(pviewfull.this.getApplicationContext(),""ì �ìˆ˜ê°€ ì €ìž¥ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show(); pviewfull.this.finish(); } } ); } public void hintImage(){ this.timg.setVisibility(0); } @Override public boolean onTouchEvent(MotionEvent me){ return this.gestureScanner.onTouchEvent(me); } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener { private thisGestureDetector(){ } thisGestureDetector(pviewfull pviewfullVar,thisGestureDetector thisgesturedetector){ this(); } @Override public boolean onDoubleTap(MotionEvent e){ pviewfull.this.hintImage(); return false; } @Override public boolean onSingleTapUp(MotionEvent e){ return false; } @Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){ try { if (Math.abs(e1.getY() - e2.getY()) <= 400.0f) { if (e1.getX() - e2.getX() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityX) > 10.0f) { pviewfull.this.changePanSwipe(1); }  else if (e2.getX() - e1.getX() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityX) > 10.0f) { pviewfull.this.changePanSwipe(2); }  else if (e1.getY() - e2.getY() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityY) > 10.0f) { pviewfull.this.changePanSwipe(3); }  else if (e2.getY() - e1.getY() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityY) > 10.0f) { pviewfull.this.changePanSwipe(4); } } }  catch (Exception e) { } return false; } } @Override public void onBackPressed(){ new AlertDialog.Builder(this).setTitle("""").setMessage(""ê²Œìž„ ì§„í–‰ì¤‘ìž…ë‹ˆë‹¤ ì¢…ë£Œí•˜ì‹œê² ìŠµë‹ˆê¹Œ?"").setPositiveButton(""OK"",new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface dialog2,int whichButton){ pviewfull.this.finish(); } } ).show(); } protected void initAds(){ AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam""); AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly""); AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67""); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\qaboard.code","public class qaboard extends Activity {   private static ProgressDialog dialog;   Button btnend;   Button btnsave;   EditText content;   EditText email;   AQuery mAQuery;   EditText name;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.qaboard);     this.mAQuery=new AQuery((Activity)this);     this.name=(EditText)findViewById(R.id.name);     this.email=(EditText)findViewById(R.id.email);     this.content=(EditText)findViewById(R.id.content);     this.btnsave=(Button)findViewById(R.id.btnsave);     this.btnend=(Button)findViewById(R.id.btnClose);     this.btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         qaboard.this.finish();       }     } );     this.btnsave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (qaboard.this.name.getText().toString().trim().equals("""")) {           Toast.makeText(qaboard.this.getApplicationContext(),""ì�´ë¦„ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();           return;         }         if (qaboard.this.email.getText().toString().trim().equals("""")) {           Toast.makeText(qaboard.this.getApplicationContext(),""ì�´ë©”ì�¼ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();         }  else         if (qaboard.this.content.getText().toString().trim().equals("""")) {           Toast.makeText(qaboard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();         }  else {           qaboard.this.setSave();         }       }     } );   }   public void setSave(){     TelephonyManager manager=(TelephonyManager)getSystemService(""phone"");     Object deviceId=manager.getDeviceId();     dialog=new ProgressDialog(this);     dialog.setProgressStyle(0);     dialog.setMessage(""ë°œì†¡ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     dialog.setCancelable(true);     dialog.show();     Map<String,Object> params=new HashMap<>();     params.put(""name"",this.name.getText());     params.put(""email"",this.email.getText());     params.put(""content"",this.content.getText());     params.put(""device"",deviceId);     this.mAQuery.ajax(""http://jacknzero.cafe24.com/idol/idolqawrite.asp"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         qaboard.dialog.dismiss();         Toast.makeText(qaboard.this.getApplicationContext(),""ë‚´ìš©ì�´ ì „ë‹¬ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();         qaboard.this.finish();       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\qBoard.code","public class qBoard extends AdlibActivity implements AbsListView.OnScrollListener {   private static ProgressDialog dialog;   private ImageButton btSave;   String btitle;   EditText comment;   private String index;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   TextView mtitle;   private String myNick;   Intent myintent;   private String name;   private String sex;   TextView subtitle;   private int c_page=2;   private int pagesize=10;   String btype="""";   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.qboard);     initAds();     setAdsContainer(R.id.ads);     this.mtitle=(TextView)findViewById(R.id.title);     this.subtitle=(TextView)findViewById(R.id.subtitle);     Intent i=getIntent();     this.btype=i.getStringExtra(""type"");     if (HTMLElementName.Q.equals(this.btype)) {       this.btitle=""ì§ˆë¬¸/ë‹µë³€"";     }  else     if (""7"".equals(this.btype)) {       this.btitle=""ê³ ë¯¼í�¬ëŸ¼"";       this.subtitle.setText(""ë‹¹ì‹ ì�˜ ê³ ë¯¼ì�„ ì�´ì•¼ê¸° í•´ë³´ì•„ìš©"");     }     this.mtitle.setText(this.btitle);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         qBoard.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent3=new Intent(qBoard.this.getApplication(),(Class<?>)Comment.class);         myintent3.putExtra(""content"",((BoardList)qBoard.this.mRowList.get(position)).content);         myintent3.putExtra(""idx"",((BoardList)qBoard.this.mRowList.get(position)).idx);         myintent3.putExtra(""nick"",((BoardList)qBoard.this.mRowList.get(position)).nick);         myintent3.putExtra(""device"",((BoardList)qBoard.this.mRowList.get(position)).ip);         myintent3.putExtra(""type"",qBoard.this.btype);         qBoard.this.startActivity(myintent3);       }     } );     this.btSave=(ImageButton)findViewById(R.id.btnsave);     this.comment=(EditText)findViewById(R.id.comment);     this.btSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!qBoard.this.comment.getText().toString().trim().equals("""")) {           if (!qBoard.this.myNickSet()) {             Intent i2=new Intent(qBoard.this.getApplicationContext(),(Class<?>)nickset.class);             qBoard.this.startActivity(i2);             return;           }  else {             qBoard.this.setSave();             return;           }         }         Toast.makeText(qBoard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );     this.mLockListView=true;     makea();   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   public void setSave(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""content"",this.comment.getText());     params.put(""nick"",this.myNick);     params.put(""device"",deviceId);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         mProgressHUD.dismiss();         if (json.equals(""0"")) {           qBoard.this.comment.setText((CharSequence)null);           Toast.makeText(qBoard.this.getApplicationContext(),""í•˜ë£¨ 10íšŒê¹Œì§€ ì�‘ì›�ê°€ëŠ¥í•©ë‹ˆë‹¤."",1000).show();         }  else {           qBoard.this.comment.setText((CharSequence)null);           qBoard.this.c_page=2;           qBoard.this.mRowList.clear();           qBoard.this.makea();         }       }     } );   }   private void makeaAdd(  int page){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         ArrayList<BoardList> mTemp=qBoard.this.setData2(json);         qBoard.this.mRowList.addAll(mTemp);         if (mTemp.size() < qBoard.this.pagesize) {           qBoard.this.mLockListView=true;         }  else {           qBoard.this.mLockListView=false;         }         qBoard.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.btype);     params.put(""page"",1);     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/boardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         qBoard.this.mRowList=qBoard.this.setData2(json);         new ArrayList();         ArrayList<BoardList> mTemp=qBoard.this.setData2(json);         qBoard.this.mRowList=mTemp;         if (mTemp.size() < qBoard.this.pagesize) {           qBoard.this.mLockListView=true;         }  else {           qBoard.this.mLockListView=false;         }         qBoard.this.c_page=2;         qBoard.this.mAdapter=new EfficientAdapter(qBoard.this,qBoard.this.mRowList,qBoard.this.btype);         qBoard.this.li.setAdapter((ListAdapter)qBoard.this.mAdapter);       }     } );   } public static class EfficientAdapter extends BaseAdapter {     String btype;     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data,    String ttype){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;       this.btype=ttype;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_qboard,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.textC=(TextView)convertView.findViewById(R.id.textC);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.textNic=(TextView)convertView.findViewById(R.id.textNic);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text1.setText(this.dataS.get(position).content);       holder.text2.setText(this.dataS.get(position).date.trim());       holder.textC.setVisibility(0);       holder.textC.setText(""("" + this.dataS.get(position).cm_cnt.trim() + "")"");       if (position % 2 == 0) {         holder.icon.setBackgroundResource(R.drawable.community_ico3);       }  else {         holder.icon.setBackgroundResource(R.drawable.community_ico3_ov);       }       if (""7"".equals(this.btype)) {         holder.textNic.setText(""ë¹„ê³µê°œ"");       }  else {         holder.textNic.setText(this.dataS.get(position).nick);       }       return convertView;     } static class ViewHolder {       ImageView icon;       TextView text1;       TextView text2;       TextView textC;       TextView textNic;       LinearLayout textline;       ViewHolder(){       }     }   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     Log.d(""test"",""test"");     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.hit=localJSONObject2.optString(""hit"");         item.ip=localJSONObject2.optString(""device"");         item.idx=localJSONObject2.optString(""idx"");         item.cm_cnt=localJSONObject2.optString(""cnt"");         item.nick=localJSONObject2.optString(""nickname"");       }  catch (      Exception e) {         Toast.makeText(getApplicationContext(),e.toString(),1000).show();       }       data1.add(item);     }     return data1;   } public class BoardList {     String cm_cnt;     String content;     String date;     String hit;     String idx;     String ip;     String nick;     BoardList(){     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\R.code","public final class R { public static final class anim {     public static final int fade=0x7f040000;     public static final int grow_from_bottom=0x7f040001;     public static final int grow_from_bottomleft_to_topright=0x7f040002;     public static final int grow_from_bottomright_to_topleft=0x7f040003;     public static final int grow_from_top=0x7f040004;     public static final int grow_from_topleft_to_bottomright=0x7f040005;     public static final int grow_from_topright_to_bottomleft=0x7f040006;     public static final int hold=0x7f040007;     public static final int rotate_loading=0x7f040008;     public static final int shrink_from_bottom=0x7f040009;     public static final int shrink_from_bottomleft_to_topright=0x7f04000a;     public static final int shrink_from_bottomright_to_topleft=0x7f04000b;     public static final int shrink_from_top=0x7f04000c;     public static final int shrink_from_topleft_to_bottomright=0x7f04000d;     public static final int shrink_from_topright_to_bottomleft=0x7f04000e;     public static final int slide_left_in=0x7f04000f;     public static final int slide_left_out=0x7f040010;     public static final int slide_right_in=0x7f040011;     public static final int slide_right_out=0x7f040012;     public static final int slide_top_in=0x7f040013;     public static final int slide_top_out=0x7f040014;   } public static final class array {     public static final int gamepan_array=0x7f0b0000;     public static final int image_size=0x7f0b0001;   } public static final class attr {     public static final int allowcall=0x7f01001b;     public static final int appcode=0x7f010018;     public static final int bannerHeight=0x7f01001f;     public static final int centered=0x7f010004;     public static final int clipPadding=0x7f01000b;     public static final int dynamicReloadInterval=0x7f01001c;     public static final int effect=0x7f010019;     public static final int fillColor=0x7f010005;     public static final int footerColor=0x7f01000c;     public static final int footerIndicatorHeight=0x7f01000f;     public static final int footerIndicatorStyle=0x7f01000e;     public static final int footerIndicatorUnderlinePadding=0x7f010010;     public static final int footerLineHeight=0x7f01000d;     public static final int footerPadding=0x7f010011;     public static final int gps=0x7f01001a;     public static final int orientation=0x7f010006;     public static final int radius=0x7f010007;     public static final int reloadInterval=0x7f01001d;     public static final int selectedBold=0x7f010013;     public static final int selectedColor=0x7f010012;     public static final int snap=0x7f010008;     public static final int strokeColor=0x7f010009;     public static final int strokeWidth=0x7f01000a;     public static final int textColor=0x7f010014;     public static final int textSize=0x7f010015;     public static final int threadPriority=0x7f01001e;     public static final int titlePadding=0x7f010016;     public static final int topPadding=0x7f010017;     public static final int vpiCirclePageIndicatorStyle=0x7f010000;     public static final int vpiTabPageIndicatorStyle=0x7f010002;     public static final int vpiTabTextStyle=0x7f010003;     public static final int vpiTitlePageIndicatorStyle=0x7f010001;   } public static final class bool {     public static final int default_circle_indicator_centered=0x7f070000;     public static final int default_circle_indicator_snap=0x7f070001;     public static final int default_title_indicator_selected_bold=0x7f070002;   } public static final class color {     public static final int default_circle_indicator_fill_color=0x7f060008;     public static final int default_circle_indicator_stroke_color=0x7f060009;     public static final int default_title_indicator_footer_color=0x7f06000a;     public static final int default_title_indicator_selected_color=0x7f06000b;     public static final int default_title_indicator_text_color=0x7f06000c;     public static final int vpi__background_holo_dark=0x7f060000;     public static final int vpi__background_holo_light=0x7f060001;     public static final int vpi__bright_foreground_disabled_holo_dark=0x7f060004;     public static final int vpi__bright_foreground_disabled_holo_light=0x7f060005;     public static final int vpi__bright_foreground_holo_dark=0x7f060002;     public static final int vpi__bright_foreground_holo_light=0x7f060003;     public static final int vpi__bright_foreground_inverse_holo_dark=0x7f060006;     public static final int vpi__bright_foreground_inverse_holo_light=0x7f060007;     public static final int vpi__dark_theme=0x7f06000d;     public static final int vpi__light_theme=0x7f06000e;   } public static final class dimen {     public static final int default_circle_indicator_radius=0x7f090000;     public static final int default_circle_indicator_stroke_width=0x7f090001;     public static final int default_title_indicator_clip_padding=0x7f090002;     public static final int default_title_indicator_footer_indicator_height=0x7f090004;     public static final int default_title_indicator_footer_indicator_underline_padding=0x7f090005;     public static final int default_title_indicator_footer_line_height=0x7f090003;     public static final int default_title_indicator_footer_padding=0x7f090006;     public static final int default_title_indicator_text_size=0x7f090007;     public static final int default_title_indicator_title_padding=0x7f090008;     public static final int default_title_indicator_top_padding=0x7f090009;   } public static final class drawable {     public static final int arrow_down=0x7f020000;     public static final int arrow_up=0x7f020001;     public static final int bg_16vs=0x7f020002;     public static final int bg_32vs=0x7f020003;     public static final int bg_4vs=0x7f020004;     public static final int bg_8vs=0x7f020005;     public static final int bg_final_ranking_girl_list=0x7f020006;     public static final int bg_final_ranking_list=0x7f020007;     public static final int bg_finalvs=0x7f020008;     public static final int bg_idol_name=0x7f020009;     public static final int bg_idol_nor=0x7f02000a;     public static final int bg_idol_sel=0x7f02000b;     public static final int bg_no=0x7f02000c;     public static final int bg_rankingview=0x7f02000d;     public static final int bg_rankingview_girl=0x7f02000e;     public static final int bronze_1=0x7f02000f;     public static final int btn_00=0x7f020010;     public static final int btn_01=0x7f020011;     public static final int btn_01_press=0x7f020012;     public static final int btn_02=0x7f020013;     public static final int btn_02_press=0x7f020014;     public static final int btn_03=0x7f020015;     public static final int btn_03_press=0x7f020016;     public static final int btn_04=0x7f020017;     public static final int btn_04_press=0x7f020018;     public static final int btn_back=0x7f020019;     public static final int btn_bg_01=0x7f02001a;     public static final int btn_bg_01_press=0x7f02001b;     public static final int btn_bg_02=0x7f02001c;     public static final int btn_bg_02_press=0x7f02001d;     public static final int btn_bg_03=0x7f02001e;     public static final int btn_bg_03_press=0x7f02001f;     public static final int btn_bg_04=0x7f020020;     public static final int btn_bg_04_press=0x7f020021;     public static final int btn_bg_press=0x7f020022;     public static final int btn_close=0x7f020023;     public static final int btn_closed=0x7f020024;     public static final int btn_closed_ov=0x7f020025;     public static final int btn_com01=0x7f020026;     public static final int btn_com02=0x7f020027;     public static final int btn_com03=0x7f020028;     public static final int btn_com04=0x7f020029;     public static final int btn_com05=0x7f02002a;     public static final int btn_com06=0x7f02002b;     public static final int btn_com07=0x7f02002c;     public static final int btn_com08=0x7f02002d;     public static final int btn_cyworld=0x7f02002e;     public static final int btn_cyworld_ov=0x7f02002f;     public static final int btn_daum=0x7f020030;     public static final int btn_delete=0x7f020031;     public static final int btn_delete_ov=0x7f020032;     public static final int btn_end=0x7f020033;     public static final int btn_facebook=0x7f020034;     public static final int btn_facebook_ov=0x7f020035;     public static final int btn_fanadd=0x7f020036;     public static final int btn_fancafe=0x7f020037;     public static final int btn_fancafe_ov=0x7f020038;     public static final int btn_fandel=0x7f020039;     public static final int btn_fandom=0x7f02003a;     public static final int btn_fandom_del=0x7f02003b;     public static final int btn_fandom_del_ov=0x7f02003c;     public static final int btn_fandom_ov=0x7f02003d;     public static final int btn_fav=0x7f02003e;     public static final int btn_favor=0x7f02003f;     public static final int btn_favor_ov=0x7f020040;     public static final int btn_favorite=0x7f020041;     public static final int btn_game01=0x7f020042;     public static final int btn_game02=0x7f020043;     public static final int btn_game03=0x7f020044;     public static final int btn_green=0x7f020045;     public static final int btn_idol01=0x7f020046;     public static final int btn_idol02=0x7f020047;     public static final int btn_idol03=0x7f020048;     public static final int btn_idol04=0x7f020049;     public static final int btn_idol05=0x7f02004a;     public static final int btn_idol06=0x7f02004b;     public static final int btn_idol07=0x7f02004c;     public static final int btn_idream_closed=0x7f02004d;     public static final int btn_idream_mainrank=0x7f02004e;     public static final int btn_idream_mainstart=0x7f02004f;     public static final int btn_idream_replay=0x7f020050;     public static final int btn_idream_start=0x7f020051;     public static final int btn_imgview=0x7f020052;     public static final int btn_imgview01=0x7f020053;     public static final int btn_imgview01_ov=0x7f020054;     public static final int btn_imgview_ov=0x7f020055;     public static final int btn_isearch=0x7f020056;     public static final int btn_list=0x7f020057;     public static final int btn_list1=0x7f020058;     public static final int btn_list_ov=0x7f020059;     public static final int btn_m00=0x7f02005a;     public static final int btn_m01=0x7f02005b;     public static final int btn_m02=0x7f02005c;     public static final int btn_m03=0x7f02005d;     public static final int btn_m04=0x7f02005e;     public static final int btn_mask=0x7f02005f;     public static final int btn_menu_view=0x7f020060;     public static final int btn_menu_view_ov=0x7f020061;     public static final int btn_metoday=0x7f020062;     public static final int btn_metoday_ov=0x7f020063;     public static final int btn_movie=0x7f020064;     public static final int btn_movie_ov=0x7f020065;     public static final int btn_mypage01=0x7f020066;     public static final int btn_mypage02=0x7f020067;     public static final int btn_mypage03=0x7f020068;     public static final int btn_mypage04=0x7f020069;     public static final int btn_news01=0x7f02006a;     public static final int btn_news02=0x7f02006b;     public static final int btn_news03=0x7f02006c;     public static final int btn_pause=0x7f02006d;     public static final int btn_pause_ov=0x7f02006e;     public static final int btn_play=0x7f02006f;     public static final int btn_play_ov=0x7f020070;     public static final int btn_pop_back=0x7f020071;     public static final int btn_prev=0x7f020072;     public static final int btn_prev_ov=0x7f020073;     public static final int btn_rank01=0x7f020074;     public static final int btn_rank02=0x7f020075;     public static final int btn_rank03=0x7f020076;     public static final int btn_rival=0x7f020077;     public static final int btn_rival1=0x7f020078;     public static final int btn_rival2=0x7f020079;     public static final int btn_rival_write=0x7f02007a;     public static final int btn_set=0x7f02007b;     public static final int btn_setting=0x7f02007c;     public static final int btn_setting_ov=0x7f02007d;     public static final int btn_stop=0x7f02007e;     public static final int btn_stop_ov=0x7f02007f;     public static final int btn_subtab_left=0x7f020080;     public static final int btn_subtab_right=0x7f020081;     public static final int btn_sug=0x7f020082;     public static final int btn_suggest=0x7f020083;     public static final int btn_suggest_ov=0x7f020084;     public static final int btn_twitter=0x7f020085;     public static final int btn_twitter_ov=0x7f020086;     public static final int btn_write=0x7f020087;     public static final int btn_write_ov=0x7f020088;     public static final int btn_writerival=0x7f020089;     public static final int btn_writex=0x7f02008a;     public static final int btn_yozm=0x7f02008b;     public static final int btn_yozm_ov=0x7f02008c;     public static final int btn_zoom=0x7f02008d;     public static final int btn_zoom_ov=0x7f02008e;     public static final int cbox=0x7f02008f;     public static final int ccbox=0x7f020090;     public static final int ccboxr=0x7f020091;     public static final int chat_back=0x7f020092;     public static final int chat_back1=0x7f020093;     public static final int chat_back2=0x7f020094;     public static final int chat_box=0x7f020095;     public static final int chat_box11=0x7f020096;     public static final int chat_box_left=0x7f020097;     public static final int chat_box_right=0x7f020098;     public static final int chat_ico01=0x7f020099;     public static final int chat_ico02=0x7f02009a;     public static final int chat_line=0x7f02009b;     public static final int chat_top_back1=0x7f02009c;     public static final int chatting_back2=0x7f02009d;     public static final int circle_thumb=0x7f02009e;     public static final int comm_chatbox=0x7f02009f;     public static final int comm_chatboxr=0x7f0200a0;     public static final int commnet_bax=0x7f0200a1;     public static final int commu_banner=0x7f0200a2;     public static final int community_btn_write=0x7f0200a3;     public static final int community_btn_write_ov=0x7f0200a4;     public static final int community_chat_bottombg=0x7f0200a5;     public static final int community_chat_topbg=0x7f0200a6;     public static final int community_ico=0x7f0200a7;     public static final int community_ico2=0x7f0200a8;     public static final int community_ico3=0x7f0200a9;     public static final int community_ico3_ov=0x7f0200aa;     public static final int community_list_back=0x7f0200ab;     public static final int community_list_line=0x7f0200ac;     public static final int community_refresh=0x7f0200ad;     public static final int community_tab_left=0x7f0200ae;     public static final int community_tab_left_ov=0x7f0200af;     public static final int community_tab_right=0x7f0200b0;     public static final int community_tab_right_ov=0x7f0200b1;     public static final int community_vs=0x7f0200b2;     public static final int community_vs_01=0x7f0200b3;     public static final int comsub_01=0x7f0200b4;     public static final int comsub_01_ov=0x7f0200b5;     public static final int comsub_02=0x7f0200b6;     public static final int comsub_02_ov=0x7f0200b7;     public static final int comsub_03=0x7f0200b8;     public static final int comsub_03_ov=0x7f0200b9;     public static final int comsub_04=0x7f0200ba;     public static final int comsub_04_ov=0x7f0200bb;     public static final int comsub_05=0x7f0200bc;     public static final int comsub_05_ov=0x7f0200bd;     public static final int comsub_06=0x7f0200be;     public static final int comsub_06_ov=0x7f0200bf;     public static final int comsub_07=0x7f0200c0;     public static final int comsub_07_ov=0x7f0200c1;     public static final int comsub_08=0x7f0200c2;     public static final int comsub_08_ov=0x7f0200c3;     public static final int date_back=0x7f0200c4;     public static final int date_back11=0x7f0200c5;     public static final int datebox=0x7f0200c6;     public static final int full_bg_16kang=0x7f0200c7;     public static final int full_bg_32kang=0x7f0200c8;     public static final int full_bg_final=0x7f0200c9;     public static final int full_bg_quarterfinal=0x7f0200ca;     public static final int full_bg_semifinal=0x7f0200cb;     public static final int game_girl=0x7f0200cc;     public static final int game_girl_ov=0x7f0200cd;     public static final int game_man=0x7f0200ce;     public static final int game_man_ov=0x7f0200cf;     public static final int gamesub_01=0x7f0200d0;     public static final int gamesub_01_ov=0x7f0200d1;     public static final int gamesub_02=0x7f0200d2;     public static final int gamesub_02_ov=0x7f0200d3;     public static final int gamesub_03=0x7f0200d4;     public static final int gamesub_03_ov=0x7f0200d5;     public static final int girlselect_bg=0x7f0201ae;     public static final int girlselect_bg_ov=0x7f0201af;     public static final int girlselect_bg_ov_skin=0x7f0201b1;     public static final int girlselect_bg_ov_tran=0x7f0201b3;     public static final int girlselect_bg_skin=0x7f0201b0;     public static final int girlselect_bg_tran=0x7f0201b2;     public static final int gold_1=0x7f0200d6;     public static final int greentab=0x7f0200d7;     public static final int greentab_ov=0x7f0200d8;     public static final int ic_action_search=0x7f0200d9;     public static final int ic_launcher=0x7f0200da;     public static final int ico=0x7f0200db;     public static final int ico_end=0x7f0200dc;     public static final int ico_ing=0x7f0200dd;     public static final int ico_man=0x7f0200de;     public static final int ico_new=0x7f0200df;     public static final int ico_talk=0x7f0200e0;     public static final int ico_woman=0x7f0200e1;     public static final int icon48x48_1=0x7f0200e2;     public static final int idolsub_01=0x7f0200e3;     public static final int idolsub_01_ov=0x7f0200e4;     public static final int idolsub_02=0x7f0200e5;     public static final int idolsub_02_ov=0x7f0200e6;     public static final int idolsub_03=0x7f0200e7;     public static final int idolsub_03_ov=0x7f0200e8;     public static final int idolsub_04=0x7f0200e9;     public static final int idolsub_04_ov=0x7f0200ea;     public static final int idolsub_05=0x7f0200eb;     public static final int idolsub_05_ov=0x7f0200ec;     public static final int idolsub_06=0x7f0200ed;     public static final int idolsub_06_ov=0x7f0200ee;     public static final int idolsub_07=0x7f0200ef;     public static final int idolsub_07_ov=0x7f0200f0;     public static final int idolsub_08=0x7f0200f1;     public static final int idream_closed=0x7f0200f2;     public static final int idream_closed_ov=0x7f0200f3;     public static final int idream_final_bg=0x7f0200f4;     public static final int idream_mainrank=0x7f0200f5;     public static final int idream_mainrank_ov=0x7f0200f6;     public static final int idream_mainstart=0x7f0200f7;     public static final int idream_mainstart_ov=0x7f0200f8;     public static final int idream_rank_bg=0x7f0200f9;     public static final int idream_replay=0x7f0200fa;     public static final int idream_replay_ov=0x7f0200fb;     public static final int idream_start=0x7f0200fc;     public static final int idream_start_ov=0x7f0200fd;     public static final int idreammain_bg=0x7f0200fe;     public static final int img_16vs=0x7f0200ff;     public static final int img_32vs=0x7f020100;     public static final int img_8vs=0x7f020101;     public static final int img_final=0x7f020102;     public static final int img_semifinal=0x7f020103;     public static final int img_win=0x7f020104;     public static final int imgbtn_cyworld=0x7f020105;     public static final int imgbtn_facebook=0x7f020106;     public static final int imgbtn_fan=0x7f020107;     public static final int imgbtn_gview=0x7f020108;     public static final int imgbtn_metoday=0x7f020109;     public static final int imgbtn_mview=0x7f02010a;     public static final int imgbtn_pause=0x7f02010b;     public static final int imgbtn_play=0x7f02010c;     public static final int imgbtn_save=0x7f02010d;     public static final int imgbtn_stop=0x7f02010e;     public static final int imgbtn_sview=0x7f02010f;     public static final int imgbtn_twitter=0x7f020110;     public static final int imgbtn_yozm=0x7f020111;     public static final int info_back=0x7f020112;     public static final int inputbox2=0x7f020113;     public static final int intro=0x7f020114;     public static final int legends_backimg=0x7f020115;     public static final int legends_backimg2=0x7f020116;     public static final int legends_btn_guide=0x7f020117;     public static final int legends_ico=0x7f020118;     public static final int legends_ico2=0x7f020119;     public static final int line03=0x7f02011a;     public static final int list_girl_selected=0x7f02011b;     public static final int list_girl_selected_tran=0x7f02011c;     public static final int main01=0x7f02011d;     public static final int main_banner=0x7f02011e;     public static final int main_banner_01=0x7f02011f;     public static final int main_banner_02=0x7f020120;     public static final int main_banner_03=0x7f020121;     public static final int main_banner_04=0x7f020122;     public static final int main_banner_05=0x7f020123;     public static final int main_banner_06=0x7f020124;     public static final int main_banner_07=0x7f020125;     public static final int main_banner_08=0x7f020126;     public static final int main_banner_09=0x7f020127;     public static final int main_girl=0x7f020128;     public static final int mask=0x7f020129;     public static final int mask1=0x7f02012a;     public static final int medal01=0x7f02012b;     public static final int medal02=0x7f02012c;     public static final int medal03=0x7f02012d;     public static final int menu_back=0x7f02012e;     public static final int menu_verline=0x7f02012f;     public static final int mypagesub_01=0x7f020130;     public static final int mypagesub_01_ov=0x7f020131;     public static final int mypagesub_02=0x7f020132;     public static final int mypagesub_02_ov=0x7f020133;     public static final int mypagesub_03=0x7f020134;     public static final int mypagesub_03_ov=0x7f020135;     public static final int mypagesub_04=0x7f020136;     public static final int mypagesub_04_ov=0x7f020137;     public static final int new_top=0x7f020138;     public static final int newchatbox=0x7f020139;     public static final int newsub_01=0x7f02013a;     public static final int newsub_01_ov=0x7f02013b;     public static final int newsub_02=0x7f02013c;     public static final int newsub_02_ov=0x7f02013d;     public static final int newsub_03=0x7f02013e;     public static final int newsub_03_ov=0x7f02013f;     public static final int photo_page_next_bt_nor=0x7f020140;     public static final int photo_page_next_bt_press=0x7f020141;     public static final int photo_page_prev_bt_nor=0x7f020142;     public static final int photo_page_prev_bt_press=0x7f020143;     public static final int plyer_01=0x7f020144;     public static final int pop_closed=0x7f020145;     public static final int pop_closed_ov=0x7f020146;     public static final int pop_finish=0x7f020147;     public static final int pop_finish_ov=0x7f020148;     public static final int popup_topback=0x7f020149;     public static final int press_text=0x7f02014a;     public static final int profile_back=0x7f02014b;     public static final int profile_back_01=0x7f02014c;     public static final int profile_bg=0x7f02014d;     public static final int profile_no_bg=0x7f02014e;     public static final int progress_black_large=0x7f02014f;     public static final int progress_horizontal_custom=0x7f020150;     public static final int randking_back=0x7f020151;     public static final int ranking_01=0x7f020152;     public static final int ranking_02=0x7f020153;     public static final int ranking_ico01=0x7f020154;     public static final int ranking_list_line_height=0x7f020155;     public static final int ranking_top=0x7f020156;     public static final int rankingsub_01=0x7f020157;     public static final int rankingsub_01_ov=0x7f020158;     public static final int rankingsub_02=0x7f020159;     public static final int rankingsub_02_ov=0x7f02015a;     public static final int rankingsub_03=0x7f02015b;     public static final int rankingsub_03_ov=0x7f02015c;     public static final int rbox=0x7f02015d;     public static final int reply=0x7f02015e;     public static final int round_black_back=0x7f02015f;     public static final int seek1=0x7f020160;     public static final int seek2=0x7f020161;     public static final int seek_thumb_custom=0x7f020162;     public static final int selector_photo_page_next_bt=0x7f020163;     public static final int selector_photo_page_prev_bt=0x7f020164;     public static final int selector_web_refresh_bt=0x7f020165;     public static final int silver_1=0x7f020166;     public static final int spinner_black_76=0x7f020167;     public static final int sub_top_back=0x7f020168;     public static final int tab_bg_1=0x7f020169;     public static final int tab_bg_2=0x7f02016a;     public static final int tab_bg_3=0x7f02016b;     public static final int tab_bg_4=0x7f02016c;     public static final int tab_bg_5=0x7f02016d;     public static final int tab_monthly_ranking=0x7f02016e;     public static final int tab_monthly_ranking_hide=0x7f02016f;     public static final int tab_todayranking=0x7f020170;     public static final int tab_todayranking_hide=0x7f020171;     public static final int tab_weekranking=0x7f020172;     public static final int tab_weekranking_hide=0x7f020173;     public static final int textbox=0x7f020174;     public static final int thumb_mask=0x7f020175;     public static final int tit_1st=0x7f020176;     public static final int tit_2st=0x7f020177;     public static final int tit_3st=0x7f020178;     public static final int tit_4st=0x7f020179;     public static final int top_01=0x7f02017a;     public static final int top_back=0x7f02017b;     public static final int top_back2=0x7f02017c;     public static final int top_menu01=0x7f02017d;     public static final int top_menu01_ov=0x7f02017e;     public static final int top_menu02=0x7f02017f;     public static final int top_menu02_ov=0x7f020180;     public static final int top_menu03=0x7f020181;     public static final int top_menu03_ov=0x7f020182;     public static final int top_menu04=0x7f020183;     public static final int top_menu04_ov=0x7f020184;     public static final int top_menu05=0x7f020185;     public static final int top_menu05_ov=0x7f020186;     public static final int top_menu_commu=0x7f020187;     public static final int top_menu_commu_ov=0x7f020188;     public static final int top_menu_game=0x7f020189;     public static final int top_menu_game_ov=0x7f02018a;     public static final int top_menu_idol=0x7f02018b;     public static final int top_menu_idol_ov=0x7f02018c;     public static final int top_menu_main=0x7f02018d;     public static final int top_menu_main_ov=0x7f02018e;     public static final int top_menu_mypage=0x7f02018f;     public static final int top_menu_mypage_ov=0x7f020190;     public static final int top_menu_news=0x7f020191;     public static final int top_menu_news_ov=0x7f020192;     public static final int top_menu_ranking=0x7f020193;     public static final int top_menu_ranking_ov=0x7f020194;     public static final int top_next=0x7f020195;     public static final int top_perv=0x7f020196;     public static final int top_subtabmenu_left=0x7f020197;     public static final int top_subtabmenu_left_ov=0x7f020198;     public static final int top_subtabmenu_right=0x7f020199;     public static final int top_subtabmenu_right_ov=0x7f02019a;     public static final int topmenu1=0x7f02019b;     public static final int topmenu2=0x7f02019c;     public static final int topmenu3=0x7f02019d;     public static final int topmenu4=0x7f02019e;     public static final int topmenu5=0x7f02019f;     public static final int topmenu6=0x7f0201a0;     public static final int topmenu7=0x7f0201a1;     public static final int vpi__tab_indicator=0x7f0201a2;     public static final int vpi__tab_selected_focused_holo=0x7f0201a3;     public static final int vpi__tab_selected_holo=0x7f0201a4;     public static final int vpi__tab_selected_pressed_holo=0x7f0201a5;     public static final int vpi__tab_unselected_focused_holo=0x7f0201a6;     public static final int vpi__tab_unselected_holo=0x7f0201a7;     public static final int vpi__tab_unselected_pressed_holo=0x7f0201a8;     public static final int vs=0x7f0201a9;     public static final int web_refresh_bt_dimed=0x7f0201aa;     public static final int web_refresh_bt_nor=0x7f0201ab;     public static final int web_refresh_bt_press=0x7f0201ac;     public static final int winner=0x7f0201ad;   } public static final class id {     public static final int Lay_Content=0x7f050094;     public static final int LinearLayout01=0x7f0500d3;     public static final int LinearLayout1=0x7f050062;     public static final int adLayout=0x7f05001c;     public static final int ads=0x7f05001f;     public static final int agencyname=0x7f050084;     public static final int albumskin=0x7f05000a;     public static final int basefrm=0x7f050119;     public static final int bgfrm=0x7f05007b;     public static final int bottom_progress=0x7f05000c;     public static final int btnClose=0x7f050102;     public static final int btnNext=0x7f050121;     public static final int btnPre=0x7f050120;     public static final int btnSave=0x7f050064;     public static final int btnShare=0x7f0500ce;     public static final int btnView=0x7f0500c9;     public static final int btnWall=0x7f0500cd;     public static final int btnWallpaper=0x7f05011f;     public static final int btn_com1=0x7f050041;     public static final int btn_com2=0x7f050042;     public static final int btn_com3=0x7f050043;     public static final int btn_com4=0x7f050047;     public static final int btn_com5=0x7f050048;     public static final int btn_com6=0x7f050044;     public static final int btn_com7=0x7f050046;     public static final int btn_com8=0x7f050045;     public static final int btn_game1=0x7f05004a;     public static final int btn_game2=0x7f05004b;     public static final int btn_game3=0x7f05004c;     public static final int btn_glay=0x7f05009c;     public static final int btn_gogo=0x7f0500c2;     public static final int btn_idol1=0x7f050039;     public static final int btn_idol2=0x7f050037;     public static final int btn_idol3=0x7f050038;     public static final int btn_idol4=0x7f050056;     public static final int btn_idol5=0x7f05003a;     public static final int btn_idol6=0x7f05003b;     public static final int btn_idol7=0x7f050036;     public static final int btn_mlay=0x7f0500a1;     public static final int btn_mypage1=0x7f050052;     public static final int btn_mypage2=0x7f050053;     public static final int btn_mypage3=0x7f050054;     public static final int btn_mypage4=0x7f050055;     public static final int btn_news1=0x7f050050;     public static final int btn_news2=0x7f05004e;     public static final int btn_news3=0x7f05004f;     public static final int btn_rank1=0x7f05003d;     public static final int btn_rank2=0x7f05003e;     public static final int btn_rank3=0x7f05003f;     public static final int btnapp=0x7f0500e5;     public static final int btnban1=0x7f05002c;     public static final int btnban2=0x7f05002d;     public static final int btnban3=0x7f05002e;     public static final int btnban4=0x7f05002f;     public static final int btnban5=0x7f050030;     public static final int btnban6=0x7f050031;     public static final int btnban7=0x7f050032;     public static final int btnban8=0x7f050033;     public static final int btnban9=0x7f050034;     public static final int btncancel=0x7f0500ea;     public static final int btnclose=0x7f05011e;     public static final int btnday=0x7f05007f;     public static final int btndel=0x7f0500dd;     public static final int btndelete=0x7f0500ee;     public static final int btnend=0x7f05005e;     public static final int btnfan=0x7f050098;     public static final int btnfav=0x7f050099;     public static final int btngView=0x7f05009d;     public static final int btnget=0x7f0500d9;     public static final int btnhome=0x7f050015;     public static final int btnisearch=0x7f050020;     public static final int btniset=0x7f050022;     public static final int btnmView=0x7f05009e;     public static final int btnmem=0x7f050117;     public static final int btnmonth=0x7f050081;     public static final int btnmrank=0x7f05007d;     public static final int btnmsg=0x7f05005b;     public static final int btnmstart=0x7f05007c;     public static final int btnnext=0x7f05001b;     public static final int btnnotify=0x7f05005a;     public static final int btnprev=0x7f05001a;     public static final int btnre=0x7f050019;     public static final int btnsView=0x7f0500a2;     public static final int btnsave=0x7f05005d;     public static final int btnsearch=0x7f050017;     public static final int btnsel1=0x7f050113;     public static final int btnsel2=0x7f050114;     public static final int btnsend=0x7f0500da;     public static final int btnshare=0x7f0500e7;     public static final int btnsort1=0x7f050104;     public static final int btnsort2=0x7f050105;     public static final int btnsort3=0x7f050106;     public static final int btnsort4=0x7f050107;     public static final int btnsp=0x7f0500d1;     public static final int btnstart=0x7f05007e;     public static final int btnsug=0x7f050109;     public static final int btntop1=0x7f050024;     public static final int btntop2=0x7f050025;     public static final int btntop3=0x7f050026;     public static final int btntop4=0x7f050027;     public static final int btntop5=0x7f050028;     public static final int btntop6=0x7f050029;     public static final int btntop7=0x7f05002a;     public static final int btnwallpaper=0x7f0500e6;     public static final int btnweek=0x7f050080;     public static final int changecnt=0x7f0500f6;     public static final int chat_top=0x7f050013;     public static final int comment=0x7f05005c;     public static final int container=0x7f050010;     public static final int container2=0x7f050011;     public static final int container3=0x7f050012;     public static final int content=0x7f0500a5;     public static final int cpage=0x7f0500cf;     public static final int cyworld=0x7f0500af;     public static final int cyworld_txt=0x7f0500b0;     public static final int daum=0x7f0500d7;     public static final int dowprogress=0x7f0500cc;     public static final int email=0x7f050103;     public static final int end=0x7f050111;     public static final int endmenu=0x7f0500ff;     public static final int eventview=0x7f050123;     public static final int facebook=0x7f0500a9;     public static final int facebook_txt=0x7f0500aa;     public static final int fancafe=0x7f0500a7;     public static final int fancafe_txt=0x7f0500a8;     public static final int female=0x7f0500ed;     public static final int fnick=0x7f0500dc;     public static final int frm1=0x7f05002b;     public static final int frm2=0x7f050035;     public static final int frm3=0x7f05003c;     public static final int frm4=0x7f050040;     public static final int frm5=0x7f050049;     public static final int frm6=0x7f05004d;     public static final int frm7=0x7f050051;     public static final int frmall=0x7f05000e;     public static final int galleryf=0x7f0500cb;     public static final int gamebg=0x7f050079;     public static final int gamecancel=0x7f0500fe;     public static final int gameend=0x7f050100;     public static final int gamemenu=0x7f0500d0;     public static final int gamename1=0x7f05006a;     public static final int gamename2=0x7f05006b;     public static final int gameopt=0x7f0500f9;     public static final int gamepan=0x7f0500e0;     public static final int gamerestart=0x7f050101;     public static final int gamestart=0x7f0500fd;     public static final int gamestatus=0x7f0500f5;     public static final int gback=0x7f0500bb;     public static final int gname=0x7f0500bd;     public static final int graph=0x7f050091;     public static final int handle=0x7f0500e3;     public static final int horizontal=0x7f050000;     public static final int hot=0x7f050095;     public static final int icon=0x7f050085;     public static final int icon1=0x7f0500a0;     public static final int icon2=0x7f0500bf;     public static final int icon_glay=0x7f05009b;     public static final int icon_line=0x7f0500b9;     public static final int icon_mlay=0x7f05009f;     public static final int image_back=0x7f0500ba;     public static final int img1st=0x7f050071;     public static final int img2st=0x7f050073;     public static final int img3st=0x7f050075;     public static final int img4st=0x7f050077;     public static final int imgChartMedal=0x7f050090;     public static final int imgChartTop=0x7f05008e;     public static final int imgsex=0x7f0500b6;     public static final int indicator=0x7f05001d;     public static final int inew=0x7f0500b5;     public static final int interval_bg=0x7f05007a;     public static final int isize=0x7f050115;     public static final int ivRivalProcess=0x7f0500c0;     public static final int keyword=0x7f050016;     public static final int leftfrm=0x7f050066;     public static final int leftimage=0x7f050067;     public static final int leftname=0x7f050068;     public static final int leftwin=0x7f050069;     public static final int legendicon=0x7f0500a3;     public static final int list=0x7f050061;     public static final int listchart=0x7f050058;     public static final int listcomment=0x7f05005f;     public static final int listgirl=0x7f050065;     public static final int listgirle=0x7f050009;     public static final int listgirlhot=0x7f050008;     public static final int listmy=0x7f05000d;     public static final int listnews=0x7f0500e8;     public static final int listrank=0x7f050108;     public static final int listsong=0x7f05000b;     public static final int listvideo=0x7f050122;     public static final int lline1=0x7f0500c3;     public static final int lline2=0x7f050093;     public static final int ltext1=0x7f0500c4;     public static final int ltext2=0x7f0500c6;     public static final int ltextNic=0x7f0500c5;     public static final int main_lay=0x7f05009a;     public static final int mainprogress=0x7f0500f0;     public static final int male=0x7f0500ec;     public static final int match=0x7f0500f7;     public static final int mcontainer=0x7f05011d;     public static final int memberlist=0x7f05011b;     public static final int memberlistani=0x7f05011a;     public static final int membertanskin=0x7f0500ef;     public static final int menu_image=0x7f0500e4;     public static final int message=0x7f0500f1;     public static final int metoday=0x7f0500ad;     public static final int metoday_txt=0x7f0500ae;     public static final int mscroll=0x7f05011c;     public static final int myGrid=0x7f050063;     public static final int myView1=0x7f0500e1;     public static final int mynick=0x7f0500df;     public static final int myweb=0x7f0500e9;     public static final int name=0x7f0500b4;     public static final int name1=0x7f05010b;     public static final int name1st=0x7f050072;     public static final int name2=0x7f05010d;     public static final int name2st=0x7f050074;     public static final int name3st=0x7f050076;     public static final int name4st=0x7f050078;     public static final int nick=0x7f0500b7;     public static final int nicktitle=0x7f0500db;     public static final int none=0x7f050002;     public static final int opt34=0x7f0500fb;     public static final int opt46=0x7f0500fa;     public static final int opt57=0x7f0500fc;     public static final int pan11=0x7f0500f3;     public static final int panfrm=0x7f0500f2;     public static final int per1=0x7f05010c;     public static final int per2=0x7f05010e;     public static final int play=0x7f0500d5;     public static final int pname=0x7f0500a4;     public static final int point=0x7f0500be;     public static final int progress=0x7f050018;     public static final int rank=0x7f05008f;     public static final int rank_top=0x7f0500bc;     public static final int ranklist=0x7f050083;     public static final int result=0x7f0500d8;     public static final int rightfrm=0x7f05006c;     public static final int rightimage=0x7f05006d;     public static final int rightname=0x7f05006e;     public static final int rightwin=0x7f05006f;     public static final int rivaltitle=0x7f0500c1;     public static final int rline1=0x7f0500c7;     public static final int rline2=0x7f0500c8;     public static final int scroll_container=0x7f05000f;     public static final int seekbar=0x7f0500d4;     public static final int seekbar1=0x7f05010f;     public static final int seekbar2=0x7f050110;     public static final int sex=0x7f0500eb;     public static final int site=0x7f0500a6;     public static final int skinmember11=0x7f0500d2;     public static final int sleft=0x7f050006;     public static final int slide=0x7f0500e2;     public static final int sright=0x7f050007;     public static final int starbtn_left=0x7f050116;     public static final int starbtn_right=0x7f050118;     public static final int startmenu=0x7f0500f8;     public static final int stop=0x7f0500d6;     public static final int subtitle=0x7f050060;     public static final int text=0x7f050086;     public static final int text1=0x7f05008b;     public static final int text2=0x7f050087;     public static final int text3=0x7f050088;     public static final int textC=0x7f05008c;     public static final int textNic=0x7f05008d;     public static final int textline=0x7f05008a;     public static final int thum1=0x7f05010a;     public static final int thum2=0x7f050112;     public static final int thumprog=0x7f0500b3;     public static final int time=0x7f0500ca;     public static final int timg=0x7f0500f4;     public static final int title=0x7f050014;     public static final int title1=0x7f050021;     public static final int top_progress=0x7f050082;     public static final int topgubun=0x7f0500b2;     public static final int topmenu=0x7f050023;     public static final int totalcnt=0x7f050005;     public static final int triangle=0x7f050003;     public static final int twitter=0x7f0500ab;     public static final int twitter_txt=0x7f0500ac;     public static final int txtChartTitle=0x7f050057;     public static final int txtContent=0x7f050059;     public static final int txtcontent=0x7f050097;     public static final int txtname=0x7f050096;     public static final int txtnick=0x7f0500de;     public static final int underline=0x7f050004;     public static final int updown=0x7f050092;     public static final int vertical=0x7f050001;     public static final int viewpager=0x7f05001e;     public static final int viewwinner=0x7f050070;     public static final int wdate=0x7f0500b8;     public static final int widget46=0x7f050089;     public static final int yozm=0x7f0500b1;   } public static final class integer {     public static final int default_circle_indicator_orientation=0x7f080000;     public static final int default_title_indicator_footer_indicator_style=0x7f080001;   } public static final class layout {     public static final int agencylist=0x7f030000;     public static final int albumlist=0x7f030001;     public static final int artimglist=0x7f030002;     public static final int artlist=0x7f030003;     public static final int bar_spinner=0x7f030004;     public static final int basefrag=0x7f030005;     public static final int basemain=0x7f030006;     public static final int basemainback=0x7f030007;     public static final int chart=0x7f030008;     public static final int comment=0x7f030009;     public static final int freeboard=0x7f03000a;     public static final int gallery=0x7f03000b;     public static final int groupboard=0x7f03000c;     public static final int grouplist=0x7f03000d;     public static final int idollist=0x7f03000e;     public static final int idream=0x7f03000f;     public static final int idreamidol=0x7f030010;     public static final int idreammain=0x7f030011;     public static final int idreamrank=0x7f030012;     public static final int image_bestfragment=0x7f030013;     public static final int image_fragment=0x7f030014;     public static final int legendlist=0x7f030015;     public static final int list_item_agency=0x7f030016;     public static final int list_item_album=0x7f030017;     public static final int list_item_board=0x7f030018;     public static final int list_item_boardnew=0x7f030019;     public static final int list_item_chart=0x7f03001a;     public static final int list_item_comment=0x7f03001b;     public static final int list_item_freeboard=0x7f03001c;     public static final int list_item_idol=0x7f03001d;     public static final int list_item_legend=0x7f03001e;     public static final int list_item_member=0x7f03001f;     public static final int list_item_member_new=0x7f030020;     public static final int list_item_memlist=0x7f030021;     public static final int list_item_msg=0x7f030022;     public static final int list_item_news=0x7f030023;     public static final int list_item_notice=0x7f030024;     public static final int list_item_qboard=0x7f030025;     public static final int list_item_rank=0x7f030026;     public static final int list_item_rank2=0x7f030027;     public static final int list_item_rankdream=0x7f030028;     public static final int list_item_rival=0x7f030029;     public static final int list_item_rivalboard=0x7f03002a;     public static final int list_item_song=0x7f03002b;     public static final int list_item_video=0x7f03002c;     public static final int maguimageview=0x7f03002d;     public static final int membertab=0x7f03002e;     public static final int mp3play=0x7f03002f;     public static final int msglist=0x7f030030;     public static final int msgview=0x7f030031;     public static final int msgwrite=0x7f030032;     public static final int mygrimtest=0x7f030033;     public static final int mylist=0x7f030034;     public static final int myview2=0x7f030035;     public static final int newalbumlist=0x7f030036;     public static final int newidol=0x7f030037;     public static final int news=0x7f030038;     public static final int news_view=0x7f030039;     public static final int nickset=0x7f03003a;     public static final int noticeboard=0x7f03003b;     public static final int photobook=0x7f03003c;     public static final int plist=0x7f03003d;     public static final int progress_hud=0x7f03003e;     public static final int puzzleviewfull=0x7f03003f;     public static final int qaboard=0x7f030040;     public static final int qboard=0x7f030041;     public static final int ranklist=0x7f030042;     public static final int rival=0x7f030043;     public static final int rivalboard=0x7f030044;     public static final int setting=0x7f030045;     public static final int songlist=0x7f030046;     public static final int starbase=0x7f030047;     public static final int storage=0x7f030048;     public static final int tab_row_item=0x7f030049;     public static final int tab_row_item2=0x7f03004a;     public static final int videolist=0x7f03004b;     public static final int vpi__tab=0x7f03004c;     public static final int webevent=0x7f03004d;     public static final int words=0x7f03004e;     public static final int youtube=0x7f03004f;   } public static final class string {     public static final int app_name=0x7f0c0000;     public static final int caulyid=0x7f0c0008;     public static final int comm_msg=0x7f0c0004;     public static final int daumid=0x7f0c0007;     public static final int hello_world=0x7f0c0001;     public static final int menu_settings=0x7f0c0002;     public static final int str_imagesize=0x7f0c0006;     public static final int str_set=0x7f0c0005;     public static final int title_activity_main=0x7f0c0003;   } public static final class style {     public static final int AppTheme=0x7f0a0007;     public static final int CustomTitlePageIndicator=0x7f0a0008;     public static final int ProgressHUD=0x7f0a0009;     public static final int TextAppearance_TabPageIndicator=0x7f0a0006;     public static final int Theme_PageIndicatorDefaults=0x7f0a0000;     public static final int Widget=0x7f0a0001;     public static final int Widget_CirclePageIndicator=0x7f0a0002;     public static final int Widget_TabPageIndicator=0x7f0a0004;     public static final int Widget_TabPageIndicator_Text=0x7f0a0005;     public static final int Widget_TitlePageIndicator=0x7f0a0003;   } public static final class styleable {     public static final int CirclePageIndicator_centered=0x00000000;     public static final int CirclePageIndicator_fillColor=0x00000001;     public static final int CirclePageIndicator_orientation=0x00000002;     public static final int CirclePageIndicator_radius=0x00000003;     public static final int CirclePageIndicator_snap=0x00000004;     public static final int CirclePageIndicator_strokeColor=0x00000005;     public static final int CirclePageIndicator_strokeWidth=0x00000006;     public static final int HelloGallery_android_galleryItemBackground=0x00000000;     public static final int TitlePageIndicator_clipPadding=0x00000000;     public static final int TitlePageIndicator_footerColor=0x00000001;     public static final int TitlePageIndicator_footerIndicatorHeight=0x00000004;     public static final int TitlePageIndicator_footerIndicatorStyle=0x00000003;     public static final int TitlePageIndicator_footerIndicatorUnderlinePadding=0x00000005;     public static final int TitlePageIndicator_footerLineHeight=0x00000002;     public static final int TitlePageIndicator_footerPadding=0x00000006;     public static final int TitlePageIndicator_selectedBold=0x00000008;     public static final int TitlePageIndicator_selectedColor=0x00000007;     public static final int TitlePageIndicator_textColor=0x00000009;     public static final int TitlePageIndicator_textSize=0x0000000a;     public static final int TitlePageIndicator_titlePadding=0x0000000b;     public static final int TitlePageIndicator_topPadding=0x0000000c;     public static final int ViewPagerIndicator_vpiCirclePageIndicatorStyle=0x00000000;     public static final int ViewPagerIndicator_vpiTabPageIndicatorStyle=0x00000002;     public static final int ViewPagerIndicator_vpiTabTextStyle=0x00000003;     public static final int ViewPagerIndicator_vpiTitlePageIndicatorStyle=0x00000001;     public static final int com_fsn_cauly_CaulyAdView_allowcall=0x00000003;     public static final int com_fsn_cauly_CaulyAdView_appcode=0x00000000;     public static final int com_fsn_cauly_CaulyAdView_bannerHeight=0x00000007;     public static final int com_fsn_cauly_CaulyAdView_dynamicReloadInterval=0x00000004;     public static final int com_fsn_cauly_CaulyAdView_effect=0x00000001;     public static final int com_fsn_cauly_CaulyAdView_gps=0x00000002;     public static final int com_fsn_cauly_CaulyAdView_reloadInterval=0x00000005;     public static final int com_fsn_cauly_CaulyAdView_threadPriority=0x00000006;     public static final int[] CirclePageIndicator={R.attr.centered,R.attr.fillColor,R.attr.orientation,R.attr.radius,R.attr.snap,R.attr.strokeColor,R.attr.strokeWidth};     public static final int[] HelloGallery={android.R.attr.galleryItemBackground};     public static final int[] TitlePageIndicator={R.attr.clipPadding,R.attr.footerColor,R.attr.footerLineHeight,R.attr.footerIndicatorStyle,R.attr.footerIndicatorHeight,R.attr.footerIndicatorUnderlinePadding,R.attr.footerPadding,R.attr.selectedColor,R.attr.selectedBold,R.attr.textColor,R.attr.textSize,R.attr.titlePadding,R.attr.topPadding};     public static final int[] ViewPagerIndicator={R.attr.vpiCirclePageIndicatorStyle,R.attr.vpiTitlePageIndicatorStyle,R.attr.vpiTabPageIndicatorStyle,R.attr.vpiTabTextStyle};     public static final int[] com_fsn_cauly_CaulyAdView={R.attr.appcode,R.attr.effect,R.attr.gps,R.attr.allowcall,R.attr.dynamicReloadInterval,R.attr.reloadInterval,R.attr.threadPriority,R.attr.bannerHeight};   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\rivalBoard.code","public class rivalBoard extends AdlibActivity implements AbsListView.OnScrollListener {   static String id1;   static String id2;   Date EndDate;   Date ToDay;   private Button btSave;   private Button btnSel1;   private Button btnSel2;   EditText comment;   TextView end;   private String enddate;   String idx;   TextView iname1;   TextView iname2;   private String index;   TextView iper1;   TextView iper2;   ImageView ithum1;   ImageView ithum2;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<BoardList> mRowList;   TextView mtitle;   private String myNick;   Intent myintent;   private String name;   String name1;   String name2;   SeekBar seek1;   SeekBar seek2;   private String sex;   String thum1;   String thum2;   String today;   private int c_page=2;   private int pagesize=10;   int selgroup=0;   int totalcnt=0;   int selcnt1=0;   int selcnt2=0;   float per1=0.0f;   float per2=0.0f;   SimpleDateFormat date1form2=new SimpleDateFormat(""yyyy-MM-dd"");   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.rivalboard);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         rivalBoard.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     this.thum1=i.getStringExtra(""thum1"");     this.thum2=i.getStringExtra(""thum2"");     this.name1=i.getStringExtra(""name1"");     this.name2=i.getStringExtra(""name2"");     id1=i.getStringExtra(""groupid1"");     id2=i.getStringExtra(""groupid2"");     this.idx=i.getStringExtra(""idx"");     this.enddate=i.getStringExtra(""enddate"");     Calendar cal=Calendar.getInstance();     this.ToDay=cal.getTime();     Calendar cal2=Calendar.getInstance();     String yy=this.enddate.substring(0,4);     String mm=this.enddate.substring(5,7);     String dd=this.enddate.substring(8,10);     cal2.set(Integer.parseInt(yy),Integer.parseInt(mm) - 1,Integer.parseInt(dd));     this.EndDate=cal2.getTime();     this.iname1=(TextView)findViewById(R.id.name1);     this.iname2=(TextView)findViewById(R.id.name2);     this.iper1=(TextView)findViewById(R.id.per1);     this.iper2=(TextView)findViewById(R.id.per2);     this.btSave=(Button)findViewById(R.id.btnsave);     this.btnSel1=(Button)findViewById(R.id.btnsel1);     this.btnSel2=(Button)findViewById(R.id.btnsel2);     this.comment=(EditText)findViewById(R.id.comment);     this.seek1=(SeekBar)findViewById(R.id.seekbar1);     this.seek2=(SeekBar)findViewById(R.id.seekbar2);     this.end=(TextView)findViewById(R.id.end);     this.end.setText(this.enddate);     this.iname1.setText(this.name1);     this.iname2.setText(this.name2);     this.btnSel1.setText(String.valueOf(this.name1) + "" ì�‘ì›�"");     this.btnSel2.setText(String.valueOf(this.name2) + "" ì�‘ì›�"");     this.mAQuery.id(R.id.thum1).image(this.thum1,true,true,0,0);     this.mAQuery.id(R.id.thum2).image(this.thum2,true,true,0,0);     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){       }     } );     this.btSave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (rivalBoard.this.ToDay.compareTo(rivalBoard.this.EndDate) > 0) {           Toast.makeText(rivalBoard.this.getApplicationContext(),""íˆ¬í‘œê°€ ë§ˆê°�ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();           return;         }         if (rivalBoard.this.selgroup == 0) {           Toast.makeText(rivalBoard.this.getApplicationContext(),""ì�‘ì›�í•˜ì‹¤ ê·¸ë£¹ì�„ ì„ íƒ�í•˜ì—¬ ì£¼ì‹­ì‹œìš”"",1000).show();           return;         }         if (!rivalBoard.this.comment.getText().toString().trim().equals("""")) {           if (!rivalBoard.this.myNickSet()) {             Intent i2=new Intent(rivalBoard.this.getApplicationContext(),(Class<?>)nickset.class);             rivalBoard.this.startActivity(i2);             return;           }  else {             rivalBoard.this.setSave();             return;           }         }         Toast.makeText(rivalBoard.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );     this.btnSel1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         rivalBoard.this.selgroup=1;         rivalBoard.this.btnSel1.setBackgroundResource(R.drawable.community_tab_left_ov);         rivalBoard.this.btnSel1.setTextColor(-16777216);         rivalBoard.this.btnSel2.setBackgroundResource(R.drawable.community_tab_right);         rivalBoard.this.btnSel2.setTextColor(-1);       }     } );     this.btnSel2.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         rivalBoard.this.selgroup=2;         rivalBoard.this.btnSel1.setBackgroundResource(R.drawable.community_tab_left);         rivalBoard.this.btnSel1.setTextColor(-1);         rivalBoard.this.btnSel2.setBackgroundResource(R.drawable.community_tab_right_ov);         rivalBoard.this.btnSel2.setTextColor(-16777216);       }     } );     getCnt();     this.mLockListView=true;     makea();   }   public void getCnt(){     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/rivalcnt.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         rivalBoard.this.setCnt(json);       }     } );   }   public void setCnt(  JSONObject json){     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         if (localJSONObject2.optString(""groupid"").equals(id1)) {           this.selcnt1=Integer.parseInt(localJSONObject2.optString(""cnt""));         }  else         if (localJSONObject2.optString(""groupid"").equals(id2)) {           this.selcnt2=Integer.parseInt(localJSONObject2.optString(""cnt""));         }       }  catch (      Exception e) {       }     }     this.totalcnt=this.selcnt1 + this.selcnt2;     this.per1=(this.selcnt1 / this.totalcnt) * 100.0f;     this.per2=(this.selcnt2 / this.totalcnt) * 100.0f;     this.iper1.setText(String.valueOf(String.format(""%.2f"",Float.valueOf(this.per1))) + ""%"");     this.iper2.setText(String.valueOf(String.format(""%.2f"",Float.valueOf(this.per2))) + ""%"");     this.seek1.setProgress((int)(100.0f - this.per1));     this.seek2.setProgress((int)this.per2);   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.mLockListView=true;       makeaAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   }   public void setSave(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     this.btSave.setEnabled(false);     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     if (this.selgroup == 1) {       params.put(""groupid"",id1);       params.put(""groupname"",this.name1);     }  else {       params.put(""groupid"",id2);       params.put(""groupname"",this.name2);     }     params.put(""content"",this.comment.getText());     params.put(""device"",deviceId);     params.put(""nick"",this.myNick);     params.put(""ver"",""1.0"");     this.mAQuery.ajax(""http://180.71.58.225/app/idol/rivalwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         mProgressHUD.dismiss();         Toast.makeText(rivalBoard.this.getApplicationContext(),json,1000).show();         if (json.equals(""0"")) {           rivalBoard.this.comment.setText((CharSequence)null);           Toast.makeText(rivalBoard.this.getApplicationContext(),""í•˜ë£¨ 10íšŒê¹Œì§€ ì�‘ì›�ê°€ëŠ¥í•©ë‹ˆë‹¤."",1000).show();           return;         }         rivalBoard.this.comment.setText((CharSequence)null);         rivalBoard.this.c_page=2;         rivalBoard.this.mRowList.clear();         rivalBoard.this.getCnt();         rivalBoard.this.makea();         rivalBoard.this.btSave.setEnabled(true);       }     } );   }   private void makeaAdd(  int page){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/rivalboardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         rivalBoard.this.mRowList.addAll(rivalBoard.this.setData2(json));         if (rivalBoard.this.setData2(json).size() >= rivalBoard.this.pagesize) {           rivalBoard.this.mLockListView=false;         }         rivalBoard.this.mAdapter.notifyDataSetChanged();       }     } );   }   public void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""page"",""1"");     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.mAQuery.ajax(""http://180.71.58.225/app/idol/rivalboardlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         rivalBoard.this.mRowList=rivalBoard.this.setData2(json);         rivalBoard.this.c_page=2;         rivalBoard.this.mAdapter=new EfficientAdapter(rivalBoard.this,rivalBoard.this.mRowList);         rivalBoard.this.li.setAdapter((ListAdapter)rivalBoard.this.mAdapter);         if (rivalBoard.this.mRowList.size() < rivalBoard.this.pagesize) {           rivalBoard.this.mLockListView=true;         }  else {           rivalBoard.this.mLockListView=false;         }       }     } );   } public static class EfficientAdapter extends BaseAdapter {     ArrayList<BoardList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<BoardList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_rivalboard,(ViewGroup)null);         holder=new ViewHolder();         holder.text1=(TextView)convertView.findViewById(R.id.text1);         holder.text2=(TextView)convertView.findViewById(R.id.text2);         holder.rnick=(TextView)convertView.findViewById(R.id.textNic);         holder.lnick=(TextView)convertView.findViewById(R.id.ltextNic);         holder.ltext1=(TextView)convertView.findViewById(R.id.ltext1);         holder.ltext2=(TextView)convertView.findViewById(R.id.ltext2);         holder.lline1=(LinearLayout)convertView.findViewById(R.id.lline1);         holder.lline2=(LinearLayout)convertView.findViewById(R.id.lline2);         holder.rline1=(LinearLayout)convertView.findViewById(R.id.rline1);         holder.rline2=(LinearLayout)convertView.findViewById(R.id.rline2);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       if (rivalBoard.id2.equals(this.dataS.get(position).groupid)) {         holder.lline1.setVisibility(8);         holder.lline2.setVisibility(8);         holder.rline1.setVisibility(0);         holder.rline2.setVisibility(0);         holder.text1.setText(this.dataS.get(position).content);         holder.text2.setText(this.dataS.get(position).date.trim());         holder.rnick.setText(this.dataS.get(position).nickname);       }  else {         holder.rline1.setVisibility(8);         holder.rline2.setVisibility(8);         holder.lline1.setVisibility(0);         holder.lline2.setVisibility(0);         holder.ltext1.setText(this.dataS.get(position).content);         holder.ltext2.setText(this.dataS.get(position).date.trim());         holder.lnick.setText(this.dataS.get(position).nickname);       }       return convertView;     } static class ViewHolder {       LinearLayout lline1;       LinearLayout lline2;       TextView lnick;       TextView ltext1;       TextView ltext2;       LinearLayout rline1;       LinearLayout rline2;       TextView rnick;       TextView text1;       TextView text2;       ViewHolder(){       }     }   }   public ArrayList<BoardList> setData2(  JSONObject json){     ArrayList<BoardList> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       BoardList item=new BoardList();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.content=localJSONObject2.optString(""content"");         item.date=localJSONObject2.optString(""wdate"");         item.groupid=localJSONObject2.optString(""groupid"");         item.ip=localJSONObject2.optString(""device"");         item.nickname=localJSONObject2.optString(""nickname"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class BoardList {     String content;     String date;     String groupid;     String hit;     String idx;     String ip;     String nickname;     BoardList(){     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\rivalInfo.code","public class rivalInfo {   String endDate;   String groupid1;   String groupid2;   String groupname1;   String groupname2;   String idx;   String rank;   String thum1;   String thum2;   String title;   rivalInfo(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\rivalList.code","public class rivalList extends AdlibActivity {   private ImageButton btSave;   Button btnsug;   EditText comment;   private String index;   private ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private LayoutInflater mInflater;   private boolean mLockListView;   private ArrayList<rivalInfo> mRowList;   TextView mtitle;   Intent myintent;   private String name;   private String sex;   private int c_page=2;   private int pagesize=10;   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     requestWindowFeature(1);     setContentView(R.layout.rival);     initAds();     setAdsContainer(R.id.ads);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         rivalList.this.finish();       }     } );     this.btnsug=(Button)findViewById(R.id.btnsug);     this.btnsug.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent intent=new Intent(rivalList.this,(Class<?>)qaboard.class);         rivalList.this.startActivity(intent);       }     } );     this.mAQuery=new AQuery((Activity)this);     this.li=(ListView)findViewById(R.id.list);     this.li.setFadingEdgeLength(0);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent3=new Intent(rivalList.this.getApplication(),(Class<?>)rivalBoard.class);         myintent3.putExtra(""thum1"",((rivalInfo)rivalList.this.mRowList.get(position)).thum1);         myintent3.putExtra(""thum2"",((rivalInfo)rivalList.this.mRowList.get(position)).thum2);         myintent3.putExtra(""name1"",((rivalInfo)rivalList.this.mRowList.get(position)).groupname1);         myintent3.putExtra(""name2"",((rivalInfo)rivalList.this.mRowList.get(position)).groupname2);         myintent3.putExtra(""groupid1"",((rivalInfo)rivalList.this.mRowList.get(position)).groupid1);         myintent3.putExtra(""groupid2"",((rivalInfo)rivalList.this.mRowList.get(position)).groupid2);         myintent3.putExtra(""idx"",((rivalInfo)rivalList.this.mRowList.get(position)).idx);         myintent3.putExtra(""enddate"",((rivalInfo)rivalList.this.mRowList.get(position)).endDate);         rivalList.this.startActivity(myintent3);       }     } );     this.mLockListView=true;     makea();   }   private void makea(){     final ProgressHUD mProgressHUD=ProgressHUD.show(this,""Connecting"",80,true,true,null);     Map<String,Object> params=new HashMap<>();     this.mAQuery.ajax(""http://180.71.58.225/app/idol/rivallist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         mProgressHUD.dismiss();         new ArrayList();         rivalList.this.mRowList=rivalList.this.setData2(json);         rivalList.this.c_page=2;         rivalList.this.mAdapter=new EfficientAdapter(rivalList.this,rivalList.this.mRowList);         rivalList.this.li.setAdapter((ListAdapter)rivalList.this.mAdapter);         rivalList.this.mLockListView=false;       }     } );   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     ArrayList<rivalInfo> dataS;     Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<rivalInfo> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_rival,(ViewGroup)null);         holder=new ViewHolder();         holder.rank=(TextView)convertView.findViewById(R.id.rank);         holder.icon1=(ImageView)convertView.findViewById(R.id.icon1);         holder.name1=(TextView)convertView.findViewById(R.id.text1);         holder.icon2=(ImageView)convertView.findViewById(R.id.icon2);         holder.name2=(TextView)convertView.findViewById(R.id.text2);         holder.title=(TextView)convertView.findViewById(R.id.rivaltitle);         holder.btngogo=(Button)convertView.findViewById(R.id.btn_gogo);         holder.ivRivalProcess=(ImageView)convertView.findViewById(R.id.ivRivalProcess);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.btngogo.setFocusable(false);       holder.title.setText(this.dataS.get(position).title);       holder.rank.setText(this.dataS.get(position).rank);       holder.name1.setText(this.dataS.get(position).groupname1);       holder.name2.setText(this.dataS.get(position).groupname2);       this.aq.id(holder.icon1).image(this.dataS.get(position).thum1,true,true,0,0);       this.aq.id(holder.icon2).image(this.dataS.get(position).thum2,true,true,0,0);       Calendar cal=Calendar.getInstance();       Date ToDay=cal.getTime();       String enddate=this.dataS.get(position).endDate;       Calendar cal2=Calendar.getInstance();       String yy=enddate.substring(0,4);       String mm=enddate.substring(5,7);       String dd=enddate.substring(8,10);       cal2.set(Integer.parseInt(yy),Integer.parseInt(mm) - 1,Integer.parseInt(dd));       Date EndDate=cal2.getTime();       if (ToDay.compareTo(EndDate) > 0) {         holder.ivRivalProcess.setBackgroundDrawable(this.mContext.getResources().getDrawable(R.drawable.ico_end));       }  else {         holder.ivRivalProcess.setBackgroundDrawable(this.mContext.getResources().getDrawable(R.drawable.ico_ing));       }       holder.btngogo.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent3=new Intent(EfficientAdapter.this.mContext,(Class<?>)rivalBoard.class);           myintent3.putExtra(""thum1"",EfficientAdapter.this.dataS.get(position).thum1);           myintent3.putExtra(""thum2"",EfficientAdapter.this.dataS.get(position).thum2);           myintent3.putExtra(""name1"",EfficientAdapter.this.dataS.get(position).groupname1);           myintent3.putExtra(""name2"",EfficientAdapter.this.dataS.get(position).groupname2);           myintent3.putExtra(""groupid1"",EfficientAdapter.this.dataS.get(position).groupid1);           myintent3.putExtra(""groupid2"",EfficientAdapter.this.dataS.get(position).groupid2);           myintent3.putExtra(""idx"",EfficientAdapter.this.dataS.get(position).idx);           myintent3.putExtra(""enddate"",EfficientAdapter.this.dataS.get(position).endDate);           EfficientAdapter.this.mContext.startActivity(myintent3);         }       } );       return convertView;     } static class ViewHolder {       Button btngogo;       ImageView icon1;       ImageView icon2;       ImageView ivRivalProcess;       TextView name1;       TextView name2;       TextView rank;       TextView title;       ViewHolder(){       }     }   }   public ArrayList<rivalInfo> setData2(  JSONObject json){     ArrayList<rivalInfo> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       rivalInfo item=new rivalInfo();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.rank=Integer.toString(n + 1);         item.thum1=localJSONObject2.optString(""thum1"");         item.groupid1=localJSONObject2.optString(""groupid1"");         item.groupname1=localJSONObject2.optString(""groupname1"");         item.thum2=localJSONObject2.optString(""thum2"");         item.groupid2=localJSONObject2.optString(""groupid2"");         item.groupname2=localJSONObject2.optString(""groupname2"");         item.idx=localJSONObject2.optString(""idx"");         item.title=localJSONObject2.optString(HTMLElementName.TITLE);         item.endDate=localJSONObject2.optString(""endDate"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } public class rivalInfo {     String endDate;     String groupid1;     String groupid2;     String groupname1;     String groupname2;     String idx;     String rank;     String thum1;     String thum2;     String title;     rivalInfo(){     }   }   protected void initAds(){     AdlibConfig.getInstance().bindPlatform(""ADAM"",""test.adlib.project.ads.SubAdlibAdViewAdam"");     AdlibConfig.getInstance().bindPlatform(""CAULY"",""test.adlib.project.ads.SubAdlibAdViewCauly"");     AdlibConfig.getInstance().setAdlibKey(""53fe7a48e4b021b6202fcb67"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\SampleView.code","private static class SampleView extends View {   Rect dst;   private Bitmap mBitmap;   public SampleView(  Context context){     super(context);     this.dst=new Rect();     InputStream is=context.getResources().openRawResource(R.drawable.intro);     this.mBitmap=BitmapFactory.decodeStream(is);     this.dst.set(0,0,intro.sWidth,intro.sHeight - 36);   }   @Override protected void onDraw(  Canvas canvas){     canvas.drawColor(-1);     Paint p=new Paint();     canvas.drawBitmap(this.mBitmap,(Rect)null,this.dst,p);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\setting.code","public class setting extends Activity {   int iopt=0;   private SharedPreferences mPrefs;   Spinner sp1;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.setting);     this.sp1=(Spinner)findViewById(R.id.isize);     ArrayAdapter apt1=ArrayAdapter.createFromResource(this,R.array.image_size,R.layout.bar_spinner);     apt1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);     this.mPrefs=getApplicationContext().getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.iopt=this.mPrefs.getInt(""ioption"",0);     this.sp1.setAdapter((SpinnerAdapter)apt1);     this.sp1.setSelection(this.iopt);     this.sp1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){       @Override public void onItemSelected(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         SharedPreferences.Editor editor=setting.this.mPrefs.edit();         editor.putInt(""ioption"",position);         editor.commit();       }       @Override public void onNothingSelected(      AdapterView<?> arg0){       }     } );     Button btnSearch=(Button)findViewById(R.id.btnsearch);     btnSearch.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         setting.this.sendBroadcast(new Intent(""android.intent.action.MEDIA_MOUNTED"",Uri.parse(""file://"" + Environment.getExternalStorageDirectory())));       }     } );     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         setting.this.finish();       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\SongList.code","public class SongList extends Activity {   static String albumid;   String ArtId;   String albumname;   private ProgressBar bottom_prog;   private ImageButton btnClose;   int cpage;   private ListView li;   EfficientAdapter mAdapter;   private boolean mLockListView;   String testStr;   TextView title1;   ArrayList<SongInfo> sr=new ArrayList<>();   ArrayList<SongInfo> songLi=new ArrayList<>();   ArrayList<SongInfo> mRowList=new ArrayList<>();   int pagesize=50;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.songlist);     this.title1=(TextView)findViewById(R.id.title);     Intent i=getIntent();     this.ArtId=i.getStringExtra(""artid"");     albumid=i.getStringExtra(""albumid"");     this.albumname=i.getStringExtra(""name"");     this.title1.setText(this.albumname);     this.li=(ListView)findViewById(R.id.listsong);     this.li.setFadingEdgeLength(0);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.mLockListView=true;     this.cpage=1;     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(SongList.this,(Class<?>)mp3play.class);         myintent.addFlags(268435456);         myintent.putExtra(""songid"",SongList.this.mRowList.get(position).songid);         myintent.putExtra(""songname"",String.valueOf(SongList.this.mRowList.get(position).name) + "" ("" + SongList.this.mRowList.get(position).singer+ "")"");         myintent.putExtra(""albumid"",SongList.albumid);         myintent.putExtra(""artid"",SongList.this.ArtId);         SongList.this.startActivity(myintent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !SongList.this.mLockListView) {           SongList.this.bottom_prog.setVisibility(0);           SongList.this.mLockListView=true;           SongList.this.makeAdd();           SongList.this.cpage++;         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );     this.btnClose=(ImageButton)findViewById(R.id.btnClose);     this.btnClose.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         SongList.this.finish();       }     } );   }   private void makea(){     AQuery aq=new AQuery((Activity)this);     this.bottom_prog.setVisibility(0);     String url=""http://music.daum.net/album/main?album_id="" + albumid + ""&page_no=""+ this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         SongList.this.cpage=2;         new ArrayList();         ArrayList<SongInfo> paramArrayList=SongList.this.daumsongalbum(html);         SongList.this.mRowList.addAll(paramArrayList);         SongList.this.mAdapter=new EfficientAdapter(SongList.this,SongList.this.mRowList);         SongList.this.li.setAdapter((ListAdapter)SongList.this.mAdapter);         if (paramArrayList.size() < SongList.this.pagesize) {           SongList.this.bottom_prog.setVisibility(8);         }  else {           SongList.this.bottom_prog.setVisibility(8);           SongList.this.mLockListView=false;         }       }     } );   }   public void makeAdd(){     AQuery aq=new AQuery((Activity)this);     String url=""http://music.daum.net/album/main?album_id="" + albumid + ""&page_no=""+ this.cpage;     aq.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         new ArrayList();         ArrayList<SongInfo> paramArrayList=SongList.this.daumsongalbum(html);         SongList.this.mRowList.addAll(paramArrayList);         if (paramArrayList.size() < SongList.this.pagesize) {           SongList.this.bottom_prog.setVisibility(8);         }  else {           SongList.this.bottom_prog.setVisibility(8);           SongList.this.mLockListView=false;         }         SongList.this.mAdapter.notifyDataSetChanged();       }     } );   }   public ArrayList<SongInfo> mdaumsong(  String src){     ArrayList<SongInfo> songlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.OL);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""list_info list_music"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.LI);         for (        Element song1 : elementList1) {           SongInfo item=new SongInfo();           try {             item.name=song1.getAllElements(HTMLElementName.SPAN).get(1).getAllElements(HTMLElementName.SPAN).get(1).getTextExtractor().toString();             item.singer=song1.getAllElements(HTMLElementName.SPAN).get(1).getAllElements(HTMLElementName.SPAN).get(2).getTextExtractor().toString();             String wordsid=song1.getAllElements(HTMLElementName.A).get(2).getAttributeValue(""href"");             item.wordsid=wordsid;             item.songid=wordsid.split(""&"")[0].split(""="")[1];             item.albumid=wordsid.split(""&"")[1].split(""="")[1];           }  catch (          Exception e) {           }           songlist.add(item);         }       }     }     return songlist;   }   public ArrayList<SongInfo> daumson(  String src){     ArrayList<SongInfo> songlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.TR);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""tag"");       if (divClasss != null && divClasss.equals(""artist_chart"")) {         SongInfo item=new SongInfo();         item.songid=element.getAllElements(HTMLElementName.INPUT).get(0).getAttributeValue(""value"");         List<Element> elementList2=element.getAllElements(HTMLElementName.TD);         for (        Element element2 : elementList2) {           String divClasss2=element2.getAttributeValue(""class"");           if (divClasss2 != null) {             if (divClasss2.equals(""col_title"")) {               item.name=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(HTMLElementName.TITLE);             }             if (divClasss2.equals(""col_artist"")) {               item.singer=element2.getAllElements(HTMLElementName.A).get(0).getTextExtractor().toString();             }             if (divClasss2.equals(""col_album"")) {               String tempStr=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");               item.albumid=tempStr.split(""&"")[0].split(""="")[1];             }           }         }         songlist.add(item);       }     }     return songlist;   }   public ArrayList<SongInfo> daumsongalbum(  String src){     ArrayList<SongInfo> songlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.TR);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""tag"");       if (divClasss != null && divClasss.equals(""song"")) {         SongInfo item=new SongInfo();         try {           item.songid=element.getAllElements(HTMLElementName.INPUT).get(0).getAttributeValue(""value"");           List<Element> elementList2=element.getAllElements(HTMLElementName.TD);           for (          Element element2 : elementList2) {             String divClasss2=element2.getAttributeValue(""class"");             if (divClasss2 != null) {               if (divClasss2.equals(""col_title"")) {                 item.name=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(HTMLElementName.TITLE);               }               if (divClasss2.equals(""col_artist"")) {                 item.singer=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(HTMLElementName.TITLE);               }               if (divClasss2.equals(""col_album"")) {                 String tempStr=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");                 item.albumid=tempStr.split(""&"")[0].split(""="")[1];               }             }           }         }  catch (        Exception e) {         }         songlist.add(item);       }     }     return songlist;   }   public String getMusicData2(  String src){     String url=""http://player.music.daum.net/mobileweb/song.do?songId="" + src;     Log.d(""mp3"",url);     HttpClient client=new DefaultHttpClient();     HttpGet method=new HttpGet(url);     try {       Log.d(""mp3"",""dddd"");       HttpResponse response=client.execute(method);       InputStream is=response.getEntity().getContent();       JSONObject json=new JSONObject(convertStreamToString(is));       String retVal=json.getString(""streamurl"");       return retVal;     }  catch (    Exception e) {       Log.d(""mp3"",e.toString());       Toast.makeText(getBaseContext(),e.toString(),1000).show();       return """";     }   }   public String getMusicData(  String src){     String retVal="""";     String url=""http://player.music.daum.net/mobileweb/song.do?songId="" + src;     URL text=null;     try {       URL text2=new URL(url);       text=text2;     }  catch (    MalformedURLException e1) {       e1.printStackTrace();     }     InputStream in=null;     try {       try {         in=text.openStream();       }  catch (      Exception e) {         e.printStackTrace();         try {           JSONObject json=new JSONObject(convertStreamToString(null));           retVal=json.getString(""streamurl"");         }  catch (        IOException e2) {           e2.printStackTrace();         } catch (        JSONException e3) {           e3.printStackTrace();         }       }       Log.d(""mp3"",retVal);       return retVal;     }   finally {       try {         JSONObject json2=new JSONObject(convertStreamToString(in));         json2.getString(""streamurl"");       }  catch (      IOException e4) {         e4.printStackTrace();       } catch (      JSONException e5) {         e5.printStackTrace();       }     }   }   public String convertStreamToString(  InputStream is) throws IOException {     if (is != null) {       Writer writer=new StringWriter();       char[] buffer=new char[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];       try {         Reader reader=new BufferedReader(new InputStreamReader(is,""UTF-8""));         while (true) {           int n=reader.read(buffer);           if (n != -1) {             writer.write(buffer,0,n);           }  else {             is.close();             return writer.toString();           }         }       }  catch (      Throwable th) {         is.close();         throw th;       }     }  else {       return """";     }   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<SongInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<SongInfo> member){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=member;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_song,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.textM=(TextView)convertView.findViewById(R.id.text2);         holder.btnView=(Button)convertView.findViewById(R.id.btnView);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.btnView.setFocusable(false);       holder.btnView.setVisibility(8);       holder.btnView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           Intent myintent=new Intent(EfficientAdapter.this.mContext,(Class<?>)wordsinfo.class);           myintent.addFlags(268435456);           myintent.putExtra(""albumid"",SongList.albumid);           myintent.putExtra(""songid"",((SongInfo)EfficientAdapter.this.data.get(position)).songid);           EfficientAdapter.this.mContext.startActivity(myintent);         }       } );       holder.text.setText(this.data.get(position).name);       holder.textM.setText(this.data.get(position).singer);       return convertView;     } static class ViewHolder {       Button btnView;       TextView text;       TextView textM;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\starBase.code","public class starBase extends Activity {   public static int sHeight;   public static int sWidth;   private AdlibManager _amanager;   EfficientAdapter adapter;   String artid;   String artname;   String artsname;   FrameLayout basefrm;   Button btnclose;   Button btnmem;   boolean endmem=false;   LinearLayout memberlist;   LinearLayout memberlistani;   CustomScrollView mscroll;   String musicid;   LinearLayout mwrapper;   String parentid;   String parentname;   String parentsname;   LinearLayout rowWrapper;   TextView txtTitle;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.starbase);     this._amanager=new AdlibManager();     this._amanager.onCreate(this);     this.basefrm=(FrameLayout)findViewById(R.id.basefrm);     setAdsContainer(R.id.ads);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     this.btnmem=(Button)findViewById(R.id.btnmem);     this.btnclose=(Button)findViewById(R.id.btnclose);     this.memberlist=(LinearLayout)findViewById(R.id.memberlist);     this.memberlistani=(LinearLayout)findViewById(R.id.memberlistani);     this.mscroll=(CustomScrollView)findViewById(R.id.mscroll);     this.mwrapper=(LinearLayout)findViewById(R.id.mcontainer);     this.txtTitle=(TextView)findViewById(R.id.title);     Intent i=getIntent();     this.artname=i.getStringExtra(""name"");     this.artsname=i.getStringExtra(""sname"");     this.artid=i.getStringExtra(""artid"");     this.parentid=i.getStringExtra(""parentid"");     this.parentname=i.getStringExtra(""parentname"");     this.parentsname=i.getStringExtra(""parentsname"");     this.musicid=i.getStringExtra(""musicid"");     if (pCheck()) {       this.txtTitle.setText(this.artname);     }  else {       this.txtTitle.setText(String.valueOf(this.parentname) + "" - "" + this.artname);     }     setMember();     this.btnclose.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Animation anim=AnimationUtils.loadAnimation(starBase.this.getApplication(),R.anim.slide_top_out);         anim.setDuration(500L);         starBase.this.memberlistani.setAnimation(anim);         starBase.this.memberlistani.startAnimation(anim);         anim.setAnimationListener(new Animation.AnimationListener(){           @Override public void onAnimationEnd(          Animation arg0){             starBase.this.memberlist.setVisibility(8);           }           @Override public void onAnimationRepeat(          Animation arg0){           }           @Override public void onAnimationStart(          Animation arg0){           }         } );       }     } );     this.btnmem.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (starBase.this.memberlist.getVisibility() == 0) {           Animation anim=AnimationUtils.loadAnimation(starBase.this.getApplication(),R.anim.slide_top_out);           anim.setDuration(500L);           starBase.this.memberlistani.setAnimation(anim);           starBase.this.memberlistani.startAnimation(anim);           anim.setAnimationListener(new Animation.AnimationListener(){             @Override public void onAnimationEnd(            Animation arg02){               starBase.this.memberlist.setVisibility(8);             }             @Override public void onAnimationRepeat(            Animation arg02){             }             @Override public void onAnimationStart(            Animation arg02){             }           } );           return;         }         Animation anim2=AnimationUtils.loadAnimation(starBase.this.getApplication(),R.anim.slide_top_in);         anim2.setDuration(500L);         starBase.this.memberlist.setVisibility(0);         starBase.this.memberlistani.setAnimation(anim2);         starBase.this.memberlistani.startAnimation(anim2);       }     } );   }   private void setMember(){     String id;     idolDBhelper mHelper=new idolDBhelper(this);     SQLiteDatabase db=mHelper.getWritableDatabase();     ArrayList<GroupInfo> mList=new ArrayList<>();     if ("""".equals(this.parentid)) {       id=this.artid;     }  else {       id=this.parentid;     }     String query=""select groupid as memberid ,name_kor,name_eng, thum,content_kor,'1' as type from idolgroup where groupid='"" + id + ""' "";     Cursor cursor=db.rawQuery(String.valueOf(query) + "" union all select memberid,name_kor,name_eng, thum,content_kor, '2' as type from idolmember where groupid='"" + id+ ""' "",null);     cursor.getCount();     cursor.moveToFirst();     while (!cursor.isAfterLast()) {       GroupInfo item=new GroupInfo();       item.thum=cursor.getString(3).replace(""S120x150"",""S200x200"");       item.name=cursor.getString(1);       item.skey=cursor.getString(2);       item.groupid=cursor.getString(0);       item.musicid=cursor.getString(0);       mList.add(item);       cursor.moveToNext();     }     cursor.close();     db.close();     makeFrm(this.mwrapper,mList,this.mscroll);   }   public ArrayList<GroupInfo> setDataMemList(  JSONObject json){     ArrayList<GroupInfo> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       GroupInfo item=new GroupInfo();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.thum=localJSONObject2.optString(""thum"").replace(""S120x150"",""S200x200"");         item.name=localJSONObject2.optString(""name"");         item.groupid=localJSONObject2.optString(""artid"");         item.musicid=localJSONObject2.optString(""musicid"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   }   private void makeFrm(  LinearLayout con,  ArrayList<GroupInfo> gi,  CustomScrollView sc){     int i=1;     int j=sWidth / 3;     Iterator localIterator=gi.iterator();     while (true) {       int i2=i - 1;       if (!localIterator.hasNext()) {         this.endmem=true;         return;       }       final GroupInfo localImageData=localIterator.next();       if (i % 3 == 1) {         LinearLayout tempLinear=new LinearLayout(getApplicationContext());         LinearLayout.LayoutParams localLayoutParams1=new LinearLayout.LayoutParams(-1,-1);         tempLinear.setLayoutParams(localLayoutParams1);         this.rowWrapper=tempLinear;         this.rowWrapper.setOrientation(0);       }       View convertView=LayoutInflater.from(getApplicationContext()).inflate(R.layout.list_item_memlist,(ViewGroup)null);       LinearLayout.LayoutParams localLayoutParams2=new LinearLayout.LayoutParams(j,j);       convertView.setLayoutParams(localLayoutParams2);       ImageView icon=(ImageView)convertView.findViewById(R.id.icon);       TextView name=(TextView)convertView.findViewById(R.id.name);       ProgressBar thumprog=(ProgressBar)convertView.findViewById(R.id.thumprog);       name.setText(localImageData.name);       convertView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           starBase.this.finish();           Intent intent1=new Intent(starBase.this.getApplicationContext(),(Class<?>)artimgList.class);           intent1.putExtra(""name"",localImageData.name);           intent1.putExtra(""sname"",localImageData.skey);           intent1.putExtra(""artid"",localImageData.groupid);           if (starBase.this.pCheck()) {             intent1.putExtra(""parentid"",starBase.this.artid);             intent1.putExtra(""parentsname"",localImageData.skey);             intent1.putExtra(""parentname"",starBase.this.artname);           }  else {             intent1.putExtra(""parentid"",starBase.this.parentid);             intent1.putExtra(""parentsname"",starBase.this.parentsname);             intent1.putExtra(""parentname"",starBase.this.parentname);           }           intent1.putExtra(""musicid"",starBase.this.musicid);           starBase.this.startActivity(intent1);         }       } );       AQuery aq1=new AQuery(getApplicationContext());       aq1.id(icon).progress(thumprog).image(localImageData.thum,true,true,0,0,new BitmapAjaxCallback(){         @Override public void callback(        String url,        ImageView iv,        Bitmap bm,        AjaxStatus status){           iv.setScaleType(ImageView.ScaleType.FIT_XY);           iv.setImageBitmap(bm);         }       } );       this.rowWrapper.addView(convertView);       if (i % 3 == 0) {         con.addView(this.rowWrapper);       }  else       if (i == gi.size()) {         con.addView(this.rowWrapper);       }       i++;     }   } private static class EfficientAdapter extends BaseAdapter {     private static final int GROUP_CONTENT=1;     private static final int GROUP_START=0;     AQuery aq;     private ArrayList<GroupInfo> data=new ArrayList<>();     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<GroupInfo> data1){       this.mInflater=LayoutInflater.from(context);       this.data.addAll(data1);       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_rank,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).name);       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,0,0);       return convertView;     } static class ViewHolder {       ImageView icon;       TextView text;       ViewHolder(){       }     }   }   public boolean pCheck(){     if ("""".equals(this.parentid) || this.artid.equals(this.parentid)) {       return true;     }     return false;   }   @Override public void onBackPressed(){     if (this.memberlist.getVisibility() == 0) {       Animation anim=AnimationUtils.loadAnimation(getApplication(),R.anim.slide_top_out);       anim.setDuration(500L);       this.memberlistani.setAnimation(anim);       this.memberlistani.startAnimation(anim);       anim.setAnimationListener(new Animation.AnimationListener(){         @Override public void onAnimationEnd(        Animation arg0){           starBase.this.memberlist.setVisibility(8);         }         @Override public void onAnimationRepeat(        Animation arg0){         }         @Override public void onAnimationStart(        Animation arg0){         }       } );       return;     }     super.onBackPressed();   }   @Override protected void onResume(){     this._amanager.onResume(this);     super.onResume();   }   @Override protected void onPause(){     this._amanager.onPause();     super.onPause();   }   @Override protected void onDestroy(){     this._amanager.onDestroy(this);     super.onDestroy();   }   public void setAdsContainer(  int rid){     this._amanager.setAdsContainer(rid);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\StorageViewNew.code","public class StorageViewNew extends Activity {   public static int sHeight;   public static int sWidth;   Button btnApp;   Button btnDel;   Button btnNext1;   Button btnPre1;   Button btnSave1;   Button btnSet;   Button btnShare;   private ProgressDialog dialog;   ImageView imView;   ImageView menu_image;   Intent myintent;   SlidingDrawer sd;   String imageUrl="""";   String imageName="""";   private long dlastTime=0;   private List<String> list=new ArrayList();   private int cur_img=0;   private Bitmap backBm=null;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       StorageViewNew.this.imView.setImageBitmap(StorageViewNew.this.backBm);       if (StorageViewNew.this.backBm == null) {         Toast.makeText(StorageViewNew.this.getApplicationContext(),""Image Access Error"",SpeechRecognizer.ERROR_INVALID_STATUS).show();         StorageViewNew.this.finish();       }       if (StorageViewNew.this.dialog != null) {         StorageViewNew.this.dialog.dismiss();       }     }   } ;   @Override protected void onDestroy(){     super.onDestroy();     if (this.backBm != null) {       this.backBm.recycle();       this.backBm=null;     }   }   @Override protected void onStop(){     super.onStop();     if (this.dialog != null) {       this.dialog.dismiss();     }   }   @Override public void onCreate(  Bundle icicle){     super.onCreate(icicle);     setContentView(R.layout.storage);     Context applicationContext=getApplicationContext();     getApplicationContext();     Display display=((WindowManager)applicationContext.getSystemService(""window"")).getDefaultDisplay();     sWidth=display.getWidth();     sHeight=display.getHeight();     this.imView=(ImageView)findViewById(R.id.myView1);     this.sd=(SlidingDrawer)findViewById(R.id.slide);     this.menu_image=(ImageView)findViewById(R.id.menu_image);     this.sd.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){       @Override public void onDrawerOpened(){         StorageViewNew.this.menu_image.setBackgroundResource(R.drawable.btn_menu_view_ov);       }     } );     this.sd.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){       @Override public void onDrawerClosed(){         StorageViewNew.this.menu_image.setBackgroundResource(R.drawable.btn_menu_view);       }     } );     Intent i=getIntent();     this.cur_img=Integer.parseInt(i.getStringExtra(""position""));     this.btnNext1=(Button)findViewById(R.id.btnNext);     this.btnPre1=(Button)findViewById(R.id.btnPre);     this.btnSet=(Button)findViewById(R.id.btnWallpaper);     this.btnShare=(Button)findViewById(R.id.btnshare);     this.btnDel=(Button)findViewById(R.id.btndel);     this.btnApp=(Button)findViewById(R.id.btnapp);     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);     if (!sdImageMainDirectory.exists()) {       sdImageMainDirectory.mkdir();     }     File[] listFiles=new File(String.valueOf(root) + ""/"" + Main.dirpath).listFiles();     for (    File file : listFiles) {       this.list.add(file.getName());     }     if (this.list.size() == 0) {       this.btnNext1.setEnabled(false);       this.btnPre1.setEnabled(false);       this.btnSet.setEnabled(false);       this.btnNext1.setTextColor(-3355444);       this.btnPre1.setTextColor(-3355444);       this.btnSet.setTextColor(-3355444);     }  else     if (this.list.size() == 1) {       this.btnNext1.setTextColor(-3355444);       this.btnPre1.setTextColor(-3355444);       this.btnNext1.setEnabled(false);       this.btnPre1.setEnabled(false);       setView();     }  else {       setView();     }     this.btnNext1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (StorageViewNew.this.cur_img == StorageViewNew.this.list.size() - 1) {           StorageViewNew.this.cur_img=0;         }  else {           StorageViewNew.this.cur_img++;         }         StorageViewNew.this.backBm=null;         StorageViewNew.this.setView();       }     } );     this.btnPre1.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (StorageViewNew.this.cur_img == 0) {           StorageViewNew.this.cur_img=StorageViewNew.this.list.size() - 1;         }  else {           StorageViewNew storageViewNew=StorageViewNew.this;           storageViewNew.cur_img--;         }         StorageViewNew.this.backBm=null;         StorageViewNew.this.setView();       }     } );     this.btnSet.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         StorageViewNew.this.wallpaerSet();         Toast.makeText(StorageViewNew.this.getApplicationContext(),""ë°°ê²½í™”ë©´ìœ¼ë¡œ ì§€ì •ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     this.btnShare.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         String root2=Environment.getExternalStorageDirectory().getAbsolutePath();         Intent intent=new Intent(""android.intent.action.SEND"");         File file2=new File(String.valueOf(root2) + ""/"" + Main.dirpath+ ""/""+ ((String)StorageViewNew.this.list.get(StorageViewNew.this.cur_img)).toString());         Uri uri=Uri.fromFile(file2);         intent.setType(""image/jpg"");         intent.putExtra(""android.intent.extra.STREAM"",uri);         StorageViewNew.this.startActivity(Intent.createChooser(intent,""ì�´ë¯¸ì§€ê³µìœ ""));       }     } );     this.btnApp.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         StorageViewNew.this.appwall();         Toast.makeText(StorageViewNew.this.getApplicationContext(),""ì–´í”ŒìŠ¤í‚¨ì�´ ì§€ì •ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }     } );     final AlertDialog.Builder alertDlg=new AlertDialog.Builder(this);     alertDlg.setTitle(""Alert"");     alertDlg.setMessage(""ì •ë§�ë¡œ ì‚­ì œí•˜ì‹œê² ìŠµë‹ˆê¹Œ?"");     alertDlg.setPositiveButton(""ì˜ˆ"",new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         String root2=Environment.getExternalStorageDirectory().getAbsolutePath();         File fileio=new File(String.valueOf(root2) + ""/"" + Main.dirpath+ ""/""+ ((String)StorageViewNew.this.list.get(StorageViewNew.this.cur_img)).toString());         fileio.delete();         Toast.makeText(StorageViewNew.this.getApplicationContext(),""ì‚­ì œ ë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();         StorageViewNew.this.finish();       }     } );     alertDlg.setNegativeButton(""ì·¨ì†Œ"",new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){       }     } );     this.btnDel.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         alertDlg.show();       }     } );   }   public void wallpaerSet(){     this.imView.setDrawingCacheEnabled(true);     try {       WallpaperManager wallpaperManager=(WallpaperManager)getSystemService(""wallpaper"");       Bitmap bmp=this.imView.getDrawingCache();       wallpaperManager.setBitmap(bmp);       wallpaperManager.suggestDesiredDimensions((int)(sWidth * 1.2d),sHeight);     }  catch (    IOException e) {       e.printStackTrace();     }     this.imView.setDrawingCacheEnabled(false);   }   public void appwall(){     FileOutputStream fileOutputStream;     this.imView.setDrawingCacheEnabled(true);     String root=Environment.getExternalStorageDirectory().getAbsolutePath();     File sdImageMainDirectory=new File(String.valueOf(root) + ""/"" + Main.dirpath);     FileOutputStream fileOutputStream2=null;     if (!sdImageMainDirectory.exists()) {       sdImageMainDirectory.mkdir();     }     Bitmap bitmap=this.imView.getDrawingCache();     try {       try {         fileOutputStream=new FileOutputStream(String.valueOf(sdImageMainDirectory.toString()) + ""/kpopwall"");       }  catch (      Exception e) {         e=e;       }     }  catch (    Throwable th) {       th=th;     }     try {       bitmap.compress(Bitmap.CompressFormat.JPEG,100,fileOutputStream);       try {         fileOutputStream.close();       }  catch (      IOException e2) {         e2.printStackTrace();       }     }  catch (    Exception e3) {       e=e3;       fileOutputStream2=fileOutputStream;       e.printStackTrace();       try {         fileOutputStream2.close();       }  catch (      IOException e4) {         e4.printStackTrace();       }       this.imView.setDrawingCacheEnabled(false);     } catch (    Throwable th2) {       th=th2;       fileOutputStream2=fileOutputStream;       try {         fileOutputStream2.close();       }  catch (      IOException e5) {         e5.printStackTrace();       }       throw th;     }     this.imView.setDrawingCacheEnabled(false);   }   public void setView(){     this.dialog=new ProgressDialog(this);     this.dialog.setProgressStyle(0);     this.dialog.setMessage(""ë¡œë”©ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     this.dialog.setCancelable(true);     this.dialog.show();     new Thread(){       @Override public void run(){         String root=Environment.getExternalStorageDirectory().getAbsolutePath();         StorageViewNew.this.backBm=BitmapFactory.decodeFile(String.valueOf(root) + ""/"" + Main.dirpath+ ""/""+ ((String)StorageViewNew.this.list.get(StorageViewNew.this.cur_img)).toString());         StorageViewNew.this.handler.sendEmptyMessage(0);       }     } .start();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\string.code","public static final class string {   public static final int app_name=0x7f0c0000;   public static final int caulyid=0x7f0c0008;   public static final int comm_msg=0x7f0c0004;   public static final int daumid=0x7f0c0007;   public static final int hello_world=0x7f0c0001;   public static final int menu_settings=0x7f0c0002;   public static final int str_imagesize=0x7f0c0006;   public static final int str_set=0x7f0c0005;   public static final int title_activity_main=0x7f0c0003; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\style.code","public static final class style {   public static final int AppTheme=0x7f0a0007;   public static final int CustomTitlePageIndicator=0x7f0a0008;   public static final int ProgressHUD=0x7f0a0009;   public static final int TextAppearance_TabPageIndicator=0x7f0a0006;   public static final int Theme_PageIndicatorDefaults=0x7f0a0000;   public static final int Widget=0x7f0a0001;   public static final int Widget_CirclePageIndicator=0x7f0a0002;   public static final int Widget_TabPageIndicator=0x7f0a0004;   public static final int Widget_TabPageIndicator_Text=0x7f0a0005;   public static final int Widget_TitlePageIndicator=0x7f0a0003; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\styleable.code","public static final class styleable {   public static final int CirclePageIndicator_centered=0x00000000;   public static final int CirclePageIndicator_fillColor=0x00000001;   public static final int CirclePageIndicator_orientation=0x00000002;   public static final int CirclePageIndicator_radius=0x00000003;   public static final int CirclePageIndicator_snap=0x00000004;   public static final int CirclePageIndicator_strokeColor=0x00000005;   public static final int CirclePageIndicator_strokeWidth=0x00000006;   public static final int HelloGallery_android_galleryItemBackground=0x00000000;   public static final int TitlePageIndicator_clipPadding=0x00000000;   public static final int TitlePageIndicator_footerColor=0x00000001;   public static final int TitlePageIndicator_footerIndicatorHeight=0x00000004;   public static final int TitlePageIndicator_footerIndicatorStyle=0x00000003;   public static final int TitlePageIndicator_footerIndicatorUnderlinePadding=0x00000005;   public static final int TitlePageIndicator_footerLineHeight=0x00000002;   public static final int TitlePageIndicator_footerPadding=0x00000006;   public static final int TitlePageIndicator_selectedBold=0x00000008;   public static final int TitlePageIndicator_selectedColor=0x00000007;   public static final int TitlePageIndicator_textColor=0x00000009;   public static final int TitlePageIndicator_textSize=0x0000000a;   public static final int TitlePageIndicator_titlePadding=0x0000000b;   public static final int TitlePageIndicator_topPadding=0x0000000c;   public static final int ViewPagerIndicator_vpiCirclePageIndicatorStyle=0x00000000;   public static final int ViewPagerIndicator_vpiTabPageIndicatorStyle=0x00000002;   public static final int ViewPagerIndicator_vpiTabTextStyle=0x00000003;   public static final int ViewPagerIndicator_vpiTitlePageIndicatorStyle=0x00000001;   public static final int com_fsn_cauly_CaulyAdView_allowcall=0x00000003;   public static final int com_fsn_cauly_CaulyAdView_appcode=0x00000000;   public static final int com_fsn_cauly_CaulyAdView_bannerHeight=0x00000007;   public static final int com_fsn_cauly_CaulyAdView_dynamicReloadInterval=0x00000004;   public static final int com_fsn_cauly_CaulyAdView_effect=0x00000001;   public static final int com_fsn_cauly_CaulyAdView_gps=0x00000002;   public static final int com_fsn_cauly_CaulyAdView_reloadInterval=0x00000005;   public static final int com_fsn_cauly_CaulyAdView_threadPriority=0x00000006;   public static final int[] CirclePageIndicator={R.attr.centered,R.attr.fillColor,R.attr.orientation,R.attr.radius,R.attr.snap,R.attr.strokeColor,R.attr.strokeWidth};   public static final int[] HelloGallery={android.R.attr.galleryItemBackground};   public static final int[] TitlePageIndicator={R.attr.clipPadding,R.attr.footerColor,R.attr.footerLineHeight,R.attr.footerIndicatorStyle,R.attr.footerIndicatorHeight,R.attr.footerIndicatorUnderlinePadding,R.attr.footerPadding,R.attr.selectedColor,R.attr.selectedBold,R.attr.textColor,R.attr.textSize,R.attr.titlePadding,R.attr.topPadding};   public static final int[] ViewPagerIndicator={R.attr.vpiCirclePageIndicatorStyle,R.attr.vpiTitlePageIndicatorStyle,R.attr.vpiTabPageIndicatorStyle,R.attr.vpiTabTextStyle};   public static final int[] com_fsn_cauly_CaulyAdView={R.attr.appcode,R.attr.effect,R.attr.gps,R.attr.allowcall,R.attr.dynamicReloadInterval,R.attr.reloadInterval,R.attr.threadPriority,R.attr.bannerHeight}; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\thisGestureDetector.code","private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {   private thisGestureDetector(){   }   thisGestureDetector(  artListSearch artlistsearch,  thisGestureDetector thisgesturedetector){     this();   }   @Override public boolean onFling(  MotionEvent e1,  MotionEvent e2,  float velocityX,  float velocityY){     if (Math.abs(e1.getY() - e2.getY()) > 250.0f) {       return false;     }     if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 600.0f) {       artListSearch.this.movePrev();     }     if (e1.getX() - e2.getX() <= 120.0f || Math.abs(velocityX) <= 600.0f) {       return false;     }     artListSearch.this.moveNext();     return false;   } } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {   private thisGestureDetector(){   }   thisGestureDetector(  maguimageView maguimageview,  thisGestureDetector thisgesturedetector){     this();   }   @Override public boolean onDoubleTap(  MotionEvent e){     maguimageView.this.gallery.initImgPos();     return false;   }   @Override public boolean onSingleTapUp(  MotionEvent e){     maguimageView.this.setMenu();     return false;   }   @Override public boolean onFling(  MotionEvent e1,  MotionEvent e2,  float velocityX,  float velocityY){     if (Math.abs(e1.getY() - e2.getY()) > 250.0f) {       return false;     }     if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 600.0f) {       maguimageView.this.movePrev();     }     if (e1.getX() - e2.getX() <= 120.0f || Math.abs(velocityX) <= 600.0f) {       return false;     }     maguimageView.this.moveNext();     return false;   } } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {   private thisGestureDetector(){   }   thisGestureDetector(  Main main,  thisGestureDetector thisgesturedetector){     this();   }   @Override public boolean onFling(  MotionEvent e1,  MotionEvent e2,  float velocityX,  float velocityY){     if (Math.abs(e1.getY() - e2.getY()) > 250.0f) {       return false;     }     if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 600.0f) {       Main.this.movePrev();     }     if (e1.getX() - e2.getX() <= 120.0f || Math.abs(velocityX) <= 600.0f) {       return false;     }     Main.this.moveNext();     return false;   } } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {   private thisGestureDetector(){   }   thisGestureDetector(  GalleryViewItem galleryViewItem,  thisGestureDetector thisgesturedetector){     this();   }   @Override public boolean onSingleTapUp(  MotionEvent e){     String url=""http://m.media.daum.net/entertain/enews/view?newsid="" + photobook.this.photoList.get(photobook.this.mGallery.getPosition()).id;     Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(url));     intent.addFlags(268435456);     photobook.this.startActivity(intent);     return false;   } } private class thisGestureDetector extends GestureDetector.SimpleOnGestureListener {   private thisGestureDetector(){   }   thisGestureDetector(  pviewfull pviewfullVar,  thisGestureDetector thisgesturedetector){     this();   }   @Override public boolean onDoubleTap(  MotionEvent e){     pviewfull.this.hintImage();     return false;   }   @Override public boolean onSingleTapUp(  MotionEvent e){     return false;   }   @Override public boolean onFling(  MotionEvent e1,  MotionEvent e2,  float velocityX,  float velocityY){     try {       if (Math.abs(e1.getY() - e2.getY()) <= 400.0f) {         if (e1.getX() - e2.getX() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityX) > 10.0f) {           pviewfull.this.changePanSwipe(1);         }  else         if (e2.getX() - e1.getX() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityX) > 10.0f) {           pviewfull.this.changePanSwipe(2);         }  else         if (e1.getY() - e2.getY() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityY) > 10.0f) {           pviewfull.this.changePanSwipe(3);         }  else         if (e2.getY() - e1.getY() > 100 - pviewfull.this.MIN_DIST && Math.abs(velocityY) > 10.0f) {           pviewfull.this.changePanSwipe(4);         }       }     }  catch (    Exception e) {     }     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\ViewHolder.code","static class ViewHolder {   ImageView icon;   TextView text;   TextView text2;   TextView text3;   ViewHolder(){   } } static class ViewHolder {   ImageView graph;   ImageView iconLeft;   ImageView imgChartMedal;   ImageView imgChartTop;   TextView rank;   TextView text;   TextView textM;   TextView updown;   ViewHolder(){   } } static class ViewHolder {   TextView text1;   TextView text2;   TextView textC;   TextView textNick;   LinearLayout textline;   ViewHolder(){   } } static class ViewHolder {   ProgressBar progress;   TextView text1;   TextView text2;   TextView textc;   TextView txtNick;   ViewHolder(){   } } static class ViewHolder {   Button btnstart;   LinearLayout gback;   TextView gname;   ImageView icon;   TextView name;   TextView nick;   TextView point;   TextView rank;   TextView wdate;   ViewHolder(){   } } static class ViewHolder {   LinearLayout btn_glay;   LinearLayout btn_mlay;   ImageButton btngView;   ImageButton btnmView;   ImageButton btnsView;   ImageButton cyworld;   TextView cyworld_txt;   ImageButton face;   TextView face_txt;   ImageButton fan;   TextView fan_txt;   ImageView icon;   ImageView icon1;   LinearLayout icon_glay;   LinearLayout icon_mlay;   ImageView legendicon;   LinearLayout main_lay;   ImageButton meto;   TextView meto_txt;   LinearLayout site_lay;   TextView text;   TextView textM;   LinearLayout topgubun;   ImageButton twitter;   TextView twitter_txt;   ImageButton yozm;   ViewHolder(){   } } static class ViewHolder {   LinearLayout btn_glay;   LinearLayout btn_mlay;   ImageButton btngView;   ImageButton btnmView;   ImageButton btnsView;   ImageButton cyworld;   TextView cyworld_txt;   ImageButton face;   TextView face_txt;   ImageButton fan;   TextView fan_txt;   ImageView icon;   ImageView icon1;   LinearLayout icon_glay;   LinearLayout icon_mlay;   ImageView legendicon;   LinearLayout main_lay;   ImageButton meto;   TextView meto_txt;   LinearLayout site_lay;   TextView text;   TextView textM;   ImageButton twitter;   TextView twitter_txt;   ImageButton yozm;   ViewHolder(){   } } static class ViewHolder {   TextView text1;   TextView text2;   TextView textC;   TextView textNic;   LinearLayout textline;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   TextView text;   TextView text2;   TextView text3;   ViewHolder(){   } } static class ViewHolder {   Button btnfan;   Button btnfav;   ImageView icon;   ImageView newt;   TextView txtcontent;   TextView txtname;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   LinearLayout icon_line;   TextView text;   TextView text2;   TextView text3;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   TextView text1;   TextView text2;   TextView textC;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   TextView text1;   TextView text2;   TextView textC;   TextView textNic;   LinearLayout textline;   ViewHolder(){   } } static class ViewHolder {   LinearLayout lline1;   LinearLayout lline2;   TextView lnick;   TextView ltext1;   TextView ltext2;   LinearLayout rline1;   LinearLayout rline2;   TextView rnick;   TextView text1;   TextView text2;   ViewHolder(){   } } static class ViewHolder {   Button btngogo;   ImageView icon1;   ImageView icon2;   ImageView ivRivalProcess;   TextView name1;   TextView name2;   TextView rank;   TextView title;   ViewHolder(){   } } static class ViewHolder {   Button btnView;   TextView text;   TextView textM;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   TextView text;   ViewHolder(){   } } static class ViewHolder {   ImageView icon;   ImageView iconLeft;   TextView text;   TextView textM;   TextView time;   ViewHolder(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\wordsinfo.code","public class wordsinfo extends Activity {   String albumid;   AQuery aq;   String keyword;   String songid;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.words);     Intent i=getIntent();     this.songid=i.getStringExtra(""songid"");     this.albumid=i.getStringExtra(""albumid"");     this.aq=new AQuery((Activity)this);     String url=""http://m.music.daum.net/song/vcliplyrics?song_id="" + this.songid + ""&album_id=""+ this.albumid;     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""cb112"");     this.aq.ajax(cb);   }   public void cb112(  String url,  String html,  AjaxStatus paramAjaxStatus){     TextView result=(TextView)findViewById(R.id.result);     result.setText(ltrim(wordsparse(html)));   }   public static String ltrim(  String s){     int i=0;     while (i < s.length() && Character.isWhitespace(s.charAt(i))) {       i++;     }     return s.substring(i);   }   public static String rtrim(  String s){     int i=s.length() - 1;     while (i > 0 && Character.isWhitespace(s.charAt(i))) {       i--;     }     return s.substring(0,i + 1);   }   public String wordsparse(  String src){     String retVal="""";     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.DIV);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""class"");       if (divClasss != null && divClasss.equals(""wrap_songcont"")) {         retVal=element.getAllElements(HTMLElementName.P).get(0).getContent().toString().replace(""<br />"",""\n"");       }     }     return retVal;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.bluerabbit.kpopldols\YouTubeAct.code","public class YouTubeAct extends Activity {   private ProgressBar bottom_prog;   int cpage;   private ListView li;   EfficientAdapter mAdapter;   private boolean mLockListView;   private SharedPreferences mPrefs;   private int opt;   private String mSearch="""";   ArrayList<YouTubeInfo> mRowList=new ArrayList<>();   int pagesize=20;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setContentView(R.layout.youtube);     Intent i=getIntent();     this.mSearch=i.getStringExtra(""name"");     TextView txtTitle=(TextView)findViewById(R.id.title);     txtTitle.setText(String.valueOf(this.mSearch) + "" ë�™ì˜�ìƒ�"");     this.li=(ListView)findViewById(R.id.listvideo);     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.mLockListView=true;     this.cpage=0;     this.opt=1;     this.mLockListView=true;     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(YouTubeAct.this.mRowList.get(position).link));         YouTubeAct.this.startActivity(intent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !YouTubeAct.this.mLockListView) {           YouTubeAct.this.bottom_prog.setVisibility(0);           YouTubeAct.this.mLockListView=true;           YouTubeAct.this.makeaAdd();         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );   }   private void makea(){     AQuery aq=new AQuery((Activity)this);     YouTubeSearch YouSearch1=new YouTubeSearch(aq);     this.bottom_prog.setVisibility(0);     YouTubeSearch.OnSearchResult searchResult1=new YouTubeSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<YouTubeInfo> paramArrayList){         YouTubeAct.this.mRowList.addAll(paramArrayList);         YouTubeAct.this.cpage=1;         try {           YouTubeAct.this.mAdapter=new EfficientAdapter(YouTubeAct.this,YouTubeAct.this.mRowList);           YouTubeAct.this.li.setAdapter((ListAdapter)YouTubeAct.this.mAdapter);         }  catch (        Exception e) {           Toast.makeText(YouTubeAct.this,e.toString(),1000).show();         }         if (paramArrayList.size() < YouTubeAct.this.pagesize) {           YouTubeAct.this.bottom_prog.setVisibility(8);         }  else {           YouTubeAct.this.bottom_prog.setVisibility(8);           YouTubeAct.this.mLockListView=false;         }       }     } ;     YouSearch1.search(this.mSearch,this.cpage,0,searchResult1);   }   public void makeaAdd(){     AQuery aq=new AQuery((Activity)this);     YouTubeSearch YouSearch2=new YouTubeSearch(aq);     YouTubeSearch.OnSearchResult searchResult2=new YouTubeSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<YouTubeInfo> paramArrayList){         YouTubeAct.this.mRowList.addAll(paramArrayList);         if (paramArrayList.size() < YouTubeAct.this.pagesize) {           YouTubeAct.this.bottom_prog.setVisibility(8);         }  else {           YouTubeAct.this.bottom_prog.setVisibility(8);           YouTubeAct.this.mLockListView=false;         }         YouTubeAct.this.cpage++;         YouTubeAct.this.mAdapter.notifyDataSetChanged();       }     } ;     YouSearch2.search(this.mSearch,this.cpage,0,searchResult2);   }   public void SearchTube(  String name,  String page){     String uname="""";     try {       uname=URLEncoder.encode(""ë ˆì�´ì‹± "" + name,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     String str=""http://m.search.daum.net/search?w=news&q="" + uname + ""&page=""+ page;     String url=""http://gdata.youtube.com/feeds/api/videos?q="" + uname + ""&v=2&alt=jsonc&fields-language=ko-KR&max-results=30&start-index=""+ page;     AQuery aq=new AQuery((Activity)this);     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url).type(String.class).encoding(""UTF-8"").weakHandler(this,""tuberesult"");     aq.ajax(cb);   }   public void tuberesult(  String url,  String html,  AjaxStatus paramAjaxStatus){     ArrayList<YouTubeInfo> paramArrayList=new ArrayList<>();     try {       paramArrayList=youtubeParse(html);     }  catch (    Exception e) {     }     this.mRowList.clear();     this.mRowList.addAll(paramArrayList);     this.mAdapter=new EfficientAdapter(this,this.mRowList);     this.li.setAdapter((ListAdapter)this.mAdapter);     this.bottom_prog.setVisibility(8);     this.mLockListView=true;   }   public ArrayList<YouTubeInfo> youtubeParse(  String src){     ArrayList<YouTubeInfo> youlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.DIV);     int cnt=0;     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""id"");       if (divClasss != null && divClasss.equals(""search-results"")) {         List<Element> elementList1=element.getAllElements(HTMLElementName.DIV);         for (        Element element1 : elementList1) {           String divClasss1=element1.getAttributeValue(""class"");           if (divClasss1 != null && divClasss1.equals(""result-item yt-uix-tile yt-tile-default *sr "")) {             YouTubeInfo item=new YouTubeInfo();             List<Element> elementList2=element1.getAllElements(HTMLElementName.DIV);             for (            Element element2 : elementList2) {               String divClasss2=element2.getAttributeValue(""class"");               if (divClasss2 != null) {                 if (divClasss2.equals(""thumb-container"")) {                   item.link=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");                   item.thum=element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""data-thumb"");                   if (element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""data-thumb"") == null) {                     item.thum=element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");                   }                   item.time=element2.getAllElements(HTMLElementName.SPAN).get(4).getTextExtractor().toString();                 }                 if (divClasss2.equals(""result-item-main-content"")) {                   item.name=element2.getAllElements(HTMLElementName.H3).get(0).getTextExtractor().toString();                   item.content=element2.getAllElements(HTMLElementName.P).get(0).getTextExtractor().toString();                   item.writer=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.A).get(0).getTextExtractor().toString();                   item.date=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.SPAN).get(2).getTextExtractor().toString();                   item.hit=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.SPAN).get(4).getTextExtractor().toString();                 }               }             }             youlist.add(item);             cnt++;           }         }       }     }     return youlist;   } private static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<YouTubeInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<YouTubeInfo> member){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=member;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_video,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.textM=(TextView)convertView.findViewById(R.id.text2);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.time=(TextView)convertView.findViewById(R.id.time);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).name);       holder.textM.setText(""ê²Œì‹œìž� :"" + this.data.get(position).writer + "" \nê²Œì‹œì�¼: ""+ this.data.get(position).date+ "" \n"");       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       holder.time.setText(getTimefor(this.data.get(position).time));       return convertView;     } static class ViewHolder {       ImageView icon;       ImageView iconLeft;       TextView text;       TextView textM;       TextView time;       ViewHolder(){       }     }     public String getTimefor(    String du){       int i=Integer.parseInt(du);       int tmp1=i / 60;       int tmp1n=i % 60;       int tmp2=tmp1 / 60;       int tmp2n=tmp1 % 60;       int i2=tmp2 / 60;       int tmp3n=tmp2 % 60;       if (tmp3n == 0) {         String retVal=String.valueOf(Integer.toString(tmp2n)) + "":"" + Integer.toString(tmp1n);         return retVal;       }       String retVal2=String.valueOf(Integer.toString(tmp3n)) + "":"" + Integer.toString(tmp2n)+ "":""+ Integer.toString(tmp1n);       return retVal2;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.dialoid.speech.recognition\AudioCapture.code","public class AudioCapture implements Runnable {   private static final int FRAME_SIZE=320;   private static final int SAMPLING_BUFFER_SIZE_IN_BYTES=160000;   private static final int SAMPLING_FREQ=16000;   private static final int SAMPLING_MAX_SECS=5;   private static final String TAG=""AudioCapture"";   private AudioRecord audioRecord;   private Listener listener;   private boolean runFlag;   private short[] speech=new short[320];   private Thread thread; public interface Listener {     void onError(    int i);     void onRecord(    short[] sArr);     void onStart();     void onStop();   }   public void setListener(  Listener listener){     this.listener=listener;   }   public void start(){     if (this.thread != null) {       if (this.listener != null) {         this.listener.onError(SpeechRecognizer.ERROR_AUDIO_INITIALIZE);       }     }  else {       this.thread=new Thread(this);       this.thread.setName(TAG);       this.thread.start();     }   }   public void stop(){     if (this.thread != null) {       this.runFlag=false;     }   }   public void join(){     if (this.thread != null) {       try {         this.thread.join();       }  catch (      InterruptedException e) {       }     }   }   @Override public void run(){     this.runFlag=true;     if (this.listener != null) {       this.listener.onStart();     }     try {       try {         this.audioRecord=new AudioRecord(6,SAMPLING_FREQ,16,2,SAMPLING_BUFFER_SIZE_IN_BYTES);         this.audioRecord.startRecording();         while (this.runFlag) {           this.audioRecord.read(this.speech,0,320);           if (this.listener != null) {             this.listener.onRecord(this.speech);           }         }       }  catch (      Exception e) {         if (this.listener != null) {           this.listener.onError(SpeechRecognizer.ERROR_AUDIO_RECORD);         }         if (this.audioRecord != null) {           if (this.audioRecord.getRecordingState() == 3) {             this.audioRecord.stop();           }           if (this.audioRecord.getState() == 1) {             this.audioRecord.release();           }         }       }       this.thread=null;       if (this.listener != null) {         this.listener.onStop();       }     }   finally {       if (this.audioRecord != null) {         if (this.audioRecord.getRecordingState() == 3) {           this.audioRecord.stop();         }         if (this.audioRecord.getState() == 1) {           this.audioRecord.release();         }       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.dialoid.speech.recognition\Listener.code","public interface Listener {   void onError(  int i);   void onRecord(  short[] sArr);   void onStart();   void onStop(); } public interface Listener {   void onEPD();   void onEnergyChanged(  int i);   void onError(  int i);   void onFinalResult(  String[] strArr);   void onInactive();   void onPartialResult(  String str);   void onReady(  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.dialoid.speech.recognition\SpeechRecognizer.code","public class SpeechRecognizer {   public static final int ERROR_AUDIO_FINALIZE=2009;   public static final int ERROR_AUDIO_INITIALIZE=2007;   public static final int ERROR_AUDIO_RECORD=2008;   public static final int ERROR_CONNECT=2005;   public static final int ERROR_INVALID_HEADER=2002;   public static final int ERROR_INVALID_PAYLOAD=2003;   public static final int ERROR_INVALID_STATUS=2000;   public static final int ERROR_NO_RESULT=3901;   public static final int ERROR_SERVER_INTERNAL=2010;   public static final int ERROR_SOCKET=2004;   public static final int ERROR_TIMEOUT=2006;   public static final int ERROR_UNKOWN_PACKET=2001;   private static final int FRAME_SIZE=320;   public static final String LANGUAGE_EN=""en_US"";   public static final String LANGUAGE_JA=""ja_JP"";   public static final String LANGUAGE_KO=""ko_KR"";   private static final int SAMPLING_FREQ=16000;   private static final int SAMPLING_MAX_SECS=10;   public static final String SERVICE_DICTATION=""DICTATION"";   public static final String SERVICE_ISOLATION=""ISOLATION"";   public static final String SERVICE_LOCAL=""LOCAL"";   public static final String SERVICE_WEB=""WEB"";   public static final String SPEECH_ADPCM=""ADPCM"";   private static final int SPEECH_BUFFER_SIZE=320000;   public static final String SPEECH_SPEEX=""SPEEX"";   private static final String TAG=""SpeechRecognizer"";   private AudioCapture mAudioCapture;   private String mServer=""test.dialoid.com"";   private int mPort=30001;   private String mApiKey="""";   private String mLanguage=LANGUAGE_KO;   private String mSpeech=SPEECH_ADPCM;   private String mService=SERVICE_DICTATION;   private String mUUID="""";   private String mModel=Build.HARDWARE;   private String mOS=""Android-"" + Build.VERSION.RELEASE;   private String mUserDict="""";   private int mSendSpeechInterval=200;   private Context mContext=null;   private Listener mListener=null; public interface Listener {     void onEPD();     void onEnergyChanged(    int i);     void onError(    int i);     void onFinalResult(    String[] strArr);     void onInactive();     void onPartialResult(    String str);     void onReady(    String str);   }   public native int addSpeech(  short[] sArr);   private native void join();   private native void stop();   public native void setUserEPD();   public native boolean startListening();   public SpeechRecognizer(  Context context){     this.mAudioCapture=null;     String libraryPath=String.valueOf(context.getCacheDir().getAbsolutePath()) + ""/libdialoid-apklib.so"";     try {       File library=new File(libraryPath);       if (!library.exists()) {         NativeHelper.installLibrary(""/libs/armeabi/libdialoid-apklib"",libraryPath);       }       try {         System.load(libraryPath);         this.mAudioCapture=new AudioCapture();         this.mAudioCapture.setListener(new AudioCapture.Listener(){           @Override public void onStart(){             Log.i(SpeechRecognizer.TAG,""AudioCapture start"");           }           @Override public void onStop(){             Log.i(SpeechRecognizer.TAG,""AudioCapture stop"");           }           @Override public void onRecord(          short[] speech){             int energy=SpeechRecognizer.this.addSpeech(speech);             if (SpeechRecognizer.this.mListener != null) {               SpeechRecognizer.this.mListener.onEnergyChanged(energy);             }           }           @Override public void onError(          int errorCode){             if (SpeechRecognizer.this.mListener != null) {               SpeechRecognizer.this.mListener.onError(errorCode);             }             SpeechRecognizer.this.cancel();           }         } );       }  catch (      Exception e) {         throw new RuntimeException(""Can not load library from "" + libraryPath);       }     }  catch (    IOException e2) {       throw new RuntimeException(""Can not install library to "" + libraryPath);     }   }   public void setServer(  String server,  int port){     this.mServer=server;     this.mPort=port;   }   public void setListener(  Listener listener){     this.mListener=listener;   }   public void setUserDict(  String userDict){     this.mUserDict=userDict;   }   public void setUUID(  String uuid){     this.mUUID=uuid;   }   private void handleOnInactive(){     Log.d(TAG,""handleOnInactive()"");     this.mAudioCapture.stop();     this.mAudioCapture.join();     if (this.mListener != null) {       this.mListener.onInactive();     }   }   private void handleOnReady(  String sessionId){     Log.d(TAG,""handleOnReady()"");     this.mAudioCapture.start();     if (this.mListener != null) {       this.mListener.onReady(sessionId);     }   }   private void handleOnEnergyChanged(  int energy){     if (this.mListener != null) {       this.mListener.onEnergyChanged(energy);     }   }   private void handleOnPartialResult(  String text){     Log.d(TAG,""handleOnPartialResult()"");     if (this.mListener != null) {       this.mListener.onPartialResult(text);     }   }   private void handleOnEPD(){     Log.d(TAG,""handleOnEPD()"");     if (this.mListener != null) {       this.mListener.onEPD();     }   }   private void handleOnFinalResult(  String[] texts){     Log.d(TAG,""handleOnFinalResult()"");     if (this.mListener != null) {       this.mListener.onFinalResult(texts);     }   }   private void handleOnError(  int code){     Log.d(TAG,""handleOnError() - "" + code);     this.mAudioCapture.stop();     this.mAudioCapture.join();     if (this.mListener != null) {       this.mListener.onError(code);     }   }   public void cancel(){     Log.d(TAG,""====== 1"");     stop();     Log.d(TAG,""====== 2"");     this.mAudioCapture.stop();     Log.d(TAG,""====== 3"");     this.mAudioCapture.join();     join();     Log.d(TAG,""====== 4"");     if (this.mListener != null) {       this.mListener.onInactive();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.dialoid.speech.util\NativeHelper.code","public class NativeHelper {   private static final String TAG=""NativeUtil"";   public static void installLibrary(  String src,  String dst) throws IOException {     Log.d(TAG,""Install Native Library from "" + src + "" to ""+ dst);     byte[] buffer=new byte[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];     InputStream is=NativeHelper.class.getResourceAsStream(src);     if (is == null) {       throw new FileNotFoundException(""File "" + src + "" was not found inside JAR"");     }     OutputStream os=new FileOutputStream(dst);     while (true) {       try {         int readBytes=is.read(buffer);         if (readBytes != -1) {           os.write(buffer,0,readBytes);         }  else {           return;         }       }   finally {         os.close();         is.close();       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.dialoid.speech.util\UUIDHelper.code","public class UUIDHelper {   public static String getUniqueID(  Context context){     TelephonyManager tm=(TelephonyManager)context.getSystemService(""phone"");     String tmDevice=tm.getDeviceId();     String tmSerial=tm.getSimSerialNumber();     String androidId=Settings.Secure.getString(context.getContentResolver(),""android_id"");     UUID deviceUuid=new UUID(androidId.hashCode(),(tmDevice.hashCode() << 32) | tmSerial.hashCode());     String deviceId=deviceUuid.toString();     return deviceId;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDAdMessageReceiver.code","public class BDAdMessageReceiver {   WeakReference<BDAdMessageReceiverListener> listener; public interface BDAdMessageReceiverListener {     void onReceiveAdMessage(    int i,    Object obj,    Object obj2);   }   public BDAdMessageReceiver(  BDAdMessageReceiverListener listener){     this.listener=new WeakReference<>(listener);   }   public void receiveMessage(  int msgId,  Object param,  Object subParam){     BDAdMessageReceiverListener event;     if (this.listener != null && (event=this.listener.get()) != null) {       event.onReceiveAdMessage(msgId,param,subParam);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDAdMessageReceiverListener.code","public interface BDAdMessageReceiverListener {   void onReceiveAdMessage(  int i,  Object obj,  Object obj2); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDAdProxy.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3e9fcd81"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDAdProxyListener.code","public interface BDAdProxyListener {   void onCloseLandingScreen();   void onFailedToLoad(  int i,  String str);   void onInterstitialAdClosed();   void onShowLandingScreen();   void onSucceededToLoad(  int i,  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDBaseCommand.code","public abstract class BDBaseCommand implements BDCommand {   protected WeakReference<BDCommand.OnCommandCompletedListener> onCommandCompletedListener;   static int messageSerial=1;   static Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       BDBaseCommand command=(BDBaseCommand)msg.obj;       command.handleMessage(msg);     }   } ;   protected int errorCode=0;   protected Object data=null;   protected int tag=0;   @Override public void setOnCommandResult(  BDCommand.OnCommandCompletedListener onCommandCompletedListener){     this.onCommandCompletedListener=new WeakReference<>(onCommandCompletedListener);   }   @Override public int getErrorCode(){     return this.errorCode;   }   public void Fire(){     BDCommand.OnCommandCompletedListener ref;     if (this.onCommandCompletedListener != null && (ref=this.onCommandCompletedListener.get()) != null) {       ref.onCommandCompleted(this);     }   }   @Override public int getTag(){     return this.tag;   }   @Override public void setTag(  int tag){     this.tag=tag;   }   @Override public Object getData(){     return this.data;   }   @Override public void setData(  Object data){     this.data=data;   }   public void handleMessage(  Message msg){   }   public int getMessageId(){     int i; synchronized (BDBaseCommand.class) {       i=messageSerial;       messageSerial=i + 1;     }     return i;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDCommand.code","public interface BDCommand {   public static final int ERR_SUCCESS=0; public interface OnCommandCompletedListener {     void onCommandCompleted(    BDCommand bDCommand);   }   void cancel();   void execute();   Object getData();   int getErrorCode();   int getTag();   void setData(  Object obj);   void setOnCommandResult(  OnCommandCompletedListener onCommandCompletedListener);   void setTag(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDConst.code","class BDConst {   static final boolean DEVELOPMENT_MODE=false;   static final boolean IS_DYNAMIC_LINK=true;   static final String SDK_JAR_VERSION=""3.0"";   static final String UPDATE_CHECK_URL=""http://image.cauly.co.kr:15151/sdk/blackdragon/GetModuleInfo.txt"";   static int DEFAULT_CORE_MODULE_VERSION=1;   static int DOWNLOAD_CHECK_INTERVAL=3600000;   BDConst(){   }   public static String getBasePath(  Context context){     String basePath=Environment.getDataDirectory().toString();     return String.valueOf(basePath) + ""/data/"" + context.getPackageName()+ ""/cauly"";   }   public static String getCoreModuleFilename(  Context context){     String filename=String.valueOf(getBasePath(context)) + ""/BlackDragonCore.apk"";     return filename;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDDelayedCommand.code","public class BDDelayedCommand extends BDBaseCommand {   int delayMessageId;   int delayTime;   public BDDelayedCommand(  int delayTime){     this.delayTime=delayTime;   }   @Override public void handleMessage(  Message msg){     if (msg.what == this.delayMessageId) {       Fire();     }  else {       super.handleMessage(msg);     }   }   @Override public void cancel(){     handler.removeMessages(this.delayMessageId);   }   @Override public void execute(){     this.delayMessageId=getMessageId();     if (this.delayTime > 0) {       handler.sendMessageDelayed(handler.obtainMessage(this.delayMessageId,this),this.delayTime);     }  else {       handler.sendMessage(handler.obtainMessage(this.delayMessageId,this));     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDFileUtil.code","class BDFileUtil {   BDFileUtil(){   }   public static long getFileSize(  String filename){     File file=new File(filename);     return file.length();   }   public static void safeCloseInputStream(  InputStream stream){     if (stream != null) {       try {         stream.close();       }  catch (      Exception e) {       }     }   }   public static void safeCloseOutputStream(  OutputStream stream){     if (stream != null) {       try {         stream.close();       }  catch (      Exception e) {       }     }   }   public static String replaceExtName(  String filename,  String newExt){     int pos=filename.toLowerCase().lastIndexOf(""."");     return pos == -1 ? filename : String.valueOf(filename.substring(0,pos + 1)) + newExt;   }   public static boolean makeDirectory(  String path){     try {       File folder=new File(path);       folder.mkdirs();       return true;     }  catch (    Throwable th) {       return false;     }   }   public static boolean deleteDirectory(  File path){     File[] files;     if (path.exists() && (files=path.listFiles()) != null && files.length > 0) {       for (int i=0; i < files.length; i++) {         if (files[i].isDirectory()) {           deleteDirectory(files[i]);         }  else {           files[i].delete();         }       }     }     return path.delete();   }   public static boolean copy(  String sourcePath,  String targetPath){     return copy(new File(sourcePath),new File(targetPath));   }   public static boolean copy(  File source,  File target){     InputStream in=null;     OutputStream out=null;     try {       if (source.isDirectory()) {         if (!target.exists()) {           target.mkdir();         }         String[] children=source.list();         for (int i=0; i < children.length; i++) {           copy(new File(source,children[i]),new File(target,children[i]));         }       }  else {         InputStream in2=new FileInputStream(source);         try {           OutputStream out2=new FileOutputStream(target);           try {             byte[] buf=new byte[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];             while (true) {               int len=in2.read(buf);               if (len <= 0) {                 break;               }               out2.write(buf,0,len);             }             out=out2;             in=in2;           }  catch (          Exception e) {             out=out2;             in=in2;             if (in != null) {               try {                 in.close();               }  catch (              Exception e2) {               }             }             if (out == null) {               return false;             }             try {               out.close();               return false;             }  catch (            Exception e3) {               return false;             }           } catch (          Throwable th) {             th=th;             out=out2;             in=in2;             if (in != null) {               try {                 in.close();               }  catch (              Exception e4) {               }             }             if (out == null) {               throw th;             }             try {               out.close();               throw th;             }  catch (            Exception e5) {               throw th;             }           }         }  catch (        Exception e6) {           in=in2;         } catch (        Throwable th2) {           th=th2;           in=in2;         }       }       if (in != null) {         try {           in.close();         }  catch (        Exception e7) {         }       }       if (out != null) {         try {           out.close();         }  catch (        Exception e8) {         }       }       return true;     }  catch (    Exception e9) {     } catch (    Throwable th3) {       th=th3;     }   }   public static boolean move(  String sourcePath,  String targetPath){     return move(new File(sourcePath),new File(targetPath));   }   public static boolean move(  File source,  File target){     InputStream in=null;     OutputStream out=null;     try {       if (source.isDirectory()) {         if (!target.exists()) {           target.mkdir();         }         String[] children=source.list();         for (int i=0; i < children.length; i++) {           move(new File(source,children[i]),new File(target,children[i]));         }       }  else       if (!source.renameTo(target)) {         if (0 != 0) {           try {             in.close();           }  catch (          Exception e) {           }         }         if (0 == 0) {           return false;         }         try {           out.close();           return false;         }  catch (        Exception e2) {           return false;         }       }       if (0 != 0) {         try {           in.close();         }  catch (        Exception e3) {         }       }       if (0 != 0) {         try {           out.close();         }  catch (        Exception e4) {         }       }       return true;     }  catch (    Exception e5) {       if (0 != 0) {         try {           in.close();         }  catch (        Exception e6) {         }       }       if (0 == 0) {         return false;       }       try {         out.close();         return false;       }  catch (      Exception e7) {         return false;       }     } catch (    Throwable th) {       if (0 != 0) {         try {           in.close();         }  catch (        Exception e8) {         }       }       if (0 == 0) {         throw th;       }       try {         out.close();         throw th;       }  catch (      Exception e9) {         throw th;       }     }   }   public static boolean deleteDirectory(  String path){     File file=new File(path);     return deleteDirectory(file);   }   public static boolean fileExists(  String path){     File file=new File(path);     return file.exists();   }   public static String extractFilePath(  String filename){     int i=filename.lastIndexOf(47);     return i == -1 ? """" : filename.substring(0,i);   }   public static boolean deleteFile(  String path){     File file=new File(path);     return file.delete();   }   public static String getFileString(  File file){     FileInputStream fs=null;     try {       FileInputStream fs2=new FileInputStream(file);       try {         long fileSize=file.length();         byte[] bytes=new byte[(int)fileSize];         fs2.read(bytes);         fs2.close();         String responseText=new String(bytes,""UTF-8"");         return responseText;       }  catch (      Throwable th) {         e=th;         fs=fs2;         e.printStackTrace();         if (fs != null) {           try {             fs.close();           }  catch (          IOException e1) {             e1.printStackTrace();           }         }         return null;       }     }  catch (    Throwable th2) {       e=th2;     }   }   public static String getFileString(  String path){     File file=new File(path);     return getFileString(file);   }   public static boolean writeFileString(  java.lang.String r7,  java.lang.String r8){     throw new UnsupportedOperationException(""Method not decompiled: com.fsn.cauly.BDFileUtil.writeFileString(java.lang.String, java.lang.String):boolean"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDHttpCommand.code","class BDHttpCommand extends BDThreadCommand {   protected String filename;   protected boolean isCacheHit;   protected String responseText;   protected boolean reuseCachedFile;   protected String tempFilename;   protected String url;   public String getFilename(){     return this.filename;   }   public void setFilename(  String filename){     this.filename=filename;     if (filename != null) {       this.tempFilename=String.valueOf(filename) + ""__"";     }  else {       this.tempFilename=null;     }   }   public boolean isCacheHit(){     return this.isCacheHit;   }   public void setReuseCachedFile(  boolean reuse){     this.reuseCachedFile=reuse;   }   public void setUrl(  String url){     this.url=url;   }   public String getResponseText(){     if ((this.responseText == null || this.responseText.length() == 0) && this.errorCode == 0 && this.filename != null) {       this.responseText=BDFileUtil.getFileString(this.filename);     }     return this.responseText;   }   protected void processReceivedData(){   }   protected void checkTempFile(  File file){   }   @Override public void execute(){     Logger.writeLog(Logger.LogLevel.Debug,""HTTP Request : "" + this.url);     super.execute();   }   @Override public void handleCommand(){     BufferedOutputStream bufferedStream;     if (!this.reuseCachedFile || !BDFileUtil.fileExists(this.filename)) {       HttpURLConnection conn=null;       BufferedOutputStream bufferedStream2=null;       InputStream inputStream=null;       try {         conn=(HttpURLConnection)new URL(this.url).openConnection();         conn.setConnectTimeout(10000);         conn.setUseCaches(false);         int resCode=conn.getResponseCode();         Logger.writeLog(Logger.LogLevel.Debug,""Http Response : "" + resCode);         if (resCode == 200) {           ByteArrayOutputStream byteStream=null;           File tempFile=null;           if (this.filename == null) {             byteStream=new ByteArrayOutputStream();             bufferedStream=new BufferedOutputStream(byteStream);           }  else {             BDFileUtil.makeDirectory(BDFileUtil.extractFilePath(this.filename));             tempFile=new File(this.tempFilename);             bufferedStream=new BufferedOutputStream(new FileOutputStream(tempFile));           }           inputStream=conn.getInputStream();           byte[] buffer=new byte[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];           while (true) {             int bufferLength=inputStream.read(buffer);             if (bufferLength > 0 && !this.cancelled) {               bufferedStream.write(buffer,0,bufferLength);             }           }           bufferedStream.close();           bufferedStream2=null;           if (this.filename == null) {             this.responseText=byteStream.toString(""UTF-8"");           }  else {             checkTempFile(tempFile);             if (this.errorCode == 0) {               File newFile=new File(this.filename);               newFile.delete();               if (!tempFile.renameTo(newFile)) {                 this.errorCode=-2;               }             }           }         }  else {           this.errorCode=conn.getResponseCode();         }       }  catch (      Exception ex) {         ex.printStackTrace();         if (this.errorCode == 0) {           this.errorCode=-1;         }       }       if (conn != null) {         try {           conn.disconnect();         }  catch (        Exception e) {           e.printStackTrace();         }       }       if (inputStream != null) {         try {           inputStream.close();         }  catch (        Exception e2) {           e2.printStackTrace();         }       }       if (bufferedStream2 != null) {         try {           bufferedStream2.close();         }  catch (        Exception e3) {           e3.printStackTrace();         }       }     }  else {       this.isCacheHit=true;       Logger.writeLog(Logger.LogLevel.Debug,""Cache hit"");     }     if (!this.cancelled && this.errorCode == 0) {       processReceivedData();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDLoadModuleCommand.code","public class BDLoadModuleCommand extends BDThreadCommand {   static long lastCheckedTime=0;   static ClassLoader loader=null;   Object adHandlerObj;   Context context;   String errorMsg;   String moduleUrl;   Method processMessageMethod;   int serverVersion;   public BDLoadModuleCommand(  Context context){     this.context=context;   }   static boolean needDownloadCheck(){     if (lastCheckedTime == 0) {       return true;     }     long diffTime=System.currentTimeMillis() - lastCheckedTime;     return diffTime > ((long)BDConst.DOWNLOAD_CHECK_INTERVAL);   }   @Override public void handleCommand(){ synchronized (BDLoadModuleCommand.class) {       boolean check=needDownloadCheck();       boolean needToReload=false;       if (check && checkUpdateAvailable()) {         if (downloadAPKModule()) {           needToReload=true;         }  else {           this.errorCode=1;           this.errorMsg=""Failed to download BD module"";         }       }       if (loadAPKModule(needToReload)) {         this.errorCode=0;         this.errorMsg=null;       }  else       if (this.errorCode == 0) {         this.errorCode=6;         this.errorMsg=""Failed to load BD module"";       }     }   }   public Object getAdHandlerObj(){     return this.adHandlerObj;   }   public Method getProcessMessageMethod(){     return this.processMessageMethod;   }   public String getErrorMsg(){     return this.errorMsg;   }   boolean copyDefaultCoreModule(  String filename){     File targetFile=new File(filename);     try {       AssetManager am=this.context.getApplicationContext().getAssets();       InputStream is=am.open(""core.apk"");       FileOutputStream fos=new FileOutputStream(targetFile);       try {         try {           byte[] buf=new byte[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];           while (true) {             int i=is.read(buf);             if (i == -1) {               break;             }             fos.write(buf,0,i);           }           SharedPreferences pref=BDPrefUtil.getPref(this.context,""Cauly-BlackDragon"");           SharedPreferences.Editor editor=pref.edit();           editor.putInt(""ModuleVersion"",BDConst.DEFAULT_CORE_MODULE_VERSION);           editor.commit();           return true;         }   finally {           if (is != null) {             is.close();           }           if (fos != null) {             fos.close();           }         }       }  catch (      IOException e) {         throw e;       }     }  catch (    Exception e2) {       Logger.writeLog(Logger.LogLevel.Debug,""Has no core module asset"");       return false;     }   }   boolean loadAPKModule(  boolean needToReload){     String filename=BDConst.getCoreModuleFilename(this.context);     if (!BDFileUtil.fileExists(filename) && !copyDefaultCoreModule(filename)) {       return false;     }     if (loader == null || needToReload) {       String basePath=BDConst.getBasePath(this.context);       loader=new DexClassLoader(filename,basePath,null,getClass().getClassLoader());     }     if (loader == null) {       return false;     }     try {       Class<?> cls=loader.loadClass(""com.fsn.cauly.blackdragoncore.AdHandler"");       Constructor<?> cons=cls.getConstructor(new Class[0]);       this.adHandlerObj=cons.newInstance(new Object[0]);       this.processMessageMethod=cls.getMethod(""processMessage"",Integer.TYPE,Object.class,Object.class);     }  catch (    Throwable e) {       e.printStackTrace();     }     return this.adHandlerObj != null;   }   boolean checkUpdateAvailable(){     String resText;     BDHttpCommand downloadCommand=new BDHttpCommand();     downloadCommand.setUrl(""http://image.cauly.co.kr:15151/sdk/blackdragon/GetModuleInfo.txt_3.0"");     downloadCommand.handleCommand();     if (downloadCommand.errorCode != 0 || (resText=downloadCommand.getResponseText()) == null || resText.length() == 0) {       return false;     }     String[] tokens=resText.split("","");     if (tokens.length < 2) {       return false;     }     try {       this.serverVersion=Integer.valueOf(tokens[0]).intValue();       this.moduleUrl=tokens[1];       lastCheckedTime=System.currentTimeMillis();       int localModuleVersion=getLocalModuleVersion();       return localModuleVersion < this.serverVersion;     }  catch (    Throwable th) {       return false;     }   }   int getLocalModuleVersion(){     String filename=BDConst.getCoreModuleFilename(this.context);     if (!BDFileUtil.fileExists(filename)) {       return 0;     }     SharedPreferences pref=BDPrefUtil.getPref(this.context,""Cauly-BlackDragon"");     String jarVersion=pref.getString(""JarVersion"","""");     if (jarVersion.equalsIgnoreCase(""3.0"")) {       return pref.getInt(""ModuleVersion"",0);     }     return 0;   }   boolean downloadAPKModule(){     BDHttpCommand downloadCommand=new BDHttpCommand();     downloadCommand.setUrl(this.moduleUrl);     downloadCommand.setFilename(BDConst.getCoreModuleFilename(this.context));     downloadCommand.handleCommand();     if (downloadCommand.errorCode != 0) {       return false;     }     SharedPreferences pref=BDPrefUtil.getPref(this.context,""Cauly-BlackDragon"");     SharedPreferences.Editor editor=pref.edit();     editor.putString(""JarVersion"",""3.0"");     editor.putInt(""ModuleVersion"",this.serverVersion);     editor.commit();     return true;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDNetUtil.code","class BDNetUtil {   BDNetUtil(){   }   public static String getDeviceId(  Context context){     String deviceId=null;     try {       deviceId=((TelephonyManager)context.getSystemService(""phone"")).getDeviceId();     }  catch (    Exception e) {     }     if (deviceId == null) {       try {         String deviceId2=Settings.Secure.getString(context.getContentResolver(),""android_id"");         return deviceId2;       }  catch (      Exception e2) {         return deviceId;       }     }     return deviceId;   }   public static boolean isNetworkConnected(  Context context,  int netType){     ConnectivityManager connec=(ConnectivityManager)context.getSystemService(""connectivity"");     NetworkInfo netInfo=connec.getNetworkInfo(netType);     if (netInfo == null) {       return false;     }     return netInfo.isConnectedOrConnecting();   }   public static boolean isInternetConnected(  Context context){     ConnectivityManager connec=(ConnectivityManager)context.getSystemService(""connectivity"");     if (connec == null) {       Logger.writeLog(Logger.LogLevel.Error,""ConnectivityManager Not Provieded"");       return false;     }     NetworkInfo netInfo=null;     try {       netInfo=connec.getActiveNetworkInfo();     }  catch (    Exception e) {       Logger.writeLog(Logger.LogLevel.Error,""Need android.permission.ACCESS_NETWORK_STATE Permission"");     }     if (netInfo != null) {       return netInfo.isConnected();     }     return false;   }   public static boolean is3GConnected(  Context pContext){     return isNetworkConnected(pContext,0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDPrefUtil.code","public class BDPrefUtil {   public static final String DEF_PREF_NAME=""Default"";   public static void clearAll(  Context context){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     SharedPreferences.Editor editor=pref.edit();     editor.clear();     editor.commit();   }   public static SharedPreferences getPref(  Context context,  String name){     return context.getSharedPreferences(name,0);   }   public static void setStrValue(  SharedPreferences.Editor editor,  String name,  String value){     editor.putString(name,value);   }   public static void setStrValue(  Context context,  String name,  String value){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     SharedPreferences.Editor editor=pref.edit();     editor.putString(name,value);     editor.commit();   }   public static void setIntValue(  Context context,  String name,  int value){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     SharedPreferences.Editor editor=pref.edit();     editor.putInt(name,value);     editor.commit();   }   public static void setBoolValue(  Context context,  String name,  boolean value){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     SharedPreferences.Editor editor=pref.edit();     editor.putBoolean(name,value);     editor.commit();   }   public static String getStrValue(  Context context,  String name,  String defValue){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     return pref.getString(name,defValue);   }   public static int getIntValue(  Context context,  String name,  int defValue){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     return pref.getInt(name,defValue);   }   public static boolean getBoolValue(  Context context,  String name,  boolean defValue){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     return pref.getBoolean(name,defValue);   }   public static void removeValue(  Context context,  String name){     SharedPreferences pref=getPref(context,DEF_PREF_NAME);     SharedPreferences.Editor editor=pref.edit();     editor.remove(name);     editor.commit();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\BDThreadCommand.code","public abstract class BDThreadCommand extends BDBaseCommand {   protected boolean cancelled=false;   protected int threadPriority=-1;   protected CommandTask task=null;   public abstract void handleCommand(); class CommandTask extends AsyncTask<Void,Void,Void> {     CommandTask(){     }     @Override public void onPostExecute(    Void result){       super.onPostExecute((CommandTask)result);       if (!BDThreadCommand.this.cancelled) {         BDThreadCommand.this.Fire();         BDThreadCommand.this.task=null;       }     }     @Override public Void doInBackground(    Void... params){       if (BDThreadCommand.this.threadPriority != -1) {         Thread.currentThread().setPriority(BDThreadCommand.this.threadPriority);       }       BDThreadCommand.this.handleCommand();       return null;     }   }   @Override public void execute(){     this.task=new CommandTask();     this.task.execute(new Void[0]);   }   @Override public void cancel(){     if (this.task != null && !this.cancelled) {       this.task.cancel(false); synchronized (this) {         this.cancelled=true;       }       this.task=null;     }   }   public void setThreadPriority(  int priority){     this.threadPriority=priority;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyAdInfo.code","public class CaulyAdInfo {   public static final int BDERR_FILE_ERROR=6;   public static final int BDERR_INTERNAL_ERROR=3;   public static final int BDERR_INTERSTIAIL_DELAY_ERROR=8;   public static final int BDERR_MEDIA_ERROR=7;   public static final int BDERR_NETWORK_ERROR=1;   public static final int BDERR_NO_FILL=4;   public static final int BDERR_PROTOCOL_ERROR=5;   public static final int BDERR_SERVER_ERROR=2;   public static final int BDERR_SUCCESS=0;   public static final boolean DEFAULT_ALLOWCALL=true;   public static final boolean DEFAULT_DYNAMIC_RELOAD_INTERVAL=true;   protected HashMap<String,Object> dataObj=new HashMap<>();   public static final Gender DEFAULT_GENDER=Gender.all;   public static final Age DEFAULT_AGE=Age.all;   public static final Effect DEFAULT_EFFECT=Effect.LeftSlide;   public static final BannerHeight DEFAULT_BANNER_HEIGHT=BannerHeight.Proportional;   public enum Age {  all,   age10,   age20,   age30,   age40,   age50;   public static Age[] valuesCustom(){     Age[] valuesCustom=values();     int length=valuesCustom.length;     Age[] ageArr=new Age[length];     System.arraycopy(valuesCustom,0,ageArr,0,length);     return ageArr;   } }   public enum BannerHeight {  Fixed,   Proportional;   public static BannerHeight[] valuesCustom(){     BannerHeight[] valuesCustom=values();     int length=valuesCustom.length;     BannerHeight[] bannerHeightArr=new BannerHeight[length];     System.arraycopy(valuesCustom,0,bannerHeightArr,0,length);     return bannerHeightArr;   } }   public enum Effect {  None,   LeftSlide,   RightSlide,   TopSlide,   BottomSlide,   FadeIn,   Circle;   public static Effect[] valuesCustom(){     Effect[] valuesCustom=values();     int length=valuesCustom.length;     Effect[] effectArr=new Effect[length];     System.arraycopy(valuesCustom,0,effectArr,0,length);     return effectArr;   } }   public enum Gender {  all,   male,   female;   public static Gender[] valuesCustom(){     Gender[] valuesCustom=values();     int length=valuesCustom.length;     Gender[] genderArr=new Gender[length];     System.arraycopy(valuesCustom,0,genderArr,0,length);     return genderArr;   } }   public CaulyAdInfo(  CaulyAdInfoBuilder adInfoBuilder){     this.dataObj.putAll(adInfoBuilder.dataObj);   }   public HashMap<String,Object> getDataObject(){     return this.dataObj;   }   public static Gender stringToGender(  String value){     return value == null ? DEFAULT_GENDER : Gender.valueOf(value);   }   public static Age stringToAge(  String value){     if (value == null) {       return DEFAULT_AGE;     }     if (value.equals(""all"")) {       return Age.all;     }     return Age.valueOf(value);   }   static String ageToString(  Age age){     if (age == Age.all) {       return ""all"";     }     String value=age.toString();     return value.substring(3);   }   public static Effect stringToEffect(  String value){     return value == null ? DEFAULT_EFFECT : Effect.valueOf(value);   }   public static BannerHeight stringToBannerHeight(  String value){     return value == null ? DEFAULT_BANNER_HEIGHT : BannerHeight.valueOf(value);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyAdInfoBuilder.code","public class CaulyAdInfoBuilder {   protected HashMap<String,Object> dataObj=new HashMap<>();   public CaulyAdInfo build(){     return new CaulyAdInfo(this);   }   public CaulyAdInfoBuilder(  Context context,  AttributeSet attrs){     String namespace=""http://schemas.android.com/apk/res/"" + context.getPackageName();     appCode(attrs.getAttributeValue(namespace,""appcode""));     gender(attrs.getAttributeValue(namespace,""gender""));     age(attrs.getAttributeValue(namespace,""age""));     effect(attrs.getAttributeValue(namespace,""effect""));     gps(attrs.getAttributeValue(namespace,p.a));     allowcall(attrs.getAttributeBooleanValue(namespace,""allowcall"",true));     dynamicReloadInterval(attrs.getAttributeBooleanValue(namespace,""dynamicReloadInterval"",true));     reloadInterval(attrs.getAttributeIntValue(namespace,""reloadInterval"",30));     bannerHeight(attrs.getAttributeValue(namespace,""bannerHeight""));   }   public CaulyAdInfoBuilder(  String appCode){     appCode(appCode);     gender(CaulyAdInfo.DEFAULT_GENDER.toString());     age(CaulyAdInfo.DEFAULT_AGE.toString());     effect(CaulyAdInfo.DEFAULT_EFFECT.toString());     allowcall(true);     dynamicReloadInterval(true);     reloadInterval(30);     bannerHeight(CaulyAdInfo.DEFAULT_BANNER_HEIGHT.toString());   }   public CaulyAdInfoBuilder appCode(  String appCode){     this.dataObj.put(""appcode"",appCode);     return this;   }   public CaulyAdInfoBuilder gender(  String gender){     this.dataObj.put(""gender"",CaulyAdInfo.stringToGender(gender).toString());     return this;   }   public CaulyAdInfoBuilder age(  String age){     this.dataObj.put(""age"",CaulyAdInfo.stringToAge(age).toString());     return this;   }   public CaulyAdInfoBuilder effect(  String effect){     this.dataObj.put(""effect"",CaulyAdInfo.stringToEffect(effect).toString());     return this;   }   public CaulyAdInfoBuilder gps(  String gps){     if (gps != null) {       this.dataObj.put(p.a,gps);     }     return this;   }   public CaulyAdInfoBuilder allowcall(  boolean allowcall){     this.dataObj.put(""allowcall"",Boolean.valueOf(allowcall));     return this;   }   public CaulyAdInfoBuilder dynamicReloadInterval(  boolean dynamicReloadInterval){     this.dataObj.put(""dynamicReloadInterval"",Boolean.valueOf(dynamicReloadInterval));     return this;   }   public CaulyAdInfoBuilder reloadInterval(  int reloadInterval){     this.dataObj.put(""reloadInterval"",Integer.valueOf(reloadInterval));     return this;   }   public CaulyAdInfoBuilder threadPriority(  int priority){     this.dataObj.put(""priority"",Integer.valueOf(priority));     return this;   }   public CaulyAdInfoBuilder bannerHeight(  String height){     this.dataObj.put(""bannerHeight"",CaulyAdInfo.stringToBannerHeight(height).toString());     return this;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyAdView.code","public class CaulyAdView extends RelativeLayout implements BDAdProxy.BDAdProxyListener {   static ArrayList<WeakReference<CaulyAdView>> adViewList=new ArrayList<>();   CaulyAdInfo adInfo;   BDAdProxy adProxy;   BDCommand command;   boolean isAttached;   boolean isPaused;   boolean isShowPreExpandableAd;   boolean isStarted;   boolean isUserPaused;   boolean isVisible;   WeakReference<CaulyAdViewListener> listener;   WeakReference<CaulyAdView> selfRef;   public CaulyAdView(  Context context){     super(context);     this.isShowPreExpandableAd=true;   }   public CaulyAdView(  Context context,  AttributeSet attrs){     super(context,attrs);     this.isShowPreExpandableAd=true;     this.adInfo=new CaulyAdInfoBuilder(context,attrs).build();   }   public void setAdInfo(  CaulyAdInfo adInfo){     this.adInfo=adInfo;   }   public void setAdViewListener(  CaulyAdViewListener listener){     this.listener=new WeakReference<>(listener);   }   public void setShowPreExpandableAd(  boolean show){     if (show != this.isShowPreExpandableAd) {       this.isShowPreExpandableAd=show;       if (this.adProxy != null) {         this.adProxy.sendMessage(8,Boolean.valueOf(show),null);       }     }   }   public void destroy(){     if (this.isStarted) {       this.isStarted=false;       this.adProxy.stop();       this.adProxy=null;       if (this.command != null) {         this.command.cancel();         this.command=null;       }       if (this.selfRef != null) {         adViewList.remove(this.selfRef);         this.selfRef=null;       }       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Destroyed"");     }   }   public void reload(){     internalPause();     internalResume();   }   void start(){     if (this.isStarted) {       internalResume();       return;     }     if (this.isAttached && this.isVisible) {       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Started"");       this.isStarted=true;       this.isPaused=false;       HashMap<String,Object> dataObj=this.adInfo.getDataObject();       dataObj.put(""adType"",Integer.valueOf(BDAdProxy.AdType.Banner.ordinal()));       this.adProxy=new BDAdProxy(dataObj,getContext(),this);       this.adProxy.setProxyListener(this);       this.adProxy.start();       this.selfRef=new WeakReference<>(this);       adViewList.add(this.selfRef);     }   }   public void pause(){     if (!this.isUserPaused) {       this.isUserPaused=true;       internalPause();     }   }   public void resume(){     if (this.isUserPaused) {       this.isUserPaused=false;       internalResume();     }   }   void internalResume(){     if (!this.isUserPaused && this.isStarted && this.isPaused) {       this.isPaused=false;       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Resumed"");       this.adProxy.resume();     }   }   void internalPause(){     if (this.isStarted && !this.isPaused) {       this.isPaused=true;       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Paused"");       this.adProxy.pause();     }   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();     Logger.writeLog(Logger.LogLevel.Debug,""Banner - Attatch"");     this.isAttached=true;     start();   }   @Override protected void onDetachedFromWindow(){     super.onDetachedFromWindow();     Logger.writeLog(Logger.LogLevel.Debug,""Banner - Detached"");     this.isAttached=false;     if (this.isStarted) {       internalPause();     }   }   @Override protected void onWindowVisibilityChanged(  int visibility){     super.onWindowVisibilityChanged(visibility);     if (visibility == 0) {       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Visible"");       this.isVisible=true;       start();     }  else {       Logger.writeLog(Logger.LogLevel.Debug,""Banner - Invisible"");       this.isVisible=false;       internalPause();     }   }   @Override public void onSucceededToLoad(  int retCode,  String retMsg){     Logger.writeLog(Logger.LogLevel.Debug,""Banner - onReceiveAd ("" + retCode + "") ""+ retMsg);     if (this.listener != null) {       boolean isChargeable=retCode == 0;       CaulyAdViewListener ref=this.listener.get();       if (ref != null) {         ref.onReceiveAd(this,isChargeable);       }     }   }   @Override public void onFailedToLoad(  int errorCode,  String errorMsg){     CaulyAdViewListener ref;     Logger.writeLog(Logger.LogLevel.Debug,""Banner - onFailedToReceiveAd ("" + errorCode + "") ""+ errorMsg);     if (this.listener != null && (ref=this.listener.get()) != null) {       ref.onFailedToReceiveAd(this,errorCode,errorMsg);     }   }   @Override public void onInterstitialAdClosed(){   }   @Override public void onShowLandingScreen(){     CaulyAdViewListener ref;     Logger.writeLog(Logger.LogLevel.Debug,""Banner - onShowLandingScreen"");     if (this.listener != null && (ref=this.listener.get()) != null) {       ref.onShowLandingScreen(this);     }   }   @Override public void onCloseLandingScreen(){     CaulyAdViewListener ref;     Logger.writeLog(Logger.LogLevel.Debug,""Banner - onCloseLandingScreen"");     if (this.listener != null && (ref=this.listener.get()) != null) {       ref.onCloseLandingScreen(this);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyAdViewListener.code","public interface CaulyAdViewListener {   void onCloseLandingScreen(  CaulyAdView caulyAdView);   void onFailedToReceiveAd(  CaulyAdView caulyAdView,  int i,  String str);   void onReceiveAd(  CaulyAdView caulyAdView,  boolean z);   void onShowLandingScreen(  CaulyAdView caulyAdView); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyInterstitialAd.code","public class CaulyInterstitialAd implements BDAdProxy.BDAdProxyListener {   static ArrayList<CaulyInterstitialAd> currentInterstitialAd=new ArrayList<>();   CaulyAdInfo adInfo;   BDAdProxy adProxy;   WeakReference<CaulyInterstitialAdListener> listener;   public void setAdInfo(  CaulyAdInfo adInfo){     this.adInfo=adInfo;   }   public void setInterstialAdListener(  CaulyInterstitialAdListener listener){     this.listener=new WeakReference<>(listener);   }   public void requestInterstitialAd(  Activity parentActivity){     if (this.adProxy != null) {       cancel();     }     Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - start"");     HashMap<String,Object> dataObj=this.adInfo.getDataObject();     dataObj.put(""adType"",Integer.valueOf(BDAdProxy.AdType.Interstitial.ordinal()));     this.adProxy=new BDAdProxy(dataObj,parentActivity,parentActivity);     this.adProxy.setProxyListener(this);     this.adProxy.start();     currentInterstitialAd.add(this);   }   public void cancel(){     if (this.adProxy != null) {       Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - cancel"");       this.adProxy.setProxyListener(null);       this.adProxy.stop();       this.adProxy=null;       currentInterstitialAd.remove(this);     }   }   public void show(){     if (this.adProxy != null) {       Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - show"");       this.adProxy.sendMessage(7,null,null);     }   }   @Override public void onSucceededToLoad(  int retCode,  String retMsg){     Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - onReceiveInterstitialAd("" + retCode + "")""+ retMsg);     if (this.listener != null) {       boolean isChargeable=retCode == 0;       CaulyInterstitialAdListener event=this.listener.get();       if (event != null) {         event.onReceiveInterstitialAd(this,isChargeable);       }     }   }   @Override public void onFailedToLoad(  int errorCode,  String errorMsg){     Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - onFailedToReceiveInterstitialAd("" + errorCode + "")""+ errorMsg);     if (this.listener != null) {       CaulyInterstitialAdListener event=this.listener.get();       if (event != null) {         event.onFailedToReceiveInterstitialAd(this,errorCode,errorMsg);       }       currentInterstitialAd.remove(this);     }   }   @Override public void onInterstitialAdClosed(){     Logger.writeLog(Logger.LogLevel.Debug,""Interstitial - onClosedInterstitialAd"");     if (this.listener != null) {       CaulyInterstitialAdListener event=this.listener.get();       if (event != null) {         event.onClosedInterstitialAd(this);       }       currentInterstitialAd.remove(this);     }   }   @Override public void onShowLandingScreen(){   }   @Override public void onCloseLandingScreen(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CaulyInterstitialAdListener.code","public interface CaulyInterstitialAdListener {   void onClosedInterstitialAd(  CaulyInterstitialAd caulyInterstitialAd);   void onFailedToReceiveInterstitialAd(  CaulyInterstitialAd caulyInterstitialAd,  int i,  String str);   void onReceiveInterstitialAd(  CaulyInterstitialAd caulyInterstitialAd,  boolean z); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\CommandTask.code","class CommandTask extends AsyncTask<Void,Void,Void> {   CommandTask(){   }   @Override public void onPostExecute(  Void result){     super.onPostExecute((CommandTask)result);     if (!BDThreadCommand.this.cancelled) {       BDThreadCommand.this.Fire();       BDThreadCommand.this.task=null;     }   }   @Override public Void doInBackground(  Void... params){     if (BDThreadCommand.this.threadPriority != -1) {       Thread.currentThread().setPriority(BDThreadCommand.this.threadPriority);     }     BDThreadCommand.this.handleCommand();     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\Logger.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1b48b4b5"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.fsn.cauly\OnCommandCompletedListener.code","public interface OnCommandCompletedListener {   void onCommandCompleted(  BDCommand bDCommand); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\a.code","public final class a {   private static a c;   ArrayList<Runnable> a=new ArrayList<>();   private ArrayList<Runnable> b=new ArrayList<>();   public static a a(){     if (c == null) {       c=new a();     }     return c;   }   public final void a(  Runnable runnable){     this.b.add(runnable);     if (this.a.size() < 5) {       b();     }   }   public final void b(){     try { synchronized (this.b) {         if (!this.b.isEmpty()) {           Runnable runnable=this.b.get(0);           this.b.remove(0);           this.a.add(runnable);           new Thread(runnable).start();         }       }     }  catch (    Exception e) {     }   } } public class a implements FilenameFilter {   private String b;   public a(  String str){     this.b=str;   }   @Override public final boolean accept(  File file,  String str){     return str != null && str.indexOf(this.b) == 0;   } } class a extends WebChromeClient {   private a(){   }   a(  AdlibDialogView adlibDialogView,  byte b){     this();   } } public class a {   public String a;   public int b;   private a(){     this.a="""";     this.b=0;   }   a(  AdlibManager adlibManager,  byte b){     this();   } } public class a implements Comparator<File> {   @Override public final int compare(  File file,  File file2){     return file.getName().compareToIgnoreCase(file2.getName());   }   a(){   } } public class a extends WebChromeClient {   private a(){   }   a(  AdlibWebBrowserActivity adlibWebBrowserActivity,  byte b){     this();   }   @Override public final void onProgressChanged(  WebView webView,  int i){     AdlibWebBrowserActivity.this.f.setProgress(i);   } } static class a extends HttpEntityWrapper {   public a(  HttpEntity httpEntity){     super(httpEntity);   }   @Override public final InputStream getContent() throws IOException {     return new GZIPInputStream(this.wrappedEntity.getContent());   }   @Override public final long getContentLength(){     return -1L;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibActivity.code","public class AdlibActivity extends Activity {   protected AdlibManager _amanager;   @Override public void onCreate(  Bundle bundle){     super.onCreate(bundle);     this._amanager=new AdlibManager();     this._amanager.onCreate(this);   }   @Override public void onResume(){     this._amanager.onResume(this);     super.onResume();   }   @Override public void onPause(){     this._amanager.onPause();     super.onPause();   }   @Override public void onDestroy(){     this._amanager.onDestroy(this);     super.onDestroy();   }   public void setAdsContainer(  int i){     this._amanager.setAdsContainer(i);   }   public void bindAdsContainer(  AdlibAdViewContainer adlibAdViewContainer){     this._amanager.bindAdsContainer(adlibAdViewContainer);   }   public void loadInterstitialAd(){     this._amanager.loadInterstitialAd(this);   }   public void loadInterstitialAd(  Handler handler){     this._amanager.loadInterstitialAd(this,handler);   }   public void getInterstitialJSON(  Handler handler){     this._amanager.getInterstitialJSON(handler);   }   public void setVersionCheckingListner(  AdlibManager.AdlibVersionCheckingListener adlibVersionCheckingListener){     this._amanager.setVersionCheckingListner(adlibVersionCheckingListener);   }   public void destroyAdsContainer(){     this._amanager.destroyAdsContainer();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibAdViewContainer.code","public class AdlibAdViewContainer extends FrameLayout {   public String a;   protected long b;   private SubAdlibAdViewCore c;   private String d;   private SubAdlibAdViewMain e;   private SubAdlibAdViewCrossBanner f;   private boolean g;   public AdlibAdViewContainer(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.a="""";     this.b=-1L;     this.d=""-100"";     this.g=false;     if (AdlibConfig.getInstance().c(""smart"").equals("""")) {       this.g=false;     }  else {       this.g=true;     }     if (this.g) {       this.f=new SubAdlibAdViewCrossBanner(getContext());       String e=e.a().e();       if (AdlibConfig.getInstance().g(e)) {         this.f.a(e);       }       addView(this.f);       return;     }     this.e=new SubAdlibAdViewMain(getContext(),true);     addView(this.e);   }   public AdlibAdViewContainer(  Context context){     this(context,null);   }   public void onCreate(){   }   public void onResume(){   }   public void onDestroy(){   }   public void onPause(){   }   @Override public boolean onInterceptTouchEvent(  MotionEvent motionEvent){     if (motionEvent.getAction() == 0) {       Date date=new Date();       if (this.b + 5000 <= date.getTime()) {         this.b=date.getTime();         f.a(getContext()).b(Integer.parseInt(this.d));         f.a(getContext()).c(this.a);       }     }     return false;   }   public final void a(){     if (this.c != null) {       this.c.clearAdView();     }     removeAllViews();     if (this.e != null) {       this.e.onPause();       this.e.onDestroy();       this.e=null;     }     if (this.f != null) {       this.f.onPause();       this.f.onDestroy();       this.f=null;     }     this.c=null;     this.g=false;   }   public final void a(  SubAdlibAdViewCore subAdlibAdViewCore,  String str){     if (!this.d.equals(str)) {       subAdlibAdViewCore.setVisibility(8);       if (!subAdlibAdViewCore.b) {         addView(subAdlibAdViewCore);         subAdlibAdViewCore.b=true;       }       bringChildToFront(this.c);       subAdlibAdViewCore.setVisibility(0);     }   }   public final void b(  SubAdlibAdViewCore subAdlibAdViewCore,  String str){     if (!this.d.equals(str)) {       subAdlibAdViewCore.setVisibility(8);       subAdlibAdViewCore.clearAdView();     }   }   public final void c(  SubAdlibAdViewCore subAdlibAdViewCore,  String str){     if (!this.d.equals(str)) {       this.d=str;       if (!subAdlibAdViewCore.b) {         addView(subAdlibAdViewCore);         subAdlibAdViewCore.b=true;       }       SubAdlibAdViewCore subAdlibAdViewCore2=this.c;       if (this.e != null) {         this.e.setVisibility(8);         this.e.onPause();         this.e.onDestroy();         this.e=null;       }       if (this.f != null) {         this.f.setVisibility(8);         this.f.onPause();         this.f.onDestroy();         this.f=null;       }       if (subAdlibAdViewCore2 != null && subAdlibAdViewCore != subAdlibAdViewCore2) {         subAdlibAdViewCore2.setVisibility(8);         subAdlibAdViewCore2.clearAdView();       }       this.c=subAdlibAdViewCore;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibAndroidBridge.code","public class AdlibAndroidBridge {   private final Handler a=new Handler();   private Context b;   public AdlibAndroidBridge(  Context context){     this.b=context;   }   @JavascriptInterface public void callAndroid(  final String str){     this.a.post(new Runnable(){       @Override public final void run(){         try {           AdlibAndroidBridge.this.b.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str)));         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void go(  final String str){     this.a.post(new Runnable(){       @Override public final void run(){         try {           AdlibAndroidBridge.this.b.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str)));         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void go2(  final String str,  final String str2,  final String str3){     this.a.post(new Runnable(){       @Override public final void run(){         if (str != null && !str.equals("""")) {           new d(new Handler(){             @Override public final void handleMessage(            Message message){               int i=message.what;             }           } ).a(str,null);         }         if (str3.equals(""www"")) {           Bundle bundle=new Bundle();           bundle.putString(""url"",str2);           bundle.putInt(""type"",1);           Intent intent=new Intent(AdlibAndroidBridge.this.b,(Class<?>)AdlibWebBrowserActivity.class);           intent.putExtras(bundle);           try {             AdlibAndroidBridge.this.b.startActivity(intent);             return;           }  catch (          Exception e) {             return;           }         }         try {           AdlibAndroidBridge.this.b.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str2)));         }  catch (        Exception e2) {         }       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibConfig.code","!org.eclipse.jdt.core.dom.TypeDeclaration@21f98485"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibDialogActivity.code","public class AdlibDialogActivity extends Activity {   protected String a;   protected String b;   protected String c;   protected int d;   protected int e;   protected int f;   protected int g;   AdlibDialogView h;   LinearLayout.LayoutParams i;   boolean j=false;   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     this.a=getIntent().getStringExtra(""type"");     this.b=getIntent().getStringExtra(""did"");     this.c=getIntent().getStringExtra(""url"");     requestWindowFeature(1);     WindowManager.LayoutParams layoutParams=new WindowManager.LayoutParams();     layoutParams.flags=2;     layoutParams.dimAmount=0.7f;     getWindow().setAttributes(layoutParams);     if (this.a == null) {       if (this.b != null) {         this.a=""dialog"";       }  else       if (this.c != null) {         this.a=""interstitial"";       }  else {         finish();       }     }     if (this.a.equals(""interstitial"")) {       this.f=getIntent().getIntExtra(""width"",0);       this.g=getIntent().getIntExtra(""height"",0);       if (this.f == 0 || this.g == 0) {         finish();       }     }     b();   }   @Override protected void onResume(){     this.j=false;     new Handler().postDelayed(new Runnable(){       @Override public final void run(){         AdlibDialogActivity.this.j=true;       }     } ,4000L);     super.onResume();   }   @Override protected void onPause(){     super.onPause();   }   @Override protected void onDestroy(){     if (this.h != null) {       this.h.onDestroy();     }     super.onDestroy();   }   @Override public void onConfigurationChanged(  Configuration configuration){     super.onConfigurationChanged(configuration);     if (this.h != null) {       this.h.onDestroy();     }     b();   }   private void b(){     int i;     int i2;     Display defaultDisplay=getWindowManager().getDefaultDisplay();     int width=defaultDisplay.getWidth();     int height=defaultDisplay.getHeight();     if (width >= 1000) {       i=80;     }  else     if (width >= 700) {       i=50;     }  else {       i=25;     }     if (height >= 1000) {       i2=100;     }  else     if (height >= 700) {       i2=70;     }  else {       i2=40;     }     this.d=a(width) - i;     this.e=a(height) - i2;     if (this.a.equals(""interstitial"")) {       int i3=(int)((this.d / this.f) * this.g);       if (i3 > this.e) {         i3=this.e;       }       this.h=new AdlibDialogView(this,this.a,this.c,this.d,i3);     }  else {       this.h=new AdlibDialogView(this,this.a,this.b,this.d,this.e);     }     this.i=new LinearLayout.LayoutParams(-1,-1);     this.h.setHandler(new Handler(){       @Override public final void handleMessage(      Message message){         try { switch (message.what) { case 10:             AdlibDialogActivity.this.a();           break; case 20:         try {           AdlibDialogActivity.this.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse((String)message.obj)));           AdlibDialogActivity.this.finish();           break;         }  catch (        Exception e) {           break;         } case 30:       String str=(String)message.obj;     Bundle bundle=new Bundle();   bundle.putString(""url"",str); bundle.putInt(""type"",1); Intent intent=new Intent(AdlibDialogActivity.this,(Class<?>)AdlibWebBrowserActivity.class); intent.putExtras(bundle); try { AdlibDialogActivity.this.startActivity(intent); AdlibDialogActivity.this.finish(); break; }  catch (Exception e2) { break; } } }  catch (Exception e3) { } } } ); setContentView(this.h,this.i); } protected final void a(){ AlphaAnimation alphaAnimation=new AlphaAnimation(1.0f,0.0f); alphaAnimation.setDuration(200L); this.h.setAnimation(alphaAnimation); this.h.setVisibility(8); new Handler().postDelayed(new Runnable(){ @Override public final void run(){ AdlibDialogActivity.this.finish(); } } ,200L); } private int a(int i){ return (int)(i / Float.valueOf(getResources().getDisplayMetrics().density).floatValue()); } @Override public boolean onKeyDown(int i,KeyEvent keyEvent){ if (i != 4) { return super.onKeyDown(i,keyEvent); } if (this.j) { a(); } return true; } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibDialogView.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4911e8cd"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibManager.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3f4458a0"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibNoZoomWebView.code","!org.eclipse.jdt.core.dom.TypeDeclaration@47c800aa"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibRewardIcon.code","public class AdlibRewardIcon {   public static final int ALIGN_LEFT_BOTTOM=3;   public static final int ALIGN_LEFT_TOP=1;   public static final int ALIGN_RIGHT_BOTTOM=4;   public static final int ALIGN_RIGHT_TOP=2;   private int _height;   private int _width;   public String rLinkId=null;   public String iconId=null;   public int iconAlign=1;   public int iconX=0;   public int iconY=0;   public boolean bShowIcon=false;   public View iconFrame=null;   public AnimationDrawable animation=null;   public int getWidth(){     return this._width;   }   public int getHeight(){     return this._height;   }   public void setIconSize(  int i,  int i2){     this._width=i;     this._height=i2;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibRewardLink.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1e8d8a"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibVersionCheckingListener.code","public interface AdlibVersionCheckingListener {   void gotCurrentVersion(  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibViewGroup.code","public class AdlibViewGroup extends ViewGroup {   int a;   int b;   int c;   public AdlibViewGroup(  Context context){     super(context);     this.a=0;     this.b=0;     this.c=1;   }   public AdlibViewGroup(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.a=0;     this.b=0;     this.c=1;   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();   }   @Override protected void onDetachedFromWindow(){     super.onDetachedFromWindow();   }   @Override protected void onVisibilityChanged(  View view,  int i){     super.onVisibilityChanged(view,i);   }   public void setPosition(  int i,  int i2,  int i3){     this.a=i2;     this.b=i3;     this.c=i;     if (i2 < 0) {       this.a=0;     }     if (i3 < 0) {       this.b=0;     }     if (this.c <= 0 || this.c > 4) {       this.c=1;     }   }   @Override protected void onLayout(  boolean z,  int i,  int i2,  int i3,  int i4){     int i5;     int i6;     int i7;     for (int childCount=getChildCount() - 1; childCount >= 0; childCount--) {       View childAt=getChildAt(childCount);       int i8=i3 - i;       int i9=i4 - i2;       ViewGroup.LayoutParams layoutParams=childAt.getLayoutParams();       childAt.measure(View.MeasureSpec.makeMeasureSpec(layoutParams.width,1073741824),View.MeasureSpec.makeMeasureSpec(layoutParams.height,1073741824));       int measuredWidth=childAt.getMeasuredWidth();       int measuredHeight=childAt.getMeasuredHeight();       if (this.c == 2) {         i5=(i8 - (measuredWidth / 2)) - this.a;         i6=this.b;         i7=measuredHeight / 2;       }  else       if (this.c == 3) {         i5=this.a - (measuredWidth / 2);         i6=i9 - (measuredHeight / 2);         i7=this.b;       }  else       if (this.c == 4) {         i5=(i8 - (measuredWidth / 2)) - this.a;         i6=i9 - (measuredHeight / 2);         i7=this.b;       }  else {         i5=this.a - (measuredWidth / 2);         i6=this.b;         i7=measuredHeight / 2;       }       int i10=i6 - i7;       childAt.layout(i5,i10,i5 + measuredWidth,i10 + measuredHeight);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AdlibWebBrowserActivity.code","public class AdlibWebBrowserActivity extends Activity {   FrameLayout a;   LinearLayout b;   LinearLayout c;   AdlibNoZoomWebView d;   WebView e;   ProgressBar f;   String g;   Button h;   Button i;   String j;   String k;   String l;   int m;   String n;   String o;   boolean p=false;   AnimationSet q;   @Override protected void onCreate(  Bundle bundle){     Message obtain;     byte b2=0;     super.onCreate(bundle);     requestWindowFeature(1);     this.j=getResources().getConfiguration().locale.getLanguage();     this.a=new FrameLayout(this);     this.a.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,1.0f));     this.g=getIntent().getStringExtra(""url"");     this.n=getIntent().getStringExtra(""id"");     this.o=getIntent().getStringExtra(HTMLElementName.PARAM);     this.m=getIntent().getIntExtra(""type"",1);     this.f=new ProgressBar(this,null,R.attr.progressBarStyleHorizontal);     this.f.setLayoutParams(new LinearLayout.LayoutParams(-1,a(5)));     this.f.setMax(100);     this.f.setVisibility(8);     this.h=new Button(this);     this.h.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,1.0f));     if (this.j.equals(""ko"")) {       this.h.setText(""ë©”ë‰´"");     }  else {       this.h.setText(HTMLElementName.MENU);     }     this.h.setTextColor(-1);     this.h.setBackgroundColor(16777215);     registerForContextMenu(this.h);     this.h.setOnClickListener(new View.OnClickListener(){       @Override public final void onClick(      View view){         AdlibWebBrowserActivity.this.openContextMenu(AdlibWebBrowserActivity.this.h);       }     } );     this.h.setLongClickable(false);     this.l="""";     if (this.m == 1) {       b();       return;     }     if (this.m == 2) {       this.h.setVisibility(8);       this.b=new LinearLayout(this);       this.b.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));       this.b.setGravity(17);       this.b.setOrientation(1);       this.b.setBackgroundColor(-3223858);       this.d=new AdlibNoZoomWebView(this);       this.d.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));       this.d.getSettings().setJavaScriptEnabled(true);       this.d.getSettings().setLoadWithOverviewMode(true);       this.d.getSettings().setUseWideViewPort(true);       this.d.setInitialScale(1);       this.d.setScrollBarStyle(33554432);       this.d.getSettings().setRenderPriority(WebSettings.RenderPriority.HIGH);       this.d.getSettings().setCacheMode(2);       this.d.setWebViewClient(new d(this,b2));       this.d.setWebChromeClient(new a(this,b2));       this.d.addJavascriptInterface(new AndroidBridge(),""gotoAds"");       this.k=this.d.getSettings().getUserAgentString();       AlphaAnimation alphaAnimation=new AlphaAnimation(0.7f,1.0f);       alphaAnimation.setDuration(80L);       this.q=new AnimationSet(false);       this.q.addAnimation(alphaAnimation);       this.b.addView(this.h);       setContentView(this.b);       Handler handler=new Handler(){         @Override public final void handleMessage(        Message message){           try { switch (message.what) { case 10:               try {                 String str=(String)message.obj;                 AdlibWebBrowserActivity.this.d.loadUrl(str);                 AdlibWebBrowserActivity.this.g=str;                 AdlibWebBrowserActivity.this.a.addView(AdlibWebBrowserActivity.this.d);                 AdlibWebBrowserActivity.this.a.addView(AdlibWebBrowserActivity.this.f);                 AdlibWebBrowserActivity.this.b.addView(AdlibWebBrowserActivity.this.a);                 break;               }  catch (              Exception e) {                 break;               } case 20:             try {               c cVar=(c)message.obj;               int i=cVar.a;               String str2=cVar.b;               String str3=cVar.c;               AdlibWebBrowserActivity.this.e=new WebView(AdlibWebBrowserActivity.this);               AdlibWebBrowserActivity.this.e.setLayoutParams(new LinearLayout.LayoutParams(-1,AdlibWebBrowserActivity.this.a(i)));               AdlibWebBrowserActivity.this.e.getSettings().setJavaScriptEnabled(true);               AdlibWebBrowserActivity.this.e.getSettings().setLoadWithOverviewMode(true);               AdlibWebBrowserActivity.this.e.getSettings().setUseWideViewPort(true);               AdlibWebBrowserActivity.this.e.setInitialScale(1);               AdlibWebBrowserActivity.this.e.setScrollBarStyle(33554432);               AdlibWebBrowserActivity.this.e.loadUrl(str2);               AdlibWebBrowserActivity.this.e.addJavascriptInterface(new AndroidBridge(),""gotoAds"");               AdlibWebBrowserActivity.this.d.loadUrl(str3);               AdlibWebBrowserActivity.this.g=str3;               AdlibWebBrowserActivity.this.a.addView(AdlibWebBrowserActivity.this.d);               AdlibWebBrowserActivity.this.a.addView(AdlibWebBrowserActivity.this.f);               AdlibWebBrowserActivity.this.b.addView(AdlibWebBrowserActivity.this.e);               AdlibWebBrowserActivity.this.b.addView(AdlibWebBrowserActivity.this.a);               break;             }  catch (            Exception e2) {               break;             } case 30:           try {             AdlibWebBrowserActivity.this.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse((String)message.obj)));             AdlibWebBrowserActivity.this.finish();             break;           }  catch (          Exception e3) {             break;           } case 40:         AdlibWebBrowserActivity.this.finish();       break;   } }  catch (Exception e4) { } } } ; String str=this.o; try { if (str == null) { throw new Exception(); } JSONObject jSONObject=new JSONObject(str); String string=jSONObject.getString(""landing""); try { String string2=jSONObject.getString(""ty""); if (string2.equals(""www"")) {   obtain=Message.obtain(handler,10,string); }  else {   if (!string2.equals(""www2"")) {     throw new Exception();   }   obtain=Message.obtain(handler,20,new c(jSONObject.getInt(""h""),jSONObject.getString(""header""),string)); } }  catch (Exception e) { obtain=Message.obtain(handler,30,string); } if (obtain != null) { handler.sendMessage(obtain); return; } return; }  catch (Exception e2) { handler.sendEmptyMessage(40); return; } } this.m=1; b(); } private void b(){ byte b2=0; this.b=new LinearLayout(this); this.b.setLayoutParams(new LinearLayout.LayoutParams(-1,-1)); this.b.setOrientation(1); this.d=new AdlibNoZoomWebView(this); this.d.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,1.0f)); this.d.getSettings().setJavaScriptEnabled(true); this.d.getSettings().setLoadWithOverviewMode(true); this.d.getSettings().setUseWideViewPort(true); this.d.setInitialScale(1); this.d.setScrollBarStyle(33554432); this.d.setWebViewClient(new d(this,b2)); this.d.setWebChromeClient(new a(this,b2)); this.d.loadUrl(this.g); View view=new View(this); view.setLayoutParams(new LinearLayout.LayoutParams(-1,a(1),0.0f)); view.setBackgroundColor(-12303292); this.c=new LinearLayout(this); this.c.setLayoutParams(new LinearLayout.LayoutParams(-1,a(40),0.0f)); this.c.setBackgroundColor(-14932432); this.c.setGravity(16); View view2=new View(this); view2.setLayoutParams(new LinearLayout.LayoutParams(a(1),-1,0.0f)); view2.setBackgroundColor(-12303292); this.i=new Button(this); this.i.setLayoutParams(new LinearLayout.LayoutParams(-1,-1,2.0f)); if (this.j.equals(""ko"")) { this.i.setText(""ë‹«ê¸°""); }  else { this.i.setText(""close""); } this.i.setTextColor(-1); this.i.setBackgroundColor(16777215); this.i.setOnClickListener(new View.OnClickListener(){ @Override public final void onClick(View view3){ AdlibWebBrowserActivity.this.finish(); } } ); this.c.addView(this.h); this.c.addView(view2); this.c.addView(this.i); this.b.addView(this.d); this.b.addView(view); this.b.addView(this.c); this.a.addView(this.b); this.a.addView(this.f); setContentView(this.a); } @Override protected void onDestroy(){ if (this.d != null) { if (this.m == 1) { this.b.removeView(this.d); }  else { this.b.removeAllViews(); this.a.removeView(this.d); } this.d.destroy(); } super.onDestroy(); } @Override public void onCreateContextMenu(ContextMenu contextMenu,View view,ContextMenu.ContextMenuInfo contextMenuInfo){ if (this.j.equals(""ko"")) { if (this.d.canGoBack()) { contextMenu.add(0,1,1,""<< ë’¤ë¡œ"").setEnabled(true); }  else { contextMenu.add(0,1,1,""<< ë’¤ë¡œ"").setEnabled(false); } if (this.d.canGoForward()) { contextMenu.add(0,2,2,"">> ì•žìœ¼ë¡œ"").setEnabled(true); }  else { contextMenu.add(0,2,2,"">> ì•žìœ¼ë¡œ"").setEnabled(false); } contextMenu.add(0,3,3,""ìƒˆë¡œê³ ì¹¨""); contextMenu.add(0,4,4,""ë¸Œë�¼ìš°ì €ë¡œ ì—´ê¸°""); }  else { if (this.d.canGoBack()) { contextMenu.add(0,1,1,""<< Back"").setEnabled(true); }  else { contextMenu.add(0,1,1,""<< Back"").setEnabled(false); } if (this.d.canGoForward()) { contextMenu.add(0,2,2,"">> Forward"").setEnabled(true); }  else { contextMenu.add(0,2,2,"">> Forward"").setEnabled(false); } contextMenu.add(0,3,3,""Refresh""); contextMenu.add(0,4,4,""Open with browser""); } super.onCreateContextMenu(contextMenu,view,contextMenuInfo); } @Override public boolean onContextItemSelected(MenuItem menuItem){ switch (menuItem.getItemId()) { case 1: a(); break; case 2: this.d.goForward(); break; case 3: this.d.reload(); break; case 4: try { startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(this.d.getUrl()))); break; }  catch (Exception e) { break; } } return super.onContextItemSelected(menuItem); } protected final void a(){ this.l=this.d.getUrl(); this.d.goBack(); } public class d extends WebViewClient { private d(){ } d(AdlibWebBrowserActivity adlibWebBrowserActivity,byte b){ this(); } @Override public final boolean shouldOverrideUrlLoading(WebView webView,String str){ if (str.startsWith(""http:"") || str.startsWith(""https:"")) { if (!AdlibWebBrowserActivity.this.l.equals("""") && AdlibWebBrowserActivity.this.l.equals(str)) { AdlibWebBrowserActivity.this.l=""""; webView.goBack(); }  else { webView.loadUrl(str); } }  else { try { AdlibWebBrowserActivity.this.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str))); AdlibWebBrowserActivity.this.finish(); }  catch (Exception e) { } } return true; } @Override public final void onFormResubmission(WebView webView,Message message,Message message2){ message2.sendToTarget(); } @Override public final void onPageStarted(WebView webView,String str,Bitmap bitmap){ super.onPageStarted(webView,str,bitmap); AdlibWebBrowserActivity.this.f.setVisibility(0); } @Override public final void onPageFinished(WebView webView,String str){ super.onPageFinished(webView,str); AdlibWebBrowserActivity.this.f.setVisibility(4); } } public class a extends WebChromeClient { private a(){ } a(AdlibWebBrowserActivity adlibWebBrowserActivity,byte b){ this(); } @Override public final void onProgressChanged(WebView webView,int i){ AdlibWebBrowserActivity.this.f.setProgress(i); } } protected final int a(int i){ return (int)((i * getResources().getDisplayMetrics().density) + 0.5f); } @Override public void onBackPressed(){ if (this.d.canGoBack()) { a(); }  else { finish(); } } @Override public boolean onKeyDown(int i,KeyEvent keyEvent){ if (i == 82) { openContextMenu(this.h); } return super.onKeyDown(i,keyEvent); } public class c { public int a; public String b; public String c; c(int i,String str,String str2){ this.a=i; this.b=str; this.c=str2; } } public class AndroidBridge { private final Handler b=new Handler(); public AndroidBridge(){ } @JavascriptInterface public void close(){ this.b.post(new Runnable(){ @Override public final void run(){ AdlibWebBrowserActivity.this.finish(); } } ); } @JavascriptInterface public void back(){ this.b.post(new Runnable(){ @Override public final void run(){ if (AdlibWebBrowserActivity.this.d.canGoBack()) { AdlibWebBrowserActivity.this.a(); }  else { AdlibWebBrowserActivity.this.finish(); } } } ); } @JavascriptInterface public void loadBody(final String str){ this.b.post(new Runnable(){ @Override public final void run(){ try { AdlibWebBrowserActivity.this.d.loadUrl(str); }  catch (Exception e) { } } } ); } @JavascriptInterface public void loadHeader(final String str){ this.b.post(new Runnable(){ @Override public final void run(){ try { AdlibWebBrowserActivity.this.e.loadUrl(str); }  catch (Exception e) { } } } ); } @JavascriptInterface public void popup(final String str){ this.b.post(new Runnable(){ @Override public final void run(){ Bundle bundle=new Bundle(); bundle.putString(""id"",AdlibWebBrowserActivity.this.n); bundle.putString(HTMLElementName.PARAM,str); bundle.putInt(""type"",2); Intent intent=new Intent(AdlibWebBrowserActivity.this,(Class<?>)AdlibWebBrowserActivity.class); intent.putExtras(bundle); try { AdlibWebBrowserActivity.this.startActivity(intent); }  catch (Exception e) { } } } ); } @JavascriptInterface public void createShortcut(final String str,final String str2,final String str3){ this.b.post(new Runnable(){ @Override public final void run(){ AdlibWebBrowserActivity.this.a(str,str2,str3); } } ); } @JavascriptInterface public boolean hb(){ return true; } } public final void a(String str,String str2,String str3){ String str4; try { InputStream openStream=new URL(str2).openStream(); ArrayList arrayList=new ArrayList(); arrayList.add(new BasicNameValuePair(""key"",this.n)); arrayList.add(new BasicNameValuePair(""udid"",f.a((Context)this).a())); arrayList.add(new BasicNameValuePair(""agent"",this.k)); try { new com.mocoplex.adlib.d(new Handler(){ @Override public final void handleMessage(Message message){ try { int i=message.what; }  catch (Exception e) { } } } ).a(""http://ad.adlibr.com/smartad/rlink/shortcut.jsp"",new UrlEncodedFormEntity(arrayList,""UTF-8"")); Parcelable decodeStream=BitmapFactory.decodeStream(new b(openStream)); Intent intent=new Intent(); intent.setAction(""android.intent.action.VIEW""); intent.addCategory(""android.intent.category.BROWSABLE""); intent.setData(Uri.parse(str3)); Intent intent2=new Intent(); intent2.putExtra(""android.intent.extra.shortcut.INTENT"",intent); intent2.putExtra(""android.intent.extra.shortcut.NAME"",str); intent2.putExtra(""android.intent.extra.shortcut.ICON"",decodeStream); intent2.putExtra(""duplicate"",false); intent2.setAction(""com.android.launcher.action.INSTALL_SHORTCUT""); sendBroadcast(intent2); }  catch (Exception e) { } }  catch (Exception e2) { if (this.j.equals(""ko"")) { str4=""ì‹¤íŒ¨í–ˆìŠµë‹ˆë‹¤.""; }  else { str4=""failed""; } Toast.makeText(this,str4,0).show(); } } public static class b extends FilterInputStream { public b(InputStream inputStream){ super(inputStream); } @Override public final long skip(long j) throws IOException { long j2=0; while (j2 < j) { long skip=this.in.skip(j - j2); if (skip == 0) { if (read() < 0) { break; } skip=1; } j2=skip + j2; } return j2; } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\AndroidBridge.code","public class AndroidBridge {   private final Handler b=new Handler();   public AndroidBridge(){   }   @JavascriptInterface public void onReady(){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibDialogView.this.c.sendEmptyMessage(0);       }     } );   }   @JavascriptInterface public void showWithHeight(  final int i){     this.b.post(new Runnable(){       @Override public final void run(){         if (i > AdlibDialogView.this.h) {           AdlibDialogView.this.g=AdlibDialogView.this.h;         }  else {           AdlibDialogView.this.g=i;         }         AdlibDialogView.this.c.sendEmptyMessage(1);       }     } );   }   @JavascriptInterface public void close(){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibDialogView.this.b.sendEmptyMessage(10);       }     } );   }   @JavascriptInterface public void www(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibDialogView.this.b.sendMessage(Message.obtain(AdlibDialogView.this.b,20,str));       }     } );   }   @JavascriptInterface public void banner(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibDialogView.this.b.sendMessage(Message.obtain(AdlibDialogView.this.b,20,str));       }     } );   }   @JavascriptInterface public void go2(  final String str,  final String str2,  final String str3){     this.b.post(new Runnable(){       @Override public final void run(){         if (str != null && !str.equals("""")) {           new d(new Handler(){             @Override public final void handleMessage(            Message message){               int i=message.what;             }           } ).a(str,null);         }         if (str3.equals(""www"")) {           AdlibDialogView.this.b.sendMessage(Message.obtain(AdlibDialogView.this.b,30,str2));         }  else {           AdlibDialogView.this.b.sendMessage(Message.obtain(AdlibDialogView.this.b,20,str2));         }       }     } );   } } public class AndroidBridge {   private final Handler b=new Handler();   public AndroidBridge(){   }   @JavascriptInterface public void close(){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibWebBrowserActivity.this.finish();       }     } );   }   @JavascriptInterface public void back(){     this.b.post(new Runnable(){       @Override public final void run(){         if (AdlibWebBrowserActivity.this.d.canGoBack()) {           AdlibWebBrowserActivity.this.a();         }  else {           AdlibWebBrowserActivity.this.finish();         }       }     } );   }   @JavascriptInterface public void loadBody(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         try {           AdlibWebBrowserActivity.this.d.loadUrl(str);         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void loadHeader(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         try {           AdlibWebBrowserActivity.this.e.loadUrl(str);         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void popup(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         Bundle bundle=new Bundle();         bundle.putString(""id"",AdlibWebBrowserActivity.this.n);         bundle.putString(HTMLElementName.PARAM,str);         bundle.putInt(""type"",2);         Intent intent=new Intent(AdlibWebBrowserActivity.this,(Class<?>)AdlibWebBrowserActivity.class);         intent.putExtras(bundle);         try {           AdlibWebBrowserActivity.this.startActivity(intent);         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void createShortcut(  final String str,  final String str2,  final String str3){     this.b.post(new Runnable(){       @Override public final void run(){         AdlibWebBrowserActivity.this.a(str,str2,str3);       }     } );   }   @JavascriptInterface public boolean hb(){     return true;   } } public class AndroidBridge {   private final Handler b=new Handler();   public AndroidBridge(){   }   @JavascriptInterface public void go(  final String str){     this.b.post(new Runnable(){       @Override public final void run(){         try {           SubAdlibAdViewRewardBanner.this.getContext().startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(String.valueOf(str) + SubAdlibAdViewRewardBanner.this.e)));           SubAdlibAdViewRewardBanner.this.d.e();         }  catch (        Exception e) {         }       }     } );   }   @JavascriptInterface public void go2(  final String str,  final String str2,  final String str3){     this.b.post(new Runnable(){       @Override public final void run(){         if (str != null && !str.equals("""")) {           new d(new Handler(){             @Override public final void handleMessage(            Message message){               int i=message.what;             }           } ).a(String.valueOf(str) + SubAdlibAdViewRewardBanner.this.e,null);         }         try {           if (str3.equals(""www"")) {             Bundle bundle=new Bundle();             bundle.putString(""url"",str2);             bundle.putInt(""type"",1);             Intent intent=new Intent(SubAdlibAdViewRewardBanner.this.getContext(),(Class<?>)AdlibWebBrowserActivity.class);             intent.putExtras(bundle);             SubAdlibAdViewRewardBanner.this.getContext().startActivity(intent);           }  else {             SubAdlibAdViewRewardBanner.this.getContext().startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str2)));           }           SubAdlibAdViewRewardBanner.this.d.e();         }  catch (        Exception e) {         }       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\b.code","static class b extends HttpEntityWrapper {   public b(  HttpEntity httpEntity){     super(httpEntity);   }   @Override public final InputStream getContent() throws IOException {     return new GZIPInputStream(this.wrappedEntity.getContent());   }   @Override public final long getContentLength(){     return -1L;   } } class b extends WebViewClient {   private b(){   }   b(  AdlibDialogView adlibDialogView,  byte b){     this();   }   @Override public final boolean shouldOverrideUrlLoading(  WebView webView,  String str){     webView.loadUrl(str);     return true;   }   @Override public final void onReceivedSslError(  WebView webView,  SslErrorHandler sslErrorHandler,  SslError sslError){     sslErrorHandler.proceed();   } } public class b extends Thread {   b(){   }   @Override public final void run(){     try {       AdlibManager.this.d(""-100"");       f.a((Context)AdlibManager.this.l).a(AdlibManager.this.e);       Thread.sleep(500L);       while (!isInterrupted()) {         try {           AdlibManager.b(AdlibManager.this);           if (AdlibManager.this.i != null) {             AdlibManager.d(AdlibManager.this);           }           Thread.sleep(1000L);         }  catch (        InterruptedException e) {           interrupt();           return;         }       }     }  catch (    InterruptedException e2) {       interrupt();     }   } } public class b {   public ImageView a;   public String b;   b(  ImageView imageView,  String str){     this.a=imageView;     this.b=str;   } } public static class b extends FilterInputStream {   public b(  InputStream inputStream){     super(inputStream);   }   @Override public final long skip(  long j) throws IOException {     long j2=0;     while (j2 < j) {       long skip=this.in.skip(j - j2);       if (skip == 0) {         if (read() < 0) {           break;         }         skip=1;       }       j2=skip + j2;     }     return j2;   } } public final class b {   String a;   int b;   int c;   String d;   private boolean e;   public b(){     this.a=null;     this.b=0;     this.c=0;     this.d=null;     this.e=false;   }   public b(  String str,  int i,  int i2,  String str2){     this.a=null;     this.b=0;     this.c=0;     this.d=null;     this.e=false;     this.a=str;     this.b=i;     this.c=i2;     this.d=str2;   }   public b(  String str,  int i,  int i2,  String str2,  boolean z){     this.a=null;     this.b=0;     this.c=0;     this.d=null;     this.e=false;     this.a=str;     this.b=i;     this.c=i2;     this.d=str2;     this.e=z;   } } public static class b extends SSLSocketFactory {   SSLContext a;   private b(  KeyStore keyStore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {     super(keyStore);     this.a=SSLContext.getInstance(""TLS"");     this.a.init(null,new TrustManager[]{new X509TrustManager(){       @Override public final X509Certificate[] getAcceptedIssuers(){         return null;       }       @Override public final void checkClientTrusted(      X509Certificate[] x509CertificateArr,      String str) throws CertificateException {       }       @Override public final void checkServerTrusted(      X509Certificate[] x509CertificateArr,      String str) throws CertificateException {       }     } },null);   }   @Override public final Socket createSocket(  Socket socket,  String str,  int i,  boolean z) throws IOException, UnknownHostException {     return this.a.getSocketFactory().createSocket(socket,str,i,z);   }   @Override public final Socket createSocket() throws IOException {     return this.a.getSocketFactory().createSocket();   }   public static HttpClient a(  HttpClient httpClient){     try {       KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());       keyStore.load(null,null);       b bVar=new b(keyStore);       bVar.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);       ClientConnectionManager connectionManager=httpClient.getConnectionManager();       SchemeRegistry schemeRegistry=connectionManager.getSchemeRegistry();       schemeRegistry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80));       schemeRegistry.register(new Scheme(""https"",bVar,443));       return new DefaultHttpClient(connectionManager,httpClient.getParams());     }  catch (    Exception e) {       return new DefaultHttpClient();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\c.code","public static class c { } public class c implements Runnable {   AnimationDrawable a;   c(  AnimationDrawable animationDrawable){     this.a=animationDrawable;   }   @Override public final void run(){     this.a.start();   } } public class c {   public int a;   public String b;   public String c;   c(  int i,  String str,  String str2){     this.a=i;     this.b=str;     this.c=str2;   } } public final class c {   private static c d=null;   private Handler e=null;   boolean c=false;   Hashtable<String,ArrayList<b>> a=new Hashtable<>();   ArrayList<String> b=new ArrayList<>();   public static synchronized c a(){     c cVar; synchronized (c.class) {       if (d == null) {         d=new c();       }       cVar=d;     }     return cVar;   }   public static void b(){     d=null;   }   public final void a(  Context context){     a(context,true);   }   public final void a(  android.content.Context r12,  boolean r13){     throw new UnsupportedOperationException(""Method not decompiled: com.mocoplex.adlib.c.a(android.content.Context, boolean):void"");   }   public final boolean a(  String str){     try {       return this.b.contains(str);     }  catch (    Exception e) {       return false;     }   }   public final void b(  String str){     try {       JSONArray jSONArray=new JSONArray(str); synchronized (this.b) {         this.b.clear();         int i=0;         while (true) {           int i2=i;           if (i2 >= jSONArray.length()) {             break;           }           this.b.add((String)jSONArray.get(i2));           i=i2 + 1;         }         if (this.b.contains(""@start"") && !this.c) {           new Handler().postDelayed(new Runnable(){             @Override public final void run(){               AdlibConfig.getInstance().m();               c.this.c=true;             }           } ,500L);         }       }     }  catch (    Exception e) {     }   }   public static void a(  Context context,  String str){     int c=c(context,str);     if (c != -1) {       a(context,str,c + 1);     }   }   public static void b(  Context context,  String str){     int c=c(context,str);     if (c > 0) {       a(context,str,c - 1);     }   }   public final ArrayList<b> c(  String str){     return this.a.get(str);   }   public static int c(  Context context,  String str){     if (context != null) {       return context.getSharedPreferences(""adlibr_dlg_cnt"",0).getInt(str,-1);     }     return -1;   }   private static void a(  Context context,  String str,  int i){     if (context != null) {       SharedPreferences.Editor edit=context.getSharedPreferences(""adlibr_dlg_cnt"",0).edit();       edit.putInt(str,i);       edit.commit();     }   }   public static String d(  Context context,  String str){     if (context != null) {       return context.getSharedPreferences(""adlibr_dlg"",0).getString(str,null);     }     return null;   }   public static void a(  Context context,  String str,  String str2){     if (context != null) {       SharedPreferences.Editor edit=context.getSharedPreferences(""adlibr_dlg"",0).edit();       edit.putString(str,str2);       edit.commit();     }   }   public final void a(  Handler handler){     this.e=handler;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\d.code","class d extends TimerTask {   protected Handler a;   public d(  Handler handler){     this.a=handler;   }   @Override public final void run(){     this.a.sendMessage(Message.obtain(this.a,0,0));   } } public class d extends WebViewClient {   private d(){   }   d(  AdlibWebBrowserActivity adlibWebBrowserActivity,  byte b){     this();   }   @Override public final boolean shouldOverrideUrlLoading(  WebView webView,  String str){     if (str.startsWith(""http:"") || str.startsWith(""https:"")) {       if (!AdlibWebBrowserActivity.this.l.equals("""") && AdlibWebBrowserActivity.this.l.equals(str)) {         AdlibWebBrowserActivity.this.l="""";         webView.goBack();       }  else {         webView.loadUrl(str);       }     }  else {       try {         AdlibWebBrowserActivity.this.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str)));         AdlibWebBrowserActivity.this.finish();       }  catch (      Exception e) {       }     }     return true;   }   @Override public final void onFormResubmission(  WebView webView,  Message message,  Message message2){     message2.sendToTarget();   }   @Override public final void onPageStarted(  WebView webView,  String str,  Bitmap bitmap){     super.onPageStarted(webView,str,bitmap);     AdlibWebBrowserActivity.this.f.setVisibility(0);   }   @Override public final void onPageFinished(  WebView webView,  String str){     super.onPageFinished(webView,str);     AdlibWebBrowserActivity.this.f.setVisibility(4);   } } public final class d implements Runnable {   private String a;   private int b;   private Handler c;   private String d;   private UrlEncodedFormEntity e;   private ByteArrayEntity f;   private ArrayList g;   public d(){     this(new Handler());   }   public d(  Handler handler){     this.c=handler;   }   public final void a(  String str,  UrlEncodedFormEntity urlEncodedFormEntity){     this.b=1;     this.a=str;     this.e=urlEncodedFormEntity;     com.mocoplex.adlib.a.a().a(this);   }   public final void a(  String str,  ByteArrayEntity byteArrayEntity,  ArrayList arrayList){     this.b=1;     this.a=str;     this.f=byteArrayEntity;     this.g=arrayList;     com.mocoplex.adlib.a.a().a(this);   } static class a extends HttpEntityWrapper {     public a(    HttpEntity httpEntity){       super(httpEntity);     }     @Override public final InputStream getContent() throws IOException {       return new GZIPInputStream(this.wrappedEntity.getContent());     }     @Override public final long getContentLength(){       return -1L;     }   }   public static String b(  String str,  UrlEncodedFormEntity urlEncodedFormEntity){     HttpPost httpPost=new HttpPost(str);     httpPost.setEntity(urlEncodedFormEntity);     BasicHttpParams basicHttpParams=new BasicHttpParams();     HttpProtocolParams.setVersion(basicHttpParams,HttpVersion.HTTP_1_1);     basicHttpParams.setParameter(""http.protocol.version"",HttpVersion.HTTP_1_1);     HttpClient a2=b.a(new DefaultHttpClient(basicHttpParams));     HttpConnectionParams.setSoTimeout(a2.getParams(),3000);     ((AbstractHttpClient)a2).addRequestInterceptor(new HttpRequestInterceptor(){       @Override public final void process(      HttpRequest httpRequest,      HttpContext httpContext){         if (!httpRequest.containsHeader(""Accept-Encoding"")) {           httpRequest.addHeader(""Accept-Encoding"",""gzip"");         }       }     } );     ((AbstractHttpClient)a2).addResponseInterceptor(new HttpResponseInterceptor(){       @Override public final void process(      HttpResponse httpResponse,      HttpContext httpContext){         Header contentEncoding=httpResponse.getEntity().getContentEncoding();         if (contentEncoding != null) {           HeaderElement[] elements=contentEncoding.getElements();           for (          HeaderElement headerElement : elements) {             if (headerElement.getName().equalsIgnoreCase(""gzip"")) {               httpResponse.setEntity(new a(httpResponse.getEntity()));               return;             }           }         }       }     } );     try {       HttpResponse execute=a2.execute(httpPost);       if (execute.getStatusLine().getStatusCode() != 200) {         return null;       }       BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(execute.getEntity().getContent(),""UTF-8""));       char[] cArr=new char[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END];       StringWriter stringWriter=new StringWriter();       while (true) {         int read=bufferedReader.read(cArr);         if (read != -1) {           stringWriter.write(cArr,0,read);         }  else {           return stringWriter.toString();         }       }     }  catch (    Exception e) {       return null;     }   }   private String a(){     int i=0;     String str="""";     while (true) {       int i2=i;       if (i2 < this.g.size()) {         BasicNameValuePair basicNameValuePair=(BasicNameValuePair)this.g.get(i2);         str=String.valueOf(String.valueOf(String.valueOf(String.valueOf(str) + basicNameValuePair.getName()) + ""="") + basicNameValuePair.getValue()) + "";"";         i=i2 + 1;       }  else {         return str;       }     }   }   @Override public final void run(){     this.c.sendMessage(Message.obtain(this.c,0));     BasicHttpParams basicHttpParams=new BasicHttpParams();     HttpProtocolParams.setVersion(basicHttpParams,HttpVersion.HTTP_1_1);     basicHttpParams.setParameter(""http.protocol.version"",HttpVersion.HTTP_1_1);     HttpClient a2=b.a(new DefaultHttpClient(basicHttpParams));     ((AbstractHttpClient)a2).addRequestInterceptor(new HttpRequestInterceptor(){       @Override public final void process(      HttpRequest httpRequest,      HttpContext httpContext){         if (!httpRequest.containsHeader(""Accept-Encoding"")) {           httpRequest.addHeader(""Accept-Encoding"",""gzip"");         }       }     } );     ((AbstractHttpClient)a2).addResponseInterceptor(new HttpResponseInterceptor(){       @Override public final void process(      HttpResponse httpResponse,      HttpContext httpContext){         Header contentEncoding=httpResponse.getEntity().getContentEncoding();         if (contentEncoding != null) {           HeaderElement[] elements=contentEncoding.getElements();           for (          HeaderElement headerElement : elements) {             if (headerElement.getName().equalsIgnoreCase(""gzip"")) {               httpResponse.setEntity(new a(httpResponse.getEntity()));               return;             }           }         }       }     } );     HttpConnectionParams.setSoTimeout(a2.getParams(),3000);     HttpResponse httpResponse=null;     try { switch (this.b) { case 0:         httpResponse=a2.execute(new HttpGet(this.a));       break; case 1:     HttpPost httpPost=new HttpPost(this.a);   if (this.f != null) {     httpPost.setEntity(this.f);     httpPost.setHeader(""Content-type"",""application/octet-stream"");     httpPost.setHeader(""Cookie"",a());     httpPost.setHeader(""Content-type"",""application/octet-stream"");   }  else {     httpPost.setEntity(this.e);   } httpResponse=a2.execute(httpPost); break; case 2: HttpPut httpPut=new HttpPut(this.a); httpPut.setEntity(new StringEntity(this.d)); httpResponse=a2.execute(httpPut); break; case 3: httpResponse=a2.execute(new HttpDelete(this.a)); break; case 4: httpResponse=a2.execute(new HttpGet(this.a)); this.c.sendMessage(Message.obtain(this.c,2,BitmapFactory.decodeStream(new BufferedHttpEntity(httpResponse.getEntity()).getContent()))); break; } if (this.b < 4) { a(httpResponse); } }  catch (Exception e) { this.c.sendMessage(Message.obtain(this.c,1,e)); } com.mocoplex.adlib.a a3=com.mocoplex.adlib.a.a(); a3.a.remove(this); a3.b(); } private void a(HttpResponse httpResponse) throws IllegalStateException, IOException { BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(),""UTF-8"")); char[] cArr=new char[AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END]; StringWriter stringWriter=new StringWriter(); while (true) { int read=bufferedReader.read(cArr); if (read != -1) { stringWriter.write(cArr,0,read); }  else { this.c.sendMessage(Message.obtain(this.c,2,stringWriter.toString())); return; } } } public static class b extends SSLSocketFactory { SSLContext a; private b(KeyStore keyStore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException { super(keyStore); this.a=SSLContext.getInstance(""TLS""); this.a.init(null,new TrustManager[]{new X509TrustManager(){ @Override public final X509Certificate[] getAcceptedIssuers(){ return null; } @Override public final void checkClientTrusted(X509Certificate[] x509CertificateArr,String str) throws CertificateException { } @Override public final void checkServerTrusted(X509Certificate[] x509CertificateArr,String str) throws CertificateException { } } },null); } @Override public final Socket createSocket(Socket socket,String str,int i,boolean z) throws IOException, UnknownHostException { return this.a.getSocketFactory().createSocket(socket,str,i,z); } @Override public final Socket createSocket() throws IOException { return this.a.getSocketFactory().createSocket(); } public static HttpClient a(HttpClient httpClient){ try { KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType()); keyStore.load(null,null); b bVar=new b(keyStore); bVar.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); ClientConnectionManager connectionManager=httpClient.getConnectionManager(); SchemeRegistry schemeRegistry=connectionManager.getSchemeRegistry(); schemeRegistry.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80)); schemeRegistry.register(new Scheme(""https"",bVar,443)); return new DefaultHttpClient(connectionManager,httpClient.getParams()); }  catch (Exception e) { return new DefaultHttpClient(); } } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\e.code","public final class e {   private static e c=null;   int b=0;   ArrayList<String> a=new ArrayList<>();   public static synchronized e a(){     e eVar; synchronized (e.class) {       if (c == null) {         c=new e();       }       eVar=c;     }     return eVar;   }   public static void b(){     c=null;   }   public final void c(){     try {       JSONArray jSONArray=new JSONArray(AdlibConfig.getInstance().c(""smart""));       this.a.clear();       int i=0;       while (true) {         int i2=i;         if (i2 < jSONArray.length()) {           this.a.add((String)jSONArray.get(i2));           i=i2 + 1;         }  else {           return;         }       }     }  catch (    Exception e) {     }   }   public final int d(){     return this.a.size();   }   public final String e(){     String str;     if (this.a.size() <= 0) {       return null;     }     int i=this.b;     int i2=this.a.size() <= i ? 0 : i;     if (this.a.size() > i2) {       str=this.a.get(i2);       int i3=i2 + 1;       if (this.a.size() > i3) {         this.b=i3;       }  else {         this.b=0;       }     }  else {       this.b=0;       str=null;     }     return str;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\f.code","!org.eclipse.jdt.core.dom.TypeDeclaration@21979cec"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\g.code","public final class g {   static String a;   public static String a(  String str){     MessageDigest messageDigest=null;     try {       messageDigest=MessageDigest.getInstance(""MD5"");     }  catch (    NoSuchAlgorithmException e) {       e.printStackTrace();     }     messageDigest.update(str.getBytes(),0,str.length());     byte[] digest=messageDigest.digest();     String str2=new String();     for (    byte b : digest) {       int i=b & 255;       if (i <= 15) {         str2=String.valueOf(str2) + ""0"";       }       str2=String.valueOf(str2) + Integer.toHexString(i);     }     return str2.toUpperCase();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\SubAdlibAdViewCore.code","public abstract class SubAdlibAdViewCore extends LinearLayout {   protected Handler a;   public boolean b;   public abstract void query();   public SubAdlibAdViewCore(  Context context){     this(context,null);   }   public SubAdlibAdViewCore(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.b=false;   }   public final void a(  Handler handler){     this.a=handler;   }   public void clearAdView(){     if (this.a != null) {       this.a=null;     }   }   public void queryAd(){     if (this.a != null) {       this.a.sendMessage(Message.obtain(this.a,1));     }   }   public void gotAd(){     if (this.a != null) {       this.a.sendMessage(Message.obtain(this.a,0));     }   }   public void failed(){     if (this.a != null) {       this.a.sendMessage(Message.obtain(this.a,-1));     }   }   public void onCreate(){   }   public void onResume(){   }   public void onDestroy(){   }   public void onPause(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\SubAdlibAdViewCrossBanner.code","public class SubAdlibAdViewCrossBanner extends SubAdlibAdViewCore {   boolean c;   private WebView d;   public SubAdlibAdViewCrossBanner(  Context context){     this(context,null);   }   public SubAdlibAdViewCrossBanner(  Context context,  AttributeSet attributeSet){     super(context,attributeSet);     this.c=false;     this.d=new WebView(context);     this.d.setLayoutParams(new LinearLayout.LayoutParams(-1,(int)((50.0f * getResources().getDisplayMetrics().density) + 0.5f)));     setVerticalScrollBarEnabled(false);     setHorizontalScrollBarEnabled(false);     this.d.setScrollBarStyle(33554432);     this.d.setVerticalScrollBarEnabled(false);     this.d.setHorizontalScrollBarEnabled(false);     this.d.setOnTouchListener(new View.OnTouchListener(){       @Override public final boolean onTouch(      View view,      MotionEvent motionEvent){         return motionEvent.getAction() == 2;       }     } );     this.d.getSettings().setLoadWithOverviewMode(true);     this.d.getSettings().setUseWideViewPort(true);     this.d.getSettings().setJavaScriptEnabled(true);     this.d.addJavascriptInterface(new AdlibAndroidBridge(getContext()),""gotoAds"");     this.d.setWebViewClient(new WebViewClient(){       @Override public final void onPageFinished(      WebView webView,      String str){         super.onPageFinished(webView,str);         if (SubAdlibAdViewCrossBanner.this.c) {           SubAdlibAdViewCrossBanner.this.queryAd();           SubAdlibAdViewCrossBanner.this.gotAd();           SubAdlibAdViewCrossBanner.this.c=false;         }       }     } );     addView(this.d);     if (e.a().d() == 0) {       e.a().c();     }   }   public final void a(  String str){     if (this.d != null) {       this.d.loadUrl(""file://"" + AdlibConfig.getInstance().h(str));     }   }   @Override public void query(){     String e=e.a().e();     if (e == null) {       failed();     }  else {       this.c=true;       a(e);     }   }   @Override public void clearAdView(){     super.clearAdView();   }   @Override public void onResume(){     if (this.d != null) {       a(this.d,""onResume"");       this.d.getSettings().setJavaScriptEnabled(true);       this.d.reload();     }   }   @Override public void onPause(){     if (this.d != null) {       a(this.d,""onPause"");       this.d.getSettings().setJavaScriptEnabled(false);     }   }   @Override public void onDestroy(){     super.onDestroy();     if (this.d != null) {       removeView(this.d);       this.d.destroy();       this.d=null;     }   }   private static void a(  WebView webView,  String str){     try {       WebView.class.getMethod(str,new Class[0]).invoke(webView,new Object[0]);     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\SubAdlibAdViewMain.code","public class SubAdlibAdViewMain extends SubAdlibAdViewCore {   int c;   public boolean d;   private boolean e;   private WebView f;   public SubAdlibAdViewMain(  Context context){     this(context,false);   }   public SubAdlibAdViewMain(  Context context,  boolean z){     super(context,null);     this.e=false;     this.c=300;     this.d=false;     this.d=z;     this.f=new WebView(context);     this.f.setLayoutParams(new LinearLayout.LayoutParams(-1,(int)((50.0f * getResources().getDisplayMetrics().density) + 0.5f)));     setVerticalScrollBarEnabled(false);     setHorizontalScrollBarEnabled(false);     this.f.setScrollBarStyle(33554432);     this.f.setVerticalScrollBarEnabled(false);     this.f.setHorizontalScrollBarEnabled(false);     this.f.setOnTouchListener(new View.OnTouchListener(){       @Override public final boolean onTouch(      View view,      MotionEvent motionEvent){         return motionEvent.getAction() == 2;       }     } );     this.f.getSettings().setLoadWithOverviewMode(true);     this.f.getSettings().setUseWideViewPort(true);     this.f.getSettings().setJavaScriptEnabled(true);     this.f.addJavascriptInterface(new AdlibAndroidBridge(getContext()),""gotoAds"");     this.f.setWebViewClient(new WebViewClient(){       @Override public final void onPageFinished(      WebView webView,      String str){         super.onPageFinished(webView,str);         if (SubAdlibAdViewMain.this.getVisibility() == 4) {           SubAdlibAdViewMain.this.setVisibility(0);         }       }     } );     setVisibility(4);     addView(this.f);     if (this.d) {       if (!AdlibConfig.getInstance().c()) {         return;       }     }  else     if (!AdlibConfig.getInstance().d()) {       return;     }     a();   }   public SubAdlibAdViewMain(  Context context,  AttributeSet attributeSet){     this(context,false);   }   private void a(){     if (!this.e && this.f != null) {       this.e=true;       if (this.d) {         this.f.loadUrl(""file://"" + AdlibConfig.getInstance().f());       }  else {         this.f.loadUrl(""file://"" + AdlibConfig.getInstance().e());       }     }   }   @Override public void query(){     if (this.d) {       if (!AdlibConfig.getInstance().c()) {         failed();         return;       }     }  else     if (!AdlibConfig.getInstance().d()) {       failed();       return;     }     a();     new Handler().postDelayed(new Runnable(){       @Override public final void run(){         SubAdlibAdViewMain.this.c=0;         SubAdlibAdViewMain.this.queryAd();         SubAdlibAdViewMain.this.gotAd();       }     } ,this.c);   }   @Override public void clearAdView(){     super.clearAdView();   }   @Override public void onResume(){     if (this.f != null) {       a(this.f,""onResume"");       this.f.getSettings().setJavaScriptEnabled(true);       this.f.reload();     }   }   @Override public void onPause(){     if (this.f != null) {       a(this.f,""onPause"");       this.f.getSettings().setJavaScriptEnabled(false);     }   }   @Override public void onDestroy(){     super.onDestroy();     if (this.f != null) {       removeView(this.f);       this.f.destroy();       this.f=null;     }   }   private static void a(  WebView webView,  String str){     try {       WebView.class.getMethod(str,new Class[0]).invoke(webView,new Object[0]);     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.mocoplex.adlib\SubAdlibAdViewRewardBanner.code","public class SubAdlibAdViewRewardBanner extends SubAdlibAdViewCore {   private static String s=""http://ad.adlibr.com/smartad/req_rb2.jsp"";   int c;   AdlibManager d;   String e;   String f;   boolean g;   boolean h;   String i;   String j;   String k;   Location l;   String m;   String n;   boolean o;   String p;   private WebView q;   private ArrayList<WebView> r; public class AndroidBridge {     private final Handler b=new Handler();     public AndroidBridge(){     }     @JavascriptInterface public void go(    final String str){       this.b.post(new Runnable(){         @Override public final void run(){           try {             SubAdlibAdViewRewardBanner.this.getContext().startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(String.valueOf(str) + SubAdlibAdViewRewardBanner.this.e)));             SubAdlibAdViewRewardBanner.this.d.e();           }  catch (          Exception e) {           }         }       } );     }     @JavascriptInterface public void go2(    final String str,    final String str2,    final String str3){       this.b.post(new Runnable(){         @Override public final void run(){           if (str != null && !str.equals("""")) {             new d(new Handler(){               @Override public final void handleMessage(              Message message){                 int i=message.what;               }             } ).a(String.valueOf(str) + SubAdlibAdViewRewardBanner.this.e,null);           }           try {             if (str3.equals(""www"")) {               Bundle bundle=new Bundle();               bundle.putString(""url"",str2);               bundle.putInt(""type"",1);               Intent intent=new Intent(SubAdlibAdViewRewardBanner.this.getContext(),(Class<?>)AdlibWebBrowserActivity.class);               intent.putExtras(bundle);               SubAdlibAdViewRewardBanner.this.getContext().startActivity(intent);             }  else {               SubAdlibAdViewRewardBanner.this.getContext().startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str2)));             }             SubAdlibAdViewRewardBanner.this.d.e();           }  catch (          Exception e) {           }         }       } );     }   }   public SubAdlibAdViewRewardBanner(  Context context,  AdlibManager adlibManager){     this(context,adlibManager,(byte)0);   }   private SubAdlibAdViewRewardBanner(  Context context,  AdlibManager adlibManager,  byte b){     super(context,null);     this.r=new ArrayList<>();     this.c=0;     this.e="""";     this.f="""";     this.g=false;     this.h=false;     this.p=null;     this.d=adlibManager;     setVerticalScrollBarEnabled(false);     setHorizontalScrollBarEnabled(false);     this.i=AdlibConfig.getInstance().c(""api"");     this.j=getContext().getResources().getConfiguration().locale.getLanguage();     this.k=f.a(getContext()).a();     this.o=AdlibConfig.getInstance().l();     if (this.o) {       d();     }     String networkOperatorName=((TelephonyManager)getContext().getSystemService(""phone"")).getNetworkOperatorName();     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""os"",Build.VERSION.RELEASE);       jSONObject.put(""tm"",networkOperatorName);       jSONObject.put(""device"",Build.MODEL);       AdlibConfig.getInstance();       jSONObject.put(""ver"",AdlibConfig.i());       this.f=jSONObject.toString();     }  catch (    Exception e) {     }   }   protected final void a(){     this.q=new WebView(getContext());     this.q.setLayoutParams(new LinearLayout.LayoutParams(-1,(int)((50.0f * getResources().getDisplayMetrics().density) + 0.5f)));     this.q.setScrollBarStyle(33554432);     this.q.setVerticalScrollBarEnabled(false);     this.q.setHorizontalScrollBarEnabled(false);     this.q.setOnTouchListener(new View.OnTouchListener(){       @Override public final boolean onTouch(      View view,      MotionEvent motionEvent){         return motionEvent.getAction() == 2;       }     } );     this.q.getSettings().setLoadWithOverviewMode(true);     this.q.getSettings().setUseWideViewPort(true);     this.q.getSettings().setJavaScriptEnabled(true);     this.q.addJavascriptInterface(new AndroidBridge(),""gotoAds"");     this.q.setWebViewClient(new WebViewClient(){       @Override public final void onPageFinished(      WebView webView,      String str){         super.onPageFinished(webView,str);         if (SubAdlibAdViewRewardBanner.this.g) {           SubAdlibAdViewRewardBanner.this.b();         }       }     } );     this.q.setVisibility(4);     this.p=this.q.getSettings().getUserAgentString();     this.r.add(this.q);   }   public final void a(  String str){     this.h=false;     if (this.q != null) {       this.q.loadUrl(""file://"" + AdlibConfig.getInstance().h(str));     }   }   public final void b(  String str){     this.h=false;     if (this.q != null) {       this.q.loadUrl(str);     }   }   @Override public void query(){     if (!this.h) {       if (this.i.equals("""")) {         failed();         return;       }       if (this.p == null) {         WebView webView=new WebView(getContext());         this.p=webView.getSettings().getUserAgentString();         webView.destroy();       }       ArrayList arrayList=new ArrayList();       arrayList.add(new BasicNameValuePair(""key"",this.i));       arrayList.add(new BasicNameValuePair(""cc"",this.j));       arrayList.add(new BasicNameValuePair(""udid"",this.k));       arrayList.add(new BasicNameValuePair(""ext"",this.f));       arrayList.add(new BasicNameValuePair(""agent"",this.p));       arrayList.add(new BasicNameValuePair(""ver"",""2""));       if (this.o) {         if (this.l == null) {           d();         }         if (this.l != null) {           arrayList.add(new BasicNameValuePair(""lat"",this.m));           arrayList.add(new BasicNameValuePair(""lon"",this.n));         }       }       try {         UrlEncodedFormEntity urlEncodedFormEntity=new UrlEncodedFormEntity(arrayList,""UTF-8"");         Handler handler=new Handler(){           @Override public final void handleMessage(          Message message){             try { switch (message.what) { case 1:                 SubAdlibAdViewRewardBanner.this.failed();               break; case 2:             String str=(String)message.obj;           SubAdlibAdViewRewardBanner.this.h=true;         SubAdlibAdViewRewardBanner.this.c(str);       break;   } }  catch (Exception e) { } } } ; queryAd(); new d(handler).a(s,urlEncodedFormEntity); }  catch (Exception e) { } } } protected final void c(final String str){ final Handler handler=new Handler(){ @Override public final void handleMessage(Message message){ try { switch (message.what) { case -1: SubAdlibAdViewRewardBanner.this.failed(); break; case 1: SubAdlibAdViewRewardBanner.this.c(); SubAdlibAdViewRewardBanner.this.a(); SubAdlibAdViewRewardBanner.this.addView(SubAdlibAdViewRewardBanner.this.q); String str2=(String)message.obj; SubAdlibAdViewRewardBanner.this.g=true; SubAdlibAdViewRewardBanner.this.a(str2); break; case 2: SubAdlibAdViewRewardBanner.this.c(); SubAdlibAdViewRewardBanner.this.a(); SubAdlibAdViewRewardBanner.this.addView(SubAdlibAdViewRewardBanner.this.q); String str3=(String)message.obj; SubAdlibAdViewRewardBanner.this.g=true; SubAdlibAdViewRewardBanner.this.b(str3); break; } }  catch (Exception e) { } } } ; new Thread(new Runnable(){ @Override public final void run(){ new JSONObject(); try { JSONObject jSONObject=new JSONObject(str); String string=jSONObject.getString(""res""); SubAdlibAdViewRewardBanner.this.d.b(jSONObject.getInt(""rp2"")); if (string.equals(""-1"")) { handler.sendEmptyMessage(-1); return; } String str2=(String)jSONObject.get(""bid""); String str3=(String)jSONObject.get(""cache""); String str4=(String)jSONObject.get(""url""); SubAdlibAdViewRewardBanner.this.c=jSONObject.getInt(""vs""); SubAdlibAdViewRewardBanner.this.e=jSONObject.getString(HTMLElementName.PARAM); SubAdlibAdViewRewardBanner subAdlibAdViewRewardBanner=SubAdlibAdViewRewardBanner.this; subAdlibAdViewRewardBanner.e=String.valueOf(subAdlibAdViewRewardBanner.e) + ""&ext="" + URLEncoder.encode(SubAdlibAdViewRewardBanner.this.f,""utf-8""); if (str3.equals(""Y"")) { if (!AdlibConfig.getInstance().g(str2)) { AdlibConfig.getInstance().b(str4,str2); } if (AdlibConfig.getInstance().g(str2)) { handler.sendMessage(Message.obtain(handler,1,str2)); return; }  else { handler.sendEmptyMessage(-1); return; } } if (str4 == null) { handler.sendEmptyMessage(-1); return; } if (str4.indexOf(""?"") < 0) { str4=String.valueOf(str4) + ""?""; } handler.sendMessage(Message.obtain(handler,2,String.valueOf(str4) + SubAdlibAdViewRewardBanner.this.e)); }  catch (Exception e) { handler.sendEmptyMessage(-1); } } } ).start(); } protected final void b(){ this.g=false; this.d.a(this.c); this.c=0; this.q.setVisibility(0); gotAd(); } @Override public void failed(){ this.h=false; super.failed(); } protected final void c(){ while (this.r.size() > 0) { WebView webView=this.r.get(0); removeView(webView); try { webView.setWebViewClient(null); webView.removeAllViews(); webView.destroy(); }  catch (Exception e) { } this.r.remove(0); } } @Override public void clearAdView(){ c(); super.clearAdView(); } @Override public void onResume(){ } @Override public void onPause(){ } @Override public void onDestroy(){ super.onDestroy(); c(); } private void d(){ this.l=AdlibConfig.getInstance().j(); this.o=AdlibConfig.getInstance().l(); if (this.l != null) { String d=Double.valueOf(this.l.getLatitude()).toString(); String d2=Double.valueOf(this.l.getLongitude()).toString(); try { this.m=new String(a(d.getBytes(""UTF-8""))); this.n=new String(a(d2.getBytes(""UTF-8""))); }  catch (UnsupportedEncodingException e) { } } } private static byte[] a(byte[] bArr){ try { Class<?> cls=Class.forName(""org.apache.commons.codec.binary.Base64""); return (byte[])cls.getMethod(""encodeBase64"",byte[].class).invoke(cls,bArr); }  catch (Exception e) { e.printStackTrace(); return null; } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\AccelerationListener.code","private class AccelerationListener implements SensorEventListener {   private AccelerationListener(){   }   AccelerationListener(  TriDContentsView triDContentsView,  AccelerationListener accelerationListener){     this();   }   @Override public void onSensorChanged(  SensorEvent event){     long curTime=System.currentTimeMillis();     if (curTime - TriDContentsView.this.lastUpdateForAccelerationSensor > TriDContentsView.SENSOR_CHECK_TIME) {       TriDContentsView.this.lastUpdateForAccelerationSensor=curTime;       float x=event.values[0];       float y=event.values[1];       float z=event.values[2];       if (Math.abs(TriDContentsView.this.accelerationX - x) >= TriDContentsView.SENSOR_THRESHOLD || Math.abs(TriDContentsView.this.accelerationY - y) >= TriDContentsView.SENSOR_THRESHOLD || Math.abs(TriDContentsView.this.accelerationZ - z) >= TriDContentsView.SENSOR_THRESHOLD) {         TriDContentsView.this.accelerationX=x;         TriDContentsView.this.accelerationY=y;         TriDContentsView.this.accelerationZ=z;         String msgData=String.valueOf(Float.toString(x / TriDContentsView.GRAVITY)) + "" "" + Float.toString(y / TriDContentsView.GRAVITY)+ "" ""+ Float.toString(z / TriDContentsView.GRAVITY);         TriDContentsView.this.notify(TriDBrowser.ACCELERATION_MSGTYPE,msgData);       }     }   }   @Override public void onAccuracyChanged(  Sensor sensor,  int accuracy){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\ConfigChooser.code","public static class ConfigChooser implements GLSurfaceView.EGLConfigChooser {   private static int EGL_OPENGL_ES2_BIT=4;   private static int[] s_configAttribs2={12324,4,12323,4,12322,4,12352,EGL_OPENGL_ES2_BIT,12344};   protected int mAlphaSize;   protected int mBlueSize;   protected int mDepthSize;   protected int mGreenSize;   protected int mRedSize;   protected int mStencilSize;   private int[] mValue=new int[1];   public ConfigChooser(  int r,  int g,  int b,  int a,  int depth,  int stencil){     this.mRedSize=r;     this.mGreenSize=g;     this.mBlueSize=b;     this.mAlphaSize=a;     this.mDepthSize=depth;     this.mStencilSize=stencil;   }   @Override public EGLConfig chooseConfig(  EGL10 egl,  EGLDisplay display){     int[] num_config=new int[1];     egl.eglChooseConfig(display,s_configAttribs2,null,0,num_config);     int numConfigs=num_config[0];     if (numConfigs <= 0) {       Log.d(""error"",""chooseConfig - No configs match configSpec"");       return null;     }     EGLConfig[] configs=new EGLConfig[numConfigs];     egl.eglChooseConfig(display,s_configAttribs2,configs,numConfigs,num_config);     return chooseConfig(egl,display,configs);   }   public EGLConfig chooseConfig(  EGL10 egl,  EGLDisplay display,  EGLConfig[] configs){     EGLConfig selectedConfig=null;     int selectedDepthSize=0;     int length=configs.length;     int i=0;     while (true) {       int i2=i;       if (i2 < length) {         EGLConfig config=configs[i2];         int d=findConfigAttrib(egl,display,config,12325,0);         int s=findConfigAttrib(egl,display,config,12326,0);         if (d >= this.mDepthSize && s >= this.mStencilSize) {           int r=findConfigAttrib(egl,display,config,12324,0);           int g=findConfigAttrib(egl,display,config,12323,0);           int b=findConfigAttrib(egl,display,config,12322,0);           int a=findConfigAttrib(egl,display,config,12321,0);           int sampling=findConfigAttrib(egl,display,config,12338,0);           if (r == this.mRedSize && g == this.mGreenSize && b == this.mBlueSize && a == this.mAlphaSize) {             if (d >= 24 && sampling >= 1) {               Log.d(""log"",""chooseConfig - selected sampling size = "" + sampling + "", d=""+ d);               return config;             }             if (selectedDepthSize < d) {               selectedDepthSize=d;               selectedConfig=config;               Log.d(""log"",""chooseConfig - selected depth size = "" + d);             }           }         }         i=i2 + 1;       }  else {         if (selectedConfig == null) {           Log.d(""error"",""chooseConfig - nothing."");         }         return selectedConfig;       }     }   }   private int findConfigAttrib(  EGL10 egl,  EGLDisplay display,  EGLConfig config,  int attribute,  int defaultValue){     if (egl.eglGetConfigAttrib(display,config,attribute,this.mValue)) {       int defaultValue2=this.mValue[0];       return defaultValue2;     }     return defaultValue;   }   private void printConfigs(  EGL10 egl,  EGLDisplay display,  EGLConfig[] configs){     int numConfigs=configs.length;     Log.w(TriDContentsView.TAG,String.format(""%d configurations"",Integer.valueOf(numConfigs)));     for (int i=0; i < numConfigs; i++) {       Log.w(TriDContentsView.TAG,String.format(""Configuration %d:\n"",Integer.valueOf(i)));       printConfig(egl,display,configs[i]);     }   }   private void printConfig(  EGL10 egl,  EGLDisplay display,  EGLConfig config){     int[] attributes={12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12343,12342,12341,12345,12346,12347,12348,12349,12350,12351,12352,12354};     String[] names={""EGL_BUFFER_SIZE"",""EGL_ALPHA_SIZE"",""EGL_BLUE_SIZE"",""EGL_GREEN_SIZE"",""EGL_RED_SIZE"",""EGL_DEPTH_SIZE"",""EGL_STENCIL_SIZE"",""EGL_CONFIG_CAVEAT"",""EGL_CONFIG_ID"",""EGL_LEVEL"",""EGL_MAX_PBUFFER_HEIGHT"",""EGL_MAX_PBUFFER_PIXELS"",""EGL_MAX_PBUFFER_WIDTH"",""EGL_NATIVE_RENDERABLE"",""EGL_NATIVE_VISUAL_ID"",""EGL_NATIVE_VISUAL_TYPE"",""EGL_PRESERVED_RESOURCES"",""EGL_SAMPLES"",""EGL_SAMPLE_BUFFERS"",""EGL_SURFACE_TYPE"",""EGL_TRANSPARENT_TYPE"",""EGL_TRANSPARENT_RED_VALUE"",""EGL_TRANSPARENT_GREEN_VALUE"",""EGL_TRANSPARENT_BLUE_VALUE"",""EGL_BIND_TO_TEXTURE_RGB"",""EGL_BIND_TO_TEXTURE_RGBA"",""EGL_MIN_SWAP_INTERVAL"",""EGL_MAX_SWAP_INTERVAL"",""EGL_LUMINANCE_SIZE"",""EGL_ALPHA_MASK_SIZE"",""EGL_COLOR_BUFFER_TYPE"",""EGL_RENDERABLE_TYPE"",""EGL_CONFORMANT""};     int[] value=new int[1];     for (int i=0; i < attributes.length; i++) {       int attribute=attributes[i];       String name=names[i];       if (egl.eglGetConfigAttrib(display,config,attribute,value)) {         Log.w(TriDContentsView.TAG,String.format(""  %s: %d\n"",name,Integer.valueOf(value[0])));       }       do {       }  while (egl.eglGetError() != 12288);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\ContextFactory.code","public static class ContextFactory implements GLSurfaceView.EGLContextFactory {   private static int EGL_CONTEXT_CLIENT_VERSION=12440;   private TriDBrowser engineAPI;   public ContextFactory(  TriDBrowser api){     this.engineAPI=api;   }   @Override public EGLContext createContext(  EGL10 egl,  EGLDisplay display,  EGLConfig eglConfig){     Log.w(TriDContentsView.TAG,""creating OpenGL ES 2.0 context"");     TriDContentsView.checkEglError(""Before eglCreateContext"",egl);     int[] attrib_list={EGL_CONTEXT_CLIENT_VERSION,2,12344};     EGLContext context=egl.eglCreateContext(display,eglConfig,EGL10.EGL_NO_CONTEXT,attrib_list);     TriDContentsView.checkEglError(""After eglCreateContext"",egl);     this.engineAPI.initFordeviceLost();     return context;   }   @Override public void destroyContext(  EGL10 egl,  EGLDisplay display,  EGLContext context){     Log.w(TriDContentsView.TAG,""destroyContext"");     this.engineAPI.deviceLost();     egl.eglDestroyContext(display,context);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\NotifyData.code","public class NotifyData {   public String msgData;   public String msgType;   public NotifyData(  String t,  String d){     this.msgType=t;     this.msgData=d;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\OnNotifyListener.code","public interface OnNotifyListener {   int onNotify(  String str,  String str2); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\Renderer.code","public static class Renderer implements GLSurfaceView.Renderer {   private TriDBrowser engineAPI;   private Vector<TouchData> touchDataList=new Vector<>();   public Renderer(  TriDBrowser api){     this.engineAPI=api;   }   @Override public void onDrawFrame(  GL10 gl){     try {       this.engineAPI.draw();       runTouchData();     }  catch (    StackOverflowError soe) {       Log.e(""error"",""Renderer - error on onDrawFrame [2]."" + soe);     } catch (    Error err) {       Log.e(""error"",""Renderer - error on onDrawFrame [3]."" + err);     } catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""Renderer - error on onDrawFrame [1]."");     } catch (    Throwable th) {       Log.e(""error"",""Renderer - error on onDrawFrame [4]."");     }   }   @Override public void onSurfaceChanged(  GL10 gl,  int width,  int height){     try {       this.engineAPI.setViewSize(width,height);     }  catch (    StackOverflowError soe) {       Log.e(""error"",""Renderer - error on onSurfaceChanged [2]."" + soe);     } catch (    Error err) {       Log.e(""error"",""Renderer - error on onSurfaceChanged [3]."" + err);     } catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""Renderer - error on onSurfaceChanged [1]."");     } catch (    Throwable th) {       Log.e(""error"",""Renderer - error on onSurfaceChanged [4]."");     }   }   @Override public void onSurfaceCreated(  GL10 gl,  EGLConfig config){   }   private void runTouchData(){     Vector<TouchData> copiedTouchDataList=new Vector<>(); synchronized (this.touchDataList) {       Iterator<TouchData> iter=this.touchDataList.iterator();       while (iter.hasNext()) {         TouchData d=iter.next();         copiedTouchDataList.add(new TouchData(d));       }       this.touchDataList.clear();     }     Iterator<TouchData> iter2=copiedTouchDataList.iterator();     while (iter2.hasNext()) {       TouchData d2=iter2.next();       d2.sendMessage(this.engineAPI);     }     copiedTouchDataList.clear();   }   public static boolean isMovingMsg(  int msg){     if (msg == 512 || msg == TriDContentsView.WM_USER_TOUCHES_MOVED) {       return true;     }     return TriDContentsView.DEBUG;   }   public void insertTouchData(  int msg,  long w,  long l){ synchronized (this.touchDataList) {       TouchData newData=new TouchData(msg,w,l);       if (isMovingMsg(msg)) {         int total=this.touchDataList.size();         int i=total - 1;         while (true) {           if (i < 0) {             break;           }           TouchData td=this.touchDataList.get(i);           if (!td.isMovingMsg()) {             break;           }           if (!td.canReplaceWith(newData)) {             i--;           }  else {             this.touchDataList.remove(i);             break;           }         }       }       this.touchDataList.add(newData);     }   } public class TouchData {     private long lParam;     private int msgType;     private long wParam;     public TouchData(    int msg,    long w,    long l){       this.msgType=msg;       this.wParam=w;       this.lParam=l;     }     public TouchData(    TouchData d){       this.msgType=d.msgType;       this.wParam=d.wParam;       this.lParam=d.lParam;     }     public void sendMessage(    TriDBrowser engineAPI){       engineAPI.sendTouchMessage(this.msgType,this.wParam,this.lParam);     }     public boolean canReplaceWith(    TouchData d){       if (d.msgType != this.msgType) {         return TriDContentsView.DEBUG;       }       if (this.msgType == 512) {         return true;       }       if (this.msgType == TriDContentsView.WM_USER_TOUCHES_MOVED && d.wParam == this.wParam) {         return true;       }       return TriDContentsView.DEBUG;     }     public boolean isMovingMsg(){       return Renderer.isMovingMsg(this.msgType);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\TouchData.code","public class TouchData {   private long lParam;   private int msgType;   private long wParam;   public TouchData(  int msg,  long w,  long l){     this.msgType=msg;     this.wParam=w;     this.lParam=l;   }   public TouchData(  TouchData d){     this.msgType=d.msgType;     this.wParam=d.wParam;     this.lParam=d.lParam;   }   public void sendMessage(  TriDBrowser engineAPI){     engineAPI.sendTouchMessage(this.msgType,this.wParam,this.lParam);   }   public boolean canReplaceWith(  TouchData d){     if (d.msgType != this.msgType) {       return TriDContentsView.DEBUG;     }     if (this.msgType == 512) {       return true;     }     if (this.msgType == TriDContentsView.WM_USER_TOUCHES_MOVED && d.wParam == this.wParam) {       return true;     }     return TriDContentsView.DEBUG;   }   public boolean isMovingMsg(){     return Renderer.isMovingMsg(this.msgType);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\TriDBrowser.code","public class TriDBrowser {   public static final String ACCELERATION_MSGTYPE=""_SENSOR_ACCELERATION"";   private static final int BACKGROUND_MUSIC_ID=0;   private static final int BUFFER=102400;   private static final String CHECKHITTEST_MSGTYPE=""_CHECK_HIT_TEST"";   private static final String GOTOBACKGROUND_MSGTYPE=""_GO_TO_BACKGROUND"";   private static final String GOTOURL_MSGTYPE=""_GO_TO_URL"";   public static final String HIDEKEYBOARD_MSGTYPE=""_HIDE_KEYBOARD"";   public static final String IME_MSGTYPE=""_SET_IME_COMPOSITION"";   private static final int INFO_ACCOUNT=1;   private static final int INFO_SYSTEM=0;   private static final String LOADING_GUI_FILE=""tridadloadingui.lua"";   public static final String ORIENTATION_MSGTYPE=""_SENSOR_ORIENTATION"";   private static final String SETLOADINGGUIFILE_MSGTYPE=""_SET_LOADING_GUI_FILE"";   private static final String SETWAITSCRIPT_MSGTYPE=""_SET_WAIT_SCRIPT"";   public static final String SHOWKEYBOARD_MSGTYPE=""_SHOW_KEYBOARD"";   private static final String SHOWWEB_MSGTYPE=""_SHOW_WEB_"";   private String argument;   private Context context;   private Vector<NotifyData> delayedNotifyVector;   private String externalPath;   private HashMap<Integer,Rect> guiRectsForHitTest;   private boolean initForDeviceLost;   private long interfacePointer;   private int lastSoundID;   private OnNotifyListener notifyListener;   private String path;   private HashMap<Integer,Integer> pausedSoundMap;   private HashMap<Integer,MediaPlayer> soundMap;   private String startPage;   private Bitmap tempBitmap;   private Bitmap textBitmap;   private Canvas textCanvas;   private Paint textPaint;   private boolean showLog=false;   private boolean checkHitTest=false;   private boolean nowFinishing=false;   private long createdThreadID=-1;   public static native int getVersion();   private native long init(  String str,  String str2,  int i,  int i2,  String str3,  String str4);   private native int notify(  long j,  String str,  String str2);   private native void run(  long j);   private native void setSize(  long j,  int i,  int i2);   private native void touchMessage(  long j,  int i,  long j2,  long j3);   private native void uninit(  long j);   public TriDBrowser(  Context con,  String assetPackageName,  String strStartPage,  String strArgument,  OnNotifyListener listener,  String enginePath,  boolean useExternalPath,  boolean loadDirectly){     this.notifyListener=null;     Log.d(""log"",""TriDBrowser - creating."");     if (loadDirectly) {       try {         Log.d(""log"",""TriDBrowser - loading engine directly."");         System.loadLibrary(""tridad"");       }  catch (      StackOverflowError soe) {         Log.e(""error"",""TriDBrowser - can not load engine [2]."" + soe);         return;       } catch (      Error err) {         Log.e(""error"",""TriDBrowser - can not load engine [3]."" + err);         return;       } catch (      Exception e) {         e.printStackTrace();         Log.e(""error"",""TriDBrowser - can not load engine [1]."");         return;       } catch (      Throwable th) {         Log.e(""error"",""TriDBrowser - can not load engine [4]."");         return;       }     }     boolean hasAsset=(assetPackageName == null || assetPackageName == """") ? false : true;     boolean noStartPage=strStartPage == null || strStartPage == """";     if (noStartPage) {       Log.d(""error"",""TriDBrowser - no strStartPage."");     }     this.argument=strArgument;     if (this.argument == null) {       this.argument="""";     }     this.notifyListener=listener;     this.interfacePointer=0L;     this.textPaint=new Paint();     this.soundMap=new HashMap<>();     this.pausedSoundMap=new HashMap<>();     this.delayedNotifyVector=new Vector<>();     this.guiRectsForHitTest=new HashMap<>();     this.lastSoundID=0;     initPath(con,enginePath,useExternalPath);     this.startPage="""";     if (!noStartPage) {       if (hasAsset) {         this.startPage=String.valueOf(this.path) + ""/"" + assetPackageName+ ""/""+ strStartPage;       }  else {         this.startPage=strStartPage;       }     }     this.context=con;     this.initForDeviceLost=false;     copyCommonResource(""tridadcauly.lua"",""tridadcauly.lua"");     copyCommonResource(LOADING_GUI_FILE,LOADING_GUI_FILE);     copyCommonResource(""logo_total0.png"",""logo_total0.png"");     if (loadDirectly) {       copyCommonResource(""tridcommon.lua"",""_TriDCommon.lua"");       copyCommonResource(""triddynamicdata.lua"",""_TriDDynamicData.lua"");       copyCommonResource(""tridstartup.lua"",""_TriDStartup.lua"");       copyCommonResource(""json.lua"",""json.lua"");     }     if (hasAsset) {       unzipCommonResources(assetPackageName);     }   }   public void setViewSize(  int width,  int height){     if (this.startPage != null) {       this.createdThreadID=Thread.currentThread().getId();       if (this.interfacePointer == 0) {         this.interfacePointer=init(this.path,this.externalPath,width,height,"""","""");         notifyMessage(SETWAITSCRIPT_MSGTYPE,String.valueOf(this.path) + ""/tridadloadingui.lua"");         if (!this.startPage.equals("""")) {           goToApp(this.startPage,this.argument);           return;         }         return;       }       initFordeviceLostBody();       setSize(this.interfacePointer,width,height);     }   }   public void deviceLost(){     if (this.interfacePointer != 0) {       if (this.showLog) {         Log.d(""log"",""deviceLost"");       }       notifyMessage(""_DEVICE_LOST"",""true"");     }   }   public void initFordeviceLost(){     if (this.interfacePointer != 0) {       this.initForDeviceLost=true;     }   }   public void pause(  boolean pause){     if (this.interfacePointer != 0) {       if (pause) {         pauseAllSounds();         notifyMessage(GOTOBACKGROUND_MSGTYPE,""true"");       }  else {         resumeAllSounds();         notifyMessage(GOTOBACKGROUND_MSGTYPE,""false"");       }     }   }   public void goToApp(  String appURL,  String argument){     String str=appURL;     if (argument != null && !argument.equals("""")) {       str=""\"""" + appURL + ""\"" ""+ argument;     }     notifyMessage(GOTOURL_MSGTYPE,str);     notifyMessage(SETLOADINGGUIFILE_MSGTYPE,String.valueOf(this.path) + ""/"" + LOADING_GUI_FILE);   }   public void draw(){     if (this.createdThreadID != Thread.currentThread().getId()) {       Log.d(""error"",""TriDBrowser.draw - can not run in other thread."");     }     processNotifyMessages();     run(this.interfacePointer);   }   public void sendTouchMessage(  int wndMsg,  long wParam,  long lParam){     if (this.createdThreadID != Thread.currentThread().getId()) {       Log.d(""error"",""TriDBrowser.sendTouchMessage - can not run in other thread."");     }     touchMessage(this.interfacePointer,wndMsg,wParam,lParam);   }   public int notifyMessage(  String msgType,  String msg){     if (this.createdThreadID != Thread.currentThread().getId()) {       NotifyData newData=new NotifyData(msgType,msg); synchronized (this.delayedNotifyVector) {         this.delayedNotifyVector.add(newData);       }       return 0;     }     return notify(this.interfacePointer,msgType,msg);   }   private void processNotifyMessages(){ synchronized (this.delayedNotifyVector) {       if (this.delayedNotifyVector.size() != 0) {         Vector<NotifyData> copiedDataList=new Vector<>(); synchronized (this.delayedNotifyVector) {           Iterator<NotifyData> iter=this.delayedNotifyVector.iterator();           while (iter.hasNext()) {             NotifyData d=iter.next();             copiedDataList.add(new NotifyData(d.msgType,d.msgData));           }           this.delayedNotifyVector.clear();         }         Iterator<NotifyData> iter2=copiedDataList.iterator();         while (iter2.hasNext()) {           NotifyData d2=iter2.next();           notifyMessage(d2.msgType,d2.msgData);         }         copiedDataList.clear();       }     }   }   protected void finalize() throws Throwable {     Log.d(""TriDBrowser"",""TriDBrowser - finalize start. "" + this);     this.nowFinishing=true;     uninit(this.interfacePointer);     Log.d(""TriDBrowser"",""TriDBrowser - finalize ok. "" + this);     super.finalize();   }   private void initPath(  Context context,  String enginePath,  boolean useExternalPath){     this.path=enginePath;     String name=context.getPackageName();     if (useExternalPath) {       File extSt=Environment.getExternalStorageDirectory();       this.externalPath=String.valueOf(extSt.getAbsolutePath()) + ""/"" + name+ ""/resource/"";     }  else {       this.externalPath=String.valueOf(context.getFilesDir().getAbsolutePath()) + ""/resource/"";     }     File f=new File(this.externalPath);     f.mkdirs();   }   private void initFordeviceLostBody(){     if (this.initForDeviceLost) {       if (this.showLog) {         Log.d(""initFordeviceLostBody"",""initFordeviceLostBody"");       }       this.initForDeviceLost=false;       notifyMessage(""_DEVICE_LOST"",""false"");     }   }   private void copyCommonResource(  String fileName,  String targetName){     try {       AssetManager am=this.context.getAssets();       InputStream is=am.open(fileName);       BufferedInputStream bis=new BufferedInputStream(is,BUFFER);       String location=String.valueOf(this.path) + ""/"";       byte[] data=new byte[BUFFER];       FileOutputStream fos=new FileOutputStream(String.valueOf(location) + targetName);       BufferedOutputStream dest=new BufferedOutputStream(fos,BUFFER);       while (true) {         int count=bis.read(data,0,BUFFER);         if (count != -1) {           dest.write(data,0,count);         }  else {           dest.flush();           dest.close();           return;         }       }     }  catch (    Exception e) {       e.printStackTrace();       Log.d(""error"",""can not copy common files."");     }   }   private void unzipCommonResources(  String assetPackageName){     try {       AssetManager am=this.context.getAssets();       InputStream is=am.open(assetPackageName);       unzipFile(is,this.path,assetPackageName);     }  catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""unzipCommonResources - can not unzip common files."");     }   }   public static boolean unzipFile(  java.io.InputStream r15,  java.lang.String r16,  java.lang.String r17){     throw new UnsupportedOperationException(""Method not decompiled: com.trid.tridad.TriDBrowser.unzipFile(java.io.InputStream, java.lang.String, java.lang.String):boolean"");   }   public void setFont(  String fontName,  int fontSize,  int fontStyle){     Typeface newFont;     if (fontName.equalsIgnoreCase(""sans"")) {       newFont=Typeface.create(Typeface.SANS_SERIF,fontStyle);     }  else     if (fontName.equalsIgnoreCase(""serif"")) {       newFont=Typeface.create(Typeface.SERIF,fontStyle);     }  else     if (fontName.equalsIgnoreCase(""monospace"")) {       newFont=Typeface.create(Typeface.MONOSPACE,fontStyle);     }  else {       newFont=Typeface.create(Typeface.SANS_SERIF,fontStyle);     }     this.textPaint.setTypeface(newFont);     this.textPaint.setTextSize(fontSize);     this.textPaint.setAntiAlias(true);     this.textPaint.setTextAlign(Paint.Align.LEFT);   }   public void getStringSize(  String text,  int[] size){     Rect rect=new Rect();     this.textPaint.getTextBounds(text,0,text.length(),rect);     float width=this.textPaint.measureText(text);     size[0]=(int)width;     size[1]=(int)FloatMath.ceil(this.textPaint.getFontSpacing() + 2.0f);   }   public void createTextBitmap(  int w,  int h){     this.textBitmap=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);     this.textCanvas=new Canvas(this.textBitmap);     this.textBitmap.eraseColor(0);   }   public void fillRect(  int left,  int top,  int right,  int bottom,  int color){     Paint fillPaint=new Paint();     fillPaint.setColor(color);     PorterDuffXfermode mode=new PorterDuffXfermode(PorterDuff.Mode.SRC);     fillPaint.setXfermode(mode);     this.textCanvas.drawRect(left,top,right,bottom,fillPaint);   }   public void drawText(  String text,  int x,  int y,  int color){     Rect rect=new Rect();     this.textPaint.getTextBounds(text,0,text.length(),rect);     this.textPaint.setColor(color);     float space=Math.abs(rect.top);     this.textCanvas.drawText(text,x,y + space,this.textPaint);   }   public void getPixels(  int w,  int h,  int[] pixels){     this.textBitmap.getPixels(pixels,0,this.textBitmap.getWidth(),0,0,w,h);   }   public void createTemporaryBitmap(  int w,  int h,  int[] pixels){     this.tempBitmap=Bitmap.createBitmap(pixels,w,h,Bitmap.Config.ARGB_8888);   }   public int playSound(  String filePath,  float volume,  boolean loop,  boolean backGround){     int soundID;     MediaPlayer mediaPlayer;     if (backGround) {       MediaPlayer mediaPlayer2=this.soundMap.get(0);       if (mediaPlayer2 != null) {         mediaPlayer2.release();       }       mediaPlayer=new MediaPlayer();       this.soundMap.put(0,mediaPlayer);       soundID=0;     }  else {       soundID=this.lastSoundID + 1;       this.lastSoundID=soundID;       mediaPlayer=new MediaPlayer();       this.soundMap.put(Integer.valueOf(soundID),mediaPlayer);     }     try {       mediaPlayer.setAudioStreamType(3);       FileInputStream fis=new FileInputStream(filePath);       FileDescriptor fd=fis.getFD();       mediaPlayer.setDataSource(fd);       mediaPlayer.prepare();       mediaPlayer.setLooping(loop);       mediaPlayer.setVolume(volume,volume);       mediaPlayer.start();     }  catch (    Exception e) {       e.printStackTrace();     }     return soundID;   }   public int stopSound(  int id){     MediaPlayer mediaPlayer=this.soundMap.get(Integer.valueOf(id));     if (mediaPlayer == null) {       return 0;     }     mediaPlayer.pause();     return mediaPlayer.getCurrentPosition();   }   public void playSoundByID(  int id,  float volume,  int position){     MediaPlayer mediaPlayer=this.soundMap.get(Integer.valueOf(id));     if (mediaPlayer != null && !mediaPlayer.isPlaying()) {       mediaPlayer.setVolume(volume,volume);       mediaPlayer.seekTo(position);       mediaPlayer.start();       return;     }     Log.d(""Warning"",""playSoundByID - can not find mediaPlayer, nor mediaPlayer is not playing."");   }   public void setVolume(  int id,  float volume){     if (id == -1) {       AudioManager mAudioManager=(AudioManager)this.context.getSystemService(""audio"");       if (mAudioManager != null) {         int maxVolume=mAudioManager.getStreamMaxVolume(3);         mAudioManager.setStreamVolume(3,(int)(maxVolume * volume),0);         return;       }       return;     }     MediaPlayer mediaPlayer=this.soundMap.get(Integer.valueOf(id));     if (mediaPlayer != null) {       mediaPlayer.setVolume(volume,volume);     }   }   public void resetSound(  int id){     MediaPlayer mediaPlayer=this.soundMap.get(Integer.valueOf(id));     if (mediaPlayer != null) {       mediaPlayer.release();       this.soundMap.remove(Integer.valueOf(id));     }   }   private void pauseAllSounds(){     try {       if (this.showLog) {         Log.d(""inform"",""pauseAllSounds - 1"");       }       for (      Integer _id : this.soundMap.keySet()) {         MediaPlayer mediaPlayer=this.soundMap.get(_id);         if (mediaPlayer != null && mediaPlayer.isPlaying()) {           if (this.showLog) {             Log.d(""inform"",""pause "" + _id);           }           this.pausedSoundMap.put(_id,_id);           mediaPlayer.pause();         }       }       if (this.showLog) {         Log.d(""inform"",""pauseAllSounds - 2"");       }     }  catch (    Error err) {       Log.e(""error"",""pauseAllSounds - [3]."" + err);     } catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""pauseAllSounds - [1]."");     } catch (    StackOverflowError soe) {       Log.e(""error"",""pauseAllSounds - [2]."" + soe);     } catch (    Throwable th) {       Log.e(""error"",""pauseAllSounds - [4]."");     }   }   private void resumeAllSounds(){     try {       if (this.showLog) {         Log.d(""inform"",""resumeAllSounds - 1"");       }       for (      Integer _id : this.pausedSoundMap.keySet()) {         MediaPlayer mediaPlayer=this.soundMap.get(_id);         if (mediaPlayer != null && !mediaPlayer.isPlaying()) {           if (this.showLog) {             Log.d(""inform"",""resume "" + _id);           }           mediaPlayer.start();         }       }       this.pausedSoundMap.clear();       if (this.showLog) {         Log.d(""inform"",""resumeAllSounds - 2"");       }     }  catch (    Error err) {       Log.e(""error"",""resumeAllSounds - [3]."" + err);     } catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""resumeAllSounds - [1]."");     } catch (    StackOverflowError soe) {       Log.e(""error"",""resumeAllSounds - [2]."" + soe);     } catch (    Throwable th) {       Log.e(""error"",""resumeAllSounds - [4]."");     }   }   public int notifyToAndroid(  String msgType,  String msg){     if (msgType.equals(SHOWWEB_MSGTYPE)) {       Intent intent=new Intent(""android.intent.action.VIEW"");       intent.addCategory(""android.intent.category.BROWSABLE"");       intent.setData(Uri.parse(msg));       this.context.startActivity(intent);       if (!this.showLog) {         return 0;       }       Log.d(""notifyToAndroid"",""SHOWWEB_MSGTYPE:"" + msg);       return 0;     }     if (msgType.equals(CHECKHITTEST_MSGTYPE)) {       Log.d(""notifyToAndroid"",""CHECKHITTEST_MSGTYPE:"" + msg);       this.checkHitTest=msg.equals(""true"");     }     if (this.notifyListener != null) {       return this.notifyListener.onNotify(msgType,msg);     }     if (!this.showLog) {       return 0;     }     Log.d(""notifyToAndroid"",""no listener"");     return 0;   }   public static int downloadFile(  String url,  String local){     String encodedURL;     HttpResponse response;     int code;     int result=0;     BufferedOutputStream out=null;     try {       try {         Uri parsedURI=Uri.parse(url);         URI uri=new URI(parsedURI.getScheme(),parsedURI.getAuthority(),parsedURI.getPath(),parsedURI.getQuery(),parsedURI.getFragment());         encodedURL=uri.toString();         if (!encodedURL.equals(url)) {           Log.d(""log"",""downloadFile - "" + encodedURL);         }         HttpClient client=new DefaultHttpClient();         HttpGet request=new HttpGet(encodedURL);         response=client.execute(request);         code=response.getStatusLine().getStatusCode();       }  catch (      Exception e) {         e=e;       }       if (code != 200) {         Log.d(""TriDBrowser"",""downloadFile - "" + encodedURL + ""[""+ code+ ""]"");         if (0 != 0) {           try {             out.close();           }  catch (          IOException e2) {             e2.printStackTrace();           }         }         return -1;       }       InputStream is=response.getEntity().getContent();       String localTempPath=String.valueOf(local) + "".tmp"";       BufferedOutputStream out2=new BufferedOutputStream(new FileOutputStream(localTempPath),32768);       try {         byte[] bytes=new byte[32768];         while (true) {           int numRead=is.read(bytes,0,32768);           if (numRead <= 0) {             break;           }           out2.write(bytes,0,numRead);           Thread.sleep(0L);         }         out2.close();         BufferedOutputStream out3=null;         new File(localTempPath).renameTo(new File(local));         if (0 != 0) {           try {             out3.close();           }  catch (          IOException e3) {             e3.printStackTrace();           }         }       }  catch (      Exception e4) {         e=e4;         out=out2;         result=-1;         e.printStackTrace();         if (out != null) {           try {             out.close();           }  catch (          IOException e5) {             e5.printStackTrace();           }         }         return result;       } catch (      Throwable th) {         th=th;         out=out2;         if (out != null) {           try {             out.close();           }  catch (          IOException e6) {             e6.printStackTrace();           }         }         throw th;       }       return result;     }  catch (    Throwable th2) {       th=th2;     }   }   public int getHttpFile(  String url,  String local){     String encodedURL;     HttpResponse response;     int code;     int totalRead;     BufferedOutputStream out;     int numRead;     int result=0;     BufferedOutputStream out2=null;     try {       try {         Uri parsedURI=Uri.parse(url);         URI uri=new URI(parsedURI.getScheme(),parsedURI.getAuthority(),parsedURI.getPath(),parsedURI.getQuery(),parsedURI.getFragment());         encodedURL=uri.toString();         if (!encodedURL.equals(url) && this.showLog) {           Log.d(""log"",""getHttpFile - "" + encodedURL);         }         HttpClient client=new DefaultHttpClient();         HttpGet request=new HttpGet(encodedURL);         response=client.execute(request);         code=response.getStatusLine().getStatusCode();       }  catch (      Exception e) {         e=e;       }       if (code != 200) {         Log.d(""TriDBrowser"",""getHttpFile - "" + encodedURL + ""[""+ code+ ""]"");         if (0 != 0) {           try {             out2.close();           }  catch (          IOException e2) {             e2.printStackTrace();           }         }         return -1;       }       long time=System.currentTimeMillis();       InputStream is=response.getEntity().getContent();       String localTempPath=String.valueOf(local) + "".tmp"" + time;       BufferedOutputStream out3=new BufferedOutputStream(new FileOutputStream(localTempPath),32768);       try {         byte[] bytes=new byte[32768];         totalRead=0;         while (!this.nowFinishing && (numRead=is.read(bytes,0,32768)) > 0) {           out3.write(bytes,0,numRead);           totalRead+=numRead;         }         out3.close();         out=null;       }  catch (      Exception e3) {         e=e3;         out2=out3;         result=-1;         e.printStackTrace();         if (out2 != null) {           try {             out2.close();           }  catch (          IOException e4) {             e4.printStackTrace();           }         }         return result;       } catch (      Throwable th) {         th=th;         out2=out3;         if (out2 != null) {           try {             out2.close();           }  catch (          IOException e5) {             e5.printStackTrace();           }         }         throw th;       }       if (!this.nowFinishing) {         new File(localTempPath).renameTo(new File(local));         if (0 != 0) {           try {             out.close();           }  catch (          IOException e6) {             e6.printStackTrace();           }         }         return result;       }       boolean deletionResult=new File(localTempPath).delete();       Log.d(""TriDBrowser"",""getHttpFile - now finishing : "" + encodedURL + "" : ""+ totalRead+ "" : ""+ deletionResult);       if (0 != 0) {         try {           out.close();         }  catch (        IOException e7) {           e7.printStackTrace();         }       }       return -1;     }  catch (    Throwable th2) {       th=th2;     }   }   public String sendHttpData(  String url,  String data,  int wait,  String uploadFilePath,  String uploadFileName,  String postVarName){     String postData;     InputStream is;     StringBuilder responseString;     String line;     String result=null;     HttpClient httpclient=new DefaultHttpClient();     int waitTime=wait > 0 ? wait : 10000;     try {       HttpParams params=httpclient.getParams();       HttpConnectionParams.setConnectionTimeout(params,waitTime);       HttpConnectionParams.setSoTimeout(params,waitTime);       if (this.showLog) {         Log.d(""sendHttpData"",""sendHttpData1 - "" + url);       }       if (uploadFilePath.equals("""")) {         HttpPost httppost=new HttpPost(url);         httppost.setHeader(""Content-type"",""application/x-www-form-urlencoded"");         if (postVarName.equals("""")) {           postData=data;         }  else {           postData=String.valueOf(postVarName) + ""="" + data;         }         StringEntity se=new StringEntity(postData);         httppost.setEntity(se);         HttpResponse response=httpclient.execute(httppost);         int code=response.getStatusLine().getStatusCode();         if (code != 200) {           if (this.showLog) {             Log.d(""log"",""sendHttpData - "" + url + ""[""+ code+ ""]"");           }           return null;         }         is=response.getEntity().getContent();       }  else {         File file=new File(uploadFilePath);         if (file.exists()) {           URL connectURL=new URL(url);           HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();           conn.setDoInput(true);           conn.setDoOutput(true);           conn.setUseCaches(false);           conn.setRequestMethod(""POST"");           conn.setRequestProperty(""Content-Type"",""multipart/form-data; boundary=_pup_Xu02=$"");           DataOutputStream dos=new DataOutputStream(conn.getOutputStream());           dos.writeBytes(""--_pup_Xu02=$\r\n"");           dos.writeBytes(""Content-Disposition: form-data; name=\"""" + postVarName + ""\""\r\n\r\n""+ data+ ""\r\n--_pup_Xu02=$\r\nContent-Disposition: form-data; name=\""file1\""; filename=\""""+ uploadFileName+ ""\""\r\nContent-Type: application/octet-stream\r\n\r\n"");           FileInputStream fileInputStream=new FileInputStream(file);           int bytesAvailable=fileInputStream.available();           int bufferSize=Math.min(bytesAvailable,32768);           byte[] buffer=new byte[bufferSize];           int bytesRead=fileInputStream.read(buffer,0,bufferSize);           while (bytesRead > 0 && !this.nowFinishing) {             dos.write(buffer,0,bufferSize);             int bytesAvailable2=fileInputStream.available();             bufferSize=Math.min(bytesAvailable2,32768);             bytesRead=fileInputStream.read(buffer,0,bufferSize);           }           fileInputStream.close();           if (this.nowFinishing) {             if (this.showLog) {               Log.d(""TriDBrowser"",""sendHttpData - now finishing1 : "" + url);             }             return null;           }           dos.writeBytes(""\r\n"");           dos.writeBytes(""--_pup_Xu02=$--\r\n"");           dos.flush();           is=conn.getInputStream();         }  else {           Log.e(""error"",""sendHttpData - no file data.."" + uploadFilePath);           return null;         }       }       BufferedReader in=new BufferedReader(new InputStreamReader(is));       responseString=new StringBuilder();       while (!this.nowFinishing && (line=in.readLine()) != null) {         responseString.append(line);       }       in.close();     }  catch (    Exception e) {       e.printStackTrace();     }     if (this.nowFinishing) {       if (this.showLog) {         Log.d(""TriDBrowser"",""sendHttpData - now finishing2 : "" + url);       }       return null;     }     if (this.showLog) {       Log.d(""sendHttpData"",""response : "" + responseString.toString());     }     result=responseString.toString();     return result;   }   public static void getImageSize(  String imagePath,  int[] size){     BitmapFactory.Options options=new BitmapFactory.Options();     options.inJustDecodeBounds=true;     BitmapFactory.decodeFile(imagePath,options);     size[0]=options.outWidth;     size[1]=options.outHeight;   }   public static int getImagePixels(  String imagePath,  int[] pixels){     Bitmap src=BitmapFactory.decodeFile(imagePath);     src.getPixels(pixels,0,src.getWidth(),0,0,src.getWidth(),src.getHeight());     return src.hasAlpha() ? 1 : 0;   }   public boolean captureScreen(  int x,  int y,  int w,  int h,  String outPath,  int jpgQuality){     int lastPos=outPath.lastIndexOf(""."");     if (lastPos == -1) {       Log.e(""error"",""captureScreen - invalid file name."");       return false;     }     String ext=outPath.substring(lastPos + 1,outPath.length()).toLowerCase();     boolean isPNG=ext.equals(""png"");     boolean isJPG=ext.equals(""jpg"");     if (!isPNG && !isJPG) {       Log.e(""error"",""captureScreen - only support for png or jpg."");       return false;     }     Activity parent=(Activity)this.context;     View view=parent.getWindow().getDecorView();     Rect rect=new Rect();     Window win=parent.getWindow();     win.getDecorView().getWindowVisibleDisplayFrame(rect);     int statusBarHeight=rect.top;     Rect rect2=new Rect();     win.findViewById(R.id.content).getWindowVisibleDisplayFrame(rect2);     int contentViewTop=win.findViewById(R.id.content).getTop();     if (contentViewTop == 0 && statusBarHeight > 0) {       contentViewTop=statusBarHeight;     }     Log.d(""captureScreen"",""statusBarHeight = "" + statusBarHeight + "" full BarHeight = ""+ contentViewTop+ "" rect = ""+ rect2);     view.setDrawingCacheEnabled(true);     Bitmap screenshot=view.getDrawingCache();     Bitmap saveImage=screenshot;     if (w > 0 && h > 0) {       if (x < 0) {         x=0;       }       if (y < 0) {         y=0;       }       int y2=y + contentViewTop;       if (x + w > screenshot.getWidth()) {         w=screenshot.getWidth() - x;       }       if (y2 + h > screenshot.getHeight()) {         h=screenshot.getHeight() - y2;       }       if (w <= 0 || h <= 0) {         Log.e(""error"",""captureScreen - out of range."");         return false;       }       saveImage=Bitmap.createBitmap(screenshot,x,y2,w,h);     }  else     if (contentViewTop > 0) {       saveImage=Bitmap.createBitmap(screenshot,0,contentViewTop,screenshot.getWidth(),screenshot.getHeight() - contentViewTop);     }     boolean success=false;     try {       File f=new File(outPath);       f.createNewFile();       OutputStream outStream=new FileOutputStream(f);       if (isPNG) {         saveImage.compress(Bitmap.CompressFormat.PNG,100,outStream);       }  else       if (isJPG) {         if (jpgQuality <= 0) {           jpgQuality=90;         }         saveImage.compress(Bitmap.CompressFormat.JPEG,jpgQuality,outStream);       }       outStream.close();       success=true;     }  catch (    IOException e) {       e.printStackTrace();     }     view.setDrawingCacheEnabled(false);     return success;   }   public void setGUIRectForHitTest(  int GUIID,  int x,  int y,  int w,  int h){     this.guiRectsForHitTest.put(Integer.valueOf(GUIID),new Rect(x,y,x + w,y + h));   }   public void resetGUIRectForHitTest(  int GUIID){     Rect r=this.guiRectsForHitTest.get(Integer.valueOf(GUIID));     if (r != null) {       this.guiRectsForHitTest.remove(Integer.valueOf(GUIID));     }   }   public boolean checkHitTest(  int x,  int y){     boolean z=true;     if (this.checkHitTest) { synchronized (this.guiRectsForHitTest) {         if (this.guiRectsForHitTest.size() == 0) {           z=false;         }  else {           Iterator<Integer> iter=this.guiRectsForHitTest.keySet().iterator();           while (true) {             if (!iter.hasNext()) {               z=false;               break;             }             Integer _id=iter.next();             Rect value=this.guiRectsForHitTest.get(_id);             if (value.contains(x,y)) {               break;             }           }         }       }     }     return z;   }   public String getSystemInfo(  int infoType,  String strType){     if (infoType == 0) {       String model=Build.MODEL;       if (model.equals("""")) {         model="" "";       }       String lang=Locale.getDefault().getLanguage();       if (lang.equals("""")) {         lang="" "";       }       String packageName=this.context.getPackageName();       if (packageName.equals("""")) {         packageName="" "";       }       String androidId=Settings.Secure.getString(this.context.getContentResolver(),""android_id"");       if (androidId.equals("""")) {         androidId="" "";       }       return String.valueOf(Build.VERSION.SDK_INT) + ""\t"" + model+ ""\t""+ lang+ ""\t""+ packageName+ ""\t""+ androidId;     }     if (infoType == 1) {       SharedPreferences prefs=this.context.getSharedPreferences(this.context.getPackageName(),0);       return prefs.getString(strType,"""");     }     return """";   }   public void setSystemInfo(  int infoType,  String strType,  String data){     if (infoType == 1) {       SharedPreferences prefs=this.context.getSharedPreferences(this.context.getPackageName(),0);       SharedPreferences.Editor edit=prefs.edit();       if (data.equals("""")) {         edit.remove(strType);       }  else {         edit.putString(strType,data);       }       edit.commit();     }   } public class NotifyData {     public String msgData;     public String msgType;     public NotifyData(    String t,    String d){       this.msgType=t;       this.msgData=d;     }   }   public void enableLog(  boolean on){     this.showLog=on;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\TriDContentsView.code","!org.eclipse.jdt.core.dom.TypeDeclaration@194eb885"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.trid.tridad\TriDLoader.code","public class TriDLoader {   public static final String[] ENGINE_FILES={""libtridad1116.so"",""_TriDCommon.lua"",""_TriDDynamicData.lua"",""_TriDStartup.lua"",""json.lua""};   private static final String ENGINE_PACKAGE_EXT="".zip"";   private static final String ENGINE_PACKAGE_PREFIX=""tridad"";   private static final String ENGINE_URL=""http://image.cauly.co.kr:15151/lib/tridad"";   private static final String TEST_ENGINE_URL=""http://rc.c2town.com/update/OSP/Update/Files/android/tridad"";   public static final int USE_LOCAL_ENGINE=2;   public static final int USE_REMOTE_REAL_ENGINE=0;   public static final int USE_REMOTE_TEST_ENGINE=1;   private static final String VERSION=""1116"";   private Handler checkedHandler;   private Context context;   private String engineVersion=VERSION;   private boolean ready;   private int useEngineType;   public String getEnginePath(){     return String.valueOf(this.context.getFilesDir().getAbsolutePath()) + ""/"" + ENGINE_PACKAGE_PREFIX+ this.engineVersion;   }   public boolean ready(){     return this.ready;   }   public boolean isLocalEngine(){     return this.useEngineType == 2;   }   public TriDLoader(  Context con,  Handler handler,  int useType){     this.ready=false;     this.context=con;     this.checkedHandler=handler;     this.useEngineType=useType;     if (this.useEngineType == 1) {       Log.d(""TriDLoader"",""TriDLoader - test url."");     }     if (this.useEngineType == 2) {       this.ready=false;       try {         System.loadLibrary(ENGINE_PACKAGE_PREFIX);         String soVersion=String.valueOf(TriDBrowser.getVersion());         if (soVersion.equalsIgnoreCase(this.engineVersion)) {           this.ready=true;           Log.d(""TriDLoader"",""TriDLoader - use local engine."");         }  else {           Log.e(""error"",""TriDLoader - version mismatch."" + soVersion + "" != ""+ this.engineVersion);         }       }  catch (      Exception e) {         Log.e(""error"",""TriDLoader - can not load engine [1]."");       } catch (      StackOverflowError e2) {         Log.e(""error"",""TriDLoader - can not load engine [2]."");       } catch (      Error e3) {         Log.e(""error"",""TriDLoader - can not load engine [3]."");       } catch (      Throwable th) {         Log.e(""error"",""TriDLoader - can not load engine [4]."");       }       if (!this.ready) {         this.useEngineType=0;       }     }     if (this.useEngineType != 2) {       this.ready=checkEngine();     }     if (this.ready) {       this.checkedHandler.sendMessage(this.checkedHandler.obtainMessage());       return;     }     File f=new File(String.valueOf(getEnginePath()) + ""/"");     f.mkdirs();     Log.d(""log"",""try to download trid ad engine."" + Thread.currentThread().getId());     new Thread(new Runnable(){       @Override public void run(){         while (!TriDLoader.this.ready) {           try {             String enginePackagePath=TriDLoader.this.getEnginePackagePath();             String engineUrl=TriDLoader.this.useEngineType == 0 ? TriDLoader.ENGINE_URL : TriDLoader.TEST_ENGINE_URL;             String fileUrl=String.valueOf(engineUrl) + TriDLoader.this.engineVersion + TriDLoader.ENGINE_PACKAGE_EXT;             String partOfUrl=fileUrl.substring(0,10);             Log.d(""downloadFile"",""download url - "" + partOfUrl);             int result=TriDBrowser.downloadFile(fileUrl,enginePackagePath);             if (result == 0) {               if (!TriDBrowser.unzipFile(new FileInputStream(enginePackagePath),TriDLoader.this.getEnginePath(),null)) {                 Log.e(""error"",""error on unzip trid ad engine."" + Thread.currentThread().getId());                 return;               }               TriDLoader.this.ready=TriDLoader.this.checkEngine();               if (TriDLoader.this.ready) {                 Log.d(""log"",""trid ad engine downloaded."" + Thread.currentThread().getId());                 TriDLoader.this.checkedHandler.sendMessage(TriDLoader.this.checkedHandler.obtainMessage());                 return;               }               Log.e(""error"",""error on checking trid ad engine."");             }             Thread.sleep(10000L);           }  catch (          Exception e4) {             e4.printStackTrace();             return;           }         }       }     } ).start();   }   public String getEnginePackagePath(){     return String.valueOf(this.context.getFilesDir().getAbsolutePath()) + ""/"" + ENGINE_PACKAGE_PREFIX+ this.engineVersion+ ENGINE_PACKAGE_EXT;   }   public boolean checkEngine(){     String filePath=String.valueOf(getEnginePath()) + ""/"";     for (    String fileName : ENGINE_FILES) {       File file=new File(String.valueOf(filePath) + fileName);       if (!file.exists()) {         return false;       }     }     try {       System.load(String.valueOf(getEnginePath()) + ""/"" + ENGINE_FILES[0]);       return true;     }  catch (    StackOverflowError soe) {       Log.e(""error"",""TriDLoader - can not load engine [2]."" + soe);       return false;     } catch (    Error err) {       Log.e(""error"",""TriDLoader - can not load engine [3]."" + err);       return false;     } catch (    Exception e) {       e.printStackTrace();       Log.e(""error"",""TriDLoader - can not load engine [1]."");       return false;     } catch (    Throwable th) {       Log.e(""error"",""TriDLoader - can not load engine [4]."");       return false;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\attr.code","public static final class attr {   public static final int centered=0x7f010004;   public static final int clipPadding=0x7f01000b;   public static final int fillColor=0x7f010005;   public static final int footerColor=0x7f01000c;   public static final int footerIndicatorHeight=0x7f01000f;   public static final int footerIndicatorStyle=0x7f01000e;   public static final int footerIndicatorUnderlinePadding=0x7f010010;   public static final int footerLineHeight=0x7f01000d;   public static final int footerPadding=0x7f010011;   public static final int orientation=0x7f010006;   public static final int radius=0x7f010007;   public static final int selectedBold=0x7f010013;   public static final int selectedColor=0x7f010012;   public static final int snap=0x7f010008;   public static final int strokeColor=0x7f010009;   public static final int strokeWidth=0x7f01000a;   public static final int textColor=0x7f010014;   public static final int textSize=0x7f010015;   public static final int titlePadding=0x7f010016;   public static final int topPadding=0x7f010017;   public static final int vpiCirclePageIndicatorStyle=0x7f010000;   public static final int vpiTabPageIndicatorStyle=0x7f010002;   public static final int vpiTabTextStyle=0x7f010003;   public static final int vpiTitlePageIndicatorStyle=0x7f010001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\bool.code","public static final class bool {   public static final int default_circle_indicator_centered=0x7f070000;   public static final int default_circle_indicator_snap=0x7f070001;   public static final int default_title_indicator_selected_bold=0x7f070002; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\CirclePageIndicator.code","!org.eclipse.jdt.core.dom.TypeDeclaration@29227ca4"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\color.code","public static final class color {   public static final int default_circle_indicator_fill_color=0x7f060008;   public static final int default_circle_indicator_stroke_color=0x7f060009;   public static final int default_title_indicator_footer_color=0x7f06000a;   public static final int default_title_indicator_selected_color=0x7f06000b;   public static final int default_title_indicator_text_color=0x7f06000c;   public static final int vpi__background_holo_dark=0x7f060000;   public static final int vpi__background_holo_light=0x7f060001;   public static final int vpi__bright_foreground_disabled_holo_dark=0x7f060004;   public static final int vpi__bright_foreground_disabled_holo_light=0x7f060005;   public static final int vpi__bright_foreground_holo_dark=0x7f060002;   public static final int vpi__bright_foreground_holo_light=0x7f060003;   public static final int vpi__bright_foreground_inverse_holo_dark=0x7f060006;   public static final int vpi__bright_foreground_inverse_holo_light=0x7f060007;   public static final int vpi__dark_theme=0x7f06000d;   public static final int vpi__light_theme=0x7f06000e; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\dimen.code","public static final class dimen {   public static final int default_circle_indicator_radius=0x7f090000;   public static final int default_circle_indicator_stroke_width=0x7f090001;   public static final int default_title_indicator_clip_padding=0x7f090002;   public static final int default_title_indicator_footer_indicator_height=0x7f090004;   public static final int default_title_indicator_footer_indicator_underline_padding=0x7f090005;   public static final int default_title_indicator_footer_line_height=0x7f090003;   public static final int default_title_indicator_footer_padding=0x7f090006;   public static final int default_title_indicator_text_size=0x7f090007;   public static final int default_title_indicator_title_padding=0x7f090008;   public static final int default_title_indicator_top_padding=0x7f090009; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\drawable.code","public static final class drawable {   public static final int vpi__tab_indicator=0x7f0201a2;   public static final int vpi__tab_selected_focused_holo=0x7f0201a3;   public static final int vpi__tab_selected_holo=0x7f0201a4;   public static final int vpi__tab_selected_pressed_holo=0x7f0201a5;   public static final int vpi__tab_unselected_focused_holo=0x7f0201a6;   public static final int vpi__tab_unselected_holo=0x7f0201a7;   public static final int vpi__tab_unselected_pressed_holo=0x7f0201a8; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\id.code","public static final class id {   public static final int horizontal=0x7f050000;   public static final int none=0x7f050002;   public static final int triangle=0x7f050003;   public static final int underline=0x7f050004;   public static final int vertical=0x7f050001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\integer.code","public static final class integer {   public static final int default_circle_indicator_orientation=0x7f080000;   public static final int default_title_indicator_footer_indicator_style=0x7f080001; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\layout.code","public static final class layout {   public static final int vpi__tab=0x7f03004c; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\OnCenterItemClickListener.code","public interface OnCenterItemClickListener {   void onCenterItemClick(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\PageIndicator.code","public interface PageIndicator extends ViewPager.OnPageChangeListener {   void notifyDataSetChanged();   void setCurrentItem(  int i);   void setOnPageChangeListener(  ViewPager.OnPageChangeListener onPageChangeListener);   void setViewPager(  ViewPager viewPager);   void setViewPager(  ViewPager viewPager,  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\R.code","public final class R { public static final class attr {     public static final int centered=0x7f010004;     public static final int clipPadding=0x7f01000b;     public static final int fillColor=0x7f010005;     public static final int footerColor=0x7f01000c;     public static final int footerIndicatorHeight=0x7f01000f;     public static final int footerIndicatorStyle=0x7f01000e;     public static final int footerIndicatorUnderlinePadding=0x7f010010;     public static final int footerLineHeight=0x7f01000d;     public static final int footerPadding=0x7f010011;     public static final int orientation=0x7f010006;     public static final int radius=0x7f010007;     public static final int selectedBold=0x7f010013;     public static final int selectedColor=0x7f010012;     public static final int snap=0x7f010008;     public static final int strokeColor=0x7f010009;     public static final int strokeWidth=0x7f01000a;     public static final int textColor=0x7f010014;     public static final int textSize=0x7f010015;     public static final int titlePadding=0x7f010016;     public static final int topPadding=0x7f010017;     public static final int vpiCirclePageIndicatorStyle=0x7f010000;     public static final int vpiTabPageIndicatorStyle=0x7f010002;     public static final int vpiTabTextStyle=0x7f010003;     public static final int vpiTitlePageIndicatorStyle=0x7f010001;   } public static final class bool {     public static final int default_circle_indicator_centered=0x7f070000;     public static final int default_circle_indicator_snap=0x7f070001;     public static final int default_title_indicator_selected_bold=0x7f070002;   } public static final class color {     public static final int default_circle_indicator_fill_color=0x7f060008;     public static final int default_circle_indicator_stroke_color=0x7f060009;     public static final int default_title_indicator_footer_color=0x7f06000a;     public static final int default_title_indicator_selected_color=0x7f06000b;     public static final int default_title_indicator_text_color=0x7f06000c;     public static final int vpi__background_holo_dark=0x7f060000;     public static final int vpi__background_holo_light=0x7f060001;     public static final int vpi__bright_foreground_disabled_holo_dark=0x7f060004;     public static final int vpi__bright_foreground_disabled_holo_light=0x7f060005;     public static final int vpi__bright_foreground_holo_dark=0x7f060002;     public static final int vpi__bright_foreground_holo_light=0x7f060003;     public static final int vpi__bright_foreground_inverse_holo_dark=0x7f060006;     public static final int vpi__bright_foreground_inverse_holo_light=0x7f060007;     public static final int vpi__dark_theme=0x7f06000d;     public static final int vpi__light_theme=0x7f06000e;   } public static final class dimen {     public static final int default_circle_indicator_radius=0x7f090000;     public static final int default_circle_indicator_stroke_width=0x7f090001;     public static final int default_title_indicator_clip_padding=0x7f090002;     public static final int default_title_indicator_footer_indicator_height=0x7f090004;     public static final int default_title_indicator_footer_indicator_underline_padding=0x7f090005;     public static final int default_title_indicator_footer_line_height=0x7f090003;     public static final int default_title_indicator_footer_padding=0x7f090006;     public static final int default_title_indicator_text_size=0x7f090007;     public static final int default_title_indicator_title_padding=0x7f090008;     public static final int default_title_indicator_top_padding=0x7f090009;   } public static final class drawable {     public static final int vpi__tab_indicator=0x7f0201a2;     public static final int vpi__tab_selected_focused_holo=0x7f0201a3;     public static final int vpi__tab_selected_holo=0x7f0201a4;     public static final int vpi__tab_selected_pressed_holo=0x7f0201a5;     public static final int vpi__tab_unselected_focused_holo=0x7f0201a6;     public static final int vpi__tab_unselected_holo=0x7f0201a7;     public static final int vpi__tab_unselected_pressed_holo=0x7f0201a8;   } public static final class id {     public static final int horizontal=0x7f050000;     public static final int none=0x7f050002;     public static final int triangle=0x7f050003;     public static final int underline=0x7f050004;     public static final int vertical=0x7f050001;   } public static final class integer {     public static final int default_circle_indicator_orientation=0x7f080000;     public static final int default_title_indicator_footer_indicator_style=0x7f080001;   } public static final class layout {     public static final int vpi__tab=0x7f03004c;   } public static final class style {     public static final int TextAppearance_TabPageIndicator=0x7f0a0006;     public static final int Theme_PageIndicatorDefaults=0x7f0a0000;     public static final int Widget=0x7f0a0001;     public static final int Widget_CirclePageIndicator=0x7f0a0002;     public static final int Widget_TabPageIndicator=0x7f0a0004;     public static final int Widget_TabPageIndicator_Text=0x7f0a0005;     public static final int Widget_TitlePageIndicator=0x7f0a0003;   } public static final class styleable {     public static final int CirclePageIndicator_centered=0x00000000;     public static final int CirclePageIndicator_fillColor=0x00000001;     public static final int CirclePageIndicator_orientation=0x00000002;     public static final int CirclePageIndicator_radius=0x00000003;     public static final int CirclePageIndicator_snap=0x00000004;     public static final int CirclePageIndicator_strokeColor=0x00000005;     public static final int CirclePageIndicator_strokeWidth=0x00000006;     public static final int TitlePageIndicator_clipPadding=0x00000000;     public static final int TitlePageIndicator_footerColor=0x00000001;     public static final int TitlePageIndicator_footerIndicatorHeight=0x00000004;     public static final int TitlePageIndicator_footerIndicatorStyle=0x00000003;     public static final int TitlePageIndicator_footerIndicatorUnderlinePadding=0x00000005;     public static final int TitlePageIndicator_footerLineHeight=0x00000002;     public static final int TitlePageIndicator_footerPadding=0x00000006;     public static final int TitlePageIndicator_selectedBold=0x00000008;     public static final int TitlePageIndicator_selectedColor=0x00000007;     public static final int TitlePageIndicator_textColor=0x00000009;     public static final int TitlePageIndicator_textSize=0x0000000a;     public static final int TitlePageIndicator_titlePadding=0x0000000b;     public static final int TitlePageIndicator_topPadding=0x0000000c;     public static final int ViewPagerIndicator_vpiCirclePageIndicatorStyle=0x00000000;     public static final int ViewPagerIndicator_vpiTabPageIndicatorStyle=0x00000002;     public static final int ViewPagerIndicator_vpiTabTextStyle=0x00000003;     public static final int ViewPagerIndicator_vpiTitlePageIndicatorStyle=0x00000001;     public static final int[] CirclePageIndicator={com.bluerabbit.kpopldols.R.attr.centered,com.bluerabbit.kpopldols.R.attr.fillColor,com.bluerabbit.kpopldols.R.attr.orientation,com.bluerabbit.kpopldols.R.attr.radius,com.bluerabbit.kpopldols.R.attr.snap,com.bluerabbit.kpopldols.R.attr.strokeColor,com.bluerabbit.kpopldols.R.attr.strokeWidth};     public static final int[] TitlePageIndicator={com.bluerabbit.kpopldols.R.attr.clipPadding,com.bluerabbit.kpopldols.R.attr.footerColor,com.bluerabbit.kpopldols.R.attr.footerLineHeight,com.bluerabbit.kpopldols.R.attr.footerIndicatorStyle,com.bluerabbit.kpopldols.R.attr.footerIndicatorHeight,com.bluerabbit.kpopldols.R.attr.footerIndicatorUnderlinePadding,com.bluerabbit.kpopldols.R.attr.footerPadding,com.bluerabbit.kpopldols.R.attr.selectedColor,com.bluerabbit.kpopldols.R.attr.selectedBold,com.bluerabbit.kpopldols.R.attr.textColor,com.bluerabbit.kpopldols.R.attr.textSize,com.bluerabbit.kpopldols.R.attr.titlePadding,com.bluerabbit.kpopldols.R.attr.topPadding};     public static final int[] ViewPagerIndicator={com.bluerabbit.kpopldols.R.attr.vpiCirclePageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTitlePageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTabPageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTabTextStyle};   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\SavedState.code","public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in,null);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   int currentPage;   public SavedState(  Parcelable superState){     super(superState);   }   SavedState(  Parcel parcel,  SavedState savedState){     this(parcel);   }   private SavedState(  Parcel in){     super(in);     this.currentPage=in.readInt();   }   @Override public void writeToParcel(  Parcel dest,  int flags){     super.writeToParcel(dest,flags);     dest.writeInt(this.currentPage);   } } public static class SavedState extends View.BaseSavedState {   public static final Parcelable.Creator<SavedState> CREATOR=new Parcelable.Creator<SavedState>(){     @Override public SavedState createFromParcel(    Parcel in){       return new SavedState(in,null);     }     @Override public SavedState[] newArray(    int size){       return new SavedState[size];     }   } ;   int currentPage;   public SavedState(  Parcelable superState){     super(superState);   }   SavedState(  Parcel parcel,  SavedState savedState){     this(parcel);   }   private SavedState(  Parcel in){     super(in);     this.currentPage=in.readInt();   }   @Override public void writeToParcel(  Parcel dest,  int flags){     super.writeToParcel(dest,flags);     dest.writeInt(this.currentPage);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\style.code","public static final class style {   public static final int TextAppearance_TabPageIndicator=0x7f0a0006;   public static final int Theme_PageIndicatorDefaults=0x7f0a0000;   public static final int Widget=0x7f0a0001;   public static final int Widget_CirclePageIndicator=0x7f0a0002;   public static final int Widget_TabPageIndicator=0x7f0a0004;   public static final int Widget_TabPageIndicator_Text=0x7f0a0005;   public static final int Widget_TitlePageIndicator=0x7f0a0003; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\styleable.code","public static final class styleable {   public static final int CirclePageIndicator_centered=0x00000000;   public static final int CirclePageIndicator_fillColor=0x00000001;   public static final int CirclePageIndicator_orientation=0x00000002;   public static final int CirclePageIndicator_radius=0x00000003;   public static final int CirclePageIndicator_snap=0x00000004;   public static final int CirclePageIndicator_strokeColor=0x00000005;   public static final int CirclePageIndicator_strokeWidth=0x00000006;   public static final int TitlePageIndicator_clipPadding=0x00000000;   public static final int TitlePageIndicator_footerColor=0x00000001;   public static final int TitlePageIndicator_footerIndicatorHeight=0x00000004;   public static final int TitlePageIndicator_footerIndicatorStyle=0x00000003;   public static final int TitlePageIndicator_footerIndicatorUnderlinePadding=0x00000005;   public static final int TitlePageIndicator_footerLineHeight=0x00000002;   public static final int TitlePageIndicator_footerPadding=0x00000006;   public static final int TitlePageIndicator_selectedBold=0x00000008;   public static final int TitlePageIndicator_selectedColor=0x00000007;   public static final int TitlePageIndicator_textColor=0x00000009;   public static final int TitlePageIndicator_textSize=0x0000000a;   public static final int TitlePageIndicator_titlePadding=0x0000000b;   public static final int TitlePageIndicator_topPadding=0x0000000c;   public static final int ViewPagerIndicator_vpiCirclePageIndicatorStyle=0x00000000;   public static final int ViewPagerIndicator_vpiTabPageIndicatorStyle=0x00000002;   public static final int ViewPagerIndicator_vpiTabTextStyle=0x00000003;   public static final int ViewPagerIndicator_vpiTitlePageIndicatorStyle=0x00000001;   public static final int[] CirclePageIndicator={com.bluerabbit.kpopldols.R.attr.centered,com.bluerabbit.kpopldols.R.attr.fillColor,com.bluerabbit.kpopldols.R.attr.orientation,com.bluerabbit.kpopldols.R.attr.radius,com.bluerabbit.kpopldols.R.attr.snap,com.bluerabbit.kpopldols.R.attr.strokeColor,com.bluerabbit.kpopldols.R.attr.strokeWidth};   public static final int[] TitlePageIndicator={com.bluerabbit.kpopldols.R.attr.clipPadding,com.bluerabbit.kpopldols.R.attr.footerColor,com.bluerabbit.kpopldols.R.attr.footerLineHeight,com.bluerabbit.kpopldols.R.attr.footerIndicatorStyle,com.bluerabbit.kpopldols.R.attr.footerIndicatorHeight,com.bluerabbit.kpopldols.R.attr.footerIndicatorUnderlinePadding,com.bluerabbit.kpopldols.R.attr.footerPadding,com.bluerabbit.kpopldols.R.attr.selectedColor,com.bluerabbit.kpopldols.R.attr.selectedBold,com.bluerabbit.kpopldols.R.attr.textColor,com.bluerabbit.kpopldols.R.attr.textSize,com.bluerabbit.kpopldols.R.attr.titlePadding,com.bluerabbit.kpopldols.R.attr.topPadding};   public static final int[] ViewPagerIndicator={com.bluerabbit.kpopldols.R.attr.vpiCirclePageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTitlePageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTabPageIndicatorStyle,com.bluerabbit.kpopldols.R.attr.vpiTabTextStyle}; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\TabPageIndicator.code","public class TabPageIndicator extends HorizontalScrollView implements PageIndicator {   private LayoutInflater mInflater;   private ViewPager.OnPageChangeListener mListener;   int mMaxTabWidth;   private int mSelectedTabIndex;   private View.OnClickListener mTabClickListener;   private LinearLayout mTabLayout;   Runnable mTabSelector;   private ViewPager mViewPager;   public TabPageIndicator(  Context context){     this(context,null);   }   public TabPageIndicator(  Context context,  AttributeSet attrs){     super(context,attrs);     this.mTabClickListener=new View.OnClickListener(){       @Override public void onClick(      View view){         TabView tabView=(TabView)view;         TabPageIndicator.this.mViewPager.setCurrentItem(tabView.getIndex());       }     } ;     setHorizontalScrollBarEnabled(false);     this.mInflater=LayoutInflater.from(context);     this.mTabLayout=new LinearLayout(getContext());     addView(this.mTabLayout,new ViewGroup.LayoutParams(-2,-1));   }   @Override public void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){     int widthMode=View.MeasureSpec.getMode(widthMeasureSpec);     boolean lockedExpanded=widthMode == 1073741824;     setFillViewport(lockedExpanded);     int childCount=this.mTabLayout.getChildCount();     if (childCount > 1 && (widthMode == 1073741824 || widthMode == Integer.MIN_VALUE)) {       if (childCount > 2) {         this.mMaxTabWidth=(int)(View.MeasureSpec.getSize(widthMeasureSpec) * 0.4f);       }  else {         this.mMaxTabWidth=View.MeasureSpec.getSize(widthMeasureSpec) / 2;       }     }  else {       this.mMaxTabWidth=-1;     }     int oldWidth=getMeasuredWidth();     super.onMeasure(widthMeasureSpec,heightMeasureSpec);     int newWidth=getMeasuredWidth();     if (lockedExpanded && oldWidth != newWidth) {       setCurrentItem(this.mSelectedTabIndex);     }   }   private void animateToTab(  int position){     final View tabView=this.mTabLayout.getChildAt(position);     if (this.mTabSelector != null) {       removeCallbacks(this.mTabSelector);     }     this.mTabSelector=new Runnable(){       @Override public void run(){         int scrollPos=tabView.getLeft() - ((TabPageIndicator.this.getWidth() - tabView.getWidth()) / 2);         TabPageIndicator.this.smoothScrollTo(scrollPos,0);         TabPageIndicator.this.mTabSelector=null;       }     } ;     post(this.mTabSelector);   }   @Override public void onAttachedToWindow(){     super.onAttachedToWindow();     if (this.mTabSelector != null) {       post(this.mTabSelector);     }   }   @Override public void onDetachedFromWindow(){     super.onDetachedFromWindow();     if (this.mTabSelector != null) {       removeCallbacks(this.mTabSelector);     }   }   private void addTab(  String text,  int index){     TabView tabView=(TabView)this.mInflater.inflate(R.layout.vpi__tab,(ViewGroup)null);     tabView.init(this,text,index);     tabView.setFocusable(true);     tabView.setOnClickListener(this.mTabClickListener);     this.mTabLayout.addView(tabView,new LinearLayout.LayoutParams(0,-1,1.0f));   }   @Override public void onPageScrollStateChanged(  int arg0){     if (this.mListener != null) {       this.mListener.onPageScrollStateChanged(arg0);     }   }   @Override public void onPageScrolled(  int arg0,  float arg1,  int arg2){     if (this.mListener != null) {       this.mListener.onPageScrolled(arg0,arg1,arg2);     }   }   @Override public void onPageSelected(  int arg0){     setCurrentItem(arg0);     if (this.mListener != null) {       this.mListener.onPageSelected(arg0);     }   }   @Override public void setViewPager(  ViewPager view){     PagerAdapter adapter=view.getAdapter();     if (adapter == null) {       throw new IllegalStateException(""ViewPager does not have adapter instance."");     }     if (!(adapter instanceof TitleProvider)) {       throw new IllegalStateException(""ViewPager adapter must implement TitleProvider to be used with TitlePageIndicator."");     }     this.mViewPager=view;     view.setOnPageChangeListener(this);     notifyDataSetChanged();   }   @Override public void notifyDataSetChanged(){     this.mTabLayout.removeAllViews();     TitleProvider titleProvider=(TitleProvider)this.mViewPager.getAdapter();     int count=((PagerAdapter)titleProvider).getCount();     for (int i=0; i < count; i++) {       addTab(titleProvider.getTitle(i),i);     }     if (this.mSelectedTabIndex > count) {       this.mSelectedTabIndex=count - 1;     }     setCurrentItem(this.mSelectedTabIndex);     requestLayout();   }   @Override public void setViewPager(  ViewPager view,  int initialPosition){     setViewPager(view);     setCurrentItem(initialPosition);   }   @Override public void setCurrentItem(  int item){     if (this.mViewPager == null) {       throw new IllegalStateException(""ViewPager has not been bound."");     }     this.mSelectedTabIndex=item;     int tabCount=this.mTabLayout.getChildCount();     int i=0;     while (i < tabCount) {       View child=this.mTabLayout.getChildAt(i);       boolean isSelected=i == item;       child.setSelected(isSelected);       if (isSelected) {         animateToTab(item);       }       i++;     }   }   @Override public void setOnPageChangeListener(  ViewPager.OnPageChangeListener listener){     this.mListener=listener;   } public static class TabView extends LinearLayout {     private int mIndex;     private TabPageIndicator mParent;     public TabView(    Context context,    AttributeSet attrs){       super(context,attrs);     }     public void init(    TabPageIndicator parent,    String text,    int index){       this.mParent=parent;       this.mIndex=index;       TextView textView=(TextView)findViewById(android.R.id.text1);       textView.setText(text);     }     @Override public void onMeasure(    int widthMeasureSpec,    int heightMeasureSpec){       super.onMeasure(widthMeasureSpec,heightMeasureSpec);       if (this.mParent.mMaxTabWidth > 0 && getMeasuredWidth() > this.mParent.mMaxTabWidth) {         super.onMeasure(View.MeasureSpec.makeMeasureSpec(this.mParent.mMaxTabWidth,1073741824),heightMeasureSpec);       }     }     public int getIndex(){       return this.mIndex;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\TabView.code","public static class TabView extends LinearLayout {   private int mIndex;   private TabPageIndicator mParent;   public TabView(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public void init(  TabPageIndicator parent,  String text,  int index){     this.mParent=parent;     this.mIndex=index;     TextView textView=(TextView)findViewById(android.R.id.text1);     textView.setText(text);   }   @Override public void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){     super.onMeasure(widthMeasureSpec,heightMeasureSpec);     if (this.mParent.mMaxTabWidth > 0 && getMeasuredWidth() > this.mParent.mMaxTabWidth) {       super.onMeasure(View.MeasureSpec.makeMeasureSpec(this.mParent.mMaxTabWidth,1073741824),heightMeasureSpec);     }   }   public int getIndex(){     return this.mIndex;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\TitlePageIndicator.code","!org.eclipse.jdt.core.dom.TypeDeclaration@445cbe9c"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\com.viewpagerindicator\TitleProvider.code","public interface TitleProvider {   String getTitle(  int i); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neoblue.app.fun.db\idolDBhelper.code","public class idolDBhelper extends SQLiteOpenHelper {   public idolDBhelper(  Context context){     super(context,""idol_db"",(SQLiteDatabase.CursorFactory)null,1);   }   @Override public void onCreate(  SQLiteDatabase db){   }   @Override public void onUpgrade(  SQLiteDatabase db,  int oldVersion,  int newVersion){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\BorderImageView.code","public class BorderImageView extends ImageView {   Activity mActivity;   String mOrgUrl;   String mTbUrl;   public BorderImageView(  Context paramContext){     super(paramContext);     setEvent(paramContext);     setBackgroundColor(-16777216);   }   public BorderImageView(  Context paramContext,  AttributeSet paramAttributeSet){     super(paramContext,paramAttributeSet);     setEvent(paramContext);   }   public BorderImageView(  Context paramContext,  AttributeSet paramAttributeSet,  int paramInt){     super(paramContext,paramAttributeSet,paramInt);     setEvent(paramContext);   }   private void setEvent(  Context paramContext){   }   @Override protected void onMeasure(  int paramInt1,  int paramInt2){     ViewGroup.LayoutParams localLayoutParams=getLayoutParams();     LinearLayout.LayoutParams localLayoutParams1=new LinearLayout.LayoutParams(localLayoutParams);     localLayoutParams1.setMargins(1,2,2,1);     setLayoutParams(localLayoutParams1);     super.onMeasure(paramInt1,paramInt2);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\BorderImageViewGame.code","public class BorderImageViewGame extends ImageView {   Activity mActivity;   String mOrgUrl;   String mTbUrl;   public BorderImageViewGame(  Context paramContext){     super(paramContext);     setEvent(paramContext);   }   public BorderImageViewGame(  Context paramContext,  AttributeSet paramAttributeSet){     super(paramContext,paramAttributeSet);     setEvent(paramContext);   }   public BorderImageViewGame(  Context paramContext,  AttributeSet paramAttributeSet,  int paramInt){     super(paramContext,paramAttributeSet,paramInt);     setEvent(paramContext);   }   private void setEvent(  Context paramContext){   }   @Override protected void onMeasure(  int paramInt1,  int paramInt2){     ViewGroup.LayoutParams localLayoutParams=getLayoutParams();     LinearLayout.LayoutParams localLayoutParams1=new LinearLayout.LayoutParams(localLayoutParams);     localLayoutParams1.setMargins(1,1,0,0);     setLayoutParams(localLayoutParams1);     super.onMeasure(paramInt1,paramInt2);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\CustomScrollView.code","public class CustomScrollView extends ScrollView {   boolean listen;   int margin;   OnScrollListener onScrollListener;   int prefVScrollRang; public interface OnScrollListener {     void onScrollBottom();   }   public CustomScrollView(  Context context){     super(context);     this.listen=true;     this.margin=10;     setFadingEdgeLength(0);   }   public CustomScrollView(  Context paramContext,  AttributeSet paramAttributeSet){     super(paramContext,paramAttributeSet);     this.listen=true;     this.margin=10;     setFadingEdgeLength(0);   }   public CustomScrollView(  Context paramContext,  AttributeSet paramAttributeSet,  int paramInt){     super(paramContext,paramAttributeSet,paramInt);     this.listen=true;     this.margin=10;   }   @Override public void computeScroll(){     super.computeScroll();     if (this.onScrollListener != null && this.listen) {       int i=getScrollY();       int j=getHeight();       int k=i + j;       int m=computeVerticalScrollRange();       int n=this.margin;       int i1=m - n;       if (k >= i1) {         this.listen=false;         this.onScrollListener.onScrollBottom();       }     }   }   public void setStatus(  Boolean bool){     this.listen=bool.booleanValue();   }   public void setOnScrollListener(  OnScrollListener paramOnScrollListener){     this.onScrollListener=paramOnScrollListener;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\FlingGallery.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4409754d"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\FlingGalleryAnimation.code","public class FlingGalleryAnimation extends Animation {   private boolean mIsAnimationInProgres=false;   private int mRelativeViewNumber=0;   private int mInitialOffset=0;   private int mTargetOffset=0;   private int mTargetDistance=0;   public FlingGalleryAnimation(){   }   public void prepareAnimation(  int relativeViewNumber){     if (this.mRelativeViewNumber != relativeViewNumber) {       if (this.mIsAnimationInProgres) {         int newDirection=relativeViewNumber == FlingGallery.this.getPrevViewNumber(this.mRelativeViewNumber) ? 1 : -1;         int animDirection=this.mTargetDistance < 0 ? 1 : -1;         if (animDirection == newDirection) {           FlingGallery.this.mViews[0].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);           FlingGallery.this.mViews[1].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);           FlingGallery.this.mViews[2].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);         }       }       this.mRelativeViewNumber=relativeViewNumber;     }     this.mInitialOffset=FlingGallery.this.mViews[this.mRelativeViewNumber].getCurrentOffset();     this.mTargetOffset=FlingGallery.this.getViewOffset(this.mRelativeViewNumber,this.mRelativeViewNumber);     this.mTargetDistance=this.mTargetOffset - this.mInitialOffset;     setDuration(FlingGallery.this.mAnimationDuration);     setInterpolator(FlingGallery.this.mDecelerateInterpolater);     this.mIsAnimationInProgres=true;   }   @Override protected void applyTransformation(  float interpolatedTime,  Transformation transformation){     if (interpolatedTime > 1.0f) {       interpolatedTime=1.0f;     }     int offset=this.mInitialOffset + ((int)(this.mTargetDistance * interpolatedTime));     for (int viewNumber=0; viewNumber < 3; viewNumber++) {       if ((this.mTargetDistance > 0 && viewNumber != FlingGallery.this.getNextViewNumber(this.mRelativeViewNumber)) || (this.mTargetDistance < 0 && viewNumber != FlingGallery.this.getPrevViewNumber(this.mRelativeViewNumber))) {         FlingGallery.this.mViews[viewNumber].setOffset(offset,0,this.mRelativeViewNumber);       }     }   }   @Override public boolean getTransformation(  long currentTime,  Transformation outTransformation){     if (super.getTransformation(currentTime,outTransformation)) {       return (FlingGallery.this.mIsTouched || FlingGallery.this.mIsDragging) ? false : true;     }     FlingGallery.this.mViews[0].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);     FlingGallery.this.mViews[1].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);     FlingGallery.this.mViews[2].setOffset(this.mTargetOffset,0,this.mRelativeViewNumber);     this.mIsAnimationInProgres=false;     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\FlingGalleryView.code","public class FlingGalleryView {   private View mExternalView=null;   private LinearLayout mInternalLayout;   private FrameLayout mInvalidLayout;   private FrameLayout mParentLayout;   private int mViewNumber;   public FlingGalleryView(  int viewNumber,  FrameLayout parentLayout){     this.mInvalidLayout=null;     this.mInternalLayout=null;     this.mViewNumber=viewNumber;     this.mParentLayout=parentLayout;     this.mInvalidLayout=new FrameLayout(FlingGallery.this.mContext);     this.mInvalidLayout.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));     this.mInternalLayout=new LinearLayout(FlingGallery.this.mContext);     this.mInternalLayout.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));     this.mParentLayout.addView(this.mInternalLayout);   }   public void recycleView(  int newPosition){     if (this.mExternalView != null) {       this.mInternalLayout.removeView(this.mExternalView);     }     if (FlingGallery.this.mAdapter != null) {       if (newPosition >= FlingGallery.this.getFirstPosition() && newPosition <= FlingGallery.this.getLastPosition()) {         this.mExternalView=FlingGallery.this.mAdapter.getView(newPosition,this.mExternalView,this.mInternalLayout);       }  else {         this.mExternalView=this.mInvalidLayout;       }     }     if (this.mExternalView != null) {       this.mInternalLayout.addView(this.mExternalView,new LinearLayout.LayoutParams(-1,-1));     }   }   public void setOffset(  int xOffset,  int yOffset,  int relativeViewNumber){     this.mInternalLayout.scrollTo(FlingGallery.this.getViewOffset(this.mViewNumber,relativeViewNumber) + xOffset,yOffset);   }   public int getCurrentOffset(){     return this.mInternalLayout.getScrollX();   }   public void requestFocus(){     this.mInternalLayout.requestFocus();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\FlingGestureDetector.code","private class FlingGestureDetector extends GestureDetector.SimpleOnGestureListener {   private FlingGestureDetector(){   }   FlingGestureDetector(  FlingGallery flingGallery,  FlingGestureDetector flingGestureDetector){     this();   }   @Override public boolean onDown(  MotionEvent e){     FlingGallery.this.mIsTouched=true;     FlingGallery.this.mFlingDirection=0;     return true;   }   @Override public boolean onScroll(  MotionEvent e1,  MotionEvent e2,  float distanceX,  float distanceY){     if (e2.getAction() == 2) {       if (!FlingGallery.this.mIsDragging) {         FlingGallery.this.mIsTouched=true;         FlingGallery.this.mIsDragging=true;         FlingGallery.this.mFlingDirection=0;         FlingGallery.this.mScrollTimestamp=System.currentTimeMillis();         FlingGallery.this.mCurrentOffset=FlingGallery.this.mViews[FlingGallery.this.mCurrentViewNumber].getCurrentOffset();       }       float maxVelocity=FlingGallery.this.mGalleryWidth / (FlingGallery.this.mAnimationDuration / 1000.0f);       long timestampDelta=System.currentTimeMillis() - FlingGallery.this.mScrollTimestamp;       float maxScrollDelta=maxVelocity * (((float)timestampDelta) / 1000.0f);       float currentScrollDelta=e1.getX() - e2.getX();       if (currentScrollDelta < (-1.0f) * maxScrollDelta) {         currentScrollDelta=maxScrollDelta * (-1.0f);       }       if (currentScrollDelta > maxScrollDelta) {         currentScrollDelta=maxScrollDelta;       }       int scrollOffset=Math.round(FlingGallery.this.mCurrentOffset + currentScrollDelta);       if (scrollOffset >= FlingGallery.this.mGalleryWidth) {         scrollOffset=FlingGallery.this.mGalleryWidth;       }       if (scrollOffset <= FlingGallery.this.mGalleryWidth * (-1)) {         scrollOffset=FlingGallery.this.mGalleryWidth * (-1);       }       FlingGallery.this.mViews[0].setOffset(scrollOffset,0,FlingGallery.this.mCurrentViewNumber);       FlingGallery.this.mViews[1].setOffset(scrollOffset,0,FlingGallery.this.mCurrentViewNumber);       FlingGallery.this.mViews[2].setOffset(scrollOffset,0,FlingGallery.this.mCurrentViewNumber);       return false;     }     return false;   }   @Override public boolean onFling(  MotionEvent e1,  MotionEvent e2,  float velocityX,  float velocityY){     if (Math.abs(e1.getY() - e2.getY()) > 250.0f) {       return false;     }     if (e2.getX() - e1.getX() > 120.0f && Math.abs(velocityX) > 400.0f) {       FlingGallery.this.movePrevious();     }     if (e1.getX() - e2.getX() > 120.0f && Math.abs(velocityX) > 400.0f) {       FlingGallery.this.moveNext();       return false;     }     return false;   }   @Override public void onLongPress(  MotionEvent e){     FlingGallery.this.mFlingDirection=0;     FlingGallery.this.processGesture();   }   @Override public void onShowPress(  MotionEvent e){   }   @Override public boolean onSingleTapUp(  MotionEvent e){     FlingGallery.this.mFlingDirection=0;     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\ImageViewTouch.code","public class ImageViewTouch extends ImageView {   private static final boolean D=false;   private static final int DRAG=1;   private static final int HEIGHT=1;   private static final int NONE=0;   private static final String TAG=""ImgViewChild"";   private static final int WIDTH=0;   private static final int ZOOM=2;   private Drawable d;   private boolean isInit;   private boolean isMoving;   private boolean isRestoring;   private boolean isScaling;   private Matrix matrix;   private PointF mid;   private int mode;   private float oldDist;   private Matrix savedMatrix;   private Matrix savedMatrix2;   private PointF start;   public ImageViewTouch(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);     this.mode=0;     this.start=new PointF();     this.mid=new PointF();     this.oldDist=1.0f;     this.isInit=D;     setScaleType(ImageView.ScaleType.MATRIX);     this.matrix=new Matrix();     this.savedMatrix=new Matrix();     this.savedMatrix2=new Matrix();   }   public ImageViewTouch(  Context context,  AttributeSet attrs){     this(context,attrs,0);   }   public ImageViewTouch(  Context context){     this(context,null);   }   @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){     this.d=getDrawable();     super.onLayout(changed,left,top,right,bottom);     if (!this.isInit) {       init();       this.isInit=true;     }   }   @Override public void setImageBitmap(  Bitmap bm){     super.setImageBitmap(bm);     this.isInit=D;     init();   }   @Override public void setImageResource(  int resId){     super.setImageResource(resId);     this.d=getDrawable();     this.isInit=D;     init();   }   protected void init(){     this.d=getDrawable();     initImgPos();     setImageMatrix(this.matrix);   }   public void initImgPos(){     float[] value=new float[9];     this.matrix.getValues(value);     int width=getWidth();     int height=getHeight();     if (this.d != null) {       int imageWidth=this.d.getIntrinsicWidth();       int imageHeight=this.d.getIntrinsicHeight();       if (imageWidth > width || imageHeight > height) {         float xratio=width / imageWidth;         float yratio=height / imageHeight;         float max=Math.max(xratio,yratio);         value[4]=max;         value[0]=max;       }       int scaleWidth=(int)(imageWidth * value[0]);       int scaleHeight=(int)(imageHeight * value[4]);       value[2]=0.0f;       value[5]=0.0f;       value[2]=(width / 2.0f) - (scaleWidth / 2.0f);       value[5]=(height / 2.0f) - (scaleHeight / 2.0f);       this.matrix.setValues(value);       setImageMatrix(this.matrix);     }   }   @Override public boolean onTouchEvent(  MotionEvent event){ switch (event.getAction() & MotionEventCompat.ACTION_MASK) { case 0:       this.savedMatrix.set(this.matrix);     this.start.set(event.getX(),event.getY());   this.mode=1; break; case 1: case 6: this.mode=0; restore(this.matrix); break; case 2: if (this.mode == 1) { this.matrix.set(this.savedMatrix); this.matrix.postTranslate(event.getX() - this.start.x,event.getY() - this.start.y); break; }  else if (this.mode == 2) { float newDist=spacing(event); if (newDist > 10.0f) { this.matrix.set(this.savedMatrix); float scale=newDist / this.oldDist; this.matrix.postScale(scale,scale,this.mid.x,this.mid.y); break; } } break; case 5: this.oldDist=spacing(event); if (this.oldDist > 10.0f) { this.savedMatrix.set(this.matrix); midPoint(this.mid,event); this.mode=2; break; } break; } matrixTuning(this.matrix); setImageMatrix(this.savedMatrix2); return true; } private float spacing(MotionEvent event){ float x=event.getX(0) - event.getX(1); float y=event.getY(0) - event.getY(1); return FloatMath.sqrt((x * x) + (y * y)); } private void midPoint(PointF point,MotionEvent event){ float x=event.getX(0) + event.getX(1); float y=event.getY(0) + event.getY(1); point.set(x / 2.0f,y / 2.0f); } private void matrixTuning(Matrix matrix){ float[] value=new float[9]; matrix.getValues(value); float[] savedValue=new float[9]; this.savedMatrix2.getValues(savedValue); int width=getWidth(); int height=getHeight(); Drawable d=getDrawable(); if (d != null) { int imageWidth=d.getIntrinsicWidth(); int imageHeight=d.getIntrinsicHeight(); int scaleWidth=(int)(imageWidth * value[0]); int scaleHeight=(int)(imageHeight * value[4]); if (value[2] < width - scaleWidth) { value[2]=width - scaleWidth; } if (value[5] < height - scaleHeight) { value[5]=height - scaleHeight; } if (value[2] > 0.0f) { value[2]=0.0f; } if (value[5] > 0.0f) { value[5]=0.0f; } if (value[0] > 10.0f || value[4] > 10.0f) { value[0]=savedValue[0]; value[4]=savedValue[4]; value[2]=savedValue[2]; value[5]=savedValue[5]; } if (imageWidth <= width && imageHeight <= height) { if (value[0] < 1.0f) { value[0]=1.0f; } if (value[4] < 1.0f) { value[4]=1.0f; } }  else if (scaleWidth < width && scaleHeight < height) { int target=imageWidth < imageHeight ? 1 : 0; if (target == 0) { float f=width / imageWidth; value[4]=f; value[0]=f; } if (target == 1) { float f2=height / imageHeight; value[4]=f2; value[0]=f2; } int scaleWidth2=(int)(imageWidth * value[0]); int scaleHeight2=(int)(imageHeight * value[4]); if (scaleWidth2 > width) { float f3=width / imageWidth; value[4]=f3; value[0]=f3; } if (scaleHeight2 > height) { float f4=height / imageHeight; value[4]=f4; value[0]=f4; } } int scaleWidth3=(int)(imageWidth * value[0]); int scaleHeight3=(int)(imageHeight * value[4]); if (scaleWidth3 < width) { value[2]=(width / 2.0f) - (scaleWidth3 / 2.0f); } if (scaleHeight3 < height) { value[5]=(height / 2.0f) - (scaleHeight3 / 2.0f); } matrix.setValues(value); this.savedMatrix2.set(matrix); } } private void restore(Matrix m){ setImageMatrix(this.matrix); } private void dumpEvent(MotionEvent event){ String[] names={""DOWN"",""UP"",""MOVE"",""CANCEL"",""OUTSIDE"",""POINTER_DOWN"",""POINTER_UP"",""7?"",""8?"",""9?""}; StringBuilder sb=new StringBuilder(); int action=event.getAction(); int actionCode=action & MotionEventCompat.ACTION_MASK; sb.append(""event ACTION_"").append(names[actionCode]); if (actionCode == 5 || actionCode == 6) { sb.append(""(pid "").append(action >> 8); sb.append("")""); } sb.append(""[""); for (int i=0; i < event.getPointerCount(); i++) { sb.append(""#"").append(i); sb.append(""(pid "").append(event.getPointerId(i)); sb.append("")="").append((int)event.getX(i)); sb.append("","").append((int)event.getY(i)); if (i + 1 < event.getPointerCount()) { sb.append("";""); } } sb.append(""]""); Log.d(TAG,sb.toString()); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\OnScrollListener.code","public interface OnScrollListener {   void onScrollBottom(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\ProgressHUD.code","public class ProgressHUD extends Dialog {   public ProgressHUD(  Context context){     super(context);   }   public ProgressHUD(  Context context,  int theme){     super(context,theme);   }   @Override public void onWindowFocusChanged(  boolean hasFocus){   }   public void setMessage(  CharSequence message){     if (message != null && message.length() > 0) {       findViewById(R.id.message).setVisibility(0);       TextView txt=(TextView)findViewById(R.id.message);       txt.setText(message);       txt.invalidate();     }   }   public static ProgressHUD show(  Context context,  CharSequence message,  int gravity,  boolean indeterminate,  boolean cancelable,  DialogInterface.OnCancelListener cancelListener){     ProgressHUD dialog=new ProgressHUD(context,R.style.ProgressHUD);     dialog.setTitle("""");     dialog.setContentView(R.layout.progress_hud);     if (message == null || message.length() == 0) {       dialog.findViewById(R.id.message).setVisibility(8);     }  else {       TextView txt=(TextView)dialog.findViewById(R.id.message);       txt.setText(message);     }     dialog.setCancelable(cancelable);     dialog.setOnCancelListener(cancelListener);     dialog.getWindow().getAttributes().gravity=gravity;     WindowManager.LayoutParams lp=dialog.getWindow().getAttributes();     lp.dimAmount=0.2f;     dialog.getWindow().setAttributes(lp);     dialog.show();     return dialog;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\RoundedImageView.code","public class RoundedImageView extends ImageView {   public RoundedImageView(  Context context){     super(context);   }   public RoundedImageView(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public RoundedImageView(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);   }   @Override @SuppressLint({""DrawAllocation""}) protected void onDraw(  Canvas canvas){     Bitmap mScaledBitmap;     BitmapDrawable drawable=(BitmapDrawable)getDrawable();     if (drawable != null && getWidth() != 0 && getHeight() != 0) {       Bitmap fullSizeBitmap=drawable.getBitmap();       int scaledWidth=getMeasuredWidth();       int scaledHeight=getMeasuredHeight();       if (scaledWidth == fullSizeBitmap.getWidth() && scaledHeight == fullSizeBitmap.getHeight()) {         mScaledBitmap=fullSizeBitmap;       }  else {         mScaledBitmap=Bitmap.createScaledBitmap(fullSizeBitmap,scaledWidth,scaledHeight,true);       }       Bitmap roundBitmap=getRoundedCornerBitmap(getContext(),mScaledBitmap,10,scaledWidth,scaledHeight,false,false,false,false);       canvas.drawBitmap(roundBitmap,0.0f,0.0f,(Paint)null);     }   }   public Bitmap getRoundedCornerBitmap(  Context context,  Bitmap input,  int pixels,  int w,  int h,  boolean squareTL,  boolean squareTR,  boolean squareBL,  boolean squareBR){     Bitmap output=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);     Canvas canvas=new Canvas(output);     float densityMultiplier=context.getResources().getDisplayMetrics().density;     Paint paint=new Paint();     Rect rect=new Rect(0,0,w,h);     RectF rectF=new RectF(rect);     float roundPx=pixels * densityMultiplier;     paint.setAntiAlias(true);     canvas.drawARGB(0,0,0,0);     paint.setColor(-12434878);     canvas.drawRoundRect(rectF,roundPx,roundPx,paint);     if (squareTL) {       canvas.drawRect(0.0f,0.0f,w / 2,h / 2,paint);     }     if (squareTR) {       canvas.drawRect(w / 2,0.0f,w,h / 2,paint);     }     if (squareBL) {       canvas.drawRect(0.0f,h / 2,w / 2,h,paint);     }     if (squareBR) {       canvas.drawRect(w / 2,h / 2,w,h,paint);     }     paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));     canvas.drawBitmap(input,0.0f,0.0f,paint);     return output;   }   Bitmap getRoundedCornerBitmap(  Bitmap bitmap){     Bitmap output=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Bitmap.Config.ARGB_8888);     Canvas canvas=new Canvas(output);     Paint paint=new Paint();     Rect rect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());     RectF rectF=new RectF(rect);     paint.setAntiAlias(true);     canvas.drawARGB(0,0,0,0);     paint.setColor(-16776961);     canvas.drawRoundRect(rectF,12.0f,12.0f,paint);     paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));     canvas.drawBitmap(bitmap,rect,rect,paint);     return output;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.custview\RoundTextView.code","public class RoundTextView extends TextView {   Activity mActivity;   String mOrgUrl;   String mTbUrl;   public RoundTextView(  Context paramContext){     super(paramContext);     setEvent(paramContext);     setBackgroundColor(-16777216);   }   public RoundTextView(  Context paramContext,  AttributeSet paramAttributeSet){     super(paramContext,paramAttributeSet);     setEvent(paramContext);   }   public RoundTextView(  Context paramContext,  AttributeSet paramAttributeSet,  int paramInt){     super(paramContext,paramAttributeSet,paramInt);     setEvent(paramContext);   }   private void setEvent(  Context paramContext){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\AlbumInfo.code","public class AlbumInfo {   public String albumid;   public String content;   public String date;   public String link;   public String name;   public String singer;   public String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\dGameInfo.code","public class dGameInfo {   public String artid;   public String content;   public String gname;   public String groupid;   public Bitmap img;   public String name;   public int rank;   public String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\gameinfo.code","public class gameinfo {   public String cor;   public String idx;   public String name;   public String type; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\gamepan.code","public class gamepan {   public int idx;   public int split; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GoogleImage.code","public class GoogleImage {   public String height;   public String link;   public String thumnail;   public String title;   public String width; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GroupChart.code","public class GroupChart {   public String artid;   public String content;   public String date;   public String gname;   public String name;   public String rank;   public String sex;   public String thum;   public String updown;   public String updownrank; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GroupContent.code","public class GroupContent {   String content;   String title; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GroupInfo.code","public class GroupInfo {   public ArrayList<GroupContent> content;   public String groupid;   public ArrayList<GroupMember> member;   public String musicid;   public String name;   public ArrayList<GroupSite> site;   public String skey;   public String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GroupMember.code","public class GroupMember {   String link;   String name;   String posi;   String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\GroupSite.code","public class GroupSite {   public String link;   public String name; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\IdolInfo.code","public class IdolInfo {   public String fan;   public String fav;   public String groupid;   public String member;   public String name;   public String newyn;   public String sex;   public String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\MemberInfo.code","public class MemberInfo {   ArrayList<GroupContent> content;   String name;   ArrayList<GroupSite> site;   String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\NewsInfo.code","public class NewsInfo {   public String bottom;   public String content;   public String link;   public String thum;   public String title; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\photoInfo.code","public class photoInfo {   public String cpid;   public String cpname;   public String id;   public String image;   public String keywords;   public String summary;   public String title; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\rankInfo.code","public class rankInfo {   public String artid;   public String device;   public String gmove;   public String gname;   public String gthum;   public String gtime;   public String gurl;   public String musicid;   public String nick;   public String parentid;   public String parentname;   public String rank;   public String wdate; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\SongInfo.code","public class SongInfo {   public String albumid;   public String name;   public String singer;   public String songid;   public String wordsid; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\splite.code","public class splite {   public int idx;   public Bitmap img; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.data\YouTubeInfo.code","public class YouTubeInfo {   public String content;   public String date;   public String hit;   public String link;   public String name;   public String thum;   public String time;   public String writer; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\AncBestImgFragment.code","public final class AncBestImgFragment extends Fragment {   private static final String KEY_CONTENT=""TestFragment:Content"";   protected static final newGSearch.OnSearchResult searchResult=null;   newGSearch GParser;   AQuery aq;   private int cpage;   int displayW;   private Context mContext;   private boolean mLockListView;   private SharedPreferences mPrefs;   Intent myintent;   private int opt;   int page;   LinearLayout.LayoutParams paramsFillFill;   LinearLayout.LayoutParams paramsFillWrap;   LinearLayout.LayoutParams paramsWrapWrap;   int position;   LinearLayout rowWrapper;   CustomScrollView scroll;   CustomScrollView scroll1;   ProgressBar topProgress;   LinearLayout wrapper;   final int columnCnt=3;   private String mContent=""???"";   private String mSearch="""";   private String groupId="""";   private String artId="""";   public static AncBestImgFragment newInstance(  String content,  String Search,  String groupid,  String artid){     AncBestImgFragment fragment=new AncBestImgFragment();     StringBuilder builder=new StringBuilder();     for (int i=0; i < 20; i++) {       builder.append(Search).append("" "");     }     builder.deleteCharAt(builder.length() - 1);     fragment.mContent=builder.toString();     fragment.mSearch=Search;     fragment.groupId=groupid;     fragment.artId=artid;     return fragment;   }   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     if (savedInstanceState != null && savedInstanceState.containsKey(KEY_CONTENT)) {       this.mContent=savedInstanceState.getString(KEY_CONTENT);     }     this.mLockListView=true;     this.cpage=0;     this.opt=1;     View LocalView=inflater.inflate(R.layout.image_fragment,(ViewGroup)null);     this.topProgress=(ProgressBar)LocalView.findViewById(R.id.bottom_progress);     this.scroll1=(CustomScrollView)LocalView.findViewById(R.id.scroll_container);     this.wrapper=(LinearLayout)LocalView.findViewById(R.id.container);     LinearLayout.LayoutParams localLayoutParams1=new LinearLayout.LayoutParams(-1,-1);     this.paramsFillFill=localLayoutParams1;     LinearLayout.LayoutParams localLayoutParams2=new LinearLayout.LayoutParams(-1,-1);     this.paramsFillWrap=localLayoutParams2;     LinearLayout.LayoutParams localLayoutParams3=new LinearLayout.LayoutParams(-1,-1);     this.paramsWrapWrap=localLayoutParams3;     this.position=0;     int k=getActivity().getWindowManager().getDefaultDisplay().getWidth();     this.displayW=k;     new ArrayList();     this.aq=new AQuery((Activity)getActivity());     best();     return LocalView;   }   private void best(){     Map<String,Object> params=new HashMap<>();     params.put(""groupid"",this.groupId);     AjaxCallback<JSONObject> cb=new AjaxCallback<>();     cb.url(""http://180.71.58.225/app/idol/idolbest.php"").params(params).type(JSONObject.class).encoding(""EUC-KR"").weakHandler(this,""bestresult"");     this.aq.ajax(cb);   }   public void bestresult(  String url,  JSONObject json,  AjaxStatus paramAjaxStatus){     new ArrayList();     try {       this.topProgress.setVisibility(8);       ArrayList<GoogleImage> dataTemp=setData2(json);       imgList(dataTemp);     }  catch (    Exception e) {     }   }   public ArrayList<GoogleImage> setData2(  JSONObject json){     ArrayList<GoogleImage> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       GoogleImage item=new GoogleImage();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.link=localJSONObject2.optString(""url"");         item.thumnail=localJSONObject2.optString(""thum"");       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   }   public void imgList(  ArrayList<GoogleImage> paramArrayList){     int i=1;     int j=this.displayW / 3;     Iterator localIterator=paramArrayList.iterator();     this.scroll1.setStatus(true);     while (localIterator.hasNext()) {       final GoogleImage localImageData=localIterator.next();       if (i % 3 == 1) {         LinearLayout localLinearLayout1=new LinearLayout(getActivity());         this.rowWrapper=localLinearLayout1;         LinearLayout localLinearLayout2=this.rowWrapper;         LinearLayout.LayoutParams localLayoutParams1=this.paramsFillWrap;         localLinearLayout2.setLayoutParams(localLayoutParams1);         this.rowWrapper.setOrientation(0);       }       BorderImageView localBorderImageView=new BorderImageView(getActivity());       ImageView.ScaleType localScaleType=ImageView.ScaleType.FIT_XY;       localBorderImageView.setScaleType(localScaleType);       this.aq.id(localBorderImageView).image(localImageData.thumnail,true,true,0,0,null,-1,1.0f);       LinearLayout.LayoutParams localLayoutParams2=new LinearLayout.LayoutParams(j,j);       localBorderImageView.setLayoutParams(localLayoutParams2);       localBorderImageView.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           AncBestImgFragment.this.myintent=new Intent(AncBestImgFragment.this.getActivity(),(Class<?>)newView.class);           AncBestImgFragment.this.myintent.putExtra(""message"",localImageData.link);           AncBestImgFragment.this.myintent.putExtra(""bestcheck"",""Y"");           AncBestImgFragment.this.myintent.putExtra(""thum"",localImageData.thumnail);           AncBestImgFragment.this.startActivity(AncBestImgFragment.this.myintent);         }       } );       this.rowWrapper.addView(localBorderImageView);       if (i % 3 != 0) {         int k=paramArrayList.size();         if (i == k) {         }       }  else {         LinearLayout localLinearLayout3=this.wrapper;         LinearLayout localLinearLayout4=this.rowWrapper;         int m=this.wrapper.getChildCount() - 1;         localLinearLayout3.addView(localLinearLayout4,m);       }       i++;     }   }   @Override public void onSaveInstanceState(  Bundle outState){     super.onSaveInstanceState(outState);     outState.putString(KEY_CONTENT,this.mContent);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\AncListImgFragment.code","public final class AncListImgFragment extends Fragment {   private static final String KEY_CONTENT=""TestFragment:Content"";   protected static final YouTubeSearch.OnSearchResult searchResult=null;   YouTubeSearch YouSearch;   private ProgressBar bottom_prog;   int displayW;   private String keyword;   private ListView li;   EfficientAdapter mAdapter;   private Context mContext;   private boolean mLockListView;   private SharedPreferences mPrefs;   Intent myintent;   private int opt;   int page;   LinearLayout.LayoutParams paramsFillFill;   LinearLayout.LayoutParams paramsFillWrap;   LinearLayout.LayoutParams paramsWrapWrap;   int position;   LinearLayout rowWrapper;   CustomScrollView scroll;   LinearLayout wrapper;   private int cpage=0;   private int spage=12;   final int columnCnt=3;   private String mContent=""???"";   private String mSearch="""";   ArrayList<YouTubeInfo> mRowList=new ArrayList<>();   int pagesize=20;   public static AncListImgFragment newInstance(  String content,  String Search){     AncListImgFragment fragment=new AncListImgFragment();     StringBuilder builder=new StringBuilder();     for (int i=0; i < 20; i++) {       builder.append(Search).append("" "");     }     builder.deleteCharAt(builder.length() - 1);     fragment.mContent=builder.toString();     fragment.mSearch=Search;     return fragment;   }   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     if (savedInstanceState != null && savedInstanceState.containsKey(KEY_CONTENT)) {       this.mContent=savedInstanceState.getString(KEY_CONTENT);     }     this.mLockListView=true;     this.cpage=0;     this.opt=1;     View LocalView=inflater.inflate(R.layout.videolist,(ViewGroup)null);     this.li=(ListView)LocalView.findViewById(R.id.listvideo);     this.bottom_prog=(ProgressBar)LocalView.findViewById(R.id.bottom_progress);     this.position=0;     this.mSearch=this.mSearch.replace(""ê±¸ê·¸ë£¹"","""");     this.mSearch=this.mSearch.replace(""ê·¸ë£¹"","""");     this.mLockListView=true;     makea();     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(AncListImgFragment.this.mRowList.get(position).link));         AncListImgFragment.this.startActivity(intent);       }     } );     this.li.setOnScrollListener(new AbsListView.OnScrollListener(){       @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){         int count=totalItemCount - visibleItemCount;         if (firstVisibleItem >= count && totalItemCount != 0 && !AncListImgFragment.this.mLockListView) {           AncListImgFragment.this.bottom_prog.setVisibility(0);           AncListImgFragment.this.mLockListView=true;           AncListImgFragment.this.makeaAdd();         }       }       @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){       }     } );     return LocalView;   }   private void makea(){     AQuery aq=new AQuery((Activity)getActivity());     YouTubeSearch YouSearch1=new YouTubeSearch(aq);     this.bottom_prog.setVisibility(0);     YouTubeSearch.OnSearchResult searchResult1=new YouTubeSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<YouTubeInfo> paramArrayList){         AncListImgFragment.this.mRowList.addAll(paramArrayList);         AncListImgFragment.this.cpage=1;         try {           AncListImgFragment.this.mAdapter=new EfficientAdapter(AncListImgFragment.this.getActivity(),AncListImgFragment.this.mRowList);           AncListImgFragment.this.li.setAdapter((ListAdapter)AncListImgFragment.this.mAdapter);         }  catch (        Exception e) {           Toast.makeText(AncListImgFragment.this.getActivity(),e.toString(),1000).show();         }         AncListImgFragment.this.bottom_prog.setVisibility(8);         AncListImgFragment.this.mLockListView=false;       }     } ;     YouSearch1.search(this.mSearch,this.cpage,0,searchResult1);   }   public void makeaAdd(){     AQuery aq=new AQuery((Activity)getActivity());     YouTubeSearch YouSearch2=new YouTubeSearch(aq);     YouTubeSearch.OnSearchResult searchResult2=new YouTubeSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<YouTubeInfo> paramArrayList){         AncListImgFragment.this.mRowList.addAll(paramArrayList);         AncListImgFragment.this.bottom_prog.setVisibility(8);         AncListImgFragment.this.mLockListView=false;         AncListImgFragment.this.cpage++;         AncListImgFragment.this.mAdapter.notifyDataSetChanged();       }     } ;     YouSearch2.search(this.mSearch,this.cpage,0,searchResult2);   } private static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<YouTubeInfo> data;     private Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;     }     public EfficientAdapter(    Context context,    ArrayList<YouTubeInfo> member){       this.data=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.data=member;       this.aq=new AQuery(context);       this.mContext=context;     }     @Override public int getCount(){       return this.data.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_video,(ViewGroup)null);         holder=new ViewHolder();         holder.text=(TextView)convertView.findViewById(R.id.text);         holder.textM=(TextView)convertView.findViewById(R.id.text2);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.time=(TextView)convertView.findViewById(R.id.time);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.text.setText(this.data.get(position).name);       holder.textM.setText(""ê²Œì‹œìž� :"" + this.data.get(position).writer + "" \nê²Œì‹œì�¼: ""+ this.data.get(position).date+ "" \n"");       this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);       holder.time.setText(getTimefor(this.data.get(position).time));       return convertView;     } static class ViewHolder {       ImageView icon;       ImageView iconLeft;       TextView text;       TextView textM;       TextView time;       ViewHolder(){       }     }     public String getTimefor(    String du){       int i=Integer.parseInt(du);       int tmp1=i / 60;       int tmp1n=i % 60;       int tmp2=tmp1 / 60;       int tmp2n=tmp1 % 60;       int i2=tmp2 / 60;       int tmp3n=tmp2 % 60;       if (tmp3n == 0) {         String retVal=String.valueOf(Integer.toString(tmp2n)) + "":"" + Integer.toString(tmp1n);         return retVal;       }       String retVal2=String.valueOf(Integer.toString(tmp3n)) + "":"" + Integer.toString(tmp2n)+ "":""+ Integer.toString(tmp1n);       return retVal2;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\AncScImgFragment.code","public final class AncScImgFragment extends Fragment {   private static final String KEY_CONTENT=""TestFragment:Content"";   protected static final newGSearch.OnSearchResult searchResult=null;   newGSearch GParser;   private int cpage;   int displayW;   private Context mContext;   private boolean mLockListView;   private SharedPreferences mPrefs;   Intent myintent;   private int opt;   int page;   LinearLayout.LayoutParams paramsFillFill;   LinearLayout.LayoutParams paramsFillWrap;   LinearLayout.LayoutParams paramsWrapWrap;   int position;   LinearLayout rowWrapper;   CustomScrollView scroll;   LinearLayout wrapper;   final int columnCnt=3;   private String mContent=""???"";   private String mSearch="""";   private String groupId="""";   private String artId="""";   public static AncScImgFragment newInstance(  String content,  String Search,  String groupid,  String artid){     AncScImgFragment fragment=new AncScImgFragment();     StringBuilder builder=new StringBuilder();     for (int i=0; i < 20; i++) {       builder.append(Search).append("" "");     }     builder.deleteCharAt(builder.length() - 1);     fragment.mContent=builder.toString();     fragment.mSearch=Search;     fragment.groupId=groupid;     fragment.artId=artid;     return fragment;   }   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     if (savedInstanceState != null && savedInstanceState.containsKey(KEY_CONTENT)) {       this.mContent=savedInstanceState.getString(KEY_CONTENT);     }     this.mLockListView=true;     this.cpage=0;     this.opt=1;     View LocalView=inflater.inflate(R.layout.image_fragment,(ViewGroup)null);     final CustomScrollView scroll=(CustomScrollView)LocalView.findViewById(R.id.scroll_container);     this.wrapper=(LinearLayout)LocalView.findViewById(R.id.container);     LinearLayout.LayoutParams localLayoutParams1=new LinearLayout.LayoutParams(-1,-1);     this.paramsFillFill=localLayoutParams1;     LinearLayout.LayoutParams localLayoutParams2=new LinearLayout.LayoutParams(-1,-1);     this.paramsFillWrap=localLayoutParams2;     LinearLayout.LayoutParams localLayoutParams3=new LinearLayout.LayoutParams(-1,-1);     this.paramsWrapWrap=localLayoutParams3;     this.position=0;     int k=getActivity().getWindowManager().getDefaultDisplay().getWidth();     this.displayW=k;     new ArrayList();     final AQuery aq=new AQuery((Activity)getActivity());     this.GParser=new newGSearch(aq);     final newGSearch.OnSearchResult searchResult2=new newGSearch.OnSearchResult(){       @Override public void onSearchResultListener(      ArrayList<GoogleImage> paramArrayList){         int i=1;         int j=AncScImgFragment.this.displayW / 3;         Iterator localIterator=paramArrayList.iterator();         scroll.setStatus(true);         while (localIterator.hasNext()) {           final GoogleImage localImageData=localIterator.next();           if (i % 3 == 1) {             AncScImgFragment localImageFragment=AncScImgFragment.this;             LinearLayout localLinearLayout1=new LinearLayout(AncScImgFragment.this.getActivity());             localImageFragment.rowWrapper=localLinearLayout1;             LinearLayout localLinearLayout2=AncScImgFragment.this.rowWrapper;             LinearLayout.LayoutParams localLayoutParams12=AncScImgFragment.this.paramsFillWrap;             localLinearLayout2.setLayoutParams(localLayoutParams12);             AncScImgFragment.this.rowWrapper.setOrientation(0);           }           BorderImageView localBorderImageView=new BorderImageView(AncScImgFragment.this.getActivity());           ImageView.ScaleType localScaleType=ImageView.ScaleType.FIT_XY;           localBorderImageView.setScaleType(localScaleType);           aq.id(localBorderImageView).image(localImageData.thumnail,true,true,0,0,null,-1,1.0f);           LinearLayout.LayoutParams localLayoutParams22=new LinearLayout.LayoutParams(j,j);           localBorderImageView.setLayoutParams(localLayoutParams22);           localBorderImageView.setOnClickListener(new View.OnClickListener(){             @Override public void onClick(            View v){               AncScImgFragment.this.myintent=new Intent(AncScImgFragment.this.getActivity(),(Class<?>)newView.class);               AncScImgFragment.this.myintent.putExtra(""message"",localImageData.link);               AncScImgFragment.this.myintent.putExtra(""fname"",String.valueOf(AncScImgFragment.this.groupId) + AncScImgFragment.this.artId);               AncScImgFragment.this.myintent.putExtra(""groupid"",AncScImgFragment.this.groupId);               AncScImgFragment.this.myintent.putExtra(""artid"",AncScImgFragment.this.artId);               AncScImgFragment.this.myintent.putExtra(""thum"",localImageData.thumnail);               AncScImgFragment.this.startActivity(AncScImgFragment.this.myintent);             }           } );           AncScImgFragment.this.rowWrapper.addView(localBorderImageView);           if (i % 3 != 0) {             int k2=paramArrayList.size();             if (i == k2) {             }           }  else {             LinearLayout localLinearLayout3=AncScImgFragment.this.wrapper;             LinearLayout localLinearLayout4=AncScImgFragment.this.rowWrapper;             int m=AncScImgFragment.this.wrapper.getChildCount() - 1;             localLinearLayout3.addView(localLinearLayout4,m);           }           i++;         }       }     } ;     this.GParser.search(this.mSearch,this.cpage,this.opt,searchResult2);     scroll.setStatus(false);     scroll.setOnScrollListener(new CustomScrollView.OnScrollListener(){       @Override public void onScrollBottom(){         AncScImgFragment.this.cpage++;         AncScImgFragment.this.GParser.search(AncScImgFragment.this.mSearch,AncScImgFragment.this.cpage,AncScImgFragment.this.opt,searchResult2);       }     } );     return LocalView;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\BaseExpandableAdapter.code","public class BaseExpandableAdapter extends BaseExpandableListAdapter {   AQuery aq;   private ArrayList<ArrayList<IdolInfo>> childList;   private ArrayList<String> groupList;   private LayoutInflater inflater;   private ViewHolder viewHolder=null;   public BaseExpandableAdapter(  Context c,  ArrayList<String> groupList,  ArrayList<ArrayList<IdolInfo>> childList){     this.groupList=null;     this.childList=null;     this.inflater=null;     this.inflater=LayoutInflater.from(c);     this.groupList=groupList;     this.childList=childList;     this.aq=new AQuery(c);   }   @Override public String getGroup(  int groupPosition){     return this.groupList.get(groupPosition);   }   @Override public int getGroupCount(){     return this.groupList.size();   }   @Override public long getGroupId(  int groupPosition){     return groupPosition;   }   @Override public View getGroupView(  int groupPosition,  boolean isExpanded,  View convertView,  ViewGroup parent){     View v=convertView;     if (v == null) {       this.viewHolder=new ViewHolder();       v=this.inflater.inflate(R.layout.list_item_agency,parent,false);       this.viewHolder.agency=(TextView)v.findViewById(R.id.agencyname);       v.setTag(this.viewHolder);     }  else {       this.viewHolder=(ViewHolder)v.getTag();     }     this.viewHolder.agency.setText(idolList.this.gList.get(groupPosition));     return v;   }   @Override public IdolInfo getChild(  int groupPosition,  int childPosition){     return this.childList.get(groupPosition).get(childPosition);   }   @Override public int getChildrenCount(  int groupPosition){     return this.childList.get(groupPosition).size();   }   @Override public long getChildId(  int groupPosition,  int childPosition){     return childPosition;   }   @Override public View getChildView(  final int groupPosition,  final int childPosition,  boolean isLastChild,  View convertView,  ViewGroup parent){     View v=convertView;     if (v == null) {       this.viewHolder=new ViewHolder();       v=this.inflater.inflate(R.layout.list_item_idol,(ViewGroup)null);       this.viewHolder.txtname=(TextView)v.findViewById(R.id.txtname);       this.viewHolder.txtcontent=(TextView)v.findViewById(R.id.txtcontent);       this.viewHolder.icon=(ImageView)v.findViewById(R.id.icon);       this.viewHolder.newt=(ImageView)v.findViewById(R.id.hot);       this.viewHolder.btnfav=(Button)v.findViewById(R.id.btnfav);       this.viewHolder.btnfan=(Button)v.findViewById(R.id.btnfan);       v.setTag(this.viewHolder);     }  else {       this.viewHolder=(ViewHolder)v.getTag();     }     this.viewHolder.btnfan.setVisibility(8);     this.viewHolder.btnfav.setFocusable(false);     this.viewHolder.txtname.setText(this.childList.get(groupPosition).get(childPosition).name);     this.viewHolder.txtcontent.setText(this.childList.get(groupPosition).get(childPosition).member);     this.aq.id(this.viewHolder.icon).image(this.childList.get(groupPosition).get(childPosition).thum,true,true,0,0);     this.viewHolder.btnfav.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v2){         BaseExpandableAdapter.this.setFav(groupPosition,childPosition);       }     } );     return v;   }   public void setFav(  int gidx,  int cidx){     idolDBhelper mHelper=new idolDBhelper(idolList.this.mContext);     SQLiteDatabase db1=mHelper.getWritableDatabase();     String query=""select * from idolgroup where groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""' and fav='y' "";     Cursor cursor1=db1.rawQuery(query,null);     if (cursor1.getCount() > 0) {       String query2=""update idolgroup set fav='' where  groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""'  "";       db1.execSQL(query2);       Toast.makeText(idolList.this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();     }  else {       String query3=""update idolgroup set fav='y' where  groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""'  "";       db1.execSQL(query3);       Toast.makeText(idolList.this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();     }   }   @Override public boolean hasStableIds(){     return true;   }   @Override public boolean isChildSelectable(  int groupPosition,  int childPosition){     return true;   } class ViewHolder {     TextView agency;     Button btnfan;     Button btnfav;     ImageView icon;     ImageView newt;     TextView txtcontent;     TextView txtname;     ViewHolder(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\EfficientAdapter.code","private static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<YouTubeInfo> data;   private Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;   }   public EfficientAdapter(  Context context,  ArrayList<YouTubeInfo> member){     this.data=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.data=member;     this.aq=new AQuery(context);     this.mContext=context;   }   @Override public int getCount(){     return this.data.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_video,(ViewGroup)null);       holder=new ViewHolder();       holder.text=(TextView)convertView.findViewById(R.id.text);       holder.textM=(TextView)convertView.findViewById(R.id.text2);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.time=(TextView)convertView.findViewById(R.id.time);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.text.setText(this.data.get(position).name);     holder.textM.setText(""ê²Œì‹œìž� :"" + this.data.get(position).writer + "" \nê²Œì‹œì�¼: ""+ this.data.get(position).date+ "" \n"");     this.aq.id(holder.icon).image(this.data.get(position).thum,true,true,200,0);     holder.time.setText(getTimefor(this.data.get(position).time));     return convertView;   } static class ViewHolder {     ImageView icon;     ImageView iconLeft;     TextView text;     TextView textM;     TextView time;     ViewHolder(){     }   }   public String getTimefor(  String du){     int i=Integer.parseInt(du);     int tmp1=i / 60;     int tmp1n=i % 60;     int tmp2=tmp1 / 60;     int tmp2n=tmp1 % 60;     int i2=tmp2 / 60;     int tmp3n=tmp2 % 60;     if (tmp3n == 0) {       String retVal=String.valueOf(Integer.toString(tmp2n)) + "":"" + Integer.toString(tmp1n);       return retVal;     }     String retVal2=String.valueOf(Integer.toString(tmp3n)) + "":"" + Integer.toString(tmp2n)+ "":""+ Integer.toString(tmp1n);     return retVal2;   } } public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   private ArrayList<IdolInfo> datalist=new ArrayList<>();   private Context mContext;   private LayoutInflater mInflater;   String sex;   public EfficientAdapter(  Context context,  ArrayList<IdolInfo> data,  String sex1){     this.mInflater=LayoutInflater.from(context);     this.aq=new AQuery(context);     this.mContext=context;     this.datalist.addAll(data);     this.sex=sex1;   }   @Override public int getCount(){     return this.datalist.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  final int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       if (""5"".equals(this.sex)) {         convertView=this.mInflater.inflate(R.layout.list_item_legend,(ViewGroup)null);       }  else {         convertView=this.mInflater.inflate(R.layout.list_item_idol,(ViewGroup)null);       }       holder=new ViewHolder();       holder.txtname=(TextView)convertView.findViewById(R.id.txtname);       holder.txtcontent=(TextView)convertView.findViewById(R.id.txtcontent);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       holder.newt=(ImageView)convertView.findViewById(R.id.hot);       holder.btnfav=(Button)convertView.findViewById(R.id.btnfav);       holder.btnfan=(Button)convertView.findViewById(R.id.btnfan);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.btnfan.setFocusable(false);     holder.btnfan.setVisibility(8);     holder.btnfav.setFocusable(false);     holder.btnfav.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         EfficientAdapter.this.setFav(position);       }     } );     if (""Y"".equals(this.datalist.get(position).newyn)) {       holder.newt.setVisibility(0);     }  else {       holder.newt.setVisibility(8);     }     holder.txtname.setText(this.datalist.get(position).name);     holder.txtcontent.setText(this.datalist.get(position).member);     this.aq.id(holder.icon).image(this.datalist.get(position).thum,true,true,0,0);     ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});     if (""5"".equals(this.sex)) {       holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));       holder.btnfav.setBackgroundResource(R.drawable.btn_favorite);     }     return convertView;   }   public void setFav(  int idx){     idolDBhelper mHelper=new idolDBhelper(this.mContext);     SQLiteDatabase db1=mHelper.getWritableDatabase();     String query=""select * from idolgroup where groupid='"" + this.datalist.get(idx).groupid + ""' and fav='y' "";     Cursor cursor1=db1.rawQuery(query,null);     if (cursor1.getCount() > 0) {       String query2=""update idolgroup set fav='' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";       db1.execSQL(query2);       Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();     }  else {       String query3=""update idolgroup set fav='y' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";       db1.execSQL(query3);       Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();     }   } static class ViewHolder {     Button btnfan;     Button btnfav;     ImageView icon;     ImageView newt;     TextView txtcontent;     TextView txtname;     ViewHolder(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\idolList.code","public final class idolList extends Fragment {   private static final String KEY_CONTENT=""TestFragment:Content"";   private ListView li;   private ExpandableListView li2;   EfficientAdapter mAdapter;   Context mContext;   Button sleft;   Button sright;   TextView totalcnt;   private String mContent=""???"";   private String mSearch="""";   private ArrayList<IdolInfo> idollist=new ArrayList<>();   private String sort=""1"";   ArrayList<String> gList=new ArrayList<>();   ArrayList<ArrayList<IdolInfo>> cList=new ArrayList<>();   public static idolList newInstance(  Context context,  String content,  String Search){     idolList fragment=new idolList();     StringBuilder builder=new StringBuilder();     for (int i=0; i < 20; i++) {       builder.append(Search).append("" "");     }     builder.deleteCharAt(builder.length() - 1);     fragment.mContent=builder.toString();     fragment.mSearch=Search;     fragment.mContext=context;     return fragment;   }   @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState){     View LocalView;     if (savedInstanceState != null && savedInstanceState.containsKey(KEY_CONTENT)) {       this.mContent=savedInstanceState.getString(KEY_CONTENT);     }     if (""5"".equals(this.mSearch)) {       LocalView=inflater.inflate(R.layout.legendlist,(ViewGroup)null);     }  else     if (""4"".equals(this.mSearch)) {       LocalView=inflater.inflate(R.layout.agencylist,(ViewGroup)null);     }  else {       LocalView=inflater.inflate(R.layout.idollist,(ViewGroup)null);     }     if (""4"".equals(this.mSearch)) {       this.li2=(ExpandableListView)LocalView.findViewById(R.id.listgirle);       this.li2.setOnChildClickListener(new ExpandableListView.OnChildClickListener(){         @Override public boolean onChildClick(        ExpandableListView parent,        View v,        int groupPosition,        int childPosition,        long id){           idolList.this.setHit(idolList.this.mSearch,idolList.this.cList.get(groupPosition).get(childPosition).groupid,idolList.this.cList.get(groupPosition).get(childPosition).thum,idolList.this.cList.get(groupPosition).get(childPosition).name);           Intent myintent=new Intent(idolList.this.mContext,(Class<?>)memberTab.class);           myintent.putExtra(""sex"",idolList.this.mSearch);           myintent.putExtra(""name"",idolList.this.cList.get(groupPosition).get(childPosition).name);           myintent.putExtra(""search"",idolList.this.cList.get(groupPosition).get(childPosition).name);           myintent.putExtra(""index"",Integer.toString(childPosition));           myintent.putExtra(""artid"",idolList.this.cList.get(groupPosition).get(childPosition).groupid);           idolList.this.startActivity(myintent);           return false;         }       } );     }  else {       this.li=(ListView)LocalView.findViewById(R.id.listgirl);       this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){         @Override public void onItemClick(        AdapterView<?> arg0,        View arg1,        int position,        long arg3){           idolList.this.setHit(idolList.this.mSearch,((IdolInfo)idolList.this.idollist.get(position)).groupid,((IdolInfo)idolList.this.idollist.get(position)).thum,((IdolInfo)idolList.this.idollist.get(position)).name);           Intent myintent=new Intent(idolList.this.mContext,(Class<?>)memberTab.class);           myintent.putExtra(""sex"",idolList.this.mSearch);           myintent.putExtra(""name"",((IdolInfo)idolList.this.idollist.get(position)).name);           myintent.putExtra(""search"",((IdolInfo)idolList.this.idollist.get(position)).name);           myintent.putExtra(""index"",Integer.toString(position));           myintent.putExtra(""artid"",((IdolInfo)idolList.this.idollist.get(position)).groupid);           idolList.this.startActivity(myintent);         }       } );     }     this.totalcnt=(TextView)LocalView.findViewById(R.id.totalcnt);     this.sleft=(Button)LocalView.findViewById(R.id.sleft);     this.sright=(Button)LocalView.findViewById(R.id.sright);     getList(this.mSearch,this.sort);     setSort();     this.sleft.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         idolList.this.sort=""1"";         idolList.this.idollist.clear();         idolList.this.getList(idolList.this.mSearch,idolList.this.sort);         idolList.this.setSort();       }     } );     this.sright.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         idolList.this.sort=""2"";         idolList.this.getList(idolList.this.mSearch,idolList.this.sort);         idolList.this.setSort();       }     } );     return LocalView;   }   public void setSort(){     if (""1"".equals(this.sort)) {       this.sleft.setPressed(false);       this.sright.setPressed(true);     }  else {       this.sleft.setPressed(true);       this.sright.setPressed(false);     }   }   public void setHit(  String sex,  String artid,  String thum,  String name){     AQuery mAQuery=new AQuery(this.mContext);     Map<String,Object> params=new HashMap<>();     params.put(""type"",sex);     params.put(""groupid"",artid);     params.put(""thum"",thum);     params.put(""name"",name);     mAQuery.ajax(""http://180.71.58.225/app/idol/savehit.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){       }     } );   }   public void getList(  String type,  String sort){     String query;     this.idollist.clear();     idolDBhelper mHelper=new idolDBhelper(getActivity());     SQLiteDatabase db=mHelper.getWritableDatabase();     int cnt=0;     if (""4"".equals(type)) {       Cursor cursor1=db.rawQuery(""select agency from idolgroup where agency is not null group by agency order by agency asc "",null);       cursor1.getCount();       cursor1.moveToFirst();       while (!cursor1.isAfterLast()) {         this.gList.add(cursor1.getString(0));         cursor1.moveToNext();         cnt++;       }       for (int c=0; c < this.gList.size(); c++) {         ArrayList<IdolInfo> idolitem=new ArrayList<>();         String query2=""select groupid,name_kor,name_eng,thum,content_kor,new_yn,fav from idolgroup where agency='"" + this.gList.get(c).replace(""'"","""") + ""'  order by new_yn desc, sort asc"";         Cursor cursor=db.rawQuery(query2,null);         cursor.getCount();         cursor.moveToFirst();         while (!cursor.isAfterLast()) {           IdolInfo item=new IdolInfo();           item.groupid=cursor.getString(0);           item.name=cursor.getString(1);           item.thum=cursor.getString(3);           String[] Tmpstr=cursor.getString(4).split(""\n"");           item.member=Tmpstr[Tmpstr.length - 1];           item.fav=cursor.getString(6);           item.newyn=cursor.getString(5);           idolitem.add(item);           cursor.moveToNext();           cnt++;         }         cursor.close();         this.cList.add(idolitem);       }       this.li2.setAdapter(new BaseExpandableAdapter(getActivity(),this.gList,this.cList));     }  else {       if (""6"".equals(type)) {         query=""select groupid,name_kor,name_eng,thum,content_kor,new_yn,fav from idolgroup where fav='y' "";       }  else       if (""1"".equals(sort)) {         query=""select groupid,name_kor,name_eng,thum,content_kor,new_yn,fav from idolgroup where type='"" + type + ""'  order by new_yn desc, sort asc"";       }  else {         query=""select groupid,name_kor,name_eng,thum,content_kor,new_yn,fav from idolgroup where type='"" + type + ""'  order by name_kor asc"";       }       Cursor cursor2=db.rawQuery(query,null);       cursor2.getCount();       cursor2.moveToFirst();       while (!cursor2.isAfterLast()) {         IdolInfo item2=new IdolInfo();         item2.groupid=cursor2.getString(0);         item2.name=cursor2.getString(1);         item2.thum=cursor2.getString(3);         String[] Tmpstr2=cursor2.getString(4).split(""\n"");         item2.member=Tmpstr2[Tmpstr2.length - 1];         item2.fav=cursor2.getString(6);         item2.newyn=cursor2.getString(5);         this.idollist.add(item2);         cursor2.moveToNext();         cnt++;       }       cursor2.close();       this.totalcnt.setText(""ì´�:"" + Integer.toString(this.idollist.size()) + ""íŒ€"");       this.li.setAdapter((ListAdapter)new EfficientAdapter(getActivity(),this.idollist,type));     }     db.close();   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     private ArrayList<IdolInfo> datalist=new ArrayList<>();     private Context mContext;     private LayoutInflater mInflater;     String sex;     public EfficientAdapter(    Context context,    ArrayList<IdolInfo> data,    String sex1){       this.mInflater=LayoutInflater.from(context);       this.aq=new AQuery(context);       this.mContext=context;       this.datalist.addAll(data);       this.sex=sex1;     }     @Override public int getCount(){       return this.datalist.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    final int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         if (""5"".equals(this.sex)) {           convertView=this.mInflater.inflate(R.layout.list_item_legend,(ViewGroup)null);         }  else {           convertView=this.mInflater.inflate(R.layout.list_item_idol,(ViewGroup)null);         }         holder=new ViewHolder();         holder.txtname=(TextView)convertView.findViewById(R.id.txtname);         holder.txtcontent=(TextView)convertView.findViewById(R.id.txtcontent);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         holder.newt=(ImageView)convertView.findViewById(R.id.hot);         holder.btnfav=(Button)convertView.findViewById(R.id.btnfav);         holder.btnfan=(Button)convertView.findViewById(R.id.btnfan);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.btnfan.setFocusable(false);       holder.btnfan.setVisibility(8);       holder.btnfav.setFocusable(false);       holder.btnfav.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           EfficientAdapter.this.setFav(position);         }       } );       if (""Y"".equals(this.datalist.get(position).newyn)) {         holder.newt.setVisibility(0);       }  else {         holder.newt.setVisibility(8);       }       holder.txtname.setText(this.datalist.get(position).name);       holder.txtcontent.setText(this.datalist.get(position).member);       this.aq.id(holder.icon).image(this.datalist.get(position).thum,true,true,0,0);       ColorMatrix cm=new ColorMatrix(new float[]{0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.299f,0.587f,0.114f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f});       if (""5"".equals(this.sex)) {         holder.icon.setColorFilter(new ColorMatrixColorFilter(cm));         holder.btnfav.setBackgroundResource(R.drawable.btn_favorite);       }       return convertView;     }     public void setFav(    int idx){       idolDBhelper mHelper=new idolDBhelper(this.mContext);       SQLiteDatabase db1=mHelper.getWritableDatabase();       String query=""select * from idolgroup where groupid='"" + this.datalist.get(idx).groupid + ""' and fav='y' "";       Cursor cursor1=db1.rawQuery(query,null);       if (cursor1.getCount() > 0) {         String query2=""update idolgroup set fav='' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";         db1.execSQL(query2);         Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }  else {         String query3=""update idolgroup set fav='y' where  groupid='"" + this.datalist.get(idx).groupid + ""'  "";         db1.execSQL(query3);         Toast.makeText(this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();       }     } static class ViewHolder {       Button btnfan;       Button btnfav;       ImageView icon;       ImageView newt;       TextView txtcontent;       TextView txtname;       ViewHolder(){       }     }   } public class BaseExpandableAdapter extends BaseExpandableListAdapter {     AQuery aq;     private ArrayList<ArrayList<IdolInfo>> childList;     private ArrayList<String> groupList;     private LayoutInflater inflater;     private ViewHolder viewHolder=null;     public BaseExpandableAdapter(    Context c,    ArrayList<String> groupList,    ArrayList<ArrayList<IdolInfo>> childList){       this.groupList=null;       this.childList=null;       this.inflater=null;       this.inflater=LayoutInflater.from(c);       this.groupList=groupList;       this.childList=childList;       this.aq=new AQuery(c);     }     @Override public String getGroup(    int groupPosition){       return this.groupList.get(groupPosition);     }     @Override public int getGroupCount(){       return this.groupList.size();     }     @Override public long getGroupId(    int groupPosition){       return groupPosition;     }     @Override public View getGroupView(    int groupPosition,    boolean isExpanded,    View convertView,    ViewGroup parent){       View v=convertView;       if (v == null) {         this.viewHolder=new ViewHolder();         v=this.inflater.inflate(R.layout.list_item_agency,parent,false);         this.viewHolder.agency=(TextView)v.findViewById(R.id.agencyname);         v.setTag(this.viewHolder);       }  else {         this.viewHolder=(ViewHolder)v.getTag();       }       this.viewHolder.agency.setText(idolList.this.gList.get(groupPosition));       return v;     }     @Override public IdolInfo getChild(    int groupPosition,    int childPosition){       return this.childList.get(groupPosition).get(childPosition);     }     @Override public int getChildrenCount(    int groupPosition){       return this.childList.get(groupPosition).size();     }     @Override public long getChildId(    int groupPosition,    int childPosition){       return childPosition;     }     @Override public View getChildView(    final int groupPosition,    final int childPosition,    boolean isLastChild,    View convertView,    ViewGroup parent){       View v=convertView;       if (v == null) {         this.viewHolder=new ViewHolder();         v=this.inflater.inflate(R.layout.list_item_idol,(ViewGroup)null);         this.viewHolder.txtname=(TextView)v.findViewById(R.id.txtname);         this.viewHolder.txtcontent=(TextView)v.findViewById(R.id.txtcontent);         this.viewHolder.icon=(ImageView)v.findViewById(R.id.icon);         this.viewHolder.newt=(ImageView)v.findViewById(R.id.hot);         this.viewHolder.btnfav=(Button)v.findViewById(R.id.btnfav);         this.viewHolder.btnfan=(Button)v.findViewById(R.id.btnfan);         v.setTag(this.viewHolder);       }  else {         this.viewHolder=(ViewHolder)v.getTag();       }       this.viewHolder.btnfan.setVisibility(8);       this.viewHolder.btnfav.setFocusable(false);       this.viewHolder.txtname.setText(this.childList.get(groupPosition).get(childPosition).name);       this.viewHolder.txtcontent.setText(this.childList.get(groupPosition).get(childPosition).member);       this.aq.id(this.viewHolder.icon).image(this.childList.get(groupPosition).get(childPosition).thum,true,true,0,0);       this.viewHolder.btnfav.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v2){           BaseExpandableAdapter.this.setFav(groupPosition,childPosition);         }       } );       return v;     }     public void setFav(    int gidx,    int cidx){       idolDBhelper mHelper=new idolDBhelper(idolList.this.mContext);       SQLiteDatabase db1=mHelper.getWritableDatabase();       String query=""select * from idolgroup where groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""' and fav='y' "";       Cursor cursor1=db1.rawQuery(query,null);       if (cursor1.getCount() > 0) {         String query2=""update idolgroup set fav='' where  groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""'  "";         db1.execSQL(query2);         Toast.makeText(idolList.this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—�ì„œ ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤."",1000).show();       }  else {         String query3=""update idolgroup set fav='y' where  groupid='"" + this.childList.get(gidx).get(cidx).groupid + ""'  "";         db1.execSQL(query3);         Toast.makeText(idolList.this.mContext,""ì¦�ê²¨ì°¾ê¸°ì—� ë“±ë¡�ì—ˆìŠµë‹ˆë‹¤.."",1000).show();       }     }     @Override public boolean hasStableIds(){       return true;     }     @Override public boolean isChildSelectable(    int groupPosition,    int childPosition){       return true;     } class ViewHolder {       TextView agency;       Button btnfan;       Button btnfav;       ImageView icon;       ImageView newt;       TextView txtcontent;       TextView txtname;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\idolListAdpter.code","public class idolListAdpter extends FragmentPagerAdapter implements TitleProvider {   protected static String[] title;   protected static String[] value;   private Context mContext;   private int mCount;   private int posi;   public idolListAdpter(  FragmentManager fm,  String[] data1,  String[] data2,  Context context){     super(fm);     this.mCount=0;     title=new String[data1.length];     value=new String[data2.length];     this.mContext=context;     System.arraycopy(data1,0,title,0,data1.length);     System.arraycopy(data2,0,value,0,data2.length);     this.mCount=title.length;   }   @Override public String getTitle(  int position){     return title[position];   }   @Override public Fragment getItem(  int position){     return idolList.newInstance(this.mContext,title[position % title.length],value[position % value.length]);   }   @Override public int getCount(){     return this.mCount;   }   public void setCount(  int count){     if (count > 0 && count <= 10) {       this.mCount=count;       notifyDataSetChanged();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\starImageFragmentAdapter.code","public class starImageFragmentAdapter extends FragmentPagerAdapter implements TitleProvider {   protected static String[] arMenu1;   protected static String[] arMenu2;   protected static String[] arMenu3;   protected static String[] arMenu4;   private int mCount;   private int posi;   public starImageFragmentAdapter(  FragmentManager fm,  String[] data1,  String[] data2,  String[] data3,  String[] data4){     super(fm);     this.mCount=0;     arMenu1=new String[data1.length];     arMenu2=new String[data2.length];     arMenu3=new String[data3.length];     arMenu4=new String[data4.length];     System.arraycopy(data1,0,arMenu1,0,data1.length);     System.arraycopy(data2,0,arMenu2,0,data2.length);     System.arraycopy(data3,0,arMenu3,0,data3.length);     System.arraycopy(data4,0,arMenu4,0,data4.length);     this.mCount=arMenu1.length;   }   @Override public String getTitle(  int position){     return arMenu1[position];   }   @Override public Fragment getItem(  int position){     return this.mCount + (-1) == position ? AncListImgFragment.newInstance(arMenu1[position % arMenu1.length],arMenu2[position % arMenu2.length]) : AncScImgFragment.newInstance(arMenu1[position % arMenu1.length],arMenu2[position % arMenu2.length],arMenu3[0],arMenu3[position % arMenu3.length]);   }   @Override public int getCount(){     return this.mCount;   }   public void setCount(  int count){     if (count > 0 && count <= 10) {       this.mCount=count;       notifyDataSetChanged();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.frag\ViewHolder.code","static class ViewHolder {   ImageView icon;   ImageView iconLeft;   TextView text;   TextView textM;   TextView time;   ViewHolder(){   } } static class ViewHolder {   Button btnfan;   Button btnfav;   ImageView icon;   ImageView newt;   TextView txtcontent;   TextView txtname;   ViewHolder(){   } } class ViewHolder {   TextView agency;   Button btnfan;   Button btnfav;   ImageView icon;   ImageView newt;   TextView txtcontent;   TextView txtname;   ViewHolder(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\HttpFileUpload.code","public class HttpFileUpload extends AsyncTask<String,String,String> {   Context mContext;   ProgressDialog pDialog;   public HttpFileUpload(  Context mContext){     this.mContext=mContext;   }   @Override protected void onPreExecute(){     super.onPreExecute();     this.pDialog=new ProgressDialog(this.mContext);     this.pDialog.setMessage(""Working...."");     this.pDialog.setIndeterminate(false);     this.pDialog.setCancelable(true);     this.pDialog.show();   }   private String uploadFile(  String pimageFullPath,  String psavedFileName,  String purlString){     File fichero=new File(pimageFullPath);     long length=fichero.length();     Bitmap resizedImage=null;     if (length > 681984 || needsRotation(pimageFullPath)) {       resizedImage=ImageProcessor.process(pimageFullPath);     }     try {       URL url=new URL(purlString);       HttpURLConnection httpURLConnection=(HttpURLConnection)url.openConnection();       httpURLConnection.setChunkedStreamingMode(1048576);       httpURLConnection.setDoInput(true);       httpURLConnection.setDoOutput(true);       httpURLConnection.setUseCaches(false);       httpURLConnection.setRequestMethod(""POST"");       httpURLConnection.setRequestProperty(""Connection"",""Keep-Alive"");       httpURLConnection.setRequestProperty(""Charset"",""UTF-8"");       httpURLConnection.setRequestProperty(""Content-Type"",""multipart/form-data;boundary=******"");       DataOutputStream dos=new DataOutputStream(httpURLConnection.getOutputStream());       dos.writeBytes(String.valueOf(""--"") + ""******\r\n"");       dos.writeBytes(""Content-Disposition: form-data; name=\""uploadedfile\""; filename=\"""" + psavedFileName + ""\""\r\n"");       dos.writeBytes(""\r\n"");       if (resizedImage != null) {         Log.d(""ImageUpload"",""compressing"");         resizedImage.compress(Bitmap.CompressFormat.JPEG,90,dos);         Log.d(""ImageUpload"",""done"");       }  else {         FileInputStream fis=new FileInputStream(fichero);         int bytesAvailable=fis.available();         int bufferSize=Math.min(bytesAvailable,1048576);         byte[] buffer=new byte[bufferSize];         while (true) {           int count=fis.read(buffer);           if (count == -1) {             break;           }           dos.write(buffer,0,count);         }         fis.close();       }       dos.writeBytes(""\r\n"");       dos.writeBytes(String.valueOf(""--"") + ""******--\r\n"");       dos.flush();       InputStream is=httpURLConnection.getInputStream();       InputStreamReader isr=new InputStreamReader(is,""utf-8"");       BufferedReader br=new BufferedReader(isr);       br.readLine();       dos.close();       is.close();       return ""1"";     }  catch (    Exception e) {       e.printStackTrace();       return ""0"";     }   }   @Override public String doInBackground(  String... args){     if (uploadFile(args[0],args[1],args[2]) == ""0"" && uploadFile(args[0],args[1],args[2]) == ""0"") {       uploadFile(args[0],args[1],args[2]);       return null;     }     return null;   }   @Override public void onPostExecute(  String file_url){     this.pDialog.dismiss();   }   private static boolean needsRotation(  String filename){     try {       ExifInterface exif=new ExifInterface(filename);       int orientation=exif.getAttributeInt(""Orientation"",1);       return (orientation == 1 || orientation == 0) ? false : true;     }  catch (    IOException e) {       return true;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\naverSearch.code","!org.eclipse.jdt.core.dom.TypeDeclaration@76800d62"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\newGSearch.code","public class newGSearch {   public static HashMap<String,JSONObject> DATA_CACHE=new HashMap<>();   AQuery mAQuery;   OnSearchResult mOnSearchResult;   int scale=21; public interface OnSearchResult {     void onSearchResultListener(    ArrayList<GoogleImage> arrayList);   }   public newGSearch(  AQuery paramAQuery){     this.mAQuery=paramAQuery;   }   private QueryInfo makeQuery(  String keyword,  int start,  int opt){     String turl;     String s_keyword=keyword;     int newStart=start * 20;     String s_start=Integer.toString(newStart);     try {       s_keyword=URLEncoder.encode(s_keyword,""UTF-8"");       s_start=URLEncoder.encode(s_start,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     if (opt == 1) {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=isz:l&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }  else     if (opt == 2) {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=isz:m&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }  else     if (opt == 3) {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=imgo:1,isz:lt,islt:vga&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }  else     if (opt == 4) {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=imgo:1,isz:lt,islt:svga&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }  else     if (opt == 5) {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=imgo:1,isz:lt,islt:xga&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }  else {       turl=""http://www.google.co.kr/search?q="" + s_keyword + ""&hl=ko&newwindow=1&safe=active&gbv=2&prmdo=1&tbs=imgo:1,isz:lt,islt:vga&tbm=isch&ei=9tm4TtvaOMyQiQeWk4yxBw&start=""+ s_start+ ""&sa=N"";     }     QueryInfo localQueryInfo=new QueryInfo();     localQueryInfo.url=turl;     localQueryInfo.offset=start;     return localQueryInfo;   }   public void search(  String keyword,  int start,  int opt,  OnSearchResult paramOnSearchResult){     this.mOnSearchResult=paramOnSearchResult;     QueryInfo localQueryInfo=makeQuery(keyword,start,opt);     String url1=localQueryInfo.url;     AjaxCallback<String> cb=new AjaxCallback<>();     cb.url(url1).type(String.class).encoding(""EUC-KR"").weakHandler(this,""dataresult"");     this.mAQuery.ajax(cb);   }   public void dataresult(  String url,  String html,  AjaxStatus paramAjaxStatus){     if (paramAjaxStatus.getCode() == 200 && html != null) {       setData(url,html,0,false);       return;     }     OnSearchResult localOnSearchResult=this.mOnSearchResult;     ArrayList<GoogleImage> localArrayList=new ArrayList<>();     localOnSearchResult.onSearchResultListener(localArrayList);   }   private void setData(  String paramString,  String data,  int paramInt,  boolean paramBoolean){     ArrayList<GoogleImage> localArrayList=new ArrayList<>();     if (data == null) {       this.mOnSearchResult.onSearchResultListener(localArrayList);     }  else     if (!paramBoolean) {       ArrayList<GoogleImage> localArrayList2=parHtml(data);       this.mOnSearchResult.onSearchResultListener(localArrayList2);     }   }   public ArrayList<GoogleImage> parHtml(  String src){     ArrayList<GoogleImage> data1=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.DIV);     for (    Element element : elementList) {       String divClasss=element.getAttributeValue(""id"");       if (divClasss != null && divClasss.equals(""ires"")) {         List<Element> elementList2=element.getAllElements(HTMLElementName.TD);         for (        Element element2 : elementList2) {           GoogleImage item=new GoogleImage();           item.thumnail=element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");           String tempHref=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");           item.link=tempHref.replace(""/imgres?imgurl="","""").split(""\\&"")[0];           data1.add(item);         }       }     }     return data1;   }   public ArrayList<GoogleImage> paserRex(  String src){     ArrayList<GoogleImage> data1=new ArrayList<>();     ArrayList<String> list=new ArrayList<>();     ArrayList<String> list2=new ArrayList<>();     Pattern patt=Pattern.compile("".?<a href=\""/imgres([^>]+)>"",32);     Pattern patt2=Pattern.compile(""_blank\""><img[^>]*src=[\""']?([^>\""']+)[\""']?[^>]*>"");     Matcher mat=patt.matcher(src);     Matcher mat2=patt2.matcher(src);     int i=0;     while (mat.find()) {       list.add(mat.group(1));     }     while (mat2.find()) {       list2.add(mat2.group(1));     }     Iterator<String> it=list.iterator();     while (it.hasNext()) {       String mlist=it.next();       String[] tempStr=mlist.replace(""?imgurl="","""").split(""&amp;"");       GoogleImage item=new GoogleImage();       item.link=tempStr[0];       item.thumnail=list2.get(i);       item.title="""";       item.width="""";       item.height="""";       data1.add(item);       i++;     }     data1.add(data1.get(0));     return data1;   } public class QueryInfo {     public int offset;     public String url;     QueryInfo(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\OnSearchResult.code","public interface OnSearchResult {   void onSearchResultListener(  ArrayList<GoogleImage> arrayList); } public interface OnSearchResult {   void onSearchResultListener(  ArrayList<GoogleImage> arrayList); } public interface OnSearchResult {   void onSearchResultListener(  ArrayList<YouTubeInfo> arrayList); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\QueryInfo.code","public class QueryInfo {   public int offset;   public String url;   QueryInfo(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.http\YouTubeSearch.code","public class YouTubeSearch {   AQuery mAQuery;   OnSearchResult mOnSearchResult;   int scale=21; public interface OnSearchResult {     void onSearchResultListener(    ArrayList<YouTubeInfo> arrayList);   }   public YouTubeSearch(  AQuery paramAQuery){     this.mAQuery=paramAQuery;   }   public void searchWeb(  String keyword,  int start,  int opt,  OnSearchResult paramOnSearchResult){     this.mOnSearchResult=paramOnSearchResult;     String s_keyword=keyword;     String s_start=Integer.toString(start);     try {       s_keyword=URLEncoder.encode(s_keyword,""UTF-8"");       s_start=URLEncoder.encode(s_start,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     String url=""http://www.youtube.com/results?search_query="" + s_keyword + ""&p=""+ s_start;     this.mAQuery.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         if (paramAjaxStatus.getCode() == 200 && html != null) {           YouTubeSearch localSearch=YouTubeSearch.this;           localSearch.setData(url2,html,false);         }  else {           OnSearchResult localOnSearchResult=YouTubeSearch.this.mOnSearchResult;           ArrayList<YouTubeInfo> localArrayList=new ArrayList<>();           localOnSearchResult.onSearchResultListener(localArrayList);         }       }     } );   }   public void search(  String keyword,  int start,  int opt,  OnSearchResult paramOnSearchResult){     this.mOnSearchResult=paramOnSearchResult;     String s_keyword=keyword;     int newStart=(start * 20) + 1;     String s_start=Integer.toString(newStart);     try {       s_keyword=URLEncoder.encode(s_keyword,""UTF-8"");       s_start=URLEncoder.encode(s_start,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }     String url=""http://gdata.youtube.com/feeds/api/videos?q="" + s_keyword + ""&v=2&alt=json&max-results=20&start-index=""+ s_start;     this.mAQuery.ajax(url,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url2,      String html,      AjaxStatus paramAjaxStatus){         if (paramAjaxStatus.getCode() == 200 && html != null) {           YouTubeSearch localSearch=YouTubeSearch.this;           localSearch.setData(url2,html,false);         }  else {           OnSearchResult localOnSearchResult=YouTubeSearch.this.mOnSearchResult;           ArrayList<YouTubeInfo> localArrayList=new ArrayList<>();           localOnSearchResult.onSearchResultListener(localArrayList);         }       }     } );   }   public void setData(  String paramString,  String data,  boolean paramBoolean){     ArrayList<YouTubeInfo> localArrayList=new ArrayList<>();     if (data == null) {       this.mOnSearchResult.onSearchResultListener(localArrayList);     }  else     if (!paramBoolean) {       ArrayList<YouTubeInfo> localArrayList2=parseYouTube(data);       this.mOnSearchResult.onSearchResultListener(localArrayList2);     }   }   public ArrayList<YouTubeInfo> parseYouTube(  String src){     ArrayList<YouTubeInfo> data1=new ArrayList<>();     try {       JSONObject json=new JSONObject(src);       JSONArray localJSONArray=json.optJSONObject(""feed"").optJSONArray(""entry"");       int cnt=localJSONArray.length();       for (int n=0; n < cnt; n++) {         YouTubeInfo item=new YouTubeInfo();         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.thum=localJSONObject2.getJSONObject(""media$group"").optJSONArray(""media$thumbnail"").optJSONObject(0).getString(""url"");         item.link=localJSONObject2.getJSONObject(""content"").getString(""src"");         item.writer=localJSONObject2.optJSONArray(""author"").optJSONObject(0).getJSONObject(""name"").getString(""$t"");         item.date=localJSONObject2.getJSONObject(""updated"").getString(""$t"");         item.time=Integer.toString(localJSONObject2.getJSONObject(""media$group"").optJSONArray(""media$content"").optJSONObject(0).getInt(""duration""));         item.name=localJSONObject2.getJSONObject(HTMLElementName.TITLE).getString(""$t"");         data1.add(item);       }     }  catch (    JSONException e) {     }     return data1;   }   public ArrayList<YouTubeInfo> youtubeParse(  String src){     ArrayList<YouTubeInfo> youlist=new ArrayList<>();     Source source=new Source(src);     List<Element> elementList=source.getAllElements(HTMLElementName.DIV);     int cnt=0;     try {       for (      Element element : elementList) {         String divClasss=element.getAttributeValue(""id"");         if (divClasss != null && divClasss.equals(""search-results"")) {           List<Element> elementList1=element.getAllElements(HTMLElementName.DIV);           for (          Element element1 : elementList1) {             String divClasss1=element1.getAttributeValue(""class"");             if (divClasss1 != null && divClasss1.equals(""result-item yt-uix-tile yt-tile-default *sr"")) {               YouTubeInfo item=new YouTubeInfo();               try {                 List<Element> elementList2=element1.getAllElements(HTMLElementName.DIV);                 for (                Element element2 : elementList2) {                   String divClasss2=element2.getAttributeValue(""class"");                   if (divClasss2 != null) {                     if (divClasss2.equals(""thumb-container"")) {                       item.link=element2.getAllElements(HTMLElementName.A).get(0).getAttributeValue(""href"");                       item.thum=element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""data-thumb"");                       if (element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""data-thumb"") == null) {                         item.thum=element2.getAllElements(HTMLElementName.IMG).get(0).getAttributeValue(""src"");                       }                       item.time=element2.getAllElements(HTMLElementName.SPAN).get(4).getTextExtractor().toString();                     }                     if (divClasss2.equals(""result-item-main-content"")) {                       item.name=element2.getAllElements(HTMLElementName.H3).get(0).getTextExtractor().toString();                       item.content=element2.getAllElements(HTMLElementName.P).get(0).getTextExtractor().toString();                       item.writer=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.A).get(0).getTextExtractor().toString();                       item.date=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.SPAN).get(2).getTextExtractor().toString();                       item.hit=element2.getAllElements(HTMLElementName.P).get(1).getAllElements(HTMLElementName.SPAN).get(4).getTextExtractor().toString();                     }                   }                 }               }  catch (              Exception e) {                 item.name=""ì˜¤ë¥˜ë°œìƒ�"";               }               youlist.add(item);               cnt++;             }           }         }       }     }  catch (    Exception e2) {     }     return youlist;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\dreamInfo.code","public class dreamInfo {   public String artid;   public String name;   public String point;   public String rank;   public String thum; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\EfficientAdapter.code","public static class EfficientAdapter extends BaseAdapter {   AQuery aq;   ArrayList<rankInfo> dataS;   Context mContext;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.mContext=context;     this.aq=new AQuery(context);   }   public EfficientAdapter(  Context context,  ArrayList<rankInfo> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;     this.mContext=context;     this.aq=new AQuery(context);   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_rankdream,(ViewGroup)null);       holder=new ViewHolder();       holder.rank=(TextView)convertView.findViewById(R.id.rank);       holder.name=(TextView)convertView.findViewById(R.id.name);       holder.point=(TextView)convertView.findViewById(R.id.point);       holder.icon=(ImageView)convertView.findViewById(R.id.icon);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     this.aq.id(holder.icon).image(this.dataS.get(position).gthum,true,true,0,0);     holder.rank.setText(this.dataS.get(position).rank);     holder.name.setText(this.dataS.get(position).gname);     holder.point.setText(String.valueOf(this.dataS.get(position).gmove) + "" Point"");     return convertView;   } static class ViewHolder {     ImageView icon;     TextView name;     TextView nick;     TextView point;     TextView rank;     ViewHolder(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\iDream.code","public class iDream extends Activity {   public static SQLiteDatabase db;   private static ProgressDialog dialog;   public Cursor cursor;   TextView gameName1;   TextView gameName2;   public String gameType;   FrameLayout leftfrm;   ImageView leftimg;   TextView leftname;   ImageView leftwin;   AQuery mAQuery;   idolDBhelper mHelper;   FrameLayout rightfrm;   ImageView rightimg;   TextView rightname;   ImageView rightwin;   LinearLayout winfrm;   dGameInfo winner;   dGameInfo winner2;   ArrayList<dGameInfo> mList64=new ArrayList<>();   ArrayList<dGameInfo> mList32=new ArrayList<>();   ArrayList<dGameInfo> mList16=new ArrayList<>();   ArrayList<dGameInfo> mList08=new ArrayList<>();   ArrayList<dGameInfo> mList04=new ArrayList<>();   ArrayList<dGameInfo> mList02=new ArrayList<>();   int gameStatus2=1;   int gameStatus1=32;   int imageload=0;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       iDream.this.gameStart();       iDream.dialog.dismiss();     }   } ;   ArrayList<dGameInfo> mList02L=new ArrayList<>();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRequestedOrientation(0);     setContentView(R.layout.idream);     this.winfrm=(LinearLayout)findViewById(R.id.viewwinner);     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     this.gameType=i.getStringExtra(""type"");     best();   }   public void getBitmap(){     dialog=ProgressDialog.show(this,""Loading.."",""Please Wait Image Loading..."",true,true);     new Thread(){       int i=0;       @Override public void run(){         iDream.this.mList32.get(this.i).img=iDream.this.getConnImg(iDream.this.mList32.get(0).thum);         this.i++;         if (this.i == iDream.this.mList32.size()) {           iDream.this.handler.sendEmptyMessage(0);         }       }     } .start();   }   public Bitmap getConnImg(  String url){     Bitmap bm=null;     try {       URL imgUrl=new URL(url);       URLConnection conn=imgUrl.openConnection();       HttpURLConnection httpConn=(HttpURLConnection)conn;       InputStream in=httpConn.getInputStream();       bm=BitmapFactory.decodeStream(in);       in.close();       return bm;     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return bm;     } catch (    MalformedURLException e2) {       e2.printStackTrace();       return bm;     } catch (    IOException e3) {       return bm;     }   }   public void best(){     this.gameStatus2=1;     this.gameStatus1=32;     this.mHelper=new idolDBhelper(this);     db=this.mHelper.getWritableDatabase();     this.cursor=db.rawQuery(""select a.name_kor,a.groupid,b.name_kor,b.memberid,b.thum from idolgroup a left join idolmember b on a.groupid = b.groupid where a.type='2' and b.thum not like '%noartist%'"",null);     this.cursor.getCount();     this.cursor.moveToFirst();     while (!this.cursor.isAfterLast()) {       dGameInfo item=new dGameInfo();       item.gname=this.cursor.getString(0);       item.groupid=this.cursor.getString(3);       item.name=this.cursor.getString(2);       item.artid=this.cursor.getString(1);       item.thum=this.cursor.getString(4);       this.mList32.add(item);       this.cursor.moveToNext();     }     gameStart();   }   public void gameStart(){     this.mList32=ArrayZig(this.mList32);     for (int i=this.mList32.size(); i > 32; i--) {       this.mList32.remove(i - 1);     }     this.leftwin=(ImageView)findViewById(R.id.leftwin);     this.rightwin=(ImageView)findViewById(R.id.rightwin);     this.leftimg=(ImageView)findViewById(R.id.leftimage);     this.rightimg=(ImageView)findViewById(R.id.rightimage);     this.leftname=(TextView)findViewById(R.id.leftname);     this.rightname=(TextView)findViewById(R.id.rightname);     this.gameName1=(TextView)findViewById(R.id.gamename1);     this.gameName2=(TextView)findViewById(R.id.gamename2);     this.leftfrm=(FrameLayout)findViewById(R.id.leftfrm);     this.rightfrm=(FrameLayout)findViewById(R.id.rightfrm);     gameIng(this.gameStatus1,this.gameStatus2);   }   public void gameIng(  final int i1,  int i2){     String g1;     final int lefti;     int righti;     this.imageload=0;     String leftbit=null;     String rightbit=null;     if (i1 == 4) {       g1=""ì¤€ê²°ìŠ¹"";     }  else     if (i1 == 2) {       g1=""ê²°ìŠ¹"";     }  else {       g1=String.valueOf(Integer.toString(i1)) + "" ê°•"";     }     String g2=String.valueOf(Integer.toString(i2)) + ""ê²Œìž„"";     this.gameName1.setText(g1);     this.gameName2.setText(g2);     if (i1 == 32 || i1 == 8 || i1 == 2) {       lefti=i2 - 1;       righti=i1 - i2;     }  else {       lefti=i1 - i2;       righti=i2 - 1;     }     if (i1 == 32) {       leftbit=this.mList32.get(lefti).thum;       rightbit=this.mList32.get(righti).thum;       this.leftname.setText(String.valueOf(this.mList32.get(lefti).gname) + ""\n"" + this.mList32.get(lefti).name);       this.rightname.setText(String.valueOf(this.mList32.get(righti).gname) + ""\n"" + this.mList32.get(righti).name);     }  else     if (i1 == 16) {       leftbit=this.mList16.get(lefti).thum;       rightbit=this.mList16.get(righti).thum;       this.leftname.setText(String.valueOf(this.mList16.get(lefti).gname) + ""\n"" + this.mList16.get(lefti).name);       this.rightname.setText(String.valueOf(this.mList16.get(righti).gname) + ""\n"" + this.mList16.get(righti).name);     }  else     if (i1 == 8) {       leftbit=this.mList08.get(lefti).thum;       rightbit=this.mList08.get(righti).thum;       this.leftname.setText(String.valueOf(this.mList08.get(lefti).gname) + ""\n"" + this.mList08.get(lefti).name);       this.rightname.setText(String.valueOf(this.mList08.get(righti).gname) + ""\n"" + this.mList08.get(righti).name);     }  else     if (i1 == 4) {       leftbit=this.mList04.get(lefti).thum;       rightbit=this.mList04.get(righti).thum;       this.leftname.setText(String.valueOf(this.mList04.get(lefti).gname) + ""\n"" + this.mList04.get(lefti).name);       this.rightname.setText(String.valueOf(this.mList04.get(righti).gname) + ""\n"" + this.mList04.get(righti).name);     }  else     if (i1 == 2) {       leftbit=this.mList02.get(lefti).thum;       rightbit=this.mList02.get(righti).thum;       this.leftname.setText(String.valueOf(this.mList02.get(lefti).gname) + ""\n"" + this.mList02.get(lefti).name);       this.rightname.setText(String.valueOf(this.mList02.get(righti).gname) + ""\n"" + this.mList02.get(righti).name);     }     this.mAQuery.id(R.id.leftimage).image(leftbit,true,true,0,0);     this.mAQuery.id(R.id.rightimage).image(rightbit,true,true,0,0);     if (i2 == i1 / 2) {       this.gameStatus1=i1 / 2;       this.gameStatus2=1;     }  else {       this.gameStatus2=i2 + 1;     }     final int i=righti;     this.leftfrm.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Animation rightani=AnimationUtils.loadAnimation(iDream.this.getApplication(),R.anim.slide_right_out);         rightani.setDuration(500L);         iDream.this.rightfrm.setAnimation(rightani);         iDream.this.leftwin.setVisibility(0);         Animation anim1=AnimationUtils.loadAnimation(iDream.this.getApplication(),R.anim.slide_right_in);         anim1.setDuration(700L);         iDream.this.leftwin.setAnimation(anim1);         final int i3=i1;         final int i4=lefti;         final int i5=i;         anim1.setAnimationListener(new Animation.AnimationListener(){           @Override public void onAnimationEnd(          Animation animation){             iDream.this.leftwin.setVisibility(8);             if (i3 == 32) {               iDream.this.mList16.add(iDream.this.mList32.get(i4));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i3 == 16) {               iDream.this.mList08.add(iDream.this.mList16.get(i4));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i3 == 8) {               iDream.this.mList04.add(iDream.this.mList08.get(i4));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i3 == 4) {               iDream.this.mList02.add(iDream.this.mList04.get(i4));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);             }  else             if (i3 == 2) {               iDream.this.winner=iDream.this.mList02.get(i4);               iDream.this.winner2=iDream.this.mList02.get(i5);               iDream.this.winset();             }           }           @Override public void onAnimationRepeat(          Animation animation){           }           @Override public void onAnimationStart(          Animation animation){           }         } );       }     } );     final int i3=righti;     this.rightfrm.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Animation rightani=AnimationUtils.loadAnimation(iDream.this.getApplication(),R.anim.slide_left_out);         rightani.setDuration(500L);         iDream.this.leftfrm.setAnimation(rightani);         iDream.this.rightwin.setVisibility(0);         Animation anim=AnimationUtils.loadAnimation(iDream.this.getApplication(),R.anim.slide_left_in);         anim.setDuration(700L);         iDream.this.rightwin.setAnimation(anim);         final int i4=i1;         final int i5=i3;         final int i6=lefti;         anim.setAnimationListener(new Animation.AnimationListener(){           @Override public void onAnimationEnd(          Animation animation){             iDream.this.rightwin.setVisibility(8);             if (i4 == 32) {               iDream.this.mList16.add(iDream.this.mList32.get(i5));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i4 == 16) {               iDream.this.mList08.add(iDream.this.mList16.get(i5));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i4 == 8) {               iDream.this.mList04.add(iDream.this.mList08.get(i5));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);               return;             }             if (i4 == 4) {               iDream.this.mList02.add(iDream.this.mList04.get(i5));               iDream.this.gameIng(iDream.this.gameStatus1,iDream.this.gameStatus2);             }  else             if (i4 == 2) {               iDream.this.winner=iDream.this.mList02.get(i5);               iDream.this.winner2=iDream.this.mList02.get(i6);               iDream.this.winset();             }           }           @Override public void onAnimationRepeat(          Animation animation){           }           @Override public void onAnimationStart(          Animation animation){           }         } );       }     } );   }   public void winset(){     Button btnre=(Button)findViewById(R.id.btnre);     Button btnend=(Button)findViewById(R.id.btnend);     this.leftfrm.setClickable(false);     this.rightfrm.setClickable(false);     for (int i=0; i < this.mList04.size(); i++) {       if (!this.winner.groupid.equals(this.mList04.get(i).groupid) && !this.winner2.groupid.equals(this.mList04.get(i).groupid)) {         this.mList02L.add(this.mList04.get(i));       }     }     ImageView img1st=(ImageView)findViewById(R.id.img1st);     ImageView img2st=(ImageView)findViewById(R.id.img2st);     ImageView img3st=(ImageView)findViewById(R.id.img3st);     ImageView img4st=(ImageView)findViewById(R.id.img4st);     TextView name1st=(TextView)findViewById(R.id.name1st);     TextView name2st=(TextView)findViewById(R.id.name2st);     TextView name3st=(TextView)findViewById(R.id.name3st);     TextView name4st=(TextView)findViewById(R.id.name4st);     this.mAQuery.id(img1st).image(this.winner.thum,true,true,0,0);     this.mAQuery.id(img2st).image(this.winner2.thum,true,true,0,0);     this.mAQuery.id(img3st).image(this.mList02L.get(0).thum,true,true,0,0);     this.mAQuery.id(img4st).image(this.mList02L.get(1).thum,true,true,0,0);     name1st.setText(this.winner.name);     name2st.setText(this.winner2.name);     name3st.setText(this.mList02L.get(0).name);     name4st.setText(this.mList02L.get(1).name);     this.winfrm.setVisibility(0);     img1st.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){       }     } );     img2st.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){       }     } );     img3st.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){       }     } );     img4st.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){       }     } );     btnre.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         iDream.this.winfrm.setVisibility(8);         iDream.this.best();       }     } );     btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         iDream.this.finish();       }     } );   }   public void setSave(  dGameInfo w1,  dGameInfo w2,  dGameInfo w3,  dGameInfo w4){     Map<String,Object> params=new HashMap<>();     params.put(""artid1"",w1.groupid);     params.put(""name1"",w1.name);     params.put(""thum1"",w1.thum);     params.put(""artid2"",w2.groupid);     params.put(""name2"",w2.name);     params.put(""thum2"",w2.thum);     params.put(""artid3"",w3.groupid);     params.put(""name3"",w3.name);     params.put(""thum3"",w3.thum);     params.put(""artid4"",w4.groupid);     params.put(""name4"",w4.name);     params.put(""thum4"",w4.thum);     params.put(""type"",""2"");     this.mAQuery.ajax(""http://neopark777.cafe24.com/app/act/dreamwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){       }     } );   }   public ArrayList<dGameInfo> ArrayZig(  ArrayList<dGameInfo> ingp){     ArrayList<dGameInfo> tmpgp=new ArrayList<>();     int orisize=ingp.size();     Random rand=new Random();     for (int cc=0; cc < orisize; cc++) {       int ran=rand.nextInt(ingp.size());       new dGameInfo();       dGameInfo item=ingp.get(ran);       tmpgp.add(item);       ingp.remove(ran);     }     return tmpgp;   }   public ArrayList<dGameInfo> setData2(  JSONObject json){     ArrayList<dGameInfo> data1=new ArrayList<>();     JSONArray localJSONArray=json.optJSONArray(""datalist"");     int cnt=localJSONArray.length();     for (int n=0; n < cnt; n++) {       dGameInfo item=new dGameInfo();       try {         JSONObject localJSONObject2=localJSONArray.optJSONObject(n);         item.thum=localJSONObject2.optString(""thum"").replace(""C100x87"",""image"");         item.name=localJSONObject2.optString(""name"");         item.groupid=localJSONObject2.optString(""artid"");         item.rank=Integer.parseInt(localJSONObject2.optString(""rownum""));       }  catch (      Exception e) {       }       data1.add(item);     }     return data1;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\iDreamIdol.code","public class iDreamIdol extends AdlibActivity {   public static SQLiteDatabase db;   private static ProgressDialog dialog;   LinearLayout bgfrm;   public Cursor cursor;   ImageView gameName1;   TextView gameName2;   public String gameType;   FrameLayout gamebg;   ImageView interval_bg;   FrameLayout leftfrm;   ImageView leftimg;   TextView leftname;   ImageView leftwin;   AQuery mAQuery;   idolDBhelper mHelper;   FrameLayout rightfrm;   ImageView rightimg;   TextView rightname;   ImageView rightwin;   LinearLayout winfrm;   dGameInfo winner;   dGameInfo winner2;   ArrayList<dGameInfo> mList64=new ArrayList<>();   ArrayList<dGameInfo> mList32=new ArrayList<>();   ArrayList<dGameInfo> mList16=new ArrayList<>();   ArrayList<dGameInfo> mList08=new ArrayList<>();   ArrayList<dGameInfo> mList04=new ArrayList<>();   ArrayList<dGameInfo> mList02=new ArrayList<>();   int gameStatus2=1;   int gameStatus1=32;   int imageload=0;   private final Handler handler=new Handler(){     @Override public void handleMessage(    Message msg){       iDreamIdol.this.gameStart();       iDreamIdol.dialog.dismiss();     }   } ;   ArrayList<dGameInfo> mList02L=new ArrayList<>();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRequestedOrientation(0);     setContentView(R.layout.idreamidol);     setAdsContainer(R.id.ads);     this.gamebg=(FrameLayout)findViewById(R.id.gamebg);     this.winfrm=(LinearLayout)findViewById(R.id.viewwinner);     this.interval_bg=(ImageView)findViewById(R.id.interval_bg);     this.mAQuery=new AQuery((Activity)this);     this.bgfrm=(LinearLayout)findViewById(R.id.viewwinner);     Intent i=getIntent();     this.gameType=i.getStringExtra(""type"");     if (""1"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.bg_final_ranking_list);     }     if (""2"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.bg_final_ranking_girl_list);     }     best();   }   public void getBitmap(){     dialog=ProgressDialog.show(this,""Loading.."",""Please Wait Image Loading..."",true,true);     new Thread(){       int i=0;       @Override public void run(){         iDreamIdol.this.mList32.get(this.i).img=iDreamIdol.this.getConnImg(iDreamIdol.this.mList32.get(0).thum);         this.i++;         if (this.i == iDreamIdol.this.mList32.size()) {           iDreamIdol.this.handler.sendEmptyMessage(0);         }       }     } .start();   }   public Bitmap getConnImg(  String url){     Bitmap bm=null;     try {       URL imgUrl=new URL(url);       URLConnection conn=imgUrl.openConnection();       HttpURLConnection httpConn=(HttpURLConnection)conn;       InputStream in=httpConn.getInputStream();       bm=BitmapFactory.decodeStream(in);       in.close();       return bm;     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();       return bm;     } catch (    MalformedURLException e2) {       e2.printStackTrace();       return bm;     } catch (    IOException e3) {       return bm;     }   }   public void best(){     this.gameStatus2=1;     this.gameStatus1=32;     this.mHelper=new idolDBhelper(this);     db=this.mHelper.getWritableDatabase();     String query=""select a.name_eng,a.groupid,b.name_eng,b.memberid,b.thum from ( select * from idolgroup where type='"" + this.gameType + ""' and sort <  '9999' ORDER BY sort LIMIT 30)  a left join idolmember b on a.groupid = b.groupid where  b.thum not like '%noartist%' "";     this.cursor=db.rawQuery(query,null);     this.cursor.getCount();     this.cursor.moveToFirst();     while (!this.cursor.isAfterLast()) {       dGameInfo item=new dGameInfo();       item.gname=this.cursor.getString(0);       item.groupid=this.cursor.getString(3);       item.name=this.cursor.getString(2);       item.artid=this.cursor.getString(1);       item.thum=this.cursor.getString(4);       this.mList32.add(item);       this.cursor.moveToNext();     }     gameStart();   }   public void gameStart(){     this.mList32=ArrayZig(this.mList32);     for (int i=this.mList32.size(); i > 32; i--) {       this.mList32.remove(i - 1);     }     this.leftwin=(ImageView)findViewById(R.id.leftwin);     this.rightwin=(ImageView)findViewById(R.id.rightwin);     this.leftimg=(ImageView)findViewById(R.id.leftimage);     this.rightimg=(ImageView)findViewById(R.id.rightimage);     this.leftname=(TextView)findViewById(R.id.leftname);     this.rightname=(TextView)findViewById(R.id.rightname);     this.gameName1=(ImageView)findViewById(R.id.gamename1);     this.gameName2=(TextView)findViewById(R.id.gamename2);     this.leftfrm=(FrameLayout)findViewById(R.id.leftfrm);     this.rightfrm=(FrameLayout)findViewById(R.id.rightfrm);     gameIng(this.gameStatus1,this.gameStatus2);   }   public void gameIng(  final int i1,  int i2){     final int lefti;     int righti;     this.imageload=0;     String leftbit=null;     String rightbit=null;     if (i1 == 4) {       this.gameName1.setBackgroundResource(R.drawable.img_semifinal);       this.gamebg.setBackgroundResource(R.drawable.bg_4vs);     }  else     if (i1 == 2) {       this.gameName1.setBackgroundResource(R.drawable.img_final);       this.gamebg.setBackgroundResource(R.drawable.bg_finalvs);     }  else     if (i1 == 8) {       this.gameName1.setBackgroundResource(R.drawable.img_8vs);       this.gamebg.setBackgroundResource(R.drawable.bg_8vs);     }  else     if (i1 == 16) {       this.gameName1.setBackgroundResource(R.drawable.img_16vs);       this.gamebg.setBackgroundResource(R.drawable.bg_16vs);     }  else {       this.gameName1.setBackgroundResource(R.drawable.img_32vs);       this.gamebg.setBackgroundResource(R.drawable.bg_32vs);     }     String g2=String.valueOf(Integer.toString(i2)) + ""ê²Œìž„"";     if (i1 == 2) {       this.gameName2.setText("""");     }  else {       this.gameName2.setText(g2);     }     if (i2 == 1) { switch (i1) { case 2:         this.interval_bg.setBackgroundResource(R.drawable.full_bg_final);       break; case 4:     this.interval_bg.setBackgroundResource(R.drawable.full_bg_semifinal);   break; case 8: this.interval_bg.setBackgroundResource(R.drawable.full_bg_quarterfinal); break; case b.h: this.interval_bg.setBackgroundResource(R.drawable.full_bg_16kang); break; case b.i: this.interval_bg.setBackgroundResource(R.drawable.full_bg_32kang); break; } this.interval_bg.setVisibility(0); Animation anim1=AnimationUtils.loadAnimation(getApplication(),R.anim.fade); anim1.setDuration(1000L); this.interval_bg.setAnimation(anim1); anim1.setAnimationListener(new Animation.AnimationListener(){ @Override public void onAnimationEnd(Animation animation){ iDreamIdol.this.interval_bg.setVisibility(8); } @Override public void onAnimationRepeat(Animation animation){ } @Override public void onAnimationStart(Animation animation){ } } ); } if (i1 == 32 || i1 == 8 || i1 == 2) { lefti=i2 - 1; righti=i1 - i2; }  else { lefti=i1 - i2; righti=i2 - 1; } if (i1 == 32) { leftbit=this.mList32.get(lefti).thum; rightbit=this.mList32.get(righti).thum; this.leftname.setText(String.valueOf(this.mList32.get(lefti).gname) + ""\n"" + this.mList32.get(lefti).name); this.rightname.setText(String.valueOf(this.mList32.get(righti).gname) + ""\n"" + this.mList32.get(righti).name); }  else if (i1 == 16) { leftbit=this.mList16.get(lefti).thum; rightbit=this.mList16.get(righti).thum; this.leftname.setText(String.valueOf(this.mList16.get(lefti).gname) + ""\n"" + this.mList16.get(lefti).name); this.rightname.setText(String.valueOf(this.mList16.get(righti).gname) + ""\n"" + this.mList16.get(righti).name); }  else if (i1 == 8) { leftbit=this.mList08.get(lefti).thum; rightbit=this.mList08.get(righti).thum; this.leftname.setText(String.valueOf(this.mList08.get(lefti).gname) + ""\n"" + this.mList08.get(lefti).name); this.rightname.setText(String.valueOf(this.mList08.get(righti).gname) + ""\n"" + this.mList08.get(righti).name); }  else if (i1 == 4) { leftbit=this.mList04.get(lefti).thum; rightbit=this.mList04.get(righti).thum; this.leftname.setText(String.valueOf(this.mList04.get(lefti).gname) + ""\n"" + this.mList04.get(lefti).name); this.rightname.setText(String.valueOf(this.mList04.get(righti).gname) + ""\n"" + this.mList04.get(righti).name); }  else if (i1 == 2) { leftbit=this.mList02.get(lefti).thum; rightbit=this.mList02.get(righti).thum; this.leftname.setText(String.valueOf(this.mList02.get(lefti).gname) + ""\n"" + this.mList02.get(lefti).name); this.rightname.setText(String.valueOf(this.mList02.get(righti).gname) + ""\n"" + this.mList02.get(righti).name); } this.mAQuery.id(R.id.leftimage).image(leftbit,true,true,0,0); this.mAQuery.id(R.id.rightimage).image(rightbit,true,true,0,0); if (i2 == i1 / 2) { this.gameStatus1=i1 / 2; this.gameStatus2=1; }  else { this.gameStatus2=i2 + 1; } final int i=righti; this.leftfrm.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ Animation rightani=AnimationUtils.loadAnimation(iDreamIdol.this.getApplication(),R.anim.slide_right_out); rightani.setDuration(500L); iDreamIdol.this.rightfrm.setAnimation(rightani); iDreamIdol.this.leftwin.setVisibility(0); Animation anim12=AnimationUtils.loadAnimation(iDreamIdol.this.getApplication(),R.anim.slide_right_in); anim12.setDuration(700L); iDreamIdol.this.leftwin.setAnimation(anim12); final int i3=i1; final int i4=lefti; final int i5=i; anim12.setAnimationListener(new Animation.AnimationListener(){ @Override public void onAnimationEnd(Animation animation){ iDreamIdol.this.leftwin.setVisibility(8); if (i3 == 32) { iDreamIdol.this.mList16.add(iDreamIdol.this.mList32.get(i4)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i3 == 16) { iDreamIdol.this.mList08.add(iDreamIdol.this.mList16.get(i4)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i3 == 8) { iDreamIdol.this.mList04.add(iDreamIdol.this.mList08.get(i4)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i3 == 4) { iDreamIdol.this.mList02.add(iDreamIdol.this.mList04.get(i4)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); }  else if (i3 == 2) { iDreamIdol.this.winner=iDreamIdol.this.mList02.get(i4); iDreamIdol.this.winner2=iDreamIdol.this.mList02.get(i5); iDreamIdol.this.winset(); } } @Override public void onAnimationRepeat(Animation animation){ } @Override public void onAnimationStart(Animation animation){ } } ); } } ); final int i3=righti; this.rightfrm.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ Animation rightani=AnimationUtils.loadAnimation(iDreamIdol.this.getApplication(),R.anim.slide_left_out); rightani.setDuration(500L); iDreamIdol.this.leftfrm.setAnimation(rightani); iDreamIdol.this.rightwin.setVisibility(0); Animation anim=AnimationUtils.loadAnimation(iDreamIdol.this.getApplication(),R.anim.slide_left_in); anim.setDuration(700L); iDreamIdol.this.rightwin.setAnimation(anim); final int i4=i1; final int i5=i3; final int i6=lefti; anim.setAnimationListener(new Animation.AnimationListener(){ @Override public void onAnimationEnd(Animation animation){ iDreamIdol.this.rightwin.setVisibility(8); if (i4 == 32) { iDreamIdol.this.mList16.add(iDreamIdol.this.mList32.get(i5)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i4 == 16) { iDreamIdol.this.mList08.add(iDreamIdol.this.mList16.get(i5)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i4 == 8) { iDreamIdol.this.mList04.add(iDreamIdol.this.mList08.get(i5)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); return; } if (i4 == 4) { iDreamIdol.this.mList02.add(iDreamIdol.this.mList04.get(i5)); iDreamIdol.this.gameIng(iDreamIdol.this.gameStatus1,iDreamIdol.this.gameStatus2); }  else if (i4 == 2) { iDreamIdol.this.winner=iDreamIdol.this.mList02.get(i5); iDreamIdol.this.winner2=iDreamIdol.this.mList02.get(i6); iDreamIdol.this.winset(); } } @Override public void onAnimationRepeat(Animation animation){ } @Override public void onAnimationStart(Animation animation){ } } ); } } ); } public void winset(){ Button btnre=(Button)findViewById(R.id.btnre); Button btnend=(Button)findViewById(R.id.btnend); this.leftfrm.setClickable(false); this.rightfrm.setClickable(false); for (int i=0; i < this.mList04.size(); i++) { if (!this.winner.groupid.equals(this.mList04.get(i).groupid) && !this.winner2.groupid.equals(this.mList04.get(i).groupid)) { this.mList02L.add(this.mList04.get(i)); } } ImageView img1st=(ImageView)findViewById(R.id.img1st); ImageView img2st=(ImageView)findViewById(R.id.img2st); ImageView img3st=(ImageView)findViewById(R.id.img3st); ImageView img4st=(ImageView)findViewById(R.id.img4st); TextView name1st=(TextView)findViewById(R.id.name1st); TextView name2st=(TextView)findViewById(R.id.name2st); TextView name3st=(TextView)findViewById(R.id.name3st); TextView name4st=(TextView)findViewById(R.id.name4st); this.mAQuery.id(img1st).image(this.winner.thum,true,true,0,0); this.mAQuery.id(img2st).image(this.winner2.thum,true,true,0,0); this.mAQuery.id(img3st).image(this.mList02L.get(0).thum,true,true,0,0); this.mAQuery.id(img4st).image(this.mList02L.get(1).thum,true,true,0,0); name1st.setText(this.winner.name); name2st.setText(this.winner2.name); name3st.setText(this.mList02L.get(0).name); name4st.setText(this.mList02L.get(1).name); setSave(this.winner,this.winner2,this.mList02L.get(0),this.mList02L.get(1)); this.winfrm.setVisibility(0); img1st.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ } } ); img2st.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ } } ); img3st.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ } } ); img4st.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ } } ); btnre.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ iDreamIdol.this.winfrm.setVisibility(8); iDreamIdol.this.best(); } } ); btnend.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ iDreamIdol.this.finish(); } } ); } public void setSave(dGameInfo w1,dGameInfo w2,dGameInfo w3,dGameInfo w4){ Map<String,Object> params=new HashMap<>(); params.put(""artid1"",w1.groupid); params.put(""name1"",w1.name); params.put(""thum1"",w1.thum); params.put(""groupid1"",w1.artid); params.put(""groupname1"",w1.gname); params.put(""artid2"",w2.groupid); params.put(""name2"",w2.name); params.put(""thum2"",w2.thum); params.put(""groupid2"",w2.groupid); params.put(""groupname2"",w2.gname); params.put(""artid3"",w3.groupid); params.put(""name3"",w3.name); params.put(""thum3"",w3.thum); params.put(""groupid3"",w3.artid); params.put(""groupname3"",w3.gname); params.put(""artid4"",w4.groupid); params.put(""name4"",w4.name); params.put(""thum4"",w4.thum); params.put(""groupid4"",w4.artid); params.put(""groupname4"",w4.gname); params.put(""type"",this.gameType); this.mAQuery.ajax(""http://180.71.58.225/app/idol/dreamwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){ @Override public void callback(String url,String json,AjaxStatus status){ } } ); } public ArrayList<dGameInfo> ArrayZig(ArrayList<dGameInfo> ingp){ ArrayList<dGameInfo> tmpgp=new ArrayList<>(); int orisize=ingp.size(); Random rand=new Random(); for (int cc=0; cc < orisize; cc++) { int ran=rand.nextInt(ingp.size()); new dGameInfo(); dGameInfo item=ingp.get(ran); tmpgp.add(item); ingp.remove(ran); } return tmpgp; } public ArrayList<dGameInfo> setData2(JSONObject json){ ArrayList<dGameInfo> data1=new ArrayList<>(); JSONArray localJSONArray=json.optJSONArray(""datalist""); int cnt=localJSONArray.length(); for (int n=0; n < cnt; n++) { dGameInfo item=new dGameInfo(); try { JSONObject localJSONObject2=localJSONArray.optJSONObject(n); item.thum=localJSONObject2.optString(""thum"").replace(""C100x87"",""image""); item.name=localJSONObject2.optString(""name""); item.groupid=localJSONObject2.optString(""artid""); item.rank=Integer.parseInt(localJSONObject2.optString(""rownum"")); }  catch (Exception e) { } data1.add(item); } return data1; } @Override public void onBackPressed(){ new AlertDialog.Builder(this).setTitle("""").setMessage(""ê²Œìž„ ì§„í–‰ì¤‘ìž…ë‹ˆë‹¤ ì¢…ë£Œí•˜ì‹œê² ìŠµë‹ˆê¹Œ?"").setPositiveButton(""OK"",new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface dialog2,int whichButton){ iDreamIdol.this.finish(); } } ).show(); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\iDreamMain.code","public class iDreamMain extends AdlibActivity {   FrameLayout bgfrm;   Button btnrank;   Button btnstart;   String gameType;   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRequestedOrientation(0);     setContentView(R.layout.idreammain);     setAdsContainer(R.id.ads);     this.bgfrm=(FrameLayout)findViewById(R.id.bgfrm);     Intent i=getIntent();     this.gameType=i.getStringExtra(""type"");     if (""1"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.main01);     }     if (""2"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.main_girl);     }     this.btnrank=(Button)findViewById(R.id.btnmrank);     this.btnstart=(Button)findViewById(R.id.btnmstart);     this.btnrank.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent=new Intent(iDreamMain.this,(Class<?>)iDreamRank.class);         myintent.putExtra(""type"",iDreamMain.this.gameType);         iDreamMain.this.startActivity(myintent);       }     } );     this.btnstart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent=new Intent(iDreamMain.this,(Class<?>)iDreamIdol.class);         myintent.putExtra(""type"",iDreamMain.this.gameType);         iDreamMain.this.startActivity(myintent);       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\iDreamRank.code","public class iDreamRank extends AdlibActivity {   LinearLayout adLayout;   LinearLayout bgfrm;   ImageView btnday;   ImageView btnmonth;   ImageView btnweek;   ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   ProgressBar top_progress;   String gameType=""2"";   ArrayList<rankInfo> mRowList=new ArrayList<>();   String dayType=""1"";   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRequestedOrientation(0);     setContentView(R.layout.idreamrank);     setAdsContainer(R.id.ads);     this.bgfrm=(LinearLayout)findViewById(R.id.bgfrm);     Intent i=getIntent();     this.gameType=i.getStringExtra(""type"");     if (""1"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.bg_rankingview);     }     if (""2"".equals(this.gameType)) {       this.bgfrm.setBackgroundResource(R.drawable.bg_rankingview_girl);     }     Button btnstart=(Button)findViewById(R.id.btnstart);     this.li=(ListView)findViewById(R.id.ranklist);     this.top_progress=(ProgressBar)findViewById(R.id.top_progress);     this.btnday=(ImageView)findViewById(R.id.btnday);     this.btnweek=(ImageView)findViewById(R.id.btnweek);     this.btnmonth=(ImageView)findViewById(R.id.btnmonth);     this.mAQuery=new AQuery((Activity)this);     btnstart.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent=new Intent(iDreamRank.this,(Class<?>)iDreamIdol.class);         myintent.putExtra(""type"",iDreamRank.this.gameType);         iDreamRank.this.startActivity(myintent);       }     } );     setMenu();     makea();     this.btnday.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         iDreamRank.this.dayType=""1"";         iDreamRank.this.setMenu();         iDreamRank.this.makea();       }     } );     this.btnweek.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         iDreamRank.this.dayType=""2"";         iDreamRank.this.setMenu();         iDreamRank.this.makea();       }     } );     this.btnmonth.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         iDreamRank.this.dayType=""3"";         iDreamRank.this.setMenu();         iDreamRank.this.makea();       }     } );     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(iDreamRank.this,(Class<?>)memberTab.class);         myintent.putExtra(""sex"",iDreamRank.this.gameType);         myintent.putExtra(""name"",iDreamRank.this.mRowList.get(position).parentname);         myintent.putExtra(""search"",iDreamRank.this.mRowList.get(position).parentname);         myintent.putExtra(""index"",""2"");         myintent.putExtra(""artid"",iDreamRank.this.getPid(iDreamRank.this.mRowList.get(position).artid));         iDreamRank.this.startActivity(myintent);       }     } );   }   public String getPid(  String artid){     String reStr="""";     idolDBhelper mHelper=new idolDBhelper(this);     SQLiteDatabase db=mHelper.getWritableDatabase();     String query=""select groupid from idolmember where memberid ='"" + artid + ""' "";     Cursor cursor=db.rawQuery(query,null);     int cur_cnt=cursor.getCount();     cursor.moveToFirst();     if (cur_cnt > 0) {       reStr=cursor.getString(0);     }     cursor.close();     db.close();     return reStr;   }   public void setMenu(){     this.btnday.setBackgroundResource(R.drawable.tab_todayranking_hide);     this.btnweek.setBackgroundResource(R.drawable.tab_weekranking_hide);     this.btnmonth.setBackgroundResource(R.drawable.tab_monthly_ranking_hide);     if (""1"".equals(this.dayType)) {       this.btnday.setBackgroundResource(R.drawable.tab_todayranking);     }     if (""2"".equals(this.dayType)) {       this.btnweek.setBackgroundResource(R.drawable.tab_weekranking);     }     if (""3"".equals(this.dayType)) {       this.btnmonth.setBackgroundResource(R.drawable.tab_monthly_ranking);     }   }   public void makea(){     this.mRowList.clear();     if (this.mAdapter != null) {       this.mAdapter.notifyDataSetChanged();     }     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.gameType);     params.put(""daytype"",this.dayType);     this.top_progress.setVisibility(0);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/dreamlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         new ArrayList();         ArrayList<rankInfo> dataTemp=iDreamRank.this.setData2(json);         iDreamRank.this.mRowList=dataTemp;         iDreamRank.this.mAdapter=new EfficientAdapter(iDreamRank.this,iDreamRank.this.mRowList);         iDreamRank.this.li.setAdapter((ListAdapter)iDreamRank.this.mAdapter);         iDreamRank.this.top_progress.setVisibility(8);         iDreamRank.this.setMenu();       }     } );   }   public ArrayList<rankInfo> setData2(  JSONObject json){     ArrayList<rankInfo> data1=new ArrayList<>();     try {       JSONArray localJSONArray=json.optJSONArray(""datalist"");       int cnt=localJSONArray.length();       int n=0;       rankInfo item=null;       while (n < cnt) {         try {           rankInfo item2=new rankInfo();           try {             JSONObject localJSONObject2=localJSONArray.optJSONObject(n);             item2.rank=localJSONObject2.optString(""ROWNUM"");             item2.gname=localJSONObject2.optString(""name"");             item2.gthum=localJSONObject2.optString(""thum"");             item2.artid=localJSONObject2.optString(""artid"");             item2.parentid=localJSONObject2.optString(""groupid"");             item2.parentname=localJSONObject2.optString(""groupname"");             item2.gmove=localJSONObject2.optString(""point"");           }  catch (          Exception e) {             Log.d(""rank"",e.toString());             Toast.makeText(getApplicationContext(),e.toString(),1000).show();           }           data1.add(item2);           n++;           item=item2;         }  catch (        Exception e2) {         }       }     }  catch (    Exception e3) {     }     return data1;   } public static class EfficientAdapter extends BaseAdapter {     AQuery aq;     ArrayList<rankInfo> dataS;     Context mContext;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.mContext=context;       this.aq=new AQuery(context);     }     public EfficientAdapter(    Context context,    ArrayList<rankInfo> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;       this.mContext=context;       this.aq=new AQuery(context);     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_rankdream,(ViewGroup)null);         holder=new ViewHolder();         holder.rank=(TextView)convertView.findViewById(R.id.rank);         holder.name=(TextView)convertView.findViewById(R.id.name);         holder.point=(TextView)convertView.findViewById(R.id.point);         holder.icon=(ImageView)convertView.findViewById(R.id.icon);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       this.aq.id(holder.icon).image(this.dataS.get(position).gthum,true,true,0,0);       holder.rank.setText(this.dataS.get(position).rank);       holder.name.setText(this.dataS.get(position).gname);       holder.point.setText(String.valueOf(this.dataS.get(position).gmove) + "" Point"");       return convertView;     } static class ViewHolder {       ImageView icon;       TextView name;       TextView nick;       TextView point;       TextView rank;       ViewHolder(){       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.idream\ViewHolder.code","static class ViewHolder {   ImageView icon;   TextView name;   TextView nick;   TextView point;   TextView rank;   ViewHolder(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\EfficientAdapter.code","public static class EfficientAdapter extends BaseAdapter {   ArrayList<MsgList> dataS;   private Bitmap mIcon1;   private Bitmap mIcon2;   private LayoutInflater mInflater;   public EfficientAdapter(  Context context){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);   }   public EfficientAdapter(  Context context,  ArrayList<MsgList> data){     this.dataS=new ArrayList<>();     this.mInflater=LayoutInflater.from(context);     this.dataS=data;   }   @Override public int getCount(){     return this.dataS.size();   }   @Override public Object getItem(  int position){     return Integer.valueOf(position);   }   @Override public long getItemId(  int position){     return position;   }   @Override public View getView(  int position,  View convertView,  ViewGroup parent){     ViewHolder holder;     if (convertView == null) {       convertView=this.mInflater.inflate(R.layout.list_item_msg,(ViewGroup)null);       holder=new ViewHolder();       holder.title=(TextView)convertView.findViewById(R.id.title);       holder.nick=(TextView)convertView.findViewById(R.id.nick);       holder.wdate=(TextView)convertView.findViewById(R.id.wdate);       holder.inew=(ImageView)convertView.findViewById(R.id.inew);       holder.imgsex=(ImageView)convertView.findViewById(R.id.imgsex);       convertView.setTag(holder);     }  else {       holder=(ViewHolder)convertView.getTag();     }     holder.title.setText(this.dataS.get(position).title);     holder.nick.setText(this.dataS.get(position).fromnick);     holder.wdate.setText(this.dataS.get(position).date);     if (""Y"".equals(this.dataS.get(position).view)) {       holder.inew.setVisibility(4);     }  else {       holder.inew.setVisibility(0);     }     if (""1"".equals(this.dataS.get(position).sex)) {       holder.imgsex.setBackgroundResource(R.drawable.ico_man);     }  else     if (""1"".equals(this.dataS.get(position).sex)) {       holder.imgsex.setBackgroundResource(R.drawable.ico_woman);     }     return convertView;   } static class ViewHolder {     ImageView imgsex;     ImageView inew;     TextView nick;     TextView title;     TextView wdate;     ViewHolder(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\MsgInfo.code","public class MsgInfo {   String content;   String date;   String fromdevice;   String fromnick;   String idx;   String sex;   String title;   String todevice;   String tonick;   String view;   MsgInfo(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\msgList.code","public class msgList extends Activity implements AbsListView.OnScrollListener {   private static ProgressDialog dialog;   ProgressBar bottom_prog;   Button btnend;   Button btnget;   Button btnsave;   Button btnsend;   EditText comment;   String deviceId;   ListView li;   AQuery mAQuery;   EfficientAdapter mAdapter;   private boolean mLockListView;   private ArrayList<MsgList> mRowList;   private String myNick;   TextView mytxtnick;   EditText title;   String todevice;   String tonick;   TextView txtnick;   int pagesize=10;   int c_page=1;   String type=""1"";   private boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.msglist);     ImageButton btnBack=(ImageButton)findViewById(R.id.btnhome);     btnBack.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         msgList.this.finish();       }     } );     this.mAQuery=new AQuery((Activity)this);     this.deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     this.bottom_prog=(ProgressBar)findViewById(R.id.bottom_progress);     this.btnget=(Button)findViewById(R.id.btnget);     this.btnsend=(Button)findViewById(R.id.btnsend);     this.li=(ListView)findViewById(R.id.list);     this.li.setOnScrollListener(this);     this.li.setOnItemClickListener(new AdapterView.OnItemClickListener(){       @Override public void onItemClick(      AdapterView<?> arg0,      View arg1,      int position,      long arg3){         Intent myintent=new Intent(msgList.this,(Class<?>)msgView.class);         myintent.putExtra(""idx"",((MsgList)msgList.this.mRowList.get(position)).idx);         myintent.putExtra(""type"",msgList.this.type);         msgList.this.startActivity(myintent);       }     } );     makea();     this.btnget.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!""1"".equals(msgList.this.type)) {           msgList.this.type=""1"";           msgList.this.makea();         }       }     } );     this.btnsend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (!""2"".equals(msgList.this.type)) {           msgList.this.type=""2"";           msgList.this.makea();         }       }     } );   }   public void btnset(){     if (""1"".equals(this.type)) {       this.btnget.setBackgroundResource(R.drawable.community_tab_left_ov);       this.btnsend.setBackgroundResource(R.drawable.community_tab_right);     }  else {       this.btnget.setBackgroundResource(R.drawable.community_tab_left);       this.btnsend.setBackgroundResource(R.drawable.community_tab_right_ov);     }   }   public void makea(){     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.type);     params.put(""device"",this.deviceId);     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.bottom_prog.setVisibility(0);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/msggetlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         msgList.this.btnset();         if (msgList.this.mRowList != null) {           msgList.this.mRowList.clear();         }         new ArrayList();         msgList.this.mRowList=msgList.this.setData2(json);         if (msgList.this.mRowList.size() < msgList.this.pagesize) {           msgList.this.bottom_prog.setVisibility(8);           msgList.this.mLockListView=true;         }  else {           msgList.this.bottom_prog.setVisibility(8);           msgList.this.mLockListView=false;         }         msgList.this.c_page=2;         msgList.this.mAdapter=new EfficientAdapter(msgList.this,msgList.this.mRowList);         msgList.this.li.setAdapter((ListAdapter)msgList.this.mAdapter);       }     } );   } public static class EfficientAdapter extends BaseAdapter {     ArrayList<MsgList> dataS;     private Bitmap mIcon1;     private Bitmap mIcon2;     private LayoutInflater mInflater;     public EfficientAdapter(    Context context){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);     }     public EfficientAdapter(    Context context,    ArrayList<MsgList> data){       this.dataS=new ArrayList<>();       this.mInflater=LayoutInflater.from(context);       this.dataS=data;     }     @Override public int getCount(){       return this.dataS.size();     }     @Override public Object getItem(    int position){       return Integer.valueOf(position);     }     @Override public long getItemId(    int position){       return position;     }     @Override public View getView(    int position,    View convertView,    ViewGroup parent){       ViewHolder holder;       if (convertView == null) {         convertView=this.mInflater.inflate(R.layout.list_item_msg,(ViewGroup)null);         holder=new ViewHolder();         holder.title=(TextView)convertView.findViewById(R.id.title);         holder.nick=(TextView)convertView.findViewById(R.id.nick);         holder.wdate=(TextView)convertView.findViewById(R.id.wdate);         holder.inew=(ImageView)convertView.findViewById(R.id.inew);         holder.imgsex=(ImageView)convertView.findViewById(R.id.imgsex);         convertView.setTag(holder);       }  else {         holder=(ViewHolder)convertView.getTag();       }       holder.title.setText(this.dataS.get(position).title);       holder.nick.setText(this.dataS.get(position).fromnick);       holder.wdate.setText(this.dataS.get(position).date);       if (""Y"".equals(this.dataS.get(position).view)) {         holder.inew.setVisibility(4);       }  else {         holder.inew.setVisibility(0);       }       if (""1"".equals(this.dataS.get(position).sex)) {         holder.imgsex.setBackgroundResource(R.drawable.ico_man);       }  else       if (""1"".equals(this.dataS.get(position).sex)) {         holder.imgsex.setBackgroundResource(R.drawable.ico_woman);       }       return convertView;     } static class ViewHolder {       ImageView imgsex;       ImageView inew;       TextView nick;       TextView title;       TextView wdate;       ViewHolder(){       }     }   }   public ArrayList<MsgList> setData2(  JSONObject json){     ArrayList<MsgList> data1=new ArrayList<>();     try {       JSONArray localJSONArray=json.optJSONArray(""datalist"");       int cnt=localJSONArray.length();       if (cnt > 0) {         int n=0;         MsgList item=null;         while (n < cnt) {           try {             MsgList item2=new MsgList();             try {               JSONObject localJSONObject2=localJSONArray.optJSONObject(n);               item2.title=localJSONObject2.optString(HTMLElementName.TITLE);               item2.view=localJSONObject2.optString(""view"");               item2.date=localJSONObject2.optString(""wdate"");               item2.fromdevice=localJSONObject2.optString(""device"");               item2.idx=localJSONObject2.optString(""idx"");               item2.fromnick=localJSONObject2.optString(""nick"");               item2.sex=localJSONObject2.optString(""sex"");             }  catch (            Exception e) {             }             data1.add(item2);             n++;             item=item2;           }  catch (          Exception e2) {           }         }       }     }  catch (    Exception e3) {     }     return data1;   } public class MsgList {     String content;     String date;     String fromdevice;     String fromnick;     String idx;     String sex;     String title;     String view;     MsgList(){     }   }   private void makeAdd(  int page){     Map<String,Object> params=new HashMap<>();     params.put(""type"",this.type);     params.put(""device"",this.deviceId);     params.put(""page"",Integer.valueOf(page));     params.put(""pagesize"",Integer.valueOf(this.pagesize));     this.bottom_prog.setVisibility(0);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/msggetlist.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         new ArrayList();         ArrayList<MsgList> dataTemp=msgList.this.setData2(json);         msgList.this.mRowList.addAll(dataTemp);         if (dataTemp.size() < msgList.this.pagesize) {           msgList.this.bottom_prog.setVisibility(8);           msgList.this.mLockListView=true;         }  else {           msgList.this.bottom_prog.setVisibility(8);           msgList.this.mLockListView=false;         }         msgList.this.mAdapter.notifyDataSetChanged();       }     } );   }   @Override public void onScroll(  AbsListView view,  int firstVisibleItem,  int visibleItemCount,  int totalItemCount){     int count=totalItemCount - visibleItemCount;     if (firstVisibleItem >= count && totalItemCount != 0 && !this.mLockListView) {       this.bottom_prog.setVisibility(0);       this.mLockListView=true;       makeAdd(this.c_page);       this.c_page++;     }   }   @Override public void onScrollStateChanged(  AbsListView view,  int scrollState){   } } public class MsgList {   String content;   String date;   String fromdevice;   String fromnick;   String idx;   String sex;   String title;   String view;   MsgList(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\msgView.code","public class msgView extends Activity {   private static ProgressDialog dialog;   Button btndel;   Button btnsend;   TextView content;   TextView fnick;   AQuery mAQuery;   TextView nicktitle;   TextView title;   String type="""";   String idx="""";   MsgInfo msg=new MsgInfo();   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.msgview);     this.mAQuery=new AQuery((Activity)this);     Intent i=getIntent();     this.type=i.getStringExtra(""type"");     this.idx=i.getStringExtra(""idx"");     this.fnick=(TextView)findViewById(R.id.fnick);     this.title=(TextView)findViewById(R.id.title);     this.nicktitle=(TextView)findViewById(R.id.nicktitle);     this.content=(TextView)findViewById(R.id.content);     this.btnsend=(Button)findViewById(R.id.btnsend);     this.btndel=(Button)findViewById(R.id.btndel);     getMsg();     if (""1"".equals(this.type)) {       this.nicktitle.setText(""FROM:"");       this.btnsend.setText(""ë‹µìž¥ë³´ë‚´ê¸°"");     }  else     if (""2"".equals(this.type)) {       this.nicktitle.setText(""TO:"");       this.btnsend.setVisibility(8);     }     this.btnsend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         Intent myintent=new Intent(msgView.this,(Class<?>)msgWrite.class);         myintent.putExtra(""tonick"",msgView.this.msg.fromnick);         myintent.putExtra(""todevice"",msgView.this.msg.fromdevice);         msgView.this.startActivity(myintent);       }     } );     this.btndel.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         new AlertDialog.Builder(msgView.this).setTitle("""").setMessage(""í•´ë‹¹ ë©”ì„¸ì§€ë¥¼ ì •ë§�ë¡œ ì‚­ì œí•˜ì‹œê² ìŠµë‹ˆê¹Œ."").setPositiveButton(""ì˜ˆ"",new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog2,          int whichButton){             msgView.this.setDelete();           }         } ).setNegativeButton(""ì•„ë‹ˆì˜¤"",(DialogInterface.OnClickListener)null).show();       }     } );   }   public void setDelete(){     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""type"",this.type);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/msgdelete.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         Toast.makeText(msgView.this.getApplicationContext(),""ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤"",1000).show();         msgView.this.finish();       }     } );   }   public void getMsg(){     Map<String,Object> params=new HashMap<>();     params.put(""idx"",this.idx);     params.put(""type"",this.type);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/msgview.php"",(Map<String,?>)params,JSONObject.class,new AjaxCallback<JSONObject>(){       @Override public void callback(      String url,      JSONObject json,      AjaxStatus status){         JSONArray localJSONArray=json.optJSONArray(""datalist"");         if (localJSONArray.length() > 0) {           JSONObject localJSONObject2=localJSONArray.optJSONObject(0);           try {             msgView.this.msg.title=localJSONObject2.getString(HTMLElementName.TITLE);             msgView.this.msg.content=localJSONObject2.getString(""content"");             msgView.this.msg.fromdevice=localJSONObject2.getString(""device"");             msgView.this.msg.fromnick=localJSONObject2.getString(""nick"");             msgView.this.msg.sex=localJSONObject2.getString(""sex"");           }  catch (          JSONException e) {             e.printStackTrace();           }           msgView.this.fnick.setText(msgView.this.msg.fromnick);           msgView.this.title.setText(msgView.this.msg.title);           msgView.this.content.setText(msgView.this.msg.content);           return;         }         Toast.makeText(msgView.this.getApplicationContext(),""ì�´ë¯¸ì‚­ì œë�˜ì—ˆìŠµë‹ˆë‹¤"",1000).show();         msgView.this.finish();       }     } );   } public class MsgInfo {     String content;     String date;     String fromdevice;     String fromnick;     String idx;     String sex;     String title;     String todevice;     String tonick;     String view;     MsgInfo(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\msgWrite.code","public class msgWrite extends Activity {   private static ProgressDialog dialog;   Button btnend;   Button btnsave;   EditText comment;   AQuery mAQuery;   private String myNick;   TextView mytxtnick;   EditText title;   String todevice;   String tonick;   TextView txtnick;   public boolean myNickSet(){     SharedPreferences mPrefs=getSharedPreferences(Main.SHARED_PREFS_NAME,0);     this.myNick=mPrefs.getString(Main.SHARED_PREFS_NAME,"""");     if ("""".equals(this.myNick)) {       return false;     }     return true;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     requestWindowFeature(1);     setContentView(R.layout.msgwrite);     this.mAQuery=new AQuery((Activity)this);     this.txtnick=(TextView)findViewById(R.id.txtnick);     this.mytxtnick=(TextView)findViewById(R.id.mynick);     this.title=(EditText)findViewById(R.id.title);     this.comment=(EditText)findViewById(R.id.comment);     this.btnsave=(Button)findViewById(R.id.btnsave);     this.btnend=(Button)findViewById(R.id.btnend);     Intent i=getIntent();     this.tonick=i.getStringExtra(""tonick"");     this.todevice=i.getStringExtra(""todevice"");     if (myNickSet()) {       this.mytxtnick.setText(this.myNick);     }  else {       Intent i1=new Intent(getApplicationContext(),(Class<?>)nickset.class);       startActivity(i1);     }     this.txtnick.setText(this.tonick);     this.btnend.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         msgWrite.this.finish();       }     } );     this.btnsave.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View arg0){         if (msgWrite.this.title.getText().toString().trim().equals("""")) {           Toast.makeText(msgWrite.this.getApplicationContext(),""ì œëª©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();           return;         }         if (!msgWrite.this.comment.getText().toString().trim().equals("""")) {           if (!msgWrite.this.myNickSet()) {             Intent i2=new Intent(msgWrite.this.getApplicationContext(),(Class<?>)nickset.class);             msgWrite.this.startActivity(i2);             return;           }  else {             msgWrite.this.setSave();             return;           }         }         Toast.makeText(msgWrite.this.getApplicationContext(),""ë‚´ìš©ì�„ ìž…ë ¥í•˜ì—¬ ì£¼ì„¸ìš”"",1000).show();       }     } );   }   public void setSave(){     Object deviceId=Settings.Secure.getString(getContentResolver(),""android_id"");     dialog=new ProgressDialog(this);     dialog.setProgressStyle(0);     dialog.setMessage(""ë°œì†¡ì¤‘ìž…ë‹ˆë‹¤. ìž ì‹œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."");     dialog.setCancelable(true);     dialog.show();     Map<String,Object> params=new HashMap<>();     params.put(""tonick"",this.tonick);     params.put(""todevice"",this.todevice);     params.put(HTMLElementName.TITLE,this.title.getText());     params.put(""msg"",this.comment.getText());     params.put(""fromnick"",this.myNick);     params.put(""fromdevice"",deviceId);     this.mAQuery.ajax(""http://180.71.58.225/app/idol/msgwrite.php"",(Map<String,?>)params,String.class,new AjaxCallback<String>(){       @Override public void callback(      String url,      String json,      AjaxStatus status){         msgWrite.dialog.dismiss();         Toast.makeText(msgWrite.this.getApplicationContext(),""ìª½ì§€ë¥¼ ë°œì†¡í•˜ì˜€ìŠµë‹ˆë‹¤."",1000).show();         msgWrite.this.finish();       }     } );   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.fun.msg\ViewHolder.code","static class ViewHolder {   ImageView imgsex;   ImageView inew;   TextView nick;   TextView title;   TextView wdate;   ViewHolder(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.util\ImageProcessor.code","public class ImageProcessor {   static int maxPixel=1200;   public static byte[] thumbnail(  String imagePath,  int size){     int bytes=(size * size) / 2;     ByteArrayOutputStream thumbnailStream=new ByteArrayOutputStream(bytes);     process(imagePath,thumbnailStream,size,true);     Log.i(""ImageScale"",""thumbnail requested size: "" + size + "" projected bytes: ""+ bytes+ "" used bytes: ""+ thumbnailStream.size());     return thumbnailStream.toByteArray();   }   public static Bitmap process(  String imagePath){     return process(imagePath,maxPixel,false);   }   public static Bitmap process(  String imagePath,  int maxDimension,  boolean strict){     int largestDimension;     Log.d(""ImageScale"",""check rotation"");     int rotate=0;     try {       ExifInterface exif=new ExifInterface(imagePath); switch (exif.getAttributeInt(""Orientation"",1)) { case 3:         rotate=180;       break; case 6:     rotate=90;   break; case 8: rotate=270; break; } }  catch (IOException e) { e.printStackTrace(); } Log.d(""ImageScale"",""check dimensions""); BitmapFactory.Options options=new BitmapFactory.Options(); options.inJustDecodeBounds=true; BitmapFactory.decodeFile(imagePath,options); int originalHeight=options.outHeight; int originalWidth=options.outWidth; int originalPixels=originalHeight * originalWidth; int maxPixels=maxDimension * maxDimension; int maxPixelsForLoading=maxPixels; if (strict) { maxPixelsForLoading*=4; } double baseInSampleSize=1.0d; Log.i(""ImageScale"",""maxPixelsForLoading: "" + maxPixelsForLoading + "" originalPixels: ""+ originalPixels+ "" baseInSampleSize: 1.0 first""); while (originalPixels > maxPixelsForLoading) { baseInSampleSize*=2.0d; originalPixels/=4; } options.inJustDecodeBounds=false; options.inSampleSize=(int)baseInSampleSize; Log.i(""ImageScale"",""maxPixelsForLoading: "" + maxPixelsForLoading + "" originalPixels: ""+ originalPixels+ "" baseInSampleSize: ""+ baseInSampleSize+ "" final""); Bitmap bitmapOrg=BitmapFactory.decodeFile(imagePath,options); Log.d(""ImageScale"",""Bitmap decoded""); if (strict || rotate != 0) { int width=bitmapOrg.getWidth(); int height=bitmapOrg.getHeight(); if (width > height) { largestDimension=width; }  else { largestDimension=height; } float scaleHeight=maxDimension / largestDimension; Log.i(""ImageScale"",""width: "" + width + "" height: ""+ height+ ""scale: ""+ scaleHeight); Matrix matrix=new Matrix(); matrix.postScale(scaleHeight,scaleHeight); matrix.postRotate(rotate); Log.i(""ImageScale"",""rotate: "" + rotate); Bitmap resizedBitmap=Bitmap.createBitmap(bitmapOrg,0,0,width,height,matrix,true); Log.d(""ImageScale"",""Bitmap created""); Log.i(""ImageScale"",""new image width: "" + resizedBitmap.getHeight() + "" height: ""+ resizedBitmap.getWidth()); return resizedBitmap; } Log.d(""ImageScale"",""Bitmap fast rescale""); return bitmapOrg; } public static void process(String imagePath,OutputStream imageOutputStream){ process(imagePath,imageOutputStream,maxPixel,false); } public static void process(String imagePath,OutputStream imageOutputStream,int maxDimension,boolean strict){ process(imagePath,maxDimension,strict).compress(Bitmap.CompressFormat.JPEG,90,imageOutputStream); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\neonblue.app.util\ViewUnbindHelper.code","public class ViewUnbindHelper {   public static void unbindReferences(  View view){     if (view != null) {       try {         unbindViewReferences(view);         if (view instanceof ViewGroup) {           unbindViewGroupReferences((ViewGroup)view);         }       }  catch (      Exception e) {       }     }   }   public static void unbindReferences(  Activity activity,  int viewID){     try {       View view=activity.findViewById(viewID);       if (view != null) {         unbindViewReferences(view);         if (view instanceof ViewGroup) {           unbindViewGroupReferences((ViewGroup)view);         }       }     }  catch (    Exception e) {     }   }   private static void unbindViewGroupReferences(  ViewGroup viewGroup){     int nrOfChildren=viewGroup.getChildCount();     for (int i=0; i < nrOfChildren; i++) {       View view=viewGroup.getChildAt(i);       unbindViewReferences(view);       if (view instanceof ViewGroup) {         unbindViewGroupReferences((ViewGroup)view);       }     }     try {       viewGroup.removeAllViews();     }  catch (    Exception e) {     }   }   private static void unbindViewReferences(  View view){     try {       view.setOnClickListener(null);     }  catch (    Exception e) {     }     try {       view.setOnCreateContextMenuListener(null);     }  catch (    Exception e2) {     }     try {       view.setOnFocusChangeListener(null);     }  catch (    Exception e3) {     }     try {       view.setOnKeyListener(null);     }  catch (    Exception e4) {     }     try {       view.setOnLongClickListener(null);     }  catch (    Exception e5) {     }     try {       view.setOnClickListener(null);     }  catch (    Exception e6) {     }     try {       view.setTouchDelegate(null);     }  catch (    Exception e7) {     }     Drawable d=view.getBackground();     if (d != null) {       try {         d.setCallback(null);       }  catch (      Exception e8) {       }     }     if (view instanceof ImageView) {       ImageView imageView=(ImageView)view;       Drawable d2=imageView.getDrawable();       if (d2 != null) {         d2.setCallback(null);       }       if (d2 instanceof BitmapDrawable) {         Bitmap bm=((BitmapDrawable)d2).getBitmap();         bm.recycle();       }       imageView.setImageDrawable(null);     }  else     if (view instanceof WebView) {       ((WebView)view).destroyDrawingCache();       ((WebView)view).destroy();     }     try {       view.setBackgroundDrawable(null);     }  catch (    Exception e9) {     }     try {       view.setAnimation(null);     }  catch (    Exception e10) {     }     try {       view.setContentDescription(null);     }  catch (    Exception e11) {     }     try {       view.setTag(null);     }  catch (    Exception e12) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\AdInfo.code","public class AdInfo {   private String a=null;   private String b=null;   public void setGender(  String str){     this.a=str;   }   public String getGender(){     return this.a;   }   public void setBirth(  String str){     this.b=str;   }   public String getBirth(){     return this.b;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\AdInterstitial.code","public final class AdInterstitial {   private static final String a=""AdInterstitial"";   private static final long b=180000;   private static long c=0;   private final AtomicBoolean d;   private final Activity e;   private final p f;   private final BroadcastReceiver g;   private InterstitialState h;   private String i;   private AdView.OnAdLoadedListener j;   private AdView.OnAdFailedListener k;   private AdView.OnAdClosedListener l;   private String m;   private AdInfo n;   public enum InterstitialState {  INIT,   READY,   LOADING,   ACTIVE}   public AdInterstitial(  Activity activity){     this(activity,null);   }   public AdInterstitial(  Activity activity,  String str){     this(activity,str,null);   }   public AdInterstitial(  Activity activity,  String str,  AdInfo adInfo){     this.d=new AtomicBoolean(false);     this.g=new BroadcastReceiver(){       @Override public void onReceive(      Context context,      Intent intent){         String action=intent.getAction();         if (action != null) {           if (action.equals(AdInterstitialActivity.ACTION_INTERSTITIAL_SHOW)) {             AdInterstitial.this.a();           }  else           if (action.equals(AdInterstitialActivity.ACTION_INTERSTITIAL_DISMISS)) {             AdInterstitial.this.b();           }         }       }     } ;     this.e=activity;     if (adInfo != null) {       setAdInfo(adInfo);     }     if (str != null) {       setClientId(str);     }     this.f=p.a(this.e);     try {       this.i=new WebView(activity).getSettings().getUserAgentString();     }  catch (    Exception e) {       AdCommon.debug(a,""Exception occurs"",e);     } catch (    OutOfMemoryError e2) {       AdCommon.debug(a,""OutOfMemoryError Exception occurs"",e2);     }     this.h=InterstitialState.INIT;   }   public void a(  final Object obj){     new Handler(Looper.getMainLooper()).post(new Runnable(){       @Override public void run(){         if (obj instanceof AdError) {           AdError adError=(AdError)obj;           AdInterstitial.this.a(adError,adError.toString());         }  else         if (obj instanceof String) {           AdInterstitial.this.a(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,(String)obj);         }       }     } );     if (e() != null && this.g != null) {       a.a(e()).a(this.g);     }   }   public void a(){     this.h=InterstitialState.ACTIVE;   }   public void b(){     this.h=InterstitialState.INIT;     if (e() != null && this.g != null) {       a.a(e()).a(this.g);     }     new Handler(Looper.getMainLooper()).post(new Runnable(){       @Override public void run(){         AdInterstitial.this.d();       }     } );   }   public void setOnAdLoadedListener(  AdView.OnAdLoadedListener onAdLoadedListener){     this.j=onAdLoadedListener;   }   public void setOnAdFailedListener(  AdView.OnAdFailedListener onAdFailedListener){     this.k=onAdFailedListener;   }   public void setOnAdClosedListener(  AdView.OnAdClosedListener onAdClosedListener){     this.l=onAdClosedListener;   }   public void setAdCache(  boolean z){     AdCommon.setUseAdCache(z);   }   public boolean isReady(){     return this.h == InterstitialState.READY;   }   public void setClientId(  String str){     AdCommon.debug(a,""setClientId : "" + str);     this.m=str;   }   private boolean c(){     long currentTimeMillis=System.currentTimeMillis();     long j=currentTimeMillis - c;     AdCommon.debug(a,""Current time: "" + currentTimeMillis);     AdCommon.debug(a,""mPrevAdFetchTimestamp: "" + c);     AdCommon.debug(a,""gap: "" + j);     return AdCommon.isTestMode() || j >= b;   }   public void loadAd(){     if (!c()) {       AdCommon.warn(""Interstitial Ad can be refreshed after 180 seconds"");       a(""Interstitial Ad can be refreshed after 180 seconds"");     }  else     if (this.h.equals(InterstitialState.ACTIVE) || this.h.equals(InterstitialState.LOADING)) {       a(""Interstitial Ad is showing now."");     }  else     if (this.d.compareAndSet(false,true)) {       new Thread(""AdInterstitialLoader""){         @Override public void run(){           try {             AdInterstitial.this.h=InterstitialState.LOADING;             AdInterstitial.this.f.a(AdInterstitial.this.getAdInfo());             l a2=o.a(AdCommon.getAdUrl(),AdInterstitial.this.f.a(AdInterstitial.this.m),AdInterstitial.this.i);             long unused=AdInterstitial.c=System.currentTimeMillis();             if (a2 == null || a2.g() == null || !a2.g().equalsIgnoreCase(""interstitial"") || a2.f() == null || a2.f().length() <= 0) {               AdInterstitial.this.a(AdError.AD_DOWNLOAD_ERROR_NOAD);               return;             }             AdCommon.debug(AdInterstitial.a,""Interstitial ad url : "" + a2.f());             AdInterstitial.this.b(a2.f());             if (a2.c() != null) {               AdInterstitial.this.a(a2.c());             }             AdInterstitial.this.c(a2.f());           }  catch (          AdException e) {             AdInterstitial.this.a(e.getSdkError());           } catch (          Exception e2) {             AdInterstitial.this.a(AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION);           }         }       } .start();     }   }   public void a(  String str){     if (str != null && str.length() > 0) {       AdCommon.debug(a,""Ad Click Trace Request URL : "" + str);       try {         new net.daum.adam.publisher.impl.c.a().a(str);       }  catch (      Exception e) {       }     }   }   public void a(  AdError adError,  String str){     AdCommon.debug(a,""adFailed : "" + str);     this.h=InterstitialState.INIT;     this.d.set(false);     if (this.k != null) {       this.k.OnAdFailed(adError,str);     }   }   public void b(  String str){     if (str != null && str.length() >= 1) {       AdCommon.debug(a,""adLoaded"");       this.h=InterstitialState.READY;       if (this.j != null) {         this.j.OnAdLoaded();       }     }   }   public void d(){     AdCommon.debug(a,""adClosed"");     this.d.set(false);     this.h=InterstitialState.INIT;     if (this.l != null) {       this.l.OnAdClosed();     }   }   private Activity e(){     return this.e;   }   public void c(  String str){     if (!isReady()) {       a(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW);       return;     }     Activity e=e();     Intent intent=new Intent(e,(Class<?>)AdInterstitialActivity.class);     intent.addFlags(268566528);     intent.putExtra(""net.daum.adam.publisher.contentUrl"",str);     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(AdInterstitialActivity.ACTION_INTERSTITIAL_SHOW);       intentFilter.addAction(AdInterstitialActivity.ACTION_INTERSTITIAL_DISMISS);       a.a(e).a(this.g,intentFilter);       e.startActivity(intent);     }  catch (    Exception e2) {       a(""AdInterstitialActivity must be added in AndroidManifest.xml!"");       AdCommon.debug(a,e2.toString(),e2);     }   }   public AdInfo getAdInfo(){     return this.n;   }   public void setAdInfo(  AdInfo adInfo){     this.n=adInfo;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\AdView.code","public class AdView extends RelativeLayout implements ViewTreeObserver.OnGlobalLayoutListener {   public static final int AD_HEIGHT_DP=48;   public static final int AD_WIDTH_DP=320;   private static final String d=AdView.class.getSimpleName();   private static final int e=60;   private static final int f=12;   private static final int g=120;   private WebSettings.RenderPriority A;   private a B;   private net.daum.adam.publisher.impl.e.a C;   private Animation D;   private Animation E;   private AnimationType F;   private c G;   private AdInfo H;   protected b[] a;   protected int b;   protected int c;   private final AtomicBoolean h;   private final a.c i;   private final a.s j;   private final a.b k;   private final a.j l;   private RelativeLayout m;   private int n;   private int o;   private ViewState p;   private int q;   private String r;   private boolean s;   private OnAdWillLoadListener t;   private OnAdLoadedListener u;   private OnAdFailedListener v;   private OnAdClosedListener w;   private OnAdClickedListener x;   private boolean y;   private String z;   public enum AnimationType {  NONE,   FLIP_HORIZONTAL,   FLIP_VERTICAL,   SLIDE,   FADE} public interface OnAdClickedListener {     void OnAdClicked();   } public interface OnAdClosedListener {     void OnAdClosed();   } public interface OnAdFailedListener {     void OnAdFailed(    AdError adError,    String str);   } public interface OnAdLoadedListener {     void OnAdLoaded();   } public interface OnAdWillLoadListener {     void OnAdWillLoad(    String str);   }   public AdView(  Context context){     this(context,null,0);   }   public AdView(  Context context,  AttributeSet attributeSet){     this(context,attributeSet,0);   }   public AdView(  Context context,  AttributeSet attributeSet,  int i){     super(context,attributeSet,i);     this.h=new AtomicBoolean(true);     this.i=new a.c(){       @Override public void onReady(){         AdCommon.debug(AdView.d,""!!!! onShowAdScreen !!!!"");         if (AdView.this.f()) {           AdView.this.a();         }       }     } ;     this.j=new a.s(){       @Override public void onClose(){         AdCommon.debug(AdView.d,""!!!! onClose !!!!"");         if (AdView.this.B != null) {           AdView.this.B.b(true);         }         AdView.this.c();       }     } ;     this.k=new a.b(){       @Override public void onError(      String str,      String str2){         AdView.this.adFailed(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,AdError.AD_DOWNLOAD_ERROR_FAILTODRAW.toString() + "" : "" + str+ "" on ""+ str2);       }     } ;     this.l=new a.j(){       @Override public void onLongPress(      MotionEvent motionEvent){         AdCommon.debug(AdView.d,""ìœ„ì¹˜ ë�™ì�˜ ì² íšŒ ìš”ì²­"");         try {           AdView.this.y=AdView.this.B.e();         }  catch (        Exception e2) {         }       }     } ;     this.b=1;     this.c=0;     this.m=null;     this.n=AD_WIDTH_DP;     this.o=48;     this.p=ViewState.REFRESH;     this.q=e;     this.r=null;     this.s=false;     this.y=false;     this.z=null;     this.A=WebSettings.RenderPriority.NORMAL;     this.C=null;     this.D=null;     this.E=null;     this.F=AnimationType.NONE;     this.G=null;     if (attributeSet != null) {       a(context,attributeSet);     }     this.s=getVisibility() == 0;     try {       this.z=net.daum.adam.publisher.impl.c.a(getContext());     }  catch (    Exception e2) {       AdCommon.debug(d,""User-Agent : Exception occurs"",e2);     } catch (    OutOfMemoryError e3) {       AdCommon.debug(d,""User-Agent : OutOfMemoryError Exception occurs"",e3);     }   }   public void setAdUnitSize(  String str){     if (str != null) {       try {         String[] split=str.toLowerCase().split(""x"");         if (split.length == 2) {           this.n=Integer.parseInt(split[0]);           this.o=Integer.parseInt(split[1]);           if (this.n < 320 || this.o < 48) {             throw new AdException(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW);           }           if (this.m != null) {             this.m.setLayoutParams(new RelativeLayout.LayoutParams(-1,c(this.o)));           }         }       }  catch (      Exception e2) {         this.n=AD_WIDTH_DP;         this.o=48;       }     }   }   public ViewState getAdViewState(){     return this.p;   }   public void resetAdViewState(){     c();   }   public String getClientId(){     return this.r;   }   public void setClientId(  String str){     AdCommon.debug(d,""setClientId : "" + str);     this.r=str;   }   protected void a(  String str){     if (this.t != null) {       this.t.OnAdWillLoad(str);     }  else {       AdCommon.info(""Ad will be loaded : "" + str);     }   }   protected void a(){     this.p=ViewState.DEFAULT;     if (this.u != null) {       this.u.OnAdLoaded();     }  else {       AdCommon.info(""Ad has been downloaded"");     }   }   public void adFailed(  AdError adError,  String str){     if (adError == null) {       adError=AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION;     }     if (str == null) {       str=adError.toString();     }     if (this.v != null) {       this.v.OnAdFailed(adError,str);     }  else {       AdCommon.warn(""Ad downloading has been failed : "" + str);     }   }   public void c(){     this.p=ViewState.DEFAULT;     AdCommon.debug(d,""adClosed"");     if (this.w != null) {       this.w.OnAdClosed();     }   }   private void a(  l lVar){     this.p=ViewState.OPENED;     AdCommon.debug(d,""adClicked"");     AdCommon.debug(d,""adClicked - turl : "" + lVar.c());     AdCommon.debug(d,""adClicked - curl : "" + lVar.b());     if (lVar != null && lVar.c() != null) {       b(lVar.c());     }     if (this.x != null) {       this.x.OnAdClicked();     }   }   public Animation getAnimationHide(){     return this.D;   }   public void setAnimationHide(  Animation animation){     this.D=animation;   }   public Animation getAnimationShow(){     return this.E;   }   public void setAnimationShow(  Animation animation){     this.E=animation;   }   public AnimationType getAnimationType(){     return this.F;   }   public void setAnimationType(  AnimationType animationType){     this.F=animationType;   }   private void d(){     AdCommon.debug(d,""initialize"");     setFocusable(true);     setFocusableInTouchMode(true);     getViewTreeObserver().addOnGlobalLayoutListener(this);     setHorizontalScrollBarEnabled(false);     setVerticalScrollBarEnabled(false);     this.m=new RelativeLayout(getContext());     this.m.setVisibility(8);     this.m.setGravity(17);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-1,c(this.o));     layoutParams.addRule(3);     addView(this.m,layoutParams);     this.a=new b[2];     if (e()) {       h();       this.B=new net.daum.adam.publisher.impl.a(this,new f(){         @Override public void updateAd(        l lVar){           if (lVar != null) {             if (AdView.this.b(lVar)) {               AdCommon.debug(AdView.d,""Invalid Mraid Banner Ad"");               AdView.this.adFailed(AdError.AD_DOWNLOAD_ERROR_NOAD,AdError.AD_DOWNLOAD_ERROR_NOAD.toString());               return;             }  else {               AdView.this.p=ViewState.REFRESH;               AdView.this.c(lVar);               return;             }           }           AdView.this.adFailed(AdError.AD_DOWNLOAD_ERROR_NOAD,AdError.AD_DOWNLOAD_ERROR_NOAD.toString());         }       } );       this.B.b(false);       AdCommon.info(""Activated Ad@m Ad"");       this.C=new net.daum.adam.publisher.impl.e.a(this,new Animation.AnimationListener(){         @Override public void onAnimationEnd(        Animation animation){           if (animation.equals(AdView.this.getAnimationHide()) && AdView.this.g()) {             AdView.this.startAnimation(AdView.this.getAnimationShow());           }         }         @Override public void onAnimationRepeat(        Animation animation){         }         @Override public void onAnimationStart(        Animation animation){         }       } );       return;     }     AdCommon.error(""Ensure that you add the INTERNET, NETWORK_WIFI_STATE, ACCESS_WIFI_STATE and WRITE_EXTERNAL_STORAGE permissions in your Application."");     setAnimationType(AnimationType.NONE);     l lVar=new l();     lVar.a(l.a);     lVar.d(""<html><head><meta http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""/></head><body style=\""background-color:#fff;border-bottom:1px solid black;border-top:1px solid black;padding:5px;margin:0\""><p style=\""font-size:10px\"">Ensure that you add the <strong style=\""color:red\"">INTERNET</strong>, <strong style=\""color:red\"">NETWORK_WIFI_STATE</strong>, <strong style=\""color:red\"">ACCESS_WIFI_STATE</strong> and <strong style=\""color:red\"">WRITE_EXTERNAL_STORAGE</strong> permissions in your Application.</p></body></html>"");     c(lVar);     adFailed(AdError.AD_DOWNLOAD_ERROR_PERMISSION_DENIED,AdError.AD_DOWNLOAD_ERROR_PERMISSION_DENIED.toString());   }   public boolean b(  l lVar){     return lVar.a().equals(l.b) && !(lVar.g().equals(""inline"") && net.daum.adam.publisher.impl.c.a(this));   }   private b a(  int i){     if (this.m == null) {       return null;     }     try {       if (this.a[i] == null) {         AdCommon.debug(d,""WEBVIEW #"" + i + "" ìƒ�ì„±!!"");         this.a[i]=new b(getContext());         a(this.a[i]);       }       this.a[i].c();       this.a[i].setVisibility(8);       return this.a[i];     }  catch (    Exception e2) {       adFailed(AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION,e2.toString());       return null;     }   }   private void b(  int i){     try {       if (this.a[i] != null) {         AdCommon.debug(d,""WEBVIEW #"" + i + "" ì œê±°!!"");         this.a[i].destroy();         this.a[i]=null;       }     }  catch (    Exception e2) {       AdCommon.debug(d,e2.toString(),e2);     }   }   private boolean e(){     boolean z=true;     if (!net.daum.adam.publisher.impl.c.a(""android.permission.INTERNET"",getContext())) {       AdCommon.error(""android.permission.INTERNET permission must be added in AndroidManifest.xml!"");       z=false;     }     if (!net.daum.adam.publisher.impl.c.a(""android.permission.ACCESS_NETWORK_STATE"",getContext())) {       AdCommon.error(""android.permission.ACCESS_NETWORK_STATE permission must be added in AndroidManifest.xml!"");       z=false;     }     if (!net.daum.adam.publisher.impl.c.a(""android.permission.ACCESS_WIFI_STATE"",getContext())) {       AdCommon.error(""android.permission.ACCESS_WIFI_STATE permission must be added in AndroidManifest.xml!"");       z=false;     }     if (net.daum.adam.publisher.impl.c.a(""android.permission.WRITE_EXTERNAL_STORAGE"",getContext())) {       return z;     }     AdCommon.error(""android.permission.WRITE_EXTERNAL_STORAGE permission must be added in AndroidManifest.xml!"");     return false;   }   private void a(  b bVar){     if (bVar != null) {       bVar.setOnReadyListener(this.i);       bVar.setOnErrorListener(this.k);       bVar.setOnCloseListener(this.j);       bVar.setOnGestureLongPressListener(this.l);     }   }   public boolean hasAd(){     return g.a(getRequestInterval()) != null;   }   public void c(  final l lVar){     AdCommon.debug(d,""ê´‘ê³  View ì˜�ì—­ ê°±ì‹  (íƒ€ìž… : "" + lVar.a() + "")"");     if (getActiveView() == null || (!getActiveView().getState().c() && !getActiveView().getState().e())) {       boolean equalsIgnoreCase=lVar.a().equalsIgnoreCase(""mraid"");       boolean z=lVar.d() != null && lVar.d().length() > 0;       if (!z && !equalsIgnoreCase) {         AdCommon.error(""Invalid Ad Data"");         return;       }       final b a=a(this.c);       if (a != null) {         a.setOnGestureSingleTapUpListener(null);         a.setOnTouchListener(new View.OnTouchListener(){           @Override public boolean onTouch(          View view,          MotionEvent motionEvent){             return (AdView.this.p.equals(ViewState.DEFAULT) || AdView.this.p.equals(ViewState.OPENED)) ? false : true;           }         } );         a.setOnOpenListener(new a.r(){           @Override public void onOpen(){             AdView.this.d(lVar);           }         } );         if (z) {           if (lVar.a() != null) {             a(lVar.a());           }           a.setMraidMode(false);           a.setOnGestureSingleTapUpListener(new a.g(){             @Override public boolean onSingleTapUp(            MotionEvent motionEvent){               boolean z2=(a instanceof net.daum.adam.publisher.impl.a.a) && a.isClickable() && motionEvent.getX() >= 0.0f && motionEvent.getY() >= 0.0f;               if ((lVar != null) && z2 && !AdView.this.y) {                 if (a.getOnOpenListener() != null) {                   a.getOnOpenListener().onOpen();                 }                 if (lVar.b() != null && lVar.b().length() > 0) {                   a.b(lVar.b());                 }               }               return false;             }           } );           a.a((String)null,lVar.d());         }         if (equalsIgnoreCase) {           if (lVar.a() != null) {             a(lVar.a());           }           a.setMraidMode(true);           a.setOnResizeListener(new a.p(){             @Override public void onResize(){               AdView.this.d(lVar);             }           } );           a.setOnExpandListener(new a.l(){             @Override public void onExpand(){               AdView.this.d(lVar);             }           } );           a.c(lVar.f());         }       }     }   }   public void d(  l lVar){     if (this.p.equals(ViewState.DEFAULT)) {       if (this.B != null) {         this.B.b(false);       }       a(lVar);     }   }   private void b(  String str){     if (str != null && str.length() > 0) {       AdCommon.debug(d,""Ad Click Trace Request URL : "" + str);       new net.daum.adam.publisher.impl.c.a(net.daum.adam.publisher.impl.c.a(getContext())).a(str);     }   }   public boolean f(){     if (this.m == null || this.a == null || this.p != ViewState.REFRESH) {       adFailed(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,AdError.AD_DOWNLOAD_ERROR_FAILTODRAW.toString());       return false;     }     if (this.a[this.b] != null && (this.a[this.b].getState().c() || this.a[this.b].getState().e())) {       return false;     }     this.c=(this.c + 1) % 2;     this.b=(this.b + 1) % 2;     if (this.m != null && this.m.getVisibility() != 0) {       this.m.setVisibility(0);     }     if (!this.h.get() && this.C != null) {       this.C.a(this.F);     }     if (this.h.get() || this.F == AnimationType.NONE) {       g();     }  else     if (this.s) {       startAnimation(this.D);     }     return true;   }   public boolean g(){     if (this.a == null) {       return false;     }     try {       if (this.a[this.c] != null) {         if (this.a[this.c].getState().c() || this.a[this.c].getState().e()) {           this.a[this.c].c();         }         this.a[this.c].setVisibility(4);       }       this.m.removeAllViews();       if (this.a[this.b] != null) {         this.a[this.b].setVisibility(0);         this.m.addView(this.a[this.b],new RelativeLayout.LayoutParams(-1,-1));       }       if (this.h.get()) {         this.h.set(false);       }       return true;     }  catch (    Exception e2) {       adFailed(AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION,e2.toString());       return false;     }   }   private void a(  Context context,  AttributeSet attributeSet){     if (context != null && attributeSet != null) {       setRequestInterval(attributeSet.getAttributeIntValue(null,""refreshInterval"",e));       String attributeValue=attributeSet.getAttributeValue(null,""clientId"");       this.n=attributeSet.getAttributeIntValue(null,""adWidth"",AD_WIDTH_DP);       this.o=attributeSet.getAttributeIntValue(null,""adHeight"",48);       if (attributeValue != null && !attributeValue.trim().equals("""")) {         setClientId(attributeValue);       }     }   }   public int getRequestInterval(){     return this.q;   }   public void setRequestInterval(  int i){     if (AdCommon.isTestMode()) {       this.q=i;       return;     }     if (i < 12) {       this.q=12;     }  else     if (i > g) {       this.q=g;     }  else {       this.q=i;     }   }   private void a(  Context context){     if (this.G == null) {       this.G=new net.daum.adam.publisher.impl.d.b(context,this);       this.G.a(new c.a(){         @Override public void onStateChange(        Object obj){           if (AdView.this.B == null) {             AdCommon.warn(""AdView cannot be changed by screen state."");             return;           }           if (obj instanceof Boolean ? ((Boolean)obj).booleanValue() : false) {             if (AdView.this.s) {               AdView.this.B.b(true);               AdCommon.info(""Screen wake, Ad@m view in foreground. Enable refresh"");               return;             }             return;           }           if (AdView.this.s) {             AdView.this.B.b(false);             AdView.this.adFailed(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,""Screen sleep, ad in foreground. Disable refresh"");           }         }       } );       this.G.a();     }   }   private void b(  Context context){     if (context != null && this.G != null) {       this.G.b();     }   }   @Override protected void onWindowVisibilityChanged(  int i){     super.onWindowVisibilityChanged(i);     if (getClientId() != null && getClientId().length() > 0 && this.B != null) {       this.B.b(true);     }   }   @Override public void setVisibility(  int i){     super.setVisibility(i);     this.s=i == 0;     if (this.B != null) {       this.B.b(this.s);     }   }   private void h(){     a(getContext());   }   private void i(){     b(getContext());   }   public void destroy(){     if (this.B != null || this.a != null) {       try {         if (this.m != null) {           this.m.setVisibility(8);           this.m.removeAllViews();           this.m=null;         }         b(this.c);         b(this.b);         getViewTreeObserver().removeGlobalOnLayoutListener(this);         i();         if (this.B != null) {           this.B.c();           this.B=null;         }       }  catch (      Exception e2) {       }       this.a=null;       AdCommon.info(""Terminated Ad@m Ad"");     }   }   @Override protected void onAttachedToWindow(){     super.onAttachedToWindow();     if (this.B == null || this.a == null) {       d();     }     AdCommon.debug(d,""onAttachedToWindow()"");   }   @Override protected void onDetachedFromWindow(){     AdCommon.debug(d,""onDetachedFromWindow()"");     if (this.B != null) {       AdCommon.warn(""Ad has been detached from window. Stop ad refresh."");       this.B.b(false);     }     super.onDetachedFromWindow();   }   public boolean isInForeground(){     return this.s;   }   public String getUserAgent(){     return this.z;   }   protected b getActiveView(){     if (this.a != null) {       return this.a[this.b];     }     return null;   }   public boolean isAdExpanded(){     if (getActiveView() != null) {       return getActiveView().getState().e() || getActiveView().getState().c();     }     return false;   }   private int c(  int i){     return (int)(getContext().getResources().getDisplayMetrics().density * i);   }   public void setOnAdWillLoadListener(  OnAdWillLoadListener onAdWillLoadListener){     this.t=onAdWillLoadListener;   }   public void setOnAdLoadedListener(  OnAdLoadedListener onAdLoadedListener){     this.u=onAdLoadedListener;   }   public void setOnAdFailedListener(  OnAdFailedListener onAdFailedListener){     this.v=onAdFailedListener;   }   public void setOnAdClosedListener(  OnAdClosedListener onAdClosedListener){     this.w=onAdClosedListener;   }   public void setOnAdClickedListener(  OnAdClickedListener onAdClickedListener){     this.x=onAdClickedListener;   }   public WebSettings.RenderPriority getWebViewRenderPriority(){     return this.A;   }   public void setWebViewRenderPriority(  WebSettings.RenderPriority renderPriority){     this.A=WebSettings.RenderPriority.NORMAL;     if (renderPriority != null) {       this.A=renderPriority;     }     if (this.a[this.c] != null) {       this.a[this.c].getSettings().setRenderPriority(this.A);     }     if (this.a[this.b] != null) {       this.a[this.b].getSettings().setRenderPriority(this.A);     }   }   public boolean getNetworkStatus(){     return true;   }   public void pause(){     if (this.B != null) {       AdCommon.info(""Pause ad refresh"");       this.B.b(false);     }   }   public void resume(){     if (this.B != null) {       AdCommon.info(""Resume ad refresh"");       this.B.b(true);     }   }   public void refresh(){     if (AdCommon.isTestMode() && this.B != null) {       new Thread(new Runnable(){         @Override public void run(){           AdCommon.info(""Resume ad refresh forcefully"");           AdView.this.B.b();         }       } ).start();     }   }   public void setAdCache(  boolean z){     AdCommon.setUseAdCache(z);   }   public int getThreadPriority(){     if (this.B != null) {       return this.B.d();     }     return 0;   }   public void setThreadPriority(  int i){     if (i < 1 || i > 10) {       AdCommon.warn(""Thread Priority is out of range : between Thread.MIN_PRIORITY and Thread.MAX_PRIORITY"");     }  else {       this.B.a(i);     }   }   public AdInfo getAdInfo(){     return this.H;   }   public void setAdInfo(  AdInfo adInfo){     this.H=adInfo;   }   @Override public void onGlobalLayout(){     int c=c(this.n);     int c2=c(this.o);     int measuredWidth=getMeasuredWidth();     int measuredHeight=getMeasuredHeight();     if (measuredWidth > 0 && measuredHeight > 0) {       if (measuredWidth < c || measuredHeight < c2) {         if (this.B != null) {           this.B.c();           this.B=null;         }         getViewTreeObserver().removeGlobalOnLayoutListener(this);         i();         adFailed(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,""Ad@m view should be displayed at least "" + this.n + "" DIP x ""+ this.o+ ""DIP resolution. Stop Ad Request."");       }     }   }   public enum ViewState {  REFRESH,   DEFAULT,   OPENED;   public boolean isRefresh(){     return equals(REFRESH);   }   public boolean isOpened(){     return equals(OPENED);   } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\BuildConfig.code","public final class BuildConfig {   public static final boolean DEBUG=true; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\OnAdClickedListener.code","public interface OnAdClickedListener {   void OnAdClicked(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\OnAdClosedListener.code","public interface OnAdClosedListener {   void OnAdClosed(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\OnAdFailedListener.code","public interface OnAdFailedListener {   void OnAdFailed(  AdError adError,  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\OnAdLoadedListener.code","public interface OnAdLoadedListener {   void OnAdLoaded(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher\OnAdWillLoadListener.code","public interface OnAdWillLoadListener {   void OnAdWillLoad(  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1de87824public class a implements a.c {   a(){   }   @Override public void onReady(){     AdInterstitialActivity.this.a.setVisibility(0);   } } static class a implements LocationListener {   final LocationManager a;   a(  LocationManager locationManager){     this.a=locationManager;   }   @Override public void onProviderDisabled(  String str){   }   @Override public void onProviderEnabled(  String str){   }   @Override public void onStatusChanged(  String str,  int i,  Bundle bundle){   }   @Override public void onLocationChanged(  Location location){     Location unused=b.c=location;     long unused2=b.b=System.currentTimeMillis();     this.a.removeUpdates(this);   } } public static class a {   public static Drawable a(  Context context,  String str){     BitmapDrawable bitmapDrawable;     Bitmap decodeStream;     try {       decodeStream=BitmapFactory.decodeStream(context.getAssets().open(str));     }  catch (    IOException e) {       AdCommon.debug(c.a,e.toString());       bitmapDrawable=null;     }     if (decodeStream == null) {       AdCommon.debug(c.a,""FILE : "" + str + "" STATUS : false"");       return null;     }     Bitmap createScaledBitmap=Bitmap.createScaledBitmap(decodeStream,(int)(decodeStream.getWidth() * 1.5d),(int)(decodeStream.getHeight() * 1.5d),true);     if (createScaledBitmap == null) {       AdCommon.debug(c.a,""FILE : "" + str + "" STATUS : false"");       return null;     }     bitmapDrawable=new BitmapDrawable(createScaledBitmap);     return bitmapDrawable;   }   public static android.graphics.Bitmap a(  java.lang.String r6){     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.c.a.a(java.lang.String):android.graphics.Bitmap"");   } } class a implements Runnable {   a(){   } class c implements DialogInterface.OnClickListener {     c(){     }     @Override public void onClick(    DialogInterface dialogInterface,    int i){       net.daum.adam.publisher.impl.b.c.a().b();       AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ìŠ¹ì�¸ ì •ë³´ ì „ì†¡ ìš”ì²­"");       RunnableC0013d.this.a.o.sendMessage(net.daum.adam.publisher.impl.c.a(RunnableC0013d.this.a.o,d.e,(Object)true));     }   }   @Override public void run(){     net.daum.adam.publisher.impl.b.c.a().a(net.daum.adam.publisher.impl.b.f).a(""ìŠ¹ì�¸"",new c()).b(""ê±°ì ˆ"",new DialogInterfaceOnClickListenerC0014a()).a(new b()).a(false).a(RunnableC0013d.this.a.k.getContext()).c().show();   } class DialogInterfaceOnClickListenerC0014a implements DialogInterface.OnClickListener {     DialogInterfaceOnClickListenerC0014a(){     }     @Override public void onClick(    DialogInterface dialogInterface,    int i){       net.daum.adam.publisher.impl.b.c.a().b();       AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ê±°ì ˆ ì •ë³´ ì „ì†¡ ìš”ì²­"");       RunnableC0013d.this.a.o.sendEmptyMessage(d.e);     }   } class b implements DialogInterface.OnCancelListener {     b(){     }     @Override public void onCancel(    DialogInterface dialogInterface){       long unused=d.g=0L;       net.daum.adam.publisher.impl.b.c.a().b();     }   } } private static final class a implements Runnable {   private final d a;   private final boolean b;   private final ProgressDialog c;   public a(  d dVar,  boolean z){     this.a=dVar;     this.b=z;     if (dVar.k.getContext() != null) {       this.c=new ProgressDialog(this.a.k.getContext());     }  else {       this.c=null;     }   }   @Override public void run(){     AdCommon.debug(d.c,""[AgreeTask] ìœ„ì¹˜ ì •ë³´ ë�™ì�˜ ì—¬ë¶€ : "" + String.valueOf(this.b));     this.a.o.post(new RunnableC0011a());     String str=AdCommon.getCmdUrl() + ""/mergeLocInfoAgree.do"";     List<net.daum.adam.publisher.impl.b> list=null;     try {       Map<String,Object> a=this.a.l.a(Boolean.valueOf(this.b),this.a.k.getClientId());       a.put(""interval"",Integer.valueOf((int)((System.currentTimeMillis() - d.h) / 1000)));       list=o.b(str,a,this.a.k.getUserAgent());     }  catch (    Exception e) {       AdCommon.debug(""AgreeTask"",""LIA ì„œë²„ Command ìš”ì²­ ì‹¤íŒ¨"",e);     }     Iterator<net.daum.adam.publisher.impl.b> it=list.iterator();     while (it.hasNext()) {       this.a.a(it.next());     }     this.a.o.post(new b());   } class RunnableC0011a implements Runnable {     RunnableC0011a(){     }     @Override public void run(){       if (a.this.c != null) {         a.this.c.setMessage(""Loading..."");         a.this.c.setCancelable(true);         a.this.c.show();       }     }   } class b implements Runnable {     b(){     }     @Override public void run(){       if (a.this.c != null) {         a.this.c.cancel();         a.this.c.dismiss();       }     }   } } class a implements Runnable {   final net.daum.adam.publisher.impl.b a;   a(  net.daum.adam.publisher.impl.b bVar){     this.a=bVar;   }   @Override public void run(){     if (this.a != null && this.a.g() != 500 && this.a.h().length() > 0) {       net.daum.adam.publisher.impl.b.c.a().a(this.a.h()).a(d.this.k.getContext()).c().show();     }   } } public class a implements View.OnClickListener {   a(){   }   @Override public void onClick(  View view){     i.this.finish();   } } private static class a extends DefaultHandler {   final b a;   String b;   private boolean d=false;   private boolean e=false;   private boolean f=false;   private boolean g=false;   private boolean h=false;   StringBuilder c=null;   public a(  b bVar){     this.a=bVar;   }   @Override public void startElement(  String str,  String str2,  String str3,  Attributes attributes) throws SAXException {     this.c=new StringBuilder();     if (str3.length() >= 1) {       str=str3;     }  else     if (str.length() <= 0) {       str=str2;     }     if (""result"".equals(str)) {       this.d=true;       return;     }     if (""action"".equals(str)) {       this.b=attributes.getValue(""for"");       String value=attributes.getValue(""type"");       String value2=attributes.getValue(""interval"");       String value3=attributes.getValue(""delay"");       if (value2 != null) {         AdCommon.debug(""AdCommandHttpContext"",""Set Interval : "" + value2);         this.a.a(Integer.parseInt(value2));       }  else       if (value3 != null) {         AdCommon.debug(""AdCommandHttpContext"",""Set Delay : "" + value3);         this.a.a(Integer.parseInt(value3));       }       if (""cmd"".equals(this.b)) {         AdCommon.debug(""AdCommandHttpContext"",""Cmd Action Type: "" + value);         this.a.a(value);       }  else {         AdCommon.debug(""AdCommandHttpContext"",""Imp Action Type: "" + value);         this.a.b(value);       }       if (""agree"".equals(value)) {         this.g=true;         return;       }       return;     }     if (""item"".equals(str)) {       this.e=true;       return;     }     if (""agree"".equals(str)) {       b.h=attributes.getValue(""value"").toLowerCase().equals(""y"");       return;     }     if (""canwithdrawal"".equals(str)) {       this.f=true;       b.i=attributes.getValue(""value"").toLowerCase().equals(""y"");     }  else     if (""msg"".equals(str) && !this.d && !this.e&& !this.f&& !this.g) {       this.h=true;     }   }   @Override public void characters(  char[] cArr,  int i,  int i2) throws SAXException {     this.c.append(cArr,i,i2);   }   @Override public void endElement(  String str,  String str2,  String str3) throws SAXException {     String sb=this.c.toString();     if (this.d) {       this.a.b(Integer.parseInt(sb));       AdCommon.debug(""AdCommandHttpContext"",""Result Code : "" + sb);       this.d=false;       return;     }     if (this.e) {       if (""cmd"".equals(this.b)) {         this.a.d(sb);         AdCommon.debug(""AdCommandHttpContext"",""Cmd Parameter : "" + sb);       }  else {         this.a.e(sb);         AdCommon.debug(""AdCommandHttpContext"",""Imp Parameter : "" + sb);       }       this.e=false;       return;     }     if (this.g) {       this.g=false;       b.f=sb;     }  else     if (this.f) {       this.f=false;       b.g=sb;     }  else     if (this.h) {       this.h=false;       this.a.f(sb);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\AdCommon.code","public final class AdCommon {   public static final float CLOSE_BUTTON_PADDING_DP=1.0f;   public static final float CLOSE_BUTTON_SIZE_DP=50.0f;   public static final String CLOSE_BUTTON_URL=""http://m1.daumcdn.net/image.bizshop/ui/adquest/m/rm_x_and_v1.png"";   public static final String MRAID_JS_URL=""http://m1.daumcdn.net/adtc/js/mraid_v2.0.js"";   public static final String SDK_VERSION=""2.2.1.0"";   private static final int UPDATE_GPS_TIMEOUT=8000;   private static String AD_URL=""http://alea.adam.daum.net/imp"";   private static String CMD_URL=""http://lia.mobile.biz.daum.net/listen"";   private static boolean isTest=false;   private static boolean isDebug=false;   private static Bitmap closeBtnBitmap=null;   private static boolean useAdCache=true;   private static String adContentId=null;   private static final Map<String,String> map=new HashMap();   public static String getVersion(){     return ""Ad@mSdkVer_2.2.1.0"";   }   public static int getUpdateGpsTimeout(){     return UPDATE_GPS_TIMEOUT;   }   public static void setUseAdCache(  boolean z){     useAdCache=z;   }   public static boolean isUseAdCache(){     return useAdCache;   }   public static String getContentId(){     return adContentId;   }   protected static void set(  String str,  String str2){     map.put(str,str2);   }   protected static String get(  String str){     return map.get(str);   }   public static void debug(  String str,  String str2){     if (isDebug()) {       Log.d(getVersion(),(str.length() > 0 ? ""["" + str + ""] "" : """") + str2);     }   }   public static void debug(  String str,  String str2,  Throwable th){     if (isDebug()) {       Log.e(getVersion(),(str.length() > 0 ? ""["" + str + ""] "" : """") + str2,th);     }   }   public static void warn(  String str){     Log.w(getVersion(),""[WARNING] "" + str);   }   public static void info(  String str){     Log.i(getVersion(),""[INFO] "" + str);   }   public static void error(  String str){     Log.e(getVersion(),""[ERROR] "" + str);   }   public static void error(  String str,  Throwable th){     Log.e(getVersion(),""[ERROR] "" + str,th);   }   public static String getAdUrl(){     return AD_URL;   }   protected static void setAdUrl(  String str){     AD_URL=str;   }   public static String getCmdUrl(){     return CMD_URL;   }   protected static void setCmdUrl(  String str){     CMD_URL=str;   }   public static boolean isTestMode(){     return isTest;   }   protected static void setTestMode(  boolean z){     isTest=z;   }   public static boolean isDebug(){     return isDebug;   }   protected static void setDebug(  boolean z){     isDebug=z;   }   public static Bitmap getCloseBtnImg(){     return closeBtnBitmap;   }   public static void setCloseBtnImg(  Bitmap bitmap){     closeBtnBitmap=bitmap;   }   public static void setContentId(  String str){     adContentId=str;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\AdException.code","public final class AdException extends Exception {   private static final long a=8643116348930268889L;   private final AdError b;   public AdException(  String str){     super(str);     this.b=AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION;   }   public AdException(  AdError adError){     this.b=adError;   }   public AdException(  AdError adError,  String str){     super(str);     this.b=adError;   }   public AdError getSdkError(){     return this.b;   }   @Override public String toString(){     StringBuilder sb=new StringBuilder();     if (getMessage() != null) {       sb.append(getMessage());     }  else     if (this.b != null) {       sb.append(this.b.toString());     }     return sb.toString();   }   @Override public void printStackTrace(){     if (AdCommon.isDebug()) {       super.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\AdInterstitialActivity.code","public class AdInterstitialActivity extends i implements ViewTreeObserver.OnGlobalLayoutListener {   public static final String ACTION_INTERSTITIAL_DISMISS=""net.daum.adam.publisher.action.interstitial.dismiss"";   public static final String ACTION_INTERSTITIAL_SHOW=""net.daum.adam.publisher.action.interstitial.show"";   private net.daum.adam.publisher.impl.a.b a;   @Override public void onCreate(  Bundle bundle){     super.onCreate(bundle);     Intent intent=new Intent();     intent.setAction(ACTION_INTERSTITIAL_SHOW);     net.daum.adam.publisher.impl.d.a.a(this).a(intent);   }   @Override public net.daum.adam.publisher.impl.a.a getAdView(){     this.a=new net.daum.adam.publisher.impl.a.b(this,true);     this.a.setVisibility(4);     this.a.setMraidMode(true);     this.a.setOnCloseButtonStateChange(new c());     this.a.setOnReadyListener(new a());     this.a.setOnCloseListener(new b());     this.a.setCache(AdCommon.isUseAdCache());     String stringExtra=getIntent().getStringExtra(""net.daum.adam.publisher.contentUrl"");     if (stringExtra != null) {       this.a.loadUrl(stringExtra);     }     return this.a;   } public class c implements a.f {     c(){     }     @Override public void a(    boolean z){       if (z) {         AdInterstitialActivity.this.a();       }  else {         AdInterstitialActivity.this.b();       }     }   } public class a implements a.c {     a(){     }     @Override public void onReady(){       AdInterstitialActivity.this.a.setVisibility(0);     }   } public class b implements a.s {     b(){     }     @Override public void onClose(){       AdInterstitialActivity.this.onDestroy();     }   }   @Override public void onGlobalLayout(){     this.a.getViewTreeObserver().removeGlobalOnLayoutListener(this);   }   @Override public void onDestroy(){     Intent intent=new Intent();     intent.setAction(ACTION_INTERSTITIAL_DISMISS);     net.daum.adam.publisher.impl.d.a.a(this).a(intent);     try {       if (this.a != null) {         ((ViewGroup)this.a.getParent()).removeView(this.a);         this.a.destroy();       }     }  catch (    Exception e) {     }     super.onDestroy();     finish();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\b.code","public class b implements a.s {   b(){   }   @Override public void onClose(){     AdInterstitialActivity.this.onDestroy();   } } public final class b {   protected static final int a=200;   protected static final int b=1;   protected static final int c=2;   protected static final int d=3;   protected static final int e=4;   protected static String f="""";   protected static String g="""";   public static boolean h=false;   public static boolean i=false;   public static boolean j=false;   private int n;   private int o;   private String k="""";   private int l=0;   private int m=0;   private final List<String> p=new ArrayList();   private final List<String> q=new ArrayList();   private final List<String> r=new ArrayList();   public int a(){     return this.l;   }   public void a(  int i2){     this.l=i2;   }   public int b(){     return this.n;   }   public void a(  String str){     this.n=c(str);   }   public int c(){     return this.o;   }   public void b(  String str){     this.o=c(str);   }   public int c(  String str){     if (""agree"".equals(str)) {       return 1;     }     if (""send"".equals(str)) {       return 2;     }     if (""refresh"".equals(str)) {       return 3;     }     return 4;   }   public List<String> d(){     return this.p;   }   private void g(  String str){     this.p.add(str);   }   public List<String> e(){     return this.q;   }   public void d(  String str){     this.q.add(str);     g(str);   }   public List<String> f(){     return this.r;   }   public void e(  String str){     this.r.add(str);     g(str);   }   public int g(){     return this.m;   }   public void b(  int i2){     this.m=i2;   }   public void f(  String str){     if (str.length() > 0) {       this.k=str;     }  else {       this.k="""";     }   }   public String h(){     return this.k;   } } public static class b {   private static final int a=900;   private static long b=0;   private static Location c=null;   public static String a(  Context context){     if (context == null || !c.a(""android.permission.ACCESS_NETWORK_STATE"",context)) {       return ""unknown"";     }     try {       ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(""connectivity"");       if (connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnected()) {         if (connectivityManager.getActiveNetworkInfo().getType() == 1) {           return p.d;         }         if (connectivityManager.getActiveNetworkInfo().getType() == 0) {           return p.e;         }         return ""offline"";       }       return ""offline"";     }  catch (    Exception e) {       c.a((String)null,3,""ë„¤íŠ¸ì›Œí�¬ ì •ë³´ë¥¼ ê°€ì ¸ì˜¬ ìˆ˜ ì—†ìŠµë‹ˆë‹¤."");       return null;     }   }   public static String b(  Context context){     if (!c.a(""android.permission.READ_PHONE_STATE"",context)) {       return """";     }     try {       TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");       if (telephonyManager != null) {         AdCommon.debug(""NetworkOperator"",telephonyManager.getNetworkOperator());         return telephonyManager.getNetworkOperator();       }     }  catch (    Exception e) {       AdCommon.debug(c.a,e.toString());     }     return """";   }   public static String c(  Context context){     if (!c.a(""android.permission.ACCESS_WIFI_STATE"",context)) {       return null;     }     return ((WifiManager)context.getSystemService(p.d)).getConnectionInfo().getMacAddress();   }   public static Location a(){     return c;   }   public static void d(  Context context){     String str=null;     c.a((String)null,3,""Trying to refresh location"");     if (context == null) {       c.a((String)null,3,""Context not set - quit location refresh"");       return;     }     if (b + 900000 > System.currentTimeMillis()) {       c.a((String)null,3,""It's not time yet for refreshing the location"");       return;     } synchronized (context) {       if (b + 900000 > System.currentTimeMillis()) {         c.a((String)null,3,""Another thread updated the loation already"");         return;       }       boolean a2=c.a(""android.permission.ACCESS_COARSE_LOCATION"",context);       boolean a3=c.a(""android.permission.ACCESS_FINE_LOCATION"",context);       if (!a2 && !a3) {         c.a((String)null,3,""No permissions for requesting the location"");         return;       }       LocationManager locationManager=(LocationManager)context.getSystemService(""location"");       if (locationManager == null) {         c.a((String)null,3,""Unable to fetch a location manger"");         return;       }       Criteria criteria=new Criteria();       criteria.setCostAllowed(false);       if (a2) {         criteria.setAccuracy(2);         str=locationManager.getBestProvider(criteria,true);       }       if (str == null && a3) {         criteria.setAccuracy(1);         str=locationManager.getBestProvider(criteria,true);       }       if (str == null) {         c.a((String)null,3,""Unable to fetch a location provider"");       }  else {         b=System.currentTimeMillis();         locationManager.requestLocationUpdates(str,0L,0.0f,new a(locationManager),context.getMainLooper());       }     }   } static class a implements LocationListener {     final LocationManager a;     a(    LocationManager locationManager){       this.a=locationManager;     }     @Override public void onProviderDisabled(    String str){     }     @Override public void onProviderEnabled(    String str){     }     @Override public void onStatusChanged(    String str,    int i,    Bundle bundle){     }     @Override public void onLocationChanged(    Location location){       Location unused=b.c=location;       long unused2=b.b=System.currentTimeMillis();       this.a.removeUpdates(this);     }   } } public static final class b extends Thread {   private final Boolean a;   private final WeakReference<d> b;   private RunnableC0013d c;   private Thread d;   @Override public void destroy(){     if (this.d != null && this.d.isAlive()) {       this.d.interrupt();     }   }   public b(  d dVar){     this(dVar,null);   }   public b(  d dVar,  Boolean bool){     this.c=null;     this.d=null;     this.b=new WeakReference<>(dVar);     this.a=bool;   }   @Override public void run(){     d dVar=this.b.get();     if (this.a != null) {       this.c=new RunnableC0013d(this.b.get(),this.a.booleanValue());       this.d=new Thread(this.c,""RequestCommandThread"");       int priority=this.d.getPriority();       int i=net.daum.adam.publisher.impl.a.a.get();       if (priority != i) {         try {           this.d.setPriority(i);         }  catch (        Exception e) {           this.d.setPriority(priority);         }       }       this.d.start();     }     if (d.j != null && d.j.contains(p.a)) {       AdCommon.debug(d.c,""[UpdateParamsRunnable] ìœ„ì¹˜ ì •ë³´ ì„œë¹„ìŠ¤ ì‚¬ìš© ê°€ëŠ¥ ì—¬ë¶€ ê²€ì‚¬"");       dVar.o.sendEmptyMessage(10);       long unused=d.g=System.currentTimeMillis();     }  else {       d.b=4;       AdCommon.debug(d.c,""[UpdateParamsRunnable] ìœ„ì¹˜ ì •ë³´ ì„œë¹„ìŠ¤ ì‚¬ìš© ë¶ˆê°€ëŠ¥"");     }   } } class b implements DialogInterface.OnCancelListener {   b(){   }   @Override public void onCancel(  DialogInterface dialogInterface){     long unused=d.g=0L;     net.daum.adam.publisher.impl.b.c.a().b();   } } class b implements Runnable {   b(){   }   @Override public void run(){     if (a.this.c != null) {       a.this.c.cancel();       a.this.c.dismiss();     }   } } class b implements Runnable {   final ProgressDialog a;   b(  ProgressDialog progressDialog){     this.a=progressDialog;   }   @Override public void run(){     this.a.setMessage(""Loading..."");     this.a.setCancelable(true);     this.a.show();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\c.code","public final class c implements Runnable {   private final WeakReference<AdView> c;   private final Object b=new Object();   private boolean d=false;   public c(  AdView adView){     this.c=new WeakReference<>(adView);   }   @Override public void run(){     do {       try {         if (a.this.o == b.DEAD) {           AdCommon.debug(a.b,""Ad@m Ad updater thread is dead already."");           return;         }         AdView adView=this.c.get();         if (adView != null && adView.isInForeground()) {           boolean isShown=adView.isShown();           boolean b=g.b();           boolean isAdExpanded=adView.isAdExpanded();           boolean z=a.this.o == b.LIVE;           if (adView.getNetworkStatus()) {             if (a.this.f.get() || !b || (isShown && !isAdExpanded && z)) {               a.this.a(adView);             }  else             if (isAdExpanded) {               a.this.b(false);             }             if (!a.this.f.get() && !isShown) {               a.this.g.sendMessage(a.this.g.obtainMessage(0,new AdException(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,""Ad@m view is in the background. Check if Ad@m view's visibility is View.VISIBLE"")));             }           }  else {             AdCommon.debug(a.b,""Network has not connected."");             a.this.g.sendMessage(a.this.g.obtainMessage(0,new AdException(AdError.AD_DOWNLOAD_ERROR_FAILTODRAW,""Network has not connected."")));           }           if (a.this.f.get()) {             AdCommon.debug(a.b,""First Try"");             a.this.f.set(false);           }           Thread.sleep(adView.getRequestInterval() * 1000);           AdCommon.debug(""AdRefreshTask"",adView.getRequestInterval() + ""ì´ˆ ë�™ì•ˆ Thread Sleep"");         }  else {           AdCommon.warn(""Ad@m view should be initialized before background thread start."");           this.d=true;         } synchronized (this.b) {           while (this.d) {             try {               this.b.wait();             }  catch (            InterruptedException e) {               AdCommon.debug(""AdRefreshTask"",""[AdViewUpdaterRunnable] run() - InterruptedException occurs."",e);               return;             }           }         }         if (Thread.interrupted()) {           return;         }       }  catch (      Exception e2) {         AdCommon.debug(a.b,e2.toString(),e2);         return;       }     }  while (a.this.o != b.DEAD);   }   public void a(){ synchronized (this.b) {       this.d=true;     }   }   public void b(){ synchronized (this.b) {       this.d=false;       this.b.notifyAll();     }   } } public class c implements a.f {   c(){   }   @Override public void a(  boolean z){     if (z) {       AdInterstitialActivity.this.a();     }  else {       AdInterstitialActivity.this.b();     }   } } public class c {   private static final String a=""AdUtil"";   private static String b=null;   public static String a(  Context context){     if (b != null) {       return b;     }     try {       b=new WebView(context).getSettings().getUserAgentString();     }  catch (    Exception e) {     }     return b;   }   public static String a(  Context context,  String str){     String string=Settings.Secure.getString(context.getApplicationContext().getContentResolver(),""android_id"");     if (string == null) {       return """";     }     return b(string,str);   }   public static String b(  Context context,  String str){     String c=b.c(context);     if (c == null) {       return """";     }     return b(c,str);   } public static class b {     private static final int a=900;     private static long b=0;     private static Location c=null;     public static String a(    Context context){       if (context == null || !c.a(""android.permission.ACCESS_NETWORK_STATE"",context)) {         return ""unknown"";       }       try {         ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(""connectivity"");         if (connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnected()) {           if (connectivityManager.getActiveNetworkInfo().getType() == 1) {             return p.d;           }           if (connectivityManager.getActiveNetworkInfo().getType() == 0) {             return p.e;           }           return ""offline"";         }         return ""offline"";       }  catch (      Exception e) {         c.a((String)null,3,""ë„¤íŠ¸ì›Œí�¬ ì •ë³´ë¥¼ ê°€ì ¸ì˜¬ ìˆ˜ ì—†ìŠµë‹ˆë‹¤."");         return null;       }     }     public static String b(    Context context){       if (!c.a(""android.permission.READ_PHONE_STATE"",context)) {         return """";       }       try {         TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");         if (telephonyManager != null) {           AdCommon.debug(""NetworkOperator"",telephonyManager.getNetworkOperator());           return telephonyManager.getNetworkOperator();         }       }  catch (      Exception e) {         AdCommon.debug(c.a,e.toString());       }       return """";     }     public static String c(    Context context){       if (!c.a(""android.permission.ACCESS_WIFI_STATE"",context)) {         return null;       }       return ((WifiManager)context.getSystemService(p.d)).getConnectionInfo().getMacAddress();     }     public static Location a(){       return c;     }     public static void d(    Context context){       String str=null;       c.a((String)null,3,""Trying to refresh location"");       if (context == null) {         c.a((String)null,3,""Context not set - quit location refresh"");         return;       }       if (b + 900000 > System.currentTimeMillis()) {         c.a((String)null,3,""It's not time yet for refreshing the location"");         return;       } synchronized (context) {         if (b + 900000 > System.currentTimeMillis()) {           c.a((String)null,3,""Another thread updated the loation already"");           return;         }         boolean a2=c.a(""android.permission.ACCESS_COARSE_LOCATION"",context);         boolean a3=c.a(""android.permission.ACCESS_FINE_LOCATION"",context);         if (!a2 && !a3) {           c.a((String)null,3,""No permissions for requesting the location"");           return;         }         LocationManager locationManager=(LocationManager)context.getSystemService(""location"");         if (locationManager == null) {           c.a((String)null,3,""Unable to fetch a location manger"");           return;         }         Criteria criteria=new Criteria();         criteria.setCostAllowed(false);         if (a2) {           criteria.setAccuracy(2);           str=locationManager.getBestProvider(criteria,true);         }         if (str == null && a3) {           criteria.setAccuracy(1);           str=locationManager.getBestProvider(criteria,true);         }         if (str == null) {           c.a((String)null,3,""Unable to fetch a location provider"");         }  else {           b=System.currentTimeMillis();           locationManager.requestLocationUpdates(str,0L,0.0f,new a(locationManager),context.getMainLooper());         }       }     } static class a implements LocationListener {       final LocationManager a;       a(      LocationManager locationManager){         this.a=locationManager;       }       @Override public void onProviderDisabled(      String str){       }       @Override public void onProviderEnabled(      String str){       }       @Override public void onStatusChanged(      String str,      int i,      Bundle bundle){       }       @Override public void onLocationChanged(      Location location){         Location unused=b.c=location;         long unused2=b.b=System.currentTimeMillis();         this.a.removeUpdates(this);       }     }   }   public static String a(  String str,  String str2){     if (str2 == null || str == null) {       return null;     }     int length=str2.length();     int length2=str.length();     StringBuilder sb=new StringBuilder();     for (int i=0; i != length2; i++) {       sb.append((char)(((str2.charAt(i % length) - 'L') ^ (str.charAt(i) - 'L')) + 76));     }     return sb.toString();   }   public static boolean a(  View view){     try {       return ((FrameLayout)view.getRootView().findViewById(R.id.content)) != null;     }  catch (    Exception e) {       Log.e(a,e.toString(),e);       return false;     }   } public static class a {     public static Drawable a(    Context context,    String str){       BitmapDrawable bitmapDrawable;       Bitmap decodeStream;       try {         decodeStream=BitmapFactory.decodeStream(context.getAssets().open(str));       }  catch (      IOException e) {         AdCommon.debug(c.a,e.toString());         bitmapDrawable=null;       }       if (decodeStream == null) {         AdCommon.debug(c.a,""FILE : "" + str + "" STATUS : false"");         return null;       }       Bitmap createScaledBitmap=Bitmap.createScaledBitmap(decodeStream,(int)(decodeStream.getWidth() * 1.5d),(int)(decodeStream.getHeight() * 1.5d),true);       if (createScaledBitmap == null) {         AdCommon.debug(c.a,""FILE : "" + str + "" STATUS : false"");         return null;       }       bitmapDrawable=new BitmapDrawable(createScaledBitmap);       return bitmapDrawable;     }     public static android.graphics.Bitmap a(    java.lang.String r6){       throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.c.a.a(java.lang.String):android.graphics.Bitmap"");     }   }   public static Message a(  int i,  Object obj){     return a((Handler)null,i,obj);   }   public static Message a(  Handler handler,  int i,  Object obj){     Message obtain=Message.obtain(handler,i,obj);     if (obtain == null) {       Message message=new Message();       message.what=i;       message.obj=obj;       message.setTarget(handler);       return message;     }     return obtain;   }   public static void b(  View view){     if (view != null) {       view.setBackgroundDrawable(null);       if (view instanceof ViewGroup) {         ViewGroup viewGroup=(ViewGroup)view;         int childCount=viewGroup.getChildCount();         for (int i=0; i < childCount; i++) {           b(viewGroup.getChildAt(i));         }         if (!(view instanceof AdapterView)) {           viewGroup.removeAllViews();         }       }       if (view instanceof ImageView) {         ((ImageView)view).setImageDrawable(null);       }     }   }   public static Bitmap a(  String str){     try {       byte[] a2=net.daum.adam.publisher.impl.b.b.a(str,0);       return BitmapFactory.decodeByteArray(a2,0,a2.length);     }  catch (    Exception e) {       AdCommon.debug(a,e.toString());       return null;     }   }   public static String b(  Context context){     PackageManager packageManager=context.getPackageManager();     try {       return packageManager.getApplicationLabel(packageManager.getApplicationInfo(context.getPackageName(),AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER)).toString();     }  catch (    PackageManager.NameNotFoundException e) {       e.printStackTrace();       return """";     }   }   public static String c(  Context context){     try {       return context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionName;     }  catch (    PackageManager.NameNotFoundException e) {       e.printStackTrace();       return """";     }   }   public static synchronized String b(  String str,  String str2){     String str3; synchronized (c.class) {       try {         MessageDigest messageDigest=MessageDigest.getInstance(str2);         messageDigest.reset();         messageDigest.update(str.getBytes());         byte[] digest=messageDigest.digest();         StringBuilder sb=new StringBuilder();         for (        byte b2 : digest) {           sb.append(Integer.toString((b2 & 255) + AccessibilityEventCompat.TYPE_VIEW_HOVER_EXIT,16).substring(1));         }         str3=sb.toString();       }  catch (      NoSuchAlgorithmException e) {         e.printStackTrace();         a((String)null,3,""Could not create hash value"");         str3="""";       }     }     return str3;   }   public static boolean c(  Context context,  String str){     return context.getPackageManager().queryIntentActivities(new Intent(""android.intent.action.VIEW"",Uri.parse(str)),0).size() > 0;   }   public static boolean a(  String str,  Context context){     return context.checkCallingOrSelfPermission(str) == 0;   }   public static void a(  String str,  int i,  String str2){     if (AdCommon.isDebug()) {       if (str == null) {         str=AdCommon.getVersion();       }       if (str2 == null) {         str2="""";       }       String className=Thread.currentThread().getStackTrace()[3].getClassName();       Log.println(i,str,""("" + className.substring(className.lastIndexOf(""."") + 1) + "":""+ Thread.currentThread().getStackTrace()[3].getLineNumber()+ "") : ""+ str2);     }   }   public static boolean d(  Context context,  String str){     try {       return context.getPackageManager().queryIntentActivities(new Intent(context,Class.forName(str)),0).size() > 0;     }  catch (    ClassNotFoundException e) {       return false;     }   } } class c implements DialogInterface.OnClickListener {   c(){   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     net.daum.adam.publisher.impl.b.c.a().b();     AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ìŠ¹ì�¸ ì •ë³´ ì „ì†¡ ìš”ì²­"");     RunnableC0013d.this.a.o.sendMessage(net.daum.adam.publisher.impl.c.a(RunnableC0013d.this.a.o,d.e,(Object)true));   } } public class c extends Thread {   final boolean a;   c(  boolean z){     this.a=z;   }   @Override public void run(){     Looper.prepare();     ProgressDialog progressDialog=new ProgressDialog(d.this.k.getContext());     d.this.o.post(new b(progressDialog));     String str=AdCommon.getCmdUrl() + ""/withdrawal.do"";     List<net.daum.adam.publisher.impl.b> list=null;     try {       Map<String,Object> a2=d.this.l.a((Boolean)true,d.this.k.getClientId());       if (this.a) {         AdCommon.debug(d.c,""[withdrawCollectGps] ìœ„ì¹˜ ë�™ì�˜ ì² íšŒ ìš”ì²­"");         list=o.b(str,a2,d.this.k.getUserAgent());       }     }  catch (    Exception e) {       AdCommon.debug(d.c,""[withdrawCollectGps] LIA ì„œë²„ Command ìš”ì²­ ì‹¤íŒ¨"",e);     }     progressDialog.cancel();     progressDialog.dismiss();     for (    net.daum.adam.publisher.impl.b bVar : list) {       if (bVar != null) {         d.this.a(bVar);         AdCommon.debug(d.c,""[withdrawCollectGps] "" + bVar.h());         d.this.o.post(new a(bVar));       }     }   } class b implements Runnable {     final ProgressDialog a;     b(    ProgressDialog progressDialog){       this.a=progressDialog;     }     @Override public void run(){       this.a.setMessage(""Loading..."");       this.a.setCancelable(true);       this.a.show();     }   } class a implements Runnable {     final net.daum.adam.publisher.impl.b a;     a(    net.daum.adam.publisher.impl.b bVar){       this.a=bVar;     }     @Override public void run(){       if (this.a != null && this.a.g() != 500 && this.a.h().length() > 0) {         net.daum.adam.publisher.impl.b.c.a().a(this.a.h()).a(d.this.k.getContext()).c().show();       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\d.code","!org.eclipse.jdt.core.dom.TypeDeclaration@649f7b42"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\DialogInterfaceOnClickListenerC0014a.code","class DialogInterfaceOnClickListenerC0014a implements DialogInterface.OnClickListener {   DialogInterfaceOnClickListenerC0014a(){   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     net.daum.adam.publisher.impl.b.c.a().b();     AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ê±°ì ˆ ì •ë³´ ì „ì†¡ ìš”ì²­"");     RunnableC0013d.this.a.o.sendEmptyMessage(d.e);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\e.code","public class e implements DialogInterface.OnCancelListener {   e(){   }   @Override public void onCancel(  DialogInterface dialogInterface){     net.daum.adam.publisher.impl.b.c.a().b();     long unused=d.g=0L;     d.this.o.sendEmptyMessage(d.f);   } } public class e extends h<l> {   private static final String a=null;   @Override public List<l> a(  XmlPullParser xmlPullParser) throws XmlPullParserException, IOException {     List<l> list=null;     xmlPullParser.require(2,a,""DAP"");     while (xmlPullParser.next() != 3) {       if (xmlPullParser.getEventType() == 2) {         if (xmlPullParser.getName().equalsIgnoreCase(""COLL"")) {           list=c(xmlPullParser);         }  else {           b(xmlPullParser);         }       }     }     return list;   }   private List<l> c(  XmlPullParser xmlPullParser) throws XmlPullParserException, IOException {     ArrayList arrayList=new ArrayList();     xmlPullParser.require(2,a,""COLL"");     while (xmlPullParser.next() != 3) {       if (xmlPullParser.getEventType() == 2) {         if (xmlPullParser.getName().equals(""AD"")) {           arrayList.add(d(xmlPullParser));         }  else {           b(xmlPullParser);         }       }     }     return arrayList;   }   private l d(  XmlPullParser xmlPullParser) throws XmlPullParserException, IOException {     xmlPullParser.require(2,a,""AD"");     l lVar=new l();     while (xmlPullParser.next() != 3) {       if (xmlPullParser.getEventType() == 2) {         String name=xmlPullParser.getName();         if (name.equalsIgnoreCase(""type"")) {           lVar.a(a(xmlPullParser,name));         }  else         if (name.equalsIgnoreCase(""turl"")) {           lVar.c(a(xmlPullParser,name));         }  else         if (name.equalsIgnoreCase(""mraid"")) {           a(xmlPullParser,lVar);         }  else         if (name.equals(HTMLElementName.HTML)) {           lVar.d(a(xmlPullParser,name));         }  else         if (name.equals(""curl"")) {           lVar.b(a(xmlPullParser,name));         }       }     }     return lVar;   }   private void a(  XmlPullParser xmlPullParser,  l lVar) throws XmlPullParserException, IOException {     xmlPullParser.require(2,a,""mraid"");     while (xmlPullParser.next() != 3) {       if (xmlPullParser.getEventType() == 2) {         String name=xmlPullParser.getName();         if (name.equalsIgnoreCase(""url"")) {           lVar.g(a(xmlPullParser,name));         }  else         if (name.equalsIgnoreCase(""placementtype"")) {           lVar.h(a(xmlPullParser,name));         }       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\f.code","public class f implements DialogInterface.OnClickListener {   f(){   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     net.daum.adam.publisher.impl.b.c.a().b();     d.this.o.sendEmptyMessage(d.f);   } } public abstract class f {   public abstract void updateAd(  l lVar); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\g.code","public class g implements DialogInterface.OnClickListener {   g(){   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     net.daum.adam.publisher.impl.b.c.a().b();     d.this.o.sendMessage(net.daum.adam.publisher.impl.c.a(d.this.o,d.f,(Object)true));   } } public final class g {   private static long a=0;   private static l b=null;   public static void a(  l lVar){     a=System.currentTimeMillis();     b=lVar;   }   public static long a(){     return a;   }   public static boolean b(){     return b != null;   }   public static l a(  int i){     long currentTimeMillis=System.currentTimeMillis();     if (a == 0 || (currentTimeMillis - a) / 1000 >= i) {       return null;     }     AdCommon.debug(""AdCache"",""GET CACHED DATA!!"");     return b;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\h.code","!org.eclipse.jdt.core.dom.TypeDeclaration@3281a992public abstract class h<E> {   private static final String a=null;   public abstract List<E> a(  XmlPullParser xmlPullParser) throws XmlPullParserException, IOException ;   public List<E> a(  InputStream inputStream) throws XmlPullParserException, IOException {     try {       XmlPullParserFactory newInstance=XmlPullParserFactory.newInstance();       newInstance.setNamespaceAware(true);       XmlPullParser newPullParser=newInstance.newPullParser();       newPullParser.setFeature(""http://xmlpull.org/v1/doc/features.html#process-namespaces"",false);       newPullParser.setInput(inputStream,null);       newPullParser.nextTag();       return a(newPullParser);     }   finally {       inputStream.close();     }   }   public String a(  XmlPullParser xmlPullParser,  String str) throws IOException, XmlPullParserException {     xmlPullParser.require(2,a,str);     String c=c(xmlPullParser);     xmlPullParser.require(3,a,str);     return c;   }   private String c(  XmlPullParser xmlPullParser) throws IOException, XmlPullParserException {     if (xmlPullParser.next() != 4) {       return """";     }     String trim=xmlPullParser.getText().trim();     xmlPullParser.nextTag();     return trim;   }   public void b(  XmlPullParser xmlPullParser) throws XmlPullParserException, IOException {     if (xmlPullParser.getEventType() != 2) {       throw new IllegalStateException();     }     int i=1;     while (i != 0) { switch (xmlPullParser.next()) { case 2:         i++;       break; case 3:     i--;   break; } } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\HandlerC0005a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@5394a8f2"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\i.code","public abstract class i extends Activity {   private static final float a=50.0f;   private static final float b=8.0f;   private ImageView c;   private RelativeLayout d;   public abstract View getAdView();   @Override public void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     getWindow().addFlags(AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_END);     this.d=new RelativeLayout(this);     this.d.setBackgroundColor(Color.argb(176,0,0,0));     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(-2,-2);     layoutParams.addRule(13);     this.d.addView(getAdView(),layoutParams);     setContentView(this.d);     a();   }   public void a(){     if (this.c == null) {       this.c=new ImageButton(this);       if (AdCommon.getCloseBtnImg() == null) {         this.c.setImageResource(R.drawable.ic_menu_close_clear_cancel);       }  else {         this.c.setImageBitmap(AdCommon.getCloseBtnImg());       }       this.c.setBackgroundDrawable(null);       this.c.setOnClickListener(new a());       this.c.setId(R.drawable.ic_menu_close_clear_cancel);       this.c.setContentDescription(""ê´‘ê³  ë‹«ê¸°"");     }     float f=getResources().getDisplayMetrics().density;     int i=(int)((50.0f * f) + 0.5f);     int i2=(int)((f * b) + 0.5f);     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(i,i);     layoutParams.addRule(11);     layoutParams.setMargins(i2,0,i2,0);     this.d.removeView(this.c);     this.d.addView(this.c,layoutParams);   } public class a implements View.OnClickListener {     a(){     }     @Override public void onClick(    View view){       i.this.finish();     }   }   public void b(){     this.d.removeView(this.c);   }   @Override public void onDestroy(){     this.d.removeAllViews();     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\j.code","public final class j extends m<b> {   public j(  String str){     super(str);   }   public List<b> a(  String str) throws AdException {     return super.c(str,null);   }   public List<b> a(  String str,  List<NameValuePair> list) throws AdException {     return super.c(str,list);   }   @Override public List<b> a(  InputStream inputStream) throws Exception {     AdCommon.debug(""AdCommandHttpContext"",""Processing response XML "");     ArrayList arrayList=new ArrayList();     SAXParserFactory newInstance=SAXParserFactory.newInstance();     try {       try {         b bVar=new b();         XMLReader xMLReader=newInstance.newSAXParser().getXMLReader();         xMLReader.setContentHandler(new a(bVar));         xMLReader.parse(new InputSource(inputStream));         if (bVar != null) {           arrayList.add(bVar);         }         return arrayList;       }  catch (      SAXException e) {         d.a(4);         throw new AdException(AdError.AD_DOWNLOAD_ERROR_SDKEXCEPTION,""XML Parse error "");       }     }   finally {       inputStream.close();     }   } private static class a extends DefaultHandler {     final b a;     String b;     private boolean d=false;     private boolean e=false;     private boolean f=false;     private boolean g=false;     private boolean h=false;     StringBuilder c=null;     public a(    b bVar){       this.a=bVar;     }     @Override public void startElement(    String str,    String str2,    String str3,    Attributes attributes) throws SAXException {       this.c=new StringBuilder();       if (str3.length() >= 1) {         str=str3;       }  else       if (str.length() <= 0) {         str=str2;       }       if (""result"".equals(str)) {         this.d=true;         return;       }       if (""action"".equals(str)) {         this.b=attributes.getValue(""for"");         String value=attributes.getValue(""type"");         String value2=attributes.getValue(""interval"");         String value3=attributes.getValue(""delay"");         if (value2 != null) {           AdCommon.debug(""AdCommandHttpContext"",""Set Interval : "" + value2);           this.a.a(Integer.parseInt(value2));         }  else         if (value3 != null) {           AdCommon.debug(""AdCommandHttpContext"",""Set Delay : "" + value3);           this.a.a(Integer.parseInt(value3));         }         if (""cmd"".equals(this.b)) {           AdCommon.debug(""AdCommandHttpContext"",""Cmd Action Type: "" + value);           this.a.a(value);         }  else {           AdCommon.debug(""AdCommandHttpContext"",""Imp Action Type: "" + value);           this.a.b(value);         }         if (""agree"".equals(value)) {           this.g=true;           return;         }         return;       }       if (""item"".equals(str)) {         this.e=true;         return;       }       if (""agree"".equals(str)) {         b.h=attributes.getValue(""value"").toLowerCase().equals(""y"");         return;       }       if (""canwithdrawal"".equals(str)) {         this.f=true;         b.i=attributes.getValue(""value"").toLowerCase().equals(""y"");       }  else       if (""msg"".equals(str) && !this.d && !this.e&& !this.f&& !this.g) {         this.h=true;       }     }     @Override public void characters(    char[] cArr,    int i,    int i2) throws SAXException {       this.c.append(cArr,i,i2);     }     @Override public void endElement(    String str,    String str2,    String str3) throws SAXException {       String sb=this.c.toString();       if (this.d) {         this.a.b(Integer.parseInt(sb));         AdCommon.debug(""AdCommandHttpContext"",""Result Code : "" + sb);         this.d=false;         return;       }       if (this.e) {         if (""cmd"".equals(this.b)) {           this.a.d(sb);           AdCommon.debug(""AdCommandHttpContext"",""Cmd Parameter : "" + sb);         }  else {           this.a.e(sb);           AdCommon.debug(""AdCommandHttpContext"",""Imp Parameter : "" + sb);         }         this.e=false;         return;       }       if (this.g) {         this.g=false;         b.f=sb;       }  else       if (this.f) {         this.f=false;         b.g=sb;       }  else       if (this.h) {         this.h=false;         this.a.f(sb);       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\k.code","!org.eclipse.jdt.core.dom.TypeDeclaration@b0bd7ed"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\l.code","public final class l {   public static final String a=""H"";   public static final String b=""MRAID"";   private static final String c=""Ad"";   private String h;   private String d=null;   private String j=null;   private String e=null;   private String i=null;   private String f=null;   private String g=null;   public String a(){     return this.e;   }   public void a(  String str){     this.e=str;   }   public String b(){     return this.f;   }   public void b(  String str){     this.f=str;   }   public String c(){     return this.g;   }   public void c(  String str){     this.g=str;   }   public String d(){     return this.h;   }   public void d(  String str){     this.h=str;   }   public void e(  String str){     if (this.h != null) {       this.h+=str;     }  else {       this.h=str;     }   }   public String e(){     return this.d;   }   public void f(  String str){     this.d=str;   }   public String f(){     return this.i;   }   public void g(  String str){     this.i=str;   }   public boolean equals(  java.lang.Object r4){     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.l.equals(java.lang.Object):boolean"");   }   public String g(){     return this.j;   }   public void h(  String str){     this.j=str;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\m.code","public abstract class m<E> {   private static final String a=""BaseHttpContext"";   private String b;   private int c=0;   private a d=a.PROCESS_DOWNLOAD_AD_NONE;   public enum a {  PROCESS_DOWNLOAD_AD_NONE,   PROCESS_DOWNLOAD_AD_BODY,   PROCESS_DOWNLOAD_AD_FINISH}   public abstract List<E> a(  InputStream inputStream) throws Exception ;   public a a(){     return this.d;   }   public void a(  a aVar){     this.d=aVar;   }   public m(  String str){     this.b=null;     this.b=str;   }   public int b(){     AdCommon.debug(a,""Response Code : "" + this.c);     return this.c;   }   protected HttpResponse b(  String str){     DefaultHttpClient a2=net.daum.adam.publisher.impl.c.a.a();     try {       HttpGet httpGet=new HttpGet(str);       if (this.b != null && this.b.length() > 0) {         httpGet.setHeader(""User-Agent"",this.b);       }       HttpResponse execute=a2.execute(httpGet);       this.c=execute.getStatusLine().getStatusCode();       return execute;     }  catch (    Exception e) {       AdCommon.debug(a,e.toString(),e);       a(a.PROCESS_DOWNLOAD_AD_NONE);       return null;     }   }   protected HttpResponse b(  String str,  List<NameValuePair> list){     DefaultHttpClient a2=net.daum.adam.publisher.impl.c.a.a();     try {       HttpPost httpPost=new HttpPost(str);       httpPost.setEntity(new UrlEncodedFormEntity(list));       if (this.b != null && this.b.length() > 0) {         httpPost.setHeader(""User-Agent"",this.b);       }       HttpResponse execute=a2.execute(httpPost);       this.c=execute.getStatusLine().getStatusCode();       return execute;     }  catch (    Exception e) {       AdCommon.debug(a,e.toString(),e);       a(a.PROCESS_DOWNLOAD_AD_NONE);       return null;     }   }   public List<E> c(  String str,  List<NameValuePair> list) throws AdException {     HttpResponse b;     try {       if (list != null) {         b=b(str,list);       }  else {         b=b(str);       }       if (b == null) {         a(a.PROCESS_DOWNLOAD_AD_NONE);         AdException adException=new AdException(AdError.AD_DOWNLOAD_ERROR_HTTPFAILED,""server doesn't response"");         AdCommon.debug(a,""requestBody"",adException);         throw adException;       }       if (b() != 200) {         a(a.PROCESS_DOWNLOAD_AD_NONE);         AdException adException2=new AdException(AdError.AD_DOWNLOAD_ERROR_HTTPFAILED,""server doesn't response : "" + b());         AdCommon.debug(a,""requestBody"",adException2);         throw adException2;       }       InputStream content=b.getEntity().getContent();       if (content == null) {         a(a.PROCESS_DOWNLOAD_AD_NONE);         AdException adException3=new AdException(AdError.AD_DOWNLOAD_ERROR_NOAD);         AdCommon.debug(a,""requestBody"",adException3);         throw adException3;       }       return a(content);     }  catch (    Exception e) {       a(a.PROCESS_DOWNLOAD_AD_NONE);       AdException adException4=new AdException(AdError.AD_DOWNLOAD_ERROR_HTTPFAILED,e.toString());       AdCommon.debug(a,""requestBody"",adException4);       throw adException4;     }   }   public List<E> c(  String str) throws AdException {     return c(str,null);   }   public List<E> d(  String str,  List<NameValuePair> list) throws AdException {     return c(str,list);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\n.code","public class n extends m<l> {   private static final String a=""AdHttpContext"";   public n(  String str){     super(str);   }   @Override public List<l> d(  String str,  List<NameValuePair> list) throws AdException {     try {       a(m.a.PROCESS_DOWNLOAD_AD_BODY);       List<l> c=c(str,list);       if (a() == m.a.PROCESS_DOWNLOAD_AD_NONE || c.size() < 1 || c.get(0) == null) {         a(m.a.PROCESS_DOWNLOAD_AD_NONE);         return null;       }       a(m.a.PROCESS_DOWNLOAD_AD_FINISH);       return c;     }  catch (    AdException e) {       AdCommon.debug(a,e.toString());       throw e;     }   }   @Override public List<l> a(  InputStream inputStream) throws IOException, AdException {     try {       try {         return new e().a(inputStream);       }  catch (      XmlPullParserException e) {         a(m.a.PROCESS_DOWNLOAD_AD_NONE);         throw new AdException(AdError.AD_DOWNLOAD_ERROR_NOAD);       }     }   finally {       inputStream.close();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\o.code","public final class o {   public static l a(  String str,  Map<String,Object> map,  String str2) throws AdException {     n nVar=new n(str2);     AdCommon.debug(""AdProtocolHandler"",""URL : "" + str + ""?""+ ((Object)a(map)));     List<l> d=nVar.d(str,b(map));     if (nVar.b() != 200) {       throw new AdException(AdError.AD_DOWNLOAD_ERROR_HTTPFAILED);     }     if (d == null || d.size() < 1) {       throw new AdException(AdError.AD_DOWNLOAD_ERROR_NOAD);     }     l lVar=d.get(0);     if (lVar == null) {       throw new AdException(AdError.AD_DOWNLOAD_ERROR_NOAD);     }     if (nVar.a() != m.a.PROCESS_DOWNLOAD_AD_FINISH) {       throw new AdException(AdError.AD_DOWNLOAD_ERROR_INVALIDAD,lVar.b());     }     return lVar;   }   public static List<b> b(  String str,  Map<String,Object> map,  String str2) throws AdException {     AdCommon.debug(""AdProtocolHandler"",""URL : "" + str + ""?""+ ((Object)a(map)));     return new j(str2).d(str,b(map));   }   private static StringBuilder a(  Map<String,Object> map){     StringBuilder sb=new StringBuilder();     for (    String str : map.keySet()) {       Object obj=map.get(str);       if (obj != null) {         if (sb.length() > 0) {           sb.append(CharacterEntityReference._amp);         }         sb.append(str);         sb.append('=');         sb.append(obj.toString());       }     }     return sb;   }   private static List<NameValuePair> b(  Map<String,Object> map){     ArrayList arrayList=new ArrayList();     for (    String str : map.keySet()) {       Object obj=map.get(str);       if (obj != null) {         arrayList.add(new BasicNameValuePair(str,obj.toString()));       }     }     return arrayList;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\p.code","public final class p {   public static final String a=""gps"";   public static final String b=""network"";   public static final String c=""netoperator"";   public static final String d=""wifi"";   public static final String e=""3g"";   private static p f=null;   private static final String i=""AdParameterHelper"";   private static final String j=""xml2"";   private static final String k=""12586269025"";   private static List<String> n=null;   private static List<String> o=null;   private final boolean g;   private final boolean h;   private String l=null;   private String m=null;   private final Map<String,Object> p=new HashMap();   private AdInfo q=null;   public static p a(  Context context){     if (f == null) {       if (context == null) {         throw new NullPointerException(""Context must not be null."");       }       f=new p(context);     }     return f;   }   private p(  Context context){     this.g=c.a(""android.permission.ACCESS_FINE_LOCATION"",context);     this.h=c.a(""android.permission.ACCESS_COARSE_LOCATION"",context);     try {       b(context);     }  catch (    Exception e2) {     }   }   private void b(  Context context) throws UnsupportedEncodingException {     if (!this.p.containsKey(""devid"")) {       this.p.put(""devid"",c(context));     }     if (!this.p.containsKey(""appid"")) {       this.p.put(""appid"",URLEncoder.encode(context.getApplicationContext().getPackageName(),""UTF8""));     }     if (!this.p.containsKey(""ct"")) {       this.p.put(""ct"",""AA"");     }     if (!this.p.containsKey(""dev"")) {       this.p.put(""dev"",URLEncoder.encode(Build.MODEL,""UTF8""));     }     if (!this.p.containsKey(""os"")) {       this.p.put(""os"",URLEncoder.encode(""Android"",""UTF8""));     }     if (!this.p.containsKey(""osver"")) {       this.p.put(""osver"",URLEncoder.encode(Build.VERSION.RELEASE,""UTF8""));     }     if (!this.p.containsKey(""sdkver"")) {       this.p.put(""sdkver"",URLEncoder.encode(AdCommon.SDK_VERSION,""UTF8""));     }     if (!this.p.containsKey(""output"")) {       this.p.put(""output"",URLEncoder.encode(j,""UTF8""));     }     if (!this.p.containsKey(""oe"")) {       this.p.put(""oe"",""utf8"");     }     if (!this.p.containsKey(""ie"")) {       this.p.put(""ie"",""utf8"");     }     if (!this.p.containsKey(b)) {       this.p.put(b,c.b.a(context));     }     if (!this.p.containsKey(c)) {       this.p.put(c,c.b.b(context));     }     if (this.p.containsKey(""contentid"")) {       this.p.remove(""contentid"");     }     if (this.p.containsKey(""client"")) {       this.p.remove(""client"");     }   }   private String c(  Context context){     String str;     String c2=c.b.c(context);     if (c2 != null) {       str=c2.toLowerCase(Locale.ENGLISH).replaceAll("":"","""");       AdCommon.debug(i,""Mac Address(Plain) : "" + str);     }  else {       str="""";     }     return c.b(str,""SHA-256"");   }   private Map<String,Object> b(  String str) throws UnsupportedEncodingException, AdException {     if (str == null) {       throw new AdException(AdError.AD_DOWNLOAD_ERROR_UNKNOWN_CLIENTID);     }     this.p.put(""test"",AdCommon.isTestMode() ? ""Y"" : ""N"");     this.p.put(""client"",str);     String contentId=AdCommon.getContentId();     if (contentId != null && contentId.length() > 0) {       this.p.put(""contentid"",contentId);     }     if (this.q != null) {       if (this.q.getBirth() != null) {         this.p.put(""birth"",URLEncoder.encode(this.q.getBirth(),""UTF8""));       }       if (this.q.getGender() != null) {         this.p.put(""gender"",URLEncoder.encode(this.q.getGender(),""UTF8""));       }     }     Location a2=c.b.a();     if (a2 != null) {       a(a2.getLatitude(),a2.getLongitude());       this.p.put(""gps_la"",this.l);       this.p.put(""gps_lo"",this.m);     }     return this.p;   }   public Map<String,Object> a(  Boolean bool,  String str) throws UnsupportedEncodingException, AdException {     Map<String,Object> b2=b(str);     if (bool == null) {       a(b2,o);     }  else {       b2.put(""isagree"",bool.booleanValue() ? ""y"" : ""n"");     }     return b2;   }   public Map<String,Object> a(  String str) throws UnsupportedEncodingException, AdException {     Map<String,Object> b2=b(str);     a(b2,n);     return b2;   }   private void a(  Map<String,Object> map,  List<String> list){     if (list != null && list.contains(a)) {       AdCommon.debug(i,""ìœ„ì¹˜ ì •ë³´ë¥¼ íŒŒë�¼ë¯¸í„°ì—� ì¶”ê°€"");       AdCommon.debug(i,""ìœ„ì¹˜ ì •ë³´ : "" + this.l + "", ""+ this.m);       map.put(""gps_la"",this.l);       map.put(""gps_lo"",this.m);     }   }   public static void a(  List<String> list){     n=list;   }   public static void b(  List<String> list){     o=list;   }   public boolean a(){     return this.g || this.h;   }   public void a(  double d2,  double d3){     double[] a2=net.daum.adam.publisher.impl.b.a.a(d2,d3);     this.l=c.a(String.valueOf((int)a2[0]),k);     this.m=c.a(String.valueOf((int)a2[1]),k);     AdCommon.debug(i,""ìœ„ì¹˜ ì •ë³´ ê°€ì ¸ì˜¤ê¸° ë°� ì•”í˜¸í™”"");     AdCommon.debug(i,""ìœ„ë�„ : "" + d2 + ""(""+ this.l+ "")"");     AdCommon.debug(i,""ê²½ë�„ : "" + d3 + ""(""+ this.m+ "")"");   }   public AdInfo b(){     return this.q;   }   public void a(  AdInfo adInfo){     this.q=adInfo;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\RunnableC0011a.code","class RunnableC0011a implements Runnable {   RunnableC0011a(){   }   @Override public void run(){     if (a.this.c != null) {       a.this.c.setMessage(""Loading..."");       a.this.c.setCancelable(true);       a.this.c.show();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl\RunnableC0013d.code","private static final class RunnableC0013d implements Runnable {   private final d a;   private final boolean b;   public RunnableC0013d(  d dVar,  boolean z){     this.a=dVar;     this.b=z;   }   @Override public void run(){     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.d.RunnableC0013d.run():void"");   } class a implements Runnable {     a(){     } class c implements DialogInterface.OnClickListener {       c(){       }       @Override public void onClick(      DialogInterface dialogInterface,      int i){         net.daum.adam.publisher.impl.b.c.a().b();         AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ìŠ¹ì�¸ ì •ë³´ ì „ì†¡ ìš”ì²­"");         RunnableC0013d.this.a.o.sendMessage(net.daum.adam.publisher.impl.c.a(RunnableC0013d.this.a.o,d.e,(Object)true));       }     }     @Override public void run(){       net.daum.adam.publisher.impl.b.c.a().a(net.daum.adam.publisher.impl.b.f).a(""ìŠ¹ì�¸"",new c()).b(""ê±°ì ˆ"",new DialogInterfaceOnClickListenerC0014a()).a(new b()).a(false).a(RunnableC0013d.this.a.k.getContext()).c().show();     } class DialogInterfaceOnClickListenerC0014a implements DialogInterface.OnClickListener {       DialogInterfaceOnClickListenerC0014a(){       }       @Override public void onClick(      DialogInterface dialogInterface,      int i){         net.daum.adam.publisher.impl.b.c.a().b();         AdCommon.debug(d.c,""[RequestCommandRunnable] ìœ„ì¹˜ ì •ë³´ ìˆ˜ì§‘ ê±°ì ˆ ì •ë³´ ì „ì†¡ ìš”ì²­"");         RunnableC0013d.this.a.o.sendEmptyMessage(d.e);       }     } class b implements DialogInterface.OnCancelListener {       b(){       }       @Override public void onCancel(      DialogInterface dialogInterface){         long unused=d.g=0L;         net.daum.adam.publisher.impl.b.c.a().b();       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@9bcb274class a implements DialogInterface.OnClickListener {   final JsResult a;   a(  JsResult jsResult){     this.a=jsResult;   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     this.a.confirm();   } } public class a implements View.OnKeyListener {   net.daum.adam.publisher.impl.a.a a=null;   a(){   }   @Override public synchronized boolean onKey(  View view,  int i,  KeyEvent keyEvent){     boolean z=true; synchronized (this) {       if (view != null) {         if (view instanceof net.daum.adam.publisher.impl.a.a) {           this.a=(net.daum.adam.publisher.impl.a.a)view;         }         if (i == 4) {           try {             if (ad.this.e().getViewController().j().e() || ad.this.e().getViewController().j().c()) {               if (this.a.getProgress() != 100) {                 this.a.stopLoading();                 ad.this.e().getViewController().p();               }  else {                 ad.this.e().getViewController().p();               }             }           }  catch (          Exception e) {           }         }  else {           z=false;         }       }     }     return z;   } } protected interface a {   void a(  JSONObject jSONObject,  ad adVar); } public interface a {   void a();   void a(  int i);   void a(  String str);   void a(  String[] strArr);   void b(  String str); } class a implements Runnable {   final String[] a;   a(  String[] strArr){     this.a=strArr;   }   @Override public void run(){     AtomicBoolean atomicBoolean;     p.this.a.a(this.a);     atomicBoolean=p.this.a.g;     atomicBoolean.set(false);   } } public static class a {   static final int[] a=new int[NetworkInfo.State.values().length]; static {     try {       a[NetworkInfo.State.UNKNOWN.ordinal()]=1;     }  catch (    NoSuchFieldError e) {     }     try {       a[NetworkInfo.State.DISCONNECTED.ordinal()]=2;     }  catch (    NoSuchFieldError e2) {     }   } } class a implements DialogInterface.OnCancelListener {   a(){   }   @Override public void onCancel(  DialogInterface dialogInterface){     ad adVar=(ad)r.this.p.get();     if (adVar != null && adVar.j().b() && adVar.e().getOnCloseListener() != null) {       adVar.e().getOnCloseListener().onClose();     }   } } public class a implements Runnable {   final View a;   a(  View view){     this.a=view;   }   @Override public void run(){     try {       if ((this.a instanceof net.daum.adam.publisher.impl.a.a) && ((net.daum.adam.publisher.impl.a.a)this.a).getViewController().h().b()) {         ((net.daum.adam.publisher.impl.a.a)this.a).getViewController().c(t.this.e);       }     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\aa.code","class aa implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       if (adVar instanceof s) {         ((s)adVar).d();       }     }  catch (    Exception e) {       adVar.a(e.getMessage(),""recognizeVoice"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\ab.code","class ab implements GestureDetector.OnGestureListener {   final a a;   public ab(  a aVar){     this.a=aVar;   }   @Override public boolean onDown(  MotionEvent motionEvent){     return this.a.getOnGestureDownListener() != null && this.a.getOnGestureDownListener().a(motionEvent);   }   @Override public boolean onFling(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2){     return this.a.getOnGestureFlingListener() != null && this.a.getOnGestureFlingListener().a(motionEvent,motionEvent2,f,f2);   }   @Override public void onLongPress(  MotionEvent motionEvent){     if (this.a.getOnGestureLongPressListener() != null) {       this.a.getOnGestureLongPressListener().onLongPress(motionEvent);     }   }   @Override public boolean onScroll(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2){     return this.a.getOnGestureScrollListener() != null && this.a.getOnGestureScrollListener().a(motionEvent,motionEvent2,f,f2);   }   @Override public void onShowPress(  MotionEvent motionEvent){     if (this.a.getOnGestureShowPressListener() != null) {       this.a.getOnGestureShowPressListener().a(motionEvent);     }   }   @Override public boolean onSingleTapUp(  MotionEvent motionEvent){     return this.a.getOnGestureSingleTapUpListener() != null && this.a.getOnGestureSingleTapUpListener().onSingleTapUp(motionEvent);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\ac.code","public class ac extends WebChromeClient {   final net.daum.adam.publisher.impl.a.a a;   public ac(  net.daum.adam.publisher.impl.a.a aVar){     this.a=aVar;   }   @Override public void onProgressChanged(  WebView webView,  int i){     if (i == 100) {       AdCommon.debug(net.daum.adam.publisher.impl.a.a.a,""Contents has been loaded"");     }   }   @Override public boolean onJsAlert(  WebView webView,  String str,  String str2,  JsResult jsResult){     if (webView == null) {       return false;     }     try {       new AlertDialog.Builder(webView.getContext()).setTitle(str).setMessage(str2).setPositiveButton(R.string.ok,new a(jsResult)).setCancelable(false).create().show();     }  catch (    Exception e) {     }     return true;   } class a implements DialogInterface.OnClickListener {     final JsResult a;     a(    JsResult jsResult){       this.a=jsResult;     }     @Override public void onClick(    DialogInterface dialogInterface,    int i){       this.a.confirm();     }   }   @Override public void onShowCustomView(  View view,  WebChromeClient.CustomViewCallback customViewCallback){     super.onShowCustomView(view,customViewCallback);     if (view instanceof FrameLayout) {       FrameLayout frameLayout=(FrameLayout)view;       if (frameLayout.getFocusedChild() instanceof VideoView) {         VideoView videoView=(VideoView)frameLayout.getFocusedChild();         frameLayout.removeView(videoView);         videoView.start();       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\ad.code","public class ad implements net.daum.adam.publisher.impl.a.d {   public static final int a=50;   public static final int b=6;   public static final int c=11340304;   public static final int d=11340561;   public static final int e=11340818;   public static final int f=11341075;   public static final int g=11341332;   public static final int h=1;   public static final int i=0;   public static final int j=6;   public static final int k=7;   public static final int l=8;   public static final int m=9;   static final String n=ad.class.getSimpleName();   private FrameLayout A;   private float B;   private float C;   private d.b D;   private ImageButton E;   private q F;   private t G;   protected boolean o;   protected String p;   private final net.daum.adam.publisher.impl.a.a r;   private final int s;   private final o t;   private d.b u;   private d.c v;   private JSONObject w;   private JSONObject x;   private int y;   private int z;   public ad(  net.daum.adam.publisher.impl.a.a aVar){     this(aVar,d.c.INLINE);   }   public ad(  net.daum.adam.publisher.impl.a.a aVar,  d.b bVar){     this(aVar);     a(bVar);   }   public ad(  net.daum.adam.publisher.impl.a.a aVar,  d.c cVar){     this.o=true;     this.p=""none"";     this.u=d.b.LOADING;     this.D=d.b.DEFAULT;     if (aVar == null || aVar.getContext() == null) {       throw new Error(""Cannot Initializd MraidController"");     }     this.r=aVar;     a(cVar);     this.s=f() instanceof Activity ? ((Activity)f()).getRequestedOrientation() : -1;     this.G=t.a(f());     this.G.a(e());     this.F=q.a(f());     this.F.a(e());     this.t=new o(f());     b(this.r.getContext());   }   public Context f(){     return e().getContext();   }   public net.daum.adam.publisher.impl.a.a e(){     return this.r;   }   private Display a(){     return ((WindowManager)f().getSystemService(""window"")).getDefaultDisplay();   }   public synchronized void g(){     if (j().c() || j().e()) {       p();     }     this.F.b(e());     this.G.b(e());   }   private void b(  Context context){     DisplayMetrics displayMetrics=new DisplayMetrics();     a().getMetrics(displayMetrics);     this.B=displayMetrics.density;     this.C=displayMetrics.densityDpi;   }   private int c(  Context context){     Window window;     View findViewById;     try {       if (!(context instanceof Activity) || (window=((Activity)f()).getWindow()) == null || (findViewById=window.findViewById(R.id.content)) == null) {         return 0;       }       return findViewById.getTop();     }  catch (    Exception e2) {       return 0;     }   }   protected int a(  int i2){     return (int)(i2 * this.B);   }   protected int b(  int i2){     return (int)(i2 * (160.0d / this.C));   }   public d.b h(){     return this.D;   }   public void a(  d.b bVar){     this.D=bVar;   }   @Override public String i(){     return net.daum.adam.publisher.impl.a.d.q;   }   @Override public d.b j(){     return this.u;   }   public void b(  d.b bVar){     this.u=bVar;   }   @Override public void k(){     try {       e().a(""window.mraidbridge.fireReadyEvent();"");     }  catch (    Exception e2) {     }   }   @Override public void a(  String str,  String str2){     try {       e().a(""window.mraidbridge.fireErrorEvent('"" + str + ""', '""+ str2+ ""');"");     }  catch (    Exception e2) {     }   }   @Override public void c(  d.b bVar){     a(""state"",(Object)bVar.toString());     this.u=bVar;   }   @Override public void a(  boolean z){     try {       e().setVisibility(z ? 0 : 4);       a(""viewable"",Boolean.valueOf(z));     }  catch (    Exception e2) {     }   }   @Override public void a(  int i2,  int i3){     JSONObject v=v();     try {       v.put(""width"",b(i2));       v.put(""height"",b(i3));     }  catch (    Exception e2) {     }     a(""currentPosition"",v);   }   private void a(  String str,  Object obj){     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(str,obj);       e().a(""window.mraidbridge.fireChangeEvent("" + jSONObject.toString() + "");"");     }  catch (    JSONException e2) {     }   }   public void b(  String str){     a(net.daum.adam.publisher.impl.p.b,(Object)str);   }   public void c(  int i2){     a(""orientation"",Integer.valueOf(i2));     l();     if (this.u.c()) {       u();     }     if (this.u.e() || n().a()) {       s();     }     if (this.u.b()) {       a(""defaultPosition"",x());       a(""currentPosition"",v());     }   }   public synchronized void l(){     a(""maxSize"",w());     a(""screenSize"",y());   }   public void c(){     l();     c(e().getOrientation());     a(""defaultPosition"",x());     a(""currentPosition"",v());     m();     b(this.F.a());     a(""placementType"",(Object)this.v.toString());     a(true);     c(this.D);     k();   }   protected void m(){     JSONObject jSONObject=new JSONObject();     try {       for (      d.a aVar : d.a.values()) {         jSONObject.put(aVar.toString(),e(aVar.toString()));       }     }  catch (    JSONException e2) {       e2.printStackTrace();     }     a(""supports"",jSONObject);   }   public void c(  String str){     try {       e().a(""window.mraidbridge.nativeCallComplete('"" + str + ""');"");     }  catch (    Exception e2) {     }   }   @Override public d.c n(){     return this.v;   }   public void a(  d.c cVar){     this.v=cVar;   }   @Override public boolean o(){     return e().getVisibility() == 0;   }   @Override public void d(  String str){     e().b(str);   }   @Override public synchronized void p(){     try {       if (j().b()) {         e().setVisibility(4);         c(d.b.HIDDEN);       }       if (j().c() || j().e()) {         z();         c(false);         c(d.b.DEFAULT);       }     }  catch (    Exception e2) {     }     if (e().getOnCloseListener() != null) {       e().getOnCloseListener().onClose();     }   }   @Override public void b(  JSONObject jSONObject){     try {       if (jSONObject.has(""allowOrientationChange"")) {         this.o=jSONObject.getBoolean(""allowOrientationChange"");       }       if (jSONObject.has(""forceOrientation"")) {         this.p=jSONObject.getString(""forceOrientation"");       }     }  catch (    Exception e2) {     }   }   @Override public JSONObject q(){     return this.x;   }   @Override public synchronized void c(  JSONObject jSONObject){     this.x=jSONObject;     if (n().a()) {       s();     }   }   @Override public void b(  boolean z){     a(!z,53,false);     if (e() != null && e().getOnCloseButtonStateChangeListener() != null) {       e().getOnCloseButtonStateChangeListener().a(z ? false : true);     }   }   @Override public void r() throws JSONException {     net.daum.adam.publisher.impl.a.a aVar;     if (!j().e()) {       JSONObject w=w();       String str=null;       int a2=a(w.getInt(""width""));       int a3=a(w.getInt(""height""));       boolean z=false;       JSONObject q=q();       if (q != null) {         try {           if (q.has(""url"")) {             str=q.getString(""url"");           }           if (q.has(""width"")) {             if (q.getInt(""width"") == 0) {               q.put(""width"",w.getInt(""width""));             }             a2=a(q.getInt(""width""));           }           if (q.has(""height"")) {             if (q.getInt(""height"") == 0) {               q.put(""height"",w.getInt(""height""));             }             a3=a(q.getInt(""height""));           }           if (q.has(""useCustomClose"")) {             z=q.getBoolean(""useCustomClose"");           }         }  catch (        JSONException e2) {         }       }       c(true);       net.daum.adam.publisher.impl.a.a e3=e();       if (str != null) {         net.daum.adam.publisher.impl.a.a a4=a(f());         a4.getViewController().a(d.b.EXPANDED);         a4.c(str);         aVar=a4;       }  else {         aVar=e3;       }       if (aVar == null) {         a(""Cannot controlled ad area"",""mraid.expand()"");         return;       }       RelativeLayout.LayoutParams b2=b(a2,a3);       try {         a((View)aVar,true,b2);       }  catch (      Exception e4) {         a(e4.toString(),""mraid.expand()"");       }       b(z);       aVar.getViewController().a(b2.width,b2.height);       if (e().getOnExpandListener() != null) {         e().getOnExpandListener().onExpand();       }       if (!n().a()) {         c(d.b.EXPANDED);       }     }   }   private RelativeLayout.LayoutParams b(  int i2,  int i3){     RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(i2,i3);     layoutParams.addRule(13);     if (Math.abs(e().getOrientation()) == 90) {       if (i2 < i3) {         layoutParams.width=i3;         layoutParams.height=i2;       }     }  else     if (i2 > i3) {       layoutParams.width=i3;       layoutParams.height=i2;     }     return layoutParams;   }   protected void s(){     net.daum.adam.publisher.impl.a.a aVar;     JSONObject q=q();     w();     if (n().a()) {       aVar=e();     }  else     if (this.A != null) {       aVar=(net.daum.adam.publisher.impl.a.a)this.A.findViewById(g);     }  else {       return;     }     if (q != null && aVar != null) {       try {         int measuredWidth=aVar.getMeasuredWidth();         int measuredHeight=aVar.getMeasuredHeight();         if (q.has(""width"")) {           measuredWidth=a(q.getInt(""width""));         }         if (q.has(""height"")) {           measuredHeight=a(q.getInt(""height""));         }         RelativeLayout.LayoutParams b2=b(measuredWidth,measuredHeight);         a((View)aVar,true,b2);         aVar.getViewController().a(b2.width,b2.height);       }  catch (      Exception e2) {         a(e2.toString(),""mraid.expand()"");       }     }   }   protected net.daum.adam.publisher.impl.a.a a(  Context context){     return new net.daum.adam.publisher.impl.a.a(context);   }   @Override public JSONObject t(){     return this.w;   }   @Override public synchronized void d(  JSONObject jSONObject){     this.w=jSONObject;   }   @Override public synchronized void u(){     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.a.ad.u():void"");   }   public JSONObject a(  View view){     if (view == null) {       return null;     }     int[] iArr=new int[2];     view.getLocationInWindow(iArr);     JSONObject jSONObject=new JSONObject();     int measuredWidth=view.getMeasuredWidth();     int measuredHeight=view.getMeasuredHeight();     try {       if (t() != null && j().c()) {         measuredWidth=a(t().getInt(""width""));         measuredHeight=a(t().getInt(""height""));       }       if (q() != null && j().e()) {         measuredWidth=a(q().getInt(""width""));         measuredHeight=a(q().getInt(""height""));       }       jSONObject.put(""x"",b(iArr[0]));       jSONObject.put(""y"",b(iArr[1] - c(f())));       jSONObject.put(""width"",b(measuredWidth));       jSONObject.put(""height"",b(measuredHeight));       return jSONObject;     }  catch (    Exception e2) {       return jSONObject;     }   }   @Override public synchronized JSONObject v(){     return a(e());   }   @Override public synchronized JSONObject w(){     JSONObject jSONObject;     DisplayMetrics displayMetrics=new DisplayMetrics();     a().getMetrics(displayMetrics);     int i2=displayMetrics.widthPixels;     int c2=displayMetrics.heightPixels - c(f());     jSONObject=new JSONObject();     try {       jSONObject.put(""width"",b(i2));       jSONObject.put(""height"",b(c2));     }  catch (    JSONException e2) {     }     return jSONObject;   }   @Override public synchronized JSONObject x(){     View view;     net.daum.adam.publisher.impl.a.a e2=e();     if (this.A == null || j().b() || (view=(FrameLayout)this.A.findViewById(c)) == null) {       view=e2;     }     return view == null ? null : a(view);   }   @Override public JSONObject y(){     DisplayMetrics displayMetrics=new DisplayMetrics();     a().getMetrics(displayMetrics);     JSONObject jSONObject=new JSONObject();     try {       jSONObject.put(""width"",b(displayMetrics.widthPixels));       jSONObject.put(""height"",b(displayMetrics.heightPixels));     }  catch (    JSONException e2) {     }     return jSONObject;   }   @Override public boolean e(  String str){     return this.t.a(d.a.a(str));   }   @Override public void f(  String str){     if (URLUtil.isValidUrl(str)) {       a(str,(Bundle)null);     }   }   public void a(  String str,  Bundle bundle){     if (URLUtil.isValidUrl(str)) {       new net.daum.adam.publisher.impl.c.a(new r(this,bundle)).c(str);     }   }   @Override public void e(  JSONObject jSONObject){     Date date;     Date date2;     SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mmZ"",e().getResources().getConfiguration().locale);     TimeZone timeZone=simpleDateFormat.getTimeZone();     try {       String string=jSONObject.getString(""start"");       String string2=jSONObject.getString(""end"");       date=string != null ? simpleDateFormat.parse(string) : new Date();       date2=string2 != null ? simpleDateFormat.parse(string2) : date;     }  catch (    Exception e2) {       date=new Date();       date2=new Date(date.getTime() + 3600000);     }     try {       jSONObject.put(""start"",date.getTime());       jSONObject.put(""end"",date2.getTime());       jSONObject.put(""timezone"",timeZone.getDisplayName());     }  catch (    JSONException e3) {     }     Intent intent=new Intent(""android.intent.action.EDIT"");     intent.setData(Uri.parse(""content://com.android.calendar""));     intent.setType(""vnd.android.cursor.item/event"");     intent.putExtra(""hasAlarm"",1);     try {       if (jSONObject.has(""description"")) {         intent.putExtra(HTMLElementName.TITLE,jSONObject.getString(""description""));       }       if (jSONObject.has(""summary"")) {         intent.putExtra(""description"",jSONObject.getString(""summary""));       }       if (jSONObject.has(""location"")) {         intent.putExtra(""eventLocation"",jSONObject.getString(""location""));       }       intent.putExtra(""beginTime"",jSONObject.getLong(""start""));       intent.putExtra(""endTime"",jSONObject.getLong(""end""));     }  catch (    JSONException e4) {     }     f().startActivity(intent);   }   @Override public void g(  String str){     if (URLUtil.isValidUrl(str)) {       try {         Intent intent=new Intent(""android.intent.action.VIEW"");         if (intent != null) {           intent.setDataAndType(Uri.parse(str),""video/*"");           try {             PendingIntent.getActivity(f(),0,intent,0).send();           }  catch (          PendingIntent.CanceledException e2) {           }         }       }  catch (      ActivityNotFoundException e3) {         Toast.makeText(f(),""This device cannot handle video uri."",0).show();       } catch (      Throwable th) {       }     }   }   private void b(){     try {       ViewGroup viewGroup=(ViewGroup)e().getParent();       if (viewGroup != null) {         ViewGroup.LayoutParams layoutParams=viewGroup.getLayoutParams();         FrameLayout frameLayout=new FrameLayout(f());         frameLayout.setId(c);         int childCount=viewGroup.getChildCount();         int i2=0;         while (i2 < childCount && viewGroup.getChildAt(i2) != e()) {           i2++;         }         this.y=i2;         this.z=viewGroup.getHeight();         layoutParams.height=e().getMeasuredHeight();         viewGroup.addView(frameLayout,i2,new RelativeLayout.LayoutParams(-1,e().getMeasuredHeight()));         viewGroup.removeView(e());         if (e().getViewController().j().c()) {           e().getViewController().clone();         }       }     }  catch (    Exception e2) {     }   }   protected boolean a(  View view,  boolean z,  RelativeLayout.LayoutParams layoutParams) throws Exception {     RelativeLayout relativeLayout;     boolean z2;     if (e() == null || view == null) {       throw new Exception(""Cannot initialize mraid content view"");     }     if (n().a()) {       if (view.getLayoutParams() == null) {         view.setLayoutParams(layoutParams);       }       view.getLayoutParams().width=layoutParams.width;       view.getLayoutParams().height=layoutParams.height;       view.requestLayout();       view.post(new d());       return false;     }     if (this.A == null) {       try {         this.A=(FrameLayout)e().getRootView().findViewById(R.id.content);         if (this.A == null) {           throw new Exception(""Cannot initialize mraid content view"");         }       }  catch (      Exception e2) {         throw e2;       }     }     view.setId(g);     if (j().b()) {       b();     }     RelativeLayout relativeLayout2=(RelativeLayout)this.A.findViewById(d);     FrameLayout frameLayout=(FrameLayout)this.A.findViewById(e);     View findViewById=this.A.findViewById(f);     if (relativeLayout2 == null) {       RelativeLayout relativeLayout3=new RelativeLayout(f());       relativeLayout3.setId(d);       relativeLayout=relativeLayout3;     }  else {       relativeLayout=relativeLayout2;     }     if (z && findViewById == null) {       relativeLayout.addView(d(f()),new RelativeLayout.LayoutParams(-1,-1));     }     if (frameLayout == null) {       frameLayout=new FrameLayout(f());       frameLayout.setId(e);     }     View findViewById2=frameLayout.findViewById(g);     if (findViewById2 == null || findViewById2.equals(view)) {       z2=false;     }  else {       frameLayout.removeView(findViewById2);       findViewById2=null;       z2=true;     }     if (findViewById2 == null) {       frameLayout.addView(view,new RelativeLayout.LayoutParams(-1,-1));     }     if (relativeLayout.findViewById(e) != null) {       relativeLayout.removeView(frameLayout);     }     RelativeLayout.LayoutParams layoutParams2=(RelativeLayout.LayoutParams)frameLayout.getLayoutParams();     boolean z3=(layoutParams2 == null || !(layoutParams2.width == layoutParams.width || layoutParams2.height == layoutParams.height)) ? true : z2;     frameLayout.setLayoutParams(layoutParams);     frameLayout.measure(layoutParams.width,layoutParams.height);     frameLayout.requestLayout();     frameLayout.postInvalidate();     if (!n().a()) {       b(view);     }     relativeLayout.addView(frameLayout);     relativeLayout.bringChildToFront(frameLayout);     relativeLayout.requestLayout();     relativeLayout.postInvalidate();     view.requestFocus();     if (this.A.findViewById(d) == null) {       this.A.addView(relativeLayout,new RelativeLayout.LayoutParams(-1,-1));       this.A.setBackgroundColor(0);       return z3;     }     return z3;   } public class d implements Runnable {     d(){     }     @Override public void run(){       ImageButton imageButton;       View rootView=ad.this.e().getRootView();       if (rootView != null && (imageButton=(ImageButton)rootView.findViewById(R.drawable.ic_menu_close_clear_cancel)) != null) {         int[] iArr=new int[2];         ad.this.e().getLocationInWindow(iArr);         int a=ad.this.a(50);         RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(a,a);         layoutParams.leftMargin=(iArr[0] + ad.this.e().getLayoutParams().width) - a;         layoutParams.topMargin=iArr[1];         imageButton.setLayoutParams(layoutParams);         imageButton.requestLayout();       }     }   }   private View d(  Context context){     View view=new View(context);     view.setId(f);     view.setBackgroundColor(Color.argb(176,0,0,0));     view.setOnTouchListener(new c());     return view;   } public class c implements View.OnTouchListener {     c(){     }     @Override public boolean onTouch(    View view,    MotionEvent motionEvent){       return true;     }   }   private void a(  boolean z,  int i2,  boolean z2){     FrameLayout frameLayout=(FrameLayout)this.A.findViewById(e);     if (frameLayout != null) {       d();       if (this.E == null) {         this.E=new ImageButton(f());         this.E.setId(R.drawable.ic_menu_close_clear_cancel);         this.E.setContentDescription(""ê´‘ê³  ë‹«ê¸°"");       }       this.E.setBackgroundDrawable(null);       this.E.setOnClickListener(new b());       if (z) {         if (AdCommon.getCloseBtnImg() == null) {           this.E.setImageResource(R.drawable.ic_menu_close_clear_cancel);         }  else {           this.E.setImageBitmap(AdCommon.getCloseBtnImg());         }       }  else {         this.E.setImageBitmap(null);       }       int a2=a(50);       int a3=a(11);       FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(a2,a2);       if (z2) {         RelativeLayout.LayoutParams layoutParams2=(RelativeLayout.LayoutParams)frameLayout.getLayoutParams(); switch (i2) { case 17:           layoutParams.leftMargin=(layoutParams2.width - a2) / 2;         layoutParams.topMargin=(layoutParams2.height - a2) / 2;       break; case 49:     layoutParams.leftMargin=(layoutParams2.width - a2) / 2;   layoutParams.topMargin=a3; break; case 51: layoutParams.leftMargin=a3; layoutParams.topMargin=a3; break; case 53: layoutParams.leftMargin=(layoutParams2.width - a2) - a3; layoutParams.topMargin=a3; break; case 81: layoutParams.leftMargin=(layoutParams2.width - a2) / 2; layoutParams.topMargin=(frameLayout.getHeight() - a2) - a3; break; case 83: layoutParams.leftMargin=a3; layoutParams.topMargin=(layoutParams2.height - a2) - a3; break; case 85: layoutParams.leftMargin=layoutParams2.width - a2; layoutParams.topMargin=layoutParams2.height - a2; break; } layoutParams.gravity=48; }  else { layoutParams.gravity=i2; } frameLayout.addView(this.E,layoutParams); } } public class b implements View.OnClickListener { b(){ } @Override public void onClick(View view){ ad.this.e().getViewController().p(); } } private void d(){ View findViewById; if (this.A != null) { try { FrameLayout frameLayout=(FrameLayout)this.A.findViewById(e); if (frameLayout != null && (findViewById=frameLayout.findViewById(R.drawable.ic_menu_close_clear_cancel)) != null) { frameLayout.removeView(findViewById); } }  catch (Exception e2) { } } } public class a implements View.OnKeyListener { net.daum.adam.publisher.impl.a.a a=null; a(){ } @Override public synchronized boolean onKey(View view,int i,KeyEvent keyEvent){ boolean z=true; synchronized (this) { if (view != null) { if (view instanceof net.daum.adam.publisher.impl.a.a) { this.a=(net.daum.adam.publisher.impl.a.a)view; } if (i == 4) { try { if (ad.this.e().getViewController().j().e() || ad.this.e().getViewController().j().c()) { if (this.a.getProgress() != 100) { this.a.stopLoading(); ad.this.e().getViewController().p(); }  else { ad.this.e().getViewController().p(); } } }  catch (Exception e) { } }  else { z=false; } } } return z; } } private void b(View view){ view.setOnKeyListener(new a()); } public synchronized void z(){ try { if (this.A != null) { FrameLayout frameLayout=(FrameLayout)this.A.findViewById(e); RelativeLayout relativeLayout=(RelativeLayout)this.A.findViewById(d); FrameLayout frameLayout2=(FrameLayout)this.A.findViewById(c); net.daum.adam.publisher.impl.a.a aVar=(net.daum.adam.publisher.impl.a.a)this.A.findViewById(g); d(); if (frameLayout != null) { frameLayout.removeAllViews(); } if (relativeLayout != null) { relativeLayout.removeAllViews(); if (!aVar.equals(e())) { aVar.destroy(); } this.A.removeView(relativeLayout); } this.A=null; if (frameLayout2 != null) { ViewGroup viewGroup=(ViewGroup)frameLayout2.getParent(); ViewGroup.LayoutParams layoutParams=viewGroup.getLayoutParams(); viewGroup.removeView(frameLayout2); viewGroup.addView(e(),this.y,new ViewGroup.LayoutParams(-1,-1)); layoutParams.height=this.z; e().requestLayout(); e().invalidate(); viewGroup.requestLayout(); viewGroup.invalidate(); } } }  catch (Exception e2) { } } public synchronized void c(boolean z){ try { Activity activity=(Activity)f(); if (z) { int orientation=e().getOrientation(); switch (orientation) { case -90: orientation=8; break; case 0: orientation=1; break; case 90: orientation=0; break; case 180: orientation=9; break; } if (this.p.equalsIgnoreCase(""portrait"")) { if (orientation == 0 || orientation == 8) { orientation=1; } }  else if (this.p.equalsIgnoreCase(""landscape"") && (orientation == 1 || orientation == 9)) { orientation=0; } activity.setRequestedOrientation(orientation); if (this.o) { activity.setRequestedOrientation(-1); } }  else { activity.setRequestedOrientation(this.s); } if (this.G != null) { this.G.onOrientationChanged(e().getOrientation()); } }  catch (ClassCastException e2) { AdCommon.debug(n,""Unable to modify device orientation."",e2); } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\ae.code","class ae implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       adVar.e(jSONObject);     }  catch (    Exception e) {       adVar.a(e.getMessage(),""createCalendarEvent"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\af.code","class af implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       Bundle bundle=new Bundle();       Iterator<String> keys=jSONObject.keys();       while (keys.hasNext()) {         String next=keys.next();         bundle.putString(next,jSONObject.getString(next));       }       String string=bundle.getString(""uri"");       if (string == null || !URLUtil.isValidUrl(string)) {         adVar.a(""Invalid picture url"",""storePicture"");       }  else {         adVar.a(string,bundle);       }     }  catch (    JSONException e) {       adVar.a(e.getMessage(),""storePicture"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\b.code","public interface b {   void onError(  String str,  String str2); } class b extends Thread {   final a a;   b(  String str,  a aVar){     super(str);     this.a=aVar;   }   @Override public void run(){     long currentTimeMillis=System.currentTimeMillis();     try {       AdCommon.debug(a.a,""++++++++++++++++++++ Contents Loading ++++++++++++++++++++"");       Thread.sleep(h.a);     }  catch (    InterruptedException e) {       AdCommon.debug(a.a,""++++++++++++++++++++ Thread has been interrupted ++++++++++++++++++++"");     }     if (Thread.interrupted()) {       AdCommon.debug(a.a,"""" + (System.currentTimeMillis() - currentTimeMillis) + "" Millis"");       return;     } synchronized (h.this.b) {       AdCommon.debug(a.a,"""" + (System.currentTimeMillis() - currentTimeMillis) + "" Millis"");       if (h.this.c.get()) {         AdCommon.debug(a.a,""++++++++++++++++++++ Thread timeout ++++++++++++++++++++"");         h.this.b();         new Handler(Looper.getMainLooper()).post(new RunnableC0008a());       }  else {         AdCommon.debug(a.a,""++++++++++++++++++++ Success Loading ++++++++++++++++++++"");       }     }   } class RunnableC0008a implements Runnable {     RunnableC0008a(){     }     @Override public void run(){       if (b.this.a.getOnErrorListener() != null) {         b.this.a.getOnErrorListener().onError(""Content Loading"",""Timeout"");       }     }   } } public class b implements View.OnClickListener {   b(){   }   @Override public void onClick(  View view){     ad.this.e().getViewController().p();   } } public class b extends a {   static final String a=b.class.getSimpleName();   private boolean e;   private f f;   private AtomicBoolean g;   private f.a h; static {     new net.daum.adam.publisher.impl.c.a(new x(),null).a(AdCommon.MRAID_JS_URL);     new net.daum.adam.publisher.impl.c.a(new w(),null).c(AdCommon.CLOSE_BUTTON_URL);   }   public b(  Context context){     this(context,false);   }   public b(  Context context,  boolean z){     super(context,z);     this.e=false;     this.f=null;     this.g=new AtomicBoolean(false);     this.h=new p(this);   }   @Override public synchronized void a(  String str){     try {       if (a()) {         super.a(str);       }     }  catch (    Exception e) {       AdCommon.debug(a,e.toString());     }   }   @Override public s getViewController(){     return (s)this.d;   }   @Override protected void a(  boolean z){     this.d=new s(this,z ? d.c.INTERSTITIAL : d.c.INLINE);   }   @Override public void destroy(){     super.destroy();     if (this.f != null) {       this.f.a();     }     this.f=null;     this.g=null;   }   @Override protected void a(  URI uri){     String host=uri.getHost();     List<NameValuePair> parse=URLEncodedUtils.parse(uri,""UTF-8"");     JSONObject jSONObject=new JSONObject();     try {       for (      NameValuePair nameValuePair : parse) {         jSONObject.put(nameValuePair.getName(),nameValuePair.getValue());       }     }  catch (    JSONException e) {     }     if (host != null) {       v.a(host,jSONObject,getViewController());     }   }   public boolean a(){     return this.e;   }   public void setMraidMode(  boolean z){     this.e=z;   }   public boolean b(){     if (this.f == null) {       this.f=new f(getContext());       this.f.b(c.b.c(getContext()));     }     if (this.g.get()) {       this.f.a();       return false;     }     this.g.set(true);     try {       this.f.a(this.h);     }  catch (    Exception e) {       this.g.set(false);       AdCommon.debug(a,""[runSpeechRecognizer] "" + e.toString());     }     return this.g.get();   }   public void a(  String[] strArr){     ArrayList arrayList=new ArrayList();     Collections.addAll(arrayList,strArr);     a(""window.mraidbridge.fireVoiceEvent("" + new JSONArray((Collection)arrayList) + "");"");   } } private static class b implements InvocationHandler {   final a a;   public b(  a aVar){     this.a=aVar;   }   @Override public Object invoke(  Object obj,  Method method,  Object[] objArr) throws Throwable {     if (method.getName().equals(""onInactive"")) {       this.a.a();     }  else     if (!method.getName().equals(""onEnergyChanged"") && !method.getName().equals(""onEPD"")) {       if (method.getName().equals(""onReady"")) {         this.a.a((String)objArr[0]);       }  else       if (method.getName().equals(""onPartialResult"")) {         this.a.b((String)objArr[0]);       }  else       if (method.getName().equals(""onFinalResult"")) {         this.a.a((String[])objArr[0]);       }  else       if (method.getName().equals(""onError"")) {         this.a.a(((Integer)objArr[0]).intValue());       }     }     return obj;   } } class b implements View.OnClickListener {   final Bitmap a;   b(  Bitmap bitmap){     this.a=bitmap;   }   @Override public void onClick(  View view){     if (MediaStore.Images.Media.insertImage(r.this.o.getContentResolver(),this.a,(String)null,(String)null) != null) {       Toast.makeText(r.this.o,r.this.f,0).show();     }     r.this.q.cancel();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\c.code","public interface c {   void onReady(); } public class c implements View.OnTouchListener {   c(){   }   @Override public boolean onTouch(  View view,  MotionEvent motionEvent){     return true;   } } class c {   private static final String a=c.class.getSimpleName();   private static final Map<String,a> b=new HashMap(); protected interface a {     void a(    JSONObject jSONObject,    ad adVar);   } static {     b.put(""close"",new k());     b.put(""setResizeProperties"",new l());     b.put(""resize"",new m());     b.put(""expand"",new n());     b.put(""setOrientationProperties"",new g());     b.put(""setExpandProperties"",new h());     b.put(""useCustomClose"",new i());     b.put(""open"",new j());     b.put(""playVideo"",new e());     b.put(""createCalendarEvent"",new ae());     b.put(""storePicture"",new af());   }   public static void a(  String str,  JSONObject jSONObject,  ad adVar){     if (adVar == null) {       AdCommon.debug(a,""Cannot execute command. `viewController` doesn't exists."");       return;     }     a aVar=b.get(str);     if (aVar == null) {       adVar.a(""Unsupported Command"",str);     }  else {       aVar.a(jSONObject,adVar);     }     adVar.c(str);   } } class c implements DialogInterface.OnClickListener {   c(){   }   @Override public void onClick(  DialogInterface dialogInterface,  int i){     dialogInterface.cancel();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\d.code","public interface d {   void a(  MotionEvent motionEvent); } public class d implements Runnable {   d(){   }   @Override public void run(){     ImageButton imageButton;     View rootView=ad.this.e().getRootView();     if (rootView != null && (imageButton=(ImageButton)rootView.findViewById(R.drawable.ic_menu_close_clear_cancel)) != null) {       int[] iArr=new int[2];       ad.this.e().getLocationInWindow(iArr);       int a=ad.this.a(50);       RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(a,a);       layoutParams.leftMargin=(iArr[0] + ad.this.e().getLayoutParams().width) - a;       layoutParams.topMargin=iArr[1];       imageButton.setLayoutParams(layoutParams);       imageButton.requestLayout();     }   } } public interface d {   public static final String q=""2.0"";   void a(  int i,  int i2);   void a(  String str,  String str2);   void a(  boolean z) throws JSONException ;   void b(  JSONObject jSONObject);   void b(  boolean z);   void c(  b bVar) throws JSONException ;   void c(  JSONObject jSONObject);   void d(  String str);   void d(  JSONObject jSONObject);   void e(  JSONObject jSONObject);   boolean e(  String str);   void f(  String str);   void g(  String str);   String i();   b j();   void k();   c n();   boolean o();   void p();   JSONObject q();   void r() throws JSONException ;   JSONObject t();   void u();   JSONObject v();   JSONObject w();   JSONObject x();   JSONObject y();   public enum b {  LOADING,   DEFAULT,   EXPANDED,   RESIZED,   HIDDEN;   public boolean a(){     return compareTo(LOADING) == 0;   }   public boolean b(){     return compareTo(DEFAULT) == 0;   }   public boolean c(){     return compareTo(RESIZED) == 0;   }   public boolean d(){     return compareTo(HIDDEN) == 0;   }   public boolean e(){     return compareTo(EXPANDED) == 0;   }   @Override public String toString(){     return name().toLowerCase();   } }   public enum c {  INLINE,   INTERSTITIAL;   @Override public String toString(){     return name().toLowerCase();   }   public boolean a(){     return compareTo(INTERSTITIAL) == 0;   } }   public enum a {  sms,   tel,   calendar,   storePicture,   inlineVideo;   public static a a(  String str){     a aVar=null;     if (str.compareTo(sms.toString()) == 0) {       aVar=sms;     }     if (str.compareTo(tel.toString()) == 0) {       aVar=tel;     }     if (str.compareTo(calendar.toString()) == 0) {       aVar=calendar;     }     if (str.compareTo(storePicture.toString()) == 0) {       aVar=storePicture;     }     if (str.compareTo(inlineVideo.toString()) == 0) {       return inlineVideo;     }     return aVar;   } } } class d implements View.OnClickListener {   final String a;   d(  String str){     this.a=str;   }   @Override public void onClick(  View view){     r.e(r.this);     r.this.a(0);     new net.daum.adam.publisher.impl.c.a(r.this).c(this.a);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\DialogInterfaceOnCancelListenerC0007a.code","class DialogInterfaceOnCancelListenerC0007a implements DialogInterface.OnCancelListener {   final a a;   DialogInterfaceOnCancelListenerC0007a(  a aVar){     this.a=aVar;   }   @Override public void onCancel(  DialogInterface dialogInterface){     AdCommon.debug(a.a,""Close window before expandable ad loaded"");     try {       this.a.stopLoading();       this.a.getViewController().p();     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\e.code","public static class e {   private b a;   private l b;   private p c;   private s d;   private c e;   private q f;   private f g;   private r h;   e(){   } } class e implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       adVar.g(jSONObject.getString(""uri""));     }  catch (    Exception e) {       adVar.a(e.getMessage(),""playVideo"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\f.code","public interface f {   void a(  boolean z); } public class f {   private static final String a=f.class.getSimpleName();   private static final String b=""com.dialoid.speech.recognition.SpeechRecognizer"";   private static final String c=""com.dialoid.speech.recognition.SpeechRecognizer$Listener"";   private Object d; public interface a {     void a();     void a(    int i);     void a(    String str);     void a(    String[] strArr);     void b(    String str);   }   public f(  Context context){     this.d=null;     if (context == null) {       throw new NullPointerException(""Context cannot be null!"");     }     try {       this.d=Class.forName(b).getConstructor(Context.class).newInstance(context);     }  catch (    Exception e) {     }   }   public void a(  String str){     if (this.d != null) {       try {         Class.forName(b).getMethod(""setUserDict"",String.class).invoke(this.d,str);       }  catch (      Exception e) {         AdCommon.debug(a,e.toString(),e);       }     }   }   public void b(  String str){     if (this.d != null) {       try {         Method method=Class.forName(b).getMethod(""setUUID"",String.class);         AdCommon.debug(a,method.toString());         method.invoke(this.d,str);       }  catch (      Exception e) {         AdCommon.debug(a,e.toString(),e);       }     }   }   public void a(  a aVar){     Class<?> cls;     if (this.d != null) {       try {         Class<?> cls2=Class.forName(b);         if (cls2 != null) {           Class<?>[] declaredClasses=cls2.getDeclaredClasses();           int length=declaredClasses.length;           int i=0;           while (true) {             if (i >= length) {               cls=null;               break;             }             cls=declaredClasses[i];             if (cls.isInterface() && cls.getName().equalsIgnoreCase(c)) {               break;             }  else {               i++;             }           }           if (cls != null) {             Class<?>[] clsArr={cls};             Method method=cls2.getMethod(""setListener"",clsArr);             Object newProxyInstance=Proxy.newProxyInstance(cls.getClassLoader(),clsArr,new b(aVar));             if (newProxyInstance != null) {               method.invoke(this.d,newProxyInstance);             }           }           cls2.getMethod(""startListening"",(Class[])null).invoke(this.d,(Object[])null);         }       }  catch (      Exception e) {         AdCommon.debug(a,e.toString(),e);       }     }   }   public void a(){     if (this.d != null) {       try {         Class.forName(b).getMethod(""cancel"",(Class[])null).invoke(this.d,(Object[])null);       }  catch (      Exception e) {         AdCommon.debug(a,e.toString(),e);       }     }   } private static class b implements InvocationHandler {     final a a;     public b(    a aVar){       this.a=aVar;     }     @Override public Object invoke(    Object obj,    Method method,    Object[] objArr) throws Throwable {       if (method.getName().equals(""onInactive"")) {         this.a.a();       }  else       if (!method.getName().equals(""onEnergyChanged"") && !method.getName().equals(""onEPD"")) {         if (method.getName().equals(""onReady"")) {           this.a.a((String)objArr[0]);         }  else         if (method.getName().equals(""onPartialResult"")) {           this.a.b((String)objArr[0]);         }  else         if (method.getName().equals(""onFinalResult"")) {           this.a.a((String[])objArr[0]);         }  else         if (method.getName().equals(""onError"")) {           this.a.a(((Integer)objArr[0]).intValue());         }       }       return obj;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\g.code","public interface g {   boolean onSingleTapUp(  MotionEvent motionEvent); } class g implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     String str;     str=c.a;     AdCommon.debug(str,""[setOrientationProperties]"");     adVar.b(jSONObject);     adVar.c(true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\h.code","public class h extends WebViewClient {   protected static final long a=30000;   AtomicBoolean c;   Thread d=null;   ProgressDialog e=null;   final Object b=new Object();   public h(){     this.c=null;     this.c=new AtomicBoolean(true);   }   @Override public void onPageStarted(  WebView webView,  String str,  Bitmap bitmap){     a aVar;     if (webView instanceof a) {       aVar=(a)webView;     }  else {       aVar=null;     }     try {       a();     }  catch (    Exception e) {       AdCommon.debug(a.a,e.toString(),e);     }     if (aVar != null) {       this.d=new b(""CheckIfContentDelayLoading"",aVar);       int priority=this.d.getPriority();       try {         this.d.setPriority(net.daum.adam.publisher.impl.a.a.get());       }  catch (      Exception e2) {         this.d.setPriority(priority);       }       this.d.start();       if (a(aVar)) {         this.e=ProgressDialog.show(aVar.getContext(),"""",""íŽ˜ì�´ì§€ë¥¼ ë¶ˆëŸ¬ì˜¤ê³  ìžˆìŠµë‹ˆë‹¤.\nìž ì‹œë§Œ ê¸°ë‹¤ë ¤ì£¼ì„¸ìš”."",false);         this.e.setCancelable(true);         this.e.setOnCancelListener(new DialogInterfaceOnCancelListenerC0007a(aVar));       }       super.onPageStarted(webView,str,bitmap);     }   } class b extends Thread {     final a a;     b(    String str,    a aVar){       super(str);       this.a=aVar;     }     @Override public void run(){       long currentTimeMillis=System.currentTimeMillis();       try {         AdCommon.debug(a.a,""++++++++++++++++++++ Contents Loading ++++++++++++++++++++"");         Thread.sleep(h.a);       }  catch (      InterruptedException e) {         AdCommon.debug(a.a,""++++++++++++++++++++ Thread has been interrupted ++++++++++++++++++++"");       }       if (Thread.interrupted()) {         AdCommon.debug(a.a,"""" + (System.currentTimeMillis() - currentTimeMillis) + "" Millis"");         return;       } synchronized (h.this.b) {         AdCommon.debug(a.a,"""" + (System.currentTimeMillis() - currentTimeMillis) + "" Millis"");         if (h.this.c.get()) {           AdCommon.debug(a.a,""++++++++++++++++++++ Thread timeout ++++++++++++++++++++"");           h.this.b();           new Handler(Looper.getMainLooper()).post(new RunnableC0008a());         }  else {           AdCommon.debug(a.a,""++++++++++++++++++++ Success Loading ++++++++++++++++++++"");         }       }     } class RunnableC0008a implements Runnable {       RunnableC0008a(){       }       @Override public void run(){         if (b.this.a.getOnErrorListener() != null) {           b.this.a.getOnErrorListener().onError(""Content Loading"",""Timeout"");         }       }     }   } class DialogInterfaceOnCancelListenerC0007a implements DialogInterface.OnCancelListener {     final a a;     DialogInterfaceOnCancelListenerC0007a(    a aVar){       this.a=aVar;     }     @Override public void onCancel(    DialogInterface dialogInterface){       AdCommon.debug(a.a,""Close window before expandable ad loaded"");       try {         this.a.stopLoading();         this.a.getViewController().p();       }  catch (      Exception e) {       }     }   }   @Override public void onReceivedError(  WebView webView,  int i,  String str,  String str2){     a aVar;     super.onReceivedError(webView,i,str,str2);     this.c.set(false);     if (webView instanceof a) {       aVar=(a)webView;     }  else {       aVar=null;     }     a();     try {       if (a(aVar)) {         b();       }     }  catch (    Exception e) {       AdCommon.debug(a.a,e.toString(),e);     }     AdCommon.debug(a.a,""Error: "" + str);   }   @Override public boolean shouldOverrideUrlLoading(  WebView webView,  String str){     a aVar;     String scheme=Uri.parse(str).getScheme();     AdCommon.debug(a.a,""[shouldOverrideUrlLoading] "" + str);     if (!(webView instanceof a)) {       aVar=null;     }  else {       aVar=(a)webView;     }     if (!scheme.equals(""mraid"")) {       return aVar.b(str);     }     aVar.a(URI.create(str));     return true;   }   @Override public void onPageFinished(  WebView webView,  String str){     a aVar;     AdCommon.debug(a.a,""[onPageFinished] "" + str);     this.c.set(false);     if (webView instanceof a) {       aVar=(a)webView;     }  else {       aVar=null;     }     if (aVar != null) {       webView.requestLayout();       webView.invalidate();       a();       try {         if (a(aVar)) {           b();         }       }  catch (      Exception e) {         AdCommon.debug(a.a,e.toString(),e);       }       a.this.setPageLoaded(true);       if (a.this.getOnReadyListener() != null) {         a.this.getOnReadyListener().onReady();       }     }   }   @Override public void onLoadResource(  WebView webView,  String str){     AdCommon.debug(a.a,""Loaded resource: "" + str);     super.onLoadResource(webView,str);   }   private void a(){     if (this.d != null && this.d.isAlive()) {       this.d.interrupt();       this.d=null;     }   }   public void b(){     if (this.e != null && this.e.isShowing()) {       this.e.dismiss();     }   }   private boolean a(  a aVar){     return (aVar == null || aVar.getViewController() == null || (!aVar.getViewController().h().e() && !aVar.getViewController().n().a())) ? false : true;   } } class h implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     String str;     str=c.a;     AdCommon.debug(str,""[setExpandProperties]"");     adVar.c(jSONObject);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\i.code","public interface i {   boolean a(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2); } class i implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     String str;     str=c.a;     AdCommon.debug(str,""[usecustomclose]"");     try {       adVar.b(jSONObject.getBoolean(""useCustomClose""));     }  catch (    Exception e) {       adVar.a(e.getMessage(),""useCustomClose"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\InterfaceC0006a.code","public interface InterfaceC0006a {   boolean a(  MotionEvent motionEvent); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\j.code","public interface j {   void onLongPress(  MotionEvent motionEvent); } class j implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       adVar.d(jSONObject.getString(""url""));     }  catch (    Exception e) {       adVar.a(e.getMessage(),""open"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\k.code","public interface k {   boolean a(  MotionEvent motionEvent,  MotionEvent motionEvent2,  float f,  float f2); } class k implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     adVar.p();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\l.code","public interface l {   void onExpand(); } class l implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     adVar.d(jSONObject);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\m.code","!org.eclipse.jdt.core.dom.TypeDeclaration@bbf543cclass m implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     adVar.d(jSONObject);     adVar.u();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\n.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1fea2bacclass n implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     adVar.c(jSONObject);     try {       adVar.r();     }  catch (    JSONException e) {     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\o.code","final class o {   static final String a=o.class.getSimpleName();   private static Boolean b=null;   private static Boolean c=null;   private static Boolean d=null;   private static Boolean e=null;   private static Boolean f=null;   private final Context g;   public o(  Context context){     this.g=context;   }   public static boolean a(  Context context,  Intent intent){     return context.getPackageManager().queryIntentActivities(intent,0).size() > 0;   }   public static boolean a(  View view){     try {       Object invoke=view.getClass().getMethod(""isHardwareAccelerated"",new Class[0]).invoke(view,new Object[0]);       if (invoke instanceof Boolean) {         return ((Boolean)invoke).booleanValue();       }       return false;     }  catch (    Exception e2) {       return false;     }   }   public boolean a(  d.a aVar){     boolean z=false;     try { switch (aVar) { case sms:         z=e();       break; case tel:     z=d();   break; case calendar: z=c(); break; case storePicture: z=b(); break; case inlineVideo: z=a(); break; } }  catch (Exception e2) { } return z; } private boolean a(){ Window window; if (f == null) { f=false; if (Build.VERSION.SDK_INT >= 16 && (this.g instanceof Activity)) { Activity activity=(Activity)this.g; if (a(activity.getWindow().getDecorView()) && (window=activity.getWindow()) != null && (window.getAttributes().flags & Constants.FLAG_HARDWARE_ACCELERATED) != 0) { f=true; } }  else { f=false; } } return f.booleanValue(); } private boolean b(){ if (e == null) { e=true; } return e.booleanValue(); } private boolean c(){ if (d == null) { d=Boolean.valueOf(this.g.checkCallingOrSelfPermission(""android.permission.WRITE_CALENDAR"") == 0 && this.g.checkCallingOrSelfPermission(""android.permission.READ_CALENDAR"") == 0); if (!d.booleanValue()) { Intent intent=new Intent(""android.intent.action.EDIT""); intent.setData(Uri.parse(""content://com.android.calendar"")); intent.setType(""vnd.android.cursor.item/event""); intent.putExtra(""hasAlarm"",1); d=Boolean.valueOf(a(this.g,intent)); } } return d.booleanValue(); } private boolean d(){ if (c == null) { c=Boolean.valueOf(this.g.checkCallingOrSelfPermission(""android.permission.CALL_PHONE"") == 0); if (!c.booleanValue()) { Intent intent=new Intent(""android.intent.action.DIAL""); intent.setData(Uri.parse(""tel:01011112222"")); c=Boolean.valueOf(a(this.g,intent)); } } return c.booleanValue(); } private boolean e(){ if (b == null) { b=Boolean.valueOf(this.g.checkCallingOrSelfPermission(""android.permission.SEND_SMS"") == 0); if (!b.booleanValue()) { Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""smsto:+82xxxxxxxx"")); intent.putExtra(""sms_body"",""HelloWorld""); b=Boolean.valueOf(a(this.g,intent)); } } return b.booleanValue(); } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\p.code","public interface p {   void onResize(); } public class p implements f.a {   final b a;   public p(  b bVar){     this.a=bVar;   }   @Override public void a(){     AtomicBoolean atomicBoolean;     atomicBoolean=this.a.g;     atomicBoolean.set(false);   }   @Override public void a(  String str){   }   @Override public void b(  String str){   } class a implements Runnable {     final String[] a;     a(    String[] strArr){       this.a=strArr;     }     @Override public void run(){       AtomicBoolean atomicBoolean;       p.this.a.a(this.a);       atomicBoolean=p.this.a.g;       atomicBoolean.set(false);     }   }   @Override public void a(  String[] strArr){     if (this.a.getHandler() != null) {       this.a.getHandler().post(new a(strArr));     }   }   @Override public void a(  int i){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\q.code","public interface q {   void a(); } !org.eclipse.jdt.core.dom.TypeDeclaration@1fd9e270"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\r.code","public interface r {   void onOpen(); } !org.eclipse.jdt.core.dom.TypeDeclaration@4b044ec9"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\RunnableC0008a.code","class RunnableC0008a implements Runnable {   RunnableC0008a(){   }   @Override public void run(){     if (b.this.a.getOnErrorListener() != null) {       b.this.a.getOnErrorListener().onError(""Content Loading"",""Timeout"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\s.code","public interface s {   void onClose(); } class s extends ad implements u {   private static final String r=s.class.getSimpleName();   public s(  b bVar){     super(bVar);   }   public s(  b bVar,  d.b bVar2){     super(bVar,bVar2);   }   public s(  b bVar,  d.c cVar){     super(bVar,cVar);   }   @Override public b e(){     return (b)super.e();   }   @Override public void b(){     e().a(""window.mraidbridge.setAdamProperties({'isApp':true, 'sdkType':'AA','sdkVersion':'2.2.1.0'});"");   }   @Override public void c(){     b();     super.c();   }   @Override public void a(  String str){     if (str == null) {       a(""ì˜¬ë°”ë¥¸ ì „í™”ë²ˆí˜¸ê°€ ì•„ë‹™ë‹ˆë‹¤."",""mraid.makeCall()"");       return;     }     try {       Intent intent=new Intent(""android.intent.action.DIAL"",Uri.parse(str));       intent.addFlags(268435456);       try {         PendingIntent.getActivity(f(),0,intent,0).send();       }  catch (      PendingIntent.CanceledException e) {         AdCommon.debug(r,e.toString());       }     }  catch (    ActivityNotFoundException e2) {       a(""ì „í™” ê¸°ëŠ¥ì�´ ì§€ì›�ë�˜ì§€ ì•ŠìŠµë‹ˆë‹¤."",""mraid.makeCall()"");     } catch (    Throwable th) {       a(""ì „í™” ê¸°ëŠ¥ì�„ ì‚¬ìš©í•  ìˆ˜ ì—†ìŠµë‹ˆë‹¤."",""mraid.makeCall()"");     }   }   @Override public void a(  JSONObject jSONObject){     if (!net.daum.adam.publisher.impl.c.c(f(),""smsto:+82xxxxxxxx"")) {       Toast.makeText(f(),""This device cannot handle SMS data."",0).show();       return;     }     if (!jSONObject.has(HTMLElementName.BODY) && !jSONObject.has(""recipient"")) {       Toast.makeText(f(),""Need more information to launch SMS application."",0).show();       return;     }     try {       Intent intent=new Intent(""android.intent.action.VIEW"");       intent.putExtra(HTMLElementName.ADDRESS,jSONObject.getString(""recipient""));       intent.putExtra(""sms_body"",jSONObject.getString(HTMLElementName.BODY));       intent.setType(""vnd.android-dir/mms-sms"");       intent.addFlags(268435456);       f().startActivity(intent);     }  catch (    Exception e) {     }   }   @Override public void d(){     try {       e().b();     }  catch (    Exception e) {       AdCommon.debug(r,""!!! "" + e.toString());     }   }   @Override protected a a(  Context context){     b bVar=new b(context);     bVar.setMraidMode(true);     return bVar;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\t.code","public final class t extends OrientationEventListener {   static final String a=t.class.getSimpleName();   private static t b=null;   private final List<View> c;   private final Display d;   private int e;   private t(  Context context){     super(context);     this.e=-1;     super.enable();     this.d=((WindowManager)context.getSystemService(""window"")).getDefaultDisplay();     this.c=new ArrayList();   }   public static t a(  Context context){     if (b == null) {       b=new t(context);     }     return b;   }   public synchronized void a(  View view){     if (this.c.isEmpty()) {       super.enable();     }     if (!this.c.contains(view)) {       this.c.add(view);     }   }   public synchronized void b(  View view){     this.c.remove(view);     if (this.c.isEmpty()) {       super.disable();     }   }   public void a(){     super.disable();     if (!this.c.isEmpty()) {       Iterator<View> it=this.c.iterator();       while (it.hasNext()) {         b(it.next());       }     }   }   @Override public void onOrientationChanged(  int i){     if (this.c == null) {       a();       return;     } synchronized (this) {       int orientation=this.d.getOrientation(); switch (orientation) { case 0:         orientation=0;       break; case 1:     orientation=90;   break; case 2: orientation=180; break; case 3: orientation=-90; break; } if (orientation != this.e) { this.e=orientation; for (View view : this.c) { if (view != null) { view.requestLayout(); view.postInvalidate(); view.postDelayed(new a(view),300L); } } } } } public class a implements Runnable { final View a; a(View view){ this.a=view; } @Override public void run(){ try { if ((this.a instanceof net.daum.adam.publisher.impl.a.a) && ((net.daum.adam.publisher.impl.a.a)this.a).getViewController().h().b()) { ((net.daum.adam.publisher.impl.a.a)this.a).getViewController().c(t.this.e); } }  catch (Exception e) { } } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\u.code","public interface u {   void a(  String str);   void a(  JSONObject jSONObject);   void b();   void d(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\v.code","final class v extends c {   private static final String a=v.class.getSimpleName();   private static final Map<String,c.a> b=new HashMap();   v(){   } static {     b.put(""makeCall"",new y());     b.put(""sendSMS"",new z());     b.put(""recognizeVoice"",new aa());   }   public static void a(  String str,  JSONObject jSONObject,  ad adVar){     if (adVar == null) {       AdCommon.debug(a,""Cannot execute command. `viewController` doesn't exists."");       return;     }     c.a aVar=b.get(str);     if (aVar == null) {       c.a(str,jSONObject,adVar);     }  else {       aVar.a(jSONObject,adVar);       adVar.c(str);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\w.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6f9aa360"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\x.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2249b6fa"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\y.code","class y implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       String string=jSONObject.getString(""number"");       if (TextUtils.isEmpty(string)) {         throw new Exception(""There is no number to call."");       }       StringBuilder sb=new StringBuilder(""tel:"");       if (adVar instanceof s) {         ((s)adVar).a(sb.append(string).toString());       }     }  catch (    Exception e) {       adVar.a(e.getMessage(),""makeCall"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.a\z.code","class z implements c.a {   @Override public void a(  JSONObject jSONObject,  ad adVar){     try {       if (adVar instanceof s) {         ((s)adVar).a(jSONObject);       }     }  catch (    Exception e) {       adVar.a(e.getMessage(),""sendSMS"");     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.b\a.code","public final class a {   public static final double a=127.0d;   public static final double b=38.0d;   private static final double c=6378137.0d;   private static final double d=0.0033528106647474805d;   private static final double e=1.0d;   private static final double f=500000.0d;   private static final double g=200000.0d;   public static double[] a(  double d2,  double d3){     double[] a2=a(a(d3,d2,c,d,f,g,e,38.0d,127.0d));     a2[0]=Math.round(a2[0] * 2.5d);     a2[1]=Math.round(a2[1] * 2.5d);     return a2;   }   private static double[] a(  double[] dArr){     double d2=dArr[0];     dArr[0]=dArr[1];     dArr[1]=d2;     return dArr;   }   private static double[] a(  double d2,  double d3,  double d4,  double d5,  double d6,  double d7,  double d8,  double d9,  double d10){     if (d5 > e) {       d5=e / d5;     }     double atan=Math.atan(e) / 45.0d;     double d11=d2 * atan;     double d12=d9 * atan;     double d13=e / d5;     double d14=((d13 - e) * d4) / d13;     double pow=(Math.pow(d4,2.0d) - Math.pow(d14,2.0d)) / Math.pow(d4,2.0d);     double pow2=(Math.pow(d4,2.0d) - Math.pow(d14,2.0d)) / Math.pow(d14,2.0d);     double d15=(d4 - d14) / (d14 + d4);     double pow3=((e - d15) + ((5.0d * (Math.pow(d15,2.0d) - Math.pow(d15,3.0d))) / 4.0d) + ((81.0d * (Math.pow(d15,4.0d) - Math.pow(d15,5.0d))) / 64.0d)) * d4;     double pow4=((3.0d * d4) * (((d15 - Math.pow(d15,2.0d)) + ((7.0d * (Math.pow(d15,3.0d) - Math.pow(d15,4.0d))) / 8.0d)) + ((55.0d * Math.pow(d15,5.0d)) / 64.0d))) / 2.0d;     double pow5=((15.0d * d4) * ((Math.pow(d15,2.0d) - Math.pow(d15,3.0d)) + ((3.0d * (Math.pow(d15,4.0d) - Math.pow(d15,5.0d))) / 4.0d))) / 16.0d;     double pow6=((35.0d * d4) * ((Math.pow(d15,3.0d) - Math.pow(d15,4.0d)) + ((11.0d * Math.pow(d15,5.0d)) / 16.0d))) / 48.0d;     double pow7=((Math.pow(d15,4.0d) - Math.pow(d15,5.0d)) * (315.0d * d4)) / 512.0d;     double d16=(d3 * atan) - (atan * d10);     double sin=(((((pow3 * d12) - (Math.sin(2.0d * d12) * pow4)) + (Math.sin(4.0d * d12) * pow5)) - (Math.sin(6.0d * d12) * pow6)) + (Math.sin(d12 * 8.0d) * pow7)) * d8;     double sin2=Math.sin(d11);     double cos=Math.cos(d11);     double d17=sin2 / cos;     double pow8=pow2 * Math.pow(cos,2.0d);     double sqrt=d4 / Math.sqrt(e - (pow * Math.pow(Math.sin(d11),2.0d)));     double sin3=(Math.sin(d11 * 8.0d) * pow7) + ((((pow3 * d11) - (pow4 * Math.sin(2.0d * d11))) + (Math.sin(4.0d * d11) * pow5)) - (Math.sin(6.0d * d11) * pow6));     double d18=(((sqrt * sin2) * cos) * d8) / 2.0d;     double pow9=((((sqrt * sin2) * Math.pow(cos,3.0d)) * d8) * (((5.0d - Math.pow(d17,2.0d)) + (9.0d * pow8)) + (4.0d * Math.pow(pow8,2.0d)))) / 24.0d;     double pow10=((((sqrt * sin2) * Math.pow(cos,5.0d)) * d8) * ((((((((((61.0d - (58.0d * Math.pow(d17,2.0d))) + Math.pow(d17,4.0d)) + (270.0d * pow8)) - ((330.0d * Math.pow(d17,2.0d)) * pow8)) + (445.0d * Math.pow(pow8,2.0d))) + (324.0d * Math.pow(pow8,3.0d))) - ((680.0d * Math.pow(d17,2.0d)) * Math.pow(pow8,2.0d))) + (88.0d * Math.pow(pow8,4.0d))) - ((600.0d * Math.pow(d17,2.0d)) * Math.pow(pow8,3.0d))) - ((192.0d * Math.pow(d17,2.0d)) * Math.pow(pow8,4.0d)))) / 720.0d;     double pow11=((((sin2 * sqrt) * Math.pow(cos,7.0d)) * d8) * (((1385.0d - (3111.0d * Math.pow(d17,2.0d))) + (543.0d * Math.pow(d17,4.0d))) - Math.pow(d17,6.0d))) / 40320.0d;     double pow12=(((Math.pow(cos,3.0d) * sqrt) * d8) * ((e - Math.pow(d17,2.0d)) + pow8)) / 6.0d;     double pow13=(((Math.pow(cos,5.0d) * sqrt) * d8) * ((((((((5.0d - (18.0d * Math.pow(d17,2.0d))) + Math.pow(d17,4.0d)) + (14.0d * pow8)) - ((58.0d * Math.pow(d17,2.0d)) * pow8)) + (13.0d * Math.pow(pow8,2.0d))) + (4.0d * Math.pow(pow8,3.0d))) - ((64.0d * Math.pow(d17,2.0d)) * Math.pow(pow8,2.0d))) - (Math.pow(pow8,3.0d) * (25.0d * Math.pow(d17,2.0d))))) / 120.0d;     return new double[]{((((((sin3 * d8) + (d18 * Math.pow(d16,2.0d))) + (Math.pow(d16,4.0d) * pow9)) + (Math.pow(d16,6.0d) * pow10)) + (pow11 * Math.pow(d16,8.0d))) - sin) + d6,(Math.pow(d16,7.0d) * ((((sqrt * Math.pow(cos,7.0d)) * d8) * (((61.0d - (479.0d * Math.pow(d17,2.0d))) + (179.0d * Math.pow(d17,4.0d))) - Math.pow(d17,6.0d))) / 5040.0d)) + (sqrt * cos * d8* d16) + d7+ (pow12 * Math.pow(d16,3.0d))+ (Math.pow(d16,5.0d) * pow13)};   } } public static class a extends FilterOutputStream {   private final boolean a;   private int b;   private byte[] c;   private final int d;   private int e;   private final boolean f;   private final byte[] g;   private boolean h;   private final int i;   private final byte[] j;   public a(  OutputStream outputStream){     this(outputStream,1);   }   public a(  OutputStream outputStream,  int i){     super(outputStream);     this.f=(i & 8) != 0;     this.a=(i & 1) != 0;     this.d=this.a ? 3 : 4;     this.c=new byte[this.d];     this.b=0;     this.e=0;     this.h=b.j;     this.g=new byte[4];     this.i=i;     this.j=b.c(i);   }   @Override public void write(  int i) throws IOException {     if (this.h) {       this.out.write(i);       return;     }     if (this.a) {       byte[] bArr=this.c;       int i2=this.b;       this.b=i2 + 1;       bArr[i2]=(byte)i;       if (this.b >= this.d) {         this.out.write(b.b(this.g,this.c,this.d,this.i));         this.e+=4;         if (this.f && this.e >= b.k) {           this.out.write(10);           this.e=0;         }         this.b=0;         return;       }       return;     }     if (this.j[i & 127] > -5) {       byte[] bArr2=this.c;       int i3=this.b;       this.b=i3 + 1;       bArr2[i3]=(byte)i;       if (this.b >= this.d) {         this.out.write(this.g,0,b.b(this.c,0,this.g,0,this.i));         this.b=0;         return;       }       return;     }     if (this.j[i & 127] != -5) {       throw new IOException(""Invalid character in Base64 data."");     }   }   @Override public void write(  byte[] bArr,  int i,  int i2) throws IOException {     if (this.h) {       this.out.write(bArr,i,i2);       return;     }     for (int i3=0; i3 < i2; i3++) {       write(bArr[i + i3]);     }   }   public void a() throws IOException {     if (this.b > 0) {       if (this.a) {         this.out.write(b.b(this.g,this.c,this.b,this.i));         this.b=0;         return;       }       throw new IOException(""Base64 input not properly padded."");     }   }   @Override public void close() throws IOException {     a();     super.close();     this.c=null;     this.out=null;   }   public void b() throws IOException {     a();     this.h=true;   }   public void c(){     this.h=b.j;   } } class a implements DialogInterface.OnCancelListener {   a(){   }   @Override public void onCancel(  DialogInterface dialogInterface){     c.a().b();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.b\b.code","public final class b {   public static final int a=0;   public static final int b=0;   public static final int c=1;   public static final int d=0;   public static final int e=2;   public static final int f=4;   public static final int g=8;   public static final int h=16;   public static final int i=32;   static final boolean j;   private static final int k=76;   private static final byte l=61;   private static final byte m=10;   private static final String n=""US-ASCII"";   private static final byte o=-5;   private static final byte p=-1;   private static final byte[] q;   private static final byte[] r;   private static final byte[] s;   private static final byte[] t;   private static final byte[] u;   private static final byte[] v; static {     j=!b.class.desiredAssertionStatus() ? true : j;     q=new byte[]{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47};     r=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,o,o,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,62,-9,-9,-9,63,52,53,54,55,56,57,58,59,60,l,-9,-9,-9,p,-9,-9,-9,0,1,2,3,4,5,6,7,8,9,m,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-9,-9,-9,-9,-9,-9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};     s=new byte[]{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,45,95};     t=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,o,o,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,62,-9,-9,52,53,54,55,56,57,58,59,60,l,-9,-9,-9,p,-9,-9,-9,0,1,2,3,4,5,6,7,8,9,m,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-9,-9,-9,-9,63,-9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};     u=new byte[]{45,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122};     v=new byte[]{-9,-9,-9,-9,-9,-9,-9,-9,-9,o,o,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,o,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,0,-9,-9,1,2,3,4,5,6,7,8,9,m,-9,-9,-9,p,-9,-9,-9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,-9,-9,-9,-9,37,-9,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,l,62,63,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9};   }   private static byte[] b(  int i2){     if ((i2 & 16) == 16) {       return s;     }     if ((i2 & 32) == 32) {       return u;     }     return q;   }   public static byte[] c(  int i2){     if ((i2 & 16) == 16) {       return t;     }     if ((i2 & 32) == 32) {       return v;     }     return r;   }   private b(){   }   public static byte[] b(  byte[] bArr,  byte[] bArr2,  int i2,  int i3){     b(bArr2,0,i2,bArr,0,i3);     return bArr;   }   public static byte[] b(  byte[] r5,  int r6,  int r7,  byte[] r8,  int r9,  int r10){     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.b.b.b(byte[], int, int, byte[], int, int):byte[]"");   }   public static void a(  ByteBuffer byteBuffer,  ByteBuffer byteBuffer2){     byte[] bArr=new byte[3];     byte[] bArr2=new byte[4];     while (byteBuffer.hasRemaining()) {       int min=Math.min(3,byteBuffer.remaining());       byteBuffer.get(bArr,0,min);       b(bArr2,bArr,min,0);       byteBuffer2.put(bArr2);     }   }   public static void a(  ByteBuffer byteBuffer,  CharBuffer charBuffer){     byte[] bArr=new byte[3];     byte[] bArr2=new byte[4];     while (byteBuffer.hasRemaining()) {       int min=Math.min(3,byteBuffer.remaining());       byteBuffer.get(bArr,0,min);       b(bArr2,bArr,min,0);       for (int i2=0; i2 < 4; i2++) {         charBuffer.put((char)(bArr2[i2] & p));       }     }   }   public static String a(  Serializable serializable) throws IOException {     return a(serializable,0);   }   public static String a(  Serializable serializable,  int i2) throws IOException {     GZIPOutputStream gZIPOutputStream;     a aVar;     ByteArrayOutputStream byteArrayOutputStream;     ObjectOutputStream objectOutputStream=null;     if (serializable == null) {       throw new NullPointerException(""Cannot serialize a null object."");     }     try {       byteArrayOutputStream=new ByteArrayOutputStream();       try {         aVar=new a(byteArrayOutputStream,i2 | 1);         try {           if ((i2 & 2) != 0) {             gZIPOutputStream=new GZIPOutputStream(aVar);             try {               objectOutputStream=new ObjectOutputStream(gZIPOutputStream);               gZIPOutputStream=gZIPOutputStream;             }  catch (            Throwable th) {               th=th;               try {                 objectOutputStream.close();               }  catch (              Exception e2) {               }               try {                 gZIPOutputStream.close();               }  catch (              Exception e3) {               }               try {                 aVar.close();               }  catch (              Exception e4) {               }               try {                 byteArrayOutputStream.close();                 throw th;               }  catch (              Exception e5) {                 throw th;               }             }           }  else {             gZIPOutputStream=0;             objectOutputStream=new ObjectOutputStream(aVar);           }           objectOutputStream.writeObject(serializable);           try {             objectOutputStream.close();           }  catch (          Exception e6) {           }           try {             gZIPOutputStream.close();           }  catch (          Exception e7) {           }           try {             aVar.close();           }  catch (          Exception e8) {           }           try {             byteArrayOutputStream.close();           }  catch (          Exception e9) {           }           try {             return new String(byteArrayOutputStream.toByteArray(),n);           }  catch (          UnsupportedEncodingException e10) {             return new String(byteArrayOutputStream.toByteArray());           }         }  catch (        Throwable th2) {           th=th2;           gZIPOutputStream=objectOutputStream;         }       }  catch (      Throwable th3) {         th=th3;         gZIPOutputStream=0;         aVar=null;       }     }  catch (    Throwable th4) {       th=th4;       gZIPOutputStream=0;       aVar=null;       byteArrayOutputStream=null;     }   }   public static String a(  byte[] bArr){     String str=null;     try {       str=a(bArr,0,bArr.length,0);     }  catch (    IOException e2) {       if (!j) {         throw new AssertionError(e2.getMessage());       }     }     if (j || str != null) {       return str;     }     throw new AssertionError();   }   public static String a(  byte[] bArr,  int i2) throws IOException {     return a(bArr,0,bArr.length,i2);   }   public static String a(  byte[] bArr,  int i2,  int i3){     String str=null;     try {       str=a(bArr,i2,i3,0);     }  catch (    IOException e2) {       if (!j) {         throw new AssertionError(e2.getMessage());       }     }     if (j || str != null) {       return str;     }     throw new AssertionError();   }   public static String a(  byte[] bArr,  int i2,  int i3,  int i4) throws IOException {     byte[] b2=b(bArr,i2,i3,i4);     try {       return new String(b2,n);     }  catch (    UnsupportedEncodingException e2) {       return new String(b2);     }   }   public static byte[] b(  byte[] bArr){     try {       return b(bArr,0,bArr.length,0);     }  catch (    IOException e2) {       if (j) {         return null;       }       throw new AssertionError(""IOExceptions only come from GZipping, which is turned off: "" + e2.getMessage());     }   }   public static byte[] b(  byte[] bArr,  int i2,  int i3,  int i4) throws IOException {     a aVar;     ByteArrayOutputStream byteArrayOutputStream;     ByteArrayOutputStream byteArrayOutputStream2;     GZIPOutputStream gZIPOutputStream;     GZIPOutputStream gZIPOutputStream2=null;     if (bArr == null) {       throw new NullPointerException(""Cannot serialize a null array."");     }     if (i2 < 0) {       throw new IllegalArgumentException(""Cannot have negative offset: "" + i2);     }     if (i3 < 0) {       throw new IllegalArgumentException(""Cannot have length offset: "" + i3);     }     if (i2 + i3 > bArr.length) {       throw new IllegalArgumentException(String.format(""Cannot have offset of %d and length of %d with array of length %d"",Integer.valueOf(i2),Integer.valueOf(i3),Integer.valueOf(bArr.length)));     }     if ((i4 & 2) != 0) {       try {         byteArrayOutputStream2=new ByteArrayOutputStream();         try {           aVar=new a(byteArrayOutputStream2,i4 | 1);           try {             gZIPOutputStream=new GZIPOutputStream(aVar);           }  catch (          Throwable th) {             th=th;             byteArrayOutputStream=byteArrayOutputStream2;           }         }  catch (        Throwable th2) {           th=th2;           aVar=null;           byteArrayOutputStream=byteArrayOutputStream2;         }       }  catch (      Throwable th3) {         th=th3;         aVar=null;         byteArrayOutputStream=null;       }       try {         gZIPOutputStream.write(bArr,i2,i3);         gZIPOutputStream.close();         try {           gZIPOutputStream.close();         }  catch (        Exception e2) {         }         try {           aVar.close();         }  catch (        Exception e3) {         }         try {           byteArrayOutputStream2.close();         }  catch (        Exception e4) {         }         return byteArrayOutputStream2.toByteArray();       }  catch (      Throwable th4) {         th=th4;         gZIPOutputStream2=gZIPOutputStream;         byteArrayOutputStream=byteArrayOutputStream2;         try {           gZIPOutputStream2.close();         }  catch (        Exception e5) {         }         try {           aVar.close();         }  catch (        Exception e6) {         }         try {           byteArrayOutputStream.close();           throw th;         }  catch (        Exception e7) {           throw th;         }       }     }     boolean z=(i4 & 8) != 0;     int i5=(i3 % 3 > 0 ? 4 : 0) + ((i3 / 3) * 4);     if (z) {       i5+=i5 / k;     }     byte[] bArr2=new byte[i5];     int i6=i3 - 2;     int i7=0;     int i8=0;     int i9=0;     while (i9 < i6) {       b(bArr,i9 + i2,3,bArr2,i8,i4);       int i10=i7 + 4;       if (z && i10 >= k) {         bArr2[i8 + 4]=m;         i8++;         i10=0;       }       i8+=4;       i7=i10;       i9+=3;     }     if (i9 < i3) {       b(bArr,i9 + i2,i3 - i9,bArr2,i8,i4);       i8+=4;     }     if (i8 <= bArr2.length - 1) {       byte[] bArr3=new byte[i8];       System.arraycopy(bArr2,0,bArr3,0,i8);       return bArr3;     }     return bArr2;   }   public static int b(  byte[] bArr,  int i2,  byte[] bArr2,  int i3,  int i4){     if (bArr == null) {       throw new NullPointerException(""Source array was null."");     }     if (bArr2 == null) {       throw new NullPointerException(""Destination array was null."");     }     if (i2 < 0 || i2 + 3 >= bArr.length) {       throw new IllegalArgumentException(String.format(""Source array with length %d cannot have offset of %d and still process four bytes."",Integer.valueOf(bArr.length),Integer.valueOf(i2)));     }     if (i3 < 0 || i3 + 2 >= bArr2.length) {       throw new IllegalArgumentException(String.format(""Destination array with length %d cannot have offset of %d and still store three bytes."",Integer.valueOf(bArr2.length),Integer.valueOf(i3)));     }     byte[] c2=c(i4);     if (bArr[i2 + 2] == 61) {       bArr2[i3]=(byte)((((c2[bArr[i2]] & p) << 18) | ((c2[bArr[i2 + 1]] & p) << 12)) >>> 16);       return 1;     }     if (bArr[i2 + 3] == 61) {       int i5=((c2[bArr[i2]] & p) << 18) | ((c2[bArr[i2 + 1]] & p) << 12) | ((c2[bArr[i2 + 2]] & p) << 6);       bArr2[i3]=(byte)(i5 >>> 16);       bArr2[i3 + 1]=(byte)(i5 >>> 8);       return 2;     }     int i6=((c2[bArr[i2]] & p) << 18) | ((c2[bArr[i2 + 1]] & p) << 12) | ((c2[bArr[i2 + 2]] & p) << 6)| (c2[bArr[i2 + 3]] & p);     bArr2[i3]=(byte)(i6 >> 16);     bArr2[i3 + 1]=(byte)(i6 >> 8);     bArr2[i3 + 2]=(byte)i6;     return 3;   }   public static byte[] c(  byte[] bArr) throws IOException {     return c(bArr,0,bArr.length,0);   }   public static byte[] c(  byte[] r12,  int r13,  int r14,  int r15) throws java.io.IOException {     throw new UnsupportedOperationException(""Method not decompiled: net.daum.adam.publisher.impl.b.b.c(byte[], int, int, int):byte[]"");   }   public static byte[] a(  String str) throws IOException {     return a(str,0);   }   public static byte[] a(  String str,  int i2) throws IOException {     byte[] bytes;     ByteArrayOutputStream byteArrayOutputStream;     ByteArrayInputStream byteArrayInputStream;     ByteArrayInputStream byteArrayInputStream2;     GZIPInputStream gZIPInputStream=null;     if (str == null) {       throw new NullPointerException(""Input string was null."");     }     try {       bytes=str.getBytes(n);     }  catch (    UnsupportedEncodingException e2) {       bytes=str.getBytes();     }     byte[] c2=c(bytes,0,bytes.length,i2);     boolean z=(i2 & 4) != 0;     if (c2 != null && c2.length >= 4 && !z && 35615 == ((c2[0] & p) | ((c2[1] << 8) & MotionEventCompat.ACTION_POINTER_INDEX_MASK))) {       byte[] bArr=new byte[AccessibilityEventCompat.TYPE_WINDOW_CONTENT_CHANGED];       try {         byteArrayOutputStream=new ByteArrayOutputStream();         try {           byteArrayInputStream=new ByteArrayInputStream(c2);           try {             GZIPInputStream gZIPInputStream2=new GZIPInputStream(byteArrayInputStream);             while (true) {               try {                 int read=gZIPInputStream2.read(bArr);                 if (read < 0) {                   break;                 }                 byteArrayOutputStream.write(bArr,0,read);               }  catch (              IOException e3) {                 e=e3;                 gZIPInputStream=gZIPInputStream2;                 byteArrayInputStream2=byteArrayInputStream;                 try {                   e.printStackTrace();                   try {                     byteArrayOutputStream.close();                   }  catch (                  Exception e4) {                   }                   try {                     gZIPInputStream.close();                   }  catch (                  Exception e5) {                   }                   try {                     byteArrayInputStream2.close();                   }  catch (                  Exception e6) {                   }                   return c2;                 }  catch (                Throwable th) {                   th=th;                   byteArrayInputStream=byteArrayInputStream2;                   try {                     byteArrayOutputStream.close();                   }  catch (                  Exception e7) {                   }                   try {                     gZIPInputStream.close();                   }  catch (                  Exception e8) {                   }                   try {                     byteArrayInputStream.close();                     throw th;                   }  catch (                  Exception e9) {                     throw th;                   }                 }               } catch (              Throwable th2) {                 th=th2;                 gZIPInputStream=gZIPInputStream2;                 byteArrayOutputStream.close();                 gZIPInputStream.close();                 byteArrayInputStream.close();                 throw th;               }             }             c2=byteArrayOutputStream.toByteArray();             try {               byteArrayOutputStream.close();             }  catch (            Exception e10) {             }             try {               gZIPInputStream2.close();             }  catch (            Exception e11) {             }             try {               byteArrayInputStream.close();             }  catch (            Exception e12) {             }           }  catch (          IOException e13) {             e=e13;             byteArrayInputStream2=byteArrayInputStream;           } catch (          Throwable th3) {             th=th3;           }         }  catch (        IOException e14) {           e=e14;           byteArrayInputStream2=null;         } catch (        Throwable th4) {           th=th4;           byteArrayInputStream=null;         }       }  catch (      IOException e15) {         e=e15;         byteArrayOutputStream=null;         byteArrayInputStream2=null;       } catch (      Throwable th5) {         th=th5;         byteArrayOutputStream=null;         byteArrayInputStream=null;       }     }     return c2;   }   public static Object b(  String str) throws IOException, ClassNotFoundException {     return a(str,0,(ClassLoader)null);   }   public static Object a(  String str,  int i2,  ClassLoader classLoader) throws IOException, ClassNotFoundException {     ByteArrayInputStream byteArrayInputStream;     ObjectInputStream objectInputStream=null;     try {       byteArrayInputStream=new ByteArrayInputStream(a(str,i2));     }  catch (    Throwable th) {       th=th;       byteArrayInputStream=null;     }     try {       if (classLoader == null) {         objectInputStream=new ObjectInputStream(byteArrayInputStream);       }  else {         objectInputStream=new c(byteArrayInputStream,classLoader);       }       Object readObject=objectInputStream.readObject();       try {         byteArrayInputStream.close();       }  catch (      Exception e2) {       }       try {         objectInputStream.close();       }  catch (      Exception e3) {       }       return readObject;     }  catch (    Throwable th2) {       th=th2;       try {         byteArrayInputStream.close();       }  catch (      Exception e4) {       }       try {         objectInputStream.close();         throw th;       }  catch (      Exception e5) {         throw th;       }     }   } public static class c extends ObjectInputStream {     final ClassLoader a;     c(    InputStream inputStream,    ClassLoader classLoader){       super(inputStream);       this.a=classLoader;     }     @Override public Class<?> resolveClass(    ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {       Class<?> cls=Class.forName(objectStreamClass.getName(),b.j,this.a);       if (cls == null) {         return super.resolveClass(objectStreamClass);       }       return cls;     }   }   public static void a(  byte[] bArr,  String str) throws IOException {     a aVar;     if (bArr == null) {       throw new NullPointerException(""Data to encode was null."");     }     try {       aVar=new a(new FileOutputStream(str),1);       try {         aVar.write(bArr);         try {           aVar.close();         }  catch (        Exception e2) {         }       }  catch (      Throwable th) {         th=th;         try {           aVar.close();         }  catch (        Exception e3) {         }         throw th;       }     }  catch (    Throwable th2) {       th=th2;       aVar=null;     }   }   public static void a(  String str,  String str2) throws IOException {     a aVar;     try {       aVar=new a(new FileOutputStream(str2),0);       try {         aVar.write(str.getBytes(n));         try {           aVar.close();         }  catch (        Exception e2) {         }       }  catch (      Throwable th) {         th=th;         try {           aVar.close();         }  catch (        Exception e3) {         }         throw th;       }     }  catch (    Throwable th2) {       th=th2;       aVar=null;     }   }   public static byte[] c(  String str) throws IOException {     int i2=0;     C0009b c0009b=null;     try {       File file=new File(str);       if (file.length() > 2147483647L) {         throw new IOException(""File is too big for this convenience method ("" + file.length() + "" bytes)."");       }       byte[] bArr=new byte[(int)file.length()];       C0009b c0009b2=new C0009b(new BufferedInputStream(new FileInputStream(file)),0);       while (true) {         try {           int read=c0009b2.read(bArr,i2,4096);           if (read < 0) {             break;           }           i2+=read;         }  catch (        Throwable th) {           th=th;           c0009b=c0009b2;           try {             c0009b.close();           }  catch (          Exception e2) {           }           throw th;         }       }       byte[] bArr2=new byte[i2];       System.arraycopy(bArr,0,bArr2,0,i2);       try {         c0009b2.close();       }  catch (      Exception e3) {       }       return bArr2;     }  catch (    Throwable th2) {       th=th2;     }   }   public static String d(  String str) throws IOException {     C0009b c0009b;     int i2=0;     try {       File file=new File(str);       byte[] bArr=new byte[Math.max((int)((file.length() * 1.4d) + 1.0d),40)];       c0009b=new C0009b(new BufferedInputStream(new FileInputStream(file)),1);       while (true) {         try {           int read=c0009b.read(bArr,i2,4096);           if (read < 0) {             break;           }           i2+=read;         }  catch (        Throwable th) {           th=th;           try {             c0009b.close();           }  catch (          Exception e2) {           }           throw th;         }       }       String str2=new String(bArr,0,i2,n);       try {         c0009b.close();       }  catch (      Exception e3) {       }       return str2;     }  catch (    Throwable th2) {       th=th2;       c0009b=null;     }   }   public static void b(  String str,  String str2) throws IOException {     BufferedOutputStream bufferedOutputStream;     String d2=d(str);     try {       bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(str2));       try {         bufferedOutputStream.write(d2.getBytes(n));         try {           bufferedOutputStream.close();         }  catch (        Exception e2) {         }       }  catch (      Throwable th) {         th=th;         try {           bufferedOutputStream.close();         }  catch (        Exception e3) {         }         throw th;       }     }  catch (    Throwable th2) {       th=th2;       bufferedOutputStream=null;     }   }   public static void c(  String str,  String str2) throws IOException {     BufferedOutputStream bufferedOutputStream;     byte[] c2=c(str);     try {       bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(str2));       try {         bufferedOutputStream.write(c2);         try {           bufferedOutputStream.close();         }  catch (        Exception e2) {         }       }  catch (      Throwable th) {         th=th;         try {           bufferedOutputStream.close();         }  catch (        Exception e3) {         }         throw th;       }     }  catch (    Throwable th2) {       th=th2;       bufferedOutputStream=null;     }   } public static class C0009b extends FilterInputStream {     private final boolean a;     private int b;     private final byte[] c;     private final int d;     private int e;     private int f;     private final boolean g;     private final int h;     private final byte[] i;     public C0009b(    InputStream inputStream){       this(inputStream,0);     }     public C0009b(    InputStream inputStream,    int i){       super(inputStream);       this.h=i;       this.g=(i & 8) > 0;       this.a=(i & 1) > 0;       this.d=this.a ? 4 : 3;       this.c=new byte[this.d];       this.b=-1;       this.f=0;       this.i=b.c(i);     }     @Override public int read() throws IOException {       int read;       if (this.b < 0) {         if (this.a) {           byte[] bArr=new byte[3];           int i=0;           int i2=0;           while (i < 3) {             int read2=this.in.read();             if (read2 < 0) {               break;             }             bArr[i]=(byte)read2;             i++;             i2++;           }           if (i2 <= 0) {             return -1;           }           b.b(bArr,0,i2,this.c,0,this.h);           this.b=0;           this.e=4;         }  else {           byte[] bArr2=new byte[4];           int i3=0;           while (i3 < 4) {             do {               read=this.in.read();               if (read < 0) {                 break;               }             }  while (this.i[read & 127] <= -5);             if (read < 0) {               break;             }             bArr2[i3]=(byte)read;             i3++;           }           if (i3 == 4) {             this.e=b.b(bArr2,0,this.c,0,this.h);             this.b=0;           }  else {             if (i3 == 0) {               return -1;             }             throw new IOException(""Improperly padded Base64 input."");           }         }       }       if (this.b >= 0) {         if (this.b >= this.e) {           return -1;         }         if (this.a && this.g && this.f >= b.k) {           this.f=0;           return 10;         }         this.f++;         byte[] bArr3=this.c;         int i4=this.b;         this.b=i4 + 1;         byte b=bArr3[i4];         if (this.b >= this.d) {           this.b=-1;         }         return b & b.p;       }       throw new IOException(""Error in Base64 code reading stream."");     }     @Override public int read(    byte[] bArr,    int i,    int i2) throws IOException {       int i3=0;       while (i3 < i2) {         int read=read();         if (read >= 0) {           bArr[i + i3]=(byte)read;           i3++;         }  else {           if (i3 == 0) {             return -1;           }           return i3;         }       }       return i3;     }   } public static class a extends FilterOutputStream {     private final boolean a;     private int b;     private byte[] c;     private final int d;     private int e;     private final boolean f;     private final byte[] g;     private boolean h;     private final int i;     private final byte[] j;     public a(    OutputStream outputStream){       this(outputStream,1);     }     public a(    OutputStream outputStream,    int i){       super(outputStream);       this.f=(i & 8) != 0;       this.a=(i & 1) != 0;       this.d=this.a ? 3 : 4;       this.c=new byte[this.d];       this.b=0;       this.e=0;       this.h=b.j;       this.g=new byte[4];       this.i=i;       this.j=b.c(i);     }     @Override public void write(    int i) throws IOException {       if (this.h) {         this.out.write(i);         return;       }       if (this.a) {         byte[] bArr=this.c;         int i2=this.b;         this.b=i2 + 1;         bArr[i2]=(byte)i;         if (this.b >= this.d) {           this.out.write(b.b(this.g,this.c,this.d,this.i));           this.e+=4;           if (this.f && this.e >= b.k) {             this.out.write(10);             this.e=0;           }           this.b=0;           return;         }         return;       }       if (this.j[i & 127] > -5) {         byte[] bArr2=this.c;         int i3=this.b;         this.b=i3 + 1;         bArr2[i3]=(byte)i;         if (this.b >= this.d) {           this.out.write(this.g,0,b.b(this.c,0,this.g,0,this.i));           this.b=0;           return;         }         return;       }       if (this.j[i & 127] != -5) {         throw new IOException(""Invalid character in Base64 data."");       }     }     @Override public void write(    byte[] bArr,    int i,    int i2) throws IOException {       if (this.h) {         this.out.write(bArr,i,i2);         return;       }       for (int i3=0; i3 < i2; i3++) {         write(bArr[i + i3]);       }     }     public void a() throws IOException {       if (this.b > 0) {         if (this.a) {           this.out.write(b.b(this.g,this.c,this.b,this.i));           this.b=0;           return;         }         throw new IOException(""Base64 input not properly padded."");       }     }     @Override public void close() throws IOException {       a();       super.close();       this.c=null;       this.out=null;     }     public void b() throws IOException {       a();       this.h=true;     }     public void c(){       this.h=b.j;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.b\c.code","public static class c extends ObjectInputStream {   final ClassLoader a;   c(  InputStream inputStream,  ClassLoader classLoader){     super(inputStream);     this.a=classLoader;   }   @Override public Class<?> resolveClass(  ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {     Class<?> cls=Class.forName(objectStreamClass.getName(),b.j,this.a);     if (cls == null) {       return super.resolveClass(objectStreamClass);     }     return cls;   } } public final class c {   private static c a=null;   private static final DialogInterface.OnClickListener k=new d();   private String b;   private DialogInterface.OnClickListener e;   private DialogInterface.OnClickListener f;   private DialogInterface.OnCancelListener g;   private boolean h;   private String c=""í™•ì�¸"";   private String d=""ì·¨ì†Œ"";   private AlertDialog i=null;   private AlertDialog.Builder j=null;   public static c a(){     if (a == null) {       a=a(null,null,null,null,true);     }     return a;   }   public static c a(  String str,  DialogInterface.OnClickListener onClickListener,  DialogInterface.OnClickListener onClickListener2,  DialogInterface.OnCancelListener onCancelListener){     return a(null,null,null,null,true);   }   public static c a(  String str,  DialogInterface.OnClickListener onClickListener,  DialogInterface.OnClickListener onClickListener2,  DialogInterface.OnCancelListener onCancelListener,  boolean z){     if (a == null) {       a=new c(str,onClickListener,onClickListener2,onCancelListener,z);     }     return a;   }   private c(  String str,  DialogInterface.OnClickListener onClickListener,  DialogInterface.OnClickListener onClickListener2,  DialogInterface.OnCancelListener onCancelListener,  boolean z){     this.b=null;     this.e=null;     this.f=null;     this.g=null;     this.h=true;     this.b=str;     this.e=onClickListener;     this.f=onClickListener2;     this.g=onCancelListener;     this.h=z;   }   public void b(){     if (this.i != null) {       this.i.dismiss();       this.i=null;     }     this.b=null;     this.c=""í™•ì�¸"";     this.d=""ì·¨ì†Œ"";     this.e=null;     this.f=null;     this.h=true;   }   public c a(  Context context){     if (this.i == null || this.i.getContext() != context) {       this.j=new AlertDialog.Builder(context);     }  else {       context=this.i.getContext();     }     this.j=new AlertDialog.Builder(context);     if (this.b != null) {       this.j.setMessage(this.b);     }     if (this.e != null) {       this.j.setPositiveButton(this.c,this.e);     }  else {       this.j.setPositiveButton(""í™•ì�¸"",k);     }     if (this.f != null) {       this.j.setNegativeButton(this.d,this.f);     }     if (this.g != null) {       this.j.setOnCancelListener(this.g);     }  else {       this.j.setOnCancelListener(new a());     }     this.j.setCancelable(this.h);     this.i=this.j.create();     return this;   } class a implements DialogInterface.OnCancelListener {     a(){     }     @Override public void onCancel(    DialogInterface dialogInterface){       c.a().b();     }   }   public AlertDialog c(){     return this.i;   }   public c a(  String str,  DialogInterface.OnClickListener onClickListener){     if (str == null || str.length() < 1) {       str=""í™•ì�¸"";     }     this.c=str;     this.e=onClickListener;     return this;   }   public c b(  String str,  DialogInterface.OnClickListener onClickListener){     if (str == null || str.length() < 1) {       str=""ì·¨ì†Œ"";     }     this.d=str;     this.f=onClickListener;     return this;   }   public c a(  DialogInterface.OnCancelListener onCancelListener){     this.g=onCancelListener;     return this;   }   public c a(  boolean z){     this.h=z;     return this;   }   public c a(  String str){     this.b=str;     return this;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.b\C0009b.code","public static class C0009b extends FilterInputStream {   private final boolean a;   private int b;   private final byte[] c;   private final int d;   private int e;   private int f;   private final boolean g;   private final int h;   private final byte[] i;   public C0009b(  InputStream inputStream){     this(inputStream,0);   }   public C0009b(  InputStream inputStream,  int i){     super(inputStream);     this.h=i;     this.g=(i & 8) > 0;     this.a=(i & 1) > 0;     this.d=this.a ? 4 : 3;     this.c=new byte[this.d];     this.b=-1;     this.f=0;     this.i=b.c(i);   }   @Override public int read() throws IOException {     int read;     if (this.b < 0) {       if (this.a) {         byte[] bArr=new byte[3];         int i=0;         int i2=0;         while (i < 3) {           int read2=this.in.read();           if (read2 < 0) {             break;           }           bArr[i]=(byte)read2;           i++;           i2++;         }         if (i2 <= 0) {           return -1;         }         b.b(bArr,0,i2,this.c,0,this.h);         this.b=0;         this.e=4;       }  else {         byte[] bArr2=new byte[4];         int i3=0;         while (i3 < 4) {           do {             read=this.in.read();             if (read < 0) {               break;             }           }  while (this.i[read & 127] <= -5);           if (read < 0) {             break;           }           bArr2[i3]=(byte)read;           i3++;         }         if (i3 == 4) {           this.e=b.b(bArr2,0,this.c,0,this.h);           this.b=0;         }  else {           if (i3 == 0) {             return -1;           }           throw new IOException(""Improperly padded Base64 input."");         }       }     }     if (this.b >= 0) {       if (this.b >= this.e) {         return -1;       }       if (this.a && this.g && this.f >= b.k) {         this.f=0;         return 10;       }       this.f++;       byte[] bArr3=this.c;       int i4=this.b;       this.b=i4 + 1;       byte b=bArr3[i4];       if (this.b >= this.d) {         this.b=-1;       }       return b & b.p;     }     throw new IOException(""Error in Base64 code reading stream."");   }   @Override public int read(  byte[] bArr,  int i,  int i2) throws IOException {     int i3=0;     while (i3 < i2) {       int read=read();       if (read >= 0) {         bArr[i + i3]=(byte)read;         i3++;       }  else {         if (i3 == 0) {           return -1;         }         return i3;       }     }     return i3;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.b\d.code","class d implements DialogInterface.OnClickListener {   @Override public void onClick(  DialogInterface dialogInterface,  int i){     c.a().b();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.c\a.code","public class a implements Runnable {   public static final int a=0;   public static final int b=1;   public static final int c=2;   private static final int d=10000;   private static final int e=0;   private static final int f=1;   private static final int g=2;   private static final int h=3;   private static final int i=4;   private String j;   private int k;   private List<NameValuePair> l;   private String m;   private final Handler n;   private final String o;   private DefaultHttpClient p;   private C0010a q;   public a(){     this(new Handler(),null);   }   public a(  Handler handler){     this(handler,null);   }   public a(  String str){     this(new Handler(),str);   }   public a(  Handler handler,  String str){     this.n=handler;     this.o=str;   }   public void a(  int i2,  String str,  String str2){     this.k=i2;     this.j=str;     this.m=str2;     this.q=new C0010a(str);     b.a().a(this);   }   public void a(  int i2,  String str,  List<NameValuePair> list){     this.k=i2;     this.j=str;     this.l=list;     b.a().a(this);   }   public void a(  String str){     a(0,str,(String)null);   }   public void a(  String str,  List<NameValuePair> list){     a(1,str,list);   }   public void a(  String str,  String str2){     a(2,str,str2);   }   public void b(  String str){     a(3,str,(String)null);   }   public void c(  String str){     a(4,str,(String)null);   }   @Override public void run(){     int statusCode;     String reasonPhrase;     this.p=a(d);     this.p.setRedirectHandler(this.q);     if (this.o != null) {       this.p.getParams().setParameter(""User-Agent"",this.o);     }     b();     HttpResponse httpResponse=null;     try { switch (this.k) { case 0:         httpResponse=this.p.execute(new HttpGet(this.j));       break; case 1:     HttpPost httpPost=new HttpPost(this.j);   httpPost.setEntity(new UrlEncodedFormEntity(this.l)); httpResponse=this.p.execute(httpPost); break; case 2: HttpPut httpPut=new HttpPut(this.j); httpPut.setEntity(new StringEntity(this.m)); httpResponse=this.p.execute(httpPut); break; case 3: httpResponse=this.p.execute(new HttpDelete(this.j)); break; case 4: httpResponse=this.p.execute(new HttpGet(this.j)); break; } statusCode=httpResponse.getStatusLine().getStatusCode(); reasonPhrase=httpResponse.getStatusLine().getReasonPhrase(); }  catch (Exception e2) { a(e2); } if (statusCode != 200) { throw new Exception(reasonPhrase); } if (this.k == 4) { b(httpResponse.getEntity()); }  else { a(httpResponse.getEntity()); } b.a().b(this); } public void a(HttpEntity httpEntity) throws IllegalStateException, IOException { StringBuilder sb=new StringBuilder(); try { BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(httpEntity.getContent())); while (true) { String readLine=bufferedReader.readLine(); if (readLine != null) { sb.append(readLine).append('\n'); }  else { b((Object)sb.toString()); return; } } }  catch (Exception e2) { a(e2); } } private void b(HttpEntity httpEntity) throws IOException { try { b(BitmapFactory.decodeStream(new BufferedHttpEntity(httpEntity).getContent())); }  catch (Exception e2) { a(e2); } } private void b(){ Bundle bundle=new Bundle(); bundle.putString(""uri"",this.q.a()); Message obtain=Message.obtain(this.n,0); obtain.setData(bundle); this.n.sendMessage(obtain); } private void a(Object obj){ Bundle bundle=new Bundle(); bundle.putString(""uri"",this.q.a()); Message obtain=Message.obtain(this.n,1,obj); obtain.setData(bundle); this.n.sendMessage(obtain); } private void b(Object obj){ Bundle bundle=new Bundle(); bundle.putString(""uri"",this.q.a()); Message obtain=Message.obtain(this.n,2,obj); obtain.setData(bundle); this.n.sendMessage(obtain); } public static DefaultHttpClient a(int i2){ BasicHttpParams basicHttpParams=new BasicHttpParams(); basicHttpParams.setParameter(""http.protocol.expect-continue"",false); basicHttpParams.setParameter(""http.protocol.allow-circular-redirects"",false); HttpClientParams.setRedirecting(basicHttpParams,true); if (i2 > 0) { basicHttpParams.setParameter(""http.connection.timeout"",Integer.valueOf(i2)); basicHttpParams.setParameter(""http.socket.timeout"",Integer.valueOf(i2)); HttpConnectionParams.setConnectionTimeout(basicHttpParams,i2); HttpConnectionParams.setSoTimeout(basicHttpParams,i2); } HttpConnectionParams.setSocketBufferSize(basicHttpParams,8192); return new DefaultHttpClient(basicHttpParams); } public static DefaultHttpClient a(){ return a(d); } public static class C0010a extends DefaultRedirectHandler { private URI a; C0010a(String str){ try { this.a=new URI(str); }  catch (URISyntaxException e) { } } @Override public URI getLocationURI(HttpResponse httpResponse,HttpContext httpContext) throws ProtocolException { this.a=super.getLocationURI(httpResponse,httpContext); return this.a; } String a(){ return this.a != null ? this.a.toString() : """"; } } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.c\b.code","public class b {   public static final int a=10;   private static b d;   private final ArrayList<Runnable> b=new ArrayList<>();   private final ArrayList<Runnable> c=new ArrayList<>();   public static b a(){     if (d == null) {       d=new b();     }     return d;   }   public void a(  Runnable runnable){     this.c.add(runnable);     if (this.b.size() < 10) {       b();     }   }   private void b(){     if (!this.c.isEmpty()) {       Runnable runnable=this.c.get(0);       this.c.remove(0);       this.b.add(runnable);       new Thread(runnable).start();     }   }   public void b(  Runnable runnable){     this.b.remove(runnable);     b();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.c\C0010a.code","public static class C0010a extends DefaultRedirectHandler {   private URI a;   C0010a(  String str){     try {       this.a=new URI(str);     }  catch (    URISyntaxException e) {     }   }   @Override public URI getLocationURI(  HttpResponse httpResponse,  HttpContext httpContext) throws ProtocolException {     this.a=super.getLocationURI(httpResponse,httpContext);     return this.a;   }   String a(){     return this.a != null ? this.a.toString() : """";   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.d\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2d101d4apublic interface a {   void onStateChange(  Object obj); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.d\b.code","public static class b {   final Intent a;   final ArrayList<C0012a> b;   b(  Intent intent,  ArrayList<C0012a> arrayList){     this.a=intent;     this.b=arrayList;   } } public class b extends c {   private static final String b=""ScreenStateBroadcastReceiver"";   private AdView c;   public b(  Context context,  AdView adView){     super(context);     this.c=null;     this.c=adView;   }   @Override public void onReceive(  Context context,  Intent intent){     String action=intent.getAction();     if (action.equals(""android.intent.action.SCREEN_OFF"")) {       AdCommon.debug(b,""Screen Off"");       if (c() != null) {         c().onStateChange(false);         return;       }       return;     }     if ((this.c.hasWindowFocus() && action.equals(""android.intent.action.SCREEN_ON"")) || action.equals(""android.intent.action.USER_PRESENT"")) {       AdCommon.debug(b,""Screen On"");       if (c() != null) {         c().onStateChange(true);       }     }   }   @Override public void a(){     try {       IntentFilter intentFilter=new IntentFilter(""android.intent.action.SCREEN_OFF"");       intentFilter.addAction(""android.intent.action.USER_PRESENT"");       intentFilter.addAction(""android.intent.action.SCREEN_ON"");       this.a.registerReceiver(this,intentFilter);       AdCommon.debug(b,""registered successfully"");     }  catch (    Exception e) {     }   }   @Override public void b(){     try {       if (this.a != null) {         this.a.unregisterReceiver(this);       }     }  catch (    IllegalArgumentException e) {     } catch (    Exception e2) {       AdCommon.debug(b,e2.toString());     }     AdCommon.debug(b,""unregistered"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.d\c.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4bf126b6public abstract class c extends BroadcastReceiver {   protected final Context a;   private a b; public interface a {     void onStateChange(    Object obj);   }   public abstract void a();   public abstract void b();   public c(  Context context){     this.a=context;   }   public void a(  a aVar){     this.b=aVar;   }   public a c(){     return this.b;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.d\C0012a.code","public static class C0012a {   final IntentFilter a;   final BroadcastReceiver b;   boolean c;   C0012a(  IntentFilter intentFilter,  BroadcastReceiver broadcastReceiver){     this.a=intentFilter;     this.b=broadcastReceiver;   }   public String toString(){     StringBuilder sb=new StringBuilder(AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER);     sb.append(""Receiver{"");     sb.append(this.b);     sb.append("" filter="");     sb.append(this.a);     sb.append(""}"");     return sb.toString();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.e\a.code","public class a {   private static final long c=500;   private final AdView a;   private Animation.AnimationListener b;   public a(  AdView adView,  Animation.AnimationListener animationListener){     this.a=adView;     this.b=animationListener;   }   public void a(  AdView.AnimationType animationType){     Animation animation=null;     Animation animation2=null;     if (animationType == AdView.AnimationType.FLIP_HORIZONTAL) {       animation=new b(0.0f,90.0f,this.a.getWidth() / 2.0f,this.a.getHeight() / 2.0f,0.0f,false);       animation2=new b(270.0f,360.0f,this.a.getWidth() / 2.0f,this.a.getHeight() / 2.0f,0.0f,false);     }  else     if (animationType == AdView.AnimationType.FLIP_VERTICAL) {       animation=new b(0.0f,90.0f,this.a.getWidth() / 2.0f,this.a.getHeight() / 2.0f,0.0f,false,true);       animation2=new b(270.0f,360.0f,this.a.getWidth() / 2.0f,this.a.getHeight() / 2.0f,0.0f,false,true);     }  else     if (animationType == AdView.AnimationType.SLIDE) {       animation=AnimationUtils.loadAnimation(this.a.getContext(),R.anim.slide_out_right);       animation2=AnimationUtils.loadAnimation(this.a.getContext(),R.anim.slide_in_left);     }  else     if (animationType == AdView.AnimationType.FADE) {       animation=AnimationUtils.loadAnimation(this.a.getContext(),R.anim.fade_out);       animation2=AnimationUtils.loadAnimation(this.a.getContext(),R.anim.fade_in);     }     if (animationType != AdView.AnimationType.NONE) {       animation.setAnimationListener(this.b);       animation.setDuration(c);       animation.setFillAfter(false);       animation.setInterpolator(new AccelerateInterpolator());       animation2.setDuration(c);       animation2.setFillAfter(false);       animation2.setInterpolator(new DecelerateInterpolator());     }     this.a.setAnimationHide(animation);     this.a.setAnimationShow(animation2);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.daum.adam.publisher.impl.e\b.code","public class b extends Animation {   private final float a;   private final float b;   private final float c;   private final float d;   private final float e;   private final boolean f;   private final boolean g;   private Camera h;   public b(  float f,  float f2,  float f3,  float f4,  float f5,  boolean z){     this(f,f2,f3,f4,f5,z,false);   }   public b(  float f,  float f2,  float f3,  float f4,  float f5,  boolean z,  boolean z2){     this.a=f;     this.b=f2;     this.c=f3;     this.d=f4;     this.e=f5;     this.f=z;     this.g=z2;   }   @Override public void initialize(  int i,  int i2,  int i3,  int i4){     super.initialize(i,i2,i3,i4);     this.h=new Camera();   }   @Override protected void applyTransformation(  float f,  Transformation transformation){     float f2=this.a;     float f3=f2 + ((this.b - f2) * f);     float f4=this.c;     float f5=this.d;     Camera camera=this.h;     Matrix matrix=transformation.getMatrix();     camera.save();     if (this.f) {       camera.translate(0.0f,0.0f,this.e * f);     }  else {       camera.translate(0.0f,0.0f,this.e * (1.0f - f));     }     if (this.g) {       camera.rotateY(f3);     }  else {       camera.rotateX(f3);     }     camera.getMatrix(matrix);     camera.restore();     matrix.preTranslate(-f4,-f5);     matrix.postTranslate(f4,f5);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\AndroidLogger.code","private static class AndroidLogger implements Logger {   public AndroidLogger(  String name){   }   @Override public void error(  String message){     Log.e("""",message);   }   @Override public void warn(  String message){     Log.w("""",message);   }   @Override public void info(  String message){     Log.i("""",message);   }   @Override public void debug(  String message){     Log.d("""",message);   }   @Override public boolean isErrorEnabled(){     return true;   }   @Override public boolean isWarnEnabled(){     return true;   }   @Override public boolean isInfoEnabled(){     return true;   }   @Override public boolean isDebugEnabled(){     return true;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Attribute.code","public final class Attribute extends Segment {   static final String CHECKED=""checked"";   static final String CLASS=""class"";   static final String DISABLED=""disabled"";   static final String ID=""id"";   static final String MULTIPLE=""multiple"";   static final String NAME=""name"";   static final String SELECTED=""selected"";   static final String STYLE=""style"";   static final String TYPE=""type"";   static final String VALUE=""value"";   private final String key;   private final Segment nameSegment;   private final Segment valueSegment;   private final Segment valueSegmentIncludingQuotes;   public Attribute(  Source source,  String key,  Segment nameSegment){     this(source,key,nameSegment,null,null);   }   public Attribute(  Source source,  String key,  Segment nameSegment,  Segment valueSegment,  Segment valueSegmentIncludingQuotes){     super(source,nameSegment.getBegin(),valueSegmentIncludingQuotes == null ? nameSegment.getEnd() : valueSegmentIncludingQuotes.getEnd());     this.key=key;     this.nameSegment=nameSegment;     this.valueSegment=valueSegment;     this.valueSegmentIncludingQuotes=valueSegmentIncludingQuotes;   }   public String getKey(){     return this.key;   }   public String getName(){     return this.nameSegment.toString();   }   public Segment getNameSegment(){     return this.nameSegment;   }   public boolean hasValue(){     return this.valueSegment != null;   }   public String getValue(){     return CharacterReference.decode(this.valueSegment,true);   }   public Segment getValueSegment(){     return this.valueSegment;   }   public Segment getValueSegmentIncludingQuotes(){     return this.valueSegmentIncludingQuotes;   }   public char getQuoteChar(){     if (this.valueSegment == this.valueSegmentIncludingQuotes) {       return ' ';     }     return this.source.charAt(this.valueSegmentIncludingQuotes.getBegin());   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder().append(this.key).append(super.getDebugInfo()).append("",name="").append(this.nameSegment.getDebugInfo());     if (hasValue()) {       sb.append("",value="").append(this.valueSegment.getDebugInfo()).append(CharacterEntityReference._quot).append((CharSequence)this.valueSegment).append(CharacterEntityReference._quot).append(Config.NewLine);     }  else {       sb.append("",NO VALUE"").append(Config.NewLine);     }     return sb.toString();   }   public Tag appendTidy(  Appendable appendable,  Tag nextTag) throws IOException {     appendable.append(' ').append(this.nameSegment);     if (this.valueSegment != null) {       appendable.append(""=\"""");       while (nextTag != null && nextTag.begin < this.valueSegment.begin) {         nextTag=nextTag.getNextTag();       }       if (nextTag == null || nextTag.begin >= this.valueSegment.end) {         appendTidyValue(appendable,this.valueSegment);       }  else {         int i=this.valueSegment.begin;         while (true) {           if (nextTag == null || nextTag.begin >= this.valueSegment.end) {             break;           }           appendTidyValue(appendable,new Segment(this.source,i,nextTag.begin));           if (nextTag.end > this.valueSegment.end) {             Source source=this.source;             int i2=nextTag.begin;             i=this.valueSegment.end;             appendable.append(new Segment(source,i2,i));             break;           }           appendable.append(nextTag);           i=nextTag.end;           nextTag=nextTag.getNextTag();         }         if (i < this.valueSegment.end) {           appendTidyValue(appendable,new Segment(this.source,i,this.valueSegment.end));         }       }       appendable.append(CharacterEntityReference._quot);     }     return nextTag;   }   private static void appendTidyValue(  Appendable appendable,  CharSequence unencodedValue) throws IOException {     CharacterReference.appendEncode(appendable,CharacterReference.decode(unencodedValue,true),false);   }   public static Appendable appendHTML(  Appendable appendable,  CharSequence name,  CharSequence value) throws IOException {     appendable.append(' ').append(name);     if (value != null) {       appendable.append(""=\"""");       CharacterReference.appendEncode(appendable,value,false);       appendable.append(CharacterEntityReference._quot);     }     return appendable;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\AttributeIncludeChecker.code","public interface AttributeIncludeChecker {   boolean includeAttribute(  StartTag startTag,  Attribute attribute); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Attributes.code","public final class Attributes extends SequentialListSegment<Attribute> {   private static int defaultMaxErrorCount=2;   private final LinkedList<Attribute> attributeList;   final boolean containsServerTagOutsideOfAttributeValue;   public enum ParsingState {  AFTER_TAG_NAME,   BETWEEN_ATTRIBUTES,   IN_NAME,   AFTER_NAME,   START_VALUE,   IN_VALUE,   AFTER_VALUE_FINAL_QUOTE}   private Attributes(  Source source,  int begin,  int end,  LinkedList<Attribute> attributeList,  boolean containsServerTagOutsideOfAttributeValue){     super(source,begin,end);     this.attributeList=attributeList;     this.containsServerTagOutsideOfAttributeValue=containsServerTagOutsideOfAttributeValue;   }   public static Attributes construct(  Source source,  int startTagBegin,  StartTagType startTagType,  String tagName){     return construct(source,""StartTag"",ParsingState.AFTER_TAG_NAME,startTagBegin,-1,-1,startTagType,tagName,defaultMaxErrorCount);   }   public static Attributes construct(  Source source,  int startTagBegin,  int attributesBegin,  int maxEnd,  StartTagType startTagType,  String tagName,  int maxErrorCount){     return construct(source,""Attributes for StartTag"",ParsingState.BETWEEN_ATTRIBUTES,startTagBegin,attributesBegin,maxEnd,startTagType,tagName,maxErrorCount);   }   public static Attributes construct(  Source source,  int begin,  int maxEnd,  int maxErrorCount){     return construct(source,""Attributes"",ParsingState.BETWEEN_ATTRIBUTES,begin,-1,maxEnd,StartTagType.NORMAL,null,maxErrorCount);   }   private static net.htmlparser.jericho.Attributes construct(  net.htmlparser.jericho.Source r37,  java.lang.String r38,  net.htmlparser.jericho.Attributes.ParsingState r39,  int r40,  int r41,  int r42,  net.htmlparser.jericho.StartTagType r43,  java.lang.String r44,  int r45){     throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.Attributes.construct(net.htmlparser.jericho.Source, java.lang.String, net.htmlparser.jericho.Attributes$ParsingState, int, int, int, net.htmlparser.jericho.StartTagType, java.lang.String, int):net.htmlparser.jericho.Attributes"");   }   private static boolean reachedMaxErrorCount(  int errorCount,  Source source,  String logType,  String tagName,  int logBegin,  int maxErrorCount){     if (errorCount <= maxErrorCount) {       return false;     }     if (source.logger.isInfoEnabled()) {       log(source,logType,tagName,logBegin,""rejected because it contains too many errors"");     }     return true;   }   private static boolean isInvalidEmptyElementTag(  StartTagType startTagType,  Source source,  int i,  String logType,  String tagName,  int logBegin){     if (startTagType != StartTagType.NORMAL || !startTagType.atEndOfAttributes(source,i,false)) {       return false;     }     if (source.logger.isInfoEnabled()) {       log(source,logType,tagName,logBegin,""contains a '/' character before the closing '>', which is ignored because tags of this name cannot be empty-element tags"");     }     return true;   }   public Attribute get(  String name){     if (size() == 0) {       return null;     }     for (int i=0; i < size(); i++) {       Attribute attribute=get(i);       if (attribute.getKey().equalsIgnoreCase(name)) {         return attribute;       }     }     return null;   }   public String getValue(  String name){     Attribute attribute=get(name);     if (attribute == null) {       return null;     }     return attribute.getValue();   }   public String getRawValue(  String name){     Attribute attribute=get(name);     if (attribute == null || !attribute.hasValue()) {       return null;     }     return attribute.getValueSegment().toString();   }   @Override public int getCount(){     return this.attributeList.size();   }   @Override public Iterator<Attribute> iterator(){     return listIterator();   }   @Override public ListIterator<Attribute> listIterator(  int index){     return this.attributeList.listIterator(index);   }   public Map<String,String> populateMap(  Map<String,String> attributesMap,  boolean convertNamesToLowerCase){     Iterator i$=iterator();     while (i$.hasNext()) {       Attribute attribute=i$.next();       attributesMap.put(convertNamesToLowerCase ? attribute.getKey() : attribute.getName(),attribute.getValue());     }     return attributesMap;   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append(""Attributes "").append(super.getDebugInfo()).append("": "");     if (isEmpty()) {       sb.append(""EMPTY"");     }  else {       sb.append(Config.NewLine);       Iterator i$=iterator();       while (i$.hasNext()) {         Attribute attribute=i$.next();         sb.append(""  "").append(attribute.getDebugInfo());       }     }     return sb.toString();   }   public static int getDefaultMaxErrorCount(){     return defaultMaxErrorCount;   }   public static void setDefaultMaxErrorCount(  int value){     defaultMaxErrorCount=value;   }   public static String generateHTML(  Map<String,String> attributesMap){     StringBuilder sb=new StringBuilder();     try {       appendHTML(sb,attributesMap);     }  catch (    IOException e) {     }     return sb.toString();   }   public static void appendHTML(  Appendable appendable,  Map<String,String> attributesMap) throws IOException {     for (    Map.Entry<String,String> entry : attributesMap.entrySet()) {       Attribute.appendHTML(appendable,entry.getKey(),entry.getValue());     }   }   public Appendable appendTidy(  Appendable appendable,  Tag nextTag) throws IOException {     Iterator i$=iterator();     while (i$.hasNext()) {       Attribute attribute=i$.next();       nextTag=attribute.appendTidy(appendable,nextTag);     }     return appendable;   }   public Map<String,String> getMap(  boolean convertNamesToLowerCase){     return populateMap(new LinkedHashMap(getCount() * 2,1.0f),convertNamesToLowerCase);   }   private static void log(  Source source,  String part1,  CharSequence part2,  int begin,  String part3,  int pos){     source.logger.info(source.getRowColumnVector(pos).appendTo(source.getRowColumnVector(begin).appendTo(new StringBuilder(200).append(part1).append(' ').append(part2).append("" at "")).append(' ').append(part3).append("" at position "")).toString());   }   private static void log(  Source source,  String part1,  CharSequence part2,  int begin,  String part3){     source.logger.info(source.getRowColumnVector(begin).appendTo(new StringBuilder(200).append(part1).append(' ').append(part2).append("" at "")).append(' ').append(part3).toString());   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\AttributesOutputSegment.code","public class AttributesOutputSegment implements OutputSegment {   private final int begin;   private final int end;   private final Map<String,String> map;   public AttributesOutputSegment(  Attributes attributes,  boolean convertNamesToLowerCase){     this(attributes,attributes.getMap(convertNamesToLowerCase));   }   public AttributesOutputSegment(  Attributes attributes,  Map<String,String> map){     if (map == null || attributes == null) {       throw new IllegalArgumentException(""both arguments must be non-null"");     }     this.begin=attributes.getBegin();     this.end=attributes.getEnd();     this.map=map;   }   @Override public int getBegin(){     return this.begin;   }   @Override public int getEnd(){     return this.end;   }   public Map<String,String> getMap(){     return this.map;   }   @Override public void writeTo(  Writer writer) throws IOException {     Attributes.appendHTML(writer,this.map);   }   @Override public void appendTo(  Appendable appendable) throws IOException {     Attributes.appendHTML(appendable,this.map);   }   @Override public long getEstimatedMaximumOutputLength(){     return (this.end - this.begin) * 2;   }   @Override public String toString(){     return Attributes.generateHTML(this.map);   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append(""(p"").append(this.begin).append(""-p"").append(this.end).append(""):"");     try {       appendTo(sb);       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\A_ElementHandler.code","private static class A_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new A_ElementHandler();   private A_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     String renderedHyperlinkURL;     x.appendElementContent(element);     if (x.includeHyperlinkURLs && (renderedHyperlinkURL=x.renderer.renderHyperlinkURL(element.getStartTag())) != null) {       int linkLength=renderedHyperlinkURL.length() + 1;       if (x.col + linkLength >= x.maxLineLength) {         x.startNewLine(0);       }  else {         x.append(' ');       }       x.append(renderedHyperlinkURL);       x.lastCharWhiteSpace=true;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\BasicLogFormatter.code","public class BasicLogFormatter extends Formatter {   public static boolean OutputLevel=true;   public static boolean OutputName=false;   static final Formatter INSTANCE=new BasicLogFormatter();   @Override public String format(  LogRecord logRecord){     return format(logRecord.getLevel().getName(),logRecord.getMessage(),logRecord.getLoggerName());   }   public static String format(  String level,  String message,  String loggerName){     StringBuilder sb=new StringBuilder(message.length() + 40);     if (OutputLevel) {       sb.append(level).append("": "");     }     if (OutputName && loggerName != null) {       sb.append('[').append(loggerName).append(""] "");     }     sb.append(message);     sb.append(Config.NewLine);     return sb.toString();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\BlankOutputSegment.code","public final class BlankOutputSegment implements OutputSegment {   private final int begin;   private final int end;   public BlankOutputSegment(  int begin,  int end){     this.begin=begin;     this.end=end;   }   public BlankOutputSegment(  Segment segment){     this(segment.getBegin(),segment.getEnd());   }   @Override public int getBegin(){     return this.begin;   }   @Override public int getEnd(){     return this.end;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);   }   @Override public void appendTo(  Appendable appendable) throws IOException {     for (int i=this.begin; i < this.end; i++) {       appendable.append(' ');     }   }   @Override public long getEstimatedMaximumOutputLength(){     return this.end - this.begin;   }   @Override public String toString(){     StringBuilder sb=new StringBuilder(this.end - this.begin);     for (int i=this.begin; i < this.end; i++) {       sb.append(' ');     }     return sb.toString();   }   @Override public String getDebugInfo(){     return ""Replace with Spaces: (p"" + this.begin + ""-p""+ this.end+ ')';   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\BR_ElementHandler.code","private static class BR_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new BR_ElementHandler();   private BR_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.newLine();     x.blockBoundary(0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Cache.code","public final class Cache {   static final Cache STREAMED_SOURCE_MARKER=new Cache();   private final SubCache allTagTypesSubCache;   public final Source source;   private final SubCache[] subCaches;   public Cache(  Source source){     this.source=source;     this.allTagTypesSubCache=new SubCache(this,null);     TagType[] separatelyCachedTagTypes=getSeparatelyCachedTagTypes();     this.subCaches=new SubCache[separatelyCachedTagTypes.length + 1];     this.subCaches[0]=this.allTagTypesSubCache;     for (int i=0; i < separatelyCachedTagTypes.length; i++) {       this.subCaches[i + 1]=new SubCache(this,separatelyCachedTagTypes[i]);     }   }   private Cache(){     this.source=null;     this.allTagTypesSubCache=null;     this.subCaches=null;   }   public void clear(){     Iterator<Tag> i=this.allTagTypesSubCache.getTagIterator();     while (i.hasNext()) {       i.next().orphan();     }     for (int i2=0; i2 < this.subCaches.length; i2++) {       this.subCaches[i2].clear();     }   }   public Tag getTagAt(  int pos,  boolean serverTagOnly){     return this.source.useAllTypesCache ? this.allTagTypesSubCache.getTagAt(pos,serverTagOnly) : Tag.getTagAtUncached(this.source,pos,serverTagOnly);   }   public Tag getPreviousTag(  int pos){     return this.allTagTypesSubCache.getPreviousTag(pos);   }   public Tag getNextTag(  int pos){     return this.allTagTypesSubCache.getNextTag(pos);   }   public Tag getPreviousTag(  int pos,  TagType tagType){     for (int i=this.source.useAllTypesCache ? 0 : 1; i < this.subCaches.length; i++) {       if (tagType == this.subCaches[i].tagType) {         return this.subCaches[i].getPreviousTag(pos);       }     }     return Tag.getPreviousTagUncached(this.source,pos,tagType,-1);   }   public Tag getNextTag(  int pos,  TagType tagType){     for (int i=this.source.useAllTypesCache ? 0 : 1; i < this.subCaches.length; i++) {       if (tagType == this.subCaches[i].tagType) {         return this.subCaches[i].getNextTag(pos);       }     }     return Tag.getNextTagUncached(this.source,pos,tagType,-1);   }   public Tag addTagAt(  int pos,  boolean serverTagOnly){     Tag tag=Tag.getTagAtUncached(this.source,pos,serverTagOnly);     if (serverTagOnly && tag == null) {       return null;     }     this.allTagTypesSubCache.addTagAt(pos,tag);     if (tag == null) {       return null;     }     TagType tagType=tag.getTagType();     for (int i=1; i < this.subCaches.length; i++) {       if (tagType == this.subCaches[i].tagType) {         this.subCaches[i].addTagAt(pos,tag);         return tag;       }     }     return tag;   }   public int getTagCount(){     return this.allTagTypesSubCache.size() - 2;   }   public Iterator<Tag> getTagIterator(){     return this.allTagTypesSubCache.getTagIterator();   }   public void loadAllTags(  List<Tag> tags,  Tag[] allRegisteredTags,  StartTag[] allRegisteredStartTags){     int registeredStartTagIndex;     int registeredTagIndex;     int tagCount=tags.size();     this.allTagTypesSubCache.bulkLoad_Init(tagCount);     int i=0;     int registeredStartTagIndex2=0;     int registeredTagIndex2=0;     while (i < tagCount) {       Tag tag=tags.get(i);       if (tag.isUnregistered()) {         registeredStartTagIndex=registeredStartTagIndex2;         registeredTagIndex=registeredTagIndex2;       }  else {         registeredTagIndex=registeredTagIndex2 + 1;         allRegisteredTags[registeredTagIndex2]=tag;         if (tag instanceof StartTag) {           registeredStartTagIndex=registeredStartTagIndex2 + 1;           allRegisteredStartTags[registeredStartTagIndex2]=(StartTag)tag;         }  else {           registeredStartTagIndex=registeredStartTagIndex2;         }       }       this.allTagTypesSubCache.bulkLoad_Set(i,tag);       int x=1;       while (true) {         if (x >= this.subCaches.length) {           break;         }         if (tag.getTagType() != this.subCaches[x].tagType) {           x++;         }  else {           this.subCaches[x].bulkLoad_AddToTypeSpecificCache(tag);           break;         }       }       i++;       registeredStartTagIndex2=registeredStartTagIndex;       registeredTagIndex2=registeredTagIndex;     }     for (int x2=1; x2 < this.subCaches.length; x2++) {       this.subCaches[x2].bulkLoad_FinaliseTypeSpecificCache();     }   }   public String toString(){     StringBuilder sb=new StringBuilder();     for (int i=0; i < this.subCaches.length; i++) {       this.subCaches[i].appendTo(sb);     }     return sb.toString();   }   public int getSourceLength(){     return this.source.end;   }   private static TagType[] getSeparatelyCachedTagTypes(){     return TagType.getTagTypesIgnoringEnclosedMarkup();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CacheEntry.code","public static final class CacheEntry {   public int index;   public boolean nextCached;   public final int pos;   public boolean previousCached;   public boolean removed=false;   public final Tag tag;   public CacheEntry(  int index,  int pos,  Tag tag,  boolean previousCached,  boolean nextCached){     this.index=index;     this.pos=pos;     this.tag=tag;     this.previousCached=previousCached;     this.nextCached=nextCached;   }   public boolean isRedundant(){     return this.tag == null && this.previousCached && this.nextCached;   }   public String toString(){     return pad(this.index,4) + "" "" + pad(this.pos,5)+ "" ""+ (this.previousCached ? '|' : '-')+ ' '+ (this.nextCached ? '|' : '-')+ ' '+ (this.tag == null ? ""null"" : this.tag.getDebugInfo());   }   private String pad(  int n,  int places){     String nstring=String.valueOf(n);     StringBuilder sb=new StringBuilder(places);     for (int i=places - nstring.length(); i > 0; i--) {       sb.append(' ');     }     sb.append(nstring);     return sb.toString();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CacheEntryMissingInternalError.code","private static class CacheEntryMissingInternalError extends AssertionError {   public CacheEntryMissingInternalError(  TagType tagType,  Tag tag,  SubCache subCache,  String message){     super(""INTERNAL ERROR: Inconsistent Cache State for TagType \"""" + tagType + ""\"" - ""+ message+ ' '+ tag.getDebugInfo()+ '\n'+ subCache);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharacterEntityReference.code","public class CharacterEntityReference extends CharacterReference {   private static IntStringHashMap CODE_POINT_TO_NAME_MAP=null;   private static int MAX_NAME_LENGTH=0;   private static Map<String,Integer> NAME_TO_CODE_POINT_MAP=new HashMap(AccessibilityEventCompat.TYPE_TOUCH_EXPLORATION_GESTURE_START,1.0f);   public static final char _AElig=198;   public static final char _Aacute=193;   public static final char _Acirc=194;   public static final char _Agrave=192;   public static final char _Alpha=913;   public static final char _Aring=197;   public static final char _Atilde=195;   public static final char _Auml=196;   public static final char _Beta=914;   public static final char _Ccedil=199;   public static final char _Chi=935;   public static final char _Dagger=8225;   public static final char _Delta=916;   public static final char _ETH=208;   public static final char _Eacute=201;   public static final char _Ecirc=202;   public static final char _Egrave=200;   public static final char _Epsilon=917;   public static final char _Eta=919;   public static final char _Euml=203;   public static final char _Gamma=915;   public static final char _Iacute=205;   public static final char _Icirc=206;   public static final char _Igrave=204;   public static final char _Iota=921;   public static final char _Iuml=207;   public static final char _Kappa=922;   public static final char _Lambda=923;   public static final char _Mu=924;   public static final char _Ntilde=209;   public static final char _Nu=925;   public static final char _OElig=338;   public static final char _Oacute=211;   public static final char _Ocirc=212;   public static final char _Ograve=210;   public static final char _Omega=937;   public static final char _Omicron=927;   public static final char _Oslash=216;   public static final char _Otilde=213;   public static final char _Ouml=214;   public static final char _Phi=934;   public static final char _Pi=928;   public static final char _Prime=8243;   public static final char _Psi=936;   public static final char _Rho=929;   public static final char _Scaron=352;   public static final char _Sigma=931;   public static final char _THORN=222;   public static final char _Tau=932;   public static final char _Theta=920;   public static final char _Uacute=218;   public static final char _Ucirc=219;   public static final char _Ugrave=217;   public static final char _Upsilon=933;   public static final char _Uuml=220;   public static final char _Xi=926;   public static final char _Yacute=221;   public static final char _Yuml=376;   public static final char _Zeta=918;   public static final char _aacute=225;   public static final char _acirc=226;   public static final char _acute=180;   public static final char _aelig=230;   public static final char _agrave=224;   public static final char _alefsym=8501;   public static final char _alpha=945;   public static final char _amp='&';   public static final char _and=8743;   public static final char _ang=8736;   public static final char _apos='\'';   public static final char _aring=229;   public static final char _asymp=8776;   public static final char _atilde=227;   public static final char _auml=228;   public static final char _bdquo=8222;   public static final char _beta=946;   public static final char _brvbar=166;   public static final char _bull=8226;   public static final char _cap=8745;   public static final char _ccedil=231;   public static final char _cedil=184;   public static final char _cent=162;   public static final char _chi=967;   public static final char _circ=710;   public static final char _clubs=9827;   public static final char _cong=8773;   public static final char _copy=169;   public static final char _crarr=8629;   public static final char _cup=8746;   public static final char _curren=164;   public static final char _dArr=8659;   public static final char _dagger=8224;   public static final char _darr=8595;   public static final char _deg=176;   public static final char _delta=948;   public static final char _diams=9830;   public static final char _divide=247;   public static final char _eacute=233;   public static final char _ecirc=234;   public static final char _egrave=232;   public static final char _empty=8709;   public static final char _emsp=8195;   public static final char _ensp=8194;   public static final char _epsilon=949;   public static final char _equiv=8801;   public static final char _eta=951;   public static final char _eth=240;   public static final char _euml=235;   public static final char _euro=8364;   public static final char _exist=8707;   public static final char _fnof=402;   public static final char _forall=8704;   public static final char _frac12=189;   public static final char _frac14=188;   public static final char _frac34=190;   public static final char _frasl=8260;   public static final char _gamma=947;   public static final char _ge=8805;   public static final char _gt='>';   public static final char _hArr=8660;   public static final char _harr=8596;   public static final char _hearts=9829;   public static final char _hellip=8230;   public static final char _iacute=237;   public static final char _icirc=238;   public static final char _iexcl=161;   public static final char _igrave=236;   public static final char _image=8465;   public static final char _infin=8734;   public static final char _int=8747;   public static final char _iota=953;   public static final char _iquest=191;   public static final char _isin=8712;   public static final char _iuml=239;   public static final char _kappa=954;   public static final char _lArr=8656;   public static final char _lambda=955;   public static final char _lang=9001;   public static final char _laquo=171;   public static final char _larr=8592;   public static final char _lceil=8968;   public static final char _ldquo=8220;   public static final char _le=8804;   public static final char _lfloor=8970;   public static final char _lowast=8727;   public static final char _loz=9674;   public static final char _lrm=8206;   public static final char _lsaquo=8249;   public static final char _lsquo=8216;   public static final char _lt='<';   public static final char _macr=175;   public static final char _mdash=8212;   public static final char _micro=181;   public static final char _middot=183;   public static final char _minus=8722;   public static final char _mu=956;   public static final char _nabla=8711;   public static final char _nbsp=160;   public static final char _ndash=8211;   public static final char _ne=8800;   public static final char _ni=8715;   public static final char _not=172;   public static final char _notin=8713;   public static final char _nsub=8836;   public static final char _ntilde=241;   public static final char _nu=957;   public static final char _oacute=243;   public static final char _ocirc=244;   public static final char _oelig=339;   public static final char _ograve=242;   public static final char _oline=8254;   public static final char _omega=969;   public static final char _omicron=959;   public static final char _oplus=8853;   public static final char _or=8744;   public static final char _ordf=170;   public static final char _ordm=186;   public static final char _oslash=248;   public static final char _otilde=245;   public static final char _otimes=8855;   public static final char _ouml=246;   public static final char _para=182;   public static final char _part=8706;   public static final char _permil=8240;   public static final char _perp=8869;   public static final char _phi=966;   public static final char _pi=960;   public static final char _piv=982;   public static final char _plusmn=177;   public static final char _pound=163;   public static final char _prime=8242;   public static final char _prod=8719;   public static final char _prop=8733;   public static final char _psi=968;   public static final char _quot='\""';   public static final char _rArr=8658;   public static final char _radic=8730;   public static final char _rang=9002;   public static final char _raquo=187;   public static final char _rarr=8594;   public static final char _rceil=8969;   public static final char _rdquo=8221;   public static final char _real=8476;   public static final char _reg=174;   public static final char _rfloor=8971;   public static final char _rho=961;   public static final char _rlm=8207;   public static final char _rsaquo=8250;   public static final char _rsquo=8217;   public static final char _sbquo=8218;   public static final char _scaron=353;   public static final char _sdot=8901;   public static final char _sect=167;   public static final char _shy=173;   public static final char _sigma=963;   public static final char _sigmaf=962;   public static final char _sim=8764;   public static final char _spades=9824;   public static final char _sub=8834;   public static final char _sube=8838;   public static final char _sum=8721;   public static final char _sup=8835;   public static final char _sup1=185;   public static final char _sup2=178;   public static final char _sup3=179;   public static final char _supe=8839;   public static final char _szlig=223;   public static final char _tau=964;   public static final char _there4=8756;   public static final char _theta=952;   public static final char _thetasym=977;   public static final char _thinsp=8201;   public static final char _thorn=254;   public static final char _tilde=732;   public static final char _times=215;   public static final char _trade=8482;   public static final char _uArr=8657;   public static final char _uacute=250;   public static final char _uarr=8593;   public static final char _ucirc=251;   public static final char _ugrave=249;   public static final char _uml=168;   public static final char _upsih=978;   public static final char _upsilon=965;   public static final char _uuml=252;   public static final char _weierp=8472;   public static final char _xi=958;   public static final char _yacute=253;   public static final char _yen=165;   public static final char _yuml=255;   public static final char _zeta=950;   public static final char _zwj=8205;   public static final char _zwnj=8204;   private String name; static {     MAX_NAME_LENGTH=0;     NAME_TO_CODE_POINT_MAP.put(""nbsp"",new Integer(160));     NAME_TO_CODE_POINT_MAP.put(""iexcl"",new Integer(161));     NAME_TO_CODE_POINT_MAP.put(""cent"",new Integer(162));     NAME_TO_CODE_POINT_MAP.put(""pound"",new Integer(163));     NAME_TO_CODE_POINT_MAP.put(""curren"",new Integer(164));     NAME_TO_CODE_POINT_MAP.put(""yen"",new Integer(165));     NAME_TO_CODE_POINT_MAP.put(""brvbar"",new Integer(166));     NAME_TO_CODE_POINT_MAP.put(""sect"",new Integer(167));     NAME_TO_CODE_POINT_MAP.put(""uml"",new Integer(168));     NAME_TO_CODE_POINT_MAP.put(""copy"",new Integer(169));     NAME_TO_CODE_POINT_MAP.put(""ordf"",new Integer(170));     NAME_TO_CODE_POINT_MAP.put(""laquo"",new Integer(171));     NAME_TO_CODE_POINT_MAP.put(""not"",new Integer(172));     NAME_TO_CODE_POINT_MAP.put(""shy"",new Integer(173));     NAME_TO_CODE_POINT_MAP.put(""reg"",new Integer(174));     NAME_TO_CODE_POINT_MAP.put(""macr"",new Integer(175));     NAME_TO_CODE_POINT_MAP.put(""deg"",new Integer(176));     NAME_TO_CODE_POINT_MAP.put(""plusmn"",new Integer(177));     NAME_TO_CODE_POINT_MAP.put(""sup2"",new Integer(178));     NAME_TO_CODE_POINT_MAP.put(""sup3"",new Integer(179));     NAME_TO_CODE_POINT_MAP.put(""acute"",new Integer(180));     NAME_TO_CODE_POINT_MAP.put(""micro"",new Integer(181));     NAME_TO_CODE_POINT_MAP.put(""para"",new Integer(182));     NAME_TO_CODE_POINT_MAP.put(""middot"",new Integer(183));     NAME_TO_CODE_POINT_MAP.put(""cedil"",new Integer(184));     NAME_TO_CODE_POINT_MAP.put(""sup1"",new Integer(185));     NAME_TO_CODE_POINT_MAP.put(""ordm"",new Integer(186));     NAME_TO_CODE_POINT_MAP.put(""raquo"",new Integer(187));     NAME_TO_CODE_POINT_MAP.put(""frac14"",new Integer(188));     NAME_TO_CODE_POINT_MAP.put(""frac12"",new Integer(189));     NAME_TO_CODE_POINT_MAP.put(""frac34"",new Integer(190));     NAME_TO_CODE_POINT_MAP.put(""iquest"",new Integer(191));     NAME_TO_CODE_POINT_MAP.put(""Agrave"",new Integer(192));     NAME_TO_CODE_POINT_MAP.put(""Aacute"",new Integer(193));     NAME_TO_CODE_POINT_MAP.put(""Acirc"",new Integer(194));     NAME_TO_CODE_POINT_MAP.put(""Atilde"",new Integer(195));     NAME_TO_CODE_POINT_MAP.put(""Auml"",new Integer(196));     NAME_TO_CODE_POINT_MAP.put(""Aring"",new Integer(197));     NAME_TO_CODE_POINT_MAP.put(""AElig"",new Integer(198));     NAME_TO_CODE_POINT_MAP.put(""Ccedil"",new Integer(199));     NAME_TO_CODE_POINT_MAP.put(""Egrave"",new Integer(200));     NAME_TO_CODE_POINT_MAP.put(""Eacute"",new Integer(201));     NAME_TO_CODE_POINT_MAP.put(""Ecirc"",new Integer(202));     NAME_TO_CODE_POINT_MAP.put(""Euml"",new Integer(203));     NAME_TO_CODE_POINT_MAP.put(""Igrave"",new Integer(204));     NAME_TO_CODE_POINT_MAP.put(""Iacute"",new Integer(205));     NAME_TO_CODE_POINT_MAP.put(""Icirc"",new Integer(206));     NAME_TO_CODE_POINT_MAP.put(""Iuml"",new Integer(207));     NAME_TO_CODE_POINT_MAP.put(""ETH"",new Integer(208));     NAME_TO_CODE_POINT_MAP.put(""Ntilde"",new Integer(209));     NAME_TO_CODE_POINT_MAP.put(""Ograve"",new Integer(210));     NAME_TO_CODE_POINT_MAP.put(""Oacute"",new Integer(211));     NAME_TO_CODE_POINT_MAP.put(""Ocirc"",new Integer(212));     NAME_TO_CODE_POINT_MAP.put(""Otilde"",new Integer(213));     NAME_TO_CODE_POINT_MAP.put(""Ouml"",new Integer(214));     NAME_TO_CODE_POINT_MAP.put(""times"",new Integer(215));     NAME_TO_CODE_POINT_MAP.put(""Oslash"",new Integer(216));     NAME_TO_CODE_POINT_MAP.put(""Ugrave"",new Integer(217));     NAME_TO_CODE_POINT_MAP.put(""Uacute"",new Integer(218));     NAME_TO_CODE_POINT_MAP.put(""Ucirc"",new Integer(219));     NAME_TO_CODE_POINT_MAP.put(""Uuml"",new Integer(220));     NAME_TO_CODE_POINT_MAP.put(""Yacute"",new Integer(221));     NAME_TO_CODE_POINT_MAP.put(""THORN"",new Integer(222));     NAME_TO_CODE_POINT_MAP.put(""szlig"",new Integer(223));     NAME_TO_CODE_POINT_MAP.put(""agrave"",new Integer(224));     NAME_TO_CODE_POINT_MAP.put(""aacute"",new Integer(225));     NAME_TO_CODE_POINT_MAP.put(""acirc"",new Integer(226));     NAME_TO_CODE_POINT_MAP.put(""atilde"",new Integer(227));     NAME_TO_CODE_POINT_MAP.put(""auml"",new Integer(228));     NAME_TO_CODE_POINT_MAP.put(""aring"",new Integer(229));     NAME_TO_CODE_POINT_MAP.put(""aelig"",new Integer(230));     NAME_TO_CODE_POINT_MAP.put(""ccedil"",new Integer(231));     NAME_TO_CODE_POINT_MAP.put(""egrave"",new Integer(232));     NAME_TO_CODE_POINT_MAP.put(""eacute"",new Integer(233));     NAME_TO_CODE_POINT_MAP.put(""ecirc"",new Integer(234));     NAME_TO_CODE_POINT_MAP.put(""euml"",new Integer(235));     NAME_TO_CODE_POINT_MAP.put(""igrave"",new Integer(236));     NAME_TO_CODE_POINT_MAP.put(""iacute"",new Integer(237));     NAME_TO_CODE_POINT_MAP.put(""icirc"",new Integer(238));     NAME_TO_CODE_POINT_MAP.put(""iuml"",new Integer(239));     NAME_TO_CODE_POINT_MAP.put(""eth"",new Integer(240));     NAME_TO_CODE_POINT_MAP.put(""ntilde"",new Integer(241));     NAME_TO_CODE_POINT_MAP.put(""ograve"",new Integer(242));     NAME_TO_CODE_POINT_MAP.put(""oacute"",new Integer(243));     NAME_TO_CODE_POINT_MAP.put(""ocirc"",new Integer(244));     NAME_TO_CODE_POINT_MAP.put(""otilde"",new Integer(245));     NAME_TO_CODE_POINT_MAP.put(""ouml"",new Integer(246));     NAME_TO_CODE_POINT_MAP.put(""divide"",new Integer(247));     NAME_TO_CODE_POINT_MAP.put(""oslash"",new Integer(248));     NAME_TO_CODE_POINT_MAP.put(""ugrave"",new Integer(249));     NAME_TO_CODE_POINT_MAP.put(""uacute"",new Integer(250));     NAME_TO_CODE_POINT_MAP.put(""ucirc"",new Integer(251));     NAME_TO_CODE_POINT_MAP.put(""uuml"",new Integer(252));     NAME_TO_CODE_POINT_MAP.put(""yacute"",new Integer(253));     NAME_TO_CODE_POINT_MAP.put(""thorn"",new Integer(254));     NAME_TO_CODE_POINT_MAP.put(""yuml"",new Integer(MotionEventCompat.ACTION_MASK));     NAME_TO_CODE_POINT_MAP.put(""fnof"",new Integer(402));     NAME_TO_CODE_POINT_MAP.put(""Alpha"",new Integer(913));     NAME_TO_CODE_POINT_MAP.put(""Beta"",new Integer(914));     NAME_TO_CODE_POINT_MAP.put(""Gamma"",new Integer(915));     NAME_TO_CODE_POINT_MAP.put(""Delta"",new Integer(916));     NAME_TO_CODE_POINT_MAP.put(""Epsilon"",new Integer(917));     NAME_TO_CODE_POINT_MAP.put(""Zeta"",new Integer(918));     NAME_TO_CODE_POINT_MAP.put(""Eta"",new Integer(919));     NAME_TO_CODE_POINT_MAP.put(""Theta"",new Integer(920));     NAME_TO_CODE_POINT_MAP.put(""Iota"",new Integer(921));     NAME_TO_CODE_POINT_MAP.put(""Kappa"",new Integer(922));     NAME_TO_CODE_POINT_MAP.put(""Lambda"",new Integer(923));     NAME_TO_CODE_POINT_MAP.put(""Mu"",new Integer(924));     NAME_TO_CODE_POINT_MAP.put(""Nu"",new Integer(925));     NAME_TO_CODE_POINT_MAP.put(""Xi"",new Integer(926));     NAME_TO_CODE_POINT_MAP.put(""Omicron"",new Integer(927));     NAME_TO_CODE_POINT_MAP.put(""Pi"",new Integer(928));     NAME_TO_CODE_POINT_MAP.put(""Rho"",new Integer(929));     NAME_TO_CODE_POINT_MAP.put(""Sigma"",new Integer(931));     NAME_TO_CODE_POINT_MAP.put(""Tau"",new Integer(932));     NAME_TO_CODE_POINT_MAP.put(""Upsilon"",new Integer(933));     NAME_TO_CODE_POINT_MAP.put(""Phi"",new Integer(934));     NAME_TO_CODE_POINT_MAP.put(""Chi"",new Integer(935));     NAME_TO_CODE_POINT_MAP.put(""Psi"",new Integer(936));     NAME_TO_CODE_POINT_MAP.put(""Omega"",new Integer(937));     NAME_TO_CODE_POINT_MAP.put(""alpha"",new Integer(945));     NAME_TO_CODE_POINT_MAP.put(""beta"",new Integer(946));     NAME_TO_CODE_POINT_MAP.put(""gamma"",new Integer(947));     NAME_TO_CODE_POINT_MAP.put(""delta"",new Integer(948));     NAME_TO_CODE_POINT_MAP.put(""epsilon"",new Integer(949));     NAME_TO_CODE_POINT_MAP.put(""zeta"",new Integer(950));     NAME_TO_CODE_POINT_MAP.put(""eta"",new Integer(951));     NAME_TO_CODE_POINT_MAP.put(""theta"",new Integer(952));     NAME_TO_CODE_POINT_MAP.put(""iota"",new Integer(953));     NAME_TO_CODE_POINT_MAP.put(""kappa"",new Integer(954));     NAME_TO_CODE_POINT_MAP.put(""lambda"",new Integer(955));     NAME_TO_CODE_POINT_MAP.put(""mu"",new Integer(956));     NAME_TO_CODE_POINT_MAP.put(""nu"",new Integer(957));     NAME_TO_CODE_POINT_MAP.put(""xi"",new Integer(958));     NAME_TO_CODE_POINT_MAP.put(""omicron"",new Integer(959));     NAME_TO_CODE_POINT_MAP.put(""pi"",new Integer(960));     NAME_TO_CODE_POINT_MAP.put(""rho"",new Integer(961));     NAME_TO_CODE_POINT_MAP.put(""sigmaf"",new Integer(962));     NAME_TO_CODE_POINT_MAP.put(""sigma"",new Integer(963));     NAME_TO_CODE_POINT_MAP.put(""tau"",new Integer(964));     NAME_TO_CODE_POINT_MAP.put(""upsilon"",new Integer(965));     NAME_TO_CODE_POINT_MAP.put(""phi"",new Integer(966));     NAME_TO_CODE_POINT_MAP.put(""chi"",new Integer(967));     NAME_TO_CODE_POINT_MAP.put(""psi"",new Integer(968));     NAME_TO_CODE_POINT_MAP.put(""omega"",new Integer(969));     NAME_TO_CODE_POINT_MAP.put(""thetasym"",new Integer(977));     NAME_TO_CODE_POINT_MAP.put(""upsih"",new Integer(978));     NAME_TO_CODE_POINT_MAP.put(""piv"",new Integer(982));     NAME_TO_CODE_POINT_MAP.put(""bull"",new Integer(8226));     NAME_TO_CODE_POINT_MAP.put(""hellip"",new Integer(8230));     NAME_TO_CODE_POINT_MAP.put(""prime"",new Integer(8242));     NAME_TO_CODE_POINT_MAP.put(""Prime"",new Integer(8243));     NAME_TO_CODE_POINT_MAP.put(""oline"",new Integer(8254));     NAME_TO_CODE_POINT_MAP.put(""frasl"",new Integer(8260));     NAME_TO_CODE_POINT_MAP.put(""weierp"",new Integer(8472));     NAME_TO_CODE_POINT_MAP.put(""image"",new Integer(8465));     NAME_TO_CODE_POINT_MAP.put(""real"",new Integer(8476));     NAME_TO_CODE_POINT_MAP.put(""trade"",new Integer(8482));     NAME_TO_CODE_POINT_MAP.put(""alefsym"",new Integer(8501));     NAME_TO_CODE_POINT_MAP.put(""larr"",new Integer(8592));     NAME_TO_CODE_POINT_MAP.put(""uarr"",new Integer(8593));     NAME_TO_CODE_POINT_MAP.put(""rarr"",new Integer(8594));     NAME_TO_CODE_POINT_MAP.put(""darr"",new Integer(8595));     NAME_TO_CODE_POINT_MAP.put(""harr"",new Integer(8596));     NAME_TO_CODE_POINT_MAP.put(""crarr"",new Integer(8629));     NAME_TO_CODE_POINT_MAP.put(""lArr"",new Integer(8656));     NAME_TO_CODE_POINT_MAP.put(""uArr"",new Integer(8657));     NAME_TO_CODE_POINT_MAP.put(""rArr"",new Integer(8658));     NAME_TO_CODE_POINT_MAP.put(""dArr"",new Integer(8659));     NAME_TO_CODE_POINT_MAP.put(""hArr"",new Integer(8660));     NAME_TO_CODE_POINT_MAP.put(""forall"",new Integer(8704));     NAME_TO_CODE_POINT_MAP.put(""part"",new Integer(8706));     NAME_TO_CODE_POINT_MAP.put(""exist"",new Integer(8707));     NAME_TO_CODE_POINT_MAP.put(""empty"",new Integer(8709));     NAME_TO_CODE_POINT_MAP.put(""nabla"",new Integer(8711));     NAME_TO_CODE_POINT_MAP.put(""isin"",new Integer(8712));     NAME_TO_CODE_POINT_MAP.put(""notin"",new Integer(8713));     NAME_TO_CODE_POINT_MAP.put(""ni"",new Integer(8715));     NAME_TO_CODE_POINT_MAP.put(""prod"",new Integer(8719));     NAME_TO_CODE_POINT_MAP.put(""sum"",new Integer(8721));     NAME_TO_CODE_POINT_MAP.put(""minus"",new Integer(8722));     NAME_TO_CODE_POINT_MAP.put(""lowast"",new Integer(8727));     NAME_TO_CODE_POINT_MAP.put(""radic"",new Integer(8730));     NAME_TO_CODE_POINT_MAP.put(""prop"",new Integer(8733));     NAME_TO_CODE_POINT_MAP.put(""infin"",new Integer(8734));     NAME_TO_CODE_POINT_MAP.put(""ang"",new Integer(8736));     NAME_TO_CODE_POINT_MAP.put(""and"",new Integer(8743));     NAME_TO_CODE_POINT_MAP.put(""or"",new Integer(8744));     NAME_TO_CODE_POINT_MAP.put(""cap"",new Integer(8745));     NAME_TO_CODE_POINT_MAP.put(""cup"",new Integer(8746));     NAME_TO_CODE_POINT_MAP.put(""int"",new Integer(8747));     NAME_TO_CODE_POINT_MAP.put(""there4"",new Integer(8756));     NAME_TO_CODE_POINT_MAP.put(""sim"",new Integer(8764));     NAME_TO_CODE_POINT_MAP.put(""cong"",new Integer(8773));     NAME_TO_CODE_POINT_MAP.put(""asymp"",new Integer(8776));     NAME_TO_CODE_POINT_MAP.put(""ne"",new Integer(8800));     NAME_TO_CODE_POINT_MAP.put(""equiv"",new Integer(8801));     NAME_TO_CODE_POINT_MAP.put(""le"",new Integer(8804));     NAME_TO_CODE_POINT_MAP.put(""ge"",new Integer(8805));     NAME_TO_CODE_POINT_MAP.put(HTMLElementName.SUB,new Integer(8834));     NAME_TO_CODE_POINT_MAP.put(HTMLElementName.SUP,new Integer(8835));     NAME_TO_CODE_POINT_MAP.put(""nsub"",new Integer(8836));     NAME_TO_CODE_POINT_MAP.put(""sube"",new Integer(8838));     NAME_TO_CODE_POINT_MAP.put(""supe"",new Integer(8839));     NAME_TO_CODE_POINT_MAP.put(""oplus"",new Integer(8853));     NAME_TO_CODE_POINT_MAP.put(""otimes"",new Integer(8855));     NAME_TO_CODE_POINT_MAP.put(""perp"",new Integer(8869));     NAME_TO_CODE_POINT_MAP.put(""sdot"",new Integer(8901));     NAME_TO_CODE_POINT_MAP.put(""lceil"",new Integer(8968));     NAME_TO_CODE_POINT_MAP.put(""rceil"",new Integer(8969));     NAME_TO_CODE_POINT_MAP.put(""lfloor"",new Integer(8970));     NAME_TO_CODE_POINT_MAP.put(""rfloor"",new Integer(8971));     NAME_TO_CODE_POINT_MAP.put(""lang"",new Integer(9001));     NAME_TO_CODE_POINT_MAP.put(""rang"",new Integer(9002));     NAME_TO_CODE_POINT_MAP.put(""loz"",new Integer(9674));     NAME_TO_CODE_POINT_MAP.put(""spades"",new Integer(9824));     NAME_TO_CODE_POINT_MAP.put(""clubs"",new Integer(9827));     NAME_TO_CODE_POINT_MAP.put(""hearts"",new Integer(9829));     NAME_TO_CODE_POINT_MAP.put(""diams"",new Integer(9830));     NAME_TO_CODE_POINT_MAP.put(""quot"",new Integer(34));     NAME_TO_CODE_POINT_MAP.put(""amp"",new Integer(38));     NAME_TO_CODE_POINT_MAP.put(""lt"",new Integer(60));     NAME_TO_CODE_POINT_MAP.put(""gt"",new Integer(62));     NAME_TO_CODE_POINT_MAP.put(""OElig"",new Integer(338));     NAME_TO_CODE_POINT_MAP.put(""oelig"",new Integer(339));     NAME_TO_CODE_POINT_MAP.put(""Scaron"",new Integer(352));     NAME_TO_CODE_POINT_MAP.put(""scaron"",new Integer(353));     NAME_TO_CODE_POINT_MAP.put(""Yuml"",new Integer(376));     NAME_TO_CODE_POINT_MAP.put(""circ"",new Integer(710));     NAME_TO_CODE_POINT_MAP.put(""tilde"",new Integer(732));     NAME_TO_CODE_POINT_MAP.put(""ensp"",new Integer(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE));     NAME_TO_CODE_POINT_MAP.put(""emsp"",new Integer(8195));     NAME_TO_CODE_POINT_MAP.put(""thinsp"",new Integer(8201));     NAME_TO_CODE_POINT_MAP.put(""zwnj"",new Integer(8204));     NAME_TO_CODE_POINT_MAP.put(""zwj"",new Integer(8205));     NAME_TO_CODE_POINT_MAP.put(""lrm"",new Integer(8206));     NAME_TO_CODE_POINT_MAP.put(""rlm"",new Integer(8207));     NAME_TO_CODE_POINT_MAP.put(""ndash"",new Integer(8211));     NAME_TO_CODE_POINT_MAP.put(""mdash"",new Integer(8212));     NAME_TO_CODE_POINT_MAP.put(""lsquo"",new Integer(8216));     NAME_TO_CODE_POINT_MAP.put(""rsquo"",new Integer(8217));     NAME_TO_CODE_POINT_MAP.put(""sbquo"",new Integer(8218));     NAME_TO_CODE_POINT_MAP.put(""ldquo"",new Integer(8220));     NAME_TO_CODE_POINT_MAP.put(""rdquo"",new Integer(8221));     NAME_TO_CODE_POINT_MAP.put(""bdquo"",new Integer(8222));     NAME_TO_CODE_POINT_MAP.put(""dagger"",new Integer(8224));     NAME_TO_CODE_POINT_MAP.put(""Dagger"",new Integer(8225));     NAME_TO_CODE_POINT_MAP.put(""permil"",new Integer(8240));     NAME_TO_CODE_POINT_MAP.put(""lsaquo"",new Integer(8249));     NAME_TO_CODE_POINT_MAP.put(""rsaquo"",new Integer(8250));     NAME_TO_CODE_POINT_MAP.put(""euro"",new Integer(8364));     NAME_TO_CODE_POINT_MAP.put(""apos"",new Integer(39));     CODE_POINT_TO_NAME_MAP=new IntStringHashMap((int)(NAME_TO_CODE_POINT_MAP.size() / 0.75f),1.0f);     for (    Map.Entry<String,Integer> entry : NAME_TO_CODE_POINT_MAP.entrySet()) {       String name=entry.getKey();       if (MAX_NAME_LENGTH < name.length()) {         MAX_NAME_LENGTH=name.length();       }       CODE_POINT_TO_NAME_MAP.put(entry.getValue().intValue(),name);     }     MAX_ENTITY_REFERENCE_LENGTH=MAX_NAME_LENGTH + 2;   }   private CharacterEntityReference(  Source source,  int begin,  int end,  int codePoint){     super(source,begin,end,codePoint);     this.name=getName(codePoint);   }   public String getName(){     return this.name;   }   public static String getName(  char ch){     return getName((int)ch);   }   public static String getName(  int codePoint){     return CODE_POINT_TO_NAME_MAP.get(codePoint);   }   public static int getCodePointFromName(  String name){     String lowerCaseName;     Integer codePoint=NAME_TO_CODE_POINT_MAP.get(name);     if (codePoint == null && (lowerCaseName=name.toLowerCase()) != name) {       codePoint=NAME_TO_CODE_POINT_MAP.get(lowerCaseName);     }     if (codePoint != null) {       return codePoint.intValue();     }     return -1;   }   @Override public String getCharacterReferenceString(){     return getCharacterReferenceString(this.name);   }   public static String getCharacterReferenceString(  int codePoint){     String name;     if (codePoint <= 65535 && (name=getName(codePoint)) != null) {       return getCharacterReferenceString(name);     }     return null;   }   public static Map<String,Integer> getNameToCodePointMap(){     return NAME_TO_CODE_POINT_MAP;   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append(_quot);     try {       appendCharacterReferenceString(sb,this.name);       sb.append(""\"" "");       appendUnicodeText(sb,this.codePoint);       sb.append(' ').append(super.getDebugInfo());       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   private static String getCharacterReferenceString(  String name){     try {       return appendCharacterReferenceString(new StringBuilder(),name).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static final Appendable appendCharacterReferenceString(  Appendable appendable,  String name) throws IOException {     return appendable.append(_amp).append(name).append(';');   }   public static CharacterReference construct(  Source source,  int begin,  int unterminatedMaxCodePoint){     int end;     String name;     int nameBegin=begin + 1;     int maxNameEnd=nameBegin + MAX_NAME_LENGTH;     int maxSourcePos=source.end - 1;     int x=nameBegin;     boolean unterminated=false;     do {       char ch=source.charAt(x);       if (ch == ';') {         end=x + 1;         name=source.subSequence(nameBegin,x).toString();       }  else {         if (!isValidReferenceNameChar(ch)) {           unterminated=true;         }  else         if (x == maxSourcePos) {           unterminated=true;           x++;         }         if (unterminated) {           if (unterminatedMaxCodePoint == -1) {             return null;           }           end=x;           name=source.subSequence(nameBegin,x).toString();         }  else {           x++;         }       }       int codePoint=getCodePointFromName(name);       if (codePoint == -1) {         return null;       }       if (!unterminated || codePoint <= unterminatedMaxCodePoint) {         return new CharacterEntityReference(source,begin,end,codePoint);       }       return null;     }  while (x <= maxNameEnd);     return null;   }   private static final boolean isValidReferenceNameChar(  char ch){     return ch >= 'A' && ch <= 'z' && (ch <= 'Z' || ch >= 'a');   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharacterReference.code","public abstract class CharacterReference extends Segment {   public static final int INVALID_CODE_POINT=-1;   static int MAX_ENTITY_REFERENCE_LENGTH=0;   private static final int TAB_LENGTH=4;   int codePoint;   public abstract String getCharacterReferenceString();   public CharacterReference(  Source source,  int begin,  int end,  int codePoint){     super(source,begin,end);     this.codePoint=codePoint;   }   public int getCodePoint(){     return this.codePoint;   }   public char getChar(){     return (char)this.codePoint;   }   public final void appendCharTo(  Appendable appendable) throws IOException {     appendCharTo(appendable,Config.ConvertNonBreakingSpaces);   }   private void appendCharTo(  Appendable appendable,  boolean convertNonBreakingSpaces) throws IOException {     if (Character.isSupplementaryCodePoint(this.codePoint)) {       appendable.append(getHighSurrogate(this.codePoint));       appendable.append(getLowSurrogate(this.codePoint));       return;     }     char ch=getChar();     if (ch == 160 && convertNonBreakingSpaces) {       appendable.append(' ');     }  else {       appendable.append(ch);     }   }   public boolean isTerminated(){     return this.source.charAt(this.end + (-1)) == ';';   }   public static String encode(  CharSequence unencodedText){     if (unencodedText == null) {       return null;     }     try {       return appendEncode(new StringBuilder(unencodedText.length() * 2),unencodedText,false).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static String encode(  char ch){     try {       return appendEncode(new StringBuilder(MAX_ENTITY_REFERENCE_LENGTH),ch).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static String encodeWithWhiteSpaceFormatting(  CharSequence unencodedText){     if (unencodedText == null) {       return null;     }     try {       return appendEncode(new StringBuilder(unencodedText.length() * 2),unencodedText,true).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static String decode(  CharSequence encodedText){     return decode(encodedText,false,Config.ConvertNonBreakingSpaces);   }   public static String decode(  CharSequence encodedText,  boolean insideAttributeValue){     return decode(encodedText,insideAttributeValue,Config.ConvertNonBreakingSpaces);   }   public static String decode(  CharSequence encodedText,  boolean insideAttributeValue,  boolean convertNonBreakingSpaces){     if (encodedText == null) {       return null;     }     for (int i=0; i < encodedText.length(); i++) {       if (encodedText.charAt(i) == '&') {         try {           return appendDecode(new StringBuilder(encodedText.length()),encodedText,i,insideAttributeValue,convertNonBreakingSpaces).toString();         }  catch (        IOException ex) {           throw new RuntimeException(ex);         }       }     }     return encodedText.toString();   }   public static String decodeCollapseWhiteSpace(  CharSequence text){     return decodeCollapseWhiteSpace(text,Config.ConvertNonBreakingSpaces);   }   public static String decodeCollapseWhiteSpace(  CharSequence text,  boolean convertNonBreakingSpaces){     return decode(appendCollapseWhiteSpace(new StringBuilder(text.length()),text),false,convertNonBreakingSpaces);   }   public static String reencode(  CharSequence encodedText){     return encode(decode(encodedText,true));   }   public static String getCharacterReferenceString(  int codePoint){     String characterReferenceString=codePoint != 39 ? CharacterEntityReference.getCharacterReferenceString(codePoint) : null;     if (characterReferenceString == null) {       return NumericCharacterReference.getCharacterReferenceString(codePoint);     }     return characterReferenceString;   }   public String getDecimalCharacterReferenceString(){     return getDecimalCharacterReferenceString(this.codePoint);   }   public static String getDecimalCharacterReferenceString(  int codePoint){     try {       return appendDecimalCharacterReferenceString(new StringBuilder(),codePoint).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public String getHexadecimalCharacterReferenceString(){     return getHexadecimalCharacterReferenceString(this.codePoint);   }   public static String getHexadecimalCharacterReferenceString(  int codePoint){     try {       return appendHexadecimalCharacterReferenceString(new StringBuilder(),codePoint).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public String getUnicodeText(){     return getUnicodeText(this.codePoint);   }   public static String getUnicodeText(  int codePoint){     try {       return appendUnicodeText(new StringBuilder(),codePoint).toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static final Appendable appendUnicodeText(  Appendable appendable,  int codePoint) throws IOException {     appendable.append(""U+"");     String hex=Integer.toString(codePoint,16).toUpperCase();     for (int i=4 - hex.length(); i > 0; i--) {       appendable.append('0');     }     appendable.append(hex);     return appendable;   }   public static CharacterReference parse(  CharSequence characterReferenceText){     return construct(new Source(characterReferenceText,true),0,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL);   }   public static int getCodePointFromCharacterReferenceString(  CharSequence characterReferenceText){     CharacterReference characterReference=parse(characterReferenceText);     if (characterReference != null) {       return characterReference.getCodePoint();     }     return -1;   }   public static final boolean requiresEncoding(  char ch){     return ch > 127 || (CharacterEntityReference.getName(ch) != null && (ch != '\'' || Config.IsApostropheEncoded));   }   public static Writer getEncodingFilterWriter(  Writer writer){     return new EncodingFilterWriter(writer);   } private static final class EncodingFilterWriter extends FilterWriter {     StringBuilder sb;     public EncodingFilterWriter(    Writer writer){       super(writer);       this.sb=new StringBuilder(CharacterReference.MAX_ENTITY_REFERENCE_LENGTH);     }     public void write(    char ch) throws IOException {       this.sb.setLength(0);       CharacterReference.appendEncode(this.sb,ch);       if (this.sb.length() == 1) {         this.out.write(this.sb.charAt(0));       }  else {         this.out.append((CharSequence)this.sb);       }     }     @Override public void write(    int chInt) throws IOException {       write((char)chInt);     }     @Override public void write(    char[] cbuf,    int off,    int len) throws IOException {       int end=off + len;       for (int i=off; i < end; i++) {         write(cbuf[i]);       }     }     @Override public void write(    String str,    int off,    int len) throws IOException {       int end=off + len;       for (int i=off; i < end; i++) {         write(str.charAt(i));       }     }   }   public static Appendable appendEncode(  Appendable appendable,  char ch) throws IOException {     return appendEncodeCheckForWhiteSpaceFormatting(appendable,ch,false) ? appendable : appendable.append(ch);   }   public static Appendable appendEncode(  Appendable appendable,  CharSequence unencodedText,  boolean whiteSpaceFormatting) throws IOException {     int spaceCount;     if (unencodedText != null) {       int beginPos=0;       int endPos=unencodedText.length();       if (unencodedText instanceof Segment) {         Segment segment=(Segment)unencodedText;         int segmentOffset=segment.getBegin();         beginPos=segmentOffset;         endPos+=segmentOffset;         unencodedText=segment.source;       }       boolean z=Config.IsApostropheEncoded;       int i=beginPos;       while (i < endPos) {         char ch=unencodedText.charAt(i);         if (!appendEncodeCheckForWhiteSpaceFormatting(appendable,ch,whiteSpaceFormatting)) {           int nexti=i + 1;           if (ch != ' ') {             if (ch != '\t') {               if (ch == '\r' && nexti < endPos && unencodedText.charAt(nexti) == '\n') {                 i++;               }               appendable.append(""<br />"");             }  else {               spaceCount=4;             }           }  else {             spaceCount=1;           }           while (nexti < endPos) {             char ch2=unencodedText.charAt(nexti);             if (ch2 == ' ') {               spaceCount++;             }  else {               if (ch2 != '\t') {                 break;               }               spaceCount+=4;             }             nexti++;           }           if (spaceCount == 1) {             appendable.append(' ');           }  else {             if (spaceCount % 2 == 1) {               appendable.append(' ');             }             while (spaceCount >= 2) {               appendable.append(""&nbsp; "");               spaceCount-=2;             }             i=nexti - 1;           }         }         i++;       }     }     return appendable;   }   private static final boolean appendEncodeCheckForWhiteSpaceFormatting(  Appendable appendable,  char ch,  boolean whiteSpaceFormatting) throws IOException {     String characterEntityReferenceName=CharacterEntityReference.getName(ch);     if (characterEntityReferenceName != null) {       if (ch == '\'') {         if (Config.IsApostropheEncoded) {           appendable.append(""&#39;"");         }  else {           appendable.append(ch);         }       }  else {         CharacterEntityReference.appendCharacterReferenceString(appendable,characterEntityReferenceName);       }     }  else     if (ch > 127) {       appendDecimalCharacterReferenceString(appendable,ch);     }  else     if (!whiteSpaceFormatting || !isWhiteSpace(ch)) {       appendable.append(ch);     }  else {       return false;     }     return true;   }   public static CharacterReference getPrevious(  Source source,  int pos){     return getPrevious(source,pos,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL);   }   public static CharacterReference getNext(  Source source,  int pos){     return getNext(source,pos,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL);   }   private static CharacterReference getPrevious(  Source source,  int pos,  Config.UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettings){     ParseText parseText=source.getParseText();     for (int pos2=parseText.lastIndexOf(CharacterEntityReference._amp,pos); pos2 != -1; pos2=parseText.lastIndexOf(CharacterEntityReference._amp,pos2 - 1)) {       CharacterReference characterReference=construct(source,pos2,unterminatedCharacterReferenceSettings);       if (characterReference != null) {         return characterReference;       }     }     return null;   }   private static CharacterReference getNext(  Source source,  int pos,  Config.UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettings){     ParseText parseText=source.getParseText();     for (int pos2=parseText.indexOf(CharacterEntityReference._amp,pos); pos2 != -1; pos2=parseText.indexOf(CharacterEntityReference._amp,pos2 + 1)) {       CharacterReference characterReference=construct(source,pos2,unterminatedCharacterReferenceSettings);       if (characterReference != null) {         return characterReference;       }     }     return null;   }   public static final Appendable appendHexadecimalCharacterReferenceString(  Appendable appendable,  int codePoint) throws IOException {     return appendable.append(""&#x"").append(Integer.toString(codePoint,16)).append(';');   }   public static final Appendable appendDecimalCharacterReferenceString(  Appendable appendable,  int codePoint) throws IOException {     return appendable.append(""&#"").append(Integer.toString(codePoint)).append(';');   }   public static CharacterReference construct(  Source source,  int begin,  Config.UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettings){     CharacterReference characterReference=null;     try {       if (source.getParseText().charAt(begin) == '&') {         characterReference=source.getParseText().charAt(begin + 1) == '#' ? NumericCharacterReference.construct(source,begin,unterminatedCharacterReferenceSettings) : CharacterEntityReference.construct(source,begin,unterminatedCharacterReferenceSettings.characterEntityReferenceMaxCodePoint);       }     }  catch (    IndexOutOfBoundsException e) {     }     return characterReference;   }   private static Appendable appendDecode(  Appendable appendable,  CharSequence encodedText,  int pos,  boolean insideAttributeValue,  boolean convertNonBreakingSpaces) throws IOException {     Config.CurrentCompatibilityMode.getUnterminatedCharacterReferenceSettings(insideAttributeValue);     StreamedSource streamedSource=new StreamedSource(encodedText).setHandleTags(false).setSearchBegin(pos);     Iterator i$=streamedSource.iterator();     while (i$.hasNext()) {       Segment segment=i$.next();       if (segment instanceof CharacterReference) {         ((CharacterReference)segment).appendCharTo(appendable,convertNonBreakingSpaces);       }  else {         appendable.append(segment.toString());       }     }     return appendable;   }   private static char getHighSurrogate(  int codePoint){     return (char)(55232 + (codePoint >> 10));   }   private static char getLowSurrogate(  int codePoint){     return (char)(56320 + (codePoint & 1023));   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharOutputSegment.code","final class CharOutputSegment implements OutputSegment {   private final int begin;   private final char ch;   private final int end;   public CharOutputSegment(  int begin,  int end,  char ch){     this.begin=begin;     this.end=end;     this.ch=ch;   }   public CharOutputSegment(  Segment segment,  char ch){     this.begin=segment.begin;     this.end=segment.end;     this.ch=ch;   }   @Override public int getBegin(){     return this.begin;   }   @Override public int getEnd(){     return this.end;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);   }   @Override public void appendTo(  Appendable appendable) throws IOException {     appendable.append(this.ch);   }   @Override public long getEstimatedMaximumOutputLength(){     return 1L;   }   @Override public String toString(){     return Character.toString(this.ch);   }   @Override public String getDebugInfo(){     return ""Replace: (p"" + this.begin + ""-p""+ this.end+ "") ""+ this.ch;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharSequenceParseText.code","class CharSequenceParseText implements ParseText {   private final CharSequence charSequence;   public CharSequenceParseText(  CharSequence charSequence){     this.charSequence=charSequence;   }   @Override public final char charAt(  int index){     char ch=this.charSequence.charAt(index);     return (ch < 'A' || ch > 'Z') ? ch : (char)(ch ^ ' ');   }   @Override public final boolean containsAt(  String str,  int pos){     for (int i=0; i < str.length(); i++) {       if (str.charAt(i) != charAt(pos + i)) {         return false;       }     }     return true;   }   @Override public final int indexOf(  char searchChar,  int fromIndex){     return indexOf(searchChar,fromIndex,-1);   }   @Override public final int indexOf(  char searchChar,  int fromIndex,  int breakAtIndex){     int actualBreakAtIndex=(breakAtIndex == -1 || breakAtIndex > getEnd()) ? getEnd() : breakAtIndex;     for (int i=fromIndex < 0 ? 0 : fromIndex; i < actualBreakAtIndex; i++) {       try {         if (charAt(i) == searchChar) {           return i;         }       }  catch (      IndexOutOfBoundsException e) {       }     }     return -1;   }   @Override public final int indexOf(  String searchString,  int fromIndex){     return indexOf(searchString,fromIndex,-1);   }   @Override public final int indexOf(  String searchString,  int fromIndex,  int breakAtIndex){     if (searchString.length() == 1) {       return indexOf(searchString.charAt(0),fromIndex,breakAtIndex);     }     if (searchString.length() != 0) {       char firstChar=searchString.charAt(0);       int lastPossibleBreakAtIndex=(getEnd() - searchString.length()) + 1;       int actualBreakAtIndex=(breakAtIndex == -1 || breakAtIndex > lastPossibleBreakAtIndex) ? lastPossibleBreakAtIndex : breakAtIndex;       for (int i=fromIndex >= 0 ? fromIndex : 0; i < actualBreakAtIndex; i++) {         if (charAt(i) == firstChar) {           for (int j=1; j < searchString.length(); j++) {             if (searchString.charAt(j) != charAt(j + i)) {               break;             }           }           return i;         }       }       return -1;     }     return fromIndex;   }   @Override public final int lastIndexOf(  char searchChar,  int fromIndex){     return lastIndexOf(searchChar,fromIndex,-1);   }   @Override public final int lastIndexOf(  char searchChar,  int fromIndex,  int breakAtIndex){     for (int i=fromIndex > getEnd() ? getEnd() : fromIndex; i > breakAtIndex; i--) {       if (charAt(i) == searchChar) {         return i;       }     }     return -1;   }   @Override public final int lastIndexOf(  String searchString,  int fromIndex){     return lastIndexOf(searchString,fromIndex,-1);   }   @Override public final int lastIndexOf(  String searchString,  int fromIndex,  int breakAtIndex){     if (searchString.length() == 1) {       return lastIndexOf(searchString.charAt(0),fromIndex,breakAtIndex);     }     if (searchString.length() == 0) {       return fromIndex;     }     int rightIndex=getEnd() - searchString.length();     if (breakAtIndex > rightIndex) {       return -1;     }     if (fromIndex > rightIndex) {       fromIndex=rightIndex;     }     int lastCharIndex=searchString.length() - 1;     char lastChar=searchString.charAt(lastCharIndex);     int actualBreakAtPos=breakAtIndex + lastCharIndex;     for (int i=fromIndex + lastCharIndex; i > actualBreakAtPos; i--) {       if (charAt(i) == lastChar) {         int startIndex=i - lastCharIndex;         for (int j=lastCharIndex - 1; j >= 0; j--) {           if (searchString.charAt(j) != charAt(j + startIndex)) {             break;           }         }         return startIndex;       }     }     return -1;   }   @Override public final int length(){     return this.charSequence.length();   }   @Override public final CharSequence subSequence(  int begin,  int end){     return substring(begin,end);   }   @Override public final String toString(){     return this.charSequence.toString();   }   protected int getEnd(){     return this.charSequence.length();   }   protected String substring(  int begin,  int end){     return this.charSequence.subSequence(begin,end).toString().toLowerCase();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharStreamSource.code","public interface CharStreamSource {   void appendTo(  Appendable appendable) throws IOException ;   long getEstimatedMaximumOutputLength();   String toString();   void writeTo(  Writer writer) throws IOException ; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CharStreamSourceUtil.code","public final class CharStreamSourceUtil {   private static final int DEFAULT_ESTIMATED_MAXIMUM_OUTPUT_LENGTH=2048;   private CharStreamSourceUtil(){   }   public static Reader getReader(  CharStreamSource charStreamSource){     return new StringReader(toString(charStreamSource));   }   public static String toString(  CharStreamSource charStreamSource){     long estimatedMaximumOutputLength=charStreamSource.getEstimatedMaximumOutputLength();     if (estimatedMaximumOutputLength <= -1) {       estimatedMaximumOutputLength=2048;     }     StringBuilder sb=new StringBuilder((int)estimatedMaximumOutputLength);     try {       charStreamSource.appendTo(sb);       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Column.code","public static class Column {   public FormField formField;   public boolean isBoolean;   public String predefinedValue;   public Column(  FormField formField,  boolean isBoolean,  String predefinedValue){     this.formField=formField;     this.isBoolean=isBoolean;     this.predefinedValue=predefinedValue;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\CompatibilityMode.code","public static final class CompatibilityMode {   public static final int CODE_POINTS_NONE=-1;   private volatile boolean formFieldNameCaseInsensitive;   private String name;   volatile UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsInsideAttributeValue;   volatile UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsOutsideAttributeValue;   public static final int CODE_POINTS_ALL=1114111;   public static final CompatibilityMode IE=new CompatibilityMode(""IE"",true,new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,-1));   public static final CompatibilityMode MOZILLA=new CompatibilityMode(""Mozilla"",false,new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(CODE_POINTS_ALL,CODE_POINTS_ALL,CODE_POINTS_ALL));   public static final CompatibilityMode OPERA=new CompatibilityMode(""Opera"",true,new UnterminatedCharacterReferenceSettings(62,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(CODE_POINTS_ALL,CODE_POINTS_ALL,CODE_POINTS_ALL));   public static final CompatibilityMode XHTML=new CompatibilityMode(""XHTML"");   public CompatibilityMode(  String name){     this(name,false,new UnterminatedCharacterReferenceSettings(),new UnterminatedCharacterReferenceSettings());   }   private CompatibilityMode(  String name,  boolean formFieldNameCaseInsensitive,  UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsInsideAttributeValue,  UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsOutsideAttributeValue){     this.name=name;     this.formFieldNameCaseInsensitive=formFieldNameCaseInsensitive;     this.unterminatedCharacterReferenceSettingsInsideAttributeValue=unterminatedCharacterReferenceSettingsInsideAttributeValue;     this.unterminatedCharacterReferenceSettingsOutsideAttributeValue=unterminatedCharacterReferenceSettingsOutsideAttributeValue;   }   public String getName(){     return this.name;   }   public boolean isFormFieldNameCaseInsensitive(){     return this.formFieldNameCaseInsensitive;   }   public void setFormFieldNameCaseInsensitive(  boolean value){     this.formFieldNameCaseInsensitive=value;   }   public int getUnterminatedCharacterEntityReferenceMaxCodePoint(  boolean insideAttributeValue){     return getUnterminatedCharacterReferenceSettings(insideAttributeValue).characterEntityReferenceMaxCodePoint;   }   public void setUnterminatedCharacterEntityReferenceMaxCodePoint(  boolean insideAttributeValue,  int maxCodePoint){     getUnterminatedCharacterReferenceSettings(insideAttributeValue).characterEntityReferenceMaxCodePoint=maxCodePoint;   }   public int getUnterminatedDecimalCharacterReferenceMaxCodePoint(  boolean insideAttributeValue){     return getUnterminatedCharacterReferenceSettings(insideAttributeValue).decimalCharacterReferenceMaxCodePoint;   }   public void setUnterminatedDecimalCharacterReferenceMaxCodePoint(  boolean insideAttributeValue,  int maxCodePoint){     getUnterminatedCharacterReferenceSettings(insideAttributeValue).decimalCharacterReferenceMaxCodePoint=maxCodePoint;   }   public int getUnterminatedHexadecimalCharacterReferenceMaxCodePoint(  boolean insideAttributeValue){     return getUnterminatedCharacterReferenceSettings(insideAttributeValue).hexadecimalCharacterReferenceMaxCodePoint;   }   public void setUnterminatedHexadecimalCharacterReferenceMaxCodePoint(  boolean insideAttributeValue,  int maxCodePoint){     getUnterminatedCharacterReferenceSettings(insideAttributeValue).hexadecimalCharacterReferenceMaxCodePoint=maxCodePoint;   }   public String getDebugInfo(){     return ""Form field name case insensitive: "" + this.formFieldNameCaseInsensitive + Config.NewLine+ ""Maximum codepoints in unterminated character references:""+ Config.NewLine+ ""  Inside attribute values:""+ this.unterminatedCharacterReferenceSettingsInsideAttributeValue+ Config.NewLine+ ""  Outside attribute values:""+ this.unterminatedCharacterReferenceSettingsOutsideAttributeValue;   }   public String toString(){     return getName();   }   public UnterminatedCharacterReferenceSettings getUnterminatedCharacterReferenceSettings(  boolean insideAttributeValue){     return insideAttributeValue ? this.unterminatedCharacterReferenceSettingsInsideAttributeValue : this.unterminatedCharacterReferenceSettingsOutsideAttributeValue;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Config.code","public final class Config {   static final boolean IncludeServerTagsInElementHierarchy=false;   public static String ColumnMultipleValueSeparator="","";   public static String ColumnValueTrue=Boolean.toString(true);   public static String ColumnValueFalse=null;   public static boolean ConvertNonBreakingSpaces=true;   public static CompatibilityMode CurrentCompatibilityMode=CompatibilityMode.IE;   public static boolean IsApostropheEncoded=false;   public static LoggerProvider LoggerProvider=null;   public static String NewLine=System.getProperty(""line.separator"");   private Config(){   } public static class UnterminatedCharacterReferenceSettings {     public static UnterminatedCharacterReferenceSettings ACCEPT_ALL=new UnterminatedCharacterReferenceSettings(CompatibilityMode.CODE_POINTS_ALL,CompatibilityMode.CODE_POINTS_ALL,CompatibilityMode.CODE_POINTS_ALL);     public volatile int characterEntityReferenceMaxCodePoint;     public volatile int decimalCharacterReferenceMaxCodePoint;     public volatile int hexadecimalCharacterReferenceMaxCodePoint;     public UnterminatedCharacterReferenceSettings(){       this(-1,-1,-1);     }     public UnterminatedCharacterReferenceSettings(    int characterEntityReferenceMaxCodePoint,    int decimalCharacterReferenceMaxCodePoint,    int hexadecimalCharacterReferenceMaxCodePoint){       this.characterEntityReferenceMaxCodePoint=characterEntityReferenceMaxCodePoint;       this.decimalCharacterReferenceMaxCodePoint=decimalCharacterReferenceMaxCodePoint;       this.hexadecimalCharacterReferenceMaxCodePoint=hexadecimalCharacterReferenceMaxCodePoint;     }     public String toString(){       return Config.NewLine + ""    Character entity reference: "" + getDescription(this.characterEntityReferenceMaxCodePoint)+ Config.NewLine+ ""    Decimal character reference: ""+ getDescription(this.decimalCharacterReferenceMaxCodePoint)+ Config.NewLine+ ""    Haxadecimal character reference: ""+ getDescription(this.hexadecimalCharacterReferenceMaxCodePoint);     }     private String getDescription(    int codePoint){       return codePoint == -1 ? ""None"" : codePoint == 1114111 ? ""All"" : ""0x"" + Integer.toString(codePoint,16);     }   } public static final class CompatibilityMode {     public static final int CODE_POINTS_NONE=-1;     private volatile boolean formFieldNameCaseInsensitive;     private String name;     volatile UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsInsideAttributeValue;     volatile UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsOutsideAttributeValue;     public static final int CODE_POINTS_ALL=1114111;     public static final CompatibilityMode IE=new CompatibilityMode(""IE"",true,new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,-1));     public static final CompatibilityMode MOZILLA=new CompatibilityMode(""Mozilla"",false,new UnterminatedCharacterReferenceSettings(MotionEventCompat.ACTION_MASK,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(CODE_POINTS_ALL,CODE_POINTS_ALL,CODE_POINTS_ALL));     public static final CompatibilityMode OPERA=new CompatibilityMode(""Opera"",true,new UnterminatedCharacterReferenceSettings(62,CODE_POINTS_ALL,CODE_POINTS_ALL),new UnterminatedCharacterReferenceSettings(CODE_POINTS_ALL,CODE_POINTS_ALL,CODE_POINTS_ALL));     public static final CompatibilityMode XHTML=new CompatibilityMode(""XHTML"");     public CompatibilityMode(    String name){       this(name,false,new UnterminatedCharacterReferenceSettings(),new UnterminatedCharacterReferenceSettings());     }     private CompatibilityMode(    String name,    boolean formFieldNameCaseInsensitive,    UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsInsideAttributeValue,    UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettingsOutsideAttributeValue){       this.name=name;       this.formFieldNameCaseInsensitive=formFieldNameCaseInsensitive;       this.unterminatedCharacterReferenceSettingsInsideAttributeValue=unterminatedCharacterReferenceSettingsInsideAttributeValue;       this.unterminatedCharacterReferenceSettingsOutsideAttributeValue=unterminatedCharacterReferenceSettingsOutsideAttributeValue;     }     public String getName(){       return this.name;     }     public boolean isFormFieldNameCaseInsensitive(){       return this.formFieldNameCaseInsensitive;     }     public void setFormFieldNameCaseInsensitive(    boolean value){       this.formFieldNameCaseInsensitive=value;     }     public int getUnterminatedCharacterEntityReferenceMaxCodePoint(    boolean insideAttributeValue){       return getUnterminatedCharacterReferenceSettings(insideAttributeValue).characterEntityReferenceMaxCodePoint;     }     public void setUnterminatedCharacterEntityReferenceMaxCodePoint(    boolean insideAttributeValue,    int maxCodePoint){       getUnterminatedCharacterReferenceSettings(insideAttributeValue).characterEntityReferenceMaxCodePoint=maxCodePoint;     }     public int getUnterminatedDecimalCharacterReferenceMaxCodePoint(    boolean insideAttributeValue){       return getUnterminatedCharacterReferenceSettings(insideAttributeValue).decimalCharacterReferenceMaxCodePoint;     }     public void setUnterminatedDecimalCharacterReferenceMaxCodePoint(    boolean insideAttributeValue,    int maxCodePoint){       getUnterminatedCharacterReferenceSettings(insideAttributeValue).decimalCharacterReferenceMaxCodePoint=maxCodePoint;     }     public int getUnterminatedHexadecimalCharacterReferenceMaxCodePoint(    boolean insideAttributeValue){       return getUnterminatedCharacterReferenceSettings(insideAttributeValue).hexadecimalCharacterReferenceMaxCodePoint;     }     public void setUnterminatedHexadecimalCharacterReferenceMaxCodePoint(    boolean insideAttributeValue,    int maxCodePoint){       getUnterminatedCharacterReferenceSettings(insideAttributeValue).hexadecimalCharacterReferenceMaxCodePoint=maxCodePoint;     }     public String getDebugInfo(){       return ""Form field name case insensitive: "" + this.formFieldNameCaseInsensitive + Config.NewLine+ ""Maximum codepoints in unterminated character references:""+ Config.NewLine+ ""  Inside attribute values:""+ this.unterminatedCharacterReferenceSettingsInsideAttributeValue+ Config.NewLine+ ""  Outside attribute values:""+ this.unterminatedCharacterReferenceSettingsOutsideAttributeValue;     }     public String toString(){       return getName();     }     public UnterminatedCharacterReferenceSettings getUnterminatedCharacterReferenceSettings(    boolean insideAttributeValue){       return insideAttributeValue ? this.unterminatedCharacterReferenceSettingsInsideAttributeValue : this.unterminatedCharacterReferenceSettingsOutsideAttributeValue;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ConfigDisplayValue.code","public static final class ConfigDisplayValue {   public static volatile String MultipleValueSeparator="", "";   public static volatile String ElementName=HTMLElementName.DIV;   public static volatile List<String> AttributeNames=new ArrayList(Arrays.asList(""id"",""class"",HTMLElementName.STYLE));   public static volatile String EmptyHTML=""&nbsp;"";   public static volatile char PasswordChar='*';   public static volatile String CheckedHTML=null;   public static volatile String UncheckedHTML=null;   private ConfigDisplayValue(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Element.code","public final class Element extends Segment {   private static final boolean INCLUDE_INCORRECTLY_NESTED_CHILDREN_IN_HIERARCHY=true;   static final Element NOT_CACHED=new Element();   private List<Element> childElements;   private Segment content;   private int depth;   private final EndTag endTag;   Element parentElement;   private final StartTag startTag;   public Element(  Source source,  StartTag startTag,  EndTag endTag){     super(source,startTag.begin,endTag == null ? startTag.end : endTag.end);     this.content=null;     this.parentElement=NOT_CACHED;     this.depth=-1;     this.childElements=null;     if (source.isStreamed()) {       throw new UnsupportedOperationException(""Elements are not supported when using StreamedSource"");     }     this.startTag=startTag;     this.endTag=(endTag == null || endTag.length() == 0) ? null : endTag;   }   private Element(){     this.content=null;     this.parentElement=NOT_CACHED;     this.depth=-1;     this.childElements=null;     this.startTag=null;     this.endTag=null;   }   public Element getParentElement(){     if (this.parentElement == NOT_CACHED) {       if (!this.source.wasFullSequentialParseCalled()) {         throw new IllegalStateException(""This operation is only possible after a full sequential parse has been performed"");       }       if (this.startTag.isOrphaned()) {         throw new IllegalStateException(""This operation is only possible if a full sequential parse was performed immediately after construction of the Source object"");       }       this.source.getChildElements();       if (this.parentElement == NOT_CACHED) {         this.parentElement=null;       }     }     return this.parentElement;   }   @Override public final List<Element> getChildElements(){     return this.childElements != null ? this.childElements : getChildElements(-1);   }   public final List<Element> getChildElements(  int depth){     if (depth != -1) {       this.depth=depth;     }     if (this.childElements == null) {       if (this.end == this.startTag.end) {         this.childElements=Collections.emptyList();       }  else {         int childDepth=depth != -1 ? depth + 1 : -1;         this.childElements=new ArrayList();         int pos=this.startTag.end;         int maxChildBegin=this.endTag == null ? this.end : this.endTag.begin;         while (true) {           StartTag childStartTag=this.source.getNextStartTag(pos);           if (childStartTag == null || childStartTag.begin >= maxChildBegin) {             break;           }           if (childStartTag.getTagType().isServerTag()) {             pos=childStartTag.end;           }  else {             Element childElement=childStartTag.getElement();             if (childElement.end > this.end && this.source.logger.isInfoEnabled()) {               this.source.logger.info(""Child "" + childElement.getDebugInfo() + "" extends beyond end of parent ""+ getDebugInfo());             }             childElement.getChildElements(childDepth);             if (childElement.parentElement == NOT_CACHED) {               childElement.parentElement=this;               this.childElements.add(childElement);             }             pos=childElement.end;           }         }       }     }     return this.childElements;   }   public int getDepth(){     if (this.depth == -1) {       getParentElement();       if (this.depth == -1) {         this.depth=0;       }     }     return this.depth;   }   public Segment getContent(){     if (this.content == null) {       this.content=new Segment(this.source,this.startTag.end,getContentEnd());     }     return this.content;   }   public StartTag getStartTag(){     return this.startTag;   }   public EndTag getEndTag(){     return this.endTag;   }   public String getName(){     return this.startTag.getName();   }   public boolean isEmpty(){     return this.startTag.end == getContentEnd();   }   public boolean isEmptyElementTag(){     return this.startTag.isEmptyElementTag();   }   public Attributes getAttributes(){     return getStartTag().getAttributes();   }   public String getAttributeValue(  String attributeName){     return getStartTag().getAttributeValue(attributeName);   }   public FormControl getFormControl(){     return FormControl.construct(this);   }   @Override public String getDebugInfo(){     if (this == NOT_CACHED) {       return ""NOT_CACHED"";     }     StringBuilder sb=new StringBuilder();     sb.append(""Element "");     this.startTag.appendDebugTag(sb);     if (!isEmpty()) {       sb.append('-');     }     if (this.endTag != null) {       sb.append((CharSequence)this.endTag);     }     sb.append(' ');     this.startTag.appendDebugTagType(sb);     sb.append(super.getDebugInfo());     return sb.toString();   }   public int getContentEnd(){     return this.endTag != null ? this.endTag.begin : this.end;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ElementContainer.code","public static final class ElementContainer {   public Map<String,String> attributesMap=null;   public final Element element;   public String predefinedValue;   public ElementContainer(  Element element,  boolean loadPredefinedValue){     this.element=element;     this.predefinedValue=loadPredefinedValue ? element.getAttributes().getValue(""value"") : null;   }   public Map<String,String> getAttributesMap(){     if (this.attributesMap == null) {       this.attributesMap=this.element.getAttributes().getMap(true);     }     return this.attributesMap;   }   public boolean setSelected(  String value,  String selectedOrChecked,  boolean allowMultipleValues){     if (value != null && this.predefinedValue.equals(value.toString())) {       setBooleanAttribute(selectedOrChecked,true);       return true;     }     if (!allowMultipleValues) {       setBooleanAttribute(selectedOrChecked,false);     }     return false;   }   public String getAttributeValue(  String attributeName){     return this.attributesMap != null ? this.attributesMap.get(attributeName) : this.element.getAttributes().getValue(attributeName);   }   public void setAttributeValue(  String attributeName,  String value){     if (value == null) {       setBooleanAttribute(attributeName,false);       return;     }     if (this.attributesMap != null) {       this.attributesMap.put(attributeName,value);       return;     }     String existingValue=getAttributeValue(attributeName);     if (existingValue == null || !existingValue.equals(value)) {       getAttributesMap().put(attributeName,value);     }   }   public boolean getBooleanAttribute(  String attributeName){     if (this.attributesMap != null) {       return this.attributesMap.containsKey(attributeName);     }     return this.element.getAttributes().get(attributeName) != null;   }   public void setBooleanAttribute(  String attributeName,  boolean value){     boolean oldValue=getBooleanAttribute(attributeName);     if (value != oldValue) {       if (value) {         getAttributesMap().put(attributeName,attributeName);       }  else {         getAttributesMap().remove(attributeName);       }     }   }   public void replaceAttributesInOutputDocumentIfModified(  OutputDocument outputDocument){     if (this.attributesMap != null) {       outputDocument.replace(this.element.getAttributes(),this.attributesMap);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ElementHandler.code","public interface ElementHandler {   void process(  Processor processor,  Element element) throws IOException ; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EncodingDetector.code","public final class EncodingDetector {   private static final String ISO_8859_1=""ISO-8859-1"";   private static final int PREVIEW_BYTE_COUNT=2048;   private static final String UTF_8=""UTF-8"";   private final String alternativePreliminaryEncoding;   private String encoding;   private String encodingSpecificationInfo;   private final InputStream inputStream;   private final String preliminaryEncoding;   private final String preliminaryEncodingSpecificationInfo;   public EncodingDetector(  URLConnection urlConnection) throws IOException {     this(new StreamEncodingDetector(urlConnection));   }   public EncodingDetector(  InputStream inputStream) throws IOException {     this(new StreamEncodingDetector(inputStream));   }   public EncodingDetector(  InputStream inputStream,  String preliminaryEncoding) throws IOException {     this(inputStream,preliminaryEncoding,""preliminary encoding set explicitly"",null);     if (!Charset.isSupported(preliminaryEncoding)) {       throw new UnsupportedEncodingException(preliminaryEncoding + "" specified as preliminaryEncoding constructor argument"");     }     detectDocumentSpecifiedEncoding();   }   private EncodingDetector(  StreamEncodingDetector streamEncodingDetector) throws IOException {     this(streamEncodingDetector,ISO_8859_1);   }   private EncodingDetector(  StreamEncodingDetector streamEncodingDetector,  String alternativePreliminaryEncoding) throws IOException {     this(streamEncodingDetector.getInputStream(),streamEncodingDetector.getEncoding(),streamEncodingDetector.getEncodingSpecificationInfo(),alternativePreliminaryEncoding);     if (streamEncodingDetector.isDifinitive() || !streamEncodingDetector.isDocumentSpecifiedEncodingPossible()) {       setEncoding(this.preliminaryEncoding,this.preliminaryEncodingSpecificationInfo);     }  else {       detectDocumentSpecifiedEncoding();     }   }   private EncodingDetector(  InputStream inputStream,  String preliminaryEncoding,  String preliminaryEncodingSpecificationInfo,  String alternativePreliminaryEncoding) throws IOException {     this.encoding=null;     this.encodingSpecificationInfo=null;     this.inputStream=inputStream.markSupported() ? inputStream : new BufferedInputStream(inputStream);     this.preliminaryEncoding=preliminaryEncoding;     this.preliminaryEncodingSpecificationInfo=preliminaryEncodingSpecificationInfo;     this.alternativePreliminaryEncoding=alternativePreliminaryEncoding;     if (alternativePreliminaryEncoding != null && !Charset.isSupported(alternativePreliminaryEncoding)) {       throw new UnsupportedEncodingException(alternativePreliminaryEncoding + "" specified as alternativePreliminaryEncoding constructor argument"");     }   }   public InputStream getInputStream(){     return this.inputStream;   }   public String getEncoding(){     return this.encoding;   }   public String getEncodingSpecificationInfo(){     return this.encodingSpecificationInfo;   }   public String getPreliminaryEncoding(){     return this.preliminaryEncoding;   }   public String getPreliminaryEncodingSpecificationInfo(){     return this.preliminaryEncodingSpecificationInfo;   }   public Reader openReader() throws UnsupportedEncodingException {     if (this.encoding == null) {       return new InputStreamReader(this.inputStream,ISO_8859_1);     }     if (!Charset.isSupported(this.encoding)) {       throw new UnsupportedEncodingException(this.encoding + "": "" + this.encodingSpecificationInfo);     }     return new InputStreamReader(this.inputStream,this.encoding);   }   private boolean setEncoding(  String encoding,  String encodingSpecificationInfo){     this.encoding=encoding;     this.encodingSpecificationInfo=encodingSpecificationInfo;     return true;   }   private boolean detectDocumentSpecifiedEncoding() throws IOException {     String safePreliminaryEncoding;     String documentSpecifiedEncodingInfoSuffix;     this.inputStream.mark(2048);     if (Charset.isSupported(this.preliminaryEncoding)) {       safePreliminaryEncoding=this.preliminaryEncoding;     }  else {       if (this.alternativePreliminaryEncoding == null) {         throw new UnsupportedEncodingException(this.preliminaryEncoding + "": "" + this.preliminaryEncodingSpecificationInfo);       }       safePreliminaryEncoding=this.alternativePreliminaryEncoding;     }     Source previewSource=getPreviewSource(safePreliminaryEncoding);     this.inputStream.reset();     Logger logger=previewSource.getLogger();     previewSource.setLogger(null);     if (this.preliminaryEncoding != safePreliminaryEncoding && logger.isWarnEnabled()) {       logger.warn(""Alternative encoding "" + safePreliminaryEncoding + "" substituted for unsupported preliminary encoding ""+ this.preliminaryEncoding+ "": ""+ this.preliminaryEncodingSpecificationInfo);     }     if (previewSource.getDocumentSpecifiedEncoding() == null) {       if (previewSource.isXML()) {         return setEncoding(UTF_8,""mandatory XML encoding when no BOM or encoding declaration is present"");       }       documentSpecifiedEncodingInfoSuffix=""no encoding specified in document"";     }  else {       if (Charset.isSupported(previewSource.getDocumentSpecifiedEncoding())) {         return setEncoding(previewSource.getDocumentSpecifiedEncoding(),previewSource.getEncodingSpecificationInfo());       }       documentSpecifiedEncodingInfoSuffix=""encoding "" + previewSource.getDocumentSpecifiedEncoding() + "" specified in document is not supported"";       if (logger.isWarnEnabled()) {         logger.warn(""Unsupported encoding "" + previewSource.getDocumentSpecifiedEncoding() + "" specified in document, using preliminary encoding ""+ safePreliminaryEncoding+ "" instead"");       }     }     return this.preliminaryEncoding != safePreliminaryEncoding ? setEncoding(safePreliminaryEncoding,""alternative encoding substituted for unsupported preliminary encoding "" + this.preliminaryEncoding + "": ""+ this.preliminaryEncodingSpecificationInfo+ "", ""+ documentSpecifiedEncodingInfoSuffix) : setEncoding(this.preliminaryEncoding,this.preliminaryEncodingSpecificationInfo + "", "" + documentSpecifiedEncodingInfoSuffix);   }   private Source getPreviewSource(  String previewEncoding) throws IOException {     byte[] bytes=new byte[2048];     int i=0;     while (i < 2048) {       int nextByte=this.inputStream.read();       if (nextByte == -1) {         break;       }       bytes[i]=(byte)nextByte;       i++;     }     return new Source(new InputStreamReader(new ByteArrayInputStream(bytes,0,i),previewEncoding),(String)null);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EncodingFilterWriter.code","private static final class EncodingFilterWriter extends FilterWriter {   StringBuilder sb;   public EncodingFilterWriter(  Writer writer){     super(writer);     this.sb=new StringBuilder(CharacterReference.MAX_ENTITY_REFERENCE_LENGTH);   }   public void write(  char ch) throws IOException {     this.sb.setLength(0);     CharacterReference.appendEncode(this.sb,ch);     if (this.sb.length() == 1) {       this.out.write(this.sb.charAt(0));     }  else {       this.out.append((CharSequence)this.sb);     }   }   @Override public void write(  int chInt) throws IOException {     write((char)chInt);   }   @Override public void write(  char[] cbuf,  int off,  int len) throws IOException {     int end=off + len;     for (int i=off; i < end; i++) {       write(cbuf[i]);     }   }   @Override public void write(  String str,  int off,  int len) throws IOException {     int end=off + len;     for (int i=off; i < end; i++) {       write(str.charAt(i));     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTag.code","public final class EndTag extends Tag {   private final EndTagType endTagType;   public EndTag(  Source source,  int begin,  int end,  EndTagType endTagType,  String name){     super(source,begin,end,name);     this.endTagType=endTagType;   }   @Override public Element getElement(){     if (this.element != Element.NOT_CACHED) {       return this.element;     }     int pos=this.begin;     while (pos != 0) {       StartTag startTag=this.source.getPreviousStartTag(pos - 1);       if (startTag == null) {         break;       }       Element foundElement=startTag.getElement();       if (foundElement.getEndTag() != this) {         pos=startTag.begin;       }  else {         return foundElement;       }     }     this.element=null;     return null;   }   public EndTagType getEndTagType(){     return this.endTagType;   }   @Override public TagType getTagType(){     return this.endTagType;   }   @Override public boolean isUnregistered(){     return this.endTagType == EndTagType.UNREGISTERED;   }   @Override public String tidy(){     return toString();   }   public static String generateHTML(  String tagName){     return EndTagType.NORMAL.generateHTML(tagName);   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append((CharSequence)this).append(' ');     if (this.endTagType != EndTagType.NORMAL) {       sb.append('(').append(this.endTagType.getDescription()).append("") "");     }     sb.append(super.getDebugInfo());     return sb.toString();   }   public static EndTag getPrevious(  Source source,  int pos,  String name,  EndTagType endTagType){     if (name == null) {       return (EndTag)Tag.getPreviousTag(source,pos,endTagType);     }     if (name.length() == 0) {       throw new IllegalArgumentException(""name argument must not be zero length"");     }     String searchString=""</"" + name;     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.lastIndexOf(searchString,begin);         if (begin2 == -1) {           return null;         }         EndTag endTag=(EndTag)source.getTagAt(begin2);         if (endTag != null && endTag.getEndTagType() == endTagType && name.equals(endTag.getName())) {           return endTag;         }         begin=begin2 - 1;       }  while (begin >= 0);       return null;     }  catch (    IndexOutOfBoundsException ex) {       throw ex;     }   }   public static EndTag getNext(  Source source,  int pos,  String name,  EndTagType endTagType){     if (name == null) {       return (EndTag)Tag.getNextTag(source,pos,endTagType);     }     if (name.length() == 0) {       throw new IllegalArgumentException(""name argument must not be zero length"");     }     String searchString=""</"" + name;     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.indexOf(searchString,begin);         if (begin2 == -1) {           return null;         }         EndTag endTag=(EndTag)source.getTagAt(begin2);         if (endTag != null && endTag.getEndTagType() == endTagType && name.equals(endTag.getName())) {           return endTag;         }         begin=begin2 + 1;       }  while (begin < source.end);       return null;     }  catch (    IndexOutOfBoundsException e) {       return null;     }   }   public static EndTag getPrevious(  Source source,  int pos){     while (true) {       Tag tag=Tag.getPreviousTag(source,pos);       if (tag == null) {         return null;       }       if (tag instanceof EndTag) {         return (EndTag)tag;       }       pos--;     }   }   public static EndTag getNext(  Source source,  int pos){     while (true) {       Tag tag=Tag.getNextTag(source,pos);       if (tag == null) {         return null;       }       if (tag instanceof EndTag) {         return (EndTag)tag;       }       pos++;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagType.code","public abstract class EndTagType extends TagType {   static final String START_DELIMITER_PREFIX=""</"";   public static final EndTagType UNREGISTERED=EndTagTypeUnregistered.INSTANCE;   public static final EndTagType NORMAL=EndTagTypeNormal.INSTANCE;   public EndTagType(  String description,  String startDelimiter,  String closingDelimiter,  boolean isServerTag){     super(description,startDelimiter.toLowerCase(),closingDelimiter,isServerTag,START_DELIMITER_PREFIX);     if (!getStartDelimiter().startsWith(START_DELIMITER_PREFIX)) {       throw new IllegalArgumentException(""startDelimiter of an end tag must start with \""</\"""");     }   }   public StartTagType getCorrespondingStartTagType(){     return null;   }   public String getEndTagName(  String startTagName){     return startTagName;   }   public String generateHTML(  String startTagName){     return START_DELIMITER_PREFIX + getEndTagName(startTagName) + getClosingDelimiter();   }   public final EndTag constructEndTag(  Source source,  int begin,  int end,  String name){     return new EndTag(source,begin,end,this,name);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagTypeGenericImplementation.code","public class EndTagTypeGenericImplementation extends EndTagType {   private final String staticString;   public EndTagTypeGenericImplementation(  String description,  String startDelimiter,  String closingDelimiter,  boolean isServerTag,  boolean isStatic){     super(description,startDelimiter,closingDelimiter,isServerTag);     this.staticString=isStatic ? startDelimiter + closingDelimiter : null;   }   protected final boolean isStatic(){     return this.staticString != null;   }   @Override public String getEndTagName(  String startTagName){     if (!isStatic()) {       return startTagName;     }     String startTagName2=getNamePrefix();     return startTagName2;   }   @Override public String generateHTML(  String startTagName){     return isStatic() ? this.staticString : super.generateHTML(startTagName);   }   @Override protected Tag constructTagAt(  Source source,  int pos){     String name;     int end;     ParseText parseText=source.getParseText();     int nameBegin=pos + ""</"".length();     int startDelimiterEnd=pos + getStartDelimiter().length();     if (isStatic()) {       name=getNamePrefix();       if (!parseText.containsAt(getClosingDelimiter(),startDelimiterEnd)) {         if (!source.logger.isInfoEnabled()) {           return null;         }         source.logger.info(source.getRowColumnVector(pos).appendTo(new StringBuilder(200).append(""EndTag of expected format "").append(this.staticString).append("" at "")).append("" not recognised as type '"").append(getDescription()).append(""' because it is missing the closing delimiter"").toString());         return null;       }       end=startDelimiterEnd + getClosingDelimiter().length();     }  else {       int nameEnd=source.getNameEnd(startDelimiterEnd);       if (nameEnd == -1) {         return null;       }       name=source.getName(nameBegin,nameEnd);       int expectedClosingDelimiterPos=nameEnd;       while (Segment.isWhiteSpace(parseText.charAt(expectedClosingDelimiterPos))) {         expectedClosingDelimiterPos++;       }       if (!parseText.containsAt(getClosingDelimiter(),expectedClosingDelimiterPos)) {         if (!source.logger.isInfoEnabled()) {           return null;         }         source.logger.info(source.getRowColumnVector(pos).appendTo(new StringBuilder(200).append(""EndTag "").append(name).append("" at "")).append("" not recognised as type '"").append(getDescription()).append(""' because its name and closing delimiter are separated by characters other than white space"").toString());         return null;       }       end=expectedClosingDelimiterPos + getClosingDelimiter().length();     }     return constructEndTag(source,pos,end,name);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagTypeMasonComponentCalledWithContent.code","final class EndTagTypeMasonComponentCalledWithContent extends EndTagTypeGenericImplementation {   protected static final EndTagTypeMasonComponentCalledWithContent INSTANCE=new EndTagTypeMasonComponentCalledWithContent();   private EndTagTypeMasonComponentCalledWithContent(){     super(""/mason component called with content"",""</&"","">"",true,true);   }   @Override public StartTagType getCorrespondingStartTagType(){     return MasonTagTypes.MASON_COMPONENT_CALLED_WITH_CONTENT;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagTypeMasonNamedBlock.code","final class EndTagTypeMasonNamedBlock extends EndTagTypeGenericImplementation {   protected static final EndTagTypeMasonNamedBlock INSTANCE=new EndTagTypeMasonNamedBlock();   private EndTagTypeMasonNamedBlock(){     super(""/mason named block"",""</%"","">"",true,false);   }   @Override public StartTagType getCorrespondingStartTagType(){     return MasonTagTypes.MASON_NAMED_BLOCK;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagTypeNormal.code","final class EndTagTypeNormal extends EndTagTypeGenericImplementation {   static final EndTagTypeNormal INSTANCE=new EndTagTypeNormal();   private EndTagTypeNormal(){     super(""/normal"",""</"","">"",false,false);   }   @Override public StartTagType getCorrespondingStartTagType(){     return StartTagType.NORMAL;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\EndTagTypeUnregistered.code","final class EndTagTypeUnregistered extends EndTagType {   static final EndTagTypeUnregistered INSTANCE=new EndTagTypeUnregistered();   private EndTagTypeUnregistered(){     super(""/unregistered"",""</"","">"",false);   }   @Override protected Tag constructTagAt(  Source source,  int pos){     ParseText parseText=source.getParseText();     int nameBegin=pos + getStartDelimiter().length();     int nameEnd=parseText.indexOf(getClosingDelimiter(),nameBegin);     String name=source.getName(nameBegin,nameEnd);     EndTag endTag=constructEndTag(source,pos,getClosingDelimiter().length() + nameEnd,name);     if (source.logger.isInfoEnabled()) {       source.logger.info(source.getRowColumnVector(pos).appendTo(new StringBuilder(200).append(""Encountered possible EndTag at "")).append("" whose content does not match a registered EndTagType"").toString());     }     return endTag;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Entry.code","public static final class Entry {   final int key;   Entry next;   String value;   public Entry(  int key,  String value,  Entry next){     this.key=key;     this.value=value;     this.next=next;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\FontStyleElementHandler.code","private static class FontStyleElementHandler implements ElementHandler {   private final char decorationChar;   public static final ElementHandler INSTANCE_B=new FontStyleElementHandler('*');   public static final ElementHandler INSTANCE_I=new FontStyleElementHandler('/');   public static final ElementHandler INSTANCE_U=new FontStyleElementHandler('_');   public static final ElementHandler INSTANCE_CODE=new FontStyleElementHandler('|');   public FontStyleElementHandler(  char decorationChar){     this.decorationChar=decorationChar;   }   @Override public void process(  Processor x,  Element element) throws IOException {     if (x.decorateFontStyles) {       if (x.lastCharWhiteSpace) {         x.append(' ');         x.lastCharWhiteSpace=Processor.$assertionsDisabled;       }       x.append(this.decorationChar);       x.appendElementContent(element);       if (x.decorateFontStyles) {         x.append(this.decorationChar);         return;       }       return;     }     x.appendElementContent(element);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\FormControl.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2cb39afa"
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\FormField.code","public final class FormField {   int columnIndex;   private final String name;   private int userValueCount=0;   private boolean allowsMultipleValues=false;   private LinkedHashSet<String> predefinedValues=null;   private final LinkedHashSet<FormControl> formControls=new LinkedHashSet<>();   private transient FormControl firstFormControl=null;   public FormField(  String name){     this.name=name;   }   public String getName(){     return this.name;   }   public Collection<FormControl> getFormControls(){     return this.formControls;   }   public FormControl getFormControl(  String predefinedValue){     if (predefinedValue == null) {       Iterator i$=this.formControls.iterator();       while (i$.hasNext()) {         FormControl formControl=i$.next();         if (formControl.getFormControlType().hasPredefinedValue()) {           if (formControl.getFormControlType().getElementName() != HTMLElementName.SELECT && formControl.getPredefinedValue() == null) {             return formControl;           }         }  else {           return formControl;         }       }     }  else {       Iterator i$2=this.formControls.iterator();       while (i$2.hasNext()) {         FormControl formControl2=i$2.next();         if (formControl2.getFormControlType().getElementName() == HTMLElementName.SELECT) {           if (formControl2.getPredefinedValues().contains(predefinedValue)) {             return formControl2;           }         }  else         if (predefinedValue.equals(formControl2.getPredefinedValue())) {           return formControl2;         }       }     }     return null;   }   public FormControl getFormControl(){     return this.formControls.iterator().next();   }   public boolean allowsMultipleValues(){     return this.allowsMultipleValues;   }   public int getUserValueCount(){     return this.userValueCount;   }   public Collection<String> getPredefinedValues(){     return this.predefinedValues == null ? Collections.emptySet() : this.predefinedValues;   }   public List<String> getValues(){     List<String> values=new ArrayList<>();     Iterator i$=this.formControls.iterator();     while (i$.hasNext()) {       FormControl formControl=i$.next();       formControl.addValuesTo(values);     }     return values;   }   public void clearValues(){     Iterator i$=this.formControls.iterator();     while (i$.hasNext()) {       FormControl formControl=i$.next();       formControl.clearValues();     }   }   public void setValues(  Collection<String> values){     clearValues();     addValues(values);   }   public boolean setValue(  String value){     clearValues();     if (value != null) {       return addValue(value);     }     return true;   }   public boolean addValue(  String value){     if (value == null) {       throw new IllegalArgumentException(""value argument must not be null"");     }     if (this.formControls.size() == 1) {       return getFirstFormControl().addValue(value);     }     List<FormControl> userValueControls=null;     Iterator i$=this.formControls.iterator();     while (i$.hasNext()) {       FormControl formControl=i$.next();       if (!formControl.getFormControlType().hasPredefinedValue()) {         if (userValueControls == null) {           userValueControls=new LinkedList<>();         }         userValueControls.add(formControl);       }  else       if (formControl.addValue(value)) {         return true;       }     }     if (userValueControls == null) {       return false;     }     for (    FormControl userFormControl : userValueControls) {       if (userFormControl.addValue(value)) {         return true;       }     }     return false;   }   public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append(""Field: "").append(this.name).append("", UserValueCount="").append(this.userValueCount).append("", AllowsMultipleValues="").append(this.allowsMultipleValues);     if (this.predefinedValues != null) {       Iterator i$=this.predefinedValues.iterator();       while (i$.hasNext()) {         String predefinedValue=i$.next();         sb.append(Config.NewLine).append(""PredefinedValue: "").append(predefinedValue);       }     }     Iterator i$2=this.formControls.iterator();     while (i$2.hasNext()) {       FormControl formControl=i$2.next();       sb.append(Config.NewLine).append(""FormControl: "").append(formControl.getDebugInfo());     }     sb.append(Config.NewLine).append(Config.NewLine);     return sb.toString();   }   public String toString(){     return getDebugInfo();   }   void addValues(  Collection<String> values){     if (values != null) {       for (      String value : values) {         addValue(value);       }     }   }   public void addValues(  String[] values){     if (values != null) {       for (      String value : values) {         addValue(value);       }     }   }   public void addFormControl(  FormControl formControl,  String predefinedValue){     if (predefinedValue == null) {       this.userValueCount++;     }  else {       if (this.predefinedValues == null) {         this.predefinedValues=new LinkedHashSet<>();       }       this.predefinedValues.add(predefinedValue);     }     this.formControls.add(formControl);     this.allowsMultipleValues=calculateAllowsMultipleValues(formControl);   }   private boolean calculateAllowsMultipleValues(  FormControl newFormControl){     if (this.allowsMultipleValues || this.userValueCount > 1) {       return true;     }     if (this.userValueCount == 1) {       return this.predefinedValues != null;     }     if (this.predefinedValues.size() == 1) {       return false;     }     FormControlType newFormControlType=newFormControl.getFormControlType();     if (this.formControls.size() == 1) {       return newFormControlType == FormControlType.SELECT_MULTIPLE;     }     FormControlType firstFormControlType=getFirstFormControl().getFormControlType();     if (newFormControlType == FormControlType.RADIO && firstFormControlType == FormControlType.RADIO) {       return false;     }     return (newFormControlType.isSubmit() && firstFormControlType.isSubmit()) ? false : true;   }   public FormControl getFirstFormControl(){     if (this.firstFormControl == null) {       this.firstFormControl=this.formControls.iterator().next();     }     return this.firstFormControl;   }   public void merge(  FormField formField){     if (formField.userValueCount > this.userValueCount) {       this.userValueCount=formField.userValueCount;     }     this.allowsMultipleValues=this.allowsMultipleValues || formField.allowsMultipleValues;     if (this.predefinedValues == null) {       this.predefinedValues=formField.predefinedValues;     }  else     if (formField.predefinedValues != null) {       Iterator i$=this.predefinedValues.iterator();       while (i$.hasNext()) {         String predefinedValue=i$.next();         this.predefinedValues.add(predefinedValue);       }     }     for (    FormControl formControl : formField.getFormControls()) {       this.formControls.add(formControl);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\FormFields.code","public final class FormFields extends AbstractCollection<FormField> {   private final LinkedHashMap<String,FormField> map=new LinkedHashMap<>();   private final ArrayList<FormControl> formControls=new ArrayList<>();   private Column[] columns=null;   public FormFields(  Collection<FormControl> formControls){     for (    FormControl formControl : formControls) {       if (formControl.getName() != null && formControl.getName().length() != 0) {         formControl.addToFormFields(this);         this.formControls.add(formControl);       }     }   }   public int getCount(){     return this.map.size();   }   @Override public int size(){     return getCount();   }   public FormField get(  String fieldName){     if (Config.CurrentCompatibilityMode.isFormFieldNameCaseInsensitive()) {       fieldName=fieldName.toLowerCase();     }     return this.map.get(fieldName);   }   @Override public Iterator<FormField> iterator(){     return this.map.values().iterator();   }   public List<String> getValues(  String fieldName){     FormField formField=get(fieldName);     if (formField == null) {       return null;     }     return formField.getValues();   }   public Map<String,String[]> getDataSet(){     LinkedHashMap linkedHashMap=new LinkedHashMap((int)(getCount() / 0.7d));     Iterator i$=iterator();     while (i$.hasNext()) {       FormField formField=i$.next();       List<String> values=formField.getValues();       if (!values.isEmpty()) {         linkedHashMap.put(formField.getName(),values.toArray(new String[values.size()]));       }     }     return linkedHashMap;   }   public void clearValues(){     Iterator i$=this.formControls.iterator();     while (i$.hasNext()) {       FormControl formControl=i$.next();       formControl.clearValues();     }   }   public void setDataSet(  Map<String,String[]> dataSet){     clearValues();     if (this.map != null) {       for (      Map.Entry<String,String[]> entry : dataSet.entrySet()) {         String fieldName=entry.getKey();         FormField formField=get(fieldName);         if (formField != null) {           formField.addValues(entry.getValue());         }       }     }   }   public boolean setValue(  String fieldName,  String value){     FormField formField=get(fieldName);     if (formField == null) {       return false;     }     return formField.setValue(value);   }   public boolean addValue(  String fieldName,  String value){     FormField formField=get(fieldName);     if (formField == null) {       return false;     }     return formField.addValue(value);   }   public String[] getColumnLabels(){     initColumns();     String[] columnLabels=new String[this.columns.length];     for (int i=0; i < this.columns.length; i++) {       Column column=this.columns[i];       String fieldName=column.formField.getFirstFormControl().getName();       if (column.predefinedValue != null) {         fieldName=fieldName + '.' + column.predefinedValue;       }       columnLabels[i]=fieldName;     }     return columnLabels;   }   public String[] getColumnValues(  Map<String,String[]> dataSet){     initColumns();     String[] columnValues=new String[this.columns.length];     if (Config.ColumnValueFalse != null) {       for (int i=0; i < this.columns.length; i++) {         if (this.columns[i].isBoolean) {           columnValues[i]=Config.ColumnValueFalse;         }       }     }     for (    Map.Entry<String,String[]> entry : dataSet.entrySet()) {       String fieldName=entry.getKey();       FormField formField=get(fieldName);       if (formField != null) {         int columnIndex=formField.columnIndex;         String[] arr$=entry.getValue();         for (        String value : arr$) {           int ci=columnIndex;           while (true) {             if (ci < this.columns.length) {               Column column=this.columns[ci];               if (column.formField == formField) {                 if (column.predefinedValue != null) {                   if (!column.predefinedValue.equals(value)) {                     ci++;                   }  else {                     columnValues[ci]=Config.ColumnValueTrue;                     break;                   }                 }  else                 if (column.isBoolean) {                   if (value != null) {                     columnValues[ci]=Config.ColumnValueTrue;                   }                 }  else                 if (columnValues[ci] == null) {                   columnValues[ci]=value;                 }  else {                   columnValues[ci]=columnValues[ci] + Config.ColumnMultipleValueSeparator + value;                 }               }             }           }         }       }     }     return columnValues;   }   public String[] getColumnValues(){     return getColumnValues(getDataSet());   }   private void initColumns(){     if (this.columns == null) {       ArrayList<Column> columnList=new ArrayList<>();       Iterator<FormField> it=iterator();       while (it.hasNext()) {         FormField formField=it.next();         formField.columnIndex=columnList.size();         if (!formField.allowsMultipleValues() || formField.getPredefinedValues().isEmpty()) {           columnList.add(new Column(formField,formField.getPredefinedValues().size() == 1,null));         }  else {           for (          String predefinedValue : formField.getPredefinedValues()) {             columnList.add(new Column(formField,true,predefinedValue));           }           if (formField.getUserValueCount() > 0) {             columnList.add(new Column(formField,false,null));           }         }       }       this.columns=(Column[])columnList.toArray(new Column[columnList.size()]);     }   } public static class Column {     public FormField formField;     public boolean isBoolean;     public String predefinedValue;     public Column(    FormField formField,    boolean isBoolean,    String predefinedValue){       this.formField=formField;       this.isBoolean=isBoolean;       this.predefinedValue=predefinedValue;     }   }   public List getFormControls(){     return this.formControls;   }   public void merge(  FormFields formFields){     Iterator i$=formFields.iterator();     while (i$.hasNext()) {       FormField formField=i$.next();       String fieldName=formField.getName();       FormField existingFormField=get(fieldName);       if (existingFormField == null) {         this.map.put(formField.getName(),formField);       }  else {         existingFormField.merge(formField);       }     }   }   public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     Iterator i$=iterator();     while (i$.hasNext()) {       FormField formField=i$.next();       sb.append(formField);     }     return sb.toString();   }   @Override public String toString(){     return getDebugInfo();   }   public void add(  FormControl formControl){     add(formControl,formControl.getPredefinedValue());   }   public void add(  FormControl formControl,  String predefinedValue){     add(formControl,predefinedValue,formControl.name);   }   public void addName(  FormControl formControl,  String fieldName){     add(formControl,null,fieldName);   }   void add(  FormControl formControl,  String predefinedValue,  String fieldName){     if (Config.CurrentCompatibilityMode.isFormFieldNameCaseInsensitive()) {       fieldName=fieldName.toLowerCase();     }     FormField formField=this.map.get(fieldName);     if (formField == null) {       formField=new FormField(fieldName);       this.map.put(formField.getName(),formField);     }     formField.addFormControl(formControl,predefinedValue);   }   public void replaceInOutputDocument(  OutputDocument outputDocument){     Iterator i$=this.formControls.iterator();     while (i$.hasNext()) {       FormControl formControl=i$.next();       outputDocument.replace(formControl);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\FoundCacheEntryMissingInternalError.code","public static class FoundCacheEntryMissingInternalError extends CacheEntryMissingInternalError {   public FoundCacheEntryMissingInternalError(  TagType tagType,  Tag tag,  SubCache subCache){     super(tagType,tag,subCache,""missing cache entry for found tag"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\HR_ElementHandler.code","private static class HR_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new HR_ElementHandler();   private HR_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.blockBoundary(0);     x.appendBlockVerticalMargin();     for (int i=0; i < 72; i++) {       x.append('-');     }     x.blockBoundary(0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\HTMLElementName.code","public interface HTMLElementName {   public static final String A=""a"";   public static final String ABBR=""abbr"";   public static final String ACRONYM=""acronym"";   public static final String ADDRESS=""address"";   public static final String APPLET=""applet"";   public static final String AREA=""area"";   public static final String B=""b"";   public static final String BASE=""base"";   public static final String BASEFONT=""basefont"";   public static final String BDO=""bdo"";   public static final String BIG=""big"";   public static final String BLOCKQUOTE=""blockquote"";   public static final String BODY=""body"";   public static final String BR=""br"";   public static final String BUTTON=""button"";   public static final String CAPTION=""caption"";   public static final String CENTER=""center"";   public static final String CITE=""cite"";   public static final String CODE=""code"";   public static final String COL=""col"";   public static final String COLGROUP=""colgroup"";   public static final String DD=""dd"";   public static final String DEL=""del"";   public static final String DFN=""dfn"";   public static final String DIR=""dir"";   public static final String DIV=""div"";   public static final String DL=""dl"";   public static final String DT=""dt"";   public static final String EM=""em"";   public static final String FIELDSET=""fieldset"";   public static final String FONT=""font"";   public static final String FORM=""form"";   public static final String FRAME=""frame"";   public static final String FRAMESET=""frameset"";   public static final String H1=""h1"";   public static final String H2=""h2"";   public static final String H3=""h3"";   public static final String H4=""h4"";   public static final String H5=""h5"";   public static final String H6=""h6"";   public static final String HEAD=""head"";   public static final String HR=""hr"";   public static final String HTML=""html"";   public static final String I=""i"";   public static final String IFRAME=""iframe"";   public static final String IMG=""img"";   public static final String INPUT=""input"";   public static final String INS=""ins"";   public static final String ISINDEX=""isindex"";   public static final String KBD=""kbd"";   public static final String LABEL=""label"";   public static final String LEGEND=""legend"";   public static final String LI=""li"";   public static final String LINK=""link"";   public static final String MAP=""map"";   public static final String MENU=""menu"";   public static final String META=""meta"";   public static final String NOFRAMES=""noframes"";   public static final String NOSCRIPT=""noscript"";   public static final String OBJECT=""object"";   public static final String OL=""ol"";   public static final String OPTGROUP=""optgroup"";   public static final String OPTION=""option"";   public static final String P=""p"";   public static final String PARAM=""param"";   public static final String PRE=""pre"";   public static final String Q=""q"";   public static final String S=""s"";   public static final String SAMP=""samp"";   public static final String SCRIPT=""script"";   public static final String SELECT=""select"";   public static final String SMALL=""small"";   public static final String SPAN=""span"";   public static final String STRIKE=""strike"";   public static final String STRONG=""strong"";   public static final String STYLE=""style"";   public static final String SUB=""sub"";   public static final String SUP=""sup"";   public static final String TABLE=""table"";   public static final String TBODY=""tbody"";   public static final String TD=""td"";   public static final String TEXTAREA=""textarea"";   public static final String TFOOT=""tfoot"";   public static final String TH=""th"";   public static final String THEAD=""thead"";   public static final String TITLE=""title"";   public static final String TR=""tr"";   public static final String TT=""tt"";   public static final String U=""u"";   public static final String UL=""ul"";   public static final String VAR=""var""; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\HTMLElementNameSet.code","final class HTMLElementNameSet extends HashSet<String> {   public HTMLElementNameSet(){     super(1);   }   public HTMLElementNameSet(  String[] items){     super(items.length * 2);     for (    String str : items) {       add(str);     }   }   public HTMLElementNameSet(  Collection<String> collection){     super(collection.size() * 2);     union(collection);   }   public HTMLElementNameSet(  String item){     super(2);     add(item);   }   public HTMLElementNameSet union(  String item){     add(item);     return this;   }   public HTMLElementNameSet union(  Collection<String> collection){     for (    String item : collection) {       add(item);     }     return this;   }   HTMLElementNameSet minus(  String item){     remove(item);     return this;   }   public HTMLElementNameSet minus(  Collection<String> collection){     for (    String item : collection) {       remove(item);     }     return this;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\HTMLElements.code","public final class HTMLElements {   private static final List<String> ALL=new ArrayList(Arrays.asList(HTMLElementName.A,HTMLElementName.ABBR,HTMLElementName.ACRONYM,HTMLElementName.ADDRESS,HTMLElementName.APPLET,HTMLElementName.AREA,HTMLElementName.B,HTMLElementName.BASE,HTMLElementName.BASEFONT,HTMLElementName.BDO,HTMLElementName.BIG,HTMLElementName.BLOCKQUOTE,HTMLElementName.BODY,HTMLElementName.BR,HTMLElementName.BUTTON,HTMLElementName.CAPTION,HTMLElementName.CENTER,HTMLElementName.CITE,HTMLElementName.CODE,HTMLElementName.COL,HTMLElementName.COLGROUP,HTMLElementName.DD,HTMLElementName.DEL,HTMLElementName.DFN,HTMLElementName.DIR,HTMLElementName.DIV,HTMLElementName.DL,HTMLElementName.DT,HTMLElementName.EM,HTMLElementName.FIELDSET,HTMLElementName.FONT,HTMLElementName.FORM,HTMLElementName.FRAME,HTMLElementName.FRAMESET,HTMLElementName.H1,HTMLElementName.H2,HTMLElementName.H3,HTMLElementName.H4,HTMLElementName.H5,HTMLElementName.H6,HTMLElementName.HEAD,HTMLElementName.HR,HTMLElementName.HTML,HTMLElementName.I,HTMLElementName.IFRAME,HTMLElementName.IMG,HTMLElementName.INPUT,HTMLElementName.INS,HTMLElementName.ISINDEX,HTMLElementName.KBD,HTMLElementName.LABEL,HTMLElementName.LEGEND,HTMLElementName.LI,HTMLElementName.LINK,HTMLElementName.MAP,HTMLElementName.MENU,HTMLElementName.META,HTMLElementName.NOFRAMES,HTMLElementName.NOSCRIPT,HTMLElementName.OBJECT,HTMLElementName.OL,HTMLElementName.OPTGROUP,HTMLElementName.OPTION,HTMLElementName.P,HTMLElementName.PARAM,HTMLElementName.PRE,HTMLElementName.Q,HTMLElementName.S,HTMLElementName.SAMP,HTMLElementName.SCRIPT,HTMLElementName.SELECT,HTMLElementName.SMALL,HTMLElementName.SPAN,HTMLElementName.STRIKE,HTMLElementName.STRONG,HTMLElementName.STYLE,HTMLElementName.SUB,HTMLElementName.SUP,HTMLElementName.TABLE,HTMLElementName.TBODY,HTMLElementName.TD,HTMLElementName.TEXTAREA,HTMLElementName.TFOOT,HTMLElementName.TH,HTMLElementName.THEAD,HTMLElementName.TITLE,HTMLElementName.TR,HTMLElementName.TT,HTMLElementName.U,HTMLElementName.UL,HTMLElementName.VAR));   private static final HTMLElementNameSet BLOCK=new HTMLElementNameSet(new String[]{HTMLElementName.P,HTMLElementName.H1,HTMLElementName.H2,HTMLElementName.H3,HTMLElementName.H4,HTMLElementName.H5,HTMLElementName.H6,HTMLElementName.UL,HTMLElementName.OL,HTMLElementName.DIR,HTMLElementName.MENU,HTMLElementName.PRE,HTMLElementName.DL,HTMLElementName.DIV,HTMLElementName.CENTER,HTMLElementName.NOSCRIPT,HTMLElementName.NOFRAMES,HTMLElementName.BLOCKQUOTE,HTMLElementName.FORM,HTMLElementName.ISINDEX,HTMLElementName.HR,HTMLElementName.TABLE,HTMLElementName.FIELDSET,HTMLElementName.ADDRESS});   private static final HTMLElementNameSet INLINE=new HTMLElementNameSet(new String[]{HTMLElementName.TT,HTMLElementName.I,HTMLElementName.B,HTMLElementName.U,HTMLElementName.S,HTMLElementName.STRIKE,HTMLElementName.BIG,HTMLElementName.SMALL,HTMLElementName.EM,HTMLElementName.STRONG,HTMLElementName.DFN,HTMLElementName.CODE,HTMLElementName.SAMP,HTMLElementName.KBD,HTMLElementName.VAR,HTMLElementName.CITE,HTMLElementName.ABBR,HTMLElementName.ACRONYM,HTMLElementName.A,HTMLElementName.IMG,HTMLElementName.APPLET,HTMLElementName.OBJECT,HTMLElementName.FONT,HTMLElementName.BASEFONT,HTMLElementName.BR,HTMLElementName.SCRIPT,HTMLElementName.MAP,HTMLElementName.Q,HTMLElementName.SUB,HTMLElementName.SUP,HTMLElementName.SPAN,HTMLElementName.BDO,HTMLElementName.IFRAME,HTMLElementName.INPUT,HTMLElementName.SELECT,HTMLElementName.TEXTAREA,HTMLElementName.LABEL,HTMLElementName.BUTTON,HTMLElementName.INS,HTMLElementName.DEL});   private static final HTMLElementNameSet END_TAG_FORBIDDEN_SET=new HTMLElementNameSet(new String[]{HTMLElementName.AREA,HTMLElementName.BASE,HTMLElementName.BASEFONT,HTMLElementName.BR,HTMLElementName.COL,HTMLElementName.FRAME,HTMLElementName.HR,HTMLElementName.IMG,HTMLElementName.INPUT,HTMLElementName.ISINDEX,HTMLElementName.LINK,HTMLElementName.META,HTMLElementName.PARAM});   private static final HTMLElementNameSet _UL_OL=new HTMLElementNameSet(HTMLElementName.UL).union(HTMLElementName.OL);   private static final HTMLElementNameSet _DD_DT=new HTMLElementNameSet(HTMLElementName.DD).union(HTMLElementName.DT);   private static final HTMLElementNameSet _THEAD_TBODY_TFOOT_TR=new HTMLElementNameSet(HTMLElementName.THEAD).union(HTMLElementName.TBODY).union(HTMLElementName.TFOOT).union(HTMLElementName.TR);   private static final HTMLElementNameSet _THEAD_TBODY_TFOOT_TR_TD_TH=new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR).union(HTMLElementName.TD).union(HTMLElementName.TH);   private static final HTMLElementNameSet DEPRECATED=new HTMLElementNameSet().union(HTMLElementName.APPLET).union(HTMLElementName.BASEFONT).union(HTMLElementName.CENTER).union(HTMLElementName.DIR).union(HTMLElementName.FONT).union(HTMLElementName.ISINDEX).union(HTMLElementName.MENU).union(HTMLElementName.S).union(HTMLElementName.STRIKE).union(HTMLElementName.U);   private static final HTMLElementNameSet START_TAG_OPTIONAL_SET=new HTMLElementNameSet().union(HTMLElementName.BODY).union(HTMLElementName.HEAD).union(HTMLElementName.HTML).union(HTMLElementName.TBODY);   private static final HashMap<String,String> CONSTANT_NAME_MAP=buildTagMap();   private static final HashMap<String,HTMLElementTerminatingTagNameSets> TERMINATING_TAG_NAME_SETS_MAP=buildTerminatingTagNameSetsMap();   private static final Set<String> END_TAG_OPTIONAL_SET=TERMINATING_TAG_NAME_SETS_MAP.keySet();   private static final HTMLElementNameSet END_TAG_REQUIRED_SET=new HTMLElementNameSet().union(ALL).minus(END_TAG_FORBIDDEN_SET).minus(END_TAG_OPTIONAL_SET);   private static final HTMLElementNameSet CLOSING_SLASH_IGNORED_SET=new HTMLElementNameSet().union(END_TAG_OPTIONAL_SET).union(END_TAG_REQUIRED_SET);   static final HTMLElementNameSet END_TAG_REQUIRED_NESTING_FORBIDDEN_SET=new HTMLElementNameSet().union(HTMLElementName.A).union(HTMLElementName.ADDRESS).union(HTMLElementName.APPLET).union(HTMLElementName.BUTTON).union(HTMLElementName.CAPTION).union(HTMLElementName.FORM).union(HTMLElementName.IFRAME).union(HTMLElementName.LABEL).union(HTMLElementName.LEGEND).union(HTMLElementName.OPTGROUP).union(HTMLElementName.SCRIPT).union(HTMLElementName.SELECT).union(HTMLElementName.STYLE).union(HTMLElementName.TEXTAREA).union(HTMLElementName.TITLE);   private static final HTMLElementNameSet END_TAG_OPTIONAL_NESTING_FORBIDDEN_SET=new HTMLElementNameSet().union(HTMLElementName.BODY).union(HTMLElementName.COLGROUP).union(HTMLElementName.HEAD).union(HTMLElementName.HTML).union(HTMLElementName.OPTION).union(HTMLElementName.P);   private static final HTMLElementNameSet NESTING_FORBIDDEN_SET=new HTMLElementNameSet().union(END_TAG_REQUIRED_NESTING_FORBIDDEN_SET).union(END_TAG_OPTIONAL_NESTING_FORBIDDEN_SET).union(END_TAG_FORBIDDEN_SET);   private HTMLElements(){   }   public static final List<String> getElementNames(){     return ALL;   }   public static Set<String> getBlockLevelElementNames(){     return BLOCK;   }   public static Set<String> getInlineLevelElementNames(){     return INLINE;   }   public static Set<String> getDeprecatedElementNames(){     return DEPRECATED;   }   public static Set<String> getEndTagForbiddenElementNames(){     return END_TAG_FORBIDDEN_SET;   }   public static Set<String> getEndTagOptionalElementNames(){     return END_TAG_OPTIONAL_SET;   }   public static Set<String> getEndTagRequiredElementNames(){     return END_TAG_REQUIRED_SET;   }   public static Set<String> getStartTagOptionalElementNames(){     return START_TAG_OPTIONAL_SET;   }   public static Set<String> getTerminatingStartTagNames(  String endTagOptionalElementName){     HTMLElementTerminatingTagNameSets terminatingTagNameSets=getTerminatingTagNameSets(endTagOptionalElementName);     if (terminatingTagNameSets == null) {       return null;     }     return terminatingTagNameSets.TerminatingStartTagNameSet;   }   public static Set<String> getTerminatingEndTagNames(  String endTagOptionalElementName){     HTMLElementTerminatingTagNameSets terminatingTagNameSets=getTerminatingTagNameSets(endTagOptionalElementName);     if (terminatingTagNameSets == null) {       return null;     }     return terminatingTagNameSets.TerminatingEndTagNameSet;   }   public static Set<String> getNonterminatingElementNames(  String endTagOptionalElementName){     HTMLElementTerminatingTagNameSets terminatingTagNameSets=getTerminatingTagNameSets(endTagOptionalElementName);     if (terminatingTagNameSets == null) {       return null;     }     return terminatingTagNameSets.NonterminatingElementNameSet;   }   public static Set<String> getNestingForbiddenElementNames(){     return NESTING_FORBIDDEN_SET;   }   public static final String getConstantElementName(  String elementName){     String elementNameConstant=CONSTANT_NAME_MAP.get(elementName);     return elementNameConstant != null ? elementNameConstant : elementName;   }   public static final boolean isClosingSlashIgnored(  String elementName){     return CLOSING_SLASH_IGNORED_SET.contains(elementName);   }   public static final HTMLElementTerminatingTagNameSets getTerminatingTagNameSets(  String endTagOptionalElementName){     return TERMINATING_TAG_NAME_SETS_MAP.get(endTagOptionalElementName);   }   private static HashMap<String,HTMLElementTerminatingTagNameSets> buildTerminatingTagNameSetsMap(){     HashMap<String,HTMLElementTerminatingTagNameSets> map=new HashMap<>(20,1.0f);     map.put(HTMLElementName.BODY,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(),new HTMLElementNameSet(HTMLElementName.HTML).union(HTMLElementName.BODY),new HTMLElementNameSet(HTMLElementName.HTML)));     map.put(HTMLElementName.COLGROUP,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR).union(HTMLElementName.COLGROUP),new HTMLElementNameSet(HTMLElementName.TABLE).union(HTMLElementName.COLGROUP),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.DD,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_DD_DT),new HTMLElementNameSet(HTMLElementName.DL).union(HTMLElementName.DD),new HTMLElementNameSet(HTMLElementName.DL)));     map.put(HTMLElementName.DT,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_DD_DT),new HTMLElementNameSet(HTMLElementName.DL).union(HTMLElementName.DT),new HTMLElementNameSet(HTMLElementName.DL)));     map.put(HTMLElementName.HEAD,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.BODY).union(HTMLElementName.FRAMESET),new HTMLElementNameSet(HTMLElementName.HTML).union(HTMLElementName.HEAD),new HTMLElementNameSet()));     map.put(HTMLElementName.HTML,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(),new HTMLElementNameSet(HTMLElementName.HTML),new HTMLElementNameSet(HTMLElementName.HTML)));     map.put(HTMLElementName.LI,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.LI),new HTMLElementNameSet(_UL_OL).union(HTMLElementName.LI),new HTMLElementNameSet(_UL_OL)));     map.put(HTMLElementName.OPTION,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.OPTION).union(HTMLElementName.OPTGROUP),new HTMLElementNameSet(HTMLElementName.SELECT).union(HTMLElementName.OPTION),new HTMLElementNameSet()));     map.put(HTMLElementName.P,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(BLOCK).union(_DD_DT).union(HTMLElementName.TH).union(HTMLElementName.TD).union(HTMLElementName.LI),new HTMLElementNameSet(BLOCK).union(_DD_DT).union(HTMLElementName.BODY).union(HTMLElementName.HTML).union(_THEAD_TBODY_TFOOT_TR_TD_TH).union(HTMLElementName.CAPTION).union(HTMLElementName.LEGEND),new HTMLElementNameSet()));     map.put(HTMLElementName.TBODY,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.TBODY).union(HTMLElementName.TFOOT).union(HTMLElementName.THEAD),new HTMLElementNameSet(HTMLElementName.TABLE).union(HTMLElementName.TBODY),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.TD,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR_TD_TH),new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR).union(HTMLElementName.TABLE).union(HTMLElementName.TD),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.TFOOT,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.TBODY).union(HTMLElementName.TFOOT).union(HTMLElementName.THEAD),new HTMLElementNameSet(HTMLElementName.TABLE).union(HTMLElementName.TFOOT),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.TH,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR_TD_TH),new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR).union(HTMLElementName.TABLE).union(HTMLElementName.TH),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.THEAD,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(HTMLElementName.TBODY).union(HTMLElementName.TFOOT).union(HTMLElementName.THEAD),new HTMLElementNameSet(HTMLElementName.TABLE).union(HTMLElementName.THEAD),new HTMLElementNameSet(HTMLElementName.TABLE)));     map.put(HTMLElementName.TR,new HTMLElementTerminatingTagNameSets(new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR),new HTMLElementNameSet(_THEAD_TBODY_TFOOT_TR).union(HTMLElementName.TABLE),new HTMLElementNameSet(HTMLElementName.TABLE)));     return map;   }   private static HashMap<String,String> buildTagMap(){     HashMap<String,String> map=new HashMap<>(132,1.0f);     for (    String tagName : ALL) {       map.put(tagName,tagName);     }     map.put(""!element"",""!element"");     map.put(""!attlist"",""!attlist"");     map.put(""!entity"",""!entity"");     map.put(""!notation"",""!notation"");     map.put(""![if"",""![if"");     map.put(""![endif"",""![endif"");     return map;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\HTMLElementTerminatingTagNameSets.code","final class HTMLElementTerminatingTagNameSets {   public final Set<String> NonterminatingElementNameSet;   public final Set<String> TerminatingEndTagNameSet;   public final Set<String> TerminatingStartTagNameSet;   public HTMLElementTerminatingTagNameSets(  Set<String> terminatingStartTagNameSet,  Set<String> terminatingEndTagNameSet,  Set<String> nonterminatingElementNameSet){     this.TerminatingStartTagNameSet=terminatingStartTagNameSet;     this.TerminatingEndTagNameSet=terminatingEndTagNameSet;     this.NonterminatingElementNameSet=nonterminatingElementNameSet;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ImageSubmitFormControl.code","public static final class ImageSubmitFormControl extends SubmitFormControl {   public ImageSubmitFormControl(  Element element){     super(element,FormControlType.IMAGE);   }   @Override void addToFormFields(  FormFields formFields){     super.addToFormFields(formFields);     formFields.addName(this,this.name + "".x"");     formFields.addName(this,this.name + "".y"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\InputFormControl.code","public static final class InputFormControl extends FormControl {   public InputFormControl(  Element element,  FormControlType formControlType){     super(element,formControlType,false);   }   @Override public boolean setValue(  String value){     this.elementContainer.setAttributeValue(""value"",value);     return true;   }   @Override void addValuesTo(  Collection<String> collection){     FormControl.addValueTo(collection,this.elementContainer.getAttributeValue(""value""));   }   @Override void addToFormFields(  FormFields formFields){     formFields.add((FormControl)this);   }   @Override void replaceInOutputDocument(  OutputDocument outputDocument){     if (this.outputStyle == FormControlOutputStyle.REMOVE) {       outputDocument.remove(getElement());       return;     }     if (this.outputStyle == FormControlOutputStyle.DISPLAY_VALUE) {       String output=null;       if (this.formControlType != FormControlType.HIDDEN) {         String value=this.elementContainer.getAttributeValue(""value"");         if (this.formControlType == FormControlType.PASSWORD && value != null) {           value=FormControl.getString(FormControlOutputStyle.ConfigDisplayValue.PasswordChar,value.length());         }         output=getDisplayValueHTML(value,false);       }       outputDocument.replace(getElement(),output);       return;     }     replaceAttributesInOutputDocumentIfModified(outputDocument);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\IntStringHashMap.code","public final class IntStringHashMap {   private static final int DEFAULT_INITIAL_CAPACITY=15;   private static final float DEFAULT_LOAD_FACTOR=0.75f;   private int bitmask;   private transient Entry[] entries;   private float loadFactor;   private transient int size;   private int threshold;   public IntStringHashMap(  int initialCapacity,  float loadFactor){     this.loadFactor=loadFactor;     int capacity=1;     while (capacity < initialCapacity) {       capacity<<=1;     }     this.threshold=(int)(capacity * loadFactor);     this.entries=new Entry[capacity];     this.bitmask=capacity - 1;   }   public IntStringHashMap(  int initialCapacity){     this(initialCapacity,DEFAULT_LOAD_FACTOR);   }   public IntStringHashMap(){     this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);   }   public int size(){     return this.size;   }   public boolean isEmpty(){     return this.size == 0;   }   private int getIndex(  int key){     return this.bitmask & key;   }   public String get(  int key){     for (Entry entry=this.entries[getIndex(key)]; entry != null; entry=entry.next) {       if (key == entry.key) {         return entry.value;       }     }     return null;   }   private Entry getEntry(  int key){     Entry entry=this.entries[getIndex(key)];     while (entry != null && key != entry.key) {       entry=entry.next;     }     return entry;   }   public boolean containsKey(  int key){     return getEntry(key) != null;   }   public String put(  int key,  String value){     int index=getIndex(key);     for (Entry entry=this.entries[index]; entry != null; entry=entry.next) {       if (key == entry.key) {         String oldValue=entry.value;         entry.value=value;         return oldValue;       }     }     this.entries[index]=new Entry(key,value,this.entries[index]);     int i=this.size;     this.size=i + 1;     if (i >= this.threshold) {       increaseCapacity();     }     return null;   }   private void increaseCapacity(){     int oldCapacity=this.entries.length;     Entry[] oldEntries=this.entries;     this.entries=new Entry[oldCapacity << 1];     this.bitmask=this.entries.length - 1;     for (    Entry entry : oldEntries) {       while (entry != null) {         Entry next=entry.next;         int index=getIndex(entry.key);         entry.next=this.entries[index];         this.entries[index]=entry;         entry=next;       }     }     this.threshold=(int)(this.entries.length * this.loadFactor);   }   public String remove(  int key){     int index=getIndex(key);     Entry previous=null;     for (Entry entry=this.entries[index]; entry != null; entry=entry.next) {       if (key != entry.key) {         previous=entry;       }  else {         if (previous == null) {           this.entries[index]=entry.next;         }  else {           previous.next=entry.next;         }         this.size--;         return entry.value;       }     }     return null;   }   public void clear(){     for (int i=this.bitmask; i >= 0; i--) {       this.entries[i]=null;     }     this.size=0;   }   public boolean containsValue(  String value){     if (value == null) {       for (int i=this.bitmask; i >= 0; i--) {         for (Entry entry=this.entries[i]; entry != null; entry=entry.next) {           if (entry.value == null) {             return true;           }         }       }     }  else {       for (int i2=this.bitmask; i2 >= 0; i2--) {         for (Entry entry2=this.entries[i2]; entry2 != null; entry2=entry2.next) {           if (value.equals(entry2.value)) {             return true;           }         }       }     }     return false;   } public static final class Entry {     final int key;     Entry next;     String value;     public Entry(    int key,    String value,    Entry next){       this.key=key;       this.value=value;       this.next=next;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ListElementHandler.code","private static class ListElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE_OL=new ListElementHandler(0);   public static final ElementHandler INSTANCE_UL=new ListElementHandler(-1);   private final int initialListBulletNumber;   public ListElementHandler(  int initialListBulletNumber){     this.initialListBulletNumber=initialListBulletNumber;   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.blockBoundary(0);     int oldListBulletNumber=x.listBulletNumber;     x.listBulletNumber=this.initialListBulletNumber;     Processor.access$1508(x);     x.appendElementContent(element);     Processor.access$1510(x);     x.listBulletNumber=oldListBulletNumber;     x.blockBoundary(0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LI_ElementHandler.code","private static class LI_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new LI_ElementHandler();   private LI_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     if (x.listBulletNumber != -1) {       Processor.access$1408(x);     }     x.bullet=true;     x.blockBoundary(0);     x.appendBlockVerticalMargin();     x.appendIndent();     x.ignoreInitialWhitespace=true;     x.appendElementContent(element);     x.bullet=Processor.$assertionsDisabled;     x.blockBoundary(0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Logger.code","public interface Logger {   void debug(  String str);   void error(  String str);   void info(  String str);   boolean isDebugEnabled();   boolean isErrorEnabled();   boolean isInfoEnabled();   boolean isWarnEnabled();   void warn(  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LoggerDisabled.code","final class LoggerDisabled implements Logger {   public static final LoggerDisabled INSTANCE=new LoggerDisabled();   private LoggerDisabled(){   }   @Override public void error(  String message){   }   @Override public void warn(  String message){   }   @Override public void info(  String message){   }   @Override public void debug(  String message){   }   @Override public boolean isErrorEnabled(){     return false;   }   @Override public boolean isWarnEnabled(){     return false;   }   @Override public boolean isInfoEnabled(){     return false;   }   @Override public boolean isDebugEnabled(){     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LoggerFactory.code","final class LoggerFactory {   private static LoggerProvider defaultLoggerProvider=null;   LoggerFactory(){   }   public static Logger getLogger(  String name){     return getLoggerProvider().getLogger(name);   }   public static Logger getLogger(  Class loggedClass){     return getLogger(loggedClass.getName());   }   public static LoggerProvider getLoggerProvider(){     return Config.LoggerProvider != null ? Config.LoggerProvider : getDefaultLoggerProvider();   }   private static LoggerProvider getDefaultLoggerProvider(){     if (defaultLoggerProvider == null) {       defaultLoggerProvider=determineDefaultLoggerProvider();     }     return defaultLoggerProvider;   }   private static LoggerProvider determineDefaultLoggerProvider(){     return LoggerProvider.ANDROIDLOG;   }   private static boolean isClassAvailable(  String className){     try {       Class.forName(className);       return true;     }  catch (    Throwable th) {       return false;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LoggerProvider.code","public interface LoggerProvider {   public static final LoggerProvider DISABLED=LoggerProviderDisabled.INSTANCE;   public static final LoggerProvider ANDROIDLOG=LoggerProviderAndroid.INSTANCE;   Logger getLogger(  String str); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LoggerProviderAndroid.code","final class LoggerProviderAndroid implements LoggerProvider {   public static final LoggerProvider INSTANCE=new LoggerProviderAndroid();   private LoggerProviderAndroid(){   }   @Override public Logger getLogger(  String name){     return new AndroidLogger(name);   } private static class AndroidLogger implements Logger {     public AndroidLogger(    String name){     }     @Override public void error(    String message){       Log.e("""",message);     }     @Override public void warn(    String message){       Log.w("""",message);     }     @Override public void info(    String message){       Log.i("""",message);     }     @Override public void debug(    String message){       Log.d("""",message);     }     @Override public boolean isErrorEnabled(){       return true;     }     @Override public boolean isWarnEnabled(){       return true;     }     @Override public boolean isInfoEnabled(){       return true;     }     @Override public boolean isDebugEnabled(){       return true;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\LoggerProviderDisabled.code","final class LoggerProviderDisabled implements LoggerProvider {   public static final LoggerProvider INSTANCE=new LoggerProviderDisabled();   private LoggerProviderDisabled(){   }   @Override public Logger getLogger(  String name){     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\MasonTagTypes.code","public final class MasonTagTypes {   public static final StartTagType MASON_COMPONENT_CALL=StartTagTypeMasonComponentCall.INSTANCE;   public static final StartTagType MASON_COMPONENT_CALLED_WITH_CONTENT=StartTagTypeMasonComponentCalledWithContent.INSTANCE;   public static final EndTagType MASON_COMPONENT_CALLED_WITH_CONTENT_END=EndTagTypeMasonComponentCalledWithContent.INSTANCE;   public static final StartTagType MASON_NAMED_BLOCK=StartTagTypeMasonNamedBlock.INSTANCE;   public static final EndTagType MASON_NAMED_BLOCK_END=EndTagTypeMasonNamedBlock.INSTANCE;   private static final TagType[] TAG_TYPES={MASON_COMPONENT_CALL,MASON_COMPONENT_CALLED_WITH_CONTENT,MASON_COMPONENT_CALLED_WITH_CONTENT_END,MASON_NAMED_BLOCK,MASON_NAMED_BLOCK_END};   private MasonTagTypes(){   }   public static void register(){     TagType[] arr$=TAG_TYPES;     for (    TagType tagType : arr$) {       tagType.register();     }   }   public static boolean defines(  TagType tagType){     TagType[] arr$=TAG_TYPES;     for (    TagType definedTagType : arr$) {       if (tagType == definedTagType) {         return true;       }     }     return false;   }   public static boolean isParsedByMason(  TagType tagType){     return tagType == StartTagType.SERVER_COMMON || defines(tagType);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\MicrosoftTagTypes.code","public final class MicrosoftTagTypes {   public static final StartTagType DOWNLEVEL_REVEALED_CONDITIONAL_COMMENT=StartTagTypeMicrosoftDownlevelRevealedConditionalComment.INSTANCE;   private static final TagType[] TAG_TYPES={DOWNLEVEL_REVEALED_CONDITIONAL_COMMENT};   private MicrosoftTagTypes(){   }   public static boolean isConditionalCommentIfTag(  Tag tag){     return tag.getName() == ""![if"";   }   public static boolean isConditionalCommentEndifTag(  Tag tag){     return tag.getName() == ""![endif"";   }   public static void register(){     TagType[] arr$=TAG_TYPES;     for (    TagType tagType : arr$) {       tagType.register();     }   }   public static boolean defines(  TagType tagType){     TagType[] arr$=TAG_TYPES;     for (    TagType definedTagType : arr$) {       if (tagType == definedTagType) {         return true;       }     }     return false;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\NodeIterator.code","public class NodeIterator implements Iterator<Segment> {   private CharacterReference characterReferenceAtCurrentPosition=null;   private final boolean legacyIteratorCompatabilityMode=Source.LegacyIteratorCompatabilityMode;   private Tag nextTag;   private int pos;   private final Segment segment;   private final Source source;   public NodeIterator(  Segment segment){     this.segment=segment;     this.source=segment.source;     if (segment == this.source) {       this.source.fullSequentialParse();     }     this.pos=segment.begin;     this.nextTag=this.source.getNextTag(this.pos);     if (this.nextTag == null || this.nextTag.begin < segment.end) {       return;     }     this.nextTag=null;   }   @Override public boolean hasNext(){     return this.pos < this.segment.end || this.nextTag != null;   }   @Override public Segment next(){     int oldPos=this.pos;     if (this.nextTag != null) {       if (oldPos < this.nextTag.begin) {         return nextNonTagSegment(oldPos,this.nextTag.begin);       }       Tag tag=this.nextTag;       this.nextTag=this.nextTag.getNextTag();       if (this.nextTag != null && this.nextTag.begin >= this.segment.end) {         this.nextTag=null;       }       if (this.pos < tag.end) {         this.pos=tag.end;         return tag;       }       return tag;     }     if (hasNext()) {       return nextNonTagSegment(oldPos,this.segment.end);     }     throw new NoSuchElementException();   }   private Segment nextNonTagSegment(  int begin,  int end){     if (!this.legacyIteratorCompatabilityMode) {       CharacterReference characterReference=this.characterReferenceAtCurrentPosition;       if (characterReference != null) {         this.characterReferenceAtCurrentPosition=null;         this.pos=characterReference.end;         return characterReference;       }       ParseText parseText=this.source.getParseText();       int potentialCharacterReferenceBegin=parseText.indexOf(CharacterEntityReference._amp,begin,end);       while (potentialCharacterReferenceBegin != -1) {         CharacterReference nextCharacterReference=CharacterReference.construct(this.source,potentialCharacterReferenceBegin,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL);         if (nextCharacterReference != null) {           if (potentialCharacterReferenceBegin == begin) {             this.pos=nextCharacterReference.end;             return nextCharacterReference;           }           this.pos=nextCharacterReference.begin;           this.characterReferenceAtCurrentPosition=nextCharacterReference;           return new Segment(this.source,begin,this.pos);         }         potentialCharacterReferenceBegin=parseText.indexOf(CharacterEntityReference._amp,potentialCharacterReferenceBegin + 1,end);       }     }     Source source=this.source;     this.pos=end;     return new Segment(source,begin,end);   }   public void skipToPos(  int pos){     if (pos >= this.pos) {       this.pos=pos;       this.nextTag=this.source.getNextTag(pos);     }   }   @Override public void remove(){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\NumericCharacterReference.code","public class NumericCharacterReference extends CharacterReference {   private boolean hex;   private NumericCharacterReference(  Source source,  int begin,  int end,  int codePoint,  boolean hex){     super(source,begin,end,codePoint);     this.hex=hex;   }   public boolean isDecimal(){     return !this.hex;   }   public boolean isHexadecimal(){     return this.hex;   }   public static String encode(  CharSequence unencodedText){     if (unencodedText == null) {       return null;     }     StringBuilder sb=new StringBuilder(unencodedText.length() * 2);     for (int i=0; i < unencodedText.length(); i++) {       char ch=unencodedText.charAt(i);       if (requiresEncoding(ch)) {         try {           appendDecimalCharacterReferenceString(sb,ch);         }  catch (        IOException ex) {           throw new RuntimeException(ex);         }       }  else {         sb.append(ch);       }     }     return sb.toString();   }   public static String encodeDecimal(  CharSequence unencodedText){     return encode(unencodedText);   }   public static String encodeHexadecimal(  CharSequence unencodedText){     if (unencodedText == null) {       return null;     }     StringBuilder sb=new StringBuilder(unencodedText.length() * 2);     for (int i=0; i < unencodedText.length(); i++) {       char ch=unencodedText.charAt(i);       if (requiresEncoding(ch)) {         try {           appendHexadecimalCharacterReferenceString(sb,ch);         }  catch (        IOException ex) {           throw new RuntimeException(ex);         }       }  else {         sb.append(ch);       }     }     return sb.toString();   }   @Override public String getCharacterReferenceString(){     return this.hex ? getHexadecimalCharacterReferenceString(this.codePoint) : getDecimalCharacterReferenceString(this.codePoint);   }   public static String getCharacterReferenceString(  int codePoint){     return getDecimalCharacterReferenceString(codePoint);   }   public static CharacterReference construct(  Source source,  int begin,  Config.UnterminatedCharacterReferenceSettings unterminatedCharacterReferenceSettings){     int end;     String codePointString;     ParseText parseText=source.getParseText();     int codePointStringBegin=begin + 2;     boolean hex=parseText.charAt(codePointStringBegin) == 'x';     if (hex) {       codePointStringBegin++;     }     int unterminatedMaxCodePoint=hex ? unterminatedCharacterReferenceSettings.hexadecimalCharacterReferenceMaxCodePoint : unterminatedCharacterReferenceSettings.decimalCharacterReferenceMaxCodePoint;     int maxSourcePos=source.end - 1;     int x=codePointStringBegin;     boolean unterminated=false;     while (true) {       char ch=parseText.charAt(x);       if (ch == ';') {         end=x + 1;         codePointString=source.substring(codePointStringBegin,x);         break;       }       if ((ch >= '0' && ch <= '9') || (hex && ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F')))) {         if (x == maxSourcePos) {           unterminated=true;           x++;         }       }  else {         unterminated=true;       }       if (unterminated) {         if (unterminatedMaxCodePoint == -1) {           return null;         }         end=x;         codePointString=source.substring(codePointStringBegin,x);       }  else {         x++;       }     }     if (codePointString.length() == 0) {       return null;     }     int codePoint=-1;     try {       codePoint=Integer.parseInt(codePointString,hex ? 16 : 10);     }  catch (    NumberFormatException e) {       if (unterminated) {         return null;       }     }     if (unterminated && codePoint > unterminatedMaxCodePoint) {       return null;     }     if (codePoint > 1114111) {       codePoint=-1;     }     return new NumericCharacterReference(source,begin,end,codePoint,hex);   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     sb.append(CharacterEntityReference._quot);     try {       if (this.hex) {         appendHexadecimalCharacterReferenceString(sb,this.codePoint);       }  else {         appendDecimalCharacterReferenceString(sb,this.codePoint);       }       sb.append(""\"" "");       appendUnicodeText(sb,this.codePoint);       sb.append(' ').append(super.getDebugInfo());       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\OptionElementIterator.code","private final class OptionElementIterator implements Iterator<Element> {   private int i;   private OptionElementIterator(){     this.i=0;   }   @Override public boolean hasNext(){     return this.i < SelectFormControl.this.optionElementContainers.length;   }   @Override public Element next(){     if (!hasNext()) {       throw new NoSuchElementException();     }     ElementContainer[] elementContainerArr=SelectFormControl.this.optionElementContainers;     int i=this.i;     this.i=i + 1;     return elementContainerArr[i].element;   }   @Override public void remove(){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\OutputDocument.code","public final class OutputDocument implements CharStreamSource {   private ArrayList<OutputSegment> outputSegments=new ArrayList<>();   private CharSequence sourceText;   public OutputDocument(  Source source){     if (source == null) {       throw new IllegalArgumentException(""source argument must not be null"");     }     this.sourceText=source;   }   public OutputDocument(  Segment segment){     if (segment == null) {       throw new IllegalArgumentException(""segment argument must not be null"");     }     Source source=segment.source;     this.sourceText=source;     if (segment.begin > 0) {       remove(new Segment(source,0,segment.begin));     }     if (segment.end < source.end) {       remove(new Segment(source,segment.end,source.end));     }   }   public OutputDocument(  ParseText parseText){     this.sourceText=parseText;   }   public CharSequence getSourceText(){     return this.sourceText;   }   public void remove(  Segment segment){     register(new RemoveOutputSegment(segment));   }   public void remove(  Collection<? extends Segment> segments){     for (    Segment segment : segments) {       remove(segment);     }   }   public void insert(  int pos,  CharSequence text){     register(new StringOutputSegment(pos,pos,text));   }   public void replace(  Segment segment,  CharSequence text){     replace(segment.getBegin(),segment.getEnd(),text);   }   public void replace(  int begin,  int end,  CharSequence text){     register(new StringOutputSegment(begin,end,text));   }   public void replace(  int begin,  int end,  char ch){     register(new CharOutputSegment(begin,end,ch));   }   public void replace(  FormControl formControl){     formControl.replaceInOutputDocument(this);   }   public void replace(  FormFields formFields){     formFields.replaceInOutputDocument(this);   }   public Map<String,String> replace(  Attributes attributes,  boolean convertNamesToLowerCase){     AttributesOutputSegment attributesOutputSegment=new AttributesOutputSegment(attributes,convertNamesToLowerCase);     register(attributesOutputSegment);     return attributesOutputSegment.getMap();   }   public void replace(  Attributes attributes,  Map<String,String> map){     register(new AttributesOutputSegment(attributes,map));   }   public void replaceWithSpaces(  int begin,  int end){     register(new BlankOutputSegment(begin,end));   }   public void register(  OutputSegment outputSegment){     this.outputSegments.add(outputSegment);   }   @Override public void writeTo(  Writer writer) throws IOException {     try {       appendTo(writer);     }   finally {       writer.flush();     }   }   public void writeTo(  Writer writer,  int begin,  int end) throws IOException {     try {       appendTo(writer,begin,end);     }   finally {       writer.flush();     }   }   @Override public void appendTo(  Appendable appendable) throws IOException {     appendTo(appendable,0,this.sourceText.length());   }   public void appendTo(  Appendable appendable,  int begin,  int end) throws IOException {     if (this.outputSegments.isEmpty()) {       appendable.append(this.sourceText,begin,end);       return;     }     int pos=begin;     Collections.sort(this.outputSegments,OutputSegment.COMPARATOR);     Iterator i$=this.outputSegments.iterator();     while (i$.hasNext()) {       OutputSegment outputSegment=i$.next();       if (outputSegment.getEnd() >= pos && (outputSegment.getEnd() != pos || outputSegment.getBegin() >= pos)) {         if (outputSegment.getBegin() > end || (outputSegment.getBegin() == end && outputSegment.getEnd() > end)) {           break;         }         if (outputSegment.getBegin() > pos) {           appendable.append(this.sourceText,pos,outputSegment.getBegin());         }         if (outputSegment.getBegin() < pos && (outputSegment instanceof BlankOutputSegment)) {           int outputSegmentEnd=outputSegment.getEnd();           while (pos < outputSegmentEnd) {             appendable.append(' ');             pos++;           }         }  else {           outputSegment.appendTo(appendable);           pos=outputSegment.getEnd();         }       }     }     if (pos < end) {       appendable.append(this.sourceText,pos,end);     }   }   @Override public long getEstimatedMaximumOutputLength(){     long estimatedMaximumOutputLength=this.sourceText.length();     Iterator i$=this.outputSegments.iterator();     while (i$.hasNext()) {       OutputSegment outputSegment=i$.next();       int outputSegmentOriginalLength=outputSegment.getEnd() - outputSegment.getBegin();       estimatedMaximumOutputLength+=outputSegment.getEstimatedMaximumOutputLength() - outputSegmentOriginalLength;     }     if (estimatedMaximumOutputLength >= 0) {       return estimatedMaximumOutputLength;     }     return -1L;   }   @Override public String toString(){     return CharStreamSourceUtil.toString(this);   }   public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     for (    OutputSegment outputSegment : getRegisteredOutputSegments()) {       if (outputSegment instanceof BlankOutputSegment) {         sb.append(""Replace with Spaces: "");       }  else       if (outputSegment instanceof RemoveOutputSegment) {         sb.append(""Remove: "");       }  else {         sb.append(""Replace: "");       }       if (this.sourceText instanceof Source) {         Source source=(Source)this.sourceText;         sb.append('(');         source.getRowColumnVector(outputSegment.getBegin()).appendTo(sb);         sb.append('-');         source.getRowColumnVector(outputSegment.getEnd()).appendTo(sb);         sb.append(')');       }  else {         sb.append(""(p"").append(outputSegment.getBegin()).append(""-p"").append(outputSegment.getEnd()).append(')');       }       sb.append(' ');       String outputFromSegment=outputSegment.toString();       if (outputFromSegment.length() <= 20) {         sb.append(outputFromSegment);       }  else {         sb.append(outputFromSegment.substring(0,20)).append(""..."");       }       sb.append(Config.NewLine);     }     return sb.toString();   }   public List<OutputSegment> getRegisteredOutputSegments(){     Collections.sort(this.outputSegments,OutputSegment.COMPARATOR);     return this.outputSegments;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\OutputSegment.code","public interface OutputSegment extends CharStreamSource {   public static final Comparator<OutputSegment> COMPARATOR=new OutputSegmentComparator();   @Override void appendTo(  Appendable appendable) throws IOException ;   int getBegin();   String getDebugInfo();   int getEnd();   @Override String toString();   @Override void writeTo(  Writer writer) throws IOException ; } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\OutputSegmentComparator.code","final class OutputSegmentComparator implements Comparator<OutputSegment> {   @Override public int compare(  OutputSegment outputSegment1,  OutputSegment outputSegment2){     if (outputSegment1.getBegin() < outputSegment2.getBegin()) {       return -1;     }     if (outputSegment1.getBegin() > outputSegment2.getBegin()) {       return 1;     }     if (outputSegment1.getEnd() >= outputSegment2.getEnd()) {       return outputSegment1.getEnd() > outputSegment2.getEnd() ? 1 : 0;     }     return -1;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ParseText.code","public interface ParseText extends CharSequence {   public static final int NO_BREAK=-1;   @Override char charAt(  int i);   boolean containsAt(  String str,  int i);   int indexOf(  char c,  int i);   int indexOf(  char c,  int i,  int i2);   int indexOf(  String str,  int i);   int indexOf(  String str,  int i,  int i2);   int lastIndexOf(  char c,  int i);   int lastIndexOf(  char c,  int i,  int i2);   int lastIndexOf(  String str,  int i);   int lastIndexOf(  String str,  int i,  int i2);   @Override int length();   @Override CharSequence subSequence(  int i,  int i2);   @Override String toString(); } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\PHPTagTypes.code","public final class PHPTagTypes {   public static final StartTagType PHP_STANDARD=StartTagTypePHPStandard.INSTANCE;   public static final StartTagType PHP_SHORT=StartTagTypePHPShort.INSTANCE;   public static final StartTagType PHP_SCRIPT=StartTagTypePHPScript.INSTANCE;   private static final TagType[] TAG_TYPES={PHP_STANDARD,PHP_SHORT,PHP_SCRIPT};   private PHPTagTypes(){   }   public static void register(){     TagType[] arr$=TAG_TYPES;     for (    TagType tagType : arr$) {       tagType.register();     }   }   public static boolean defines(  TagType tagType){     TagType[] arr$=TAG_TYPES;     for (    TagType definedTagType : arr$) {       if (tagType == definedTagType) {         return true;       }     }     return false;   }   public static boolean isParsedByPHP(  TagType tagType){     return tagType == StartTagType.SERVER_COMMON || defines(tagType);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\PositionComparator.code","private static final class PositionComparator implements Comparator<FormControl> {   private PositionComparator(){   }   @Override public int compare(  FormControl formControl1,  FormControl formControl2){     int formControl1Begin=formControl1.getElement().getBegin();     int formControl2Begin=formControl2.getElement().getBegin();     if (formControl1Begin < formControl2Begin) {       return -1;     }     return formControl1Begin > formControl2Begin ? 1 : 0;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\PRE_ElementHandler.code","private static class PRE_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new PRE_ElementHandler();   private PRE_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.blockBoundary(1);     boolean oldPreformatted=x.preformatted;     x.preformatted=true;     x.appendElementContent(element);     x.preformatted=oldPreformatted;     x.blockBoundary(1);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Processor.code","public static final class Processor {   static final boolean $assertionsDisabled;   private static Map<String,ElementHandler> ELEMENT_HANDLERS=null;   private static final int NO_MARGIN=-1;   private static final int UNORDERED_LIST=-1;   private Appendable appendable;   private boolean atStartOfLine;   private int blockIndentLevel;   private final int blockIndentSize;   private int blockVerticalMargin;   private boolean bullet;   private int col;   private final boolean convertNonBreakingSpaces;   private final boolean decorateFontStyles;   private boolean ignoreInitialWhitespace;   private final boolean includeHyperlinkURLs;   private boolean lastCharWhiteSpace;   private int listBulletNumber;   private final char[] listBullets;   private int listIndentLevel;   private final int listIndentSize;   private final int maxLineLength;   private final String newLine;   private boolean preformatted;   private int renderedIndex;   private final Renderer renderer;   private final Segment rootSegment;   private final Source source;   private final String tableCellSeparator; public interface ElementHandler {     void process(    Processor processor,    Element element) throws IOException ;   } static {     $assertionsDisabled=!Renderer.class.desiredAssertionStatus() ? true : $assertionsDisabled;     ELEMENT_HANDLERS=new HashMap();     ELEMENT_HANDLERS.put(HTMLElementName.A,A_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.ADDRESS,StandardBlockElementHandler.INSTANCE_0_0);     ELEMENT_HANDLERS.put(HTMLElementName.APPLET,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.B,FontStyleElementHandler.INSTANCE_B);     ELEMENT_HANDLERS.put(HTMLElementName.BLOCKQUOTE,StandardBlockElementHandler.INSTANCE_1_1_INDENT);     ELEMENT_HANDLERS.put(HTMLElementName.BR,BR_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.BUTTON,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.CAPTION,StandardBlockElementHandler.INSTANCE_0_0);     ELEMENT_HANDLERS.put(HTMLElementName.CENTER,StandardBlockElementHandler.INSTANCE_1_1);     ELEMENT_HANDLERS.put(HTMLElementName.CODE,FontStyleElementHandler.INSTANCE_CODE);     ELEMENT_HANDLERS.put(HTMLElementName.DD,StandardBlockElementHandler.INSTANCE_0_0_INDENT);     ELEMENT_HANDLERS.put(HTMLElementName.DIR,ListElementHandler.INSTANCE_UL);     ELEMENT_HANDLERS.put(HTMLElementName.DIV,StandardBlockElementHandler.INSTANCE_0_0);     ELEMENT_HANDLERS.put(HTMLElementName.DT,StandardBlockElementHandler.INSTANCE_0_0);     ELEMENT_HANDLERS.put(HTMLElementName.EM,FontStyleElementHandler.INSTANCE_I);     ELEMENT_HANDLERS.put(HTMLElementName.FIELDSET,StandardBlockElementHandler.INSTANCE_1_1);     ELEMENT_HANDLERS.put(HTMLElementName.FORM,StandardBlockElementHandler.INSTANCE_1_1);     ELEMENT_HANDLERS.put(HTMLElementName.H1,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.H2,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.H3,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.H4,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.H5,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.H6,StandardBlockElementHandler.INSTANCE_2_1);     ELEMENT_HANDLERS.put(HTMLElementName.HEAD,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.HR,HR_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.I,FontStyleElementHandler.INSTANCE_I);     ELEMENT_HANDLERS.put(HTMLElementName.LEGEND,StandardBlockElementHandler.INSTANCE_0_0);     ELEMENT_HANDLERS.put(HTMLElementName.LI,LI_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.MENU,ListElementHandler.INSTANCE_UL);     ELEMENT_HANDLERS.put(HTMLElementName.MAP,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.NOFRAMES,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.NOSCRIPT,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.OL,ListElementHandler.INSTANCE_OL);     ELEMENT_HANDLERS.put(HTMLElementName.P,StandardBlockElementHandler.INSTANCE_1_1);     ELEMENT_HANDLERS.put(HTMLElementName.PRE,PRE_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.SCRIPT,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.SELECT,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.STRONG,FontStyleElementHandler.INSTANCE_B);     ELEMENT_HANDLERS.put(HTMLElementName.STYLE,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.TEXTAREA,RemoveElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.TD,TD_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.TH,TD_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.TR,TR_ElementHandler.INSTANCE);     ELEMENT_HANDLERS.put(HTMLElementName.U,FontStyleElementHandler.INSTANCE_U);     ELEMENT_HANDLERS.put(HTMLElementName.UL,ListElementHandler.INSTANCE_UL);   }   static int access$1408(  Processor x0){     int i=x0.listBulletNumber;     x0.listBulletNumber=i + 1;     return i;   }   static int access$1508(  Processor x0){     int i=x0.listIndentLevel;     x0.listIndentLevel=i + 1;     return i;   }   static int access$1510(  Processor x0){     int i=x0.listIndentLevel;     x0.listIndentLevel=i - 1;     return i;   }   static int access$508(  Processor x0){     int i=x0.blockIndentLevel;     x0.blockIndentLevel=i + 1;     return i;   }   static int access$510(  Processor x0){     int i=x0.blockIndentLevel;     x0.blockIndentLevel=i - 1;     return i;   }   public Processor(  Renderer renderer,  Segment rootSegment,  int maxLineLength,  String newLine,  boolean includeHyperlinkURLs,  boolean decorateFontStyles,  boolean convertNonBreakingSpaces,  int blockIndentSize,  int listIndentSize,  char[] listBullets,  String tableCellSeparator){     this.renderer=renderer;     this.rootSegment=rootSegment;     this.source=rootSegment.source;     this.maxLineLength=maxLineLength;     this.newLine=newLine;     this.includeHyperlinkURLs=includeHyperlinkURLs;     this.decorateFontStyles=decorateFontStyles;     this.convertNonBreakingSpaces=convertNonBreakingSpaces;     this.blockIndentSize=blockIndentSize;     this.listIndentSize=listIndentSize;     this.listBullets=listBullets;     this.tableCellSeparator=tableCellSeparator;   }   public void appendTo(  Appendable appendable) throws IOException {     reset();     this.appendable=appendable;     appendSegmentProcessingChildElements(this.rootSegment.begin,this.rootSegment.end,this.rootSegment.getChildElements());   }   private void reset(){     this.renderedIndex=0;     this.atStartOfLine=true;     this.col=0;     this.blockIndentLevel=0;     this.listIndentLevel=0;     this.blockVerticalMargin=-1;     this.preformatted=$assertionsDisabled;     this.ignoreInitialWhitespace=$assertionsDisabled;     this.lastCharWhiteSpace=$assertionsDisabled;     this.bullet=$assertionsDisabled;   }   public void appendElementContent(  Element element) throws IOException {     int contentEnd=element.getContentEnd();     if (!element.isEmpty() && this.renderedIndex < contentEnd) {       int contentBegin=element.getStartTag().end;       appendSegmentProcessingChildElements(Math.max(this.renderedIndex,contentBegin),contentEnd,element.getChildElements());     }   }   private void appendSegmentProcessingChildElements(  int begin,  int end,  List<Element> childElements) throws IOException {     int index=begin;     for (    Element childElement : childElements) {       if (index < childElement.end) {         if (index < childElement.begin) {           appendSegmentRemovingTags(index,childElement.begin);         }         getElementHandler(childElement).process(this,childElement);         index=Math.max(this.renderedIndex,childElement.end);       }     }     if (index < end) {       appendSegmentRemovingTags(index,end);     }   }   private static ElementHandler getElementHandler(  Element element){     if (element.getStartTag().getStartTagType().isServerTag()) {       return RemoveElementHandler.INSTANCE;     }     ElementHandler elementHandler=ELEMENT_HANDLERS.get(element.getName());     return elementHandler == null ? StandardInlineElementHandler.INSTANCE : elementHandler;   }   private void appendSegmentRemovingTags(  int begin,  int end) throws IOException {     int index=begin;     while (true) {       Tag tag=this.source.getNextTag(index);       if (tag == null || tag.begin >= end) {         break;       }       appendSegment(index,tag.begin);       index=tag.end;     }     appendSegment(index,end);   }   private void appendSegment(  int begin,  int end) throws IOException {     if (!$assertionsDisabled && begin > end) {       throw new AssertionError();     }     if (begin < this.renderedIndex) {       begin=this.renderedIndex;     }     if (begin < end) {       try {         if (this.preformatted) {           appendPreformattedSegment(begin,end);         }  else {           appendNonPreformattedSegment(begin,end);         }       }   finally {         if (this.renderedIndex < end) {           this.renderedIndex=end;         }       }     }   }   private void appendPreformattedSegment(  int begin,  int end) throws IOException {     if (!$assertionsDisabled && begin >= end) {       throw new AssertionError();     }     if (!$assertionsDisabled && begin < this.renderedIndex) {       throw new AssertionError();     }     if (isStartOfBlock()) {       appendBlockVerticalMargin();     }     String text=CharacterReference.decode(this.source.subSequence(begin,end),$assertionsDisabled,this.convertNonBreakingSpaces);     int i=0;     while (i < text.length()) {       char ch=text.charAt(i);       if (ch == '\n') {         newLine();       }  else       if (ch == '\r') {         newLine();         int nextI=i + 1;         if (nextI != text.length()) {           if (text.charAt(nextI) == '\n') {             i++;           }         }  else {           return;         }       }  else {         append(ch);       }       i++;     }   }   private void appendNonPreformattedSegment(  int begin,  int end) throws IOException {     if (!$assertionsDisabled && begin >= end) {       throw new AssertionError();     }     if (!$assertionsDisabled && begin < this.renderedIndex) {       throw new AssertionError();     }     String text=CharacterReference.decodeCollapseWhiteSpace(this.source.subSequence(begin,end),this.convertNonBreakingSpaces);     if (text.length() == 0) {       if (!this.ignoreInitialWhitespace) {         this.lastCharWhiteSpace=true;         return;       }       return;     }     if (isStartOfBlock()) {       appendBlockVerticalMargin();     }  else     if (this.lastCharWhiteSpace || (Segment.isWhiteSpace(this.source.charAt(begin)) && !this.ignoreInitialWhitespace)) {       append(' ');     }     int textIndex=0;     int i=0;     this.ignoreInitialWhitespace=$assertionsDisabled;     this.lastCharWhiteSpace=$assertionsDisabled;     while (true) {       if (i < text.length() && (text.charAt(i) != ' ' || ((i + 1 < text.length() && text.charAt(i + 1) == '>') || (i + 6 < text.length() && text.startsWith(""From "",i + 1))))) {         i++;       }  else {         if (((this.col + i) - textIndex) + 1 >= this.maxLineLength) {           if (this.lastCharWhiteSpace && (this.blockIndentLevel | this.listIndentLevel) == 0) {             append(' ');           }           startNewLine(0);         }  else         if (this.lastCharWhiteSpace) {           append(' ');         }         append(text,textIndex,i);         if (i != text.length()) {           this.lastCharWhiteSpace=true;           i++;           textIndex=i;         }  else {           this.lastCharWhiteSpace=Segment.isWhiteSpace(this.source.charAt(end - 1));           return;         }       }     }   }   public boolean isStartOfBlock(){     if (this.blockVerticalMargin != -1) {       return true;     }     return $assertionsDisabled;   }   public void appendBlockVerticalMargin() throws IOException {     if (!$assertionsDisabled && this.blockVerticalMargin == -1) {       throw new AssertionError();     }     startNewLine(this.blockVerticalMargin);     this.blockVerticalMargin=-1;   }   public void blockBoundary(  int verticalMargin) throws IOException {     if (this.blockVerticalMargin < verticalMargin) {       this.blockVerticalMargin=verticalMargin;     }   }   public void startNewLine(  int verticalMargin) throws IOException {     int requiredNewLines=verticalMargin + (this.atStartOfLine ? 0 : 1);     for (int i=0; i < requiredNewLines; i++) {       this.appendable.append(this.newLine);     }     this.atStartOfLine=true;     this.ignoreInitialWhitespace=$assertionsDisabled;     this.lastCharWhiteSpace=$assertionsDisabled;   }   public void newLine() throws IOException {     this.appendable.append(this.newLine);     this.atStartOfLine=true;     this.ignoreInitialWhitespace=$assertionsDisabled;     this.lastCharWhiteSpace=$assertionsDisabled;   }   public void appendIndent() throws IOException {     for (int i=this.blockIndentLevel * this.blockIndentSize; i > 0; i--) {       this.appendable.append(' ');     }     if (this.bullet) {       for (int i2=(this.listIndentLevel - 1) * this.listIndentSize; i2 > 0; i2--) {         this.appendable.append(' ');       }       if (this.listBulletNumber == -1) {         for (int i3=this.listIndentSize - 2; i3 > 0; i3--) {           this.appendable.append(' ');         }         this.appendable.append(this.listBullets[(this.listIndentLevel - 1) % this.listBullets.length]).append(' ');       }  else {         String bulletNumberString=Integer.toString(this.listBulletNumber);         for (int i4=(this.listIndentSize - bulletNumberString.length()) - 2; i4 > 0; i4--) {           this.appendable.append(' ');         }         this.appendable.append(bulletNumberString).append("". "");       }       this.bullet=$assertionsDisabled;     }  else {       for (int i5=this.listIndentLevel * this.listIndentSize; i5 > 0; i5--) {         this.appendable.append(' ');       }     }     this.col=(this.blockIndentLevel * this.blockIndentSize) + (this.listIndentLevel * this.listIndentSize);     this.atStartOfLine=$assertionsDisabled;   }   public Processor append(  char ch) throws IOException {     if (this.atStartOfLine) {       appendIndent();     }     this.appendable.append(ch);     this.col++;     return this;   }   public Processor append(  String text) throws IOException {     if (this.atStartOfLine) {       appendIndent();     }     this.appendable.append(text);     this.col+=text.length();     return this;   }   private void append(  CharSequence text,  int begin,  int end) throws IOException {     if (this.atStartOfLine) {       appendIndent();     }     for (int i=begin; i < end; i++) {       this.appendable.append(text.charAt(i));     }     this.col+=end - begin;   } public static class RemoveElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new RemoveElementHandler();     private RemoveElementHandler(){     }     @Override public void process(    Processor x,    Element element){     }   } public static class StandardInlineElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new StandardInlineElementHandler();     private StandardInlineElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.appendElementContent(element);     }   } private static class FontStyleElementHandler implements ElementHandler {     private final char decorationChar;     public static final ElementHandler INSTANCE_B=new FontStyleElementHandler('*');     public static final ElementHandler INSTANCE_I=new FontStyleElementHandler('/');     public static final ElementHandler INSTANCE_U=new FontStyleElementHandler('_');     public static final ElementHandler INSTANCE_CODE=new FontStyleElementHandler('|');     public FontStyleElementHandler(    char decorationChar){       this.decorationChar=decorationChar;     }     @Override public void process(    Processor x,    Element element) throws IOException {       if (x.decorateFontStyles) {         if (x.lastCharWhiteSpace) {           x.append(' ');           x.lastCharWhiteSpace=Processor.$assertionsDisabled;         }         x.append(this.decorationChar);         x.appendElementContent(element);         if (x.decorateFontStyles) {           x.append(this.decorationChar);           return;         }         return;       }       x.appendElementContent(element);     }   } private static class StandardBlockElementHandler implements ElementHandler {     private final int bottomMargin;     private final boolean indent;     private final int topMargin;     public static final ElementHandler INSTANCE_0_0=new StandardBlockElementHandler(0,0,Processor.$assertionsDisabled);     public static final ElementHandler INSTANCE_1_1=new StandardBlockElementHandler(1,1,Processor.$assertionsDisabled);     public static final ElementHandler INSTANCE_2_1=new StandardBlockElementHandler(2,1,Processor.$assertionsDisabled);     public static final ElementHandler INSTANCE_0_0_INDENT=new StandardBlockElementHandler(0,0,true);     public static final ElementHandler INSTANCE_1_1_INDENT=new StandardBlockElementHandler(1,1,true);     public StandardBlockElementHandler(    int topMargin,    int bottomMargin,    boolean indent){       this.topMargin=topMargin;       this.bottomMargin=bottomMargin;       this.indent=indent;     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.blockBoundary(this.topMargin);       if (this.indent) {         Processor.access$508(x);       }       x.appendElementContent(element);       if (this.indent) {         Processor.access$510(x);       }       x.blockBoundary(this.bottomMargin);     }   } private static class A_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new A_ElementHandler();     private A_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       String renderedHyperlinkURL;       x.appendElementContent(element);       if (x.includeHyperlinkURLs && (renderedHyperlinkURL=x.renderer.renderHyperlinkURL(element.getStartTag())) != null) {         int linkLength=renderedHyperlinkURL.length() + 1;         if (x.col + linkLength >= x.maxLineLength) {           x.startNewLine(0);         }  else {           x.append(' ');         }         x.append(renderedHyperlinkURL);         x.lastCharWhiteSpace=true;       }     }   } private static class BR_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new BR_ElementHandler();     private BR_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.newLine();       x.blockBoundary(0);     }   } private static class HR_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new HR_ElementHandler();     private HR_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.blockBoundary(0);       x.appendBlockVerticalMargin();       for (int i=0; i < 72; i++) {         x.append('-');       }       x.blockBoundary(0);     }   } private static class ListElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE_OL=new ListElementHandler(0);     public static final ElementHandler INSTANCE_UL=new ListElementHandler(-1);     private final int initialListBulletNumber;     public ListElementHandler(    int initialListBulletNumber){       this.initialListBulletNumber=initialListBulletNumber;     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.blockBoundary(0);       int oldListBulletNumber=x.listBulletNumber;       x.listBulletNumber=this.initialListBulletNumber;       Processor.access$1508(x);       x.appendElementContent(element);       Processor.access$1510(x);       x.listBulletNumber=oldListBulletNumber;       x.blockBoundary(0);     }   } private static class LI_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new LI_ElementHandler();     private LI_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       if (x.listBulletNumber != -1) {         Processor.access$1408(x);       }       x.bullet=true;       x.blockBoundary(0);       x.appendBlockVerticalMargin();       x.appendIndent();       x.ignoreInitialWhitespace=true;       x.appendElementContent(element);       x.bullet=Processor.$assertionsDisabled;       x.blockBoundary(0);     }   } private static class PRE_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new PRE_ElementHandler();     private PRE_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.blockBoundary(1);       boolean oldPreformatted=x.preformatted;       x.preformatted=true;       x.appendElementContent(element);       x.preformatted=oldPreformatted;       x.blockBoundary(1);     }   } private static class TD_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new TD_ElementHandler();     private TD_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       if (!x.isStartOfBlock()) {         x.append(x.tableCellSeparator);       }       x.lastCharWhiteSpace=Processor.$assertionsDisabled;       x.appendElementContent(element);     }   } private static class TR_ElementHandler implements ElementHandler {     public static final ElementHandler INSTANCE=new TR_ElementHandler();     private TR_ElementHandler(){     }     @Override public void process(    Processor x,    Element element) throws IOException {       x.blockBoundary(0);       x.appendElementContent(element);       x.blockBoundary(0);     }   } } public static final class Processor {   static final boolean $assertionsDisabled;   private Appendable appendable;   private final boolean collapseWhiteSpace;   private final boolean indentAllElements;   private final boolean indentScriptElements;   private final String indentString;   private int index;   private final String newLine;   private Tag nextTag;   private final boolean removeLineBreaks;   private final Segment segment;   private final CharSequence sourceText;   private final boolean tidyTags; static {     $assertionsDisabled=!SourceFormatter.class.desiredAssertionStatus();   }   public Processor(  Segment segment,  String indentString,  boolean tidyTags,  boolean collapseWhiteSpace,  boolean removeLineBreaks,  boolean indentAllElements,  boolean indentScriptElements,  String newLine){     this.segment=segment;     this.sourceText=segment.source.toString();     this.indentString=indentString;     this.tidyTags=tidyTags;     this.collapseWhiteSpace=collapseWhiteSpace || removeLineBreaks;     this.removeLineBreaks=removeLineBreaks;     this.indentAllElements=indentAllElements;     this.indentScriptElements=indentScriptElements;     this.newLine=newLine;   }   public void appendTo(  Appendable appendable) throws IOException {     this.appendable=appendable;     if (this.segment instanceof Source) {       ((Source)this.segment).fullSequentialParse();     }     this.nextTag=this.segment.source.getNextTag(this.segment.begin);     this.index=this.segment.begin;     appendContent(this.segment.end,this.segment.getChildElements(),0);   }   private void appendContent(  int end,  List<Element> childElements,  int depth) throws IOException {     Element element;     int elementBegin;     if (!$assertionsDisabled && this.index > end) {       throw new AssertionError();     }     Iterator i$=childElements.iterator();     while (i$.hasNext() && (elementBegin=(element=i$.next()).begin) < end) {       if (this.indentAllElements) {         appendText(elementBegin,depth);         appendElement(element,depth,end,false,false);       }  else       if (!inlinable(element)) {         appendText(elementBegin,depth);         String elementName=element.getName();         if (elementName == HTMLElementName.PRE || elementName == HTMLElementName.TEXTAREA) {           appendElement(element,depth,end,true,true);         }  else         if (elementName == HTMLElementName.SCRIPT) {           appendElement(element,depth,end,true,false);         }  else {           appendElement(element,depth,end,false,!this.removeLineBreaks && containsOnlyInlineLevelChildElements(element));         }       }     }     appendText(end,depth);     if (!$assertionsDisabled && this.index != end) {       throw new AssertionError();     }   }   private boolean inlinable(  Element element){     StartTagType startTagType=element.getStartTag().getStartTagType();     if (startTagType == StartTagType.DOCTYPE_DECLARATION) {       return false;     }     if (startTagType != StartTagType.NORMAL) {       return true;     }     String elementName=element.getName();     if (elementName == HTMLElementName.SCRIPT) {       return !this.indentScriptElements;     }     if (this.removeLineBreaks && !HTMLElements.getElementNames().contains(elementName)) {       return true;     }     if (!HTMLElements.getInlineLevelElementNames().contains(elementName)) {       return false;     }     if (this.removeLineBreaks) {       return true;     }     return containsOnlyInlineLevelChildElements(element);   }   private void appendText(  int end,  int depth) throws IOException {     if (!$assertionsDisabled && this.index > end) {       throw new AssertionError();     }     if (this.index == end) {       return;     }     while (Segment.isWhiteSpace(this.sourceText.charAt(this.index))) {       int i=this.index + 1;       this.index=i;       if (i == end) {         return;       }     }     appendIndent(depth);     if (this.collapseWhiteSpace) {       appendTextCollapseWhiteSpace(end,depth);     }  else {       appendTextInline(end,depth,false);     }     appendFormattingNewLine();     if (!$assertionsDisabled && this.index != end) {       throw new AssertionError();     }   }   private void appendElement(  Element element,  int depth,  int end,  boolean preformatted,  boolean renderContentInline) throws IOException {     if (!$assertionsDisabled && this.index != element.begin) {       throw new AssertionError();     }     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     StartTag startTag=element.getStartTag();     EndTag endTag=element.getEndTag();     appendIndent(depth);     appendTag(startTag,depth,end);     if (this.index == end) {       appendFormattingNewLine();       if (!$assertionsDisabled && this.index != Math.min(element.end,end)) {         throw new AssertionError(this.index);       }       return;     }     if (!renderContentInline) {       appendFormattingNewLine();     }     int contentEnd=element.getContentEnd();     if (end < contentEnd) {       contentEnd=end;     }     if (this.index < contentEnd) {       if (preformatted) {         if (renderContentInline) {           appendContentPreformatted(contentEnd,depth);         }  else {           appendIndentedScriptContent(contentEnd,depth + 1);         }       }  else       if (renderContentInline) {         if (this.collapseWhiteSpace) {           appendTextCollapseWhiteSpace(contentEnd,depth);         }  else         if (!appendTextInline(contentEnd,depth,true)) {           appendFormattingNewLine();           renderContentInline=false;         }       }  else {         appendContent(contentEnd,element.getChildElements(),depth + 1);       }     }     if (endTag != null && end > endTag.begin) {       if (!renderContentInline) {         appendIndent(depth);       }       if (!$assertionsDisabled && this.index != endTag.begin) {         throw new AssertionError();       }       appendTag(endTag,depth,end);       appendFormattingNewLine();     }  else     if (renderContentInline) {       appendFormattingNewLine();     }     if (!$assertionsDisabled && this.index != Math.min(element.end,end)) {       throw new AssertionError(this.index);     }   }   private void updateNextTag(){     while (this.nextTag != null && this.nextTag.begin < this.index) {       this.nextTag=this.nextTag.getNextTag();     }   }   private void appendIndentedScriptContent(  int end,  int depth) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     if (this.removeLineBreaks) {       appendTextRemoveIndentation(end);       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }       return;     }     int startOfLinePos=getStartOfLinePos(end,false);     if (this.index != end) {       if (startOfLinePos == -1) {         appendIndent(depth);         appendLineKeepWhiteSpace(end,depth);         appendEssentialNewLine();         if (this.index != end) {           startOfLinePos=getStartOfLinePos(end,true);           if (this.index == end) {             return;           }         }  else {           return;         }       }       appendTextPreserveIndentation(end,depth,this.index - startOfLinePos);       appendEssentialNewLine();       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }     }   }   private boolean appendTextPreserveIndentation(  int end,  int depth) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     if (this.removeLineBreaks) {       return appendTextRemoveIndentation(end);     }     appendLineKeepWhiteSpace(end,depth);     if (this.index == end) {       return true;     }     int startOfLinePos=getStartOfLinePos(end,true);     if (this.index == end) {       return true;     }     appendEssentialNewLine();     appendTextPreserveIndentation(end,depth + 1,this.index - startOfLinePos);     if ($assertionsDisabled || this.index == end) {       return false;     }     throw new AssertionError();   }   private void appendTextPreserveIndentation(  int end,  int depth,  int originalIndentLength) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     appendIndent(depth);     appendLineKeepWhiteSpace(end,depth);     while (this.index != end) {       for (int x=0; x < originalIndentLength; x++) {         char ch=this.sourceText.charAt(this.index);         if (ch == ' ' || ch == '\t') {           int i=this.index + 1;           this.index=i;           if (i == end) {             return;           }         }       }       appendEssentialNewLine();       appendIndent(depth);       appendLineKeepWhiteSpace(end,depth);     }     if (!$assertionsDisabled && this.index != end) {       throw new AssertionError();     }   }   private boolean appendTextRemoveIndentation(  int r5) throws java.io.IOException {     throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.SourceFormatter.Processor.appendTextRemoveIndentation(int):boolean"");   }   private int getStartOfLinePos(  int end,  boolean atStartOfLine){     int i;     int startOfLinePos=atStartOfLine ? this.index : -1;     do {       char ch=this.sourceText.charAt(this.index);       if (ch == '\n' || ch == '\r') {         startOfLinePos=this.index + 1;       }  else       if (ch != ' ' && ch != '\t') {         break;       }       i=this.index + 1;       this.index=i;     }  while (i != end);     return startOfLinePos;   }   private void appendSpecifiedTextInline(  CharSequence text,  int depth) throws IOException {     int textLength=text.length();     int i=appendSpecifiedLine(text,0);     if (i < textLength) {       int subsequentLineDepth=depth + 1;       while (true) {         if (Segment.isWhiteSpace(text.charAt(i))) {           i++;           if (i >= textLength) {             return;           }         }  else {           appendEssentialNewLine();           appendIndent(subsequentLineDepth);           i=appendSpecifiedLine(text,i);           if (i >= textLength) {             return;           }         }       }     }   }   private int appendSpecifiedLine(  CharSequence text,  int i) throws IOException {     int nexti;     int textLength=text.length();     do {       char ch=text.charAt(i);       if (ch == '\r' && (nexti=i + 1) < textLength && text.charAt(nexti) == '\n') {         return i + 2;       }       if (ch == '\n') {         return i + 1;       }       this.appendable.append(ch);       i++;     }  while (i < textLength);     return i;   }   private boolean appendTextInline(  int end,  int depth,  boolean increaseIndentAfterFirstLineBreak) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     appendLineKeepWhiteSpace(end,depth);     if (this.index == end) {       return true;     }     int subsequentLineDepth=increaseIndentAfterFirstLineBreak ? depth + 1 : depth;     while (true) {       if (Segment.isWhiteSpace(this.sourceText.charAt(this.index))) {         int i=this.index + 1;         this.index=i;         if (i == end) {           return false;         }       }  else {         appendEssentialNewLine();         appendIndent(subsequentLineDepth);         appendLineKeepWhiteSpace(end,subsequentLineDepth);         if (this.index >= end) {           if ($assertionsDisabled || this.index == end) {             return false;           }           throw new AssertionError();         }       }     }   }   private void appendLineKeepWhiteSpace(  int end,  int depth) throws IOException {     int nextindex;     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     updateNextTag();     while (true) {       if (this.nextTag != null && this.index == this.nextTag.begin) {         appendTag(this.nextTag,depth,end);         if (this.index == end) {           return;         }       }  else {         char ch=this.sourceText.charAt(this.index);         if (ch == '\r' && (nextindex=this.index + 1) < end && this.sourceText.charAt(nextindex) == '\n') {           this.index+=2;           if (!$assertionsDisabled && this.index > end) {             throw new AssertionError();           }           return;         }         if (ch == '\n') {           this.index++;           if (!$assertionsDisabled && this.index > end) {             throw new AssertionError();           }           return;         }         this.appendable.append(ch);         int i=this.index + 1;         this.index=i;         if (i == end) {           return;         }       }     }   }   private void appendTextCollapseWhiteSpace(  int end,  int depth) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     boolean lastWasWhiteSpace=false;     updateNextTag();     while (this.index < end) {       while (this.nextTag != null && this.index == this.nextTag.begin) {         if (lastWasWhiteSpace) {           this.appendable.append(' ');           lastWasWhiteSpace=false;         }         appendTag(this.nextTag,depth,end);         if (this.index == end) {           return;         }       }       CharSequence charSequence=this.sourceText;       int i=this.index;       this.index=i + 1;       char ch=charSequence.charAt(i);       if (Segment.isWhiteSpace(ch)) {         lastWasWhiteSpace=true;       }  else {         if (lastWasWhiteSpace) {           this.appendable.append(' ');           lastWasWhiteSpace=false;         }         this.appendable.append(ch);       }     }     if (lastWasWhiteSpace) {       this.appendable.append(' ');     }     if (!$assertionsDisabled && this.index != end) {       throw new AssertionError();     }   }   private void appendContentPreformatted(  int end,  int depth) throws IOException {     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     updateNextTag();     while (true) {       if (this.nextTag != null && this.index == this.nextTag.begin) {         appendTag(this.nextTag,depth,end);         if (this.index == end) {           return;         }       }  else {         this.appendable.append(this.sourceText.charAt(this.index));         int i=this.index + 1;         this.index=i;         if (i >= end) {           if (!$assertionsDisabled && this.index != end) {             throw new AssertionError();           }           return;         }       }     }   }   private void appendTag(  Tag tag,  int depth,  int end) throws IOException {     if (!$assertionsDisabled && this.index != tag.begin) {       throw new AssertionError();     }     if (!$assertionsDisabled && this.index >= end) {       throw new AssertionError();     }     this.nextTag=tag.getNextTag();     int tagEnd=tag.end < end ? tag.end : end;     if (!$assertionsDisabled && this.index >= tagEnd) {       throw new AssertionError();     }     if (tag.getTagType() == StartTagType.COMMENT || tag.getTagType() == StartTagType.CDATA_SECTION || tag.getTagType().isServerTag()) {       appendTextPreserveIndentation(tagEnd,depth);     }  else     if (this.tidyTags) {       String tidyTag=tag.tidy();       if ((tag instanceof StartTag) && ((StartTag)tag).getAttributes() != null) {         this.appendable.append(tidyTag);       }  else {         appendSpecifiedTextInline(tidyTag,depth);       }       this.index=tagEnd;     }  else {       appendTextInline(tagEnd,depth,true);     }     if (end <= tag.end || !(tag instanceof StartTag)) {       if (!$assertionsDisabled && this.index > end) {         throw new AssertionError();       }       return;     }     if ((tag.name == HTMLElementName.SCRIPT && !this.indentScriptElements) || tag.getTagType().isServerTag()) {       Element element=tag.getElement();       EndTag endTag=element.getEndTag();       if (endTag == null) {         if (!$assertionsDisabled && this.index > end) {           throw new AssertionError();         }         return;       }       int contentEnd=end < endTag.begin ? end : endTag.begin;       boolean singleLineContent=true;       if (this.index != contentEnd) {         singleLineContent=appendTextPreserveIndentation(contentEnd,depth);       }       if (endTag.begin >= end) {         if (!$assertionsDisabled && this.index > end) {           throw new AssertionError();         }         return;       }  else {         if (!singleLineContent) {           appendEssentialNewLine();           appendIndent(depth);         }         if (!$assertionsDisabled && this.index != endTag.begin) {           throw new AssertionError();         }         appendTag(endTag,depth,end);       }     }     if (!$assertionsDisabled && this.index > end) {       throw new AssertionError();     }   }   private void appendIndent(  int depth) throws IOException {     if (!this.removeLineBreaks) {       for (int x=0; x < depth; x++) {         this.appendable.append(this.indentString);       }     }   }   private void appendFormattingNewLine() throws IOException {     if (!this.removeLineBreaks) {       this.appendable.append(this.newLine);     }   }   private void appendEssentialNewLine() throws IOException {     this.appendable.append(this.newLine);   }   private boolean containsOnlyInlineLevelChildElements(  Element element){     Collection<Element> childElements=element.getChildElements();     if (childElements.isEmpty()) {       return true;     }     for (    Element childElement : childElements) {       String elementName=childElement.getName();       if (elementName == HTMLElementName.SCRIPT || !HTMLElements.getInlineLevelElementNames().contains(elementName)) {         return false;       }       if (!containsOnlyInlineLevelChildElements(childElement)) {         return false;       }     }     return true;   } } public final class Processor {   private final boolean convertNonBreakingSpaces;   private final boolean excludeNonHTMLElements;   private final boolean includeAttributes;   private final Segment segment;   private final Source source;   public Processor(  Segment segment,  boolean convertNonBreakingSpaces,  boolean includeAttributes,  boolean excludeNonHTMLElements){     this.segment=segment;     this.source=segment.source;     this.convertNonBreakingSpaces=convertNonBreakingSpaces;     this.includeAttributes=includeAttributes;     this.excludeNonHTMLElements=excludeNonHTMLElements;   }   public String toString(){     StringBuilder sb=new StringBuilder(this.segment.length());     NodeIterator nodeIterator=new NodeIterator(this.segment);     while (nodeIterator.hasNext()) {       Segment segment=nodeIterator.next();       if (segment instanceof Tag) {         Tag tag=(Tag)segment;         if (tag.getTagType().isServerTag()) {           Element element=tag.getElement();           if (element != null && element.getEnd() > tag.getEnd()) {             nodeIterator.skipToPos(element.getEnd());           }         }  else {           if (tag.getTagType() == StartTagType.NORMAL) {             StartTag startTag=(StartTag)tag;             if (tag.name == HTMLElementName.SCRIPT || tag.name == HTMLElementName.STYLE || TextExtractor.this.excludeElement(startTag) || (this.excludeNonHTMLElements && !HTMLElements.getElementNames().contains(tag.name))) {               nodeIterator.skipToPos(startTag.getElement().getEnd());             }  else             if (this.includeAttributes) {               Iterator i$=startTag.getAttributes().iterator();               while (i$.hasNext()) {                 Attribute attribute=i$.next();                 if (TextExtractor.this.includeAttribute(startTag,attribute)) {                   sb.append(' ').append((CharSequence)attribute.getValueSegment()).append(' ');                 }               }             }           }           if (tag.getName() == HTMLElementName.BR || !HTMLElements.getInlineLevelElementNames().contains(tag.getName())) {             sb.append(' ');           }         }       }  else {         sb.append((CharSequence)segment);       }     }     String decodedText=CharacterReference.decodeCollapseWhiteSpace(sb,this.convertNonBreakingSpaces);     return decodedText;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\ProspectiveTagTypeIterator.code","public static final class ProspectiveTagTypeIterator implements Iterator<TagType> {   private TagTypeRegister cursor;   private int tagTypeIndex=0;   public ProspectiveTagTypeIterator(  Source source,  int pos){     ParseText parseText=source.getParseText();     this.cursor=TagTypeRegister.root;     int posIndex=0;     while (true) {       try {         int posIndex2=posIndex;         posIndex=posIndex2 + 1;         try {           TagTypeRegister child=this.cursor.getChild(parseText.charAt(pos + posIndex2));           if (child == null) {             break;           }  else {             this.cursor=child;           }         }  catch (        IndexOutOfBoundsException e) {         }       }  catch (      IndexOutOfBoundsException e2) {       }     }     while (this.cursor.tagTypes == null) {       TagTypeRegister tagTypeRegister=this.cursor.parent;       this.cursor=tagTypeRegister;       if (tagTypeRegister == null) {         return;       }     }   }   @Override public boolean hasNext(){     return this.cursor != null;   }   @Override public TagType next(){     TagType[] tagTypes=this.cursor.tagTypes;     TagType nextTagType=tagTypes[this.tagTypeIndex];     int i=this.tagTypeIndex + 1;     this.tagTypeIndex=i;     if (i == tagTypes.length) {       this.tagTypeIndex=0;       do {         this.cursor=this.cursor.parent;         if (this.cursor == null) {           break;         }       }  while (this.cursor.tagTypes == null);     }     return nextTagType;   }   @Override public void remove(){     throw new UnsupportedOperationException();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\RadioCheckboxFormControl.code","public static final class RadioCheckboxFormControl extends FormControl {   public RadioCheckboxFormControl(  Element element,  FormControlType formControlType){     super(element,formControlType,true);     if (this.elementContainer.predefinedValue == null) {       this.elementContainer.predefinedValue=FormControl.CHECKBOX_NULL_DEFAULT_VALUE;       if (element.source.logger.isInfoEnabled()) {         element.source.logger.info(element.source.getRowColumnVector(element.begin).appendTo(new StringBuilder(200)).append("": compulsory \""value\"" attribute of "").append(formControlType).append("" control \"""").append(this.name).append(""\"" is missing, assuming the value \"""").append(FormControl.CHECKBOX_NULL_DEFAULT_VALUE).append(CharacterEntityReference._quot).toString());       }     }   }   @Override public boolean setValue(  String value){     return this.elementContainer.setSelected(value,""checked"",false);   }   @Override public boolean addValue(  String value){     return this.elementContainer.setSelected(value,""checked"",this.formControlType == FormControlType.CHECKBOX);   }   @Override void addValuesTo(  Collection<String> collection){     if (isChecked()) {       FormControl.addValueTo(collection,getPredefinedValue());     }   }   @Override public boolean isChecked(){     return this.elementContainer.getBooleanAttribute(""checked"");   }   @Override void addToFormFields(  FormFields formFields){     formFields.add((FormControl)this);   }   @Override void replaceInOutputDocument(  OutputDocument outputDocument){     if (this.outputStyle == FormControlOutputStyle.REMOVE) {       outputDocument.remove(getElement());       return;     }     if (this.outputStyle == FormControlOutputStyle.DISPLAY_VALUE) {       String html=isChecked() ? FormControlOutputStyle.ConfigDisplayValue.CheckedHTML : FormControlOutputStyle.ConfigDisplayValue.UncheckedHTML;       if (html != null) {         outputDocument.replace(getElement(),html);         return;       }       setDisabled(true);     }     replaceAttributesInOutputDocumentIfModified(outputDocument);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\RemoveElementHandler.code","public static class RemoveElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new RemoveElementHandler();   private RemoveElementHandler(){   }   @Override public void process(  Processor x,  Element element){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\RemoveOutputSegment.code","final class RemoveOutputSegment implements OutputSegment {   private final int begin;   private final int end;   public RemoveOutputSegment(  int begin,  int end){     this.begin=begin;     this.end=end;   }   public RemoveOutputSegment(  Segment segment){     this(segment.begin,segment.end);   }   @Override public int getBegin(){     return this.begin;   }   @Override public int getEnd(){     return this.end;   }   @Override public void writeTo(  Writer writer){     appendTo(writer);   }   @Override public void appendTo(  Appendable appendable){   }   @Override public long getEstimatedMaximumOutputLength(){     return 0L;   }   @Override public String toString(){     return """";   }   @Override public String getDebugInfo(){     return ""Remove: (p"" + this.begin + ""-p""+ this.end+ ')';   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Renderer.code","public class Renderer implements CharStreamSource {   private final Segment rootSegment;   private int maxLineLength=76;   private String newLine=""\r\n"";   private boolean includeHyperlinkURLs=true;   private boolean decorateFontStyles=false;   private boolean convertNonBreakingSpaces=Config.ConvertNonBreakingSpaces;   private int blockIndentSize=4;   private int listIndentSize=6;   private char[] listBullets={'*','o','+','#'};   private String tableCellSeparator="" \t"";   public Renderer(  Segment segment){     this.rootSegment=segment;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);     writer.flush();   }   @Override public void appendTo(  Appendable appendable) throws IOException {     new Processor(this,this.rootSegment,getMaxLineLength(),getNewLine(),getIncludeHyperlinkURLs(),getDecorateFontStyles(),getConvertNonBreakingSpaces(),getBlockIndentSize(),getListIndentSize(),getListBullets(),getTableCellSeparator()).appendTo(appendable);   }   @Override public long getEstimatedMaximumOutputLength(){     return this.rootSegment.length();   }   @Override public String toString(){     return CharStreamSourceUtil.toString(this);   }   public Renderer setMaxLineLength(  int maxLineLength){     this.maxLineLength=maxLineLength;     return this;   }   public int getMaxLineLength(){     return this.maxLineLength;   }   public Renderer setNewLine(  String newLine){     this.newLine=newLine;     return this;   }   public String getNewLine(){     if (this.newLine == null) {       this.newLine=this.rootSegment.source.getBestGuessNewLine();     }     return this.newLine;   }   public Renderer setIncludeHyperlinkURLs(  boolean includeHyperlinkURLs){     this.includeHyperlinkURLs=includeHyperlinkURLs;     return this;   }   public boolean getIncludeHyperlinkURLs(){     return this.includeHyperlinkURLs;   }   public String renderHyperlinkURL(  StartTag startTag){     String href=startTag.getAttributeValue(""href"");     if (href == null || href.equals(""#"") || href.startsWith(""javascript:"")) {       return null;     }     return CharacterEntityReference._lt + href + CharacterEntityReference._gt;   }   public Renderer setDecorateFontStyles(  boolean decorateFontStyles){     this.decorateFontStyles=decorateFontStyles;     return this;   }   public boolean getDecorateFontStyles(){     return this.decorateFontStyles;   }   public Renderer setConvertNonBreakingSpaces(  boolean convertNonBreakingSpaces){     this.convertNonBreakingSpaces=convertNonBreakingSpaces;     return this;   }   public boolean getConvertNonBreakingSpaces(){     return this.convertNonBreakingSpaces;   }   public Renderer setBlockIndentSize(  int blockIndentSize){     this.blockIndentSize=blockIndentSize;     return this;   }   public int getBlockIndentSize(){     return this.blockIndentSize;   }   public Renderer setListIndentSize(  int listIndentSize){     this.listIndentSize=listIndentSize;     return this;   }   public int getListIndentSize(){     return this.listIndentSize;   }   public Renderer setListBullets(  char[] listBullets){     if (listBullets == null || listBullets.length == 0) {       throw new IllegalArgumentException(""listBullets argument must be an array of at least one character"");     }     this.listBullets=listBullets;     return this;   }   public char[] getListBullets(){     return this.listBullets;   }   public Renderer setTableCellSeparator(  String tableCellSeparator){     this.tableCellSeparator=tableCellSeparator;     return this;   }   public String getTableCellSeparator(){     return this.tableCellSeparator;   } public static final class Processor {     static final boolean $assertionsDisabled;     private static Map<String,ElementHandler> ELEMENT_HANDLERS=null;     private static final int NO_MARGIN=-1;     private static final int UNORDERED_LIST=-1;     private Appendable appendable;     private boolean atStartOfLine;     private int blockIndentLevel;     private final int blockIndentSize;     private int blockVerticalMargin;     private boolean bullet;     private int col;     private final boolean convertNonBreakingSpaces;     private final boolean decorateFontStyles;     private boolean ignoreInitialWhitespace;     private final boolean includeHyperlinkURLs;     private boolean lastCharWhiteSpace;     private int listBulletNumber;     private final char[] listBullets;     private int listIndentLevel;     private final int listIndentSize;     private final int maxLineLength;     private final String newLine;     private boolean preformatted;     private int renderedIndex;     private final Renderer renderer;     private final Segment rootSegment;     private final Source source;     private final String tableCellSeparator; public interface ElementHandler {       void process(      Processor processor,      Element element) throws IOException ;     } static {       $assertionsDisabled=!Renderer.class.desiredAssertionStatus() ? true : $assertionsDisabled;       ELEMENT_HANDLERS=new HashMap();       ELEMENT_HANDLERS.put(HTMLElementName.A,A_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.ADDRESS,StandardBlockElementHandler.INSTANCE_0_0);       ELEMENT_HANDLERS.put(HTMLElementName.APPLET,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.B,FontStyleElementHandler.INSTANCE_B);       ELEMENT_HANDLERS.put(HTMLElementName.BLOCKQUOTE,StandardBlockElementHandler.INSTANCE_1_1_INDENT);       ELEMENT_HANDLERS.put(HTMLElementName.BR,BR_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.BUTTON,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.CAPTION,StandardBlockElementHandler.INSTANCE_0_0);       ELEMENT_HANDLERS.put(HTMLElementName.CENTER,StandardBlockElementHandler.INSTANCE_1_1);       ELEMENT_HANDLERS.put(HTMLElementName.CODE,FontStyleElementHandler.INSTANCE_CODE);       ELEMENT_HANDLERS.put(HTMLElementName.DD,StandardBlockElementHandler.INSTANCE_0_0_INDENT);       ELEMENT_HANDLERS.put(HTMLElementName.DIR,ListElementHandler.INSTANCE_UL);       ELEMENT_HANDLERS.put(HTMLElementName.DIV,StandardBlockElementHandler.INSTANCE_0_0);       ELEMENT_HANDLERS.put(HTMLElementName.DT,StandardBlockElementHandler.INSTANCE_0_0);       ELEMENT_HANDLERS.put(HTMLElementName.EM,FontStyleElementHandler.INSTANCE_I);       ELEMENT_HANDLERS.put(HTMLElementName.FIELDSET,StandardBlockElementHandler.INSTANCE_1_1);       ELEMENT_HANDLERS.put(HTMLElementName.FORM,StandardBlockElementHandler.INSTANCE_1_1);       ELEMENT_HANDLERS.put(HTMLElementName.H1,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.H2,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.H3,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.H4,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.H5,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.H6,StandardBlockElementHandler.INSTANCE_2_1);       ELEMENT_HANDLERS.put(HTMLElementName.HEAD,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.HR,HR_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.I,FontStyleElementHandler.INSTANCE_I);       ELEMENT_HANDLERS.put(HTMLElementName.LEGEND,StandardBlockElementHandler.INSTANCE_0_0);       ELEMENT_HANDLERS.put(HTMLElementName.LI,LI_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.MENU,ListElementHandler.INSTANCE_UL);       ELEMENT_HANDLERS.put(HTMLElementName.MAP,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.NOFRAMES,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.NOSCRIPT,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.OL,ListElementHandler.INSTANCE_OL);       ELEMENT_HANDLERS.put(HTMLElementName.P,StandardBlockElementHandler.INSTANCE_1_1);       ELEMENT_HANDLERS.put(HTMLElementName.PRE,PRE_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.SCRIPT,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.SELECT,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.STRONG,FontStyleElementHandler.INSTANCE_B);       ELEMENT_HANDLERS.put(HTMLElementName.STYLE,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.TEXTAREA,RemoveElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.TD,TD_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.TH,TD_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.TR,TR_ElementHandler.INSTANCE);       ELEMENT_HANDLERS.put(HTMLElementName.U,FontStyleElementHandler.INSTANCE_U);       ELEMENT_HANDLERS.put(HTMLElementName.UL,ListElementHandler.INSTANCE_UL);     }     static int access$1408(    Processor x0){       int i=x0.listBulletNumber;       x0.listBulletNumber=i + 1;       return i;     }     static int access$1508(    Processor x0){       int i=x0.listIndentLevel;       x0.listIndentLevel=i + 1;       return i;     }     static int access$1510(    Processor x0){       int i=x0.listIndentLevel;       x0.listIndentLevel=i - 1;       return i;     }     static int access$508(    Processor x0){       int i=x0.blockIndentLevel;       x0.blockIndentLevel=i + 1;       return i;     }     static int access$510(    Processor x0){       int i=x0.blockIndentLevel;       x0.blockIndentLevel=i - 1;       return i;     }     public Processor(    Renderer renderer,    Segment rootSegment,    int maxLineLength,    String newLine,    boolean includeHyperlinkURLs,    boolean decorateFontStyles,    boolean convertNonBreakingSpaces,    int blockIndentSize,    int listIndentSize,    char[] listBullets,    String tableCellSeparator){       this.renderer=renderer;       this.rootSegment=rootSegment;       this.source=rootSegment.source;       this.maxLineLength=maxLineLength;       this.newLine=newLine;       this.includeHyperlinkURLs=includeHyperlinkURLs;       this.decorateFontStyles=decorateFontStyles;       this.convertNonBreakingSpaces=convertNonBreakingSpaces;       this.blockIndentSize=blockIndentSize;       this.listIndentSize=listIndentSize;       this.listBullets=listBullets;       this.tableCellSeparator=tableCellSeparator;     }     public void appendTo(    Appendable appendable) throws IOException {       reset();       this.appendable=appendable;       appendSegmentProcessingChildElements(this.rootSegment.begin,this.rootSegment.end,this.rootSegment.getChildElements());     }     private void reset(){       this.renderedIndex=0;       this.atStartOfLine=true;       this.col=0;       this.blockIndentLevel=0;       this.listIndentLevel=0;       this.blockVerticalMargin=-1;       this.preformatted=$assertionsDisabled;       this.ignoreInitialWhitespace=$assertionsDisabled;       this.lastCharWhiteSpace=$assertionsDisabled;       this.bullet=$assertionsDisabled;     }     public void appendElementContent(    Element element) throws IOException {       int contentEnd=element.getContentEnd();       if (!element.isEmpty() && this.renderedIndex < contentEnd) {         int contentBegin=element.getStartTag().end;         appendSegmentProcessingChildElements(Math.max(this.renderedIndex,contentBegin),contentEnd,element.getChildElements());       }     }     private void appendSegmentProcessingChildElements(    int begin,    int end,    List<Element> childElements) throws IOException {       int index=begin;       for (      Element childElement : childElements) {         if (index < childElement.end) {           if (index < childElement.begin) {             appendSegmentRemovingTags(index,childElement.begin);           }           getElementHandler(childElement).process(this,childElement);           index=Math.max(this.renderedIndex,childElement.end);         }       }       if (index < end) {         appendSegmentRemovingTags(index,end);       }     }     private static ElementHandler getElementHandler(    Element element){       if (element.getStartTag().getStartTagType().isServerTag()) {         return RemoveElementHandler.INSTANCE;       }       ElementHandler elementHandler=ELEMENT_HANDLERS.get(element.getName());       return elementHandler == null ? StandardInlineElementHandler.INSTANCE : elementHandler;     }     private void appendSegmentRemovingTags(    int begin,    int end) throws IOException {       int index=begin;       while (true) {         Tag tag=this.source.getNextTag(index);         if (tag == null || tag.begin >= end) {           break;         }         appendSegment(index,tag.begin);         index=tag.end;       }       appendSegment(index,end);     }     private void appendSegment(    int begin,    int end) throws IOException {       if (!$assertionsDisabled && begin > end) {         throw new AssertionError();       }       if (begin < this.renderedIndex) {         begin=this.renderedIndex;       }       if (begin < end) {         try {           if (this.preformatted) {             appendPreformattedSegment(begin,end);           }  else {             appendNonPreformattedSegment(begin,end);           }         }   finally {           if (this.renderedIndex < end) {             this.renderedIndex=end;           }         }       }     }     private void appendPreformattedSegment(    int begin,    int end) throws IOException {       if (!$assertionsDisabled && begin >= end) {         throw new AssertionError();       }       if (!$assertionsDisabled && begin < this.renderedIndex) {         throw new AssertionError();       }       if (isStartOfBlock()) {         appendBlockVerticalMargin();       }       String text=CharacterReference.decode(this.source.subSequence(begin,end),$assertionsDisabled,this.convertNonBreakingSpaces);       int i=0;       while (i < text.length()) {         char ch=text.charAt(i);         if (ch == '\n') {           newLine();         }  else         if (ch == '\r') {           newLine();           int nextI=i + 1;           if (nextI != text.length()) {             if (text.charAt(nextI) == '\n') {               i++;             }           }  else {             return;           }         }  else {           append(ch);         }         i++;       }     }     private void appendNonPreformattedSegment(    int begin,    int end) throws IOException {       if (!$assertionsDisabled && begin >= end) {         throw new AssertionError();       }       if (!$assertionsDisabled && begin < this.renderedIndex) {         throw new AssertionError();       }       String text=CharacterReference.decodeCollapseWhiteSpace(this.source.subSequence(begin,end),this.convertNonBreakingSpaces);       if (text.length() == 0) {         if (!this.ignoreInitialWhitespace) {           this.lastCharWhiteSpace=true;           return;         }         return;       }       if (isStartOfBlock()) {         appendBlockVerticalMargin();       }  else       if (this.lastCharWhiteSpace || (Segment.isWhiteSpace(this.source.charAt(begin)) && !this.ignoreInitialWhitespace)) {         append(' ');       }       int textIndex=0;       int i=0;       this.ignoreInitialWhitespace=$assertionsDisabled;       this.lastCharWhiteSpace=$assertionsDisabled;       while (true) {         if (i < text.length() && (text.charAt(i) != ' ' || ((i + 1 < text.length() && text.charAt(i + 1) == '>') || (i + 6 < text.length() && text.startsWith(""From "",i + 1))))) {           i++;         }  else {           if (((this.col + i) - textIndex) + 1 >= this.maxLineLength) {             if (this.lastCharWhiteSpace && (this.blockIndentLevel | this.listIndentLevel) == 0) {               append(' ');             }             startNewLine(0);           }  else           if (this.lastCharWhiteSpace) {             append(' ');           }           append(text,textIndex,i);           if (i != text.length()) {             this.lastCharWhiteSpace=true;             i++;             textIndex=i;           }  else {             this.lastCharWhiteSpace=Segment.isWhiteSpace(this.source.charAt(end - 1));             return;           }         }       }     }     public boolean isStartOfBlock(){       if (this.blockVerticalMargin != -1) {         return true;       }       return $assertionsDisabled;     }     public void appendBlockVerticalMargin() throws IOException {       if (!$assertionsDisabled && this.blockVerticalMargin == -1) {         throw new AssertionError();       }       startNewLine(this.blockVerticalMargin);       this.blockVerticalMargin=-1;     }     public void blockBoundary(    int verticalMargin) throws IOException {       if (this.blockVerticalMargin < verticalMargin) {         this.blockVerticalMargin=verticalMargin;       }     }     public void startNewLine(    int verticalMargin) throws IOException {       int requiredNewLines=verticalMargin + (this.atStartOfLine ? 0 : 1);       for (int i=0; i < requiredNewLines; i++) {         this.appendable.append(this.newLine);       }       this.atStartOfLine=true;       this.ignoreInitialWhitespace=$assertionsDisabled;       this.lastCharWhiteSpace=$assertionsDisabled;     }     public void newLine() throws IOException {       this.appendable.append(this.newLine);       this.atStartOfLine=true;       this.ignoreInitialWhitespace=$assertionsDisabled;       this.lastCharWhiteSpace=$assertionsDisabled;     }     public void appendIndent() throws IOException {       for (int i=this.blockIndentLevel * this.blockIndentSize; i > 0; i--) {         this.appendable.append(' ');       }       if (this.bullet) {         for (int i2=(this.listIndentLevel - 1) * this.listIndentSize; i2 > 0; i2--) {           this.appendable.append(' ');         }         if (this.listBulletNumber == -1) {           for (int i3=this.listIndentSize - 2; i3 > 0; i3--) {             this.appendable.append(' ');           }           this.appendable.append(this.listBullets[(this.listIndentLevel - 1) % this.listBullets.length]).append(' ');         }  else {           String bulletNumberString=Integer.toString(this.listBulletNumber);           for (int i4=(this.listIndentSize - bulletNumberString.length()) - 2; i4 > 0; i4--) {             this.appendable.append(' ');           }           this.appendable.append(bulletNumberString).append("". "");         }         this.bullet=$assertionsDisabled;       }  else {         for (int i5=this.listIndentLevel * this.listIndentSize; i5 > 0; i5--) {           this.appendable.append(' ');         }       }       this.col=(this.blockIndentLevel * this.blockIndentSize) + (this.listIndentLevel * this.listIndentSize);       this.atStartOfLine=$assertionsDisabled;     }     public Processor append(    char ch) throws IOException {       if (this.atStartOfLine) {         appendIndent();       }       this.appendable.append(ch);       this.col++;       return this;     }     public Processor append(    String text) throws IOException {       if (this.atStartOfLine) {         appendIndent();       }       this.appendable.append(text);       this.col+=text.length();       return this;     }     private void append(    CharSequence text,    int begin,    int end) throws IOException {       if (this.atStartOfLine) {         appendIndent();       }       for (int i=begin; i < end; i++) {         this.appendable.append(text.charAt(i));       }       this.col+=end - begin;     } public static class RemoveElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new RemoveElementHandler();       private RemoveElementHandler(){       }       @Override public void process(      Processor x,      Element element){       }     } public static class StandardInlineElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new StandardInlineElementHandler();       private StandardInlineElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.appendElementContent(element);       }     } private static class FontStyleElementHandler implements ElementHandler {       private final char decorationChar;       public static final ElementHandler INSTANCE_B=new FontStyleElementHandler('*');       public static final ElementHandler INSTANCE_I=new FontStyleElementHandler('/');       public static final ElementHandler INSTANCE_U=new FontStyleElementHandler('_');       public static final ElementHandler INSTANCE_CODE=new FontStyleElementHandler('|');       public FontStyleElementHandler(      char decorationChar){         this.decorationChar=decorationChar;       }       @Override public void process(      Processor x,      Element element) throws IOException {         if (x.decorateFontStyles) {           if (x.lastCharWhiteSpace) {             x.append(' ');             x.lastCharWhiteSpace=Processor.$assertionsDisabled;           }           x.append(this.decorationChar);           x.appendElementContent(element);           if (x.decorateFontStyles) {             x.append(this.decorationChar);             return;           }           return;         }         x.appendElementContent(element);       }     } private static class StandardBlockElementHandler implements ElementHandler {       private final int bottomMargin;       private final boolean indent;       private final int topMargin;       public static final ElementHandler INSTANCE_0_0=new StandardBlockElementHandler(0,0,Processor.$assertionsDisabled);       public static final ElementHandler INSTANCE_1_1=new StandardBlockElementHandler(1,1,Processor.$assertionsDisabled);       public static final ElementHandler INSTANCE_2_1=new StandardBlockElementHandler(2,1,Processor.$assertionsDisabled);       public static final ElementHandler INSTANCE_0_0_INDENT=new StandardBlockElementHandler(0,0,true);       public static final ElementHandler INSTANCE_1_1_INDENT=new StandardBlockElementHandler(1,1,true);       public StandardBlockElementHandler(      int topMargin,      int bottomMargin,      boolean indent){         this.topMargin=topMargin;         this.bottomMargin=bottomMargin;         this.indent=indent;       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.blockBoundary(this.topMargin);         if (this.indent) {           Processor.access$508(x);         }         x.appendElementContent(element);         if (this.indent) {           Processor.access$510(x);         }         x.blockBoundary(this.bottomMargin);       }     } private static class A_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new A_ElementHandler();       private A_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         String renderedHyperlinkURL;         x.appendElementContent(element);         if (x.includeHyperlinkURLs && (renderedHyperlinkURL=x.renderer.renderHyperlinkURL(element.getStartTag())) != null) {           int linkLength=renderedHyperlinkURL.length() + 1;           if (x.col + linkLength >= x.maxLineLength) {             x.startNewLine(0);           }  else {             x.append(' ');           }           x.append(renderedHyperlinkURL);           x.lastCharWhiteSpace=true;         }       }     } private static class BR_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new BR_ElementHandler();       private BR_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.newLine();         x.blockBoundary(0);       }     } private static class HR_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new HR_ElementHandler();       private HR_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.blockBoundary(0);         x.appendBlockVerticalMargin();         for (int i=0; i < 72; i++) {           x.append('-');         }         x.blockBoundary(0);       }     } private static class ListElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE_OL=new ListElementHandler(0);       public static final ElementHandler INSTANCE_UL=new ListElementHandler(-1);       private final int initialListBulletNumber;       public ListElementHandler(      int initialListBulletNumber){         this.initialListBulletNumber=initialListBulletNumber;       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.blockBoundary(0);         int oldListBulletNumber=x.listBulletNumber;         x.listBulletNumber=this.initialListBulletNumber;         Processor.access$1508(x);         x.appendElementContent(element);         Processor.access$1510(x);         x.listBulletNumber=oldListBulletNumber;         x.blockBoundary(0);       }     } private static class LI_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new LI_ElementHandler();       private LI_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         if (x.listBulletNumber != -1) {           Processor.access$1408(x);         }         x.bullet=true;         x.blockBoundary(0);         x.appendBlockVerticalMargin();         x.appendIndent();         x.ignoreInitialWhitespace=true;         x.appendElementContent(element);         x.bullet=Processor.$assertionsDisabled;         x.blockBoundary(0);       }     } private static class PRE_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new PRE_ElementHandler();       private PRE_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.blockBoundary(1);         boolean oldPreformatted=x.preformatted;         x.preformatted=true;         x.appendElementContent(element);         x.preformatted=oldPreformatted;         x.blockBoundary(1);       }     } private static class TD_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new TD_ElementHandler();       private TD_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         if (!x.isStartOfBlock()) {           x.append(x.tableCellSeparator);         }         x.lastCharWhiteSpace=Processor.$assertionsDisabled;         x.appendElementContent(element);       }     } private static class TR_ElementHandler implements ElementHandler {       public static final ElementHandler INSTANCE=new TR_ElementHandler();       private TR_ElementHandler(){       }       @Override public void process(      Processor x,      Element element) throws IOException {         x.blockBoundary(0);         x.appendElementContent(element);         x.blockBoundary(0);       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\RowColumnVector.code","public final class RowColumnVector {   private static final RowColumnVector FIRST=new RowColumnVector(1,1,0);   private static final RowColumnVector[] STREAMED=new RowColumnVector[0];   private final int column;   private final int pos;   private final int row;   private RowColumnVector(  int row,  int column,  int pos){     this.row=row;     this.column=column;     this.pos=pos;   }   private RowColumnVector(  int pos){     this(-1,-1,pos);   }   public int getRow(){     return this.row;   }   public int getColumn(){     return this.column;   }   public int getPos(){     return this.pos;   }   public String toString(){     return appendTo(new StringBuilder(20)).toString();   }   public StringBuilder appendTo(  StringBuilder sb){     return this.row != -1 ? sb.append(""(r"").append(this.row).append("",c"").append(this.column).append("",p"").append(this.pos).append(')') : sb.append(""(p"").append(this.pos).append(')');   }   public static RowColumnVector[] getCacheArray(  Source source){     if (source.isStreamed()) {       return STREAMED;     }     int lastSourcePos=source.end - 1;     ArrayList<RowColumnVector> list=new ArrayList<>();     list.add(FIRST);     int row=1;     for (int pos=0; pos <= lastSourcePos; pos++) {       char ch=source.charAt(pos);       if (ch == '\n' || (ch == '\r' && (pos == lastSourcePos || source.charAt(pos + 1) != '\n'))) {         row++;         list.add(new RowColumnVector(row,1,pos + 1));       }     }     return (RowColumnVector[])list.toArray(new RowColumnVector[list.size()]);   }   public static RowColumnVector get(  RowColumnVector[] cacheArray,  int pos){     if (cacheArray == STREAMED) {       return new RowColumnVector(pos);     }     int low=0;     int high=cacheArray.length - 1;     while (true) {       int mid=(low + high) >> 1;       RowColumnVector rowColumnVector=cacheArray[mid];       if (rowColumnVector.pos < pos) {         if (mid == high) {           return new RowColumnVector(rowColumnVector.row,(pos - rowColumnVector.pos) + 1,pos);         }         low=mid + 1;       }  else       if (rowColumnVector.pos > pos) {         high=mid - 1;       }  else {         return rowColumnVector;       }     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Segment.code","public class Segment implements Comparable<Segment>, CharSequence {   private static final char[] WHITESPACE={' ','\n','\r','\t','\f',8203};   final int begin;   final int end;   final Source source;   public Segment(  Source source,  int begin,  int end){     if (begin == -1 || end == -1 || begin > end) {       throw new IllegalArgumentException();     }     this.begin=begin;     this.end=end;     if (source == null) {       throw new IllegalArgumentException(""source argument must not be null"");     }     this.source=source;   }   public Segment(  int length){     this.begin=0;     this.end=length;     this.source=(Source)this;   }   public Segment(){     this(0,0);   }   public Segment(  int begin,  int end){     this.begin=begin;     this.end=end;     this.source=null;   }   public final Source getSource(){     if (this.source.isStreamed()) {       throw new UnsupportedOperationException(""Source object is not available when using StreamedSource"");     }     return this.source;   }   public final int getBegin(){     return this.begin;   }   public final int getEnd(){     return this.end;   }   public final boolean equals(  Object object){     if (this == object) {       return true;     }     if (object == null || !(object instanceof Segment)) {       return false;     }     Segment segment=(Segment)object;     return segment.begin == this.begin && segment.end == this.end && segment.source == this.source;   }   public int hashCode(){     return this.begin + this.end;   }   @Override public int length(){     return this.end - this.begin;   }   public final boolean encloses(  Segment segment){     return this.begin <= segment.begin && this.end >= segment.end;   }   public final boolean encloses(  int pos){     return this.begin <= pos && pos < this.end;   }   @Override public String toString(){     return this.source.subSequence(this.begin,this.end).toString();   }   public Renderer getRenderer(){     return new Renderer(this);   }   public TextExtractor getTextExtractor(){     return new TextExtractor(this);   }   public Iterator<Segment> getNodeIterator(){     return new NodeIterator(this);   }   public List<Tag> getAllTags(){     return getAllTags(null);   }   public List<Tag> getAllTags(  TagType tagType){     Tag tag=checkTagEnclosure(Tag.getNextTag(this.source,this.begin,tagType));     if (tag == null) {       return Collections.emptyList();     }     ArrayList<Tag> list=new ArrayList<>();     do {       list.add(tag);       tag=checkTagEnclosure(tag.getNextTag(tagType));     }  while (tag != null);     return list;   }   public List<StartTag> getAllStartTags(){     StartTag startTag=checkEnclosure(StartTag.getNext(this.source,this.begin));     if (startTag == null) {       return Collections.emptyList();     }     ArrayList<StartTag> list=new ArrayList<>();     do {       list.add(startTag);       startTag=checkEnclosure(startTag.getNextStartTag());     }  while (startTag != null);     return list;   }   public List<StartTag> getAllStartTags(  StartTagType startTagType){     if (startTagType == null) {       return getAllStartTags();     }     StartTag startTag=(StartTag)checkTagEnclosure(Tag.getNextTag(this.source,this.begin,startTagType));     if (startTag == null) {       return Collections.emptyList();     }     ArrayList<StartTag> list=new ArrayList<>();     do {       list.add(startTag);       startTag=(StartTag)checkTagEnclosure(startTag.getNextTag(startTagType));     }  while (startTag != null);     return list;   }   public List<StartTag> getAllStartTags(  String name){     if (name == null) {       return getAllStartTags();     }     boolean isXMLTagName=Tag.isXMLName(name);     StartTag startTag=checkEnclosure(StartTag.getNext(this.source,this.begin,name,StartTagType.NORMAL,isXMLTagName));     if (startTag == null) {       return Collections.emptyList();     }     ArrayList<StartTag> list=new ArrayList<>();     do {       list.add(startTag);       startTag=checkEnclosure(StartTag.getNext(this.source,startTag.begin + 1,name,StartTagType.NORMAL,isXMLTagName));     }  while (startTag != null);     return list;   }   public List<StartTag> getAllStartTags(  String attributeName,  String value,  boolean valueCaseSensitive){     StartTag startTag=checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,value,valueCaseSensitive));     if (startTag == null) {       return Collections.emptyList();     }     ArrayList<StartTag> list=new ArrayList<>();     do {       list.add(startTag);       startTag=checkEnclosure(this.source.getNextStartTag(startTag.begin + 1,attributeName,value,valueCaseSensitive));     }  while (startTag != null);     return list;   }   public List<StartTag> getAllStartTags(  String attributeName,  Pattern valueRegexPattern){     StartTag startTag=checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,valueRegexPattern));     if (startTag == null) {       return Collections.emptyList();     }     ArrayList<StartTag> list=new ArrayList<>();     do {       list.add(startTag);       startTag=checkEnclosure(this.source.getNextStartTag(startTag.begin + 1,attributeName,valueRegexPattern));     }  while (startTag != null);     return list;   }   public List<StartTag> getAllStartTagsByClass(  String className){     return getAllStartTags(""class"",getClassPattern(className));   }   public List<Element> getChildElements(){     if (length() == 0) {       return Collections.emptyList();     }     List<Element> childElements=new ArrayList<>();     int pos=this.begin;     while (true) {       StartTag childStartTag=this.source.getNextStartTag(pos);       if (childStartTag != null && childStartTag.begin < this.end) {         if (childStartTag.getTagType().isServerTag()) {           pos=childStartTag.end;         }  else {           Element childElement=childStartTag.getElement();           childElements.add(childElement);           childElement.getChildElements();           pos=childElement.end;         }       }  else {         return childElements;       }     }   }   public List<Element> getAllElements(){     return getAllElements(getAllStartTags());   }   public List<Element> getAllElements(  String name){     return getAllElements(getAllStartTags(name));   }   public List<Element> getAllElements(  StartTagType startTagType){     if (startTagType == null) {       throw new IllegalArgumentException(""startTagType argument must not be null"");     }     return getAllElements(getAllStartTags(startTagType));   }   public List<Element> getAllElements(  String attributeName,  String value,  boolean valueCaseSensitive){     return getAllElements(getAllStartTags(attributeName,value,valueCaseSensitive));   }   public List<Element> getAllElements(  String attributeName,  Pattern valueRegexPattern){     return getAllElements(getAllStartTags(attributeName,valueRegexPattern));   }   public List<Element> getAllElementsByClass(  String className){     return getAllElements(getAllStartTagsByClass(className));   }   public List<CharacterReference> getAllCharacterReferences(){     CharacterReference characterReference=getNextCharacterReference(this.begin);     if (characterReference == null) {       return Collections.emptyList();     }     ArrayList<CharacterReference> list=new ArrayList<>();     do {       list.add(characterReference);       characterReference=getNextCharacterReference(characterReference.end);     }  while (characterReference != null);     return list;   }   public final StartTag getFirstStartTag(){     return checkEnclosure(this.source.getNextStartTag(this.begin));   }   public final StartTag getFirstStartTag(  StartTagType startTagType){     return checkEnclosure(this.source.getNextStartTag(this.begin,startTagType));   }   public final StartTag getFirstStartTag(  String name){     return checkEnclosure(this.source.getNextStartTag(this.begin,name));   }   public final StartTag getFirstStartTag(  String attributeName,  String value,  boolean valueCaseSensitive){     return checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,value,valueCaseSensitive));   }   public final StartTag getFirstStartTag(  String attributeName,  Pattern valueRegexPattern){     return checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,valueRegexPattern));   }   public final StartTag getFirstStartTagByClass(  String className){     return checkEnclosure(this.source.getNextStartTagByClass(this.begin,className));   }   public final Element getFirstElement(){     StartTag startTag=checkEnclosure(StartTag.getNext(this.source,this.begin));     while (startTag != null) {       Element element=startTag.getElement();       if (element.end > this.end) {         startTag=checkEnclosure(startTag.getNextStartTag());       }  else {         return element;       }     }     return null;   }   public final Element getFirstElement(  String name){     if (name == null) {       return getFirstElement();     }     boolean isXMLTagName=Tag.isXMLName(name);     StartTag startTag=checkEnclosure(StartTag.getNext(this.source,this.begin,name,StartTagType.NORMAL,isXMLTagName));     while (startTag != null) {       Element element=startTag.getElement();       if (element.end > this.end) {         startTag=checkEnclosure(StartTag.getNext(this.source,startTag.begin + 1,name,StartTagType.NORMAL,isXMLTagName));       }  else {         return element;       }     }     return null;   }   public final Element getFirstElement(  String attributeName,  String value,  boolean valueCaseSensitive){     StartTag startTag=checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,value,valueCaseSensitive));     while (startTag != null) {       Element element=startTag.getElement();       if (element.end > this.end) {         startTag=checkEnclosure(this.source.getNextStartTag(startTag.begin + 1,attributeName,value,valueCaseSensitive));       }  else {         return element;       }     }     return null;   }   public final Element getFirstElement(  String attributeName,  Pattern valueRegexPattern){     StartTag startTag=checkEnclosure(this.source.getNextStartTag(this.begin,attributeName,valueRegexPattern));     while (startTag != null) {       Element element=startTag.getElement();       if (element.end > this.end) {         startTag=checkEnclosure(this.source.getNextStartTag(startTag.begin + 1,attributeName,valueRegexPattern));       }  else {         return element;       }     }     return null;   }   public final Element getFirstElementByClass(  String className){     StartTag startTag=checkEnclosure(this.source.getNextStartTagByClass(this.begin,className));     while (startTag != null) {       Element element=startTag.getElement();       if (element.end > this.end) {         startTag=checkEnclosure(this.source.getNextStartTagByClass(startTag.begin + 1,className));       }  else {         return element;       }     }     return null;   }   public List<FormControl> getFormControls(){     return FormControl.getAll(this);   }   public FormFields getFormFields(){     return new FormFields(getFormControls());   }   public Attributes parseAttributes(){     return this.source.parseAttributes(this.begin,this.end);   }   public void ignoreWhenParsing(){     this.source.ignoreWhenParsing(this.begin,this.end);   }   @Override public int compareTo(  Segment segment){     if (this == segment) {       return 0;     }     if (this.begin < segment.begin) {       return -1;     }     if (this.begin > segment.begin) {       return 1;     }     if (this.end < segment.end) {       return -1;     }     return this.end > segment.end ? 1 : 0;   }   public final boolean isWhiteSpace(){     for (int i=this.begin; i < this.end; i++) {       if (!isWhiteSpace(this.source.charAt(i))) {         return false;       }     }     return true;   }   public static final boolean isWhiteSpace(  char ch){     char[] arr$=WHITESPACE;     for (    char whiteSpaceChar : arr$) {       if (ch == whiteSpaceChar) {         return true;       }     }     return false;   }   public String getDebugInfo(){     StringBuilder sb=new StringBuilder(50);     sb.append('(');     this.source.getRowColumnVector(this.begin).appendTo(sb);     sb.append('-');     this.source.getRowColumnVector(this.end).appendTo(sb);     sb.append(')');     return sb.toString();   }   @Override public char charAt(  int index){     return this.source.charAt(this.begin + index);   }   @Override public CharSequence subSequence(  int beginIndex,  int endIndex){     return this.source.subSequence(this.begin + beginIndex,this.begin + endIndex);   }   public static final StringBuilder appendCollapseWhiteSpace(  StringBuilder sb,  CharSequence text){     int textLength=text.length();     int i=0;     boolean lastWasWhiteSpace=false;     while (true) {       if (i >= textLength) {         break;       }       if (isWhiteSpace(text.charAt(i))) {         i++;       }  else {         while (true) {           int i2=i + 1;           char ch=text.charAt(i);           if (isWhiteSpace(ch)) {             lastWasWhiteSpace=true;           }  else {             if (lastWasWhiteSpace) {               sb.append(' ');               lastWasWhiteSpace=false;             }             sb.append(ch);           }           if (i2 >= textLength) {             break;           }           i=i2;         }       }     }     return sb;   }   public static final Pattern getClassPattern(  String className){     return Pattern.compile("".*(\\s|^)"" + className + ""(\\s|$).*"",32);   }   private List<Element> getAllElements(  List<StartTag> startTags){     if (startTags.isEmpty()) {       return Collections.emptyList();     }     ArrayList<Element> elements=new ArrayList<>(startTags.size());     for (    StartTag startTag : startTags) {       Element element=startTag.getElement();       if (element.end <= this.end) {         elements.add(element);       }     }     return elements;   }   private StartTag checkEnclosure(  StartTag startTag){     if (startTag == null || startTag.end > this.end) {       return null;     }     return startTag;   }   private Tag checkTagEnclosure(  Tag tag){     if (tag == null || tag.end > this.end) {       return null;     }     return tag;   }   private CharacterReference getNextCharacterReference(  int pos){     CharacterReference characterReference=this.source.getNextCharacterReference(pos);     if (characterReference == null || characterReference.end > this.end) {       return null;     }     return characterReference;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SelectFormControl.code","public static final class SelectFormControl extends FormControl {   public ElementContainer[] optionElementContainers;   public SelectFormControl(  Element element){     super(element,element.getAttributes().get(""multiple"") != null ? FormControlType.SELECT_MULTIPLE : FormControlType.SELECT_SINGLE,false);     List<Element> optionElements=element.getAllElements(HTMLElementName.OPTION);     this.optionElementContainers=new ElementContainer[optionElements.size()];     int x=0;     for (    Element optionElement : optionElements) {       ElementContainer optionElementContainer=new ElementContainer(optionElement,true);       if (optionElementContainer.predefinedValue == null) {         optionElementContainer.predefinedValue=CharacterReference.decodeCollapseWhiteSpace(optionElementContainer.element.getContent());       }       this.optionElementContainers[x]=optionElementContainer;       x++;     }   }   @Override public String getPredefinedValue(){     throw new UnsupportedOperationException(""Use getPredefinedValues() method instead on SELECT controls"");   }   @Override public Collection<String> getPredefinedValues(){     LinkedHashSet<String> linkedHashSet=new LinkedHashSet<>(this.optionElementContainers.length * 2,1.0f);     for (int i=0; i < this.optionElementContainers.length; i++) {       linkedHashSet.add(this.optionElementContainers[i].predefinedValue);     }     return linkedHashSet;   }   @Override public Iterator<Element> getOptionElementIterator(){     return new OptionElementIterator();   }   @Override public boolean setValue(  String value){     return addValue(value,false);   }   @Override public boolean addValue(  String value){     return addValue(value,this.formControlType == FormControlType.SELECT_MULTIPLE);   }   private boolean addValue(  String value,  boolean allowMultipleValues){     boolean valueFound=false;     for (int i=0; i < this.optionElementContainers.length; i++) {       if (this.optionElementContainers[i].setSelected(value,""selected"",allowMultipleValues)) {         valueFound=true;       }     }     return valueFound;   }   @Override void addValuesTo(  Collection<String> collection){     for (int i=0; i < this.optionElementContainers.length; i++) {       if (this.optionElementContainers[i].getBooleanAttribute(""selected"")) {         FormControl.addValueTo(collection,this.optionElementContainers[i].predefinedValue);       }     }   }   @Override void addToFormFields(  FormFields formFields){     for (int i=0; i < this.optionElementContainers.length; i++) {       formFields.add(this,this.optionElementContainers[i].predefinedValue);     }   }   @Override void replaceInOutputDocument(  OutputDocument outputDocument){     if (this.outputStyle == FormControlOutputStyle.REMOVE) {       outputDocument.remove(getElement());       return;     }     if (this.outputStyle == FormControlOutputStyle.DISPLAY_VALUE) {       StringBuilder sb=new StringBuilder(100);       for (int i=0; i < this.optionElementContainers.length; i++) {         if (this.optionElementContainers[i].getBooleanAttribute(""selected"")) {           sb.append(getOptionLabel(this.optionElementContainers[i].element));           sb.append(FormControlOutputStyle.ConfigDisplayValue.MultipleValueSeparator);         }       }       if (sb.length() > 0) {         sb.setLength(sb.length() - FormControlOutputStyle.ConfigDisplayValue.MultipleValueSeparator.length());       }       outputDocument.replace(getElement(),getDisplayValueHTML(sb,false));       return;     }     replaceAttributesInOutputDocumentIfModified(outputDocument);     for (int i2=0; i2 < this.optionElementContainers.length; i2++) {       this.optionElementContainers[i2].replaceAttributesInOutputDocumentIfModified(outputDocument);     }   }   private static String getOptionLabel(  Element optionElement){     String labelAttributeValue=optionElement.getAttributeValue(HTMLElementName.LABEL);     return labelAttributeValue != null ? labelAttributeValue : CharacterReference.decodeCollapseWhiteSpace(optionElement.getContent());   } private final class OptionElementIterator implements Iterator<Element> {     private int i;     private OptionElementIterator(){       this.i=0;     }     @Override public boolean hasNext(){       return this.i < SelectFormControl.this.optionElementContainers.length;     }     @Override public Element next(){       if (!hasNext()) {         throw new NoSuchElementException();       }       ElementContainer[] elementContainerArr=SelectFormControl.this.optionElementContainers;       int i=this.i;       this.i=i + 1;       return elementContainerArr[i].element;     }     @Override public void remove(){       throw new UnsupportedOperationException();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Source.code","public final class Source extends Segment implements Iterable<Segment> {   private static final String CR=""\r"";   private static final String CRLF=""\r\n"";   private static final String LF=""\n"";   private static final String UNINITIALISED="""";   private List<Element> allElements;   List<StartTag> allStartTags;   List<Tag> allTags;   Tag[] allTagsArray;   final Cache cache;   private List<Element> childElements;   private String documentSpecifiedEncoding;   private String encoding;   private String encodingSpecificationInfo;   int[] fullSequentialParseData;   Logger logger;   private String newLine;   private ParseText parseText;   private OutputDocument parseTextOutputDocument;   private String preliminaryEncodingInfo;   private RowColumnVector[] rowColumnVectorCacheArray;   private final CharSequence sourceText;   boolean useAllTypesCache;   boolean useSpecialTypesCache;   private static String lastNewLine=null;   static final String PACKAGE_NAME=Source.class.getPackage().getName();   @Deprecated public static boolean LegacyIteratorCompatabilityMode=false;   public Source(  CharSequence text){     super(text.length());     this.documentSpecifiedEncoding=UNINITIALISED;     this.encoding=UNINITIALISED;     this.preliminaryEncodingInfo=null;     this.newLine=UNINITIALISED;     this.parseText=null;     this.parseTextOutputDocument=null;     this.rowColumnVectorCacheArray=null;     this.useAllTypesCache=true;     this.useSpecialTypesCache=true;     this.fullSequentialParseData=null;     this.allTagsArray=null;     this.allTags=null;     this.allStartTags=null;     this.allElements=null;     this.childElements=null;     this.sourceText=text.toString();     setLogger(newLogger());     this.cache=new Cache(this);   }   private Source(  EncodingDetector encodingDetector) throws IOException {     this(getString(encodingDetector));     this.encoding=encodingDetector.getEncoding();     this.encodingSpecificationInfo=encodingDetector.getEncodingSpecificationInfo();     this.preliminaryEncodingInfo=encodingDetector.getPreliminaryEncoding() + "": "" + encodingDetector.getPreliminaryEncodingSpecificationInfo();   }   public Source(  Reader reader,  String encoding) throws IOException {     this(Util.getString(reader));     if (encoding != null) {       this.encoding=encoding;       this.encodingSpecificationInfo=""InputStreamReader.getEncoding() of constructor argument"";     }   }   public Source(  CharSequence sourceText,  StreamedParseText streamedParseText,  String encoding,  String encodingSpecificationInfo,  String preliminaryEncodingInfo){     super(streamedParseText.getEnd());     this.documentSpecifiedEncoding=UNINITIALISED;     this.encoding=UNINITIALISED;     this.preliminaryEncodingInfo=null;     this.newLine=UNINITIALISED;     this.parseText=null;     this.parseTextOutputDocument=null;     this.rowColumnVectorCacheArray=null;     this.useAllTypesCache=true;     this.useSpecialTypesCache=true;     this.fullSequentialParseData=null;     this.allTagsArray=null;     this.allTags=null;     this.allStartTags=null;     this.allElements=null;     this.childElements=null;     this.cache=Cache.STREAMED_SOURCE_MARKER;     this.useAllTypesCache=false;     this.useSpecialTypesCache=false;     this.fullSequentialParseData=new int[1];     if (encoding != null) {       this.encoding=encoding;     }     this.encodingSpecificationInfo=encodingSpecificationInfo;     this.preliminaryEncodingInfo=preliminaryEncodingInfo;     this.sourceText=sourceText;     this.parseText=streamedParseText;     setLogger(newLogger());   }   public Source(  CharSequence sourceText,  boolean CHARACTER_REFERENCE_PARSE_METHOD){     super(sourceText.length());     this.documentSpecifiedEncoding=UNINITIALISED;     this.encoding=UNINITIALISED;     this.preliminaryEncodingInfo=null;     this.newLine=UNINITIALISED;     this.parseText=null;     this.parseTextOutputDocument=null;     this.rowColumnVectorCacheArray=null;     this.useAllTypesCache=true;     this.useSpecialTypesCache=true;     this.fullSequentialParseData=null;     this.allTagsArray=null;     this.allTags=null;     this.allStartTags=null;     this.allElements=null;     this.childElements=null;     this.sourceText=sourceText;     this.cache=null;     this.useAllTypesCache=false;     this.useSpecialTypesCache=false;     setLogger(LoggerDisabled.INSTANCE);   }   public Source(  Reader reader) throws IOException {     this(reader,reader instanceof InputStreamReader ? ((InputStreamReader)reader).getEncoding() : null);   }   public Source(  InputStream inputStream) throws IOException {     this(new EncodingDetector(inputStream));   }   public Source(  URL url) throws IOException {     this(new EncodingDetector(url.openConnection()));   }   public Source(  URLConnection urlConnection) throws IOException {     this(new EncodingDetector(urlConnection));   }   private String setEncoding(  String encoding,  String encodingSpecificationInfo){     if (this.encoding == UNINITIALISED) {       this.encoding=encoding;       this.encodingSpecificationInfo=encodingSpecificationInfo;     }     return encoding;   }   public String getDocumentSpecifiedEncoding(){     String contentValue;     if (this.documentSpecifiedEncoding != UNINITIALISED) {       return this.documentSpecifiedEncoding;     }     Tag xmlDeclarationTag=getTagAt(0);     if (xmlDeclarationTag != null && xmlDeclarationTag.getTagType() == StartTagType.XML_DECLARATION) {       this.documentSpecifiedEncoding=((StartTag)xmlDeclarationTag).getAttributeValue(""encoding"");       if (this.documentSpecifiedEncoding != null) {         return setEncoding(this.documentSpecifiedEncoding,xmlDeclarationTag.toString());       }     }     StartTag contentTypeMetaTag=getFirstStartTag(""http-equiv"",""content-type"",false);     if (contentTypeMetaTag != null && (contentValue=contentTypeMetaTag.getAttributeValue(""content"")) != null) {       this.documentSpecifiedEncoding=getCharsetParameterFromHttpHeaderValue(contentValue);       if (this.documentSpecifiedEncoding != null) {         return setEncoding(this.documentSpecifiedEncoding,contentTypeMetaTag.toString());       }     }     return setEncoding(null,""No encoding specified in document"");   }   public String getEncoding(){     if (this.encoding == UNINITIALISED) {       getDocumentSpecifiedEncoding();     }     return this.encoding;   }   public String getEncodingSpecificationInfo(){     if (this.encoding == UNINITIALISED) {       getDocumentSpecifiedEncoding();     }     return this.encodingSpecificationInfo;   }   public String getPreliminaryEncodingInfo(){     return this.preliminaryEncodingInfo;   }   public boolean isXML(){     Tag xmlDeclarationTag=getTagAt(0);     if (xmlDeclarationTag != null && xmlDeclarationTag.getTagType() == StartTagType.XML_DECLARATION) {       return true;     }     Tag doctypeTag=getNextTag(0,StartTagType.DOCTYPE_DECLARATION);     return (doctypeTag == null || getParseText().indexOf(""xhtml"",doctypeTag.begin,doctypeTag.end) == -1) ? false : true;   }   public String getNewLine(){     if (this.newLine != UNINITIALISED) {       return this.newLine;     }     for (int i=0; i < this.end; i++) {       char ch=this.sourceText.charAt(i);       if (ch == '\n') {         lastNewLine=LF;         this.newLine=LF;         return LF;       }       if (ch == '\r') {         int i2=i + 1;         String str=(i2 >= this.end || this.sourceText.charAt(i2) != '\n') ? CR : CRLF;         lastNewLine=str;         this.newLine=str;         return str;       }     }     this.newLine=null;     return null;   }   public String getBestGuessNewLine(){     String newLine=getNewLine();     if (newLine != null) {       return newLine;     }     return lastNewLine != null ? lastNewLine : Config.NewLine;   }   public int getRow(  int pos){     return getRowColumnVector(pos).getRow();   }   public int getColumn(  int pos){     return getRowColumnVector(pos).getColumn();   }   public RowColumnVector getRowColumnVector(  int pos){     if (pos > this.end) {       throw new IndexOutOfBoundsException();     }     if (this.rowColumnVectorCacheArray == null) {       this.rowColumnVectorCacheArray=RowColumnVector.getCacheArray(this);     }     return RowColumnVector.get(this.rowColumnVectorCacheArray,pos);   }   @Override public String toString(){     return this.sourceText.toString();   }   public Tag[] fullSequentialParse(){     if (this.allTagsArray != null) {       return this.allTagsArray;     }     if (this.cache.getTagCount() != 0) {       this.logger.warn(""Full sequential parse clearing all tags from cache. Consider calling Source.fullSequentialParse() manually immediately after construction of Source."");       this.cache.clear();     }     boolean useAllTypesCacheSave=this.useAllTypesCache;     try {       this.useAllTypesCache=false;       this.useSpecialTypesCache=false;       return Tag.parseAll(this,false);     }   finally {       this.useAllTypesCache=useAllTypesCacheSave;       this.useSpecialTypesCache=true;     }   }   @Override public Iterator<Segment> iterator(){     return getNodeIterator();   }   @Override public List<Element> getChildElements(){     if (this.childElements == null) {       if (length() == 0) {         this.childElements=Collections.emptyList();       }  else {         if (this.allTags == null) {           fullSequentialParse();         }         this.childElements=new ArrayList();         int pos=0;         while (true) {           StartTag childStartTag=this.source.getNextStartTag(pos);           if (childStartTag == null) {             break;           }           if (childStartTag.getTagType().isServerTag()) {             pos=childStartTag.end;           }  else {             Element childElement=childStartTag.getElement();             childElement.getChildElements(0);             if (childElement.parentElement == Element.NOT_CACHED) {               childElement.parentElement=null;               this.childElements.add(childElement);             }             pos=childElement.end;           }         }       }     }     return this.childElements;   }   public SourceFormatter getSourceFormatter(){     return new SourceFormatter(this);   }   @Override public List<Tag> getAllTags(){     if (this.allTags == null) {       fullSequentialParse();     }     return this.allTags;   }   @Override public List<StartTag> getAllStartTags(){     if (this.allStartTags == null) {       List<Tag> allTags=getAllTags();       this.allStartTags=new ArrayList(allTags.size());       for (      Tag tag : allTags) {         if (tag instanceof StartTag) {           this.allStartTags.add((StartTag)tag);         }       }     }     return this.allStartTags;   }   @Override public List<Element> getAllElements(){     if (this.allElements == null) {       List<StartTag> allStartTags=getAllStartTags();       if (allStartTags.isEmpty()) {         return Collections.emptyList();       }       this.allElements=new ArrayList(allStartTags.size());       for (      StartTag startTag : allStartTags) {         this.allElements.add(startTag.getElement());       }     }     return this.allElements;   }   public Element getElementById(  String id){     return getFirstElement(""id"",id,true);   }   public final Tag getTagAt(  int pos){     return Tag.getTagAt(this,pos,false);   }   public Tag getPreviousTag(  int pos){     return Tag.getPreviousTag(this,pos);   }   public Tag getPreviousTag(  int pos,  TagType tagType){     return Tag.getPreviousTag(this,pos,tagType);   }   public Tag getNextTag(  int pos){     return Tag.getNextTag(this,pos);   }   Tag getNextNonServerTag(  int pos){     while (true) {       Tag tag=getNextTag(pos);       if (tag == null) {         return null;       }       if (!tag.getTagType().isServerTag()) {         return tag;       }       pos=tag.end;     }   }   Tag getPreviousNonServerTag(  int pos){     while (true) {       Tag tag=getPreviousTag(pos - 1);       if (tag == null) {         return null;       }       if (!tag.getTagType().isServerTag()) {         return tag;       }       pos=tag.begin - 1;     }   }   public Tag getNextTag(  int pos,  TagType tagType){     return Tag.getNextTag(this,pos,tagType);   }   public Tag getEnclosingTag(  int pos){     return getEnclosingTag(pos,null);   }   public Tag getEnclosingTag(  int pos,  TagType tagType){     Tag tag=getPreviousTag(pos,tagType);     if (tag == null || tag.end <= pos) {       return null;     }     return tag;   }   public Element getNextElement(  int pos){     StartTag startTag=getNextStartTag(pos);     if (startTag == null) {       return null;     }     return startTag.getElement();   }   public Element getNextElement(  int pos,  String name){     StartTag startTag=getNextStartTag(pos,name);     if (startTag == null) {       return null;     }     return startTag.getElement();   }   public Element getNextElement(  int pos,  String attributeName,  String value,  boolean valueCaseSensitive){     StartTag startTag=getNextStartTag(pos,attributeName,value,valueCaseSensitive);     if (startTag == null) {       return null;     }     return startTag.getElement();   }   public Element getNextElement(  int pos,  String attributeName,  Pattern valueRegexPattern){     StartTag startTag=getNextStartTag(pos,attributeName,valueRegexPattern);     if (startTag == null) {       return null;     }     return startTag.getElement();   }   public Element getNextElementByClass(  int pos,  String className){     StartTag startTag=getNextStartTagByClass(pos,className);     if (startTag == null) {       return null;     }     return startTag.getElement();   }   public StartTag getPreviousStartTag(  int pos){     return StartTag.getPrevious(this,pos);   }   public StartTag getPreviousStartTag(  int pos,  StartTagType startTagType){     return (StartTag)getPreviousTag(pos,startTagType);   }   public StartTag getPreviousStartTag(  int pos,  String name){     return getPreviousStartTag(pos,name,StartTagType.NORMAL);   }   public StartTag getPreviousStartTag(  int pos,  String name,  StartTagType startTagType){     if (name != null) {       name=name.toLowerCase();     }     return StartTag.getPrevious(this,pos,name,startTagType);   }   public StartTag getNextStartTag(  int pos){     return StartTag.getNext(this,pos);   }   public StartTag getNextStartTag(  int pos,  StartTagType startTagType){     return (StartTag)getNextTag(pos,startTagType);   }   public StartTag getNextStartTag(  int pos,  String name){     return getNextStartTag(pos,name,StartTagType.NORMAL);   }   public StartTag getNextStartTag(  int pos,  String name,  StartTagType startTagType){     if (name != null) {       name=name.toLowerCase();     }     return StartTag.getNext(this,pos,name,startTagType);   }   public StartTag getNextStartTag(  int pos,  String attributeName,  String value,  boolean valueCaseSensitive){     return StartTag.getNext(this,pos,attributeName,value,valueCaseSensitive);   }   public StartTag getNextStartTag(  int pos,  String attributeName,  Pattern valueRegexPattern){     return StartTag.getNext(this,pos,attributeName,valueRegexPattern);   }   public StartTag getNextStartTagByClass(  int pos,  String className){     return getNextStartTag(pos,""class"",getClassPattern(className));   }   public EndTag getPreviousEndTag(  int pos){     return EndTag.getPrevious(this,pos);   }   public EndTag getPreviousEndTag(  int pos,  EndTagType endTagType){     return (EndTag)getPreviousTag(pos,endTagType);   }   public EndTag getPreviousEndTag(  int pos,  String name){     if (name == null) {       throw new IllegalArgumentException(""name argument must not be null"");     }     return EndTag.getPrevious(this,pos,name.toLowerCase(),EndTagType.NORMAL);   }   public EndTag getNextEndTag(  int pos){     return EndTag.getNext(this,pos);   }   public EndTag getNextEndTag(  int pos,  EndTagType endTagType){     return (EndTag)getNextTag(pos,endTagType);   }   public EndTag getNextEndTag(  int pos,  String name){     return getNextEndTag(pos,name,EndTagType.NORMAL);   }   public EndTag getNextEndTag(  int pos,  String name,  EndTagType endTagType){     if (name == null) {       throw new IllegalArgumentException(""name argument must not be null"");     }     return EndTag.getNext(this,pos,name.toLowerCase(),endTagType);   }   public Element getEnclosingElement(  int pos){     return getEnclosingElement(pos,null);   }   public Element getEnclosingElement(  int pos,  String name){     int startBefore=pos;     if (name != null) {       name=name.toLowerCase();     }     boolean isXMLTagName=Tag.isXMLName(name);     while (true) {       StartTag startTag=StartTag.getPrevious(this,startBefore,name,StartTagType.NORMAL,isXMLTagName);       if (startTag == null) {         return null;       }       Element element=startTag.getElement();       if (pos < element.end) {         return element;       }       startBefore=startTag.begin - 1;     }   }   public CharacterReference getPreviousCharacterReference(  int pos){     return CharacterReference.getPrevious(this,pos);   }   public CharacterReference getNextCharacterReference(  int pos){     return CharacterReference.getNext(this,pos);   }   public int getNameEnd(  int pos){     int pos2=pos + 1;     if (!Tag.isXMLNameStartChar(this.sourceText.charAt(pos))) {       return -1;     }     int pos3=pos2;     while (Tag.isXMLNameChar(this.sourceText.charAt(pos3))) {       try {         pos3++;       }  catch (      IndexOutOfBoundsException e) {       }     }     return pos3;   }   public Attributes parseAttributes(  int pos,  int maxEnd){     return parseAttributes(pos,maxEnd,Attributes.getDefaultMaxErrorCount());   }   public Attributes parseAttributes(  int pos,  int maxEnd,  int maxErrorCount){     return Attributes.construct(this,pos,maxEnd,maxErrorCount);   }   public void ignoreWhenParsing(  int begin,  int end){     if (wasFullSequentialParseCalled()) {       throw new IllegalStateException(""ignoreWhenParsing can not be used after a full sequential parse has been performed"");     }     if (this.parseTextOutputDocument == null) {       this.parseTextOutputDocument=new OutputDocument(getParseText());       this.parseText=null;     }     this.parseTextOutputDocument.replaceWithSpaces(begin,end);   }   public void ignoreWhenParsing(  Collection<? extends Segment> segments){     for (    Segment segment : segments) {       segment.ignoreWhenParsing();     }   }   public void setLogger(  Logger logger){     if (logger == null) {       logger=LoggerDisabled.INSTANCE;     }     this.logger=logger;   }   public Logger getLogger(){     if (this.logger != LoggerDisabled.INSTANCE) {       return this.logger;     }     return null;   }   public void clearCache(){     this.cache.clear();     this.allTagsArray=null;     this.allTags=null;     this.allStartTags=null;     this.allElements=null;   }   public String getCacheDebugInfo(){     return this.cache.toString();   }   List<Tag> getParsedTags(){     ArrayList<Tag> list=new ArrayList<>();     Iterator<Tag> i=this.cache.getTagIterator();     while (i.hasNext()) {       list.add(i.next());     }     return list;   }   public final ParseText getParseText(){     if (this.parseText == null) {       if (this.parseTextOutputDocument != null) {         this.parseText=new CharSequenceParseText(this.parseTextOutputDocument.toString());         this.parseTextOutputDocument=null;       }  else {         this.parseText=new CharSequenceParseText(this.sourceText);       }     }     return this.parseText;   }   @Override public final CharSequence subSequence(  int begin,  int end){     return this.sourceText.subSequence(begin,end);   }   public final String substring(  int begin,  int end){     return subSequence(begin,end).toString();   }   public final String getName(  int begin,  int end){     return substring(begin,end).toLowerCase();   }   @Override public final char charAt(  int index){     return this.sourceText.charAt(index);   }   @Override public final int length(){     return this.sourceText.length();   }   public boolean wasFullSequentialParseCalled(){     return this.allTagsArray != null;   }   public static String getCharsetParameterFromHttpHeaderValue(  String httpHeaderValue){     int charsetParameterPos=httpHeaderValue.toLowerCase().indexOf(""charset="");     if (charsetParameterPos == -1) {       return null;     }     int charsetBegin=charsetParameterPos + 8;     int charsetEnd=httpHeaderValue.indexOf(59,charsetBegin);     String charset=charsetEnd == -1 ? httpHeaderValue.substring(charsetBegin) : httpHeaderValue.substring(charsetBegin,charsetEnd);     return charset.trim();   }   static Logger newLogger(){     return LoggerFactory.getLogger(PACKAGE_NAME);   }   private static String getString(  EncodingDetector encodingDetector) throws IOException {     try {       return Util.getString(encodingDetector.openReader());     }  catch (    IOException ex) {       try {         Logger logger=newLogger();         if (logger.isInfoEnabled()) {           logger.info(""IOException constructing encoded source. Encoding: "" + encodingDetector.getEncoding() + "" - ""+ encodingDetector.getEncodingSpecificationInfo()+ "". PreliminaryEncoding: ""+ encodingDetector.getPreliminaryEncoding()+ "" - ""+ encodingDetector.getPreliminaryEncodingSpecificationInfo());         }       }  catch (      Exception e) {       }       throw ex;     }   }   public final boolean isStreamed(){     return this.cache == Cache.STREAMED_SOURCE_MARKER;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SourceCacheEntryMissingInternalError.code","public static class SourceCacheEntryMissingInternalError extends CacheEntryMissingInternalError {   public SourceCacheEntryMissingInternalError(  TagType tagType,  Tag tag,  SubCache subCache){     super(tagType,tag,subCache,""cache entry no longer found in source:"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SourceCompactor.code","public final class SourceCompactor implements CharStreamSource {   private String newLine=null;   private final Segment segment;   public SourceCompactor(  Segment segment){     this.segment=segment;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);     writer.flush();   }   @Override public void appendTo(  Appendable appendable) throws IOException {     new SourceFormatter(this.segment).setTidyTags(true).setNewLine(this.newLine).setRemoveLineBreaks(true).appendTo(appendable);   }   @Override public long getEstimatedMaximumOutputLength(){     return this.segment.length();   }   @Override public String toString(){     return CharStreamSourceUtil.toString(this);   }   public SourceCompactor setNewLine(  String newLine){     this.newLine=newLine;     return this;   }   public String getNewLine(){     if (this.newLine == null) {       this.newLine=this.segment.source.getBestGuessNewLine();     }     return this.newLine;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SourceFormatter.code","public final class SourceFormatter implements CharStreamSource {   private final Segment segment;   private String indentString=""\t"";   private boolean tidyTags=false;   private boolean collapseWhiteSpace=false;   private boolean removeLineBreaks=false;   private boolean indentAllElements=false;   private String newLine=null;   public SourceFormatter(  Segment segment){     this.segment=segment;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);     writer.flush();   }   @Override public void appendTo(  Appendable appendable) throws IOException {     new Processor(this.segment,getIndentString(),getTidyTags(),getCollapseWhiteSpace(),getRemoveLineBreaks(),getIndentAllElements(),getIndentAllElements(),getNewLine()).appendTo(appendable);   }   @Override public long getEstimatedMaximumOutputLength(){     return this.segment.length() * 2;   }   @Override public String toString(){     return CharStreamSourceUtil.toString(this);   }   public SourceFormatter setIndentString(  String indentString){     if (indentString == null) {       throw new IllegalArgumentException(""indentString property must not be null"");     }     this.indentString=indentString;     return this;   }   public String getIndentString(){     return this.indentString;   }   public SourceFormatter setTidyTags(  boolean tidyTags){     this.tidyTags=tidyTags;     return this;   }   public boolean getTidyTags(){     return this.tidyTags;   }   public SourceFormatter setCollapseWhiteSpace(  boolean collapseWhiteSpace){     this.collapseWhiteSpace=collapseWhiteSpace;     return this;   }   public boolean getCollapseWhiteSpace(){     return this.collapseWhiteSpace;   }   public SourceFormatter setRemoveLineBreaks(  boolean removeLineBreaks){     this.removeLineBreaks=removeLineBreaks;     return this;   }   boolean getRemoveLineBreaks(){     return this.removeLineBreaks;   }   public SourceFormatter setIndentAllElements(  boolean indentAllElements){     this.indentAllElements=indentAllElements;     return this;   }   public boolean getIndentAllElements(){     return this.indentAllElements;   }   public SourceFormatter setNewLine(  String newLine){     this.newLine=newLine;     return this;   }   public String getNewLine(){     if (this.newLine == null) {       this.newLine=this.segment.source.getBestGuessNewLine();     }     return this.newLine;   } public static final class Processor {     static final boolean $assertionsDisabled;     private Appendable appendable;     private final boolean collapseWhiteSpace;     private final boolean indentAllElements;     private final boolean indentScriptElements;     private final String indentString;     private int index;     private final String newLine;     private Tag nextTag;     private final boolean removeLineBreaks;     private final Segment segment;     private final CharSequence sourceText;     private final boolean tidyTags; static {       $assertionsDisabled=!SourceFormatter.class.desiredAssertionStatus();     }     public Processor(    Segment segment,    String indentString,    boolean tidyTags,    boolean collapseWhiteSpace,    boolean removeLineBreaks,    boolean indentAllElements,    boolean indentScriptElements,    String newLine){       this.segment=segment;       this.sourceText=segment.source.toString();       this.indentString=indentString;       this.tidyTags=tidyTags;       this.collapseWhiteSpace=collapseWhiteSpace || removeLineBreaks;       this.removeLineBreaks=removeLineBreaks;       this.indentAllElements=indentAllElements;       this.indentScriptElements=indentScriptElements;       this.newLine=newLine;     }     public void appendTo(    Appendable appendable) throws IOException {       this.appendable=appendable;       if (this.segment instanceof Source) {         ((Source)this.segment).fullSequentialParse();       }       this.nextTag=this.segment.source.getNextTag(this.segment.begin);       this.index=this.segment.begin;       appendContent(this.segment.end,this.segment.getChildElements(),0);     }     private void appendContent(    int end,    List<Element> childElements,    int depth) throws IOException {       Element element;       int elementBegin;       if (!$assertionsDisabled && this.index > end) {         throw new AssertionError();       }       Iterator i$=childElements.iterator();       while (i$.hasNext() && (elementBegin=(element=i$.next()).begin) < end) {         if (this.indentAllElements) {           appendText(elementBegin,depth);           appendElement(element,depth,end,false,false);         }  else         if (!inlinable(element)) {           appendText(elementBegin,depth);           String elementName=element.getName();           if (elementName == HTMLElementName.PRE || elementName == HTMLElementName.TEXTAREA) {             appendElement(element,depth,end,true,true);           }  else           if (elementName == HTMLElementName.SCRIPT) {             appendElement(element,depth,end,true,false);           }  else {             appendElement(element,depth,end,false,!this.removeLineBreaks && containsOnlyInlineLevelChildElements(element));           }         }       }       appendText(end,depth);       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }     }     private boolean inlinable(    Element element){       StartTagType startTagType=element.getStartTag().getStartTagType();       if (startTagType == StartTagType.DOCTYPE_DECLARATION) {         return false;       }       if (startTagType != StartTagType.NORMAL) {         return true;       }       String elementName=element.getName();       if (elementName == HTMLElementName.SCRIPT) {         return !this.indentScriptElements;       }       if (this.removeLineBreaks && !HTMLElements.getElementNames().contains(elementName)) {         return true;       }       if (!HTMLElements.getInlineLevelElementNames().contains(elementName)) {         return false;       }       if (this.removeLineBreaks) {         return true;       }       return containsOnlyInlineLevelChildElements(element);     }     private void appendText(    int end,    int depth) throws IOException {       if (!$assertionsDisabled && this.index > end) {         throw new AssertionError();       }       if (this.index == end) {         return;       }       while (Segment.isWhiteSpace(this.sourceText.charAt(this.index))) {         int i=this.index + 1;         this.index=i;         if (i == end) {           return;         }       }       appendIndent(depth);       if (this.collapseWhiteSpace) {         appendTextCollapseWhiteSpace(end,depth);       }  else {         appendTextInline(end,depth,false);       }       appendFormattingNewLine();       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }     }     private void appendElement(    Element element,    int depth,    int end,    boolean preformatted,    boolean renderContentInline) throws IOException {       if (!$assertionsDisabled && this.index != element.begin) {         throw new AssertionError();       }       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       StartTag startTag=element.getStartTag();       EndTag endTag=element.getEndTag();       appendIndent(depth);       appendTag(startTag,depth,end);       if (this.index == end) {         appendFormattingNewLine();         if (!$assertionsDisabled && this.index != Math.min(element.end,end)) {           throw new AssertionError(this.index);         }         return;       }       if (!renderContentInline) {         appendFormattingNewLine();       }       int contentEnd=element.getContentEnd();       if (end < contentEnd) {         contentEnd=end;       }       if (this.index < contentEnd) {         if (preformatted) {           if (renderContentInline) {             appendContentPreformatted(contentEnd,depth);           }  else {             appendIndentedScriptContent(contentEnd,depth + 1);           }         }  else         if (renderContentInline) {           if (this.collapseWhiteSpace) {             appendTextCollapseWhiteSpace(contentEnd,depth);           }  else           if (!appendTextInline(contentEnd,depth,true)) {             appendFormattingNewLine();             renderContentInline=false;           }         }  else {           appendContent(contentEnd,element.getChildElements(),depth + 1);         }       }       if (endTag != null && end > endTag.begin) {         if (!renderContentInline) {           appendIndent(depth);         }         if (!$assertionsDisabled && this.index != endTag.begin) {           throw new AssertionError();         }         appendTag(endTag,depth,end);         appendFormattingNewLine();       }  else       if (renderContentInline) {         appendFormattingNewLine();       }       if (!$assertionsDisabled && this.index != Math.min(element.end,end)) {         throw new AssertionError(this.index);       }     }     private void updateNextTag(){       while (this.nextTag != null && this.nextTag.begin < this.index) {         this.nextTag=this.nextTag.getNextTag();       }     }     private void appendIndentedScriptContent(    int end,    int depth) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       if (this.removeLineBreaks) {         appendTextRemoveIndentation(end);         if (!$assertionsDisabled && this.index != end) {           throw new AssertionError();         }         return;       }       int startOfLinePos=getStartOfLinePos(end,false);       if (this.index != end) {         if (startOfLinePos == -1) {           appendIndent(depth);           appendLineKeepWhiteSpace(end,depth);           appendEssentialNewLine();           if (this.index != end) {             startOfLinePos=getStartOfLinePos(end,true);             if (this.index == end) {               return;             }           }  else {             return;           }         }         appendTextPreserveIndentation(end,depth,this.index - startOfLinePos);         appendEssentialNewLine();         if (!$assertionsDisabled && this.index != end) {           throw new AssertionError();         }       }     }     private boolean appendTextPreserveIndentation(    int end,    int depth) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       if (this.removeLineBreaks) {         return appendTextRemoveIndentation(end);       }       appendLineKeepWhiteSpace(end,depth);       if (this.index == end) {         return true;       }       int startOfLinePos=getStartOfLinePos(end,true);       if (this.index == end) {         return true;       }       appendEssentialNewLine();       appendTextPreserveIndentation(end,depth + 1,this.index - startOfLinePos);       if ($assertionsDisabled || this.index == end) {         return false;       }       throw new AssertionError();     }     private void appendTextPreserveIndentation(    int end,    int depth,    int originalIndentLength) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       appendIndent(depth);       appendLineKeepWhiteSpace(end,depth);       while (this.index != end) {         for (int x=0; x < originalIndentLength; x++) {           char ch=this.sourceText.charAt(this.index);           if (ch == ' ' || ch == '\t') {             int i=this.index + 1;             this.index=i;             if (i == end) {               return;             }           }         }         appendEssentialNewLine();         appendIndent(depth);         appendLineKeepWhiteSpace(end,depth);       }       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }     }     private boolean appendTextRemoveIndentation(    int r5) throws java.io.IOException {       throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.SourceFormatter.Processor.appendTextRemoveIndentation(int):boolean"");     }     private int getStartOfLinePos(    int end,    boolean atStartOfLine){       int i;       int startOfLinePos=atStartOfLine ? this.index : -1;       do {         char ch=this.sourceText.charAt(this.index);         if (ch == '\n' || ch == '\r') {           startOfLinePos=this.index + 1;         }  else         if (ch != ' ' && ch != '\t') {           break;         }         i=this.index + 1;         this.index=i;       }  while (i != end);       return startOfLinePos;     }     private void appendSpecifiedTextInline(    CharSequence text,    int depth) throws IOException {       int textLength=text.length();       int i=appendSpecifiedLine(text,0);       if (i < textLength) {         int subsequentLineDepth=depth + 1;         while (true) {           if (Segment.isWhiteSpace(text.charAt(i))) {             i++;             if (i >= textLength) {               return;             }           }  else {             appendEssentialNewLine();             appendIndent(subsequentLineDepth);             i=appendSpecifiedLine(text,i);             if (i >= textLength) {               return;             }           }         }       }     }     private int appendSpecifiedLine(    CharSequence text,    int i) throws IOException {       int nexti;       int textLength=text.length();       do {         char ch=text.charAt(i);         if (ch == '\r' && (nexti=i + 1) < textLength && text.charAt(nexti) == '\n') {           return i + 2;         }         if (ch == '\n') {           return i + 1;         }         this.appendable.append(ch);         i++;       }  while (i < textLength);       return i;     }     private boolean appendTextInline(    int end,    int depth,    boolean increaseIndentAfterFirstLineBreak) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       appendLineKeepWhiteSpace(end,depth);       if (this.index == end) {         return true;       }       int subsequentLineDepth=increaseIndentAfterFirstLineBreak ? depth + 1 : depth;       while (true) {         if (Segment.isWhiteSpace(this.sourceText.charAt(this.index))) {           int i=this.index + 1;           this.index=i;           if (i == end) {             return false;           }         }  else {           appendEssentialNewLine();           appendIndent(subsequentLineDepth);           appendLineKeepWhiteSpace(end,subsequentLineDepth);           if (this.index >= end) {             if ($assertionsDisabled || this.index == end) {               return false;             }             throw new AssertionError();           }         }       }     }     private void appendLineKeepWhiteSpace(    int end,    int depth) throws IOException {       int nextindex;       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       updateNextTag();       while (true) {         if (this.nextTag != null && this.index == this.nextTag.begin) {           appendTag(this.nextTag,depth,end);           if (this.index == end) {             return;           }         }  else {           char ch=this.sourceText.charAt(this.index);           if (ch == '\r' && (nextindex=this.index + 1) < end && this.sourceText.charAt(nextindex) == '\n') {             this.index+=2;             if (!$assertionsDisabled && this.index > end) {               throw new AssertionError();             }             return;           }           if (ch == '\n') {             this.index++;             if (!$assertionsDisabled && this.index > end) {               throw new AssertionError();             }             return;           }           this.appendable.append(ch);           int i=this.index + 1;           this.index=i;           if (i == end) {             return;           }         }       }     }     private void appendTextCollapseWhiteSpace(    int end,    int depth) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       boolean lastWasWhiteSpace=false;       updateNextTag();       while (this.index < end) {         while (this.nextTag != null && this.index == this.nextTag.begin) {           if (lastWasWhiteSpace) {             this.appendable.append(' ');             lastWasWhiteSpace=false;           }           appendTag(this.nextTag,depth,end);           if (this.index == end) {             return;           }         }         CharSequence charSequence=this.sourceText;         int i=this.index;         this.index=i + 1;         char ch=charSequence.charAt(i);         if (Segment.isWhiteSpace(ch)) {           lastWasWhiteSpace=true;         }  else {           if (lastWasWhiteSpace) {             this.appendable.append(' ');             lastWasWhiteSpace=false;           }           this.appendable.append(ch);         }       }       if (lastWasWhiteSpace) {         this.appendable.append(' ');       }       if (!$assertionsDisabled && this.index != end) {         throw new AssertionError();       }     }     private void appendContentPreformatted(    int end,    int depth) throws IOException {       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       updateNextTag();       while (true) {         if (this.nextTag != null && this.index == this.nextTag.begin) {           appendTag(this.nextTag,depth,end);           if (this.index == end) {             return;           }         }  else {           this.appendable.append(this.sourceText.charAt(this.index));           int i=this.index + 1;           this.index=i;           if (i >= end) {             if (!$assertionsDisabled && this.index != end) {               throw new AssertionError();             }             return;           }         }       }     }     private void appendTag(    Tag tag,    int depth,    int end) throws IOException {       if (!$assertionsDisabled && this.index != tag.begin) {         throw new AssertionError();       }       if (!$assertionsDisabled && this.index >= end) {         throw new AssertionError();       }       this.nextTag=tag.getNextTag();       int tagEnd=tag.end < end ? tag.end : end;       if (!$assertionsDisabled && this.index >= tagEnd) {         throw new AssertionError();       }       if (tag.getTagType() == StartTagType.COMMENT || tag.getTagType() == StartTagType.CDATA_SECTION || tag.getTagType().isServerTag()) {         appendTextPreserveIndentation(tagEnd,depth);       }  else       if (this.tidyTags) {         String tidyTag=tag.tidy();         if ((tag instanceof StartTag) && ((StartTag)tag).getAttributes() != null) {           this.appendable.append(tidyTag);         }  else {           appendSpecifiedTextInline(tidyTag,depth);         }         this.index=tagEnd;       }  else {         appendTextInline(tagEnd,depth,true);       }       if (end <= tag.end || !(tag instanceof StartTag)) {         if (!$assertionsDisabled && this.index > end) {           throw new AssertionError();         }         return;       }       if ((tag.name == HTMLElementName.SCRIPT && !this.indentScriptElements) || tag.getTagType().isServerTag()) {         Element element=tag.getElement();         EndTag endTag=element.getEndTag();         if (endTag == null) {           if (!$assertionsDisabled && this.index > end) {             throw new AssertionError();           }           return;         }         int contentEnd=end < endTag.begin ? end : endTag.begin;         boolean singleLineContent=true;         if (this.index != contentEnd) {           singleLineContent=appendTextPreserveIndentation(contentEnd,depth);         }         if (endTag.begin >= end) {           if (!$assertionsDisabled && this.index > end) {             throw new AssertionError();           }           return;         }  else {           if (!singleLineContent) {             appendEssentialNewLine();             appendIndent(depth);           }           if (!$assertionsDisabled && this.index != endTag.begin) {             throw new AssertionError();           }           appendTag(endTag,depth,end);         }       }       if (!$assertionsDisabled && this.index > end) {         throw new AssertionError();       }     }     private void appendIndent(    int depth) throws IOException {       if (!this.removeLineBreaks) {         for (int x=0; x < depth; x++) {           this.appendable.append(this.indentString);         }       }     }     private void appendFormattingNewLine() throws IOException {       if (!this.removeLineBreaks) {         this.appendable.append(this.newLine);       }     }     private void appendEssentialNewLine() throws IOException {       this.appendable.append(this.newLine);     }     private boolean containsOnlyInlineLevelChildElements(    Element element){       Collection<Element> childElements=element.getChildElements();       if (childElements.isEmpty()) {         return true;       }       for (      Element childElement : childElements) {         String elementName=childElement.getName();         if (elementName == HTMLElementName.SCRIPT || !HTMLElements.getInlineLevelElementNames().contains(elementName)) {           return false;         }         if (!containsOnlyInlineLevelChildElements(childElement)) {           return false;         }       }       return true;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StandardBlockElementHandler.code","private static class StandardBlockElementHandler implements ElementHandler {   private final int bottomMargin;   private final boolean indent;   private final int topMargin;   public static final ElementHandler INSTANCE_0_0=new StandardBlockElementHandler(0,0,Processor.$assertionsDisabled);   public static final ElementHandler INSTANCE_1_1=new StandardBlockElementHandler(1,1,Processor.$assertionsDisabled);   public static final ElementHandler INSTANCE_2_1=new StandardBlockElementHandler(2,1,Processor.$assertionsDisabled);   public static final ElementHandler INSTANCE_0_0_INDENT=new StandardBlockElementHandler(0,0,true);   public static final ElementHandler INSTANCE_1_1_INDENT=new StandardBlockElementHandler(1,1,true);   public StandardBlockElementHandler(  int topMargin,  int bottomMargin,  boolean indent){     this.topMargin=topMargin;     this.bottomMargin=bottomMargin;     this.indent=indent;   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.blockBoundary(this.topMargin);     if (this.indent) {       Processor.access$508(x);     }     x.appendElementContent(element);     if (this.indent) {       Processor.access$510(x);     }     x.blockBoundary(this.bottomMargin);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StandardInlineElementHandler.code","public static class StandardInlineElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new StandardInlineElementHandler();   private StandardInlineElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.appendElementContent(element);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTag.code","public final class StartTag extends Tag {   static final boolean $assertionsDisabled;   private final Attributes attributes;   final StartTagType startTagType; static {     $assertionsDisabled=!StartTag.class.desiredAssertionStatus();   }   public StartTag(  Source source,  int begin,  int end,  StartTagType startTagType,  String name,  Attributes attributes){     super(source,begin,end,name);     this.attributes=attributes;     this.startTagType=startTagType;   }   public StartTag(){     this.attributes=null;     this.startTagType=null;   }   @Override public Element getElement(){     if (this.element == Element.NOT_CACHED) {       EndTag endTag=getEndTagInternal();       this.element=new Element(this.source,this,endTag);       if (endTag != null) {         if (endTag.element != Element.NOT_CACHED && this.source.logger.isInfoEnabled() && !this.element.equals(endTag.element)) {           this.source.logger.info(this.source.getRowColumnVector(endTag.begin).appendTo(new StringBuilder(200).append(""End tag "").append((CharSequence)endTag).append("" at "")).append("" terminates more than one element"").toString());         }         endTag.element=this.element;       }     }     return this.element;   }   public boolean isEmptyElementTag(){     return isSyntacticalEmptyElementTag() && !HTMLElements.isClosingSlashIgnored(this.name);   }   public boolean isSyntacticalEmptyElementTag(){     return this.startTagType == StartTagType.NORMAL && this.source.charAt(this.end + (-2)) == '/';   }   public StartTagType getStartTagType(){     return this.startTagType;   }   @Override public TagType getTagType(){     return this.startTagType;   }   public Attributes getAttributes(){     return this.attributes;   }   public String getAttributeValue(  String attributeName){     if (this.attributes == null) {       return null;     }     return this.attributes.getValue(attributeName);   }   @Override public Attributes parseAttributes(){     return parseAttributes(Attributes.getDefaultMaxErrorCount());   }   public Attributes parseAttributes(  int maxErrorCount){     if (this.attributes != null) {       return this.attributes;     }     int maxEnd=this.end - this.startTagType.getClosingDelimiter().length();     int attributesBegin=this.begin + 1 + this.name.length();     while (!isXMLNameStartChar(this.source.charAt(attributesBegin))) {       attributesBegin++;       if (attributesBegin == maxEnd) {         return null;       }     }     return Attributes.construct(this.source,this.begin,attributesBegin,maxEnd,this.startTagType,this.name,maxErrorCount);   }   public Segment getTagContent(){     return new Segment(this.source,this.begin + 1 + this.name.length(),this.end - this.startTagType.getClosingDelimiter().length());   }   public FormControl getFormControl(){     return getElement().getFormControl();   }   public boolean isEndTagForbidden(){     if (getStartTagType() != StartTagType.NORMAL) {       return getStartTagType().getCorrespondingEndTagType() == null;     }     if (HTMLElements.getEndTagForbiddenElementNames().contains(this.name)) {       return true;     }     if (HTMLElements.getElementNames().contains(this.name)) {       return false;     }     return isSyntacticalEmptyElementTag();   }   public boolean isEndTagRequired(){     if (getStartTagType() != StartTagType.NORMAL) {       return getStartTagType().getCorrespondingEndTagType() != null;     }     if (HTMLElements.getEndTagRequiredElementNames().contains(this.name)) {       return true;     }     return (HTMLElements.getElementNames().contains(this.name) || isSyntacticalEmptyElementTag()) ? false : true;   }   @Override public boolean isUnregistered(){     return this.startTagType == StartTagType.UNREGISTERED;   }   @Override public String tidy(){     return tidy(false);   }   public String tidy(  boolean toXHTML){     if (this.attributes == null || this.attributes.containsServerTagOutsideOfAttributeValue) {       return toString();     }     StringBuilder sb=new StringBuilder();     sb.append(CharacterEntityReference._lt);     if (toXHTML && this.startTagType == StartTagType.NORMAL) {       sb.append(this.name);     }  else {       int i=this.begin + this.startTagType.startDelimiterPrefix.length();       int nameSegmentEnd=i + this.name.length();       while (i < nameSegmentEnd) {         sb.append(this.source.charAt(i));         i++;       }     }     try {       this.attributes.appendTidy(sb,getNextTag());       if (this.startTagType == StartTagType.NORMAL && getElement().getEndTag() == null && !HTMLElements.getEndTagOptionalElementNames().contains(this.name)) {         sb.append("" /"");       }       sb.append(this.startTagType.getClosingDelimiter());       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   public static String generateHTML(  String tagName,  Map<String,String> attributesMap,  boolean emptyElementTag){     StringBuilder sb=new StringBuilder();     sb.append(CharacterEntityReference._lt).append(tagName);     try {       Attributes.appendHTML(sb,attributesMap);       if (emptyElementTag) {         sb.append("" />"");       }  else {         sb.append(CharacterEntityReference._gt);       }       return sb.toString();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @Override public String getDebugInfo(){     StringBuilder sb=new StringBuilder();     appendDebugTag(sb);     sb.append(' ');     appendDebugTagType(sb);     sb.append(super.getDebugInfo());     return sb.toString();   }   public StringBuilder appendDebugTag(  StringBuilder sb){     if (this.startTagType == StartTagType.NORMAL && getAttributes().isEmpty()) {       sb.append((CharSequence)this);     }  else {       sb.append(CharacterEntityReference._lt).append((CharSequence)getNameSegment()).append(' ');       if (isSyntacticalEmptyElementTag()) {         sb.append('/');       }       sb.append(this.startTagType.getClosingDelimiter());     }     return sb;   }   public StringBuilder appendDebugTagType(  StringBuilder sb){     if (this.startTagType != StartTagType.NORMAL) {       sb.append('(').append(this.startTagType.getDescription()).append("") "");     }     return sb;   }   private EndTag getEndTagInternal(){     boolean checkForEmptyElementTag=true;     EndTagType endTagType=this.startTagType.getCorrespondingEndTagType();     if (this.startTagType == StartTagType.NORMAL) {       HTMLElementTerminatingTagNameSets terminatingTagNameSets=HTMLElements.getTerminatingTagNameSets(this.name);       if (terminatingTagNameSets != null) {         return getOptionalEndTag(terminatingTagNameSets);       }       if (HTMLElements.getEndTagForbiddenElementNames().contains(this.name)) {         return null;       }       checkForEmptyElementTag=!HTMLElements.getEndTagRequiredElementNames().contains(this.name);       if (checkForEmptyElementTag && isSyntacticalEmptyElementTag()) {         return null;       }     }  else     if (endTagType == null) {       return null;     }     EndTag nextEndTag=this.source.getNextEndTag(this.end,endTagType.getEndTagName(this.name),endTagType);     if (nextEndTag != null) {       if (this.startTagType == StartTagType.NORMAL && HTMLElements.END_TAG_REQUIRED_NESTING_FORBIDDEN_SET.contains(this.name)) {         StartTag nextStartTag=this.source.getNextStartTag(this.end,this.name);         if (nextStartTag == null || nextStartTag.begin > nextEndTag.begin) {           return nextEndTag;         }         if (this.source.logger.isInfoEnabled()) {           this.source.logger.info(this.source.getRowColumnVector(this.begin).appendTo(new StringBuilder(200).append(""StartTag at "")).append("" missing required end tag - invalid nested start tag encountered before end tag"").toString());         }         return new EndTag(this.source,nextStartTag.begin,nextStartTag.begin,EndTagType.NORMAL,this.name);       }       Segment[] getResult=getEndTag(nextEndTag,checkForEmptyElementTag,Tag.isXMLName(this.name));       if (getResult != null) {         return (EndTag)getResult[0];       }     }     if (!this.source.logger.isInfoEnabled()) {       return null;     }     this.source.logger.info(this.source.getRowColumnVector(this.begin).appendTo(new StringBuilder(200).append(""StartTag at "")).append("" missing required end tag"").toString());     return null;   }   private EndTag getOptionalEndTag(  HTMLElementTerminatingTagNameSets terminatingTagNameSets){     Tag tag;     Set terminatingTagNameSet;     int pos=this.end;     while (pos < this.source.end && (tag=Tag.getNextTag(this.source,pos)) != null) {       if (tag instanceof EndTag) {         if (tag.name == this.name) {           return (EndTag)tag;         }         terminatingTagNameSet=terminatingTagNameSets.TerminatingEndTagNameSet;       }  else {         Set terminatingTagNameSet2=terminatingTagNameSets.NonterminatingElementNameSet;         if (terminatingTagNameSet2 != null && terminatingTagNameSet2.contains(tag.name)) {           Element nonterminatingElement=((StartTag)tag).getElement();           pos=nonterminatingElement.end;         }  else {           terminatingTagNameSet=terminatingTagNameSets.TerminatingStartTagNameSet;         }       }       if (terminatingTagNameSet != null && terminatingTagNameSet.contains(tag.name)) {         return new EndTag(this.source,tag.begin,tag.begin,EndTagType.NORMAL,this.name);       }       pos=tag.begin + 1;     }     return new EndTag(this.source,this.source.end,this.source.end,EndTagType.NORMAL,this.name);   }   static String getStartDelimiter(  String searchName){     if (searchName.length() == 0) {       throw new IllegalArgumentException(""searchName argument must not be zero length"");     }     String startDelimiter=""<"" + searchName;     if (startDelimiter.charAt(""<"".length()) == '/') {       throw new IllegalArgumentException(""searchName argument \"""" + searchName + ""\"" must not start with '/'"");     }     return startDelimiter;   }   public static StartTag getPrevious(  Source source,  int pos,  String searchName,  StartTagType searchStartTagType){     return getPrevious(source,pos,searchName,searchStartTagType,searchStartTagType == StartTagType.NORMAL ? Tag.isXMLName(searchName) : true);   }   public static StartTag getPrevious(  Source source,  int pos,  String searchName,  StartTagType searchStartTagType,  boolean isXMLTagName){     char lastSearchNameChar;     if (searchName == null) {       return (StartTag)source.getPreviousTag(pos,searchStartTagType);     }     String startDelimiter=getStartDelimiter(searchName);     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.lastIndexOf(startDelimiter,begin);         if (begin2 == -1) {           return null;         }         StartTag startTag=(StartTag)Tag.getTagAt(source,begin2,false);         if (startTag != null && ((searchStartTagType == startTag.getStartTagType() || (searchStartTagType == StartTagType.NORMAL && !isXMLTagName && startTag.isUnregistered())) && (!startTag.getStartTagType().isNameAfterPrefixRequired() || startTag.getName().length() <= searchName.length() || (lastSearchNameChar=searchName.charAt(searchName.length() - 1)) == ':' || !isXMLNameChar(lastSearchNameChar)))) {           return startTag;         }         begin=begin2 - 2;       }  while (begin >= 0);       return null;     }  catch (    IndexOutOfBoundsException ex) {       throw ex;     }   }   public static StartTag getNext(  Source source,  int pos,  String searchName,  StartTagType searchStartTagType){     return getNext(source,pos,searchName,searchStartTagType,searchStartTagType == StartTagType.NORMAL ? Tag.isXMLName(searchName) : true);   }   public static StartTag getNext(  Source source,  int pos,  String searchName,  StartTagType searchStartTagType,  boolean isXMLTagName){     char lastSearchNameChar;     if (searchName == null) {       return (StartTag)source.getNextTag(pos,searchStartTagType);     }     String startDelimiter=getStartDelimiter(searchName);     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.indexOf(startDelimiter,begin);         if (begin2 == -1) {           return null;         }         StartTag startTag=(StartTag)Tag.getTagAt(source,begin2,false);         if (startTag != null && ((searchStartTagType == startTag.getStartTagType() || (searchStartTagType == StartTagType.NORMAL && !isXMLTagName && startTag.isUnregistered())) && (!startTag.getStartTagType().isNameAfterPrefixRequired() || startTag.getName().length() <= searchName.length() || (lastSearchNameChar=searchName.charAt(searchName.length() - 1)) == ':' || !isXMLNameChar(lastSearchNameChar)))) {           return startTag;         }         begin=begin2 + 1;       }  while (begin < source.end);       return null;     }  catch (    IndexOutOfBoundsException e) {       return null;     }   }   public static StartTag getPrevious(  Source source,  int pos){     Tag tag=Tag.getPreviousTag(source,pos);     if (tag == null) {       return null;     }     return tag instanceof StartTag ? (StartTag)tag : tag.getPreviousStartTag();   }   public static StartTag getNext(  Source source,  int pos){     Tag tag=Tag.getNextTag(source,pos);     if (tag == null) {       return null;     }     return tag instanceof StartTag ? (StartTag)tag : tag.getNextStartTag();   }   public static StartTag getNext(  Source source,  int pos,  String attributeName,  String value,  boolean valueCaseSensitive){     int searchPos;     String attributeValue;     if (value == null || attributeName.length() == 0) {       throw new IllegalArgumentException();     }     String searchString=(value.length() >= 3 || (value.length() > 0 && attributeName.length() < 3)) ? value : attributeName;     ParseText parseText=source.getParseText();     int searchPos2=pos;     while (searchPos2 < source.end && (searchPos=parseText.indexOf(searchString.toLowerCase(),searchPos2)) != -1) {       Tag tag=source.getEnclosingTag(searchPos);       if (tag == null || !(tag instanceof StartTag)) {         searchPos2=searchPos + 1;       }  else {         if (tag.begin >= pos) {           StartTag startTag=(StartTag)tag;           if (startTag.getAttributes() != null && (attributeValue=startTag.getAttributes().getValue(attributeName)) != null) {             if (!value.equals(attributeValue)) {               if (value.equalsIgnoreCase(attributeValue)) {                 if (valueCaseSensitive) {                   if (source.logger.isInfoEnabled()) {                     source.logger.info(source.getRowColumnVector(searchPos).appendTo(new StringBuilder(200)).append("": StartTag with attribute "").append(attributeName).append(""=\"""").append(attributeValue).append(""\"" ignored during search because its case does not match search value \"""").append(value).append(CharacterEntityReference._quot).toString());                   }                 }  else {                   return startTag;                 }               }             }  else {               return startTag;             }           }         }         searchPos2=tag.end;       }     }     return null;   }   public static StartTag getNext(  Source source,  int pos,  String attributeName,  Pattern regexPattern){     int searchPos;     Attribute attribute;     if (attributeName == null || attributeName.length() == 0) {       throw new IllegalArgumentException();     }     ParseText parseText=source.getParseText();     int searchPos2=pos;     while (searchPos2 < source.end && (searchPos=parseText.indexOf(attributeName.toLowerCase(),searchPos2)) != -1) {       Tag tag=source.getEnclosingTag(searchPos);       if (tag == null || !(tag instanceof StartTag)) {         searchPos2=searchPos + 1;       }  else {         if (tag.begin >= pos) {           StartTag startTag=(StartTag)tag;           if (startTag.getAttributes() != null && (attribute=startTag.getAttributes().get(attributeName)) != null) {             if (regexPattern != null) {               String attributeValue=attribute.getValue();               if (attributeValue != null && regexPattern.matcher(attributeValue).matches()) {                 return startTag;               }             }  else {               return startTag;             }           }         }         searchPos2=tag.end;       }     }     return null;   }   private Segment[] getEndTag(  EndTag nextEndTag,  boolean checkForEmptyElementTag,  boolean isXMLTagName){     if (!$assertionsDisabled && nextEndTag == null) {       throw new AssertionError();     }     StartTag nextStartTag=getNext(this.source,this.end,this.name,this.startTagType,isXMLTagName);     if (checkForEmptyElementTag) {       while (nextStartTag != null && nextStartTag.isSyntacticalEmptyElementTag()) {         nextStartTag=getNext(this.source,nextStartTag.end,this.name,this.startTagType,isXMLTagName);       }     }     return getEndTag(this.end,nextStartTag,nextEndTag,checkForEmptyElementTag,isXMLTagName);   }   private Segment[] getEndTag(  int afterPos,  StartTag nextStartTag,  EndTag nextEndTag,  boolean checkForEmptyElementTag,  boolean isXMLTagName){     if (nextEndTag == null) {       return null;     }     Segment[] segmentArr={nextEndTag,nextStartTag};     if (nextStartTag != null && nextStartTag.begin <= nextEndTag.begin) {       Segment[] getResult=nextStartTag.getEndTag(nextEndTag,checkForEmptyElementTag,isXMLTagName);       if (getResult == null) {         return null;       }       EndTag nextStartTagsEndTag=(EndTag)getResult[0];       EndTag nextNextEndTag=EndTag.getNext(this.source,nextStartTagsEndTag.end,nextEndTag.getName(),nextEndTag.getEndTagType());       Segment[] returnArray=getEndTag(nextStartTagsEndTag.end,(StartTag)getResult[1],nextNextEndTag,checkForEmptyElementTag,isXMLTagName);       return returnArray;     }     return segmentArr;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagType.code","public abstract class StartTagType extends TagType {   static final String START_DELIMITER_PREFIX=""<"";   private final EndTagType correspondingEndTagType;   private final boolean hasAttributes;   private final boolean isNameAfterPrefixRequired;   public static final StartTagType UNREGISTERED=StartTagTypeUnregistered.INSTANCE;   public static final StartTagType NORMAL=StartTagTypeNormal.INSTANCE;   public static final StartTagType COMMENT=StartTagTypeComment.INSTANCE;   public static final StartTagType XML_DECLARATION=StartTagTypeXMLDeclaration.INSTANCE;   public static final StartTagType XML_PROCESSING_INSTRUCTION=StartTagTypeXMLProcessingInstruction.INSTANCE;   public static final StartTagType DOCTYPE_DECLARATION=StartTagTypeDoctypeDeclaration.INSTANCE;   public static final StartTagType MARKUP_DECLARATION=StartTagTypeMarkupDeclaration.INSTANCE;   public static final StartTagType CDATA_SECTION=StartTagTypeCDATASection.INSTANCE;   public static final StartTagType SERVER_COMMON=StartTagTypeServerCommon.INSTANCE;   public static final StartTagType SERVER_COMMON_ESCAPED=StartTagTypeServerCommonEscaped.INSTANCE;   public StartTagType(  String description,  String startDelimiter,  String closingDelimiter,  EndTagType correspondingEndTagType,  boolean isServerTag,  boolean hasAttributes,  boolean isNameAfterPrefixRequired){     super(description,startDelimiter.toLowerCase(),closingDelimiter,isServerTag,START_DELIMITER_PREFIX);     if (!getStartDelimiter().startsWith(START_DELIMITER_PREFIX)) {       throw new IllegalArgumentException(""startDelimiter of a start tag must start with \""<\"""");     }     this.correspondingEndTagType=correspondingEndTagType;     this.hasAttributes=hasAttributes;     this.isNameAfterPrefixRequired=isNameAfterPrefixRequired;   }   public final EndTagType getCorrespondingEndTagType(){     return this.correspondingEndTagType;   }   public final boolean hasAttributes(){     return this.hasAttributes;   }   public final boolean isNameAfterPrefixRequired(){     return this.isNameAfterPrefixRequired;   }   public boolean atEndOfAttributes(  Source source,  int pos,  boolean isClosingSlashIgnored){     return source.getParseText().containsAt(getClosingDelimiter(),pos);   }   public final StartTag constructStartTag(  Source source,  int begin,  int end,  String name,  Attributes attributes){     return new StartTag(source,begin,end,this,name,attributes);   }   public final Attributes parseAttributes(  Source source,  int startTagBegin,  String tagName){     return Attributes.construct(source,startTagBegin,this,tagName);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeCDATASection.code","class StartTagTypeCDATASection extends StartTagTypeGenericImplementation {   static final StartTagTypeCDATASection INSTANCE=new StartTagTypeCDATASection();   private StartTagTypeCDATASection(){     super(""CDATA section"",""<![cdata["",""]]>"",null,false);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeComment.code","final class StartTagTypeComment extends StartTagTypeGenericImplementation {   static final StartTagTypeComment INSTANCE=new StartTagTypeComment();   private StartTagTypeComment(){     super(""comment"",""<!--"",""-->"",null,false);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeDoctypeDeclaration.code","final class StartTagTypeDoctypeDeclaration extends StartTagTypeGenericImplementation {   static final StartTagTypeDoctypeDeclaration INSTANCE=new StartTagTypeDoctypeDeclaration();   private StartTagTypeDoctypeDeclaration(){     super(""document type declaration"",""<!doctype"","">"",null,false,false,false);   }   @Override protected int getEnd(  Source source,  int pos){     ParseText parseText=source.getParseText();     boolean insideQuotes=false;     boolean insideSquareBrackets=false;     do {       char c=parseText.charAt(pos);       if (insideQuotes) {         if (c == '\""') {           insideQuotes=false;         }       }  else { switch (c) { case '\""':           insideQuotes=true;         break; case '>':       if (!insideSquareBrackets) {         return pos + 1;       }     break; case '[':   insideSquareBrackets=true; break; case ']': insideSquareBrackets=false; break; } } pos++; }  while (pos < source.getEnd()); return -1; } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeGenericImplementation.code","public class StartTagTypeGenericImplementation extends StartTagType {   final boolean nameCharAfterPrefixAllowed;   public StartTagTypeGenericImplementation(  String description,  String startDelimiter,  String closingDelimiter,  EndTagType correspondingEndTagType,  boolean isServerTag){     this(description,startDelimiter,closingDelimiter,correspondingEndTagType,isServerTag,false,false);   }   public StartTagTypeGenericImplementation(  String description,  String startDelimiter,  String closingDelimiter,  EndTagType correspondingEndTagType,  boolean isServerTag,  boolean hasAttributes,  boolean isNameAfterPrefixRequired){     super(description,startDelimiter,closingDelimiter,correspondingEndTagType,isServerTag,hasAttributes,isNameAfterPrefixRequired);     this.nameCharAfterPrefixAllowed=getNamePrefix().length() == 0 || !Character.isLetter(getNamePrefix().charAt(getNamePrefix().length() + (-1)));   }   @Override public Tag constructTagAt(  Source source,  int pos){     int end;     ParseText parseText=source.getParseText();     int nameBegin=pos + 1;     String name=getNamePrefix();     int nameEnd=nameBegin + getNamePrefix().length();     if (isNameAfterPrefixRequired()) {       int extendedNameEnd=source.getNameEnd(nameEnd);       if (extendedNameEnd == -1) {         return null;       }       name=source.getName(nameBegin,extendedNameEnd);       nameEnd=extendedNameEnd;     }  else     if (!this.nameCharAfterPrefixAllowed && Tag.isXMLNameChar(parseText.charAt(nameEnd))) {       return null;     }     Attributes attributes=null;     if (hasAttributes()) {       attributes=parseAttributes(source,pos,name);       if (attributes == null) {         return null;       }       end=getEnd(source,attributes.getEnd());     }  else {       end=getEnd(source,nameEnd);       if (end == -1) {         if (!source.logger.isInfoEnabled()) {           return null;         }         source.logger.info(source.getRowColumnVector(pos).appendTo(new StringBuilder(200).append(""StartTag "").append(name).append("" at "")).append("" not recognised as type '"").append(getDescription()).append(""' because it has no closing delimiter"").toString());         return null;       }     }     return constructStartTag(source,pos,end,name,attributes);   }   protected int getEnd(  Source source,  int pos){     int delimiterBegin=source.getParseText().indexOf(getClosingDelimiter(),pos);     if (delimiterBegin == -1) {       return -1;     }     return getClosingDelimiter().length() + delimiterBegin;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeMarkupDeclaration.code","class StartTagTypeMarkupDeclaration extends StartTagTypeGenericImplementation {   static final String ATTLIST=""!attlist"";   static final String ELEMENT=""!element"";   static final String ENTITY=""!entity"";   static final StartTagTypeMarkupDeclaration INSTANCE=new StartTagTypeMarkupDeclaration();   static final String NOTATION=""!notation"";   private StartTagTypeMarkupDeclaration(){     super(""markup declaration"",""<!"","">"",null,false,false,true);   }   @Override public Tag constructTagAt(  Source source,  int pos){     Tag tag=super.constructTagAt(source,pos);     if (tag == null) {       return null;     }     String name=tag.getName();     if (name == ELEMENT || name == ATTLIST || name == ENTITY || name == NOTATION) {       return tag;     }     return null;   }   @Override protected int getEnd(  Source source,  int pos){     ParseText parseText=source.getParseText();     boolean insideQuotes=false;     do {       char c=parseText.charAt(pos);       if (c == '\""') {         insideQuotes=!insideQuotes;       }  else       if (c == '>' && !insideQuotes) {         return pos + 1;       }       pos++;     }  while (pos < source.getEnd());     return -1;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeMasonComponentCall.code","final class StartTagTypeMasonComponentCall extends StartTagTypeGenericImplementation {   protected static final StartTagTypeMasonComponentCall INSTANCE=new StartTagTypeMasonComponentCall();   private StartTagTypeMasonComponentCall(){     super(""mason component call"",""<&"",""&>"",null,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeMasonComponentCalledWithContent.code","final class StartTagTypeMasonComponentCalledWithContent extends StartTagTypeGenericImplementation {   protected static final StartTagTypeMasonComponentCalledWithContent INSTANCE=new StartTagTypeMasonComponentCalledWithContent();   private StartTagTypeMasonComponentCalledWithContent(){     super(""mason component called with content"",""<&|"",""&>"",EndTagTypeMasonComponentCalledWithContent.INSTANCE,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeMasonNamedBlock.code","final class StartTagTypeMasonNamedBlock extends StartTagTypeGenericImplementation {   protected static final StartTagTypeMasonNamedBlock INSTANCE=new StartTagTypeMasonNamedBlock();   private StartTagTypeMasonNamedBlock(){     super(""mason named block"",""<%"","">"",EndTagTypeMasonNamedBlock.INSTANCE,true,false,true);   }   @Override public Tag constructTagAt(  Source source,  int pos){     Tag tag=super.constructTagAt(source,pos);     if (tag == null || source.charAt(tag.getEnd() - 2) == '%' || source.getNextEndTag(tag.getEnd(),tag.getName(),getCorrespondingEndTagType()) == null) {       return null;     }     return tag;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeMicrosoftDownlevelRevealedConditionalComment.code","final class StartTagTypeMicrosoftDownlevelRevealedConditionalComment extends StartTagTypeGenericImplementation {   static final String ENDIF=""![endif"";   static final String IF=""![if"";   static final StartTagTypeMicrosoftDownlevelRevealedConditionalComment INSTANCE=new StartTagTypeMicrosoftDownlevelRevealedConditionalComment();   private StartTagTypeMicrosoftDownlevelRevealedConditionalComment(){     super(""Microsoft downlevel-revealed conditional comment"",""<!["",""]>"",null,false,false,true);   }   @Override public Tag constructTagAt(  Source source,  int pos){     Tag tag=super.constructTagAt(source,pos);     if (tag == null) {       return null;     }     String name=tag.getName();     if (name == IF || name == ENDIF) {       return tag;     }     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeNormal.code","final class StartTagTypeNormal extends StartTagTypeGenericImplementation {   static final StartTagTypeNormal INSTANCE=new StartTagTypeNormal();   private StartTagTypeNormal(){     super(""normal"",""<"","">"",EndTagType.NORMAL,false,true,true);   }   @Override public boolean atEndOfAttributes(  Source source,  int pos,  boolean isClosingSlashIgnored){     ParseText parseText=source.getParseText();     return parseText.charAt(pos) == '>' || (!isClosingSlashIgnored && parseText.containsAt(""/>"",pos));   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypePHPScript.code","final class StartTagTypePHPScript extends StartTagTypeGenericImplementation {   protected static final StartTagTypePHPScript INSTANCE=new StartTagTypePHPScript();   private StartTagTypePHPScript(){     super(""PHP script"",""<script"","">"",EndTagType.NORMAL,true,true,false);   }   @Override public Tag constructTagAt(  Source source,  int pos){     StartTag startTag=(StartTag)super.constructTagAt(source,pos);     if (startTag != null && ""php"".equalsIgnoreCase(startTag.getAttributes().getValue(""language""))) {       return startTag;     }     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypePHPShort.code","final class StartTagTypePHPShort extends StartTagTypeGenericImplementation {   protected static final StartTagTypePHPShort INSTANCE=new StartTagTypePHPShort();   private StartTagTypePHPShort(){     super(""PHP short tag"",""<?"",""?>"",null,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypePHPStandard.code","final class StartTagTypePHPStandard extends StartTagTypeGenericImplementation {   protected static final StartTagTypePHPStandard INSTANCE=new StartTagTypePHPStandard();   private StartTagTypePHPStandard(){     super(""PHP standard tag"",""<?php"",""?>"",null,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeServerCommon.code","final class StartTagTypeServerCommon extends StartTagTypeGenericImplementation {   static final StartTagTypeServerCommon INSTANCE=new StartTagTypeServerCommon();   private StartTagTypeServerCommon(){     super(""common server tag"",""<%"",""%>"",null,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeServerCommonEscaped.code","final class StartTagTypeServerCommonEscaped extends StartTagTypeGenericImplementation {   static final StartTagTypeServerCommonEscaped INSTANCE=new StartTagTypeServerCommonEscaped();   private StartTagTypeServerCommonEscaped(){     super(""escaped common server tag"",""<\\%"",""%>"",null,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeUnregistered.code","final class StartTagTypeUnregistered extends StartTagType {   static final StartTagTypeUnregistered INSTANCE=new StartTagTypeUnregistered();   private StartTagTypeUnregistered(){     super(""unregistered"",""<"","">"",null,false,false,false);   }   @Override protected Tag constructTagAt(  Source source,  int pos){     int closingDelimiterPos=source.getParseText().indexOf(CharacterEntityReference._gt,pos + 1);     if (closingDelimiterPos == -1) {       return null;     }     Tag tag=constructStartTag(source,pos,closingDelimiterPos + 1,"""",null);     if (source.logger.isInfoEnabled()) {       source.logger.info(source.getRowColumnVector(tag.getBegin()).appendTo(new StringBuilder(200).append(""Encountered possible StartTag at "")).append("" whose content does not match a registered StartTagType"").toString());     }     return tag;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeXMLDeclaration.code","final class StartTagTypeXMLDeclaration extends StartTagTypeGenericImplementation {   static final StartTagTypeXMLDeclaration INSTANCE=new StartTagTypeXMLDeclaration();   private StartTagTypeXMLDeclaration(){     super(""XML declaration"",""<?xml"",""?>"",null,false,true,false);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StartTagTypeXMLProcessingInstruction.code","final class StartTagTypeXMLProcessingInstruction extends StartTagTypeGenericImplementation {   static final StartTagTypeXMLProcessingInstruction INSTANCE=new StartTagTypeXMLProcessingInstruction();   private StartTagTypeXMLProcessingInstruction(){     super(""XML processing instruction"",""<?"",""?>"",null,false,false,true);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StreamedParseText.code","final class StreamedParseText extends CharSequenceParseText {   private final StreamedText streamedText;   public StreamedParseText(  StreamedText streamedText){     super(streamedText);     this.streamedText=streamedText;   }   @Override public int getEnd(){     return this.streamedText.getEnd();   }   @Override protected String substring(  int begin,  int end){     return this.streamedText.substring(begin,end).toLowerCase();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StreamedSource.code","public final class StreamedSource implements Iterable<Segment>, Closeable {   private static final Segment START_SEGMENT=new Segment(-1,-1);   private static final boolean assumeNoNestedTags=false;   private final boolean automaticClose;   private final Closeable closeable;   private boolean coalescing;   private Segment currentSegment;   private boolean handleTags;   private boolean isInitialised;   private boolean isXML;   private Segment nextParsedSegment;   private final Source source;   private final StreamedParseText streamedParseText;   private final StreamedText streamedText;   private StreamedSource(  Reader reader,  boolean automaticClose,  String encoding,  String encodingSpecificationInfo,  String preliminaryEncodingInfo) throws IOException {     this.coalescing=false;     this.handleTags=true;     this.isInitialised=false;     this.currentSegment=null;     this.nextParsedSegment=START_SEGMENT;     this.closeable=reader;     this.automaticClose=automaticClose;     this.streamedText=new StreamedText(reader);     this.streamedParseText=new StreamedParseText(this.streamedText);     this.source=new Source(this.streamedText,this.streamedParseText,encoding,encodingSpecificationInfo,preliminaryEncodingInfo);   }   private StreamedSource(  EncodingDetector encodingDetector,  boolean automaticClose) throws IOException {     this(encodingDetector.openReader(),automaticClose,encodingDetector.getEncoding(),encodingDetector.getEncodingSpecificationInfo(),encodingDetector.getPreliminaryEncoding() + "": "" + encodingDetector.getPreliminaryEncodingSpecificationInfo());   }   public StreamedSource(  Reader reader) throws IOException {     this(reader,false,reader instanceof InputStreamReader ? ((InputStreamReader)reader).getEncoding() : null,reader instanceof InputStreamReader ? ""InputStreamReader.getEncoding() of constructor argument"" : null,null);   }   public StreamedSource(  InputStream inputStream) throws IOException {     this(new EncodingDetector(inputStream),false);   }   public StreamedSource(  URL url) throws IOException {     this(new EncodingDetector(url.openConnection()),true);   }   public StreamedSource(  URLConnection urlConnection) throws IOException {     this(new EncodingDetector(urlConnection),true);   }   public StreamedSource(  CharSequence text){     this.coalescing=false;     this.handleTags=true;     this.isInitialised=false;     this.currentSegment=null;     this.nextParsedSegment=START_SEGMENT;     this.closeable=null;     this.automaticClose=false;     this.streamedText=new StreamedText(text);     this.streamedParseText=new StreamedParseText(this.streamedText);     this.source=new Source(text,this.streamedParseText,null,""Document specified encoding can not be determined automatically from a streamed source"",null);   }   public StreamedSource setBuffer(  char[] buffer){     if (this.isInitialised) {       throw new IllegalStateException(""setBuffer() can only be called before iterator() is called"");     }     this.streamedText.setBuffer(buffer);     return this;   }   public StreamedSource setCoalescing(  boolean coalescing){     if (this.isInitialised) {       throw new IllegalStateException(""setPlainTextWriter() can only be called before iterator() is called"");     }     this.coalescing=coalescing;     return this;   }   @Override public void close() throws IOException {     if (this.closeable != null) {       this.closeable.close();     }   }   public String getEncoding(){     return this.source.getEncoding();   }   public String getEncodingSpecificationInfo(){     return this.source.getEncodingSpecificationInfo();   }   public String getPreliminaryEncodingInfo(){     return this.source.getPreliminaryEncodingInfo();   }   @Override public Iterator<Segment> iterator(){     if (this.isInitialised) {       throw new IllegalStateException(""iterator() can only be called once"");     }     this.isInitialised=true;     return new StreamedSourceIterator();   }   public Segment getCurrentSegment(){     return this.currentSegment;   }   public CharBuffer getCurrentSegmentCharBuffer(){     return this.streamedText.getCharBuffer(this.currentSegment.getBegin(),this.currentSegment.end);   }   public boolean isXML(){     if (this.isInitialised) {       return this.isXML;     }     throw new IllegalStateException(""isXML() method only available after iterator() has been called"");   }   public void setLogger(  Logger logger){     this.source.setLogger(logger);   }   public Logger getLogger(){     return this.source.getLogger();   }   public int getBufferSize(){     return this.streamedText.getBuffer().length;   }   public String toString(){     return super.toString();   }   protected void finalize(){     automaticClose();   }   public StreamedSource setHandleTags(  boolean handleTags){     this.handleTags=handleTags;     return this;   }   public StreamedSource setSearchBegin(  int begin){     if (this.isInitialised) {       throw new IllegalStateException(""setSearchBegin() can only be called before iterator() is called"");     }     int segmentEnd=begin - 1;     this.nextParsedSegment=new Segment(segmentEnd,segmentEnd);     return this;   }   public void automaticClose(){     if (this.automaticClose) {       try {         close();       }  catch (      IOException e) {       }     }   }   public static boolean isXML(  Segment firstNonTextSegment){     if (firstNonTextSegment == null || !(firstNonTextSegment instanceof Tag)) {       return false;     }     Tag tag=(Tag)firstNonTextSegment;     return tag.getTagType() == StartTagType.XML_DECLARATION || tag.source.getParseText().indexOf(""xhtml"",tag.begin,tag.end) != -1;   } public class StreamedSourceIterator implements Iterator<Segment> {     private final boolean coalescing;     private final boolean handleTags;     private Segment nextSegment;     private int plainTextSegmentBegin=0;     private final char[] charByRef=new char[1];     public StreamedSourceIterator(){       this.coalescing=StreamedSource.this.coalescing;       this.handleTags=StreamedSource.this.handleTags;       loadNextParsedSegment();       StreamedSource.this.isXML=StreamedSource.isXML(StreamedSource.this.nextParsedSegment);     }     @Override public boolean hasNext(){       if (this.nextSegment == Tag.NOT_CACHED) {         loadNextParsedSegment();       }       return this.nextSegment != null;     }     @Override public Segment next(){       if (!hasNext()) {         throw new NoSuchElementException();       }       Segment result=this.nextSegment;       this.nextSegment=result == StreamedSource.this.nextParsedSegment ? Tag.NOT_CACHED : StreamedSource.this.nextParsedSegment;       StreamedSource.this.streamedText.setMinRequiredBufferBegin(result.end);       StreamedSource.this.currentSegment=result;       return result;     }     @Override public void remove(){       throw new UnsupportedOperationException();     }     private final void loadNextParsedSegment(){       StreamedSource.this.nextParsedSegment=findNextParsedSegment();       int plainTextSegmentEnd=StreamedSource.this.nextParsedSegment != null ? StreamedSource.this.nextParsedSegment.begin : StreamedSource.this.streamedText.length();       this.nextSegment=this.plainTextSegmentBegin < plainTextSegmentEnd ? new Segment(StreamedSource.this.source,this.plainTextSegmentBegin,plainTextSegmentEnd) : StreamedSource.this.nextParsedSegment;       if (StreamedSource.this.nextParsedSegment != null && this.plainTextSegmentBegin < StreamedSource.this.nextParsedSegment.end) {         this.plainTextSegmentBegin=StreamedSource.this.nextParsedSegment.end;       }     }     private final Segment findNextParsedSegment(){       Tag tag;       CharacterReference characterReference;       try {         int i=StreamedSource.this.nextParsedSegment.getBegin() + 1;         int searchEnd=this.coalescing ? StreamedSource.this.streamedText.getEnd() : StreamedSource.this.streamedText.getBufferOverflowPosition();         while (i < searchEnd) {           char ch=StreamedSource.this.streamedText.charAt(i);           if (ch == '&') {             if (i >= StreamedSource.this.source.fullSequentialParseData[0] && (characterReference=CharacterReference.construct(StreamedSource.this.source,i,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL)) != null) {               return characterReference;             }           }  else           if (this.handleTags && ch == '<' && (tag=TagType.getTagAt(StreamedSource.this.source,i,false,false)) != null && !tag.isUnregistered()) {             TagType tagType=tag.getTagType();             if (tag.end > StreamedSource.this.source.fullSequentialParseData[0] && tagType != StartTagType.DOCTYPE_DECLARATION) {               StreamedSource.this.source.fullSequentialParseData[0]=(tagType == StartTagType.NORMAL && tag.name == HTMLElementName.SCRIPT) ? Integer.MAX_VALUE : tag.end;             }             return tag;           }           i++;         }         if (i < StreamedSource.this.streamedText.getEnd()) {           return new Segment(StreamedSource.this.source,this.plainTextSegmentBegin,i);         }       }  catch (      IndexOutOfBoundsException e) {       } catch (      BufferOverflowException ex) {         StreamedSource.this.automaticClose();         throw ex;       }       StreamedSource.this.automaticClose();       return null;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StreamedSourceIterator.code","public class StreamedSourceIterator implements Iterator<Segment> {   private final boolean coalescing;   private final boolean handleTags;   private Segment nextSegment;   private int plainTextSegmentBegin=0;   private final char[] charByRef=new char[1];   public StreamedSourceIterator(){     this.coalescing=StreamedSource.this.coalescing;     this.handleTags=StreamedSource.this.handleTags;     loadNextParsedSegment();     StreamedSource.this.isXML=StreamedSource.isXML(StreamedSource.this.nextParsedSegment);   }   @Override public boolean hasNext(){     if (this.nextSegment == Tag.NOT_CACHED) {       loadNextParsedSegment();     }     return this.nextSegment != null;   }   @Override public Segment next(){     if (!hasNext()) {       throw new NoSuchElementException();     }     Segment result=this.nextSegment;     this.nextSegment=result == StreamedSource.this.nextParsedSegment ? Tag.NOT_CACHED : StreamedSource.this.nextParsedSegment;     StreamedSource.this.streamedText.setMinRequiredBufferBegin(result.end);     StreamedSource.this.currentSegment=result;     return result;   }   @Override public void remove(){     throw new UnsupportedOperationException();   }   private final void loadNextParsedSegment(){     StreamedSource.this.nextParsedSegment=findNextParsedSegment();     int plainTextSegmentEnd=StreamedSource.this.nextParsedSegment != null ? StreamedSource.this.nextParsedSegment.begin : StreamedSource.this.streamedText.length();     this.nextSegment=this.plainTextSegmentBegin < plainTextSegmentEnd ? new Segment(StreamedSource.this.source,this.plainTextSegmentBegin,plainTextSegmentEnd) : StreamedSource.this.nextParsedSegment;     if (StreamedSource.this.nextParsedSegment != null && this.plainTextSegmentBegin < StreamedSource.this.nextParsedSegment.end) {       this.plainTextSegmentBegin=StreamedSource.this.nextParsedSegment.end;     }   }   private final Segment findNextParsedSegment(){     Tag tag;     CharacterReference characterReference;     try {       int i=StreamedSource.this.nextParsedSegment.getBegin() + 1;       int searchEnd=this.coalescing ? StreamedSource.this.streamedText.getEnd() : StreamedSource.this.streamedText.getBufferOverflowPosition();       while (i < searchEnd) {         char ch=StreamedSource.this.streamedText.charAt(i);         if (ch == '&') {           if (i >= StreamedSource.this.source.fullSequentialParseData[0] && (characterReference=CharacterReference.construct(StreamedSource.this.source,i,Config.UnterminatedCharacterReferenceSettings.ACCEPT_ALL)) != null) {             return characterReference;           }         }  else         if (this.handleTags && ch == '<' && (tag=TagType.getTagAt(StreamedSource.this.source,i,false,false)) != null && !tag.isUnregistered()) {           TagType tagType=tag.getTagType();           if (tag.end > StreamedSource.this.source.fullSequentialParseData[0] && tagType != StartTagType.DOCTYPE_DECLARATION) {             StreamedSource.this.source.fullSequentialParseData[0]=(tagType == StartTagType.NORMAL && tag.name == HTMLElementName.SCRIPT) ? Integer.MAX_VALUE : tag.end;           }           return tag;         }         i++;       }       if (i < StreamedSource.this.streamedText.getEnd()) {         return new Segment(StreamedSource.this.source,this.plainTextSegmentBegin,i);       }     }  catch (    IndexOutOfBoundsException e) {     } catch (    BufferOverflowException ex) {       StreamedSource.this.automaticClose();       throw ex;     }     StreamedSource.this.automaticClose();     return null;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StreamedText.code","public final class StreamedText implements CharSequence {   public static int INITIAL_EXPANDABLE_BUFFER_SIZE=8192;   private char[] buffer;   private int bufferBegin;   private int end;   private boolean expandableBuffer;   private int minRequiredBufferBegin;   private final Reader reader;   private int readerPos;   public StreamedText(  Reader reader,  char[] buffer){     this.bufferBegin=0;     this.readerPos=0;     this.minRequiredBufferBegin=0;     this.end=Integer.MAX_VALUE;     this.reader=reader;     setBuffer(buffer);   }   public StreamedText(  Reader reader){     this(reader,(char[])null);   }   private StreamedText(  char[] text,  int length){     this.bufferBegin=0;     this.readerPos=0;     this.minRequiredBufferBegin=0;     this.end=Integer.MAX_VALUE;     this.reader=null;     this.buffer=text;     this.expandableBuffer=false;     this.end=length;     this.readerPos=Integer.MAX_VALUE;   }   public StreamedText(  char[] text){     this(text,text.length);   }   public StreamedText(  CharBuffer text){     this(text.array(),text.length());   }   public StreamedText(  CharSequence text){     this(toCharArray(text));   }   public StreamedText setBuffer(  char[] buffer){     if (buffer != null) {       this.buffer=buffer;       this.expandableBuffer=false;     }  else {       this.buffer=new char[INITIAL_EXPANDABLE_BUFFER_SIZE];       this.expandableBuffer=true;     }     return this;   }   public boolean hasExpandableBuffer(){     return this.expandableBuffer;   }   @Override public char charAt(  int pos){     if (pos >= this.readerPos) {       readToPosition(pos);     }     checkPos(pos);     return this.buffer[pos - this.bufferBegin];   }   public void setMinRequiredBufferBegin(  int minRequiredBufferBegin){     if (minRequiredBufferBegin < this.bufferBegin) {       throw new IllegalArgumentException(""Cannot set minimum required buffer begin to already discarded position "" + minRequiredBufferBegin);     }     this.minRequiredBufferBegin=minRequiredBufferBegin;   }   public int getMinRequiredBufferBegin(){     return this.minRequiredBufferBegin;   }   @Override public int length(){     if (this.end == Integer.MAX_VALUE) {       throw new IllegalStateException(""Length of streamed text cannot be determined until end of file has been reached"");     }     return this.end;   }   public int getEnd(){     return this.end;   }   private void prepareBufferRange(  int begin,  int end){     int lastRequiredPos=end - 1;     if (lastRequiredPos > this.readerPos) {       readToPosition(lastRequiredPos);     }     checkPos(begin);     if (end > this.end) {       throw new IndexOutOfBoundsException();     }   }   public void writeTo(  Writer writer,  int begin,  int end) throws IOException {     prepareBufferRange(begin,end);     writer.write(this.buffer,begin - this.bufferBegin,end - begin);   }   public String substring(  int begin,  int end){     prepareBufferRange(begin,end);     return new String(this.buffer,begin - this.bufferBegin,end - begin);   }   @Override public CharSequence subSequence(  int begin,  int end){     return getCharBuffer(begin,end);   }   public CharBuffer getCharBuffer(  int begin,  int end){     prepareBufferRange(begin,end);     return CharBuffer.wrap(this.buffer,begin - this.bufferBegin,end - begin);   }   @Override public String toString(){     throw new UnsupportedOperationException(""Streamed text can not be converted to a string"");   }   public String getDebugInfo(){     return ""Buffer size: \"""" + this.buffer.length + ""\"", bufferBegin=""+ this.bufferBegin+ "", minRequiredBufferBegin=""+ this.minRequiredBufferBegin+ "", readerPos=""+ this.readerPos;   }   public char[] getBuffer(){     return this.buffer;   }   public int getBufferBegin(){     return this.bufferBegin;   }   private void checkPos(  int pos){     if (pos < this.bufferBegin) {       throw new IllegalStateException(""StreamedText position "" + pos + "" has been discarded"");     }     if (pos >= this.end) {       throw new IndexOutOfBoundsException();     }   }   public int getBufferOverflowPosition(){     return this.minRequiredBufferBegin + this.buffer.length;   }   private void readToPosition(  int pos){     try {       if (pos >= this.bufferBegin + this.buffer.length) {         if (pos >= this.minRequiredBufferBegin + this.buffer.length) {           if (!this.expandableBuffer) {             throw new BufferOverflowException();           }           expandBuffer((pos - this.minRequiredBufferBegin) + 1);         }         discardUsedText();       }       while (this.readerPos <= pos) {         int charCount=this.reader.read(this.buffer,this.readerPos - this.bufferBegin,(this.bufferBegin + this.buffer.length) - this.readerPos);         if (charCount == -1) {           this.end=this.readerPos;           return;         }         this.readerPos+=charCount;       }     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   private void expandBuffer(  int minSize) throws IOException {     int newSize=this.buffer.length * 2;     if (newSize < minSize) {       newSize=minSize;     }     char[] newBuffer=new char[newSize];     shiftBuffer(this.buffer,newBuffer);     this.buffer=newBuffer;   }   private void discardUsedText() throws IOException {     if (this.minRequiredBufferBegin != this.bufferBegin) {       shiftBuffer(this.buffer,this.buffer);     }   }   private void shiftBuffer(  char[] fromBuffer,  char[] toBuffer) throws IOException {     int shift=this.minRequiredBufferBegin - this.bufferBegin;     int usedBufferLength=this.readerPos - this.bufferBegin;     for (int i=shift; i < usedBufferLength; i++) {       toBuffer[i - shift]=fromBuffer[i];     }     this.bufferBegin=this.minRequiredBufferBegin;     while (this.readerPos < this.bufferBegin) {       long charCount=this.reader.skip(this.bufferBegin - this.readerPos);       if (charCount == 0) {         this.end=this.readerPos;         return;       }       this.readerPos=(int)(this.readerPos + charCount);     }   }   String getCurrentBufferContent(){     return substring(this.bufferBegin,Math.min(this.end,this.readerPos));   }   private static char[] toCharArray(  CharSequence text){     if (text instanceof String) {       return ((String)text).toCharArray();     }     char[] charArray=new char[text.length()];     for (int i=0; i < charArray.length; i++) {       charArray[i]=text.charAt(i);     }     return charArray;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StreamEncodingDetector.code","public final class StreamEncodingDetector {   private static final String BOCU_1=""BOCU-1"";   private static final String EBCDIC=""Cp037"";   private static final String ISO_8859_1=""ISO-8859-1"";   private static final String SCSU=""SCSU"";   private static final String UTF_16=""UTF-16"";   private static final String UTF_16BE=""UTF-16BE"";   private static final String UTF_16LE=""UTF-16LE"";   private static final String UTF_32=""UTF-32"";   private static final String UTF_32BE=""UTF-32BE"";   private static final String UTF_32LE=""UTF-32LE"";   private static final String UTF_7=""UTF-7"";   private static final String UTF_8=""UTF-8"";   private static final String UTF_EBCDIC=""UTF-EBCDIC"";   private boolean definitive;   private boolean documentSpecifiedEncodingPossible;   private String encoding;   private String encodingSpecificationInfo;   private final InputStream inputStream;   public StreamEncodingDetector(  URLConnection urlConnection) throws IOException {     this.encoding=null;     this.encodingSpecificationInfo=null;     this.definitive=true;     this.documentSpecifiedEncodingPossible=true;     if (urlConnection instanceof HttpURLConnection) {     }     InputStream urlInputStream=urlConnection.getInputStream();     String contentType=urlConnection.getContentType();     if (contentType != null) {       this.encoding=Source.getCharsetParameterFromHttpHeaderValue(contentType);       if (this.encoding != null) {         this.inputStream=urlInputStream;         this.encodingSpecificationInfo=""HTTP header Content-Type: "" + contentType;         return;       }     }     this.inputStream=urlInputStream.markSupported() ? urlInputStream : new BufferedInputStream(urlInputStream);     init();   }   public StreamEncodingDetector(  InputStream inputStream) throws IOException {     this.encoding=null;     this.encodingSpecificationInfo=null;     this.definitive=true;     this.documentSpecifiedEncodingPossible=true;     this.inputStream=inputStream.markSupported() ? inputStream : new BufferedInputStream(inputStream);     init();   }   public InputStream getInputStream(){     return this.inputStream;   }   public String getEncoding(){     return this.encoding;   }   public String getEncodingSpecificationInfo(){     return this.encodingSpecificationInfo;   }   public boolean isDifinitive(){     return this.definitive;   }   public boolean isDocumentSpecifiedEncodingPossible(){     return this.documentSpecifiedEncodingPossible;   }   public Reader openReader() throws UnsupportedEncodingException {     if (this.encoding == null) {       return new InputStreamReader(this.inputStream,ISO_8859_1);     }     if (Charset.isSupported(this.encoding)) {       return new InputStreamReader(this.inputStream,this.encoding);     }     throw new UnsupportedEncodingException(this.encoding + "" - "" + this.encodingSpecificationInfo);   }   private boolean setEncoding(  String encoding,  String encodingSpecificationInfo){     this.encoding=encoding;     this.encodingSpecificationInfo=encodingSpecificationInfo;     return true;   }   private boolean init() throws IOException {     this.inputStream.mark(4);     int b1=this.inputStream.read();     if (b1 == -1) {       return setEncoding(null,""empty input stream"");     }     int b2=this.inputStream.read();     int b3=this.inputStream.read();     int b4=this.inputStream.read();     this.inputStream.reset();     if (b1 == 239) {       if (b2 == 187 && b3 == 191) {         return setEncoding(UTF_8,""UTF-8 Byte Order Mark (EF BB BF)"");       }     }  else     if (b1 == 254) {       if (b2 == 255) {         return setEncoding(UTF_16,""UTF-16 big-endian Byte Order Mark (FE FF)"");       }     }  else     if (b1 == 255) {       if (b2 == 254) {         return (b3 == 0 && b4 == 0) ? setEncoding(UTF_32,""UTF-32 little-endian Byte Order Mark (FF EE 00 00)"") : setEncoding(UTF_16,""UTF-16 little-endian Byte Order Mark (FF EE)"");       }     }  else     if (b1 == 0) {       if (b2 == 0 && b3 == 254 && b4 == 255) {         return setEncoding(UTF_32,""UTF-32 big-endian Byte Order Mark (00 00 FE FF)"");       }     }  else     if (b1 == 14) {       if (b2 == 254 && b3 == 255) {         return setEncoding(SCSU,""SCSU Byte Order Mark (0E FE FF)"");       }     }  else     if (b1 == 43) {       if (b2 == 47 && b3 == 118) {         return setEncoding(UTF_7,""UTF-7 Byte Order Mark (2B 2F 76)"");       }     }  else     if (b1 == 221) {       if (b2 == 115 && b3 == 102 && b4 == 115) {         return setEncoding(UTF_EBCDIC,""UTF-EBCDIC Byte Order Mark (DD 73 66 73)"");       }     }  else     if (b1 == 251 && b2 == 238 && b3 == 40) {       return setEncoding(BOCU_1,""BOCU-1 Byte Order Mark (FB EE 28)"");     }     this.definitive=false;     if (b4 == -1) {       this.documentSpecifiedEncodingPossible=false;       return (b2 == -1 || b3 != -1) ? setEncoding(ISO_8859_1,""default 8-bit ASCII-compatible encoding (stream 3 bytes long)"") : b1 == 0 ? setEncoding(UTF_16BE,""default 16-bit BE encoding (byte stream starts with 00, stream 2 bytes long)"") : b2 == 0 ? setEncoding(UTF_16LE,""default 16-bit LE encoding (byte stream pattern XX 00, stream 2 bytes long)"") : setEncoding(ISO_8859_1,""default 8-bit ASCII-compatible encoding (no 00 bytes present, stream 2 bytes long)"");     }     if (b1 == 0) {       return b2 == 0 ? setEncoding(UTF_32BE,""default 32-bit BE encoding (byte stream starts with 00 00)"") : setEncoding(UTF_16BE,""default 16-bit BE encoding (byte stream starts with 00)"");     }     if (b4 == 0) {       return b3 == 0 ? setEncoding(UTF_32LE,""default 32-bit LE encoding (byte stream starts with pattern XX ?? 00 00)"") : setEncoding(UTF_16LE,""default 16-bit LE encoding (byte stream stars with pattern XX ?? XX 00)"");     }     if (b2 == 0) {       return setEncoding(UTF_16LE,""default 16-bit LE encoding (byte stream starts with pattern XX 00 ?? XX)"");     }     if (b3 == 0) {       return setEncoding(UTF_16BE,""default 16-bit BE encoding (byte stream starts with pattern XX XX 00 XX)"");     }     if (b1 == 76) {       if (b2 == 111 && b3 == 167 && b4 == 148) {         return setEncoding(EBCDIC,""default EBCDIC encoding (<?xml...> detected)"");       }       if (b2 == 90 && b3 == 196 && b4 == 214) {         return setEncoding(EBCDIC,""default EBCDIC encoding (<!DOCTYPE...> detected)"");       }       if ((b2 & b3 & b4& AccessibilityEventCompat.TYPE_VIEW_HOVER_ENTER) != 0) {         return setEncoding(EBCDIC,""default EBCDIC-compatible encoding (HTML element detected)"");       }     }     return setEncoding(ISO_8859_1,""default 8-bit ASCII-compatible encoding (no 00 bytes present in first four bytes of stream)"");   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\StringOutputSegment.code","final class StringOutputSegment implements OutputSegment {   private final int begin;   private final int end;   private final CharSequence text;   public StringOutputSegment(  int begin,  int end,  String text){     this.begin=begin;     this.end=end;     this.text=text == null ? """" : text;   }   public StringOutputSegment(  Segment segment,  CharSequence text){     this(segment.begin,segment.end,text);   }   @Override public int getBegin(){     return this.begin;   }   @Override public int getEnd(){     return this.end;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);   }   @Override public void appendTo(  Appendable appendable) throws IOException {     appendable.append(this.text);   }   @Override public long getEstimatedMaximumOutputLength(){     return this.text.length();   }   @Override public String toString(){     return this.text.toString();   }   @Override public String getDebugInfo(){     return ""Replace: (p"" + this.begin + ""-p""+ this.end+ "") ""+ ((Object)this.text);   }   public void output(  Writer writer) throws IOException {     writeTo(writer);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SubCache.code","public final class SubCache {   private static final int INITIAL_CAPACITY=64;   private CacheEntry[] array=new CacheEntry[INITIAL_CAPACITY];   private final CacheEntry bof;   private final Cache cache;   private final CacheEntry eof;   public final TagType tagType;   public SubCache(  Cache cache,  TagType tagType){     this.cache=cache;     this.tagType=tagType;     CacheEntry[] cacheEntryArr=this.array;     CacheEntry cacheEntry=new CacheEntry(0,-1,null,false,false);     this.bof=cacheEntry;     cacheEntryArr[0]=cacheEntry;     CacheEntry[] cacheEntryArr2=this.array;     CacheEntry cacheEntry2=new CacheEntry(1,cache.getSourceLength(),null,false,false);     this.eof=cacheEntry2;     cacheEntryArr2[1]=cacheEntry2;   }   public int size(){     return this.eof.index + 1;   }   public void clear(){     this.bof.nextCached=false;     this.eof.index=1;     this.eof.previousCached=false;     this.array[1]=this.eof;   }   public void bulkLoad_Init(  int tagCount){     this.array=new CacheEntry[tagCount + 2];     this.array[0]=this.bof;     this.bof.nextCached=true;     CacheEntry[] cacheEntryArr=this.array;     int i=tagCount + 1;     this.eof.index=i;     cacheEntryArr[i]=this.eof;     this.eof.previousCached=true;   }   public void bulkLoad_Set(  int tagsIndex,  Tag tag){     int index=tagsIndex + 1;     this.array[index]=new CacheEntry(index,tag.begin,tag,true,true);   }   public void bulkLoad_AddToTypeSpecificCache(  Tag tag){     int index=this.eof.index;     if (this.array.length == this.eof.index + 1) {       doubleCapacity();     }     this.array[index]=new CacheEntry(index,tag.begin,tag,true,true);     this.eof.index++;   }   public void bulkLoad_FinaliseTypeSpecificCache(){     this.bof.nextCached=true;     this.eof.previousCached=true;     this.array[this.eof.index]=this.eof;   }   public Tag getTagAt(  int pos,  boolean serverTagOnly){     if (this.cache.getSourceLength() == 0 || pos < 0 || pos >= this.cache.getSourceLength()) {       return null;     }     int index=getIndexOfPos(pos);     CacheEntry cacheEntry=this.array[index];     if (cacheEntry.pos == pos) {       if (!serverTagOnly || cacheEntry.tag.getTagType().isServerTag()) {         return cacheEntry.tag;       }       return null;     }     if (cacheEntry.previousCached) {       return null;     }     return this.cache.addTagAt(pos,serverTagOnly);   }   public void addTagAt(  int pos,  Tag tag){     int index=getIndexOfPos(pos);     CacheEntry nextCacheEntry=this.array[index];     CacheEntry previousCacheEntry=getPrevious(nextCacheEntry);     add(previousCacheEntry,new CacheEntry(index,pos,tag,pos == previousCacheEntry.pos + 1,pos == nextCacheEntry.pos + (-1)),nextCacheEntry);   }   public Tag getPreviousTag(  int pos){     if (this.cache.getSourceLength() == 0 || pos < 0 || pos >= this.cache.getSourceLength()) {       return null;     }     int index=getIndexOfPos(pos);     CacheEntry cacheEntry=this.array[index];     if (cacheEntry.pos == pos && cacheEntry.tag != null && cacheEntry.tag.includeInSearch()) {       return cacheEntry.tag;     }     Tag tag=getPreviousTag(getPrevious(cacheEntry),pos,cacheEntry);     addPreviousTag(pos,tag);     return tag;   }   public Tag getNextTag(  int pos){     Tag tag;     if (this.cache.getSourceLength() == 0 || pos < 0 || pos >= this.cache.getSourceLength()) {       return null;     }     int index=getIndexOfPos(pos);     CacheEntry cacheEntry=this.array[index];     if (cacheEntry.pos == pos) {       if (cacheEntry.tag != null && cacheEntry.tag.includeInSearch()) {         return cacheEntry.tag;       }       tag=getNextTag(cacheEntry,pos,getNext(cacheEntry));     }  else {       tag=getNextTag(getPrevious(cacheEntry),pos,cacheEntry);     }     addNextTag(pos,tag);     return tag;   }   public Iterator<Tag> getTagIterator(){     return new TagIterator();   }   public String toString(){     return appendTo(new StringBuilder()).toString();   }   public StringBuilder appendTo(  StringBuilder sb){     sb.append(""Cache for TagType : "").append(this.tagType).append(Config.NewLine);     for (int i=0; i <= lastIndex(); i++) {       sb.append(this.array[i]).append(Config.NewLine);     }     return sb;   }   private Tag getPreviousTag(  CacheEntry previousCacheEntry,  int pos,  CacheEntry nextCacheEntry){     Tag tag;     while (true) {       if (!nextCacheEntry.previousCached && (tag=Tag.getPreviousTagUncached(this.cache.source,pos,this.tagType,previousCacheEntry.pos)) != null) {         if (!this.cache.source.useAllTypesCache) {           addTagAt(tag.begin,tag);           return tag;         }         return tag;       }       if (previousCacheEntry == this.bof) {         return null;       }       if (previousCacheEntry.tag != null && previousCacheEntry.tag.includeInSearch()) {         return previousCacheEntry.tag;       }       pos=previousCacheEntry.pos - 1;       nextCacheEntry=previousCacheEntry;       previousCacheEntry=getPrevious(previousCacheEntry);     }   }   private Tag getNextTag(  CacheEntry previousCacheEntry,  int pos,  CacheEntry nextCacheEntry){     Tag tag;     while (true) {       if (!previousCacheEntry.nextCached && (tag=Tag.getNextTagUncached(this.cache.source,pos,this.tagType,nextCacheEntry.pos)) != null) {         if (!this.cache.source.useAllTypesCache) {           addTagAt(tag.begin,tag);           return tag;         }         return tag;       }       if (nextCacheEntry == this.eof) {         return null;       }       if (nextCacheEntry.tag != null && nextCacheEntry.tag.includeInSearch()) {         return nextCacheEntry.tag;       }       pos=nextCacheEntry.pos + 1;       previousCacheEntry=nextCacheEntry;       nextCacheEntry=getNext(nextCacheEntry);     }   }   private void addPreviousTag(  int pos,  Tag tag){     int tagPos=tag == null ? this.bof.pos : tag.begin;     if (tagPos != pos) {       int index=getIndexOfPos(pos);       CacheEntry stepCacheEntry=this.array[index];       int compactStartIndex=Integer.MAX_VALUE;       if (stepCacheEntry.pos == pos) {         stepCacheEntry.previousCached=true;         if (stepCacheEntry.isRedundant()) {           stepCacheEntry.removed=true;           compactStartIndex=Math.min(Integer.MAX_VALUE,stepCacheEntry.index);         }       }  else       if (!stepCacheEntry.previousCached) {         if (this.tagType == null) {           this.cache.addTagAt(pos,false);         }  else {           addTagAt(pos,null);         }         CacheEntry[] cacheEntryArr=this.array;         index=getIndexOfPos(pos);         CacheEntry stepCacheEntry2=cacheEntryArr[index];         if (stepCacheEntry2.pos == pos) {           stepCacheEntry2.previousCached=true;           if (stepCacheEntry2.isRedundant()) {             stepCacheEntry2.removed=true;             compactStartIndex=Math.min(Integer.MAX_VALUE,stepCacheEntry2.index);           }         }       }       while (true) {         index--;         CacheEntry stepCacheEntry3=this.array[index];         if (stepCacheEntry3.pos > tagPos) {           if (stepCacheEntry3.tag != null) {             if (stepCacheEntry3.tag.includeInSearch()) {               throw new SourceCacheEntryMissingInternalError(this.tagType,tag,this);             }             stepCacheEntry3.previousCached=true;             stepCacheEntry3.nextCached=true;           }  else {             stepCacheEntry3.removed=true;             compactStartIndex=Math.min(compactStartIndex,stepCacheEntry3.index);           }         }  else {           if (stepCacheEntry3.pos != tagPos) {             throw new FoundCacheEntryMissingInternalError(this.tagType,tag,this);           }           stepCacheEntry3.nextCached=true;           compact(compactStartIndex);           return;         }       }     }   }   private void addNextTag(  int pos,  Tag tag){     int tagPos=tag == null ? this.eof.pos : tag.begin;     if (tagPos != pos) {       int index=getIndexOfPos(pos);       CacheEntry stepCacheEntry=this.array[index];       int compactStartIndex=Integer.MAX_VALUE;       if (stepCacheEntry.pos == pos) {         stepCacheEntry.nextCached=true;         if (stepCacheEntry.isRedundant()) {           stepCacheEntry.removed=true;           compactStartIndex=Math.min(Integer.MAX_VALUE,stepCacheEntry.index);         }       }  else       if (!getPrevious(stepCacheEntry).nextCached) {         if (this.tagType == null) {           this.cache.addTagAt(pos,false);         }  else {           addTagAt(pos,null);         }         CacheEntry[] cacheEntryArr=this.array;         index=getIndexOfPos(pos);         stepCacheEntry=cacheEntryArr[index];         if (stepCacheEntry.pos == pos) {           stepCacheEntry.nextCached=true;           if (stepCacheEntry.isRedundant()) {             stepCacheEntry.removed=true;             compactStartIndex=Math.min(Integer.MAX_VALUE,stepCacheEntry.index);           }         }       }       if (stepCacheEntry.pos < tagPos) {         while (true) {           index++;           stepCacheEntry=this.array[index];           if (stepCacheEntry.pos < tagPos) {             if (stepCacheEntry.tag != null) {               if (stepCacheEntry.tag.includeInSearch()) {                 throw new SourceCacheEntryMissingInternalError(this.tagType,tag,this);               }               stepCacheEntry.previousCached=true;               stepCacheEntry.nextCached=true;             }  else {               stepCacheEntry.removed=true;               compactStartIndex=Math.min(compactStartIndex,stepCacheEntry.index);             }           }  else           if (stepCacheEntry.pos != tagPos) {             throw new FoundCacheEntryMissingInternalError(this.tagType,tag,this);           }         }       }       stepCacheEntry.previousCached=true;       compact(compactStartIndex);     }   }   private void compact(  int i){     int lastIndex=lastIndex();     int removedCount=1;     while (i < lastIndex) {       i++;       CacheEntry cacheEntry=this.array[i];       if (cacheEntry.removed) {         removedCount++;       }  else {         CacheEntry[] cacheEntryArr=this.array;         int i2=i - removedCount;         cacheEntry.index=i2;         cacheEntryArr[i2]=cacheEntry;       }     }   }   private void add(  CacheEntry previousCacheEntry,  CacheEntry newCacheEntry,  CacheEntry nextCacheEntry){     if (!newCacheEntry.isRedundant()) {       insert(newCacheEntry);     }     if (newCacheEntry.previousCached) {       previousCacheEntry.nextCached=true;       if (previousCacheEntry.isRedundant()) {         remove(previousCacheEntry);       }     }     if (newCacheEntry.nextCached) {       nextCacheEntry.previousCached=true;       if (nextCacheEntry.isRedundant()) {         remove(nextCacheEntry);       }     }   }   private int getIndexOfPos(  int pos){     int minIndex=0;     int maxIndex=lastIndex();     int index=maxIndex >> 1;     while (true) {       CacheEntry cacheEntry=this.array[index];       if (pos > cacheEntry.pos) {         CacheEntry nextCacheEntry=getNext(cacheEntry);         if (pos > nextCacheEntry.pos) {           minIndex=nextCacheEntry.index;         }  else {           int index2=nextCacheEntry.index;           return index2;         }       }  else       if (pos < cacheEntry.pos) {         CacheEntry previousCacheEntry=getPrevious(cacheEntry);         if (pos != previousCacheEntry.pos) {           if (pos <= previousCacheEntry.pos) {             maxIndex=previousCacheEntry.index;           }  else {             return index;           }         }  else {           int index3=previousCacheEntry.index;           return index3;         }       }  else {         return index;       }       index=(minIndex + maxIndex) >> 1;     }   }   private CacheEntry getNext(  CacheEntry cacheEntry){     return this.array[cacheEntry.index + 1];   }   private CacheEntry getPrevious(  CacheEntry cacheEntry){     return this.array[cacheEntry.index - 1];   }   public int lastIndex(){     return this.eof.index;   }   private void insert(  CacheEntry cacheEntry){     int index=cacheEntry.index;     if (this.array.length == size()) {       doubleCapacity();     }     for (int i=lastIndex(); i >= index; i--) {       CacheEntry movedCacheEntry=this.array[i];       CacheEntry[] cacheEntryArr=this.array;       int i2=i + 1;       movedCacheEntry.index=i2;       cacheEntryArr[i2]=movedCacheEntry;     }     this.array[index]=cacheEntry;   }   private void remove(  CacheEntry cacheEntry){     int lastIndex=lastIndex();     for (int i=cacheEntry.index; i < lastIndex; i++) {       CacheEntry movedCacheEntry=this.array[i + 1];       CacheEntry[] cacheEntryArr=this.array;       movedCacheEntry.index=i;       cacheEntryArr[i]=movedCacheEntry;     }   }   private void doubleCapacity(){     CacheEntry[] newArray=new CacheEntry[this.array.length << 1];     for (int i=lastIndex(); i >= 0; i--) {       newArray[i]=this.array[i];     }     this.array=newArray;   } private static class CacheEntryMissingInternalError extends AssertionError {     public CacheEntryMissingInternalError(    TagType tagType,    Tag tag,    SubCache subCache,    String message){       super(""INTERNAL ERROR: Inconsistent Cache State for TagType \"""" + tagType + ""\"" - ""+ message+ ' '+ tag.getDebugInfo()+ '\n'+ subCache);     }   } public static class SourceCacheEntryMissingInternalError extends CacheEntryMissingInternalError {     public SourceCacheEntryMissingInternalError(    TagType tagType,    Tag tag,    SubCache subCache){       super(tagType,tag,subCache,""cache entry no longer found in source:"");     }   } public static class FoundCacheEntryMissingInternalError extends CacheEntryMissingInternalError {     public FoundCacheEntryMissingInternalError(    TagType tagType,    Tag tag,    SubCache subCache){       super(tagType,tag,subCache,""missing cache entry for found tag"");     }   } public final class TagIterator implements Iterator<Tag> {     private int i=0;     private Tag nextTag;     public TagIterator(){       loadNextTag();     }     @Override public boolean hasNext(){       return this.nextTag != null;     }     @Override public Tag next(){       Tag result=this.nextTag;       loadNextTag();       return result;     }     @Override public void remove(){       throw new UnsupportedOperationException();     }     private void loadNextTag(){       Tag tag;       do {         int i=this.i + 1;         this.i=i;         if (i <= SubCache.this.lastIndex()) {           tag=SubCache.this.array[this.i].tag;           this.nextTag=tag;         }  else {           return;         }       }  while (tag == null);     }   } public static final class CacheEntry {     public int index;     public boolean nextCached;     public final int pos;     public boolean previousCached;     public boolean removed=false;     public final Tag tag;     public CacheEntry(    int index,    int pos,    Tag tag,    boolean previousCached,    boolean nextCached){       this.index=index;       this.pos=pos;       this.tag=tag;       this.previousCached=previousCached;       this.nextCached=nextCached;     }     public boolean isRedundant(){       return this.tag == null && this.previousCached && this.nextCached;     }     public String toString(){       return pad(this.index,4) + "" "" + pad(this.pos,5)+ "" ""+ (this.previousCached ? '|' : '-')+ ' '+ (this.nextCached ? '|' : '-')+ ' '+ (this.tag == null ? ""null"" : this.tag.getDebugInfo());     }     private String pad(    int n,    int places){       String nstring=String.valueOf(n);       StringBuilder sb=new StringBuilder(places);       for (int i=places - nstring.length(); i > 0; i--) {         sb.append(' ');       }       sb.append(nstring);       return sb.toString();     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\SubmitFormControl.code","public static class SubmitFormControl extends FormControl {   public SubmitFormControl(  Element element,  FormControlType formControlType){     super(element,formControlType,true);   }   @Override public boolean setValue(  String value){     return false;   }   @Override void addValuesTo(  Collection<String> collection){   }   @Override void addToFormFields(  FormFields formFields){     if (getPredefinedValue() != null) {       formFields.add((FormControl)this);     }   }   @Override void replaceInOutputDocument(  OutputDocument outputDocument){     if (this.outputStyle == FormControlOutputStyle.REMOVE) {       outputDocument.remove(getElement());       return;     }     if (this.outputStyle == FormControlOutputStyle.DISPLAY_VALUE) {       setDisabled(true);     }     replaceAttributesInOutputDocumentIfModified(outputDocument);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Tag.code","public abstract class Tag extends Segment {   private static final boolean INCLUDE_UNREGISTERED_IN_SEARCH=false;   static final Tag NOT_CACHED=new StartTag();   Element element;   String name;   private Tag nextTag;   private Tag previousTag;   private Object userData;   public abstract Element getElement();   public abstract TagType getTagType();   public abstract boolean isUnregistered();   public abstract String tidy();   public Tag(  Source source,  int begin,  int end,  String name){     super(source,begin,end);     this.name=null;     this.userData=null;     this.element=Element.NOT_CACHED;     this.previousTag=NOT_CACHED;     this.nextTag=NOT_CACHED;     this.name=HTMLElements.getConstantElementName(name.toLowerCase());   }   public Tag(){     this.name=null;     this.userData=null;     this.element=Element.NOT_CACHED;     this.previousTag=NOT_CACHED;     this.nextTag=NOT_CACHED;   }   public final String getName(){     return this.name;   }   public Segment getNameSegment(){     int nameSegmentBegin=this.begin + getTagType().startDelimiterPrefix.length();     return new Segment(this.source,nameSegmentBegin,this.name.length() + nameSegmentBegin);   }   public Object getUserData(){     return this.userData;   }   public void setUserData(  Object userData){     this.userData=userData;   }   public Tag getNextTag(){     if (this.nextTag == NOT_CACHED) {       Tag localNextTag=getNextTag(this.source,this.begin + 1);       if (!this.source.wasFullSequentialParseCalled()) {         this.nextTag=localNextTag;       }  else {         return localNextTag;       }     }     return this.nextTag;   }   public Tag getPreviousTag(){     if (this.previousTag == NOT_CACHED) {       this.previousTag=getPreviousTag(this.source,this.begin - 1);     }     return this.previousTag;   }   public static final boolean isXMLName(  CharSequence text){     if (text == null || text.length() == 0 || !isXMLNameStartChar(text.charAt(0))) {       return false;     }     for (int i=1; i < text.length(); i++) {       if (!isXMLNameChar(text.charAt(i))) {         return false;       }     }     return true;   }   public static final boolean isXMLNameStartChar(  char ch){     return Character.isLetter(ch) || ch == '_' || ch == ':';   }   public static final boolean isXMLNameChar(  char ch){     return Character.isLetterOrDigit(ch) || ch == '.' || ch == '-' || ch == '_' || ch == ':';   }   public StartTag getNextStartTag(){     Tag tag=this;     do {       tag=tag.getNextTag();       if (tag == null) {         return null;       }     }  while (!(tag instanceof StartTag));     return (StartTag)tag;   }   public StartTag getPreviousStartTag(){     Tag tag=this;     do {       tag=tag.getPreviousTag();       if (tag == null) {         return null;       }     }  while (!(tag instanceof StartTag));     return (StartTag)tag;   }   public Tag getNextTag(  TagType tagType){     if (tagType == null) {       return getNextTag();     }     if (tagType == StartTagType.UNREGISTERED || tagType == EndTagType.UNREGISTERED) {       return getNextTag(this.source,this.begin + 1,tagType);     }     Tag tag=this;     while (tag.nextTag != NOT_CACHED) {       tag=tag.nextTag;       if (tag == null) {         return null;       }       if (tag.getTagType() == tagType) {         return tag;       }     }     return getNextTag(this.source,tag.begin + 1,tagType);   }   Tag getPreviousTag(  TagType tagType){     if (tagType == null) {       return getPreviousTag();     }     if (tagType == StartTagType.UNREGISTERED || tagType == EndTagType.UNREGISTERED) {       return getPreviousTag(this.source,this.begin - 1,tagType);     }     Tag tag=this;     while (tag.previousTag != NOT_CACHED) {       tag=tag.previousTag;       if (tag == null) {         return null;       }       if (tag.getTagType() == tagType) {         return tag;       }     }     return getPreviousTag(this.source,tag.begin - 1,tagType);   }   public final boolean includeInSearch(){     return !isUnregistered();   }   public static final Tag getPreviousTag(  Source source,  int pos){     return source.useAllTypesCache ? source.cache.getPreviousTag(pos) : getPreviousTagUncached(source,pos,-1);   }   public static final Tag getNextTag(  Source source,  int pos){     return source.useAllTypesCache ? source.cache.getNextTag(pos) : getNextTagUncached(source,pos,-1);   }   static final Tag getPreviousTagUncached(  Source source,  int pos,  int breakAtPos){     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.lastIndexOf(CharacterEntityReference._lt,begin,breakAtPos);         if (begin2 == -1) {           return null;         }         Tag tag=getTagAt(source,begin2,false);         if (tag == null || !tag.includeInSearch()) {           begin=begin2 - 1;         }  else {           return tag;         }       }  while (begin >= 0);       return null;     }  catch (    IndexOutOfBoundsException e) {       throw new AssertionError(""Unexpected internal exception"");     }   }   static final Tag getNextTagUncached(  Source source,  int pos,  int breakAtPos){     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.indexOf(CharacterEntityReference._lt,begin,breakAtPos);         if (begin2 == -1) {           return null;         }         Tag tag=getTagAt(source,begin2,false);         if (tag == null || !tag.includeInSearch()) {           begin=begin2 + 1;         }  else {           return tag;         }       }  while (begin < source.end);     }  catch (    IndexOutOfBoundsException e) {     }     return null;   }   public static final Tag getPreviousTag(  Source source,  int pos,  TagType tagType){     return source.useSpecialTypesCache ? source.cache.getPreviousTag(pos,tagType) : getPreviousTagUncached(source,pos,tagType,-1);   }   public static final Tag getNextTag(  Source source,  int pos,  TagType tagType){     return source.useSpecialTypesCache ? source.cache.getNextTag(pos,tagType) : getNextTagUncached(source,pos,tagType,-1);   }   public static final Tag getPreviousTagUncached(  Source source,  int pos,  TagType tagType,  int breakAtPos){     if (tagType == null) {       return getPreviousTagUncached(source,pos,breakAtPos);     }     String startDelimiter=tagType.getStartDelimiter();     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.lastIndexOf(startDelimiter,begin,breakAtPos);         if (begin2 == -1) {           return null;         }         Tag tag=getTagAt(source,begin2,false);         if (tag == null || tag.getTagType() != tagType) {           begin=begin2 - 1;         }  else {           return tag;         }       }  while (begin >= 0);       return null;     }  catch (    IndexOutOfBoundsException ex) {       throw ex;     }   }   public static final Tag getNextTagUncached(  Source source,  int pos,  TagType tagType,  int breakAtPos){     if (tagType == null) {       return getNextTagUncached(source,pos,breakAtPos);     }     String startDelimiter=tagType.getStartDelimiter();     try {       ParseText parseText=source.getParseText();       int begin=pos;       do {         int begin2=parseText.indexOf(startDelimiter,begin,breakAtPos);         if (begin2 == -1) {           return null;         }         Tag tag=getTagAt(source,begin2,false);         if (tag == null || tag.getTagType() != tagType) {           begin=begin2 + 1;         }  else {           return tag;         }       }  while (begin < source.end);     }  catch (    IndexOutOfBoundsException e) {     }     return null;   }   public static final Tag getTagAt(  Source source,  int pos,  boolean serverTagOnly){     return source.useAllTypesCache ? source.cache.getTagAt(pos,serverTagOnly) : getTagAtUncached(source,pos,serverTagOnly);   }   public static final Tag getTagAtUncached(  Source source,  int pos,  boolean serverTagOnly){     return TagType.getTagAt(source,pos,serverTagOnly,false);   }   public static final Tag[] parseAll(  Source source,  boolean assumeNoNestedTags){     int registeredTagCount=0;     int registeredStartTagCount=0;     ArrayList<Tag> list=new ArrayList<>();     source.fullSequentialParseData=new int[1];     if (source.end != 0) {       ParseText parseText=source.getParseText();       Tag tag=parseAllgetNextTag(source,parseText,0,assumeNoNestedTags);       while (tag != null) {         list.add(tag);         if (!tag.isUnregistered()) {           registeredTagCount++;           if (tag instanceof StartTag) {             registeredStartTagCount++;           }         }         int pos=(!assumeNoNestedTags || tag.isUnregistered()) ? tag.begin + 1 : tag.end;         if (pos == source.end) {           break;         }         tag=parseAllgetNextTag(source,parseText,pos,assumeNoNestedTags);       }     }     Tag[] allRegisteredTags=new Tag[registeredTagCount];     StartTag[] allRegisteredStartTags=new StartTag[registeredStartTagCount];     source.cache.loadAllTags(list,allRegisteredTags,allRegisteredStartTags);     source.allTagsArray=allRegisteredTags;     source.allTags=Arrays.asList(allRegisteredTags);     source.allStartTags=Arrays.asList(allRegisteredStartTags);     int lastIndex=allRegisteredTags.length - 1;     int i=0;     while (i < allRegisteredTags.length) {       Tag tag2=allRegisteredTags[i];       tag2.previousTag=i > 0 ? allRegisteredTags[i - 1] : null;       tag2.nextTag=i < lastIndex ? allRegisteredTags[i + 1] : null;       i++;     }     return allRegisteredTags;   }   private static final Tag parseAllgetNextTag(  Source source,  ParseText parseText,  int pos,  boolean assumeNoNestedTags){     int begin=pos;     do {       try {         int begin2=parseText.indexOf(CharacterEntityReference._lt,begin);         if (begin2 == -1) {           return null;         }         Tag tag=TagType.getTagAt(source,begin2,false,assumeNoNestedTags);         if (tag != null) {           if (!assumeNoNestedTags) {             TagType tagType=tag.getTagType();             if (tag.end > source.fullSequentialParseData[0] && tagType != StartTagType.DOCTYPE_DECLARATION && tagType != StartTagType.UNREGISTERED && tagType != EndTagType.UNREGISTERED) {               source.fullSequentialParseData[0]=(tagType == StartTagType.NORMAL && tag.name == HTMLElementName.SCRIPT) ? Integer.MAX_VALUE : tag.end;               return tag;             }             return tag;           }           return tag;         }         begin=begin2 + 1;       }  catch (      IndexOutOfBoundsException e) {       }     }  while (begin < source.end);     return null;   }   public void orphan(){     this.nextTag=NOT_CACHED;   }   public boolean isOrphaned(){     return this.source.wasFullSequentialParseCalled() && this.nextTag == NOT_CACHED;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TagIterator.code","public final class TagIterator implements Iterator<Tag> {   private int i=0;   private Tag nextTag;   public TagIterator(){     loadNextTag();   }   @Override public boolean hasNext(){     return this.nextTag != null;   }   @Override public Tag next(){     Tag result=this.nextTag;     loadNextTag();     return result;   }   @Override public void remove(){     throw new UnsupportedOperationException();   }   private void loadNextTag(){     Tag tag;     do {       int i=this.i + 1;       this.i=i;       if (i <= SubCache.this.lastIndex()) {         tag=SubCache.this.array[this.i].tag;         this.nextTag=tag;       }  else {         return;       }     }  while (tag == null);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TagType.code","public abstract class TagType {   private final String closingDelimiter;   private final String description;   private final boolean isServerTag;   private final String namePrefix;   private final String startDelimiter;   final String startDelimiterPrefix;   protected abstract Tag constructTagAt(  Source source,  int i);   public TagType(  String description,  String startDelimiter,  String closingDelimiter,  boolean isServerTag,  String startDelimiterPrefix){     this.description=description;     this.startDelimiter=startDelimiter;     this.closingDelimiter=closingDelimiter;     this.isServerTag=isServerTag;     this.namePrefix=startDelimiter.substring(startDelimiterPrefix.length());     this.startDelimiterPrefix=startDelimiterPrefix;   }   public final void register(){     TagTypeRegister.add(this);   }   public final void deregister(){     TagTypeRegister.remove(this);   }   public static final List<TagType> getRegisteredTagTypes(){     return TagTypeRegister.getList();   }   public final String getDescription(){     return this.description;   }   public final String getStartDelimiter(){     return this.startDelimiter;   }   public final String getClosingDelimiter(){     return this.closingDelimiter;   }   public final boolean isServerTag(){     return this.isServerTag;   }   public final String getNamePrefix(){     return this.namePrefix;   }   protected boolean isValidPosition(  Source source,  int pos,  int[] fullSequentialParseData){     if (isServerTag()) {       return true;     }     if (fullSequentialParseData != null) {       if (fullSequentialParseData[0] != Integer.MAX_VALUE) {         return pos >= fullSequentialParseData[0];       }       if (this == EndTagType.NORMAL && source.getParseText().containsAt(""</script"",pos)) {         fullSequentialParseData[0]=pos;         return true;       }       if (this != StartTagType.COMMENT) {         return false;       }       fullSequentialParseData[0]=pos;       return true;     }     TagType[] tagTypesIgnoringEnclosedMarkup=getTagTypesIgnoringEnclosedMarkup();     for (    TagType tagTypeIgnoringEnclosedMarkup : tagTypesIgnoringEnclosedMarkup) {       if (!(this == StartTagType.COMMENT && tagTypeIgnoringEnclosedMarkup == StartTagType.COMMENT) && tagTypeIgnoringEnclosedMarkup.tagEncloses(source,pos)) {         return false;       }     }     return true;   }   public static final TagType[] getTagTypesIgnoringEnclosedMarkup(){     return TagTypesIgnoringEnclosedMarkup.array;   }   public static final void setTagTypesIgnoringEnclosedMarkup(  TagType[] tagTypes){     if (tagTypes == null) {       throw new IllegalArgumentException();     }     TagTypesIgnoringEnclosedMarkup.array=tagTypes;   }   protected final boolean tagEncloses(  Source source,  int pos){     Tag enclosingTag;     return (pos == 0 || (enclosingTag=source.getEnclosingTag(pos + (-1),this)) == null || pos == enclosingTag.getEnd()) ? false : true;   }   public String toString(){     return getDescription();   }   public static final Tag getTagAt(  Source source,  int pos,  boolean serverTagOnly,  boolean assumeNoNestedTags){     TagTypeRegister.ProspectiveTagTypeIterator prospectiveTagTypeIterator=new TagTypeRegister.ProspectiveTagTypeIterator(source,pos);     while (prospectiveTagTypeIterator.hasNext()) {       TagType tagType=prospectiveTagTypeIterator.next();       if (!serverTagOnly || tagType.isServerTag()) {         if (assumeNoNestedTags || tagType.isValidPosition(source,pos,source.fullSequentialParseData)) {           try {             Tag tag=tagType.constructTagAt(source,pos);             if (tag != null) {               return tag;             }           }  catch (          IndexOutOfBoundsException e) {             if (source.logger.isInfoEnabled()) {               source.logger.info(source.getRowColumnVector(pos).appendTo(new StringBuilder(200).append(""Tag at "")).append("" not recognised as type '"").append(tagType.getDescription()).append(""' because it has no end delimiter"").toString());             }           }         }       }     }     return null;   } public static final class TagTypesIgnoringEnclosedMarkup {     public static TagType[] array={StartTagType.COMMENT,StartTagType.CDATA_SECTION};     private TagTypesIgnoringEnclosedMarkup(){     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TagTypeRegister.code","public final class TagTypeRegister {   private static final char NULL_CHAR=0;   private static final TagType[] DEFAULT_TAG_TYPES={StartTagType.UNREGISTERED,StartTagType.NORMAL,StartTagType.COMMENT,StartTagType.MARKUP_DECLARATION,StartTagType.DOCTYPE_DECLARATION,StartTagType.CDATA_SECTION,StartTagType.XML_PROCESSING_INSTRUCTION,StartTagType.XML_DECLARATION,StartTagType.SERVER_COMMON,StartTagType.SERVER_COMMON_ESCAPED,EndTagType.UNREGISTERED,EndTagType.NORMAL};   private static TagTypeRegister root=new TagTypeRegister();   private TagTypeRegister parent=null;   private char ch=0;   private TagTypeRegister[] children=null;   private TagType[] tagTypes=null; static {     add(DEFAULT_TAG_TYPES);   }   private TagTypeRegister(){   }   private static synchronized void add(  TagType[] tagTypes){ synchronized (TagTypeRegister.class) {       for (      TagType tagType : tagTypes) {         add(tagType);       }     }   }   public static synchronized void add(  TagType tagType){ synchronized (TagTypeRegister.class) {       TagTypeRegister cursor=root;       String startDelimiter=tagType.getStartDelimiter();       for (int i=0; i < startDelimiter.length(); i++) {         char ch=startDelimiter.charAt(i);         TagTypeRegister child=cursor.getChild(ch);         if (child == null) {           child=new TagTypeRegister();           child.parent=cursor;           child.ch=ch;           cursor.addChild(child);         }         cursor=child;       }       cursor.addTagType(tagType);     }   }   public static synchronized void remove(  net.htmlparser.jericho.TagType r7){     throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.TagTypeRegister.remove(net.htmlparser.jericho.TagType):void"");   }   public static List<TagType> getList(){     ArrayList<TagType> list=new ArrayList<>();     root.addTagTypesToList(list);     return list;   }   private void addTagTypesToList(  List<TagType> list){     if (this.tagTypes != null) {       for (int i=this.tagTypes.length - 1; i >= 0; i--) {         list.add(this.tagTypes[i]);       }     }     if (this.children != null) {       TagTypeRegister[] arr$=this.children;       for (      TagTypeRegister tagTypeRegister : arr$) {         tagTypeRegister.addTagTypesToList(list);       }     }   }   public static final String getDebugInfo(){     return root.appendDebugInfo(new StringBuilder(),0).toString();   } public static final class ProspectiveTagTypeIterator implements Iterator<TagType> {     private TagTypeRegister cursor;     private int tagTypeIndex=0;     public ProspectiveTagTypeIterator(    Source source,    int pos){       ParseText parseText=source.getParseText();       this.cursor=TagTypeRegister.root;       int posIndex=0;       while (true) {         try {           int posIndex2=posIndex;           posIndex=posIndex2 + 1;           try {             TagTypeRegister child=this.cursor.getChild(parseText.charAt(pos + posIndex2));             if (child == null) {               break;             }  else {               this.cursor=child;             }           }  catch (          IndexOutOfBoundsException e) {           }         }  catch (        IndexOutOfBoundsException e2) {         }       }       while (this.cursor.tagTypes == null) {         TagTypeRegister tagTypeRegister=this.cursor.parent;         this.cursor=tagTypeRegister;         if (tagTypeRegister == null) {           return;         }       }     }     @Override public boolean hasNext(){       return this.cursor != null;     }     @Override public TagType next(){       TagType[] tagTypes=this.cursor.tagTypes;       TagType nextTagType=tagTypes[this.tagTypeIndex];       int i=this.tagTypeIndex + 1;       this.tagTypeIndex=i;       if (i == tagTypes.length) {         this.tagTypeIndex=0;         do {           this.cursor=this.cursor.parent;           if (this.cursor == null) {             break;           }         }  while (this.cursor.tagTypes == null);       }       return nextTagType;     }     @Override public void remove(){       throw new UnsupportedOperationException();     }   }   public String toString(){     return appendDebugInfo(new StringBuilder(),0).toString();   }   private StringBuilder appendDebugInfo(  StringBuilder sb,  int level){     for (int i=0; i < level; i++) {       sb.append("" "");     }     if (this.ch != 0) {       sb.append(this.ch).append(' ');     }     if (this.tagTypes != null) {       sb.append('(');       TagType[] arr$=this.tagTypes;       for (      TagType tagType : arr$) {         sb.append(tagType.getDescription()).append("", "");       }       sb.setLength(sb.length() - 2);       sb.append(')');     }     sb.append(Config.NewLine);     if (this.children != null) {       int childLevel=level + 1;       TagTypeRegister[] arr$2=this.children;       for (      TagTypeRegister tagTypeRegister : arr$2) {         tagTypeRegister.appendDebugInfo(sb,childLevel);       }     }     return sb;   }   public TagTypeRegister getChild(  char ch){     if (this.children == null) {       return null;     }     if (this.children.length == 1) {       if (this.children[0].ch == ch) {         return this.children[0];       }       return null;     }     int low=0;     int high=this.children.length - 1;     while (low <= high) {       int mid=(low + high) >> 1;       char midChar=this.children[mid].ch;       if (midChar < ch) {         low=mid + 1;       }  else       if (midChar > ch) {         high=mid - 1;       }  else {         return this.children[mid];       }     }     return null;   }   private void addChild(  TagTypeRegister child){     if (this.children == null) {       this.children=new TagTypeRegister[]{child};       return;     }     TagTypeRegister[] newChildren=new TagTypeRegister[this.children.length + 1];     int i=0;     while (i < this.children.length && this.children[i].ch <= child.ch) {       newChildren[i]=this.children[i];       i++;     }     newChildren[i]=child;     for (int i2=i + 1; i2 < newChildren.length; i2++) {       newChildren[i2]=this.children[i2 - 1];     }     this.children=newChildren;   }   private void removeChild(  TagTypeRegister child){     if (this.children.length == 1) {       this.children=null;       return;     }     TagTypeRegister[] newChildren=new TagTypeRegister[this.children.length - 1];     int offset=0;     for (int i=0; i < this.children.length; i++) {       if (this.children[i] == child) {         offset=-1;       }  else {         newChildren[i + offset]=this.children[i];       }     }     this.children=newChildren;   }   private int indexOfTagType(  TagType tagType){     if (this.tagTypes == null) {       return -1;     }     for (int i=0; i < this.tagTypes.length; i++) {       if (this.tagTypes[i] == tagType) {         return i;       }     }     return -1;   }   private void addTagType(  TagType tagType){     int indexOfTagType=indexOfTagType(tagType);     if (indexOfTagType == -1) {       if (this.tagTypes == null) {         this.tagTypes=new TagType[]{tagType};         return;       }       TagType[] newTagTypes=new TagType[this.tagTypes.length + 1];       newTagTypes[0]=tagType;       for (int i=0; i < this.tagTypes.length; i++) {         newTagTypes[i + 1]=this.tagTypes[i];       }       this.tagTypes=newTagTypes;       return;     }     for (int i2=indexOfTagType; i2 > 0; i2--) {       this.tagTypes[i2]=this.tagTypes[i2 - 1];     }     this.tagTypes[0]=tagType;   }   private void removeTagType(  TagType tagType){     int indexOfTagType=indexOfTagType(tagType);     if (indexOfTagType != -1) {       if (this.tagTypes.length == 1) {         this.tagTypes=null;         return;       }       TagType[] newTagTypes=new TagType[this.tagTypes.length - 1];       for (int i=0; i < indexOfTagType; i++) {         newTagTypes[i]=this.tagTypes[i];       }       for (int i2=indexOfTagType; i2 < newTagTypes.length; i2++) {         newTagTypes[i2]=this.tagTypes[i2 + 1];       }       this.tagTypes=newTagTypes;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TagTypesIgnoringEnclosedMarkup.code","public static final class TagTypesIgnoringEnclosedMarkup {   public static TagType[] array={StartTagType.COMMENT,StartTagType.CDATA_SECTION};   private TagTypesIgnoringEnclosedMarkup(){   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TD_ElementHandler.code","private static class TD_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new TD_ElementHandler();   private TD_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     if (!x.isStartOfBlock()) {       x.append(x.tableCellSeparator);     }     x.lastCharWhiteSpace=Processor.$assertionsDisabled;     x.appendElementContent(element);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TextAreaFormControl.code","public static final class TextAreaFormControl extends FormControl {   private static final String UNCHANGED=new String();   public String value;   public TextAreaFormControl(  Element element){     super(element,FormControlType.TEXTAREA,false);     this.value=UNCHANGED;   }   @Override public boolean setValue(  String value){     this.value=value;     return true;   }   @Override void addValuesTo(  Collection<String> collection){     FormControl.addValueTo(collection,getValue());   }   @Override void addToFormFields(  FormFields formFields){     formFields.add((FormControl)this);   }   @Override void replaceInOutputDocument(  OutputDocument outputDocument){     if (this.outputStyle == FormControlOutputStyle.REMOVE) {       outputDocument.remove(getElement());       return;     }     if (this.outputStyle == FormControlOutputStyle.DISPLAY_VALUE) {       outputDocument.replace(getElement(),getDisplayValueHTML(getValue(),true));       return;     }     replaceAttributesInOutputDocumentIfModified(outputDocument);     if (this.value != UNCHANGED) {       outputDocument.replace(getElement().getContent(),CharacterReference.encode(this.value));     }   }   private String getValue(){     return this.value == UNCHANGED ? CharacterReference.decode(getElement().getContent()) : this.value;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TextExtractor.code","public class TextExtractor implements CharStreamSource {   private final Segment segment;   private static Map<String,AttributeIncludeChecker> map=initDefaultAttributeIncludeCheckerMap();   private static AttributeIncludeChecker ALWAYS_INCLUDE=new AttributeIncludeChecker(){     @Override public boolean includeAttribute(    StartTag startTag,    Attribute attribute){       return true;     }   } ;   private static AttributeIncludeChecker INCLUDE_IF_NAME_ATTRIBUTE_PRESENT=new AttributeIncludeChecker(){     @Override public boolean includeAttribute(    StartTag startTag,    Attribute attribute){       return startTag.getAttributes().get(""name"") != null;     }   } ;   private boolean convertNonBreakingSpaces=Config.ConvertNonBreakingSpaces;   private boolean includeAttributes=false;   private boolean excludeNonHTMLElements=false; public interface AttributeIncludeChecker {     boolean includeAttribute(    StartTag startTag,    Attribute attribute);   }   public TextExtractor(  Segment segment){     this.segment=segment;   }   @Override public void writeTo(  Writer writer) throws IOException {     appendTo(writer);     writer.flush();   }   @Override public void appendTo(  Appendable appendable) throws IOException {     appendable.append(toString());   }   @Override public long getEstimatedMaximumOutputLength(){     return this.segment.length();   }   @Override public String toString(){     return new Processor(this.segment,getConvertNonBreakingSpaces(),getIncludeAttributes(),getExcludeNonHTMLElements()).toString();   }   public TextExtractor setConvertNonBreakingSpaces(  boolean convertNonBreakingSpaces){     this.convertNonBreakingSpaces=convertNonBreakingSpaces;     return this;   }   public boolean getConvertNonBreakingSpaces(){     return this.convertNonBreakingSpaces;   }   public TextExtractor setIncludeAttributes(  boolean includeAttributes){     this.includeAttributes=includeAttributes;     return this;   }   public boolean getIncludeAttributes(){     return this.includeAttributes;   }   public boolean includeAttribute(  StartTag startTag,  Attribute attribute){     AttributeIncludeChecker attributeIncludeChecker=map.get(attribute.getKey());     if (attributeIncludeChecker == null) {       return false;     }     return attributeIncludeChecker.includeAttribute(startTag,attribute);   }   public TextExtractor setExcludeNonHTMLElements(  boolean excludeNonHTMLElements){     this.excludeNonHTMLElements=excludeNonHTMLElements;     return this;   }   public boolean getExcludeNonHTMLElements(){     return this.excludeNonHTMLElements;   }   public boolean excludeElement(  StartTag startTag){     return false;   }   private static Map<String,AttributeIncludeChecker> initDefaultAttributeIncludeCheckerMap(){     Map<String,AttributeIncludeChecker> map2=new HashMap<>();     map2.put(HTMLElementName.TITLE,ALWAYS_INCLUDE);     map2.put(""alt"",ALWAYS_INCLUDE);     map2.put(HTMLElementName.LABEL,ALWAYS_INCLUDE);     map2.put(""summary"",ALWAYS_INCLUDE);     map2.put(""content"",INCLUDE_IF_NAME_ATTRIBUTE_PRESENT);     map2.put(""href"",ALWAYS_INCLUDE);     return map2;   } public final class Processor {     private final boolean convertNonBreakingSpaces;     private final boolean excludeNonHTMLElements;     private final boolean includeAttributes;     private final Segment segment;     private final Source source;     public Processor(    Segment segment,    boolean convertNonBreakingSpaces,    boolean includeAttributes,    boolean excludeNonHTMLElements){       this.segment=segment;       this.source=segment.source;       this.convertNonBreakingSpaces=convertNonBreakingSpaces;       this.includeAttributes=includeAttributes;       this.excludeNonHTMLElements=excludeNonHTMLElements;     }     public String toString(){       StringBuilder sb=new StringBuilder(this.segment.length());       NodeIterator nodeIterator=new NodeIterator(this.segment);       while (nodeIterator.hasNext()) {         Segment segment=nodeIterator.next();         if (segment instanceof Tag) {           Tag tag=(Tag)segment;           if (tag.getTagType().isServerTag()) {             Element element=tag.getElement();             if (element != null && element.getEnd() > tag.getEnd()) {               nodeIterator.skipToPos(element.getEnd());             }           }  else {             if (tag.getTagType() == StartTagType.NORMAL) {               StartTag startTag=(StartTag)tag;               if (tag.name == HTMLElementName.SCRIPT || tag.name == HTMLElementName.STYLE || TextExtractor.this.excludeElement(startTag) || (this.excludeNonHTMLElements && !HTMLElements.getElementNames().contains(tag.name))) {                 nodeIterator.skipToPos(startTag.getElement().getEnd());               }  else               if (this.includeAttributes) {                 Iterator i$=startTag.getAttributes().iterator();                 while (i$.hasNext()) {                   Attribute attribute=i$.next();                   if (TextExtractor.this.includeAttribute(startTag,attribute)) {                     sb.append(' ').append((CharSequence)attribute.getValueSegment()).append(' ');                   }                 }               }             }             if (tag.getName() == HTMLElementName.BR || !HTMLElements.getInlineLevelElementNames().contains(tag.getName())) {               sb.append(' ');             }           }         }  else {           sb.append((CharSequence)segment);         }       }       String decodedText=CharacterReference.decodeCollapseWhiteSpace(sb,this.convertNonBreakingSpaces);       return decodedText;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\TR_ElementHandler.code","private static class TR_ElementHandler implements ElementHandler {   public static final ElementHandler INSTANCE=new TR_ElementHandler();   private TR_ElementHandler(){   }   @Override public void process(  Processor x,  Element element) throws IOException {     x.blockBoundary(0);     x.appendElementContent(element);     x.blockBoundary(0);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\UnterminatedCharacterReferenceSettings.code","public static class UnterminatedCharacterReferenceSettings {   public static UnterminatedCharacterReferenceSettings ACCEPT_ALL=new UnterminatedCharacterReferenceSettings(CompatibilityMode.CODE_POINTS_ALL,CompatibilityMode.CODE_POINTS_ALL,CompatibilityMode.CODE_POINTS_ALL);   public volatile int characterEntityReferenceMaxCodePoint;   public volatile int decimalCharacterReferenceMaxCodePoint;   public volatile int hexadecimalCharacterReferenceMaxCodePoint;   public UnterminatedCharacterReferenceSettings(){     this(-1,-1,-1);   }   public UnterminatedCharacterReferenceSettings(  int characterEntityReferenceMaxCodePoint,  int decimalCharacterReferenceMaxCodePoint,  int hexadecimalCharacterReferenceMaxCodePoint){     this.characterEntityReferenceMaxCodePoint=characterEntityReferenceMaxCodePoint;     this.decimalCharacterReferenceMaxCodePoint=decimalCharacterReferenceMaxCodePoint;     this.hexadecimalCharacterReferenceMaxCodePoint=hexadecimalCharacterReferenceMaxCodePoint;   }   public String toString(){     return Config.NewLine + ""    Character entity reference: "" + getDescription(this.characterEntityReferenceMaxCodePoint)+ Config.NewLine+ ""    Decimal character reference: ""+ getDescription(this.decimalCharacterReferenceMaxCodePoint)+ Config.NewLine+ ""    Haxadecimal character reference: ""+ getDescription(this.hexadecimalCharacterReferenceMaxCodePoint);   }   private String getDescription(  int codePoint){     return codePoint == -1 ? ""None"" : codePoint == 1114111 ? ""All"" : ""0x"" + Integer.toString(codePoint,16);   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\Util.code","public final class Util {   private static final int BUFFER_SIZE=2048;   private static final String CSVNewLine=System.getProperty(""line.separator"");   private Util(){   }   public static String getString(  Reader reader) throws IOException {     if (reader == null) {       return """";     }     try {       char[] copyBuffer=new char[2048];       StringBuilder sb=new StringBuilder();       while (true) {         int charsRead=reader.read(copyBuffer,0,2048);         if (charsRead != -1) {           sb.append(copyBuffer,0,charsRead);         }  else {           return sb.toString();         }       }     }   finally {       reader.close();     }   }   public static void outputCSVLine(  Writer writer,  String[] values) throws IOException {     int i=0;     while (i < values.length) {       String value=values[i];       if (value != null) {         if (value == Config.ColumnValueTrue || value == Config.ColumnValueFalse) {           writer.write(value);         }  else {           writer.write(34);           outputValueEscapeQuotes(writer,value);           writer.write(34);         }       }       i++;       if (i != values.length) {         writer.write(44);       }     }     writer.write(CSVNewLine);   }   private static void outputValueEscapeQuotes(  Writer writer,  String text) throws IOException {     for (int i=0; i < text.length(); i++) {       char ch=text.charAt(i);       writer.write(ch);       if (ch == '\""') {         writer.write(ch);       }     }   }   static char[] getConcatenatedCharArray(  String string1,  String string2){     char[] charArray=new char[string1.length() + string2.length()];     string1.getChars(0,string1.length(),charArray,0);     string2.getChars(0,string2.length(),charArray,string1.length());     return charArray;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho\WriterLogger.code","public class WriterLogger implements Logger {   private boolean debugEnabled;   private boolean errorEnabled;   private boolean infoEnabled;   private final String name;   private boolean warnEnabled;   private final Writer writer;   public WriterLogger(  Writer writer){     this(writer,Source.PACKAGE_NAME);   }   public WriterLogger(  Writer writer,  String name){     this.errorEnabled=true;     this.warnEnabled=true;     this.infoEnabled=true;     this.debugEnabled=true;     this.writer=writer;     this.name=name;   }   public Writer getWriter(){     return this.writer;   }   public String getName(){     return this.name;   }   @Override public void error(  String message){     if (isErrorEnabled()) {       log(""ERROR"",message);     }   }   @Override public void warn(  String message){     if (isWarnEnabled()) {       log(""WARN"",message);     }   }   @Override public void info(  String message){     if (isInfoEnabled()) {       log(""INFO"",message);     }   }   @Override public void debug(  String message){     if (isDebugEnabled()) {       log(""DEBUG"",message);     }   }   @Override public boolean isErrorEnabled(){     return this.errorEnabled;   }   public void setErrorEnabled(  boolean errorEnabled){     this.errorEnabled=errorEnabled;   }   @Override public boolean isWarnEnabled(){     return this.warnEnabled;   }   public void setWarnEnabled(  boolean warnEnabled){     this.warnEnabled=warnEnabled;   }   @Override public boolean isInfoEnabled(){     return this.infoEnabled;   }   public void setInfoEnabled(  boolean infoEnabled){     this.infoEnabled=infoEnabled;   }   @Override public boolean isDebugEnabled(){     return this.debugEnabled;   }   public void setDebugEnabled(  boolean debugEnabled){     this.debugEnabled=debugEnabled;   }   protected void log(  String level,  String message){     try {       this.writer.write(BasicLogFormatter.format(level,message,this.name));       this.writer.flush();     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho.nodoc\SequentialListSegment.code","public abstract class SequentialListSegment<E> extends Segment implements List<E> {   public abstract int getCount();   public abstract ListIterator<E> listIterator(  int i);   public SequentialListSegment(  Source source,  int begin,  int end){     super(source,begin,end);   }   @Override public E get(  int index){     ListIterator<E> li=listIterator(index);     try {       return li.next();     }  catch (    NoSuchElementException e) {       throw new IndexOutOfBoundsException(""index="" + index);     }   }   @Override public int size(){     return getCount();   }   @Override public boolean isEmpty(){     return getCount() == 0;   }   @Override public boolean contains(  Object o){     return indexOf(o) >= 0;   }   @Override public Object[] toArray(){     Object[] array=new Object[getCount()];     int x=0;     Iterator i$=iterator();     while (i$.hasNext()) {       E e=i$.next();       array[x]=e;       x++;     }     return array;   }   @Override public <T>T[] toArray(  T[] tArr){     int count=getCount();     if (tArr.length < count) {       tArr=(T[])((Object[])Array.newInstance(tArr.getClass().getComponentType(),count));     }     int i=0;     Iterator<E> it=iterator();     while (it.hasNext()) {       tArr[i]=it.next();       i++;     }     if (tArr.length > count) {       tArr[count]=null;     }     return tArr;   }   @Override public boolean remove(  Object o){     throw new UnsupportedOperationException();   }   @Override public boolean containsAll(  Collection<?> collection){     for (    Object o : collection) {       if (!contains(o)) {         return false;       }     }     return true;   }   @Override public boolean addAll(  Collection<? extends E> collection){     throw new UnsupportedOperationException();   }   @Override public boolean removeAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public boolean retainAll(  Collection<?> collection){     throw new UnsupportedOperationException();   }   @Override public boolean add(  E e){     throw new UnsupportedOperationException();   }   @Override public E set(  int index,  E element){     throw new UnsupportedOperationException();   }   @Override public void add(  int index,  E element){     throw new UnsupportedOperationException();   }   @Override public E remove(  int index){     throw new UnsupportedOperationException();   }   @Override public int indexOf(  java.lang.Object r3){     throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.nodoc.SequentialListSegment.indexOf(java.lang.Object):int"");   }   @Override public int lastIndexOf(  java.lang.Object r3){     throw new UnsupportedOperationException(""Method not decompiled: net.htmlparser.jericho.nodoc.SequentialListSegment.lastIndexOf(java.lang.Object):int"");   }   @Override public void clear(){     throw new UnsupportedOperationException();   }   @Override public boolean addAll(  int index,  Collection<? extends E> collection){     throw new UnsupportedOperationException();   }   public Iterator<E> iterator(){     return listIterator();   }   @Override public ListIterator<E> listIterator(){     return listIterator(0);   }   @Override public List<E> subList(  int fromIndex,  int toIndex){     return new SubList(this,fromIndex,toIndex);   } public static class SubList<E> extends AbstractList<E> {     private final List<E> list;     private final int offset;     private final int size;     SubList(    List<E> list,    int fromIndex,    int toIndex){       if (fromIndex < 0) {         throw new IndexOutOfBoundsException(""fromIndex="" + fromIndex);       }       if (toIndex > list.size()) {         throw new IndexOutOfBoundsException(""toIndex="" + toIndex);       }       if (fromIndex > toIndex) {         throw new IllegalArgumentException(""fromIndex("" + fromIndex + "") > toIndex(""+ toIndex+ "")"");       }       this.list=list;       this.offset=fromIndex;       this.size=toIndex - fromIndex;     }     @Override public E get(    int index){       return this.list.get(getSuperListIndex(index));     }     @Override public int size(){       return this.size;     }     @Override public Iterator<E> iterator(){       return listIterator();     }     @Override public ListIterator<E> listIterator(    final int index){       return new ListIterator<E>(){         private final ListIterator<E> i; {           this.i=SubList.this.list.listIterator(SubList.this.getSuperListIndex(index));         }         @Override public boolean hasNext(){           return nextIndex() < SubList.this.size;         }         @Override public E next(){           if (hasNext()) {             return this.i.next();           }           throw new NoSuchElementException();         }         @Override public boolean hasPrevious(){           return previousIndex() >= 0;         }         @Override public E previous(){           if (hasPrevious()) {             return this.i.previous();           }           throw new NoSuchElementException();         }         @Override public int nextIndex(){           return this.i.nextIndex() - SubList.this.offset;         }         @Override public int previousIndex(){           return this.i.previousIndex() - SubList.this.offset;         }         @Override public void remove(){           throw new UnsupportedOperationException();         }         @Override public void set(        E o){           throw new UnsupportedOperationException();         }         @Override public void add(        E o){           throw new UnsupportedOperationException();         }       } ;     }     @Override public List<E> subList(    int fromIndex,    int toIndex){       return new SubList(this,fromIndex,toIndex);     }     public int getSuperListIndex(    int index){       if (index < 0 || index >= this.size) {         throw new IndexOutOfBoundsException(""index="" + index + "", size=""+ this.size);       }       return this.offset + index;     }   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\net.htmlparser.jericho.nodoc\SubList.code","public static class SubList<E> extends AbstractList<E> {   private final List<E> list;   private final int offset;   private final int size;   SubList(  List<E> list,  int fromIndex,  int toIndex){     if (fromIndex < 0) {       throw new IndexOutOfBoundsException(""fromIndex="" + fromIndex);     }     if (toIndex > list.size()) {       throw new IndexOutOfBoundsException(""toIndex="" + toIndex);     }     if (fromIndex > toIndex) {       throw new IllegalArgumentException(""fromIndex("" + fromIndex + "") > toIndex(""+ toIndex+ "")"");     }     this.list=list;     this.offset=fromIndex;     this.size=toIndex - fromIndex;   }   @Override public E get(  int index){     return this.list.get(getSuperListIndex(index));   }   @Override public int size(){     return this.size;   }   @Override public Iterator<E> iterator(){     return listIterator();   }   @Override public ListIterator<E> listIterator(  final int index){     return new ListIterator<E>(){       private final ListIterator<E> i; {         this.i=SubList.this.list.listIterator(SubList.this.getSuperListIndex(index));       }       @Override public boolean hasNext(){         return nextIndex() < SubList.this.size;       }       @Override public E next(){         if (hasNext()) {           return this.i.next();         }         throw new NoSuchElementException();       }       @Override public boolean hasPrevious(){         return previousIndex() >= 0;       }       @Override public E previous(){         if (hasPrevious()) {           return this.i.previous();         }         throw new NoSuchElementException();       }       @Override public int nextIndex(){         return this.i.nextIndex() - SubList.this.offset;       }       @Override public int previousIndex(){         return this.i.previousIndex() - SubList.this.offset;       }       @Override public void remove(){         throw new UnsupportedOperationException();       }       @Override public void set(      E o){         throw new UnsupportedOperationException();       }       @Override public void add(      E o){         throw new UnsupportedOperationException();       }     } ;   }   @Override public List<E> subList(  int fromIndex,  int toIndex){     return new SubList(this,fromIndex,toIndex);   }   public int getSuperListIndex(  int index){     if (index < 0 || index >= this.size) {       throw new IndexOutOfBoundsException(""index="" + index + "", size=""+ this.size);     }     return this.offset + index;   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\test.adlib.project.ads\SubAdlibAdViewAdam.code","public class SubAdlibAdViewAdam extends SubAdlibAdViewCore {   protected AdView ad;   String adamID;   protected boolean bGotAd;   public SubAdlibAdViewAdam(  Context context){     this(context,null);   }   public SubAdlibAdViewAdam(  Context context,  AttributeSet attrs){     super(context,attrs);     this.bGotAd=false;     this.adamID=""ADAM_ID"";     initAdamView();   }   public void initAdamView(){     this.ad=new AdView(getContext());     this.ad.setClientId(""9a37Z09T1481a1e3aa1"");     this.ad.setRequestInterval(12);     int adHeight=(int)TypedValue.applyDimension(1,48.0f,getResources().getDisplayMetrics());     LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(-1,adHeight);     this.ad.setLayoutParams(params);     this.ad.setOnAdLoadedListener(new AdView.OnAdLoadedListener(){       @Override public void OnAdLoaded(){         SubAdlibAdViewAdam.this.bGotAd=true;         SubAdlibAdViewAdam.this.gotAd();       }     } );     this.ad.setOnAdFailedListener(new AdView.OnAdFailedListener(){       @Override public void OnAdFailed(      AdError arg0,      String arg1){         SubAdlibAdViewAdam.this.bGotAd=true;         SubAdlibAdViewAdam.this.failed();       }     } );     addView(this.ad);   }   @Override public void query(){     this.bGotAd=false;     if (this.ad == null) {       initAdamView();     }     queryAd();     this.ad.resume();     Handler adHandler=new Handler();     adHandler.postDelayed(new Runnable(){       @Override public void run(){         if (!SubAdlibAdViewAdam.this.bGotAd) {           if (SubAdlibAdViewAdam.this.ad != null) {             SubAdlibAdViewAdam.this.ad.pause();           }           SubAdlibAdViewAdam.this.failed();         }       }     } ,3000L);   }   @Override public void clearAdView(){     if (this.ad != null) {       removeView(this.ad);       this.ad.destroy();       this.ad=null;     }     super.clearAdView();   }   @Override public void onResume(){     if (this.ad != null) {       this.ad.resume();     }     super.onResume();   }   @Override public void onPause(){     if (this.ad != null) {       this.ad.pause();     }     super.onPause();   }   @Override public void onDestroy(){     if (this.ad != null) {       this.ad.destroy();       this.ad=null;     }     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/002CFAA669F20C72304E25AEAE220B28DD9AA9C7CFDB9205EF9156F03AC252D1\test.adlib.project.ads\SubAdlibAdViewCauly.code","public class SubAdlibAdViewCauly extends SubAdlibAdViewCore implements CaulyAdViewListener {   protected CaulyAdView ad;   protected boolean bGotAd;   String caulyID;   protected boolean isAdAvailable;   public SubAdlibAdViewCauly(  Context context){     this(context,null);   }   public SubAdlibAdViewCauly(  Context context,  AttributeSet attrs){     super(context,attrs);     this.bGotAd=false;     this.isAdAvailable=false;     this.caulyID=""NR0zOioD"";     initCaulyView();   }   public void initCaulyView(){     CaulyAdInfo ai=new CaulyAdInfoBuilder(this.caulyID).effect(""None"").bannerHeight(""Proportional"").build();     this.ad=new CaulyAdView(getContext());     this.ad.setAdInfo(ai);     this.ad.setVisibility(8);     this.ad.setAdViewListener(this);     addView(this.ad);   }   @Override public void onReceiveAd(  CaulyAdView adView,  boolean isChargeableAd){     this.isAdAvailable=true;     this.bGotAd=true;     if (isChargeableAd) {       try {         if (this.ad != null) {           this.ad.setVisibility(0);         }         gotAd();         return;       }  catch (      Exception e) {         failed();         return;       }     }     failed();   }   @Override public void onCloseLandingScreen(  CaulyAdView arg0){   }   @Override public void onFailedToReceiveAd(  CaulyAdView arg0,  int arg1,  String arg2){     this.bGotAd=true;     failed();   }   @Override public void onShowLandingScreen(  CaulyAdView arg0){   }   @Override public void query(){     this.bGotAd=false;     if (this.ad == null) {       initCaulyView();     }     queryAd();     this.ad.reload();     Handler adHandler=new Handler();     adHandler.postDelayed(new Runnable(){       @Override public void run(){         if (!SubAdlibAdViewCauly.this.bGotAd) {           if (SubAdlibAdViewCauly.this.ad != null) {             SubAdlibAdViewCauly.this.ad.pause();           }           SubAdlibAdViewCauly.this.failed();         }       }     } ,3000L);   }   @Override public void clearAdView(){     if (this.ad != null) {       this.ad.setVisibility(8);       removeView(this.ad);       this.ad.destroy();       this.ad=null;     }     super.clearAdView();   }   @Override public void onDestroy(){     if (this.ad != null) {       this.ad.destroy();       this.ad=null;     }     super.onDestroy();   }   @Override public void onResume(){     if (this.ad != null) {       if (!this.isAdAvailable) {         removeView(this.ad);         this.ad.destroy();         this.ad=null;         initCaulyView();       }       this.ad.reload();     }     super.onResume();   }   @Override public void onPause(){     if (this.ad != null) {       this.ad.pause();     }     super.onPause();   } } "
